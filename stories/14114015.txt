This Gradle plugin allows a project to build against multiple versions of scala. You declare a list of scala versions via a project property (e.g. ), and then declare dependencies like this:

Now when you run gradle tasks, they'll run once for each scala version. If you wish, you can also control which scala versions get executed by default and override the default from the command line. Your jar file will also get the appropriate suffix added (e.g. ).

There's also a blog post about the plugin here.

First, add the appropriate buildscript repository and dependency:

Then apply the plugin using either the old style:

...or the new style:

It's also available via plugins.gradle.org.

For multi-project builds, it is recommended to apply the plugin individually to each relevant project/subproject.

Before use, you need to indicate which versions of scala you want to compile for by setting a Gradle property called . It should be a comma-separated list (whitespace optional) of fully-qualified (X.Y.Z) scala version numbers. The easiest way to add this property is probably to add something like this to your file:

Although you could also set (or override) it via the command line:

For multiproject builds, it is recommended that you set in your root . Building subprojects for different versions of scala is not supported.

The plugin allows you to use two different placeholders when declaring your dependencies which will then be substituted with actual values before being resolved. The first is and can be used as a version number in a dependency. It will be replaced by the fully-qualified scala version for this build (e.g. ). This is typically used when declaring your scala-library dependency:

The second placeholder is and can be used in a dependency module name to stand for the scala "suffix" corresponding to this scala version (e.g. ). For example:

These placeholders can also be configured. See Advanced Configuration.

This plugin will automatically append the scala version to the end of your artifact name (e.g. ), so if you previously added that manually (e.g., by setting something like in or otherwise), you'll want to undo that now. Otherwise you'll end up with the suffix appended twice.

The only required configuration is to set the property. If this is the only property provided, then build tasks will be run for all scala versions listed. In some cases, this may not be a desirable default (for example during development if your build takes some time to execute). If you prefer, you can also set (it's a comma-separated list) in your file to set which scala versions will be run by default. Then, if you want to override the default and build for all versions (e.g. on your CI server), you can set the parameter, typically from the command line ( ).

You can also configure the placeholder values if they happen to cause a conflict, or you just like something else aesthetically. To do so, add the following block in your file:

Just run gradle as usual. Any tasks you specify on the command line will be run once for each scala version selected (see section Advanced Configuration for details).

Also potentially useful to your buildscript are several extra properties this plugin attaches to your project:

These could be useful, for example, if you wish to select a different dependency based on the scala version. For example:

To run your tasks for all scala versions by default, you would create a file that only contains :

Then you could run tasks like this...

If you don't want to build for all versions by default, set in addition to in your file:

Then run tasks like this...

Gradle 3.1 introduced composite builds, which can be quite handy, especially when developing a library. Since this plugin is most useful for developing Scala libraries, it is helpful to note how this plugin interacts with composite builds.

This plugin will cause the published artifact name to not match the project name (because it appends the scala suffix to it). That means that just using to point to a project built with this plugin will not work. Instead, you must use the file to declare a dependency-substituion:

If both projects use this plugin, then you are likely declaring your dependency on the included build using the syntax. In this case, you need to use the same syntax in the substitution rule:

This project is licensed under the Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0). Copyright 2017, ADTRAN, Inc.

Issues and pull requests are welcome if you have bugs/suggestions/improvements!|||

gradle-scala-multiversion-plugin - Gradle plugin to build a project against multiple versions of Scala