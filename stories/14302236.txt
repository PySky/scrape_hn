We’ll be using Yeoman to generate much of the boilerplate that goes into creating an ESLint plugin and rule. Start by installing it and the generator:

Next, to a folder where your plugin will live. Invoke and pretend you’re playing an old-school text-based RPG:

Finally, just and you have yourself a plugin!

As a (somewhat silly) demo, we’ll be creating a rule that enforces that s have at least a class because default button styling really has not kept up over the years. This is a great example of a rule that should go in a custom plugin, as every organization will have different styling rules.

We’re going to play the text-based RPG again. This time, to create a rule:

The yeoman rule generator will give us a few new files:

Let’s start by adding an example of a valid case. In our case, we end up with something like this:

If you run the tests now, you should see them correctly fail as we have not yet written the rule. Notice that we need to specify that we will be using JSX via . This will allow our rule to be tested with a parser that knows about JSX.

ESLint rules “listen” on specific identifiers based on a generated AST. When the rule identifies that the code represented by the AST is in violation of the rule that is being enforced, it simply must call to report a violation. There is a great site to help us explore the AST that would describe our failing rule: astexplorer.net. It even has a super-handy ESLint mode:|||

Engineers at Flexport are opinionated about the code we write. Instead of arguing about these opinions over and over again, we recently created a custom ESLint plugin to enforce these custom rules…