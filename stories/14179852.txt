Every user experiences the occasional "oops." Luckily for most of us, smart programmers anticipate the possibility and provide undo/redo facilities to help us out of such jams. Mark Summerfield shows you how to be that smart sort of Python programmer, with this introduction to PyQt's undo/redo framework.

Creating native and good-looking cross-platform applications is just about as easy and pleasant as it can get when you use PyQt (the Python bindings for the Qt application development framework), especially if you design your forms visually using Qt Designer. Using s or direct signal-slot connections, you can invoke any callable you like in response to user interaction, such as when the user clicks a button or chooses a menu option.

Here’s a quick reminder of just how simple it all is:

This code produces the application shown in Figure 1. I could have used or partial-function application and connected both buttons to a single method, but that isn’t the concern here.

This application shows one feature that’s common to many PyQt (and C++/Qt) applications: Each action is connected directly to a method that carries out the action. This is easy to program and maintain. As I’ll show shortly, however, you must take a slightly different approach if you want to provide undo/redo facilities.|||

Be a smart Python programmer with this introduction to PyQt's undo/redo framework.