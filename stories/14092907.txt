Your syntax files need to be encoded in UTF-8.

Single-line comment start with . Multiline comments are created via and

Variables are defined via the keyword. If you try to access a variable that wasn’t initialized before, a runtime exception is thrown.

Constants are declared the same way as variables. They can’t be changed, hence the name constant. You need to initialize them in the declaration.

Charly has a total of 10 primitive types. Not all can be constructed directly. For example the can only be gathered from a call to

The type can be compared to in javascript or in some other languages.

A only has two different values: and .

Numeric literals, just like any other expression in the language, can be prefixed with to negate them.

Underscores can be used to make some numbers more readable:

Floats are created using the character.

A Numeric will silently overflow if you pass the lower or upper limit of . The following REPL session elaborates this:

Operations such as will result in the value.

You can create it using characters.

A backslash can be used to denote various special characters inside the string:

An Array is a resizeable list of items of any type. It is typically created with an array literal:

You can add new items to an array using the push method:

You can concat two arrays together via the operator:

You can compare two arrays using the operator:

Charly doesn’t have special syntax to create objects. Instead it uses something we call .

A is basically the scope of a block turned into an Object:

This can be compared to the javascript equivalent of using :

You can access properties of objects via :

You can define a new function like this:

The last expression inside a function is used as it’s return value

You can also do explicit returns

If you need the function literal, you can use anonymous function literals:

There is also the lambda syntax, which goes like this:

Of course you could also pass the print method directly, this would however result in the following:

Because passes the value, index and size of the array to the callback, print will write all these values to the console.

When you write a lambda function without parenthesis or curly braces, it will wrap the expression inside a block.

which in turn get’s converted to:

All arguments are also inserted via a quick access identifier.

Classes in Charly can inherit from multiple other classes.

They can have instance methods and properties and also static methods and properties.

Below is an example of a simple class.

You define properties via the keyword followed by an identifier.

To define a static method or property, prefix the property or func keyword with the keyword.

To inherit from other classes, you use the keyword.

Static properties and methods are also copied to the child classes. The values of static properties are copied by value. They are not references.

will be rewritten to by the parser automatically.

The reference always points to the object a method was called on.

If you directly call a method , is set to whatever it what in the context where the method is defined. Think of it like Arrow Funtions in JavaScript.

Assignment is done with the character.

All control expressions inside Charly behave as if they were normal expressions.

This means that altough you can’t place a control expression inside a method call, it will still return a value.

A truthy value is a value that is considered true for an and guard. A falsey value is a value that is considered false in those places.

The only falsey values are and . Any other value is truthy.

The parenthesis around the test expression are optional

For statements which require a value to be falsey, you can use the statement.

For more complex branching, you can use the statement.

The switch statement can also be inlined.

The switch statement yields the value of the case statement which was run.

The parenthesis around the test expression are optional

For simple loops that repeat for a fixed amount of time, you are encouraged to use the method.

You can break inside a while statement.

A inverted method of the while loop also exists. The loop runs while the test returns false.

To create infinite loops, you can use the statement.

The next sections will assume you know what object oriented programming is, as well as the concepts of classes and methods.

Everything in Charly is an object. Not every type can have an internal state however. Only , , and can have an internal state.

When you write , the interpreter actually treats it as a primitive. There are no funny castings or object instantiations (inside Charly). When you write , the interpreter searches for a primitive class called and checks if it contains a method called .

This allows the interpreter to reuse the same object for all primitives of the same type.

This principle applies to all language primitives. The primitive class for example, specifies a method called which inserts an element into the array.

If a method expects to be called with 2 arguments, you have to pass two. If you pass 1 it throws an exception.

You can throw exceptions from anywhere in the program. Everything is throwable.

This will show up in the console as:

You can include other files using the method. It accepts a single string argument that serves as the filename.

When including a file, the contents of the variable is then returned by the call.

If you call require on the same file twice, it will result the value returned by the very first call.

If you call require on a file that was already required before, a cached version will be returned. The file won’t be executed twice.

Recursive call won’t be catched or prevented in any way.

The command has the ability to receive flags. A list of these can be obtained by running in the command line.

You can pass flags via the following format

Arguments which are not flags are passed to the program instead of the interpreter.

You can access command line arguments and flags via the and constants. Current environment variables are available via .

You can see the license and a list of contributors via the following commands

Charly has a built-in REPL (Read Eval Print Loop) where you can quickly test out new ideas.

You can invoke it by typing or

Here you can write Charly statements. Run them by pressing enter.

The REPL provides a few magic variables which are specific to your current REPL session.

Primitives in Charly can be extended as if they were regular objects. A good example of this is the method. It allows you to write really expressive code like this:

It is implemented like this:

You can add your own methods to primitive classes via the object.

For arrays you would use , for strings and so on.

Let’s define a method on strings which takes two arguments, the amount and a filler string.

You can now indent strings via the method.

Charly provides a built-in unit-testing library. Create a file containing the code below and update the testcases array with the paths to your test files.

You can then run the test cases with this command: .

Running this file will output the following:

You can also run a single file directly with the following command:

Every file exporting a function taking three arguments can be run as a test suite. The only pre-requisite is that it follows the schema below:

Things related to IO and the file system are either directly included in the prelude, or are available via the module. The prelude contains bindings to STDIN, STDOUT and STDERR and also provides some convenience functions to access these files.

Access to the file system is provided via the module.

See fs.ch for a list of available methods and their documentation.

Charly currently has rudimentary support for native extensions written in Crystal.

The way this works is via Crystal files that have to be compiled into the interpreter itself.

You can add your own files like this:|||

