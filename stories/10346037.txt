Even if you don't enjoy writing and have no intentions of becoming a professional tech writer, chances are you'll have to draft reports, mailing list updates, or technical articles at some point in your career. With a few practical tips in mind—along with solid writing advice from Stephen King—you can improve your writing before you start writing. And, with proper planning, you can easily repurpose your content for multiple audiences.

Before we dive into the writing part, let's assume you know what you are writing about and why you are writing. For example, you may be writing to:

When you know what you're writing about and your purpose for writing it, you need to understand your audience.

Before you start writing, step back and make sure you've defined your audience. Broadly speaking, you can lump your readers into three categories: lay, managerial, and experts. On Colorado State University's open-access learning environment, the Writing Studio, Michel Muraski explains the three categories of audience:

If tech journalists are the readers you're supposed to reach, and you don't have experienced PR teammates taking the lead, hold the presses. Read The Care and Feeding of the Press. Then read it again. If tech journalists are the only readers you're trying to reach, The Care and Feeding of the Press has you covered. Otherwise, read on.

Opensource.com readers, for example, can be lay persons, managers, or experts. We can assume that our readers have an interest in open source software, communities, or methodologies, but we cannot assume that they are all experienced developers. If we have an article that mentions microservices, for example, we shouldn't assume that all readers will know what that means, so we need to provide a definition or link to a resource. On the other hand, we don't need to explain documentation for anyone reading an article called When does your documentation need screenshots?, because we can assume only readers who write or have an interest in documentation will read it. (For great advice on writing project documentation, read RTFM? How to write a manual worth reading.)

You've defined your audience, but don't start writing yet. Instead, grab a cup of coffee or a snack, and start reading.

Because I've been thinking about writing fiction, I've been reading lots of novels in my spare time. Last summer, I also read On Writing: A Memoir on the Craft, by Stephen King. Although his book is about writing fiction, many of his observations fit technical writing, too. To be a good tech writer, you'll need to read technical content.

Sure, you can write only when you have to, but expect it to be a struggle—perhaps even torturous—every time. And yes, plenty of writers aren't big on reading, but they aren't generally good writers, and what they write isn't necessarily worth reading.

If you've been given a writing assignment, be clear on the expectations. Reading examples will help. For instance, if your manager wants a project status update, reading an example update or a list of what information to include will help you meet expectations. If you are expected to contribute an event report to the company blog, read previous reports on the company blog or similar sites. Before writing an article for a tech publication, read several similar articles to get an idea of what the editors are looking for and what the readers expect.

After you've done your reading and you've got an idea on the expected outcome, take a moment to consider how your content might be re-used. If you plan to write about the same topic for several audiences, keep this in mind during the writing process. For example, while researching for a talk I'm giving at LinuxCon Europe, Speaking Their Language: How to Write for Technical and Non-Technical Audiences, I realized that writing an article first would make planning my talk easier. Had I planned my talk first, odds are I wouldn't have gone back to write the longer piece (in this situation, an article) later. In either case, the research would be the same, but one approach (write the article, then the talk) is a more efficient use of time than the other (write the talk... never get around to writing the article). Deciding that I could write for Opensource.com readers in addition to LinuxCon conference attendees helped me decide which piece to write first.

Greg DeKoenigsberg, VP Community at Ansible (a popular open source automation tool), needed to let developers know about a new process, so he wrote an announcement for the developer mailing list. In his message, New process for acceptance of new modules in Extras, he didn't need to define what Extras are because the ansible-devel mailing list audience should already be familiar with the term.

Greg's mailing list post would also work well for a Ansible developer blog post.

Robyn Bergeron, Community Architect at Ansible, wrote about the same process change, but for a wider community audience. In her blog post Ansible Extras Modules + You: How you can help, Robyn's audience isn't narrowed down to a mailing list of Ansible developers, so she defines her audience in the first sentence:

This brings us to a second lesson from Stephen King.

You can go back and revise your introduction later, but start with a sentence or two that grabs a reader's attention and tells them what to expect.

A strong introduction also helps you, the writer, stay focused on your audience and objective.

Stephen King has lots of advice for storytelling, which is what tech writers are doing.

Anything not essential to the story can be left out. Are you writing a HowTo for getting started with an open source graphics program? Consider linking to the installation instructions on the project's site, unless they aren't available in the documentation.

When people ask me how long their articles should be, the answer is as long as necessary. Unless you're writing in a confined space (for example, a one-page printed magazine), word count is pretty flexible. But if you've found that you've written more than 1,000 words for a technical article, or 500 words for a project update, re-read your text to see whether you've accidentally included boring parts. King says to leave those out.

If you have much more than 1,000 words, and no boring parts, consider breaking your piece into smaller, more digestible chunks, such as a two-part series.

For example, Greg's post to the ansible-devel mailing list omits details about developing modules. Instead, he provides a link to module guidelines. After all, he wasn't writing for an audience of Ansible module developers, so he could leave out those boring parts.

In the example blog post to a wider Ansible community audience, Robyn provides a brief background:

After stating the problem, she explains the solution:

For the community audience, Robyn links to the boring parts, which include Greg's post for the more technical audience, and Ansible documentation, module guidelines, and how to contribute.

In addition to a strong introduction, an outline can help you stay focused on your audience and goal. Here are a couple of sample outlines:

Depending on what you're writing, you may want to include additional resources after the conclusion, such as documentation links, press contacts, or community resources, such as links to social media accounts, IRC channels, and mailing lists.

The Care and Feeding of the Press suggests including a fact sheet with a press release, but the list of facts to include also works well for project updates and announcements. A fact sheet should include:

What the product is, when it was first released, what platforms it runs on, configuration requirements, and cost are good to include in the beginning of an announcement or article.

After you've finished your draft, take a break and revisit it with fresh eyes. Before making revisions, getting input from a couple of colleagues is a good idea. If you don't work with anyone who has lots of writing experience and knows your subject, reach out to your network. Ideally, you want feedback from someone who will be brutally honest and thorough, not someone who will stroke your ego. In any case, remember that you don't have to accept all suggested revisions if you don't agree with them—your name is attached to your writing, so plan to take responsibility for what ends up in the final draft.

Don't take criticism personally; instead, approach it with an open mind. For example, recently a colleague told me to cut almost a third of an article out of my draft because I had the beginnings of two incomplete articles, instead of one complete story. He was right, and my article was better because I accepted his suggestion.

Now you've decided what to write about and who you're writing for. You've done your research. You've sketched an outline. And you know how best to edit whatever you write. What's next?

This article is part of the Doc Dish column coordinated by Rikki Endsley. To contribute to this column, submit your story idea or contact us.|||

Six tips for tech writers from Stephen King.