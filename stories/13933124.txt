This is a story of my first startup from 1985-1988; some of this will seem so familiar to people who have started companies today and some will seem completely alien as the world was much different back then. People haven’t changed much but technology, knowledge, the market and opportunities have. Failure is still the most common result even today.

Some of this I have never told anyone in detail before but it’s been so long now it hardly matters. In the end it’s a story of a great idea wrecked by poor decisions and the world’s worst marketing idea—competing with Microsoft head on.

It’s ultimately my idea and my fault, though I leave it to you to laugh, groan or nod in understanding.

I started my career at a defense contractor in 1981. By 1984 I had wormed my way into the “Microcomputer” group, basically at the start of the PC era, but eyeing the brand new Mac I saw the future and wanted to be part of it. So I shocked my manager and quit.

Of course I had no real idea what to do yet. I worked with a friend of mine on a suite of spreadsheet templates for the oil & gas industry which seemed like a good idea until we discovered they didn’t really use computers yet! It was slow going and not much fun. I noticed one irritating fact about spreadsheets: it was easy to make errors and proving the calculations were correct was painful.

Now in 1984 Microsoft’s spreadsheet program was Multiplan—you thought I would say Excel but they were still working on it. One day I was frustrated with errors in my Multiplan version and started wondering if there was a better way to build a spreadsheet.

I still remember the flash of inspiration that building calculations on groups of related values, which we later called blocks, based only by names might make errors unlikely as such an application could keep things correct for you while you focused on the relationships and not the mechanics. I ran over to my partner and we talked with the other folks in the shared office suite to see how we could make something out of this radical idea.

One of the folks ran some kind of consulting company, was a lot older and said he knew a lot of people who might be willing to invest in something. You have to realize this was 1985 and for most people software was a strange concept, and the idea of investing in building software was like asking for investment in a trip to Mars. Of course today these folks would be called angel investors but I had basically no idea of how to proceed or what this meant.

This older guy seemed to know a lot of stuff and that was my first mistake, I didn’t really know much about him or his business and didn’t want to ask. What I didn’t understand was his business was consulting at failing businesses for stock, running it into the ground, picking up the remaining pieces for pennies and then selling it piecemeal for profit. Some of his buddies would also turn out to be less than supportive and more than willing to take advantage of the naive me.

First I had to create some presentations (not in software, that product didn’t appear until later) and try to convince people who didn’t really use computers, much less a Macintosh, that there was a market and we could make money with a fancy calculation application. Also remember there was no Google, no online anything to help. I bet I told a lot of random bullshit. Of course no one knew that!

Anyway we got a reasonable amount of investment. For some reason we hired a young lawyer fulltime to write all the contracts (he had never used a word processor before). The older guy agreed to be the CEO (for stock) and me as President, and a board of the CEO and another buddy and me. He also helpfully agreed to handle the checkbook. Oh man that was bad idea number two.

So now I needed to build a team; thankfully I knew two great programmers, one from my first job and one from my college days. Both thought it would be cool to work on something amazing and we started in summer of 1985 to figure out how the heck this crazy idea might work.

We figured out how a spreadsheet like program could work with named blocks, how the calculations would work, what happens when you resized things, how it might look, all the stuff you might do today—the big difference was there was nothing to go on, unlike today everything we wanted to do we would have to do ourselves. We decided early to write in C even though the Mac was mostly Pascal at that point. C seemed to be the future.

Our development was, compared to today, not much better than stone knives and bear skins: two Mac 128K and one Mac XL (a Lisa rebuilt as a Mac) with a single hard drive which the other two shared over Appletalk. We had a C environment with the world’s slowest linker ever. We had a copy of Inside Macintosh, K&R C and a 68000 assembly manual. That was it. We did eventually get one “open source” piece of software: a ripped off copy of the Unix Lex & Yacc which had to be ported to the Mac first. Oh I also had bought a GUI library called MacExpress which would help in making a UI happen, something of course none of us had any clue about.

That was it. Everything else we thought of ourselves. It was crazy primitive. Ken worked on the spreadsheet engine, Bob wrote all the functions and the formula parser, and I did the UI. We were working on 8Mhz processors with a 5MB hard drive and floppies and tiny screens. No repository (none were available), a low level debugger (MacsBug) and patience!

By August of 1986 we were making good progress on the app so I went to the first Apple WWDC (not called that back then) at the Fairmont hotel in San Francisco, with most of the world’s Mac developers fitting in one room. It was humbling, so many amazing people. In August we all went to the Boston MacWorld so we could see what other people were building.

I have never been so shocked in my life—I realized that my year of writing and designing our UI was awful. Realize back then that knowing what other people were building was hard, you basically had to buy software to check it out, other than minimal photos in magazines. It was hard to know what the industry was doing, and I had not realized how dreadful our UI was. To this day I don’t remember what it looked like, but I was almost despondent about it.

So when we got back I decided I would continue to support the existing UI (so Bob and Ken could continue working) and write an entire new UI from scratch, and get it done in the four months before the San Francisco MacWorld where we wanted to ship it. I worked 100 hour weeks for the next four months. It was insane. One key thing saved me; when I was at the show I saw a little university demo for something they called a hierarchical menu, which popped up when you tapped a mouse and added menus to the side as you moved to the right. It was perfect for what I decided to do and became the central UI feature. Apple did not ship popup and hierarchical menus in MacOS until some time after we shipped.

So in the midst of this insane working we had to come up with a name. We tossed a bunch of lame ideas around and one investor had listened to the radio and heard a band called Trapeze. Boom, it stuck. It made little sense but it was cool.

Now of course we knew that the leading spreadsheet program on the Mac (Windows of course wasn’t really a viable thing yet) was now Excel. Now I made the really dumbest decision ever, I knew nothing about marketing, and there was no one to ask unlike today, and selling retail software in those days was strictly in stores though distributors and via mail order stores. So I thought we should sell the product that way and go up against Excel. Even though Microsoft wasn’t as dominant back then as in the 90s and later, it was still the big dog. Trapeze itself was not really a spreadsheet program, you could think of it as a numerical modeling application halfway between Excel and Mathematica’s numeric side (though that product didn’t exist yet). But stupid me thought that because Trapeze was superior in many ways, we would compete easily, and the market would support us both. Gag, what a moron I was. But selling software for most companies was still a new idea, a few years earlier people sold software in baggies! Today that sounds so Neanderthal but everything starts at the bottom.

So we had to write a manual, start thinking about disk duplication, printing, boxing, shrink wrapping, making deals with distributors and mail order, building a show booth; and all of this while I was working 100 hours a week trying to rebuild the whole UI. What we didn’t pay attention to was money, stock and “deals”. Every time we had a board meeting the majority would vote themselves some more stock and the three of us writing the code had less. Payment s were made on the bank loan that I realized later were kickbacks; the advertising agency seem to be paid much more than they charged, and the like. Things like this slipped by me. Trying to do all of this was really ridiculous.

We placed a teaser ad in Macworld. Talking with various press people they all thought we were Ashton-Tate, one of the big companies at the time, teasing a new product. Of course you had to place ads months ahead, unlike websites today magazines had long lead times. But back then ads and reviews and shows were the only way anyone would even know you existed, especially the stores as the distributors did nothing for their 30-40% but deliver boxes. It was up to the publishers like us to drive demand or the distributors would ignore you.

Somehow we got to the day before leaving for San Francisco (we were in Texas), the last night was an all-nighter as we wanted to have some manually produced copies to sell at the show. Someone plugged in the coffee maker and the toaster at the same time, blew out the circuits, and I lost two hours of code! Thankfully we got done in time to fly out.

At the show we had a lot of press and people were impressed by what Trapeze could do, seeing a spreadsheet like program with built in charts, drawing, text and the ability to build complex calculations quickly and the popup/hierarchical menu was a real stunner as no one had seen this before. Of course there was a stupid show bug, 1/6 of the time I clicked on the menu it would crash. We had always run the app with the debugger present; at the show we had rental Macs and no debugger, and the change in memory location was enough to trigger a dangling pointer value that would randomly crash. Really embarrassing when you are giving a demo to 50 people!

The show was otherwise a success and we got a lot of distributor orders and it seemed things were going positive. What we found was the many people tried it but had no clue how to use it effectively as it was so different than a regular spreadsheet. A lot of people complained they couldn’t import from Excel. Explaining that was impossible (even assuming we could read the format which wasn’t open) didn’t help much. The cool thing was that some people immediately realized how powerful Trapeze could be, they understood the concept was quite different and allowed you to do things impossible in Excel (and sometimes vice versa). So there seemed to be enough of the latter to offset the former.

Then we got the first review, in MacUser magazine.

A year later Bob and I met the author of that review, and he apologized that on the day he wrote our review, he had had a personal problem which caused him to be extremely angry, and he took it out on us. He ravaged Trapeze, basically made it seem like a complete waste of time with no value at all. A positive review in MacWorld followed shortly by then orders dried up; the damage was done. In those days a single review might kill your business as there was basically no other way for people to know if something was worth buying.

We took all the criticisms and worked hard on a major update but we could not overcome the inability to import Excel. The people who really understood Trapeze were big supporters anyway, we had people doing amazing things with it, generally using it as a data modeling application for verticals like business, science and engineering. But we were still selling it retail against Excel like dummies.

By summer it was obvious we would not survive much longer as money ran low. Now things got ugly.

By the summer the three of us programmers found ourselves with only 5% of the company; we had been diluted by the board members to the point we had little left. Now we had signed a two year employment contract back in 1985 which was expiring. The board members including the CEO, who now owned the bulk of the stock, insisted we should work for nothing for a further two years to “save” the company. We said no, we had worked for a low wage during that contract and working for nothing simply wasn’t affordable; plus our stock percentage was so low it didn’t make sense anyway as there was nothing we could do to improve sales. After all the hard work it just wasn’t enough but they refused to accept paying us anything and we then resigned, walking away with nothing.

Now they were stuck with the worthless stock and an application they couldn’t find anyone to work on. For some inexplicable reason they convinced some poor dentist to invest his bedridden mother’s nest egg into the company despite knowing it was a dead end. Later on the dentist sued the company and got some of it back. We had no idea since we were long gone.

At least at that point they decided to simply sell Trapeze to a company called Access Technologies which had some other Mac products they had bought.

I started a new company with most of the tech folks that would support Trapeze for its new owners. Later on that company split and became Deltapoint. That would prove a great move and the two of us built Deltagraph by 1989. The last version of Trapeze was compiled in 1989 and then was discontinued. It lived only 3 years.

The last part of the saga was the most ugly and the part I have never mentioned before. The CEO decided to punish the three programmers financially with what had to be the most hairbrained (and illegal) tax scheme I’ve ever seen. Because he hadn’t informed the investors of what transpired, he had to give them something or they might have sued him. So he and a tax lawyer concocted a scheme to give R&D tax credits (or something like that, my memory is hazy) to the investors, and charge all the cost of these credits to the three programmers. Yeah, it made no sense back then either. We talked with the lawyer and he was pretty vague on the reason (I do remember him saying something about foment in Congress!) and it was pretty scary as our tax bill was $100,000 for each of us. Thankfully our accountant was pretty smart, and he said just explain it to the IRS, and basically ignore it, as it was complete nonsense, which worked! I have to this day no idea what happened to the credits on the other side. I never saw any of the board again that I remember.

So that was the end of this adventure that started with a good idea and ended in a strange tax land. What did I do wrong? I didn’t realize how stupid it was to compete with an established market leader with a product that was not really a competitor. Trapeze really fit in a place different than a spreadsheet like Excel. It could do things Excel still cannot do today, it was faster (since it could calculate things in tight loops) and allowed you to integrate charts and text (things Excel didn’t get until much later) and even do some presentation (since blocks could be moved around, resized, formatted, all without affecting the calculations). It also could not do things Excel could do since it didn’t support cell by cell formulas; this was a feature we had thought of as a sort of spreadsheet block but could never implement. Trapeze was really something that should have been sold to Universities and research companies and the like directly, basically like what Mathematica was targeted at. That was a lesson we didn’t learn in time. Once people understood the how Trapeze worked they often became enthusiastic users. I still get emails (and tweets) from people who still remember it fondly from so long ago.

Today it would still be a useful app, since it would have been a natural atop a relational database or data cube, and maybe utilize the GPU for calculations and even import Excel into a block! I still will never forget how cool it was to see something no one else had ever thought of and bring it to market, and despite all the ultimate pain, I am glad I had the chance. All three of us still remember the joys and sorrows of that little period when software was new and came in boxes and people read about it in magazines.

One more favorite memory of back then: going to a banker telling them we were a software company and having them think we were building ladies undergarments!|||

The Codist - programming blog