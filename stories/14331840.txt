Recently, I switched to creating all the UI programmatically in iOS. There are few reasons to support my decision.

OK, now the reasons are over. Lets move on to why we are here. I will break the post in three parts.

You can download/checkout the project at Github.

This is a default single page application. I have removed my Storyboard file and my AppDelegate.swift and ViewController.swift files looks like:

That’s it. We have a titleText label which I am trying to set to the center of the view using Autolayout constraints.

This is how the App looks. The Label is horizontally and vertically centered. Here is the image

Remove the translatesAutoresizingMaskIntoConstraints from the titleLabel view or set it to false.

After running this project I get first error mentioned below in Error section and so I set the translatesAutoresizingMaskIntoConstraints property correctly and hurray the App is running fine again.

When you haven’t set translatesAutoresizingMaskIntoConstraints to false. You will get constraints error like below in console which looks all the similar to other errors (we will look into them later part of the blog) on first glance.

The things you need to look is h=–& v=–&, if it is there then the error is because you haven’t set the translatesAutoresizingMaskIntoConstraints property to false. For info read Apple guide here.

Now lets create a bug in Autolayout constraints. Currently the width of the titleLabel is fixed to it’s SuperView width. Let’s make another constraints with a constant greater than SuperView’s width. In code which will look something like below.

Now I get an error, why because initially we have set the width of titleLabel to its SuperView width but now we have extra constraints which says it’s width have constant value which doesn’t satisfy the previous constraints.

Note: Because you know the reason why we are getting the error, it makes it easy but in real world the scenario will be different. You will have many views and will not know what is causing the error.

2017-05-13 15:20:08.740153+0530 NSLayoutContrainstsExample[43393:4192925] LayoutConstraints] Unable to simultaneously satisfy constraints. Probably at least one of the constraints the following list is one you don 't want. Try this: (1) look at each constraint and try to figure out which you don' t expect; 2 find the code that added the unwanted constraint or constraints and fix it. , , Will attempt to recover by breaking constraint <NSLayoutConstraint:0x60800008c580 UILabel:0x7fbbc95067b0 .width 420 active > Make a symbolic breakpoint at UIViewAlertForUnsatisfiableConstraints to catch this the debugger. The methods the UIConstraintBasedLayoutDebugging category on UIView listed <UIKit/UIView.h> may also be helpful.

Let me pin out a few points here:

Let resume our discussion, the biggest problem in debugging NSLayoutConstraints is finding the correct view. Xcode uses a label’s text, a button’s title, or a text field’s placeholder to identify these views and so we are able to find that this constraint belong to titleLabel as

Focus on Testing out NSLayoutConst…‘ which is the text we have setup on titleLabel. Hence most of the views can be found out using this way.

Symbolic breakpoints are here for rescue. The error log say

when I was looking for how to create symbolic breakpoints, I tried everything but no success, then as always stackOverflow comes for rescue.

This post also started assuming I know how to create breakpoints. Finally I found the crux i.e.

The steps are shown in the figure below.

After adding this break point, you can use few method to get the description about a view. As I said, identifying correct view is the biggest hurdle.

The above issue was about adding extra constraints (Unsatisfiable constraints) which can be discarded but what about ambiguous constraints.

Ambiguous layouts occur when the system of constraints has two or more valid solutions. There are two main causes:

Now, we will add a Ambiguous constraints. We can easily do in our project example by removing Y position constraint.

The console prints out this:

2017-05-13 17:20:42.834543+0530 NSLayoutContrainstsExample[45035:4345694] LayoutConstraints] Unable to simultaneously satisfy constraints. Probably at least one of the constraints the following list is one you don 't want. Try this: (1) look at each constraint and try to figure out which you don' t expect; 2 find the code that added the unwanted constraint or constraints and fix it. , , Will attempt to recover by breaking constraint <NSLayoutConstraint:0x600000091300 UILabel:0x7fd720e04230 .width 420 active > Make a symbolic breakpoint at UIViewAlertForUnsatisfiableConstraints to catch this the debugger. The methods the UIConstraintBasedLayoutDebugging category on UIView listed <UIKit/UIView.h> may also be helpful.

The above error is same weired jargon which we have seen with Unsatisfiable constraints and not telling about the ambiguity.

Now what to do?

From the StackOverFlow post mentioned above, we can also add Debugger Command in the symbolic breakpoint to show whole trace of views.

Now console logs the Error 3 in below format:

The above issue is understandable. It is saying we haven’t provided the Y value.

I think, this is a good stopping point. I will explore more on debugging Autolayout issue for complex views in later posts.

I would love to have your feedback. Please write it in the comments.|||

Rudrakos is a personal site of Rahul Ranjan.