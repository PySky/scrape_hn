The twelve-factor app manifesto recommends that you pass application configs as ENV variables. However, if your application requires a password, SSH private key, TLS Certificate, or any other kind of sensitive data, you shouldn't pass it alongside your configs.

When you store your secret keys in an environment variable, you are prone to accidentally exposing themâ€”exactly what we want to avoid. Here are a few reasons why ENV variables are bad for secrets:

Overall, secrets in ENV variables break the principle of least surprise, are a bad practice, and will lead to the eventual leak of secrets.

At a previous job I helped solve this problem with a really elegant solution: Keywhiz. At Docker we went a step further and built a similar solution directly into Docker itself. If you're using swarm, you now have a trivial way to manage your secrets securely:

And that's it. You can now use your secret:

And make your application read the secret contents from the in-memory tmps that gets created under :

By integrating secrets into Docker, we were able to deliver a solution for the secrets management that follows these principles:

Having an easy-to-use, secure-by-default secret distribution mechanism is exactly what developers and ops need to solve the secrets management problem once and for all.

Thanks to Ryan McGeehan for pushing me to write more.|||

If your application requires a password, SSH private key, TLS Certificate, or any other kind of sensitive data, you shouldn't pass it alongside your configs.