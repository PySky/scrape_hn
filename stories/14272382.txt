This article was originally published on the Compose blog on the 28th of March, 2017.

Don Omondi, Campus Discounts' founder and CTO, discusses securing applications with OAuth and shows you how to securely store authentication data using MySQL and MongoDB in this Compose Write Stuff article.

OAuth is an open standard for authorization, commonly used as a way for Internet users to authorize websites or applications to access their information on other websites but without giving them the passwords.

Eran Hammer-Lahav, former lead author and editor for the OAuth 2.0 project, gave an analogy that explains the concept extremely well:

OAuth allows you, the User, to grant access to your private resources on one site (The Service Provider), to another site (The Consumer).

The most popular way to implement OAuth either follows the OAuth 1.0 protocol (released 2010) or utilizes the OAuth 2.0 framework (released 2012). Both of them, typically involve saving and querying tokens (e.g. request, access, refresh) and scopes (permissions). They might also involve signed requests, hashing, and a bunch of other things like multistep procedures to finally grant permissions to an application.

For tightly controlled environments or simple use cases, OAuth 1.0 and 2.0 can be overkill. Eran Hammer resigned from his position as the lead author and editor for the OAuth 2.0 project and withdrew his name from the specification citing, among other things, the complexity of the framework.

Interestingly, it’s not that complex to implement a simplified OAuth system that still keeps the core functionality intact but gives greater flexibility for certain use cases.

When designing a Simple OAuth system, the service provider is required to create and store entities for users, apps, app installations and app permissions. Apps are actually the consumer in the OAuth flow diagrams. App installation entities track which users installed what apps while app permissions track the actions a consumer app is allowed to perform on the user's behalf.

I'm a big fan of storing 'primary' data (e.g. users, products, restaurants) in a relational database and 'secondary' data (e.g. comments, likes, check-ins) in a nonrelational database. This way, primary data can have relationships between each other via joins while secondary data has no direct relationships with other secondary data, although comparisons can be drawn through the use of a separate analytics database.

What we'll do is store users and apps in respective MySQL tables, while app installations and permissions in respective MongoDB collections.

The column is used to implement the increasingly popular webhook feature where apps can be notified of user events via or websockets. The apphost column is just an added security check to lock down actions to requests from a specific host only. The and columns are mockups of pay-to-use apps. The column is very important, as new changes to permissions and pricing are only affected when this version is bumped to the next number.

Now, let's create the app_installations collection using the Mongo Shell:

MongoDB is schemaless, so the best way to understand the required structure would be to look at a typical document:

The document is set to match the , while the array is made up of embedded documents describing who installed the app, when the app was installed, the installation status and the app version that was installed. The here can represent an app uninstalled status, app deprecated status or any other logical status that a developer can come up with.

The document here is also set to match the , while the array is made up of embedded documents describing the key components of each version of the app; here, its and . Each has a and stating whether the app wants to subscribe to a webhook for that permission.

Note that the first embedded doc is empty. This is deliberate as it will help us walk through the array of embedded docs as each embedded doc matches its index in the array. The embedded s also match the in the apps MySQL table, which helps to convey the concept that upon each app’s creation, the is 0 and the are empty.

When an app is updated with new permissions and/or pricing, its version is bumped and the new details saved in an embedded doc. MongoDB shines here because by fetching just 1 doc, we can view all the important changes of each version of an app. It is highly unlikely that an app’s permissions and pricing will be updated tens of thousands of times in its lifetime so the current 16MB doc size limit is in no danger of being exceeded.

These two tables and two collections are all we need. Let’s see how the OAuth flow will work then.

For OAuth, the user is directed to the App Integration page, once he consents and gives permission, we fetch a MongoDB doc from collection whose matches the . Within this doc, we embed a new doc in the installs field containing details of the installation. This embedded design again plays to the strengths of a document store.

After permissions are granted, the user is redirected to a custom URL with his so that the consumer can store it.

Now, an app simply needs to connect to an API endpoint specifying the App ID, App Secret and the User ID to perform actions as.

On receiving this request, the following database queries would take place:

So each request would result in at least three queries: one to MySQL and two to MongoDB. Of course, you can, and perhaps always should, cache these, especially the MySQL query.

This approach has some key advantages over other methods of authorization and authentication. It allows for very easy authorization and application management with no tokens. It provides better security by frequently changing the without logging out users or asking them to reauthorize the app. Its auto-update feature allows users to immediately enjoy new app features without waiting for re-authorization.

There are also some key disadvantages to this technique. Some service providers encode the , and in one token requiring only one query whereas the Simple OAuth approach requires three. In terms of security, a single point of exposure (the app secret) in Simple OAuth is arguably less secure than a distributed system that employs access tokens such as OAuth 1.0 and OAuth 2.0. Lastly, Simple OAuth is not as adaptable and portable to numerous use cases as OAuth 1.0 and 2.0.

So there you have it, a simple yet feature-rich OAuth system. It’s easy to implement and could be great for certain scenarios, for example, at my startup, Campus Discounts, we innovate quickly and would like to allow all third party applications to do so as well with an auto-updating OAuth feature backed by GraphQL to maintain backward compatibility. As a matter of fact, we are open sourcing our Simple OAuth implementation which can be found on Github.

Liked this post, please vote for it here|||

<p>This article was originally published on the <a href="https://compose.com/articles/simple-oauth-with-mongodb-mysql/" target="_blank">Compose blog</a> on the 28th of March, 2017.
</p>

<p><strong><em>Don Omondi, Campus Discounts' founder and CTO, discusses securing applications with OAuth and shows you how to securely store authentication data using MySQL and MongoDB in this <a href="https://