MQTT high level framework to glue together various "middleware" to handle incoming messages.

It works for both MQTT Broker and Client.

The method also takes an optional path string that is matched against the beginning of the incoming request topic. This allows for basic msg routing:

Use a function on the app, where the function represents a middleware. The function will be invoked for every request in the order that is called. The function is called with three arguments for the client and 4 arguments for the Broker:

. ( ( , , ) { msg is an object with 2 property: topic <String>, data <Buffer> next is a function to call to invoke the next middleware }) . ( ( , , , ){ broker is a reference to our broker. packet is the incoming packet, containes: .topic, .payload etc. next is a function to call to invoke the next middleware })

Use a function on the app, where the function represents a middleware. The function will be invoked for every packet received in which the TOPIC match with the given string in the order that is called.

The could be terminated with a path separator ( ) or an MQTT wildcard character ( or ). This means the given topic and are NOT the same and both will not match the same messages.

Moreover the is matched in a case-sensitive manor!

Check the mqtt-match module or the MQTT protocol documentation to better understand topic matching.

Expose the function that will iterate through the added middlewares instances.

It's built to be compatible with the MQTT.js Module and the Mosca Broker. But it could also be used together with an class that emits messages following the same function signature.

Returns the number of middlewares currently inside our or instance.

Removes all the middlewares from our .|||

mqtt-connect - MQTT high level framework to glue together various "middleware" to handle incoming messages.