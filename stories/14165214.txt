The magic that takes the pain out of accessing JSON API's from C++

What it does:

That's basically it. It does not solve world hunger. It make no attempts to be a C++ framework.

You can use it's single components, like the powerful C++ HTTP Client to send and receive non-JSON data as a native C++ replacement for libcurl. You can use the template code that transforms data between C++ and JSON for other purposes (for example in a REST API SERVER) - but the library is designed and implemented for the single purpose of using C++ to interact efficiently and effortless with external REST API servers.

The library is written by Jarle (jgaa) Aase, a senior freelance C++ developer with roughly 30 years of experience in software development.

The design goal of this project is to make external REST API's simple and safe to use in C++ projects, but still fast and memory efficient.

Another goal was to use coroutines for the application logic that sends data to or pulls data from the REST API servers. This makes the code easy to write and understand, and also simplifies debugging and investigation of core dumps. In short; the code executes asynchronously, but there are no visible callbacks or completion functions. It looks like crystal clear, old fashion, single threaded sequential code (using modern C++ language). You don't sacrifice code clearness to achieve massive parallelism and high performance. Coroutines was a strong motivation to write a new C++ HTTP Client from scratch. To see how this actually works, please see the modern async cpp example).

Finally, in a world where the Internet is getting increasingly dangerous, and all kind of malicious parties, from your own government to international Mafia (with Putin in Moscow and the Clown in the White House, the differences is blurring out), search for vulnerabilities in your software stack to snoop, ddos, intercept and blackmail you and your customers/users - I have a strong emphasis on security in all software projects I'm involved in. I have limited the dependencies on third party libraries as much as I could (I still use OpenSSL which is a snakes nest of of yet undisclosed vulnerabilities - but as of now there are no alternatives that works out of the box with boost::asio). I have also tried to imagine any possible way a malicious API server could try to attack you (by exploiting or exceeding local resources - like sending a malicious compressed package that expands to a petabyte of zeros) and designed to detect any potential problems and break out of it by throwing an exception as soon as possible.

In the spring of 2016 I was asked to implement a SDK for a REST API in several languages. For Python, Java and Ruby it was trivial to make a simple object oriented implementation. When I started planning the C++ implementation of the SDK, I found no suitable, free libraries. I could not even find a proper HTTP Client implementation(!). I could have solved the problem using QT - but i found it overkill to use a huge GUI framework for C++ code that are most likely to run in high performance servers - and that may end up in projects using some other C++ framework that can't coexist with QT.

Many years ago I designed and implemented a C++ REST Client for an early version of Amazon AWS using libcurl - and - well, I had no strong urge to repeat that experience. So I spent a few weeks creating my own HTTP Client library using boost::asio with JSON serialization/deserialization.

Restc-cpp depends on C++14 with its standard libraries and:

rapidjson and lest is attached to the project as git sub-modules.

MIT license. It is Free. Free as in Free Beer. Free as in Free Air.

The following code demonstrates how to run a simple HTTP request asynchronously, using the co-routine support in boost::asio behind the scenes.

And here is the output you could expect

Here is a sightly more interesting example, using JSON serialization, and some modern C++ features.

# # # # # C++ structure that match the JSON entries received { userId = ; id = ; string title; string body; }; Since C++ does not (yet) offer reflection, we need to tell the library how to map json members to a type. We are doing this by declaring the structs/classes with BOOST_FUSION_ADAPT_STRUCT from the boost libraries. This allows us to convert the C++ classes to and from JSON. ( Post, ( , userId) ( , id) (string, title) (string, body) ) The C++ main function - the place where any adventure starts int main() { Create and instantiate a Post from data received from the server. Post my_post = ()->ProcessWithPromiseT<Post>([&](Context& ctx) { This is a lambda co-routine, running in a worker-thread Post post; Serialize it asynchronously. The asynchronously part does not really matter here, but it may if you receive huge data structures. (post, (ctx) . ( ) . ( , ) . ( , ) . ()); post; }) Back in the main thread, get the Post instance from the future<>, or any C++ exception thrown within the lambda. . (); Print the result for everyone to see. cout << << my_post. << << my_post. ; }

The code above should return something like:

Please refer to the tutorial for more examples.

The project is maturing fast. There are no known bugs.

The project has been in public BETA since April 11th 2017.

These are the operating systems I test with before releasing a new version.|||

restc-cpp - Modern C++ REST Client library