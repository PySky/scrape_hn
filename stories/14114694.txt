Maybe you're an attacker who sneaked in a little JavaScript to an unsuspecting site and would like to, well, sneak. Or maybe you want to know what exactly all these third-party analytics scripts are "calling home". Or maybe just for fun - wouldn't it be cool to intercept and log all requests made with

It's a common pattern. A ping. Collect all the data then send it like:

It's a strange API, that. As soon as you set a property ( ), it does something. It sends a request. Weird. Oh well, it is what it is.

If it was any other normal method, like you can just overwrite it. But overwriting is a/ useless and b/ some browsers won't let you. Try Firefox:

JavaScript grows more powerful by the minute. What will they think of next? Proxies! That sounds like a lovely idea. Let's get to work!

First off, a copy of the original we're going to meddle with:

Next, a "class" that will replace the original:

Now, how about that magic in the middle?

First, an instance of the original :

Next, a handler that proxies calls to set and get methods and properties:

Finally, returning a instance that passes all there is to pass through the and onto the native instance.

As you can see, all you need to do is check when is being set and log it or do whatever with it. Interception complete!

Demo with all the code. Here it is in action in Firefox:

... which should be more like native, all secret and such:

Not good. An extra diligent developer might be checking for fakes before calling . (Who does that!? But still...)

Same with that (and while at it, which is a Firefox invention):

Can you tell the fake? Don't think so.

Did you notice the call? Instead of hardcoding the mumbo-jumbo string, just ask the original. Especially given that browsers vary in the exact output.

What about on instances? What about ?

Oh crap! No one must see them proxies and objects.

The fix is in the method of the Proxy handler. Some properties are functions. Handle accordingly:

Recall the ole call, y'all? People have used it since forever to tell, for example, real arrays from array-like things, such as and s. (That was in the olden days before ).

Still very useful to tell, e.g. native JSON support vs a polyfill.

How does our little "polyfill" behave?

Poop! We're caught in the act.

There's a fix. Wait for it. . Yup, that's right.

Back in the constructor, before you ...

What magic is this!

No one checks the prototypes of the potentially useful things, but, hey, we're overachieving here.

But all agree that our is smelly:

Again, not hardcoding a string, but giving the browser-dependent different output, piggybacking on the native .

Fake it till you make it. Result to play with.

Our fake is still recognizable in the browser console (like ) but your victim (unsuspecting logging-reporting-ads-analytics script) is code. It doesn't look at the console. An is usually the extend of all checks for nativeness. If that.

Tell your friends about this post: Facebook, Twitter, Google+|||

