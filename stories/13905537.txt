Tests that drive the UI of your web application are typically brittle, because any changes to the HTML or JavaScript implementation of your pages can potentially break the tests that depend on them.

Mâché (pronounced “mash-ay”) is a tool that helps you to write cleaner and more expressive acceptance tests for your Ruby web applications using page objects.

A page object is a data structure that provides an interface to your web application for the purposes of test automation. For example, it could represent a single HTML page, or perhaps even a fragment of HTML on a page.

Capybara can get us part of the way there. It allows us to work with an API rather than manipulating the HTML directly, but what it provides isn’t an application specific API. It gives us low-level API methods like , , and , but it doesn’t provide us with high-level methods to do things like “sign in to the app” or “click the Dashboard item in the navigation bar”.

This is where page objects come in. Using Mâché we can for instance define a page object class called and use it any time we want to automate authenticating with our app. It could handle visiting the sign in page, entering the user’s credentials, and clicking the “Sign in” button.

Let’s dive straight in and take a look at an example. Consider the following HTML fragment for the welcome page in our app:

To define a page object class to wrap this HTML page, we extend the class. The only method our class needs to provide is , this tells Mâché where to go when we want to visit the page:

We can visit our welcome page using our page object:

Mâché also handily exposes the Capybara API on our page object:

To make our page object more useful, we can define an element on our page object class using the macro. An element is simply an HTML element that we expect to find on the page using a CSS selector.

Let’s define a element to represent the main section of our HTML page:

We can query the element as an attribute of our page object:

For elements that can be shared across any number of page object classes it may be useful to define a reusable component by extending the class. A component can contain any number of elements (or even other components).

Let’s define a component to represent the header of our HTML page:

We can mount the component in our page object class at a given CSS selector using the macro:

Querying a component of our page object is much the same as for an element:

Let’s look at a more complete example for our . Note that the , , and components can be reused in any other page object classes we may define later for our web application.|||

The life and times of Josh Bassett.