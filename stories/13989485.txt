Pla helps you automate workflows in a very simple way. Much like make, but with a yaml file structure.

Pla requires Python 2.x. Use the pip installer to install Pla.

If pip is not present on your system:

Note: OS X Users reported that Homebrew's version of Python works better than the stock one.

When installed with Pip you can upgrade to the latest version using:

To install Pla from git you first need to make sure Pla is uninstalled. Then you must clone the repository and install the development version:

If you do not provide a target, the default target called will run.

Pla works similar to Make. You define the targets in a Yaml file called and run the targets from the command line.

Lets say we use Pla to kickstart our working day. We will make a Plafile which starts our local dev server, starts our IDE and opens the application we're working on in the browser.

First create the Plafile with a target called :

Then simply run Pla from the command line:

Pla will then run the shell commands you specified in the Plafile.

Pla will use the directory of the Plafile as its current working directory. As of v0.6 Pla looks for the Plafile.yml in the parent directory if there is none in the directory that you're running Pla from.

For example, let's say this is your project file structure:

And this is your Plafile.yml:

When you run Pla from the project root (where the Plafile.yml is), you will see this:

And when you run Pla from the subdirectory, you will see this:

As of Pla v0.2 it is possible to let your targets call each other. This is simply done by refering to the target prepended with an sign. Like so:

Pla v0.3 gives you the ability to variables in target commands. This feature is called target parameters.

Simply define the parameters in the target definition, and put them in your command. Enclosing the parameters name with signs. For example:

You can then call the target like this:

Disclaimer The current implementation of target parameters is built to work only when you directly call the parametrized target.

When you run the same Pla target on multiple operating systems you might want to specify which command to execute on what OS. You can do this by prefixing your command with a filter that indicates the OS's family name.

If you run on a Mac, you'll get the following output:

Sometimes you want insight in which part of the Plafile is running. You can do this by giving targets descriptions. A description can be added in the form of a comment on the same line as the target definition, like so:

This will generate the following output:

All notable changes are documented in the changelog file.

The MIT License (MIT). Please see the license file for more information.|||

pla - Coder's simplest workflow automation tool.