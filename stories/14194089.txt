If you're already familiar with Google Cloud Functions, GraphQl, and GraphiQl, then this TL;DR might be good enough. Otherwise, jump to the next Overview section, and follow each steps.

If you're totally unfamiliar with GraphQl, here is a series of intro posts that might be useful to provide some context:

In the piece of code above, you won't be able to do a as the http header will already be set the graphQl interpreter. This is a GraphQl server. Therefore, it only returns GraphQl responses. If you need to manipulate data, you will have to do this inside the resolver. This is beyond the scope of this document. You can find a simple example below, under the Step C, and read more about it on the awesome Apollo's website, as well as on the official Facebook GraphQl website.

google-graphql-functions is a JS module that will help you to deploy your first dummy GraphQl API to a Google Cloud Functions endpoint, or to your local machine. The data are hardcoded for the sake of brevity, but you could easily replace that bit of code with your own DB or external APIs requests.

Beyond just querying GraphQl, google-graphql-functions will also allow you to expose a GraphiQl UI to help develop, test, and collaborate. GraphiQl is nothing more than an HTML page that contains your own GraphQl schema. You're responsible for hosting it as well as injecting your schema into it so that your clients can interact with your GraphQl api in a friendly way. It supports validation as well as auto-complete.

This project has been forked from the excellent express-graphql package.

In this brief 3 steps guide, you will:

If you're only interested in knowing how to program GraphQl APIs for Google Cloud Functions and are already familiar with developing and deploying code for Google Cloud Functions, then jump straight to Step C - Create & Deploy your GraphQl dummy API.

1 - Create a Google Account & log in to your Google Cloud Console.

2 - Select or create a new Project (if this concept is not familiar, please visit this link).

3 - Create your first Google Cloud Function (if the Google Cloud Console UI hasn't change, this should be in the left burger menu, under Compute). The details of your configuration don't really matter here, as we will override them later in stage B. Just make sure you select the HTTP trigger under the Trigger section.

1 - Make sure your have the following tools installed on your machine:

More details on those dependencies in annex A.2. List Of Dependencies

3 - Paste this demo code into the index.js

( ); ( ); ( ). ; # ### GET the product that matches this id # ### GET the products for a specific brand ; { root { Query { ( , { id }, ) { ( , id). ( { product product[ ] []; }); }, ( , { brandRefId }, ) { ( , brandRefId); } } } } This `findBy` method simulates a database query, hence it returning a promise. ( , ) . ( . ( product[field] value)); [{ name , id , brandRefId , shortDescription Piece of wood with some magic shenanigan. }, { name , id , brandRefId , shortDescription Contraption that throws heavy rocks at my ennemy's face. }, { name , id , brandRefId , shortDescription }]; ({ typeDefs schema, resolvers . ( . ) merge using lodash, for example }); { schema executableSchema, graphiql , endpointURL }; * Responds to any HTTP request that can provide a "message" field in the body. . . (graphql_options, ( , , ) { Some code to inspect req, res, or results }); In the piece of code above, you won't be able to do a 'res.status(200).send("Hello World")' as the http header will already be set the graphQl interpreter. This is a GraphQl server. Therefore, it only returns GraphQl responses. If you need to manipulate data, you will have to do this inside the resolver. This is beyond the scope of this document. You can find a simple example below, under the Step C, and read more about it on the awesome Apollo's website (http://dev.apollodata.com/tools/), as well as on the official Facebook GraphQl website

More details on the code above in annex A.3. GraphQl Code Details

5 - Deploy your code to your Google Cloud Function on GCP

We are Neap, an Australian Technology consultancy powering the startup ecosystem in Sydney. We simply love building Tech and also meeting new people, so don't hesitate to connect with us at https://neap.co.

In the above index.js:

As of today (Apr 17), the current stable version of node is v7.8.0, which stopped using nested dependencies inside the node_modules. However, Google Cloud Functions still runs using node v6.9.1, which still uses nested dependencies. The issue is that our code will then contains more than one graphql.js package which will result in this weird bug:

Schema must be an instance of GraphQLSchema. Also ensure that there are not multiple versions of GraphQL installed in your node_modules directory.

To fix this, we need to run after .|||

google-graphql-functions - Run graphql queries on Google Cloud Functions (beta). This package can also serve a GraphiQL UI out-of-the-box. This project is mainly a modification of the excellent express-graphiql maintained by Facebook. This project is published using a BSD-style licence.