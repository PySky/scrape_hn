From the articles part of the Specflow Series, you can learn how to write acceptance tests following the BDD paradigm so that your tests are understandable to business users. In this publication, I am going to share with you four ways for handling parameters in the feature files.



In the previous examples we wrote tests that converted kilowatt-hours to newton-meters. The step that types the kWh is the following one- "And type "30" kWh". In the converter application there is a new feature- to change the format of the answer and we need to test it. We want to be able to extend the previous step with a parameter for the chosen format- "And type 30 kWh in Fractions format". We want to support both steps.



The tests are almost identical with the small differences in the Type step.



To be able to support both steps, you need to create two separate binding methods. The first one will accept one parameter and the second one two.



The first binding method will call the new method without the optional parameter. If we choose Fractions format the method with choose, it from the drop down and convert the answer.



Here we want to convert seconds to minutes. However, we want to support inputs like the below:



The step should convert the input in seconds and then type them.



This is how the scenarios will look like. As you can see we pass different combinations of days, hours, minutes and seconds.



As you can see the type seconds binding doesn't contain anything special about these inputs. All of the magic is happening in the StepArgumentTransformation step which has its custom regex pattern. Basically, it translates only the part of the date time inputs to TimeSpan which we, later on, convert to seconds. I am not going to decipher the regex since this is not the main topic of the article. You can find more info in the official SpecFlow documentation.



Instead of copy pasting the scenarios we want to specify seconds' inputs and the expected results and run the tests for all specified data. Above we have generated tests for four data sets.

We can use the scenario outline examples table to accomplish the use case. First instead of using Scenario: we need to change it to Scenario Outline: Below the steps, we specify all of the data sets in the Examples table. You mark the start of the table through Examples: row, then the first row of the table contains the parameters names. Then you can use these names in the scenario using the following syntax

After that, you write the data separated with | symbol. If you type the delimiters manually, Visual Studio will format the table for you, but if you paste the data, you will have to do it manually.

For each row, Specflow will generate a separate test. Keep in mind that the names are based on the first parameter of the table (you can see that in the use case image). So if the data in your first column is not unique, your tests' names will be generated using numbers. In this case, you can add a new first column specifying the test name's suffix yourself.

You want in a single test to add multiple items to your shopping cart containing affiliate codes. We need to pass a list of pairs of URLs and affiliate codes to our step.

You can pass a table of parameters with the above syntax. The test will open each of the URLs adding the specified affiliate code as a query parameter to the URL and then click the Buy Now button.

You need to install the SpecFlow.Assist.Dynamic NuGet and add a using statement to TechTalk.SpecFlow.Assist. Your step should accept a parameter of type Table. You can iterate through the items of the table without the help of the classes part of the mentioned NuGet. However, I don't think this is a good practice. I believe that this approach is cleaner. After you pass the table, you use the CreateDynamicSet extension method which returns a collection of dynamic objects. You can access the different columns of the table from the returned objects as properties, but you need to be sure that you don't have any typos since in this mode Visual Studio is not going to warn you. Here you can read more about the dynamic type.



SpecFlow Automation Layer Tips - Code This, Not That|||

Learn how to handle more sophisticated scenarios that require multiple parameters. Create data driven tests using scenario outline examples tables.