For modern cloud applications, operations teams rely heavily on data and analytics to make crucial decisions regarding all aspects of application lifecycle management. While common tasks such as capacity planning, monitoring and production roll-outs all need data, the required characteristics of data and analytics are quite different depending on the task. For example, capacity planning might not require real-time information on storage usage; whereas application health monitoring does require accurate, real-time information on storage usage to avoid application failures. In this blog post, we will review the key characteristics of application monitoring data and analytics in the context of Netsil Application Operations Center (AOC). Then we will provide a comprehensive overview of the powerful analytics engine in the AOC.

At LISA 2013, Caskey L. Dickson, veteran Site Reliability Engineer (SRE) with extensive experience in building monitoring systems, presented a comprehensive model for building monitoring systems. Caskey aptly highlighted resolution, latency and diversity as key characteristics for evaluating data needed in various application operations tasks. Specifically, for application monitoring, the data needs to be:

For modern application monitoring, AOC has absolutely ideal data that has high resolution, is available immediately with low latency and gathers metrics from the entire stack. Let us take a closer look at the powerful analytics engine that puts all the data to work and enables application monitoring workflows in the AOC.

In the AOC, data and analytics are at the core of application monitoring and power all the workflows for alerting, dashboards, incident response, etc. Let’s define a practical example that we will use to understand the AOC analytics engine.

“Generate the demand data for top 5 HTTP services with highest average latencies. HTTP services are identified by their URI paths; and demand is defined as (Average Latency X Throughput)”.

AOC has 3 primary data sources that cover the entire application stack:

For our example we will use the HTTP Latency and HTTP Count data sources obtained from the analysis of network interactions. Let’s understand the transformation functions available to obtain meaningful insights from raw data sources.

Aggregation: This is a set of standard functions such as average, max, min, count, standard deviation, etc. For e.g a common function is average applied to HTTP request/response latency metric.

Group-by: As mentioned above the raw data from various sources has many useful attributes. Group-by allows data to be grouped along specific attributes. For e.g. grouping HTTP request/response data by URI paths to gain insights into latency, throughput, error rates, etc. for specific services.

Top: When group-by is applied, then top can be used to restrict the results to top-n values.

Filter: Data can be filtered based on specific values. For e.g. filter HTTP data based on HTTP Status Code = 200or filter MySQL data based on Query Type = SELECT. Data can also be filtered by joining with subqueries. Services defined in AOC can also be used for filtering data. Services are essentially groups of instances. So, service filter allows for restricting the data to a group of instances. For e.g., if we define a /cust/shoppingcart service based on the URI path, then all the instances serving that HTTP endpoint will be grouped under the service. This service can then be used for filtering HTTP data. (Learn more about filters in AOC.)

 Time-shift: This is simple yet very useful function. When a data source is time-shifted by say 30mins, then at time T we will get the value that has happened at T-30 mins. This is particularly useful for analyzing questions such as how did the metric change compared to a previous time-window? For e.g., while investigating the impact of a production change, we can compare the before and after time series by simply applying time-shift on the data.

For our running example, we have built 2 query statements:

In the next section we will apply the filters transformation and combine these queries to obtain the HTTP demand.

AOC Queries for Top 5 HTTP Services with Highest Average Latency and Throughput

The AOC allows multiple query statements to be combined and mathematical operations to be applied using expressions. For e.g. HTTP demand data can be generated simply by multiplying latency query results with throughput using an expression statement. (Learn more about expressions in AOC.)

Another popular way of combining queries is using subqueries and join operation. For e.g. below is a subquery that returns the top 5 HTTP services experiencing highest average latency. The results of subquery can be joined with other queries using the filter transformation. (Learn more about subqueries in AOC.)

For our running example, Query A and Query B are returning top 5 services with average latency and throughput respectively. But they may not have the same set of services. We can correct this by filtering based on subquery SQ1which is returning the top 5 services with highest average latency. To do this we simply apply subquery filter to both Query A and Query B and join on the URI path attribute.Now we can simply create an expression statement that multiples Query A and Query B to generate the HTTP demand (see $A * $B eval expressionin figure below).

We have easily leveraged powerful data and analytics in the AOC to generate very valuable insight into demand for HTTP services within an application.

Combining Queries in AOC Using Expressions and SubQueries



With the Netsil Application Operations Center, we have built a comprehensive operations platform driven by powerful analytics and data from the entire application stack. Using AOC analytics, SREs and DevOps engineers can build insightful queries that enable productive dashboards, actionable alerts and accelerated incident response.

We would love for you to try Netsil AOC, experience its powerful analytics and engage with us for improving the reliability of your business critical applications. Learn more at Netsil|||

In this blog we review the key characteristics of application monitoring data and analytics for operations teams running cloud apps in production.