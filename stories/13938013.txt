I’m not a big enthusiast of hard-coded values in my apps, mostly because of three things. First, it’s really annoying to change their value if necessary (especially if one is used in many places). Of course, we can use some „find and replace tool” but to be honest I don’t fully trust them. Another thing is that in many cases we have absolutely no idea what do they represent. Let’s say we have the following of code:

What does the second parameter represent? Is that some API key, client secret for hashing, or maybe it’s an invoice number? Who knows. Last disadvantage of such approach is that changing the hard-coded value requires all the code (or more precisely, assembly wich contains changed code) to be recompiled before deploying to the server. We can’t simply change and save it. That’s why I’d suggest using always some sort of configuration file. Fortunately doing that with ASP.NET Core is really simple to configure and use! And that’s what I’m going to present right now 🙂

Having this we can now move to the Startup class or our application. Inside ConfigureServices method we need to add the following line:

Believe or not – that’s all we need to do! Having the model registered we can now inject it inside some class. I’ll do this inside default WebAPI ValueController:

Notice that the only difference is that we had to inject PaymentSettings wrapped by IOptions interface. Comparing to the hard-coded values, this one has a lot of advantages:|||

