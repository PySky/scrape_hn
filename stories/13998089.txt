When one thinks of ways of customizing classes at creation time, people probably typically think of metaclasses and class decorators. Metaclasses are at typically viewed as the beginning of class creation while class decorators are at the end. But what you may not know is that there are two other steps in class creation that you can tweak: and (added in Python 3.0 and 3.6, respectively).

The hook is used to specify the object used for the class' namespace during construction (the object gets copied into a dict in the end for final storage into ). The method is specified on a metaclass and called before . Historically the method has been used to return so that the definition order of things in a class can be known later on. But since the returned object is used as the class' namespace you can also use it to inject objects to use in your class' definition.

To take an idea from David Beazley, you can abuse so you can define an ABC so that is implicitly available in the class definition.

Using this metaclass gives you access to without having to get it from .

This works because the way classes are created is essentially by taking the class' body and passing it to with the result of calling as the locals.

Another way to tweak class creation is . The method gets called when the defining class gets subclassed. It's passed both the subclass and any keyword arguments provided to the class definition line.

To help show a way to use this, I realized that you could abuse variable type annotations to make a "scary" version of Hynek Schlawack's attrs project. Basically the following class automatically defines an and (optionally) the for a class based on variable type annotations.

This then lets you create simple Python objects that you may have created using instead (aside: please don't abuse to make a simple Python object; the class is meant to help porting APIs that return a tuple to a more object-oriented one, so starting with means you end up leaking a tuple API that you probably didn't want to begin with).

You can also use keyword arguments to the class definition to skip the definition.

As with all things that tweak class creation, you must be very careful to not abuse this stuff. Adjusting how classes are created can be very difficult to debug and so should only be used when you have a really legitimate use-case. But this stuff is worth knowing about in case you run into code that uses it or you have a real need for it when there are no other reasonable options.|||

