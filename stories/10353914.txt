Writing about the somewhat surprising history of did leave me with one question: when did start to confine processes inside the new root directory hierarchy? This is an interesting moment because it marks the point where stops being a little hack to help emulation and instead turns into a security feature.

Early versions of appear to be trivially escapable by things like ' ', which puts you in the parent of the nominal root directory. A version of the system call that did not allow this appears in 4.1c BSD; you can see the code in . Unlike the 4BSD version of the same code, this code specifically checks to see if you are trying to look up ' ' at the chroot root directory, and remaps the result if you are.

I don't know for sure why this change appeared in 4.1c BSD, but it's possible to speculate. The 4BSD is essentially the same as the V7 , but the 4.1c BSD is significantly changed in several ways (for example, it has a lot more comments). 4.1c BSD is the first appearance of two significant changes related to ; it's when BSD introduced both a system call and the BSD . It also seems to have seen a significant reorganization of the kernel source code away from its previous V7-like appearance. So I suspect that when the BSD people were changing around anyways because of other changes, they noticed and fixed the chroot escape. With the chroot escape fixed, it was then used as a security feature in the 4.2BSD .

In V7, as I discovered, is documented in the manpage. However, while 32V, 3BSD, and 4BSD all still have the system call, documentation for it has disappeared from their manpages. A manpage (re)appears only in 4.1c BSD.

The 32V manpage seems to be the V7 manpage with the documentation removed (and it definitely isn't the V6 manpage). It may be that the stuff was removed because the 32V people thought it was a hack that was better off not being documented, or maybe 32V got their manpages from an earlier version of V7 that didn't have the addition.|||

