Workaround for macOS flickering: Some users are seeing VS Code flicker when running on high DPI external monitors #25934. The workaround is to set: in user settings (this produces a warning, but that is fine as VS Code still accepts the setting).

Workaround for macOS blurry icons: This issue appears if certain environment variables are set when VS Code launches #24820. The workaround is to either launch VS Code from the macOS Dock or clear the environment variable ( ) before launching from the terminal. The Insiders build applies this workaround and clears .

Welcome to the April 2017 release of Visual Studio Code. For this iteration, we shifted from our usual focus on new features to improving our processes and code base. We reviewed and triaged all our open issues, fixed bugs, and reduced engineering debt. We still think you'll find plenty to be excited about in this release.

During this milestone, we closed 2199 issues across all VS Code repositories. However, while we were busy closing issues, you were busy opening them. 1925 new issues, to be exact, and we decreased our total issue count by 274. By comparison, in March we closed 1719 issues while we gained 2221 issues, and our total issue count grew by 369. Overall, April looks pretty good.

And in case you are wondering, out of the 3775 issues that we currently track in github.com/Microsoft/vscode, 2368 are feature requests. We won't run out of work anytime soon :-).

Having this out of the way, we promised the release notes would not be empty:

The release notes are arranged in the following sections related to VS Code focus areas. Here are some further updates:

Insiders: Want to see new features as soon as possible? You can download the nightly Insiders build and try the latest updates as soon as they are available.

The workbench theming work started in the March release has been continued at full steam. Most gaps are now closed and we are happy to declare the currently available state as 'ready to use' for theme authors.

Theming support for list & trees (in particular the File Explorer and suggestions widget), diff editor, activity bar, notifications, scrollbar, splitview, buttons and more.

All built-in themes have been updated to take advantage of the new colors. You can find the full list of all colors in the Theme Color Reference.

The new user settings replaces the setting and lets users change colors on top of the active theme. If you have already used the experimental settings, use the color id mapping table to map the ids to the new format.

The Yeoman generator has been updated to create themes using the new color theme format. In addition, a new command Developer: Generate Color Theme From Current Settings is available in the Command Palette to help you turn your custom colors to a theme that you can share on the Marketplace.

We're also looking into ways to make theme creation easier in the vscode-theme-generator project on GitHub. The goal of the generator is to allow generation of good looking themes with as little effort as possible, hiding away the complexities of tweaking the individual workbench color keys and TextMate scopes.

With the , you can create a theme that looks like this by defining only 6 colors:

Search in Keyboard Shortcuts editor is improved to support all possible terms for modifier keys in corresponding platforms.

You can now also see the conflicts in the order of precedence.

Since the SCM API was released, there has been good progress in source control extensions around the community. Here are some of the SCM extensions already published in the Marketplace:

We are very excited about the possibilities of this API and expect more extensions to come out in the near future!

There has been a lot of progress improving the Git extension inside VS Code. This Git integration goes through the same extension points as third-party SCM providers.

Note: Starting in June, the legacy git integration will be completely removed. Until then, you can still revert back to it using the SCM: Enable Legacy Git command.

With the help of the Electron update, we can bring back basic support for native macOS Sierra tabs for window management. You can enable them via the setting after a restart. Once enabled, depending on your OS settings, new tabs will open when you open new windows. Make sure to show the tab bar (View > Show Tab Bar) to access tabs.

Note: Native tabs cannot be used with a custom title. When you enable native tabs, the title bar will change to native styling too.

We added a new setting that allows you to navigate between editors using 3-finger-swipe gesture with the trackpad on macOS. Swiping left or right will navigate across recently used editors in any editor group. This is similar to the Go > Back and Go > Forward commands we already had but will skip navigation from occurring within documents.

Note: The same commands that swiping triggers can also be executed via key bindings from the new commands and .

Note: We currently only support 3-finger-swipe gesture. Make sure that your trackpad settings for swiping are configured like the following to make this work:

Links to files with line and column ranges are now supported.

VS Code now ships with TypeScript 2.3.2. This update brings some new language features and fixes a number of important bugs.

TypeScript 2.3 also brings type checking to plain JavaScript files. This is a great way to catch common programming mistakes and these type checks also enable some exciting quick fixes for JavaScript.

TypeScript can infer types in files same as in files. When types cannot be inferred, they can be specified using JSDoc comments. You can read more about how TypeScript uses JSDocs for JavaScript type checking here.

Type checking of JavaScript is optional and opt-in. Existing JavaScript validation tools such as ESLint can be used alongside the new built-in type checking functionality.

You can get started with type checking a few different ways depending on your needs.

The easiest way to enable type checking in a JavaScript file is by adding to the top of a file.

Using is a good approach if you just want to try type checking in a few files but not yet enable it for an entire codebase.

To enable type checking for all JavaScript files without changing any code, just add to your workspace or user settings. This enables type checking for any JavaScript file that is not part of a or project.

You can opt individual files out of type checking with a comment at the top of the file:

You can also disable individual errors in a JavaScript file using a comment on the line before the error:

To enable type checking for JavaScript files that are part of a or , simply add to the project's compiler options:

This enables type checking for all JavaScript files in the project. You can use to disable type checking per file.

JavaScript type checking requires TypeScript 2.3. If you are unsure what version of TypeScript is currently active in your workspace, simply run the TypeScript: Select TypeScript Version command to check.

Changing the active version of TypeScript no longer requires VS Code to be reloaded.

With the update of the Electron shell, we fixed the issue with clipping of Markdown previews and the in-product release notes when using Zoom.

You can now more quickly bold or italicize text in a Markdown document using snippets. Simply select some text and run the command. The bold, italic, and quote snippets for Markdown have all been updated to operate on selected text.

You can also setup a key binding to use these snippets:

The editor now re-sorts the completions list while you type. That ensures that the completions you need are always on top and easy to select.

Grunt autodetection has been implemented for the new terminal task runner. With the new terminal runner, tasks are now detected for both Grunt and Gulp if both corresponding files ( , ) are present in a workspace.

In addition, the proposed task API has been polished. If you had already started to use it, you might encounter some minor breaking changes.

It is now possible to edit Watch expressions using the context menu.

Skipping files when stepping has been available for the protocol of the Node.js debugger for three releases. With this release, it is now available for the protocol as well. To control a file for skipping, use the context menu command Toggle skipping this file on a stack frame in the CALL STACK view.

Setting breakpoints on a particular column is now supported by the Debugger for Chrome extension, and by the protocol of the Node.js debugger, when debugging (yet to be released) Node 8. A column breakpoint can be set using ⇧F9 (Windows, Linux Shift+F9) or via the context menu during a debug session.

We have added some new APIs:

Take a look at the following sample:

With the update of Electron to 1.6.6, the Node.js version that is used to run all extensions updated from 6.4.0 to 7.4.0. There are some breaking changes coming with this major update of Node.js, though in general the impact should be minor. Please refer to this overview for a complete list of breaking changes from Node.js 6 to 7.

One consequence of the Electron update is that promise rejections are now treated as uncaught exceptions by the Node.js runtime even if the reject is caught later. Since this behavior is annoying when debugging an extension, we've introduced a new exception option to control promise rejections independent from regular exceptions:

attribute will become mandatory for and actions

VS Code tries to implement the Add to Watch and Copy Value actions by using the data from the VARIABLES view and a JavaScript-biased heuristic for building expressions that can be used with the evaluate request.

Since this approach does not work for all languages, we've introduced the attribute for variables some time ago. If the attribute is available for a variable VS Code will use it 'as is' for the evaluate request. If is missing, VS Code falls back to the old approach.

Since we plan to remove the fallback completely in the May release, debug adapters must support the attribute if they want to have the Add to Watch and Copy Value actions available in the future.

An optional argument, , has been added to the request. If a debug adapter has opted into this feature with the capability, a client can use this to control whether the debuggee should be terminated when the debugger is disconnected.

In this release, we updated from Electron 1.4.x to 1.6.6. This brings a Chrome update from version 53 to 56 and Node.js from 6.4 to 7.4. Among other things, this update enabled us to bring back native macOS Sierra tabs for window management (behind a setting ) as well as better crash reporting for the processes we spawn. This update also avoids some graphic glitches we have seen on macOS (background artifacts) as well as improved scaling of all UI elements when running with scaling enabled on Windows.

Unfortunately, we are also seeing some regressions with this update and we ask for your patience until we can move forward to a newer Electron version that fix these issues.

Note: If you are an extension author, please review the impact of this Electron update under the Extension Authoring section.

We've improved the install and update experience for Chinese users, who have always reported slow download speeds when fetching releases of VS Code. We now publish and distribute our releases to network servers located within China so you should start getting much faster speeds in that territory. Some of our test scenarios witnessed a speedup of ⚡️!

These improvements are available when downloading VS Code directly from our website as well as when receiving automatic updates.

These are the closed bugs and these are the closed feature requests for the 1.12 update.

Our team maintains or contributes to a number of VS Code extensions. Most notably:

Last but certainly not least, a big Thank You! to the following folks that helped to make VS Code even better:

We opened community localization this release and there was a lot of excitement from international users. We now have more than 100 members in the Transifex VS Code project team. We appreciate your contributions, either by providing new translations, voting on translations, or suggesting process improvements.

Here is a snapshot of top contributors for this release. For details about the project including the contributor name list, visit the project site at https://aka.ms/vscodeloc.

Although the languages below are not yet in VS Code, work is going on there as well. In the May iteration, we will review whether these languages meet the criteria for language integration into VS Code.|||

See what is new in the Visual Studio Code April 2017 Release (1.12)