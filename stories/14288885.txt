Sinatra is a DSL for quickly creating web applications in Ruby with minimal effort:

It is recommended to also run , which Sinatra will pick up if available.

In Sinatra, a route is an HTTP method paired with a URL-matching pattern. Each route is associated with a block:

Routes are matched in the order they are defined. The first route that matches the request is invoked.

Routes with trailing slashes are different from the ones without:

Route patterns may include named parameters, accessible via the hash:

You can also access named parameters via block parameters:

Route patterns may also include splat (or wildcard) parameters, accessible via the array:

By the way, unless you disable the path traversal attack protection (see below), the request path might be modified before matching against your routes.

You may customize the Mustermann options used for a given route by passing in a hash:

It looks like a condition, but it isn't one! These options will be merged into the global hash described below.

Routes may include a variety of matching conditions, such as the user agent:

Other available conditions are and :

You can easily define your own conditions:

For a condition that takes multiple values use a splat:

The return value of a route block determines at least the response body passed on to the HTTP client, or at least the next middleware in the Rack stack. Most commonly, this is a string, as in the above examples. But other values are also accepted.

You can return any object that would either be a valid Rack response, Rack body object or HTTP status code:

That way we can, for instance, easily implement a streaming example:

You can also use the helper method (described below) to reduce boiler plate and embed the streaming logic in the route.

As shown above, Sinatra ships with built-in support for using String patterns and regular expressions as route matches. However, it does not stop there. You can easily define your own matchers:

Note that the above example might be over-engineered, as it can also be expressed as:

Or, using negative look ahead:

Static files are served from the directory. You can specify a different location by setting the option:

Note that the public directory name is not included in the URL. A file is made available as .

Use the setting (see below) to add header info.

Each template language is exposed via its own rendering method. These methods simply return a string:

Instead of a template name, you can also just pass in the template content directly:

Templates take a second argument, the options hash:

This will render embedded in the (default is , if it exists).

Any options not understood by Sinatra will be passed on to the template engine:

You can also set options per template language in general:

Options passed to the render method override options set via .

Templates are assumed to be located directly under the directory. To use a different views directory:

One important thing to remember is that you always have to reference templates with symbols, even if they're in a subdirectory (in this case, use: or ). You must use a symbol because otherwise rendering methods will render any strings passed to them directly.

Renders the template string. You can optionally specify and for a clearer backtrace if there is a filesystem path or line associated with that string:

Some languages have multiple implementations. To specify what implementation to use (and to be thread-safe), you should simply require it first:

It also takes a block for inline templates (see example).

It also takes a block for inline templates (see example).

Since you cannot call Ruby methods (except for ) from a Liquid template, you almost always want to pass locals to it.

It is not possible to call methods from Markdown, nor to pass locals to it. You therefore will usually use it in combination with another rendering engine:

Note that you may also call the method from within other templates:

Since you cannot call Ruby from Markdown, you cannot use layouts written in Markdown. However, it is possible to use another rendering engine for the template than for the layout by passing the option.

It is not possible to call methods from Textile, nor to pass locals to it. You therefore will usually use it in combination with another rendering engine:

Note that you may also call the method from within other templates:

Since you cannot call Ruby from Textile, you cannot use layouts written in Textile. However, it is possible to use another rendering engine for the template than for the layout by passing the option.

It is not possible to call methods from RDoc, nor to pass locals to it. You therefore will usually use it in combination with another rendering engine:

Note that you may also call the method from within other templates:

Since you cannot call Ruby from RDoc, you cannot use layouts written in RDoc. However, it is possible to use another rendering engine for the template than for the layout by passing the option.

Since you cannot call Ruby methods directly from an AsciiDoc template, you almost always want to pass locals to it.

Since you cannot call Ruby methods directly from a Radius template, you almost always want to pass locals to it.

It also takes a block for inline templates (see example).

It is not possible to call methods from Creole, nor to pass locals to it. You therefore will usually use it in combination with another rendering engine:

Note that you may also call the method from within other templates:

Since you cannot call Ruby from Creole, you cannot use layouts written in Creole. However, it is possible to use another rendering engine for the template than for the layout by passing the option.

It is not possible to call methods from MediaWiki markup, nor to pass locals to it. You therefore will usually use it in combination with another rendering engine:

Note that you may also call the method from within other templates:

Since you cannot call Ruby from MediaWiki, you cannot use layouts written in MediaWiki. However, it is possible to use another rendering engine for the template than for the layout by passing the option.

Before being able to use Stylus templates, you need to load and first:

The template source is evaluated as a Ruby string, and the resulting json variable is converted using :

The and options can be used to decorate the rendered object:

Since calling ruby methods is not idiomatic in WLang, you almost always want to pass locals to it. Layouts written in WLang and are supported, though.

Templates are evaluated within the same context as route handlers. Instance variables set in route handlers are directly accessible by templates:

Or, specify an explicit Hash of local variables:

This is typically used when rendering templates as partials from within other templates.

A layout is usually just a template that calls . Such a template can be used either through the option as described above, or it can be rendered with a block as follows:

This code is mostly equivalent to .

Passing blocks to rendering methods is most useful for creating nested layouts:

This can also be done in fewer lines of code with:

Currently, the following rendering methods accept a block: , , , , . Also the general method accepts a block.

Templates may be defined at the end of the source file:

NOTE: Inline templates defined in the source file that requires sinatra are automatically loaded. Call explicitly if you have inline templates in other source files.

Templates may also be defined using the top-level method:

If a template named "layout" exists, it will be used each time a template is rendered. You can individually disable layouts by passing or disable them by default via :

To associate a file extension with a template engine, use . For instance, if you like to use the file extension for Textile templates, you can do the following:

First, register your engine with Tilt, then create a rendering method:

Renders . See https://github.com/rtomayko/tilt to learn more about Tilt.

To implement your own template lookup mechanism you can write your own method:

Before filters are evaluated before each request within the same context as the routes will be and can modify the request and response. Instance variables set in filters are accessible by routes and templates:

After filters are evaluated after each request within the same context as the routes will be and can also modify the request and response. Instance variables set in before filters and routes are accessible by after filters:

Note: Unless you use the method rather than just returning a String from the routes, the body will not yet be available in the after filter, since it is generated later on.

Filters optionally take a pattern, causing them to be evaluated only if the request path matches that pattern:

Like routes, filters also take conditions:

Use the top-level method to define helper methods for use in route handlers and templates:

Alternatively, helper methods can be separately defined in a module:

The effect is the same as including the modules in the application class.

A session is used to keep state during requests. If activated, you have one session hash per user session:

To improve security, the session data in the cookie is signed with a session secret using . This session secret should optimally be a cryptographically secure random value of an appropriate length which for is greater than or equal to 64 bytes (512 bits, 128 hex characters). You would be advised not to use a secret that is less than 32 bytes of randomness (256 bits, 64 hex characters). It is therefore very important that you don't just make the secret up, but instead use a secure random number generator to create it. Humans are extremely bad at generating random values.

By default, a 32 byte secure random session secret is generated for you by Sinatra, but it will change with every restart of your application. If you have multiple instances of your application, and you let Sinatra generate the key, each instance would then have a different session key which is probably not what you want.

For better security and usability it's recommended that you generate a secure random secret and store it in an environment variable on each host running your application so that all of your application instances will share the same secret. You should periodically rotate this session secret to a new value. Here are some examples of how you might create a 64 byte secret and set it:

Use the sysrandom gem to prefer use of system RNG facilities to generate random values instead of userspace which MRI Ruby currently defaults to:

Set a environment variable for Sinatra to the value you generated. Make this value persistent across reboots of your host. Since the method for doing this will vary across systems this is for illustrative purposes only:

Setup your app config to fail-safe to a secure random secret if the environment variable is not available.

For bonus points use the sysrandom gem here as well:

If you want to configure it further, you may also store a hash with options in the setting:

To share your session across other apps on subdomains of foo.com, prefix the domain with a . like this instead:

Note that actually stores all data in a cookie. This might not always be what you want (storing lots of data will increase your traffic, for instance). You can use any Rack session middleware in order to do so, one of the following methods can be used:

Or to set up sessions with a hash of options:

Another option is to not call , but instead pull in your middleware of choice as you would any other middleware.

It is important to note that when using this method, session based protection will not be enabled by default.

The Rack middleware to do that will also need to be added:

See 'Configuring attack protection' for more information.

To immediately stop a request within a filter or route use:

You can also specify the status when halting:

It is of course possible to combine a template with :

A route can punt processing to the next matching route using :

The route block is immediately exited and control continues with the next matching route. If no matching route is found, a 404 is returned.

Sometimes is not what you want, instead you would like to get the result of calling another route. Simply use to achieve this:

Note that in the example above, you would ease testing and increase performance by simply moving into a helper used by both and .

If you want the request to be sent to the same application instance rather than a duplicate, use instead of .

Check out the Rack specification if you want to learn more about .

It is possible and recommended to set the status code and response body with the return value of the route block. However, in some scenarios you might want to set the body at an arbitrary point in the execution flow. You can do so with the helper method. If you do so, you can use that method from there on to access the body:

It is also possible to pass a block to , which will be executed by the Rack handler (this can be used to implement streaming, see "Return Values").

Similar to the body, you can also set the status code and headers:

Like , and with no arguments can be used to access their current values.

Sometimes you want to start sending out data while still generating parts of the response body. In extreme examples, you want to keep sending data until the client closes the connection. You can use the helper to avoid creating your own wrapper:

This allows you to implement streaming APIs, Server Sent Events, and can be used as the basis for WebSockets. It can also be used to increase throughput if some but not all content depends on a slow resource.

Note that the streaming behavior, especially the number of concurrent requests, highly depends on the web server used to serve the application. Some servers might not even support streaming at all. If the server does not support streaming, the body will be sent all at once after the block passed to finishes executing. Streaming does not work at all with Shotgun.

If the optional parameter is set to , it will not call on the stream object, allowing you to close it at any later point in the execution flow. This only works on evented servers, like Thin and Rainbows. Other servers will still close the stream:

It's also possible for the client to close the connection when trying to write to the socket. Because of this, it's recommended to check before trying to write.

In the request scope, the helper exposes a instance:

This logger will automatically take your Rack handler's logging settings into account. If logging is disabled, this method will return a dummy object, so you do not have to worry about it in your routes and filters.

Note that logging is only enabled for by default, so if you inherit from , you probably want to enable it yourself:

To avoid any logging middleware to be set up, set the setting to . However, keep in mind that will in that case return . A common use case is when you want to set your own logger. Sinatra will use whatever it will find in .

When using or static files you may have mime types Sinatra doesn't understand. Use to register them by file extension:

You can also use it with the helper:

For generating URLs you should use the helper method, for instance, in Haml:

It takes reverse proxies and Rack routers into account, if present.

This method is also aliased to (see below for an example).

You can trigger a browser redirect with the helper method:

Any additional parameters are handled like arguments passed to :

You can also easily redirect back to the page the user came from with :

To pass arguments with a redirect, either add them to the query:

Setting your headers correctly is the foundation for proper HTTP caching.

You can easily set the Cache-Control header like this:

Pro tip: Set up caching in a before filter:

If you are using the helper to set the corresponding header, will be set automatically for you:

To properly use caches, you should consider using or . It is recommended to call those helpers before doing any heavy lifting, as they will immediately flush a response if the client already has the current version in its cache:

It is also possible to use a weak ETag:

These helpers will not do any caching for you, but rather feed the necessary information to your cache. If you are looking for a quick reverse-proxy caching solution, try rack-cache:

Use the setting (see below) to add header info to static files.

According to RFC 2616, your application should behave differently if the If-Match or If-None-Match header is set to , depending on whether the resource requested is already in existence. Sinatra assumes resources for safe (like get) and idempotent (like put) requests are already in existence, whereas other resources (for instance post requests) are treated as new resources. You can change this behavior by passing in a option:

If you still want to use a weak ETag, pass in a option:

To return the contents of a file as the response, you can use the helper method:

The incoming request object can be accessed from request level (filter, routes, error handlers) through the method:

Some options, like or , can also be written:

The is an IO or StringIO object:

You can use the helper to tell the browser the response should be stored on disk rather than displayed in the browser:

You can also pass it a file name:

Sinatra offers a helper method that generates a Time object from the given value. It is also able to convert , and similar classes:

This method is used internally by , and akin. You can therefore easily extend the behavior of those methods by overriding in your application:

The helper is used to find template files for rendering:

This is not really useful. But it is useful that you can actually override this method to hook in your own lookup mechanism. For instance, if you want to be able to use more than one view directory:

Another example would be using different directories for different engines:

You can also easily wrap this up in an extension and share with others!

Note that does not check if the file really exists but rather calls the given block for all possible paths. This is not a performance issue, since will use as soon as a file is found. Also, template locations (and content) will be cached if you are not running in development mode. You should keep that in mind if you write a really crazy method.

Run once, at startup, in any environment:

Run only when the environment ( environment variable) is set to :

Run when the environment is set to either or :

You can access those options via :

Sinatra is using Rack::Protection to defend your application against common, opportunistic attacks. You can easily disable this behavior (which will open up your application to tons of common vulnerabilities):

To skip a single defense layer, set to an options hash:

You can also hand in an array in order to disable a list of protections:

By default, Sinatra will only set up session based protection if have been enabled. See 'Using Sessions'. Sometimes you may want to set up sessions "outside" of the Sinatra app, such as in the config.ru or with a separate instance. In that case you can still set up session based protection by passing the option:

There are three predefined : , and . Environments can be set through the environment variable. The default value is . In the environment all templates are reloaded between requests, and special and handlers display stack traces in your browser. In the and environments, templates are cached by default.

To run different environments, set the environment variable:

You can use predefined methods: , and to check the current environment setting:

Error handlers run within the same context as routes and before filters, which means you get all the goodies it has to offer, like , , , etc.

When a exception is raised, or the response's status code is 404, the handler is invoked:

The handler is invoked any time an exception is raised from a route block or a filter. But note in development it will only run if you set the show exceptions option to :

The exception object can be obtained from the Rack variable:

Then, if this happens:

You get this:

Alternatively, you can install an error handler for a status code:

Sinatra installs special and handlers when running under the development environment to display nice stack traces and additional debugging information in your browser.

Sinatra rides on Rack, a minimal standard interface for Ruby web frameworks. One of Rack's most interesting capabilities for application developers is support for "middleware" -- components that sit between the server and your application monitoring and/or manipulating the HTTP request/response to provide various types of common functionality.

The semantics of are identical to those defined for the Rack::Builder DSL (most frequently used from rackup files). For example, the method accepts multiple/variable args as well as blocks:

Rack is distributed with a variety of standard middleware for logging, debugging, URL routing, authentication, and session handling. Sinatra uses many of these components automatically based on configuration so you typically don't have to them explicitly.

You can find useful middleware in rack, rack-contrib, or in the Rack wiki.

Sinatra tests can be written using any Rack-based testing library or framework. Rack::Test is recommended:

Note: If you are using Sinatra in the modular style, replace above with the class name of your app.

Defining your app at the top-level works well for micro-apps but has considerable drawbacks when building reusable components such as Rack middleware, Rails metal, simple libraries with a server component, or even Sinatra extensions. The top-level assumes a micro-app style configuration (e.g., a single application file, and directories, logging, exception detail page, etc.). That's where comes into play:

The methods available to subclasses are exactly the same as those available via the top-level DSL. Most top-level apps can be converted to components with two modifications:

is a blank slate. Most options are disabled by default, including the built-in server. See Configuring Settings for details on available options and their behavior. If you want behavior more similar to when you define your app at the top level (also known as Classic style), you can subclass :

Contrary to common belief, there is nothing wrong with the classic style. If it suits your application, you do not have to switch to a modular application.

The main disadvantage of using the classic style rather than the modular style is that you will only have one Sinatra application per Ruby process. If you plan to use more than one, switch to the modular style. There is no reason you cannot mix the modular and the classic styles.

If switching from one style to the other, you should be aware of slightly different default settings:

There are two common options for starting a modular app, actively starting with :

Or with a file, which allows using any Rack handler:

There is no need to switch to a simply because you switched to the modular style, and you don't have to use the modular style for running with a .

Not only is Sinatra able to use other Rack middleware, any Sinatra application can in turn be added in front of any Rack endpoint as middleware itself. This endpoint could be another Sinatra application, or any other Rack-based application (Rails/Hanami/Roda/...):

Sometimes you want to create new applications at runtime without having to assign them to a constant. You can do this with :

It takes the application to inherit from as an optional argument:

This is especially useful for testing Sinatra extensions or using Sinatra in your own library.

This also makes using Sinatra as middleware extremely easy:

The scope you are currently in determines what methods and variables are available.

Every Sinatra application corresponds to a subclass of . If you are using the top-level DSL ( ), then this class is , otherwise it is the subclass you created explicitly. At class level you have methods like or , but you cannot access the or objects, as there is only a single application class for all requests.

Options created via are methods at class level:

You have the application scope binding inside:

You can reach the scope object (the class) like this:

For every incoming request, a new instance of your application class is created, and all handler blocks run in that scope. From within this scope you can access the and objects or call rendering methods like or . You can access the application scope from within the request scope via the helper:

You have the request scope binding inside:

The delegation scope just forwards methods to the class scope. However, it does not behave exactly like the class scope, as you do not have the class binding. Only methods explicitly marked for delegation are available, and you do not share variables/state with the class scope (read: you have a different ). You can explicitly add method delegations by calling .

You have the delegate scope binding inside:

Have a look at the code for yourself: here's the Sinatra::Delegator mixin being extending the main object.

Paraphrasing from [this StackOverflow answer][so-answer] by Konstantin

Sinatra doesn't impose any concurrency model, but leaves that to the underlying Rack handler (server) like Thin, Puma or WEBrick. Sinatra itself is thread-safe, so there won't be any problem if the Rack handler uses a threaded model of concurrency. This would mean that when starting the server, you'd have to specify the correct invocation method for the specific Rack handler. The following example is a demonstration of how to start a multi-threaded Thin server:

To start the server, the command would be:

The following Ruby versions are officially supported:

Versions of Ruby prior to 2.2.2 are no longer supported as of Sinatra 2.0.

We also keep an eye on upcoming Ruby versions.

The following Ruby implementations are not officially supported but still are known to run Sinatra:

Not being officially supported means if things only break there and not on a supported platform, we assume it's not our issue but theirs.

We also run our CI against ruby-head (future releases of MRI), but we can't guarantee anything, since it is constantly moving. Expect upcoming 2.x releases to be fully supported.

Sinatra should work on any operating system supported by the chosen Ruby implementation.

If you run MacRuby, you should .

Sinatra currently doesn't run on Cardinal, SmallRuby, BlueRuby or any Ruby version prior to 2.2.

If you would like to use Sinatra's latest bleeding-edge code, feel free to run your application against the master branch, it should be rather stable.

We also push out prerelease gems from time to time, so you can do a

to get some of the latest features.

If you want to run your application with the latest Sinatra, using Bundler is the recommended way.

First, install bundler, if you haven't:

Then, in your project directory, create a :

Note that you will have to list all your application's dependencies in the . Sinatra's direct dependencies (Rack and Tilt) will, however, be automatically fetched and added by Bundler.

Now you can run your app like this:

Sinatra follows Semantic Versioning, both SemVer and SemVerTag.|||

sinatra - Classy web-development dressed in a DSL (official / canonical repo)