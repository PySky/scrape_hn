allows one to funnel both events (init, calls, casts, infos, state changes) and calls specific to identified entities into arbitrary watcher processes.

For example: remote activity tracers for sizeable software development teams (instead of hey, may you please check the log?)

There are two main parts to an ordinary setup:

.. and optionally, 3) Reuse your existing entity registration code by implementing the behaviour and adjusting app.config acordingly.

This software is built on the premise that watchers are few, rare, and mostly limited to development environments; therefore watching is heavy and privacy is light.

This software is a building block; tracking and monitoring entity processes on a watcher is left as an exercise for the reader.

is bundled as an out-of-the-box solution; it might not, however, suit your needs. Please mind that it will, for each spawned entity:

In order to lax this potential bottleneck, the indexing pool will spawn (10 x NumberOfSchedulers) monitoring processes by default, with one separate ETS table per indexer, and NumberOfSchedulers generally (but not always) corresponding to the number of CPU thread queues (usually NumOfCPUs x NumOfCoresPerCPU x (1 + HyperthreadPerCore)).

However, if you already have your own global process directory in place, it's recommended that you use it instead.|||

erlwitness - Tracing processes by semantic group (Erlang)