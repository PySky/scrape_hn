Xoces is a JavaScript widget for visualizing data that have both hierarchical levels and also relationships "within the same level". For example, you have learning outcomes grouped into subjects and you want to visualize how your outcomes relate to each other. Or you have actors and movies grouped by A/B/C/D-lists and you want to see how those all relate to each other.

Why use Xoces We want to save people time by providing a neat but powerful, configurable visualization that works more or less out of the box. You could code it from scratch from d3, but we think you'll find the API pretty easy to use. Just include the widget in your code or HTML, specify your data, and you're good to go.

See what the visualization looks like -- we have a few demos here.

If you use NPM and want to require Xoces as a module:

Xoces has dependencies and needs these dependencies to be installed and 'd into your environment:

To require Xoces in your ES6:

Alternatively, if you use CommonJS module style, you can do:

If you use the UMD bundle, everything is bundled along with you, so you don't need to install dependencies and can just do:

If you want to download the standalone bundle and load it into your HTML, this will makes the variable globally available. If you're not sure what NPM / CommonJS / ES6 is, this option is probably for you.

You can also load it directly from CDN:

Xoces lets you choose from 3 widgets: , , or .

The gets you the chord visualization.

The chord component visualizes one level of the hierarchy at one time. The major segments (arcs) are the entities that are in that level, and the minor arcs are the entities that are children of that entity. For example, in the below example, there are 5 arcs representing 5 programs, and the highlighted class of Circuits & Electronics is a subarc:

Whenever you click on a piece, the chord visualization changes to display the next level down. Confused? Take some time to explore our examples and keep reading to see what "hierarchy" means.

The gives you the tree visualization:

The tree component computes a rank for each entity and arranges them in order of increasing rank. So, the top-most entity is the "beginning" and the bottom-most entity has the "most things going into it".

The gets you the chord and tree visualization by displaying entities in tree view when you're at the bottom of the hierarchy.

Of course this doesn't quite work -- if you inspect the console, xoces tells you that you're missing mandatory configuration settings. At minimum, you need to specify:

The first step is to create a widget by passing in a config object.

Calling this method renders the widget onto screen. This method expects either the container or the id of the container element that wraps the widget. If the name you provided is not found, it will create an element and append it to the body. We recommend you always specify a container.

The config argument passed into is an object with these fields (and their default values):

Read more below on each field.

This field is an object with 2 fields: and . must be an array of Entity objects (see below for more detail), and must be an array of Relationship objects.

An object is just a plain-old JavaScript object, with two mandatory properties: and . The field is a unique identifier for the entity and must not be repeated. The field specifies what type of entity it is.

For example, this is a valid entity:

A object is also just a plain-old JavaScript object, with three mandatory properties: , , .

This field is required. This is an array of the types of entities, ordered by increasing granularity. This specifies how your entities are supposed to be nested. For example, your data model may look like:

Your hierarchy array would then be:

configuration.colorScheme or . The light scheme works better for print outs, while the dark scheme looks better for presentations.

configuration.width Sets the width of the entire widget.

configuration.height Sets the height of the entire widget. We recommend at least a px height.

configuration.onMouseOverFinish A callback function invoked when the user mouseovers a subarc or tree node. The function is invoked with one argument -- the object of the mouseover'ed entity

configuration.onMouseOutFinish A callback function invoked when the user mouses-out out of a subarc or tree node. The function is invoked with one argument -- the object of the mouse-out entity

configuration.onClickFinish A callback function invoked when the user clicks on a subarc or tree node. The function is invoked with one argument -- the object of the clicked entity.

xoces.widgets.TreeWidget() The config argument passed into is an object with these fields (and their default values):

configuration.nodeColor [String | Function] If passed a function, the function is called with the current entity and is expected to return a valid color string.

In the folder, there are 3 examples that are loaded into :

Please contribute or file requests! We respond within 24 hours.

Contact us at the MIT Mapping Lab [mapping-lab at mit.edu]|||

xoces - JS widgets for interactive chord and tree visualizations for hierarchical + connected data üöÄüç©üéâ