The Fast Track to Safe and Secure PHP Sessions

Most modern web applications use some form of session management system to link multiple HTTP requests to the same user. Every web application that has some concept of authentication relies on a session management system.

Typically, session management involves some sort of unique identifier stored in a cookie (e.g. ), established by the server, and returned by the client on every subsequent request.

Anyone who can steal a user's session identifier can impersonate the user who legitimately possesses it. Let's make sure that doesn't happen.

There are three primary threats to the security of a session management system in the context of a web application:

If you do nothing else to secure your users' browsing sessions to your website, use TLS. Mozilla developed a TLS configuration tool for taking a lot of the guesswork and ciphersuite selection out of deploying a website over HTTPS.

Be sure to set a Hypertext Strict Transport Security header so your users' browsers will know to only use HTTPS for your domain. The Mozilla tool linked above generates this header for you too. For added security, redirect plaintext HTTP requests to HTTPS so coax first-time visitors into a secure zone.

After ensuring that users will connect to the server over a secure channel, we should configure PHP for optimal session management by editing the appropriate file. Some of the decisions to make here depend on your requirements and resources; some prefer to use memcached for session storage, others prefer storing them in a SQL table. By default, PHP stores session state on disk.

The two most important configuration options to change are:

Still concerned about session fixation attacks? There are two ways to mitigate this: With a session canary, and by regenerating your session ID when privileges are escalated (or, optionally, at a regular interval).

Some systems like to bind a session to a particular IP address. This is not generally recommended; Tor users, in particular, will have difficulty staying authenticated. You can enforce this restriction here too.

Some frameworks and developers eschew server-side storage of session state and instead to offload it into the HTTP cookie. We generally advise against doing this. While it can be an appropriate choice for some applications, it is not without problems:

Problem 3 is usually solved in frameworks by using encryption. We only recommend that developers skilled at breaking cryptography applications and protocols implement these strategies, due to the delicacy involved in cryptography engineering.

The security of your application likely depends on the security of your session management system. Make sure you use HTTPS and configure PHP for optimal security.|||

How to configure and use PHP's build-in session management system for maximum security.