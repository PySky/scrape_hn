Heroku CI is a visual, low-configuration test runner that integrates easily with Heroku Pipelines (and so complements Review apps, existing Heroku apps, and our GitHub integrations). Any Heroku Pipeline is already Heroku CI ready – just turn it on in the Pipeline’s settings tab. Your test scripts will execute in automatically created, disposable environments that have strong parity to the Heroku staging and production environments you’re already using. Workflow support includes test run results and run log access from Heroku or GitHub, automated deployments conditional on CI results, and a fully visual interface built to support Heroku CI’s role in team-based continuous delivery.

We recommend that one Team or Enterprise Org own all the apps in a Heroku Pipeline (dev, staging, and production stages).

You will often notice that the GitHub interface displays the CI results next to a Heroku icon.

After you enable Heroku CI for a Pipeline, it runs tests automatically for every subsequent push to your GitHub repository. This means that all GitHub pull requests are automatically tested, along with any merges to master (typically deployed to Staging).

Test runs are executed inside an ephemeral Heroku app that is provisioned for each test run. The app is automatically destroyed when the run completes.

Heroku CI is configured via an in the root of your repository. Keys defined in the environment will take precedence over those in base configuration.

Keys that can affect CI app environment configuration are the , , , , and keys.

If your application or add-ons require environment variables during CI runs, you can specify them in .

Unlike Heroku Review Apps, environment variables are not inherited from a parent app. For any sensitive or volatile environment variables (like access tokens) that you do not want in your manifest, you can add them to your pipeline’s Heroku CI settings instead. Any environment variables specified in the Config variables will be available to each test run:

Additionally, the following immutable environment variables will be available for each test run (even though they do not appear in app.json):

The section in your manifest identifies test setup tasks and the test command. For typical usage with our officially supported languages, you do not need to specify these. Our buildpacks are able to detect, set up, and run your tests without configuration (please see additional documentation below specific to your language). If you do specify tests here, they will override the tests that would have been autodetected.

The and scripts in can be any shell command, including the path to an executable that exists within your application repo (e.g. ).

If you are using a less common or custom test framework or language, you’ll need to tell Heroku CI how to set up and run your tests.

For example, if you didn’t have any tests, but you wanted to at least verify the code meets your standards, you could install and run rubocop:

The can optionally be used to perform one-time setup tasks, for example:

The script should be the command you use to execute your tests. It’s likely the same thing you use in your local environment, e.g.: , or .

CI apps will use your project’s to determine which add-on services to provision using the default plan for temporary deployments (CI and Review apps) specified by each partner. These defaults are designed to be functionally similar to the production add-on plan, with enhanced provisioning and de-provisioning efficiency.

For example, test runs that use Heroku Postgres or Heroku Redis will substitute the Hobby plans for CI test runs.

Release Phase is ignored during Heroku CI test runs. We suggest placing any scripts that need to run before your tests in your script.

The (headless) Chrome buildpack is prescribed to enable tests that require Chrome (e.g. Selenium and other UAT technologies). Other solutions are also supported.

See documentation for Heroku CI user acceptance testing (UAT) for more detail.

Heroku CI offers lanugage support by the way of our “Testpack” API, which allow the buildpack to prepare your app for testing, and in some cases, detect what tests to run.

All of our officially supported languages have full Heroku CI support. Any third-party Heroku buildpack can [add such support (we encourage third-party buildpack maintainer to contact us for information).

Note that as Elixir is not an officially supported language you must still specify the buildpack in both your app.json.

For typical Node apps, this should mean you do not need to define test scripts in (but you may in ).

You’ll need to tell Heroku CI how to run your tests with , as they are not auto-detected.

For typical Ruby apps, you should not need to define scripts in app.json.

The Python buildpack does not automacally detect your tests. You’ll need to tell Heroku CI what tests to run with in your .

The Heroku Command Line Interface (CLI) includes a command which can be used to start a debug test run. This allows for inspection of the Heroku CI environment and execution of tests inside a test dyno. This is handy for solving issues where tests pass locally but not on CI or for debugging test setup problems.

This command should be run from within your code repository. It will build a new test run and execute the test setup phase. Note that the command doesn’t require you to push your latest commits to Github, it will create a new test dyno based on your latest local commit.

To skip the test setup phase (for debugging setup issues), run with the flag:

When released to General Availability (GA), there will be nominal fee for each CI-enabled Pipeline.

Additionally, as is currently the case during the Heroku CI beta, dyno and add-on run time for the duration of the test run is charged (prorated to the second).

This pricing will enable you to try Heroku CI on your Pipeline for some minutes for a few cents.

Cost details are available on our pricing page.

Each test runs on a Performance-M dyno by default, and will be billed at that rate prorated to the second. Note that this run time will include both and phases. For example, a 5 minute test run would incur $0.03 in dyno costs.

Alternative dyno sizes can be specified with the key in the environment section of your file. Dyno sizes of and above are supported. e.g.:

When a test run is created, any add-ons listed in ’s environment will be provisioned with the temporary deployments plan specified by the add-on vendor. If the environment is either absent or omits the key, in the base manifest is used. Note that add-on providers are informed that these add-on will be used to support ephemeral CI runs, partners may take measures to allow the add-on to provision and destroy faster, such as omitting long-term logging or regular backups.

Once the test run has completed – reported as , , or – the test run’s add-ons will be de-provisioned and destroyed. This means that any paid add-ons will be billed at the plan’s rate, prorated to the second, only for the duration of the test run. Free add-on plans remain free on Heroku CI.

On the settings page in your Pipelines interface, under “Configure Heroku CI” you can select which party will be billed for CI runs.

If your Pipeline is comprised only of resources owned by a Heroku Teams or Heroku Enterprise Organization (as we recommend), you will have only the option to bill that Team or Organization. If you have Personal apps in your Pipeline (which we do not recommend), you will be offered the option to bill CI runs to your personal account.

Rails default fixtures load test data by first disabling referential integrity. Due to restrictions in Heroku Postgres, referential integrity cannot be disabled. To work around this, consider one using another test data scaffolding tool (like FactoryGirl or Fabrication Gem). We are working to provide better support for Rails Fixtures, and hope to resolve this soon.

The Xvfb Google Chrome Buildpack is currently incompatible with the stack. If you need to use this buildpack, update your app.json’s stack to . We are working to resolve this issue soon.

We’re eager to hear about your experience (and help) with Heroku CI, so please send comments and questions to heroku-ci-feedback@heroku.com .|||

Developer reference for Heroku Continuous Integration