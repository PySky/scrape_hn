GPU Array package for Julia's various GPU backends. The compilation for the GPU is done with CUDAnative.jl and for OpenCL Transpiler.jl is used. In the future it's planned to replace the transpiler by a similar approach CUDAnative.jl is using (via LLVM + SPIR-V).

Julia offers countless advantages for a GPU array package. E.g., we can use Julia's JIT to generate optimized kernels for map/broadcast operations.

This works even for things like complex arithmetic, since we can compile what's already in Julia Base. This isn't restricted to Julia Base, GPUArrays works with all kind of user defined types and functions!

GPUArrays relies heavily on Julia's dot broadcasting. The great thing about dot broadcasting in Julia is, that it actually fuses operations syntactically, which is vital for performance on the GPU. E.g.:

Will result in one GPU kernel call to a function that combines the operations without any extra allocations. This allows GPUArrays to offer a lot of functionality with minimal code.

Also, when compiling Julia to the GPU, we can use all the cool features from Julia, e.g. higher order functions, multiple dispatch, meta programming and generated functions. Checkout the examples, to see how this can be used to emit specialized code while not loosing flexibility: unrolling, vector loads/stores

In theory, we could go as far as inspecting user defined callbacks (we can get the complete AST), count operations and estimate register usage and use those numbers to optimize our kernels!

Because of neuronal netorks, automatic differentiation is super hyped right now! Julia offers a couple of packages for that, e.g. ReverseDiff. It heavily relies on Julia's strength to specialize generic code and dispatch to different implementations depending on the Array type, allowing an almost overheadless automatic differentiation. Making this work with GPUArrays will be a bit more involved, but the first prototype looks already promising! There is also ReverseDiffSource, which should already work for simple functions.

CLFFT, CUFFT, CLBLAS and CUBLAS will soon be supported. A prototype of generic support of these libraries can be found in blas.jl. The OpenCL backend already supports mat mul via and / . CUDAnative could support these easily as well, but we currently run into problems with the interactions of and .

We have only benchmarked Blackscholes and not much time has been spent to optimize our kernels yet. So please treat these numbers with care!

Interestingly, on the GTX950, the CUDAnative backend outperforms the OpenCL backend by a factor of 10. This is most likely due to the fact, that LLVM is great at unrolling and vectorizing loops, while it seems that the nvidia OpenCL compiler isn't. So with our current primitive kernel, quite a bit of performance is missed out with OpenCL right now! This can be fixed by putting more effort into emitting specialized kernels, which should be straightforward with Julia's great meta programming and functions.

For the cudanative backend, you need to install CUDAnative.jl manually. The cudanative backend only works on 0.6, while the other backends also support Julia 0.5. Make sure to have CUDA and OpenCL driver installed correctly. will pick those up and should include the working backends. So if your system configuration changes, make sure to run again. The rest should work automatically:|||

GPUArrays.jl - Array operations defined for all kind of GPU backends.