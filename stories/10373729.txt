Last week, I gave a brief overview of what’s in the API, and said that if something is on our website then it should be in our API.  Over the next couple of weeks we are going to take a look at some of the data in the API that you can use to build your own applications.

There are a few things to note before I begin going into specific data examples.  Firstly, all of the API examples in this page are live, however they do not include API authentication tokens.  This means that if you follow the link as is, you will be using anonymous access, and anonymous access is throttled for fair use, so you may get a 403 response.

It is recommended for your own development you obtain an “app_key” and “app_id” by registering here.  Access to our API is free to all.  Append you unique “app_id” and “app_key” as querystring parameters to get dedicated, higher rate limits than anonymous.  If you need even high rate limits, send us a message using the portal. The data in these examples will be in JSON format, and it is recommended that you install a JSON formatter plugin in your browser, this will help you read the data returned.

This week we will focus on the “Location of Things”, in particular finding the location and other useful information about transport related things in London. Let’s start with stations and stops – you’ll need to take a look at this web page:



 In particular let’s take a look at the map.  Here you will see that the map has highlighted:

So how do we use the API to get the data for this page? There are several ways depending on what information you already know.

Let’s assume you only know the name or part of the name, you need to look up Kings Cross.  Here is a method that will look up all “Stop Points” that contain the term “Kings.”

The data returned includes the StopId, the name, the latitude (lat) and longitude (lon) of the matching locations and the modes of transport supported by that location.  As you can see there are quite a lot of locations including “Barkingside Underground Station”.  We can filter this query by mode to narrow it down (note that you can specify a separated list of modes if you want to include more than 1 mode).

This results in a much shorter list, and you can see how the results could be used in “Autocomplete” functionality, or to present a drop down for a user to choose.

If the user chooses a station, we can use the “id” to get the data about that stop.

The data that is returned includes the facilities at the Stop, and the “lines” served by the stop (please note that for buses we still use “line” you can consider it a synonym for “bus route”).  You will also notice that it returns all of the associated stops.  In this example, it includes, the associated bus stops, national rail and underground stops with their lines and facilities and location.

The reasoning for this is that typically people think in terms of “stations”, “Kings Cross Station”, even if they are going to a bus stop just outside, and in this case the bus stop naturally inherits the facilities and services at the station next to it.  So you will see if you pick the id of a bus-stop from the above query, such as https://api.tfl.gov.uk/Stoppoint/490004722M, that the response is the same as the previous example.

Therefore, in summary, the https://api.tfl.gov.uk/Stoppoint/{id} method always returns all the data from the biggest entity associated with the id, and includes all of the ‘children’ of that entity.

Finding stops near a co-ordinate or in a bounding box

How about finding stop points near to a geographical co-ordinate, as demonstrated on the ‘Nearby’ web page:

The Stoppoint method supports geographical queries expressed as a single co-ordinate and a radius or a bounding box.  Here is an example using a lat,lon co-ordinate:

The “stoptypes” given in the example are the most common set of stoptypes suitable for most use-cases (NaptanMetroStation is “tube station”), however there are more stoptypes in the system. These are based on the Naptan standard definitions, and the list of stoptypes available is available here:

Finding Stoppoint information for all stops on a line or bus route

What if you want to place all the stops on the Piccadilly Line or the 24 bus route on a map? To do this, we use the Line method, and request Stoppoint information, e.g:

These examples should give you a good start point for possible use-cases related to stops and stations, and we’d encourage you to take a look at the Stoppoint documentation on https://api.tfl.gov.uk for more detailed information on these and other methods for selecting and filtering stops.

Finding the locations of other things

What about the locations of other Transport things? The Unified API has a method “Place” for locating other Transport “things” that are not stoppoints, for example Jamcam locations:

Or the location of Oyster Ticket Shops:

Like Stoppoints, the “Place” API method also supports lat, lon and bounding box queries.  You can see a list of the Place Types available here:

We have a separate method for “Bike points”, and this is because the bike points include availability information that is updated every 5 minutes so it’s worth refreshing the data regularly.  The following method returns all of the Bike points with locations and additional information including the number of docks and the number of bikes available.

Like the previous methods, Bike Points also support searching by dock name, and using lat,lon and bounding box queries.|||

Last week, I gave a brief overview of what’s in the API, and said that if something is on our website then it should be in our API.  Over the next couple of weeks we are going to take a look at some of the data in the API that you can use to build…