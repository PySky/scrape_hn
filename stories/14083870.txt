closestmatch is a simple and fast Go library for fuzzy matching an input string to a list of target strings. closestmatch is useful for handling input from a user where the input (which could be mispelled or out of order) needs to match a key in a database. closestmatch uses a bag-of-words approach to precompute character n-grams to represent each possible target string. The closest matches have highest overlap between the sets of n-grams. The precomputation scales well and is much faster and more accurate than Levenshtein for long strings.

closestmatch is more accurate than Levenshtein for long strings (like in the test corpus).

closestmatch is ~20x faster than a fast implementation of Levenshtein. Try it yourself with the benchmarks:

which gives the following benchmark (on Intel i7-3770 CPU @ 3.40GHz w/ 8 processors):

The function in closestmatch is so slower than levenshtein because there is precomputation needed.

closestmatch does worse for matching lists of single words, like a dictionary. For comparison:

while levenshtein performs slightly better for a single-word dictionary (but worse for longer names, like book titles):|||

closestmatch - Golang library for fuzzing matching within a set of strings :page_with_curl: