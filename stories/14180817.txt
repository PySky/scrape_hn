Here is how you can add real-time capabilities to your GraphQL applications.

We'll need some help to get WebSockets working, so let's require two libraries.

One is for the server-side:

And the other is for the client-side:

We are going to extend our previous guide, so if you didn't read it, take a look before continue.

First, let's add our Subscription type to our Schema:

Simple like that. We can subscribe to inboxes to receive new messages.

And our resolver will look like that:

Yeap, it is just resolving to the message that it receives.

But where this message comes from?

Siler has a function at the namespace to define where your subscriptions are running:

Here we are assuming that they are running at localhost on port 8080.



This is just a helper that adds the Subscriptions endpoint to the Siler container so another function can actually use it when needed. And this function is !

will make a WebSocket call to the Subscriptions server notifying that something has happened.

It's first argument is the Subscription that will be triggered and the second argument is a data payload, in our case, the new message that has been created.

Our will look like this:

As in endpoint we need to setup the Subscriptions server:

Yeah, easy like that. Let Siler do the boring stuff. You just give a Schema to the function. This function will return an where you can call the method.

By default, Siler will run the subscriptions at localhost on port 8080.

Behind the scenes ReactPHP, Ratchet and Pawl are doing the hard work of handling WebSocket communication protocol while Siler is doing the work of adding resolver resolution to webonyx/graphql-php and handling Apollo's sub-protocol.

You'll need a GraphiQL app with Subscriptions enabled. For example: leocavalcante/graphiql-app.

A subscription query looks like this:

The result will not be immediate since we are now listening to new messages, not querying them.

Let's take a mutation from the previous guide. Open the GraphiQL app in another tab and execute:

Now go back to the subscription tab and see the update!

Awesome! Just one thing you probably have noticed. We have subscribed to all rooms. Make a test: create another Room if you haven't already and add a new message to that to see that our subscription tab, with as variables, just got this new message. How to solve this?

Filters are part of Siler and based on Apollo's setup functions. Filter functions receives the published payload data as the first argument and the subscription variables as the second, so you can use them to perform matches:

As you can see, we have extend our Subscriptions endpoint adding filters. The filters array keys should match corresponding Subscription names, in our case: . We are just checking if the given payload is the same as the provided by the Subscription variable . Siler will perform this checks for each subscription before trying to resolve and broadcast them.

We need just a little thing to get working. Adding this field to our payload since Message only has the . At the chat resolver, before the publish, add this line:

Note: when a RedBeanObject is encoded to JSON it automatically converts camel case properties to underscore ones. That is why we give , but receives as .

And that should be enough to solve our problem, now you only receive data from the subscribed rooms. Enjoy!|||

