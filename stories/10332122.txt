Today we’re going to build a CRUD todo single page application with Node, Express, Angular, and PostgreSQL.

Then create a new project and install the dependencies:

Add Supervisor to watch for code changes:

Update the script in the package.json file:

Then navigate to http://localhost:3000/ in your browser. You should see the “Welcome to Express” text.

With your Postgres server up and running on port 5432, making a database connection is easy with the pg library:

Save this as database.js in a new folder called “models”.

Here we create a new instance of to interact with the database and then establish communication with it via the method. We then run a SQL query via the method. Finally, communication is closed via the method. Be sure to check out the documentation for more info.

Make sure you have a database called “todo” created, and then run the script to set up the table and subsequent fields:

With the database connection setup along with the “items” table, we can now configure the CRUD portion of our app.

Let’s keep it simple by adding all endpoints to the index.js file within the “routes” folder. Make sure to update the imports:

Follow along with the inline comments below for an explanation of what’s happening. Also, be sure to check out the pg documentation to learn about connection pooling. How does that differ from ?

Test this out via Curl in a new terminal window:

Then confirm that the data was INSERTed correctly into the database via psql:

Add a few more rows of data via Curl, and then test the endpoint out in your browser at http://localhost:3000/api/v1/todos. You should see an array of JSON objects:

Navigate to http://localhost:3000/api/v1/todos to make sure the data has been updated correctly.

And you should now have:

Before we jump to the client-side to add Angular, be aware that our code should be refactored to address a few issues. We’ll handle this later on in this tutorial, but this is an excellent opportunity to refactor the code on your own. Good luck!

Let’s dive right in to Angular.

Create a file called app.js in the “public/javascripts” folder. This file will house our Angular module and controller:

Here we define our module as well as the controller. Within the controller we are using the $http service to make an AJAX request to the endpoint and then updating the scope accordingly.

What else is going on?

Well, we’re injecting the and services. Also, we’re defining and updating to handle binding.

Let’s update the main route in index.js within the “routes” folder:

So when the user hits the main endpoint, we send the index.html file. This file will contain our HTML and Angular templates.

Make sure to add the following dependency as well:

Now, let’s add our basic Angular view within index.html:

Add this to the “public” folder.

This should all be straightforward. We bootstrap Angular - , define the scope of the controller - - and then use to loop through the object, adding each individual todo to the page.

Next, let’s update the module to handle the create and delete functions:

Simply update the list item like so:

This uses the directive to call the function that takes a unique associated with each todo as an argument.

Test this out. Make sure that when you click a check box the todo is removed.

To handle the creation of a new todo, we need to add an HTML form:

Again, we use to call the function in the controller. Test this out!

With the main functionality done, let’s update the front-end to make it look a bit more presentable.

How’s that? Not up to par? Continue working on it on your end.

Now that we added the front-end functionality, let’s update the app structure and refactor parts of the code.

Since our application is logically split between the client and server, let’s do the same for our project structure. So, make the following changes to your folder structure:

Now we need to make a few updates to the code:

Did you notice in our routes that we are reusing much of the same code in each of the CRUD functions:

We should abstract that out into a utility function so we’re not duplicating code. Do this on your own, and then post a link to your code in the comments for review.

That’s it! Since there’s a number of moving pieces here, please review how each piece fits into the overall process and whether each is part of the client or server. Comment below with questions. Grab the code from the repo.

This app is far from finished. What else do we need to do?

What else? Comment below.|||

This article details how to build a todo app with Node, Express, Angular, and Postgres.