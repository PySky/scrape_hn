A step is missing between pymetaterp, the (eventual) Python-like interpreter, and tkui the self modifying GUI editor: a GUI toolkit. Tkinter fills that role right now.

But while Tcl/Tk is pretty light on resources, the source code is by no means small. A GUI toolkit like Tcl/Tk is a library to help making GUIs. The library in this post will do that but will also try to help making GUI toolkits (and making itself). It doesn't have a name yet. Lets call it the GUI toolkit toolkit ( ) for now.

This post is formatted like a tutorial (for making a GUI toolkit using this library) but glosses over some important topics (marked by square brackets like [compgeo]). Its to keep this post shorter and more focused.

This library is written in Python 2 (instead of a Python-like variant) at the moment and so is all the code in this post.

The library's source is unfortunately not available yet (discussed in this footnote [source]) so its more of a showcase and discussion of ideas for now.

Some reasons for making this.

Guitktk will still use some library to draw on some blank canvas. But, we'll make provisions to allow swapping between multiple libraries for handling input events and drawing.

As with tkui, we'll try to make it as self modifying as possible. This already need a decision.

How do we distinguish between input intended for editing and input intended for interacting with UI element?

I ended up choosing 2. Interaction will be left mouse button only. I think OSX can more or less get away with that so it seems at least plausibly doable. Possibly adding shift+left click, control+left click later.

The right mouse button isn't use yet in case something else comes up or maybe it should be left for user customization only.

For editing, I will use keyboard keys as many more mouse buttons. The more important buttons will be on half the keyboard, let's say the left half.

You can instead use whichever input handling method/division you like and make the appropriate changes from this tutorial. This library doesn't favour any method over the others.

Copy to and start it to get a (almost) blank canvas.

As the message here announces, I've hard-coded control-r to "reload" the main part of the program we'll edit. It calls so let's add something to that file now.

Pressing control-r adds "hello world" at the point [treedoc]. But there isn't really an interface yet. Our only interaction is to press control-r after editing .

As with tkui, we want some way to execute code from within the Canvas. Let's name the "hello world" text node we just added by giving it an and use it as an interpreter's input.

Delete the first line added ( ...) in and replace it with these two, reload and then delete them as well.

The first line gives the node we added a (unique) name: and the second line sets its content to the empty string.

We'll start with the easy part. Add functions in for adding a letter, execute the content (of ) and clear it.

Glossing over for now [events].

Now for the interesting part, mapping key presses to these functions. We could use callbacks on input events and track some internal state using global variables or parameters of some class.

I did that the first time around and it was a bit of a mess even when the state related functions were grouped in some semantically meaningful blocks.

Events come in a serial fashion and we already have a language maker so lets use that and treat each event as a token in the language.

To get the interactions we want, try to match event tokens to rules (and run functions if they match).

The grammar [guigrammar] I picked is similar to the boot grammar but distinguishes four kind of calls.

So in the example above, it matches a (Enter) followed by any number of events that are not a second keypress followed by a second keypress. Each event before the second that's a keypress calls (other events like mouse moves and click are ignored ( )). After the second , and then are called.

The starting rule is always for now so add

Lets take it for a spin (don't forget to hit control-r after adding the above to ).

from the library checks for collision detection [compgeo] and we use it to find the first element the mouse is over. We'll make left mouse click trigger this by adding a rule and replacing the rule.

to the grammar. The event matching functions are as expected

Lets see this in action! In the interpreter, run

Click on this new button and its label should change.

Right now we can add and edit things on the canvas running things we added through the interpreter, which isn't a very graphical way of interaction.

We've been adding nodes all over the place. Lets make that easier

Now when we press , a new text element is added at the mouse cursor and can be edited until we press .

Now to make text editable, change the rule to

and add the new function

This finds the first node the mouse cursor is over. We put the predicate first in the grammar so that if it returns , a new text element is created.

Optionally, we can do something with a newly created piece of text.

Lets make anything starting with a into a button, treating the rest of the text as a command to execute.

And lets treat anything that starts with a equal sign ( ) like a spreadsheet formula to be evaluated.

To move text around, we'll move their bottom left corner.

Press once to grab a point and a second time to drop it (and alternative would be to hold to drag; replace the last two with and write a function to get that effect instead).

is an ordered dictionnary for each node containing linear transformations and the order in which they should be applied. For the moment, they are more or less the SVG transforms [transforms].

applies these transforms and then clears the , essentially leaving everything at their original (visual) position but with a different representation.

Lets add some graphics element other than text! We'll add lines, paths and polygons.

The lines' endpoints can be moved by grabbing and moving the points as before.

For our GUI toolkit, we want containers that automatically align its contents like the in Tkinter. First, we'll create the alignment functions and then add nodes with auto-alignment.

and together describe a cardinal direction (up, down, left or right). is either 0 (x-axis) or 1 (y-axis) and is either 0 (towards -infinity) or 1 (towards +infinity).

finds the smallest bounding box containing all nodes.

Lets try it out from the interpreter and align the last three elements.

Seems good. To undo an alignment, we can delete from of all nodes.

We also want to be able to place elements inside a container spaced evenly.

Lets try it by running

Now to create nodes that automatically layout their children, we'll add a callback function that aligns and distributes the children of any node an property. This callback is triggered whenever a node in the document changes.

We assume the first child is a line from the top-left to the bottom right of the container. Their is no way to crop yet so they are just an indication of the position. Lets give it a try and add a node with .

We'll change and to accept an optional bounding box for the container.

and see that it places its contents as they are added

Now we have all we need to create a Tkinter Listbox. Pick some keyboard inputs for added auto_layout s and adding elements to them.

This concludes this tutorial where we saw how to make primitive (but customizable)

Not discussed in this post but already tried out and could be written about:

[source] There are quite a few design decisions about the internals that I'm really not sure of yet (like transforms, expressions, references). Its also at a hefty 2000 lines right now (that's excluding dependencies like undoable and excluding the contents of this tutorial). Some of that might be needed because of the different backends.

This post glosses over some important topics (marked by square brackets like [compgeo]). These topics are listed here with a brief description/discussion. Each of these might need a post of their own.|||

