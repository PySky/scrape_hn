When working with client backends, sometimes you end up using a language that you have no prior experience with. I worked on a backend written in Go and had to get up to speed quickly. Although the Go programming language is a C-like language, it has a handful of design decisions that can snag you and trip you up. I hope this article will help you avoid some of these pitfalls and make you more productive!

Go is an opinionated language and has several strong conventions for how the code should be written. The first thing you should learn is how to your code. It will reformat your code to match Go guidelines. This includes 8-space tabs for indentation! It is the official of the language and ensures everyone is comfortable reading Go the one true way.

Another Go convention is using 1-2 letter variable names for shortly scoped variables because variable names should only grow in length as the distance between definition and use grows. This rule tends to apply to the type variable of methods as well.





A peculiarity of Go is scoping. Scoping in Go is only done on the package level and by the name of the type, variable or function. If it starts with a capital letter, it will be exported. For example, the be available outside of its package, but the not be. Additionally, packages can be somewhat limited by being under . This allows you to create that will not be exported with the rest of the package.





One of the first quirks I noticed when switching to Go was the concept of zero values. The authors of Go wanted types to have values as soon as they are declared i.e. not have nil values. This means that most built-in types have a meaningful value when they are declared; numbers strings are the empty and booleans Arrays are filled with the zero value of their type. Unfortunately, slices (growable arrays) and maps do not have zero values and are therefore, they have to be initialized to some value before they can be used. Some example variable declarations illustrate their zero values:

Go comes with three built-in data structures: arrays, and maps. Arrays are exactly what you'd expect in a programming language, and maps are the common key-value dictionary that you see in many languages. Slices are built on top of arrays and offer a flexible length and ordered data structure. You may have noticed that there is no set data structure in Go; instead, a set can be mimicked with a map with a boolean as the value type (and is the recommended pattern). For example, for a set of strings, you would use

In Go, slices are almost exclusively used in lieu of arrays. They are backed by an array and will grow the backing array as necessary to accommodate more data (but never shrink it). They start out as nil and can be initialized or grown with the built-in They also have two internal counters: a length and a capacity. Length is the number of elements in the slice and capacity is the length of the backing array.

The three base data types are used in a confusing combination of operators, and functions. Defining the type of an array will give you a zero-valued instance, but slices and maps need to be instantiated with either or a literal instantiation:

Adding an item to a map is done with subscripts, but slices it may need the underlying array to be resized. Changing an existing value for all three can be done with subscripts as well. You can't remove an element from an array, only set the value at an index to its zero value. For maps, you use and for slices and reslice around the index, you want to remove. You can read from all three with a specific index value or by iterating through them all. Accessing a specific index is through the usual subscript operator. Iterating through all values is done with the

Several of Go's built-in keywords and operators have optional values. These are often neither obvious nor intuitive. Probably the most common keyword that returns a second, optional value is used to over Go's collections, and the first value is usually the index and the second is a copy of the value:

A nonintuitive optional second value is the map accessor. If you supply variable on the left side, it will be assigned a boolean value based on whether the first value is contained in the map. This is most useful when the zero value of the value type is a valid value:

The third use case of the optional second return value you'll most likely see is the type assertion operator. In Go, there may be times when you want to cast an interface to a concrete type. The type assertion will allow you to check and cast an instance to a concrete type. The one return value operator assumes that the assertion will pass and if it doesn't, it will panic. The two return value operator will return a bool, informing you if it was able to successfully cast the value:

Go allows interfaces for defining contracts for objects, much like many programming languages. All types in Go implicitly conform is the base type for the entire language. You can define your own interfaces with required functions as well. A type conforms to an interface if it implements all the functions of an interface - there is no explicit annotation on the type!

Go does not have the typical object-oriented programming inheritance. There are no classes, only and interfaces. However, it is possible to extend existing structs with struct embedding. You can embed a struct within another struct by adding an instance variable without a variable name. The parent struct can call any of its instance variable struct's methods without prefixing a name, and all instances of the parent struct can call the embedded methods. This allows for extension through composition while also allowing behavior reuse between structs:

In Go, errors are usually handled by returning multiple values from a function. The last value returned is traditionally the error with only requires that the implementor returns a reason for the error, so errors are really just a string describing the error. The Go pattern for creating error strings is a short lowercase string describing the error. Each function calls down the stack then adds its own error message like an onion, with the end error message describing from down how the error occurred:

The recommendation for wrapping the errors is embedding the existing error message at the end of the format string. However, the pkg/errors package greatly simplifies the wrapping of lower error messages!

I hope that with these tips and notes you can clear any hurdles and pitfalls you may encounter when first starting off with Go! It is a fun and interesting language, but quite different in some regards to other mainstream programming languages.

To learn more from Sean on creating a custom UICollectionViewLayout in Swift click below!|||

Go programming language is relatively new with some interesting design choices. Learn some tips and common pitfalls to help make you productive in Go.