Winterfell allows you to build up complex, multi-page forms with conditional questions, validation and conditional-page switching via a JSON schema, rendered by React.

Winterfell was initially made for a project in a sector that required a large, complex form with questions that would result in more questions or different pages when you clicked next. With an easy to write schema and a high level of customisation, comes a great power.

Winterfell uses a JSON schema to render your form. We will go through that later.

The schema is built up of three main parts, , and .

The initial entry is used as a page of questions, or in Winterfell's case.

Question Panels are the fleshed-out details about a page of questions. We defined the that exist on this page, any conditions for submitting the panel and button information. You should have one of these for every panel defined in formPanels above.

Each has the ability to have a header and some text along with it that is displayed above the questions. You can define these via the and fields.

Supported actions are and . When using , the can be any . places the in to the action field of the form element.

Questions Sets are groups of questions. Here is where you define questions with their validations, types, conditions etc. are recursive and will work as expected.

The questionSet below has an initial radio button with and options. When you select , a question asking for the users email address will render.

Each question has the ability to have some associated with it which gets rendered below the questions-label and some which will be rendered below the questions input.

The property is used to dictate when to validate the field. The default for this is , which results in the field being validated when the user unfocusses from the field. You can also set this field to which will validate the field as the user types, or changes their answer. Setting to will result in the field being validated when the next or submit button being pressed and only then.

Validations are handled via the Validator package on npm. In the key item, you can set your types of validation for the field. The must be a method on the Validator package, or a custom defined method.

A validation-items key must be an array of parameters for the validation method. The value will be unshifted to the start of the array and called up on the validation method in order. For example:

Validation item where the value must be a minimum length of 1.

Validation item where the value must be a minimum length of 1 and a maximum of 20.

You can also add a custom error message for the questions validaton item by using the property.

To validate a questions answer against another questions answer, you can wrap curly-braces around a parameter in the property and it will be turned in to a questions answer. For example:

Winterfell allows you to define classes for the rendered form in multiple different areas. To use them, place them in the root of the form-schema like so:

The table below describes the current set of classes.

The default set of input types that ships with Winterfell are the following:

You can also define custom input types like so:

Error messages can be set strings, or methods that are called to generate an error message. They can be set like so:

Validation methods can be defined and will be chosen over methods defined in the Validator package.

The following table shows the props Winterfell accepts, their types and descriptions. The only prop that is required is .

The following events can be registered as props of Winterfell.

Pull requests are completely welcome. If you'd like to get in touch, Tweet me. Initial schema design by Jordan Appleson.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.|||

Winterfell - Generate complex, validated and extendable JSON-based forms in React.