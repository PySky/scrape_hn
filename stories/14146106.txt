Have you ever used ?

You can do the same thing with !

More compact status with less hints.

Takes a commit or a range of commits and copies them onto your current branch.

I use this most commonly to get a single commit from another branch or from the reflog.

Remove untracked files (DANGEROUS but if you still have them open in your editor you can recover them; thanks emacs buffers!)

Imagine @towens2727 branches off of develop and makes a commit. So do I.

Later, @towens2727's commit is merged into develop.

Now, I have to merge develop into my branch if any conflicts arise.

Wouldn't the world be simpler if before doing any work myself, I waited for @towens2727 to merge all his code back into develop?

How can we accomplish this without restricting development to one developer at a time?

First, rebase rewinds your current branch to the point where you and the given branch diverged.

Then, starting from the given branch, it replays your commits.

It's as though you waited for that branch to get to its current state before you started committing!

Commits made this way will have a new commit id, so if you had already pushed commits to that branch on a remote, you'll need to force push.

By default, it doesn't show stats (unlike merge). But this is just a git setting away:

Git stores settings in 2 places: for the local repository and for global settings.

Local is usually just stuff like remotes. Look here to debug why remotes aren't working properly.

Here's a command I use a lot to reset the current branch to the origin:

This is handy for editor-specific files and things you don't want to bother with in every repository.

takes you to an interactive edit session where you can edit your commit history:

Here I'm using fixup to combine 2 commits, one of which is just fixing a typo.

Note: you can also if the typo happened on the most recent commit.

I'm also dropping an overly ambitious commit where I've digressed too far.

Now that we've seen we can drop commits (maybe a little too) easily, let's look at , which makes it really hard to lose work.

Even if I drop these commits, they're still reachable in my local .git history.

Even if I delete the branch that the above commit was on, I can still cherry-pick it a year later.

Checkouts, commits, rebases, and resets are tracked in the reflog.

As long as work is ever committed, you can find it in the reflog.

Sort of like how opens an editor of git commits, interactively goes through unstaged changes. You can press y to state, n to not stage, and e to edit the patch!

This command helps find the commit that introduced some bug by marking a known good commit (perhaps develop) and a known bad commit (probably HEAD) then letting git bisect the commits between them.

If you want to end early, .

Rather than stashing, I use WIP commits so that changes are associated with the proper branch, rather than being in a global stash.

I also have a shortcut for to to undo the WIP commit.

hub is a command line program for interacting with github.

It provides commands like , which creates a pull request from your current branch.

It also wraps every existing git command, so they recommend you alias to .

Show what commands git is running. Useful for debugging aliases and hooks.

For example: where is that "hi" message coming from?|||

git-tricks - Useful git commands and config