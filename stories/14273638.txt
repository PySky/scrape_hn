RSpec 3.6 has just been released! Given our commitment to semantic versioning, this should be an easy upgrade for anyone already using RSpec 3, but if we did introduce any regressions, please let us know, and we'll get a patch release out with a fix ASAP.

RSpec continues to be a community-driven project with contributors from all over the world. This release includes over 450 commits and 120 merged pull requests from 50 different contributors!

Thank you to everyone who helped make this release happen!

In previous versions of RSpec, we allowed errors encountered while loading spec files or running hooks to crash the ruby interpreter, giving you its default full-stacktrace output. In RSpec 3.6, we now handle all errors that occur outside examples, and format them nicely including a filtered backtrace and a code snippet for the site of the error. For example, an error in a hook is now formatted like this:

Thanks to Jon Rowe for assisting with this feature.

In past versions of RSpec, you were required to specify if you wanted output coloring, regardless of whether you were outputting to a terminal, a file, a CI system, or some other output location. Now, RSpec will automatically color output if it detects it is running in a TTY. You can still force coloring with , or if you are running in a TTY and explicitly do not want color, you can specify to disable this behavior.

We thank Josh Justice for adding this behavior to RSpec.

As it currently stands RSpec will exit with code indicating success if no examples are defined. This option allows you to configure RSpec to exit with code indicating failure. This is useful in CI environments, as it helps detect when you've misconfigured RSpec to look for specs in the wrong place or with the wrong pattern. When no specs are found and is set we consider this to be an error as opposed to passing the suite run.

A special thanks to Ewa Czechowska for getting this in to core.

The and matchers both accept a block. For the matcher, you use this to specify what you expect to change. For the matcher you use a block to specify your pass/fail criteria. In either case, the failure message has always been pretty generic. For example, consider these specs:

Prior versions of RSpec would fail with messages like "expected result to have changed by 1, but was changed by 2" and "expected 2 to satisfy block". In both cases, the failure message is accurate, but does not help you distinguish which or matcher failed.

Here's what the failure output looks like on RSpec 3.6:

Thanks to the great work of Yuji Nakayama, RSpec now uses Ripper to extract a snippet to include in the failure message. If we're not able to extract a simple, single-line snippet, we fall back to the older generic messages.

In RSpec 3, we added , allowing users to alias matchers for better readability. In 3.1 we added the ability to define negated matchers with the method.

Before RSpec 3.6 when you called either of these methods the newly defined matchers were always defined at the global scope. With this feature you are able to invoke either or in the scope of an example group ( , , etc). When doing so the newly defined matcher will only be available to examples in that example group and any nested groups:

Thanks to Markus Reiter for contributing this feature.

When we released RSpec 3.0 we added verifying doubles. Verifying doubles allow you to ensure that stubs and mocks that you create with RSpec correctly emulate the interfaces on the objects in your tests. allows you to turn off the verifying double behaviour for the duration of the execution of a block. For example:

Here, this test would fail if the call was not made, because we are stubbing the method on the object with an argument count that is different from the implementation. We added this feature specifically to address a problem with partial double verification when stubbing locals in views. Details can be found in this issue and the rspec-rails issues linked from it.

A special thanks to Jon Rowe for adding this feature.

RSpec 3.6.0 comes with full support for Rails 5.1. There are no major changes to the rails 5.1 API and so this upgrade should be fully smooth. Simply bumping to the latest version of RSpec will bring the support to your app with no other changes required on your part.

Rails system tests are not yet supported, but we plan to add support for them in the near future.|||

