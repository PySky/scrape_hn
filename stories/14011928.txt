One of the major benefits of using Skyliner is it allows you to run your applications on a cloud-native, best-of-breed architecture without actually having to do that work yourself. While in-depth knowledge of technologies will help you use Skyliner more efficiently, it’s certainly not required.

All of the resources that Skyliner creates to run your applications are created and managed via CloudFormation. CloudFormation’s main concept is a template, which is a declarative manifest of what resources should be created, their properties, and the way they fit together.

Templates are used to create or update stacks, which are sets of the actual resources described in the template. Existing stacks can be updated by changing the stack’s template, at which point CloudFormation will calculate and perform the set of steps (e.g. creating new resources or deleting old ones) required to make the stack consistent with the new template.

Skyliner uses CloudFormation to provide a consistent, common, and centralized interface for making changes to your account. CloudFormation records all changes made to its stacks and serves as a central ledger describing all of the changes made to your account.

When you install Skyliner into an region, it creates three stacks: a base stack and two environment stacks.

Creating the base stack does the following:

Skyliner creates two environment stacks–one for and one for Production. Each stack contains the following resources:

Subnet sizes are calculated based on the number of availability zones in the region. For a three- region like , the application subnet would be a , and the and database subnets a each.

When you create an application in Skyliner, Skyliner creates two copies of an application stack–one for and one for production. Each application stack contains the following:

Each time you deploy an application with Skyliner, it create a release stack containing the following:

Our goal with Skyliner is to build a product that is both reliable and accessible. The container orchestration ecosystem is incredibly promising but also incredibly young. In contrast, has seen more than a decade of investment in reliability and operability. It has a clean, well-defined control plane and peerless support for ad-hoc debugging when things go wrong with your application. Amazon’s sole container offering–Elastic Container Service–is only semi-managed. In order to use you need to run and manage a cluster of instances running the agent. As a result, adopters of are responsible not only for the operation of their applications but also for the operation of their fleet. To us, that was an unacceptable tradeoff for a product whose promise is bringing simplicity and order to the ecosystem. That said, our model intentionally maps well to a container orchestration approach. If Amazon releases something akin to Google’s Container Image–a fully-managed container solution–expect us to move quickly in adopting that.|||

