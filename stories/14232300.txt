A day doesn’t pass of using MongoDB that doesn’t make you reminisce of time spent on a real database.

I needed a way of partitioning a data set (specifically, our idempotency keys) so that N workers could independently work their own segment. A common/easy way to do this is to simply modulo by the number of partitions and have each worker switch off the result:

Here I didn’t have an integer key that I could use, but I did have a suitable string key in the form of each object’s ID which looks like . That’s okay though, because the ID is unique and makes a fine modulo candidate; all we have to do is hash its value and convert some of the resulting bytes to an integer.

Unfortunately, you can’t cast in a MongoDB query. The best you can do is fall back to JavaScript:

But now that you’re working in JavaScript, MongoDB can’t use any of its indexes.

With a sane database, I’d cast right in the query:

But hold on, that also can’t use the index on . Luckily, Postgres supports building indexes on arbitrary expressions, a feature that I took for granted for a long time, but whose utility comes into sharp relief after you lose it.

One quick command and the problem is definitively solved:

That’s a little ugly. No problem though; we can easily use an function to nicen things up, and call it from right within .

Back in MongoDB world, I had to add a column specifically for partitioning, modify my code to write to it, backfill old values, and even after all that I still won’t have a usable index!

Choose your technology carefully folks. You can spend your time either making mediocre databases operable, or solving actual problems.|||

