Comparing AWS Lambda performance when using Node.js, Java, C# or Python How differently does a function perform when using the different programming languages supported by AWS Lambda?

AWS recently announced that Node.js 6.10 was now available on the growing of programming languages that support AWS Lambda. In addition to Node.js, the other supported languages include Java, C# and Python

I wondered if AWS Lambda would perform differently depending upon the programming language used to code the function. To setup the performance test, I started by creating a simple HelloWorld test function which was a relative breeze thanks to the templates in the Serverless framework.

I created a simple Lambda function in each of the supported languages. The function will simply respond to an API Gateway event and return “hello”. See the test code here for each of the programming languages.

Below is the Node.js version of the function — you can check out my repository for the other programming language functions.

Using API Gateway as the trigger, I could simply invoke the function and apply a constant load using standard load testing tools for HTTP. For the load testing toolkit, I chose Artillery — it’s easy to get started with minimal fuss.

I ran the test for one-hour to compare the performance of each function. The test simulated 10 virtual users each sending 1 request per second — a total of 10 request p/sec for an hour.

Since we are only interested in the performance characteristics of the different programming languages, we’ll ignore the initial cold start time and only be look at the function duration metric.

Not surprisingly, the invocation duration is fairly consistent across the different programming — although C# is sticking out like a sore thumb.

Below is a 10 minute window from the performance test. As you can see, there were no spikes that looked like cold starts. The C# function is consistently higher than the rest.

For the same 1o minute test window If you look at the max duration for the same 10 mins window —the Java function was lower compared to others and had less variance, by some distance.

Comparing the average and max durations for the Java function over a longer period of time, you’ll notice that there’s very little difference between the two which suggests the performance of the Java platform is very consistent. I disregarded the spike at 01:38 which might be related to a garbage collection (GC) pause as opposed to a cold start.

When evaluating the max duration, it seems both C# and Java have less variance than others — perhaps because both are compiled languages?

One of the benefits with using Node.js and Python to write Lambda functions is that they produce much smaller packages — which we know translates to lower code start time.

The performance difference might be attributable with the Serverless template for aws-java-maven, since my HelloWorld Java example produces a whooping 2MB package. That is orders of magnitude bigger than the Node.js and Python functions. While I expected the Java package to be bigger than Node.js, although perhaps closer in size to the C# package.

Things are evolving at an incredible pace and whatever performance discrepancies we’re seeing today can change quickly as AWS improves all the platforms behind the scenes. So take these results with a pinch of salt — and don’t let this post dissuade you from writing Lambda functions in C#.

While my performance test observations show that the C# platform appears to be slower, we’re talking about sub-millisecond difference for a HelloWorld example. The test provides some insights, but it’s hardly representative of a real world application.

The DotNetCore platform — which C# Lambda functions run on — is also evolving quickly. As with all AWS improvements — any future performance tuning in the underlying platform will be immediately available to you at no cost.|||

AWS recently announced that Node.js 6.10 was now available on the growing of programming languages that support AWS Lambda. In addition to Node.js, the other supported languages include Java, C# and…