One of the harder problems that chatbot developers face is, how to maintain the context of conversation. While all the popular frameworks provide an opinionated take on how to maintain this , none of them seem to be either simple or complete.

Here let me introduce a reactive approach to maintain the .

This can be summarised as:

The elegance of this approach is that the pushed callback captures the state of variables as a part of its closure context. When the callback is called, this state is retained and we can time travel back to the state when the context was actually set.

Let me illustrate with an example of the classic pizza delivery bot:

This was a simple example where we used context stack to match the user intent. Things become more interesting when we are able to use the closure variables in the called callback.

Bot-context is a simple yet powerful way to manage conversation context in your shiny smart chatbot. It is a result of learnings from developing numerous chatbots.

Let us see the complete example using bot-context:

Thats it! The above code is all you need to handle all permutations and combinations of the answers the user may give. Please visit the github of the bot-context project for more details and discussion.|||

One of the harder problems that chatbot developers face is, how to maintain the context of conversation. While all the popular frameworks provide an opinionated take on how to maintain this contextâ€¦