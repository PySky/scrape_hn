This post is part of a series of posts designed to make you think about your own design philosophy on different topics. If you haven’t read these posts yet, please do so first:

Package Oriented Design allows a developer to identify where a package belongs inside a Go project and the design guidelines the package must respect. It defines what a Go project is and how a Go project is structured. Finally, it improves communication between team members and promotes clean package design and project architecture that is discussable.

Package oriented design is NOT bound to a single project structure, but states that a project structure is paramount to applying guidelines for good package design. Moving forward, I will present one possible project structure and the guidelines to follow based on the design philosophies presented earlier.

I believe that every company should establish a single project and then multiple projects for the different sets of programs that get deployed together.

Think of the project as a company’s standard library, so there should only be one. The packages that belong to the project need to be designed with the highest levels of portability in mind. These packages should be usable across multiple projects and provide a very specific but foundational domain of functionality. To this end, the project is not allowed to have a vendor folder. If any of packages are dependent on 3rd party packages, they must always build against the latest version of those dependences.

A typical project might look like this:

Note: There is nothing wrong with breaking each of these packages into their own repository. I don’t do this because it creates more work managing all these packages. Vendoring tools that exist today let you cherry pick the packages you need to vendor from a repository. This feature allows you to manage a single repository for packages.

projects contain the set of programs that get deployed together. The set of programs can include services, cli tooling and background programs. Each project is bound to a single repo that contains all the source code for that project, including all the source code for the 3rd party dependencies. How many projects you need is up to you, but always take a less is more approach.

Each project contains three root level folders. These are , and . There is also a folder inside of the folder, which has different design constraints from the other packages that live inside of .

A typical project might look like this:

Good documentation for the folder can be found in this Gopher Academy post by Daniel Theophanes. For the purpose of this post, all the source code for 3rd party packages need to be vendored (or copied) into the folder. This includes packages that will be used from the company project. Consider packages from the project as 3rd party packages.

All the programs this project owns belongs inside the folder. The folders under are always named for each program that will be built. Use the letter at the end of a program folder to denote it as a daemon. Each folder has a matching source code file that contains the package.

Packages that need to be imported by multiple programs within the project belong inside the folder. One benefit of using the name is that the project gets an extra level of protection from the compiler. No package outside of this project can import packages from inside of . These packages are therefore internal to this project only.

Packages that are foundational but specific to the project belong in the folder. These would be packages that provide support for things like databases, authentication or even marshaling.

An important aspect of package oriented design is the ability to validate the design of packages. This is possible because of the guidelines that are associated with a package based on its location inside the project. There are five validation steps that will help you identify design problems.

Here is a quick example of how we can review the project to understand how the project is put together and validate the dependency choices for each package.

Package Oriented Design fosters conversations and review to make sure packages maintain the best possible purpose, usability and portability. This drives clean package design for any package across the entire project. For package oriented design to be effective, you need strong rules about project structure. The project structure I have shared has been developed over the past three years and has been working effectively on multiple projects. Other project structures could be just as effective and I expect over time to continue to refactor my project structure and guidelines.

My goal in everything I teach is to get you to start thinking about what you are doing and why. To have you start asking questions and validate everything you are doing. I hope you start to think about package oriented design and begin to formalize how you structure projects and design packages for the projects you work on.

We have taught Go to thousands of developers all around the world since 2014. There is no other company that has been doing it longer and our material has proven to help jump start developers 6 to 12 months ahead of their knowledge of Go. We know what knowledge developers need in order to be productive and efficient when writing software in Go.

Our Go, Web and Data Science classes are perfect for both experienced and beginning engineers. We start every class from the beginning and get very detailed about the internals, mechanics, specification, guidelines, best practices and design philosophies. We cover a lot about "if performance matters" with a focus on mechanical sympathy, data oriented design, decoupling and writing production software.

To learn about Corporate training events, options and special pricing please contact:|||

