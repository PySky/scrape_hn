During Wishtack’s coachings and trainings, we noticed that when using modern web frameworks and libraries like Angular / React / Vue, developers are not mostly struggling with the syntax or the features.

The main issue is how to split code and responsibilities between components. How many components do I need, what should they do, how, when etc…

 Of course, there’s no generally applicable answer for these questions… but there are some best practices and that’s what I’ll try to share with you in this post.

We will focus on Angular but same logic applies to any other framework or library.

First of all, we will split components into 3 categories: View components, Container components and Dumb components. It’s a hierarchy that starts from top with the View Components and ends at the bottom with Dumb Components.

View components are the components at the top of the hierarchy. They are entry components commonly injected in the DOM by the router.

They should be the only components allowed to read the route parameters and decide which data should be loaded and displayed…

 …but they should not load the data or display it. It’s out of their scope.

 This will be handled by their children and grandchildren.

One other rule is that these components should not be in the same module as other feature components, services etc…

As view components are highly bound to the routing, they should be in dedicated routing modules.

Or even shorter using the  pipe:

Note the  suffix convention that tells that  is an observable emitting s​.

Be careful though. Don’t get used to the  pipe. It should be handled with care.

In this particular case, it’s just awesome but in other cases, if the observable is coming from  or some other similar source, using the pipe twice would trigger the request twice.

Container components are responsible of loading and updating data coming from stores and ReSTful APIs. They are configured using inputs.

They should never try to read the parameters from the activated route directly as they might be used in other views or even other applications. In addition to this, if you do so, it will not be trivial to find which components to update if you change your routing configuration (route parameter names for example).

And now with the proper observables subscription management logic.

Dumb components should only handle the display and UI. Data should come from its inputs and actions should be sent to the parent container component through outputs.

This kind of components will generally have more HTML and CSS logic than TypeScript business logic.

To summarize this, here’s a table for dispatching the responsibilities on the different components families.|||

Learn how to split code and responsibilities between Angular components.