This is a complete re-implementation, with a permissive MIT license, of presskit(), which was originally created by Rami Ismail of Vlambeer.

Warning: presskit.html is, currently, a tool for developers. You need to know how to use the command-line — but that's all, to be honest. However, we plan to create a small app to simplify this process in the future. Stay tuned by following our Twitter account.

presskit.html is a tool to create a presskit for your company, products or games.

To quote the original presskit():

It uses an almost-identical format and output as its precursor. The goal is to be compatible, as much as possible.

And even if presskit() was conceived with videogames in mind, we think that you can use it for any kind of product.

The goal of presskit.html is to generate only static HTML pages — no PHP required at all. Just fill some XML data files, add some images, execute a command, and boom. It's done.

You already have a presskit and you want to use this tool instead of the old un-maintained PHP-based presskit()? Read the migration guide.

Why reimplement presskit()? presskit.html is basically a static site generator for presskit(). Everything is built once on your computer, and then distributed as static files to your users.

We love the concept behind static site generators like Jekyll or Hugo. These tools create lightweight static HTML pages, which are, by design, more secure and efficient than using a PHP server, for example.

Moreover, if you use one of these tools to build your company or product's website, you can simply drop the result of presskit.html into your site directly, whatever the technology you are using — it's just HTML pages, after all.

That's mainly why we built presskit.html — that's how we make our websites, and we can integrate our presskits more easily this way.

We have also added some nice little things (like a "Press Copy Request" button, or widgets integration) and created a more robust implementation of presskit() (which is, unfortunately, un-maintained since 2014).

However, we have tried to be as close as possible to the original presskit format and style. In fact, comparing the output of presskit.html with the one of presskit() should be almost indistinguishable.

This is by design: the aim of the original presskit() was to create an instantly-recognizable website — almost a standard in the videogame industry.

You already have a presskit? Just try it: follow our migration guide, run presskit.html in the folder containing your presskit()-based and and you will have a ready to deploy set of HTML pages which are almost identical to what you already have.

You are using presskit.html? Tell us or submit a pull request!

Want to compare with presskit() websites? Check these ones:

The roadmap is available on Trello.

You will need a terminal and Node.js.

The simplest way to install presskit.html is to use npm (bundled with Node.js):

This should add a globally available command to your shell.

To update to a new version of presskit.html, just type:

presskit.html will then scan your local working directory (where you are executing the command) and all direct sub-directories for files and folders.

To launch your presskit with a server and automatically reload it each time your save a , just use:

You can also specify the folder to scan:

The command does a bunch more (watch mode, generation of , etc.). Use to learn more.

In order to generate a complete presskit, you should have:

The is used as the banner for the corresponding page. will be used as the product's brand.

The arborescence above should generate a build folder containing:

Simply copy all the files in the folder to your server… and you're done!

Note: the webserver is not included.

You can also try our example from this repository, available online here: http://pixelnest.io/presskit.html/example/.

For a tag by tag walkthrough, open these links:

If you have never written a presskit before, those links are a must-read.

For a more detailed documentation about some specific features, see below.

NB: since presskit.html is 99% compatible with presskit(), you can also just read the existing documentation there.

Warning: do not put XML tags inside your content.

For example, do not do this (note the ):

This is a new feature of presskit.html: you can put your widgets directly into your presskit pages.

Just add the tag, and the widget providers that you want:

We don't support other widgets for the moment, but feel free to send a pull request or submit an issue.

For each , you can add an folder containing the assets of your product or game.

You can provide multiple logos for a page. As long as they start with "logo", they will be displayed in the "Logo & Icon" section.

This will work, for example:

If a is found in the folder of a , it will be used as the favicon of this HTML page. It will not be exported in the , nor visible in the images gallery.

presskit.html will find every images and logos in the folder of a . Then, it will create two archives: and .

There's a small trick to know: if you provide one (or both) of these zips in your folder, presskit.html will just copy it directly, instead of overriding it. This is nice, because it allows you to provide a more complete (and heavy) zip. In this archive, you can, for example, put bigger gifs, images, artworks, or even videos.

That's purely optional, and most products or games won't need a specially crafted archive.

This tool is almost a drop-in replacement for presskit() (well, except for the fact that it generates HTML instead of using a PHP back-end — but that's simpler, not harder). Which mean that you can go in your folder containing the and , run and boom, you're done.

We have made some breaking changes between this format and the original presskit() format. But be reassured: they are fairly small, and are, indeed, useful.

This re-implementation of presskit() has a big difference: all your product URLs will break. With presskit(), you pointed to for the page. Here, you will point to directly (the is not required, which makes prettier URLs).

This can't be changed. We don't use PHP, but simple, robust and lightweight HTML files, and this difference is inevitable.

presskit() didn't require the protocol (ie., or ) for most URLs in the .

Note that the has no or protocol before its destination.

The problem with that is that we cannot deduce the protocol automatically. It will work seamlessly for the biggest sites like Facebook or Twitter, but we cannot guarantee that it will link correctly for everything.

That's why we require that you specify the protocol for your URLs:

Otherwise, the URL will be relative to your presskit, and thus, will break.

This is recommended, but presskit.html is smart enough to detect the company automatically, if your file structure is correct.

Your main containing your company information should use a root tag for your XML document.

Why? It allows us to better differentiate the main from the others. And moreover, it does not make sense that the company is considered as a , right?

The original presskit() assumed that you had only one release date for a product or game. And we all know that it's simply not true.

That's why we handle multiple release dates.

So, in your product/game , you must change your tag.

Why? We all know that there's no single release date for a product or a game.

In each , you can set a list of contacts:

In presskit(), you needed to set these informations only in the company page. Each product then retrieved the values from the company and added them automatically.

We modified that: now, you need to set these informations everywhere. That way, you can change mails and links for each product individually.

Pixelnest Studio is a small indie company, creating games and apps. You can contact us on Twitter at @pixelnest. Want to check our game, Steredenn? Go to http://steredenn.pixelnest.io/.

This couldn't have be made without the awesome work of Rami Ismail and the presskit() team. Thanks to them!|||

presskit.html - Re-implementation of presskit() as a static site generator