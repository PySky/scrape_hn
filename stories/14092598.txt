In this epic tutorial, we’re going to build some advanced Angular (v2+) components that rebuild Tesla’s battery range calculator and then compile it to AoT and deploy on GitHub pages. We’ll be using the reactive forms API as well and building custom form controls and use some stateful and stateless component practices, as well as change detection strategies.

This is the final project of what we’re about to build:

We’ll be building the above app step by step, so you can follow along with the tutorial.

Head over to the Angular CLI website and familiarise yourself with it. We’ll be running our local server and deploying with it.

First step, you’ll need a GitHub account if you actually want to deploy this to a GitHub pages instance. Go to GitHub and create your own repo called .

Let’s assume you’ve just created a repo called and are available to commit code to it from your machine. If you’ve not got the Angular CLI, you’ll want to run:

Then (note the same name as the repo):

It’ll take a few moments to download the required dependencies for the project. Then we can add the project to the remote:

Now if you check back on GitHub, the project should be there. Voila. Now we’ll get started.

Now we’re ready to roll, so let’s boot up our application:

Then you’ll be able to hit and see the app running.

We’ll make this easy and just drop in all our images before we really get started.

Once you’re done, unzip the folder and replace the downloaded favicon with the one in the project, and locate:

And then just drop all the images in there (and replace the in the root).

First thing we’ll do is create our sub-module, a feature specific module for handling our Tesla app.

First up, change your to this (remove comments if you like):

This will error if we save the file as our module doesn’t exist just yet, so let’s create it.

From the above code example, you can see we’re importing our module, so next up we want to create a new folder:

Inside your file, paste this in:

We’ll be populating this with new components as we go.

The data from Tesla’s website is actually hard-coded files that live on the server, I ripped them apart and created a new datastructure that made it easier to access properties once our values change.

Once you’ve copied the data from the above link, our service will look a little like this:

The is a decorator from Angular that allows us to inject our service into component, thus inferring they’re “smart” components. Once you’ve copy and pasted the enormous amount of data into your service, move onto the next step. We’ll come back to the datastructure later.

This is a new idea I’m currently working with in my Angular apps, separating “container” and “presentational” components, otherwise known as stateful and stateless components which I’ve previously written about, I’d urge you to check that out if you’re up for further reading.

The idea is that stateful components, which we’ll refer to as “container” components in the rest of this tutorial, will live inside our module’s directory. Any stateless components, i.e. presentational components, will just live inside .

So, go ahead and create these two directories:

A container component is in charge of sourcing data and delegating it down into smaller, more focused components. Let’s start with our container component (we only need one in this tutorial), so go ahead and create our first component directory :

Inside you should create two files:

Why no ? At the moment I enjoy using instead of a template file, it helps reduce context switching and keeps my thinking contained. With the CLI, you’re welcome to use should you wish to.

Next up, add these styles to your file:

We’re going to be using a in our component to define the data structure for the view.

This is pretty much good for now. Go back to and let’s import the new component:

Our needs to also look like this:

We’re using to export that particular component from our module, so we can use it in other modules that our is imported into.

Jump across to and replace the entire file with this:

Now open up and add this:

You should hopefully see some text in the app now as well as the logo header, but we need to add some more styling to our global file. Locate that file in the root of your project and replace the contents with this:

Upon saving this file, things will look a lot nicer. Right - back to the components!

Go ahead and create a directory inside a new directory (where we’ll keep our “stateless” components):

Then inside of there, create these two components:

This is what will produce our car image and make the wheels spin:

Now some styles for the file:

This gives us our animations and the component base for the car, which is displayed as background images. The value will be the wheel size that we need to pass in, but first we need to add these components to our module again (back to ):

We don’t need to this component as we’re only using it locally to this module.

Jump back into and add the component with the binding:

Because we’re using the , we can access the property (which sets the default wheelsize like Tesla’s website does) through the method, which returns us the form control. So all we’re doing here is accessing the property and delegating it into the component through the binding we just setup.

Here’s what you should be seeing:

At this point you could go change the value in the to to see the wheel size change, however we’ll be building that soon.

Now we’re going to render the stats for each Tesla car model.

Go ahead and create a directory inside the directory just like our previous component:

Then inside of there, create these two components:

Before we dive in, we need to define an for our “stats”, save this as inside a new directory in our root:

Each stat will contain the name of the Tesla car as well as the associated with the model based on the specific calculations we implement (this will become apparent as we continue).

This component is purely stateless as well, and takes a single of the . You can see we’re expecting a , which means an Array of Objects that align with our interface.

All this component is doing is iterating with over the stats that are passed in, and will then bind a specific class to the element based on the , which will allow us to swap out the background images to display the Tesla models.

Onto the CSS, drop this into :

You’ll notice at the end that we have values such as and being extended from the class, where we appropriately swap out the SVG backgrounds. These are the car models we’ll hook up and render momentarily.

Back to our , we need to add:

We’ve already implemented the huge amount of data for our , which we did at the beginning of this tutorial. Now it’s time to get the data and start rendering it.

Jump back into your file and add the following imports, to grab our interface and our :

We’ve already dependency injected the , so now it’s time to add our service, ensure the top of your looks like this:

A few additions here, the which I’ve just set to , a property which will again be our array of Objects. The is a list of the Tesla models that will then be passed down into the child component for rendering and switching out with the correct background image - but before they reach the child component they’ll be processed against our data model to return the mileage estimates Tesla provide as well.

Drop this method inside your file on the component class, it is our helper function to calculate the current stat that it needs to find in our monolithic Object model returned from our :

Now into the , ensure yours looks like this:

You can note our is now being bound to the synchronous response from our we injected, in a real world data-driven application your models may look different and be loaded via routing resolves or an RxJS subscription.

What we’ve just done is taken , and passed it into , with the second argument being the default value of our . This allows us to then run some calculations and render to our , fetching the correct units for each Tesla model.

This bit is complete, but just simply need to bind the component to our template now:

Here’s what you should be seeing:

Tesla’s Speed and Outside Temperature controls should be re-usable components, so we’re going to create a generic counter component that accepts a , value, value and some other metadata such as a and (mph/degrees) to inject in.

Go ahead and create a directory inside the directory just like our previous component:

Then inside of there, create these two components:

This bit is the complex bit, where we implement a to read and write directly to a , which we will implement after. I’ve annotated this file (which you need to paste into ) so you can understand what’s happening. Essentially it allows our component to directly communicate to the reactive we’re binding to it:

Once you’re done here, time for the styles for :

That was a bigger more complex implementation, but once you view it in the browser you’ll see the power behind it.

Back to our , we need to add:

Now we have a generic counter component that we can pass our values into.

Let’s jump back into our and add our custom form controls, as well as the :

Here we’re using to target the scope in our initial setup, then delegating the and controls down to our custom components.

At this point, you should see this:

This is a fun one. We have to monitor the value of the control, and once it hits degrees, we switch “heating” to “aircon”. When it’s below degrees we switch it back to heating. Let’s do it!

Go ahead and create a directory inside the directory just like our previous component:

Then inside of there, create these two components:

Once you’re done, populate your component with this, which should look a little familiar:

We’re pretty much doing the same thing as the previous component, however we’re directly writing the property to a as seen here:

So when , the checkbox is ticked. Pretty simple, and we can monitor those changes with our custom form control, switch out some text and class names when the value changes.

Our is when the temperature reaches a specific limit ( degrees) we need to tell the component from the outside as we’ll be monitoring changes, which we’ll complete once we add the component to the template shortly.

Back to our , we need to add:

Now for the fun part, we need to implement that !

Let’s jump back into our and add our custom form control (make sure it sits exactly as shown here as the styling keeps it looking jazzy):

The magic piece here is simply and passing that expression down as a binding to . This will be re-evaluated when Angular runs change detection on our component, and the result of the expression down into the component. You can check the styling to see how it works internally with particular class name swapping.

This one’s my favourite (and the final component) just because I love the animation on the wheels.

Go ahead and create a directory inside the directory just like our previous component:

Then inside of there, create these two components:

Once you’re done, populate your component with this, another custom form control that accesses inputs:

The only real thing to note here is that we’re using to dynamically generate the wheel sizes and then assign the correct class names to the elements. As it’s a button, only one can be selected at a time, you’ll also be able to use keyboard left/right/up/down arrows to flick through the sizes once we’ve implemented it!

As always, the styles. Jump into :

Back to our , we need to add:

This one’s an easy addition to our (ensure it’s outside the containing the counters for styling purposes):

Now we’re done! Or are we? Nothing actually changes when we change our form controls.

Now to implement the final feature, then we’ll deploy it to GitHub pages with Ahead-of-Time compilation.

Jump inside your again, inside add this:

All we’re doing here is accessing the Object (square bracket notation as TypeScript enjoys moaning) and subscribing to value changes. Once a value is changed, we can simply run the method again with our existing results that we set at runtime, as well as the new data Object being passed as the second argument instead of the initial form value. The Objects are the same as the initial form value, so we can reuse the function, they just have different values.

Your should look like this:

You should have a fully working Tesla range calculator:

AoT means Angular will precompile everything (including our templates) and give us the bare minimum Angular needs for our application. I’m getting around for this entire project, including images, fonts. of that is Angular code!

Angular CLI to the rescue. Ready to deploy what you’ve just built?

Make sure you’ve pushed all your changes to , then run it:

It should give you something like this:

Visit the URL the CLI gives you and enjoy.

Grab it all on GitHub.|||

In this epic tutorial, we’re going to build some advanced Angular (v2+) components that rebuild Tesla’s battery range calculator and then compile it to AoT a...