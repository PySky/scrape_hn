These blog posts may be helpful: Every Build in Its Own Docker Container, Master Branch Must Be Read-Only, Rultor + Travis, and Rultor, a Merging Bot.

Automated deployment scripts have been around for some time. Rultor attempts to tackle the problems those scripts do not.

The first benefit of Rultor is that it gives you isolation of your deployment script in its own virtual environment by using Docker containers. This substantially reduces the amount of external state that could affect your build and makes errors more easily reproducible.

Additionally, because of the way Rultor integrates with modern issue trackers, all the logs are stored and published to the ticket on which Rultor was mentioned. Making vital information easily accessible to all developers.

Rultor performs pre-flight builds. Instead of merging into master and then seeing if your changes broke the build or not, Rultor checks out the master branch, apply your changes to it, then runs everything it was set up to run. If, and only if, everything goes well, Rultor merges the changes into master. This programmatically prevents the master from being broken by developers. Not having to worry about breaking the build for everyone else has a very positive impact in the way developers write code, increasing their productivity and mitigating their fear of making mistakes.

Lastly, Rultor provides an integrated and humanized interface to DevOps tools, as a human-readable sentence suffices to trigger a merge or a release.

Once Rultor finds a merge command in one of your GitHub pull requests, it does exactly this:

You can see it in action, for example, in this pull request: jcabi/jcabi-github#878.

Fork repository, make changes, send us a pull request. We will review your changes and apply them to the branch shortly, provided they don't violate our quality standards. To avoid frustration, before sending us your pull request please run full Maven build:

To avoid build errors use maven 3.3.x and have a Docker environment properly loaded into the shell from which you run the build. If your environment does not have the ability to run a working Docker client and daemon, you can run the build without the Docker based integration tests via:

If you have questions or general suggestions, don't hesitate to submit a new Github issue.

We're using all possible continuous integration systems, mostly for fun :) Here is our selection criteria.|||

rultor - DevOps Team Assistant