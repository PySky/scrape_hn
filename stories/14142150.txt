TL;DR: Vuejs is a progressive JavaScript framework for building user interfaces on the web. It was launched shortly after ReactJS and over time, lots of developers started adopting it in their daily work. In fact, with the launch of Vuejs 2.0, the adoption and usage worldwide skyrocketed. Currently, Vuejs has over 49,000 stars on Github. In this tutorial, I'll show you how easy it is to build a web application with Vuejs 2 and add authentication to it. Check out the repo to get the code.

Vuejs was developed by Evan You, an ex-Google software engineer. Just before launching Vuejs 2.0, he started to work on Vue.js full time and as a result, Vue.js 2 is now significantly lighter, smaller in size and faster. Currently, many popular products use Vuejs to build their user interfaces. Such platforms include Laravel Spark, Grammarly, Statamic, Laracasts and more. There is a comprehensive list of projects using Vuejs on Github. Vuejs 2's documentation is very detailed, and there is a vibrant community of users.

Vuejs was inspired by AngularJS in it's early days of development, thus making some of its syntax look very similar to AngularJS, e.g , and . Angular 2 came to the scene with a completely new framework in terms of API design, underlying language and many addons, which was initially disturbing for a lot of developers. Now Vuejs 2, despite being a full rewrite made its API largely compatible with Vuejs 1.0, thus making it super easy for developers to transition from Vuejs 1.0 to 2.0. Whoop! Whoop!

Vuejs 2.0 comes bundled with some major changes:

AngularJS(Angular 1) uses two-way binding between scopes, while Vue enforces a one-way data flow between components.

Vuejs 2 and Angular 2 are similar in a way because they both offer component-based systems.

React and Vue.js are also similar in many ways. They both:

Note: If you are coming from jQuery and new to Vuejs, here is a refresher to bring you up to date.

Vue.js and React utilize virtual DOM, but Vue's virtual DOM implementation allows rendering of UI to be faster than that of React, because it involves less overhead. Let's look at some performance statistics done by the Vue.js team. Check out the repo here.

This benchmark was run 20 times with results from the best runs on a 2014 MacBook Air.

By default, React triggers a re-render of an entire component subtree when state changes. To avoid unecessary re-rendering, you have to manually implement . In Vuejs, a component’s dependencies are automatically tracked during its render, so the system knows precisely which components actually need to re-render.

According to this benchmark, Vue 2's app size is smaller than Angular 2.

Vuejs 2 is similar to React and Angular 2 in a few ways. There are few key concepts that will help you get started easily. I'll give a basic overview of these concepts to nourish your understanding of Vuejs. They are:

You can decide to use Vuejs 2 by simply invoking methods on a Vue instance or go the component-composing route.

The result of the code above on the browser will be Hello, it is this easy!. The value of any property in the data object within a new Vue instance will be rendered to the DOM easily. The curly braces are used to display the property on the web page.

It's very easy to toggle the display of items on a web page with inbuilt directives such as , like so:

If for any reason, the function returns false, the paragraph would not be displayed on the web page. What about iterations and loops? Check out the code below

On the page, it will simply display:

Vuejs 2 also leverages components. It allows you to build large applications composed of small, self-contained smaller components.

An example of a component is an HTML5 tag, say . A header can have attributes, it can be styled and also possess its own behaviour. In Vuejs 2, you'll be able to build your own custom component by registering it like so:

Then, you can use it in another component like so:

So, your component will now be .

Vuejs 2 provides some methods that are triggered at various points from creating a component up until the component is destroyed. This is called the Instance Lifecycle, also known as the Component's Lifecyle. Each Vue instance goes through a series of initialization steps when it is created - for example, it needs to set up data observation, compile the template, mount the instance to the DOM, and update the DOM when data changes. So you can execute custom logic in these hooks. These lifecycle hooks are , , , , , , , , and .

Vuejs 2 possess some built-in components such as , , , and . You can take advantage of these components in your app. Check out how to use them.

is the short form for . Properties are attributes of a component. In fact, props are how components talk to each other. A tag in HTML such as has an attribute, a.k.a called that points to the location of an image.

In Vue.js 2, you can pass data from the parent scope into child components. A typical example is this:

It will display these items on the web page like so:

Vue.js 2 uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying Vue instance’s data. All Vue.js templates are valid HTML that can be parsed by spec-compliant browsers and HTML parsers.

You can also decide to use JSX. JSX is the combination of HTML and JavaScript code in the same file. The browser is not meant to understand it. It must first be transpiled into standard JavaScript before the browser can understand. An example of JSX usage in Vuejs is:

Now, by default, Vue doesn't support JSX, but with the help of babel-plugin-transform-vue-jsx we can use JSX with Vue. Oh, the ecosystem should be thanked for this great tool. Whoop! Whoop!

With Vue 2, you can use the function to create a reactive element. And you can use JSX in it like so:

Can you see the power of JSX manifesting itself in Vue? Awesome, you can check out more information on JSX in Vue here.

Next, let's build an application with Vuejs 2.

The app we will build today is called . Several startups are springing up all over the world. These startups are coming up with innovative technology but have limited funds. Our app hopes to alleviate the issue of funding by providing an up-to-date list of startup battles all over the world with details of sponsors and seed fund amount. The Ultimate Startup Battle Ground app will display a list of startup battles to the general public.

Interested startup founders can get hold of this list and ensure their team does not miss out on it. However, the app will also provide a list of secret startup battles. This list will only be accessible to registered members.

Note: The secret startup battles have bigger sponsors. How dare you miss that? Not gonna happen!

Let's build an API to serve the list of startup battles to our app. We'll quickly build the API with Node.js. The API is simple. This is what we need:

Go ahead and fetch the Node.js backend from GitHub.

Note: We'll be securing the backend with Auth0, so make sure you have an account already or sign up for one.

Your should look like this:

Check out the full server.js file here.

Note: Your should be replaced with your auth0 domain.

Your file should look like this:

Once you have cloned the project, run an , then use postman to serve your routes like so:

The public startup battles endpoint should be .

The private startup battles endpoint should be .

Don't worry about the middleware in charge of securing our endpoint for now. We'll deal with that later. Now, let's build our frontend with Vuejs 2.

In the early days of Vuejs, there was no particular recommended tool or common way to set up a Vuejs app. However, there is a tool now for scaffolding your Vuejs apps. It's called the Vuejs CLI tool. It's being maintained by the Vuejs team.

Go ahead and install the vue-cli tool globally like so:

You will be greeted with a series of questions

After installing globally, go ahead and scaffold a new Vuejs 2 app like so:

Note: In this context, is a template. You can actually select the template you want to scaffold your app with. Another alternative is to use . Check out the list of templates here.

Move into the new directory, and run to install all the dependencies required for your app.

Now run from your terminal to start up your app. It should automatically open up your web browser at and serve your new app.

Let's check out the structure of our newly scaffolded app.

We will work with this structure but make some few modifications.

Note: We are not writing any tests for this application. It's out of the scope of this tutorial. So during the installation, I opted out by choosing the no option.

Make the following modifications like so:

The first thing we need to do is to fetch the API data from our Node backend to display in our app. Make sure the Node server is running.

Let's create a helper file to handle fetching the API. Create a file inside the directory.

Open up the file and add code to it like so:

Note: Install in your app by running .

We are using a very good promise based http client, axios. An alternative for this is superagent.

In the and functions, axios fetches data from the API endpoints. Then we do this: to make them ready for use in our components.

The file is our Nav component. Go ahead and add code to it like so:

The Component from enables seamless client-side transition between routes without any page reload.

By default, these two components will look similar in functionalities. They both display data from different endpoints. Let's start with the component.

Let's analyze the code above. The component is pulling data from an API, so it needs a way of holding that data. Vuejs has a method where you can define properties to hold your data as some form of state. In the code above, we declared a property.

The property also comes by default with Vuejs. In this property, you can define custom logic as functions within this property. So we defined and functions.

In the method, we call the method we exported from the helper file and set state as seen below:

Now, we took advantage of one of the Vuejs 2 lifecycle hooks, . Whatever is defined in this method is applied just after a component is mounted on the browser screen. So, we invoked the method in the hook as seen below:

All we are trying to do is tell Vuejs to load the data from the API just after the component gets rendered.

Note: You can add a loading indicator or spinner to present to the user while the data is been loaded from the API. This avoids flashing of blank screens. Check out vuejs transition for loading data.

We imported the component and registered it under the property. The property has a value of . What that simply means is this. If we need to use this component in a template, then we would have it as .

Let's take a good look at what is enclosed in the tag. This is what is rendered on the screen.

We looped through the property which is now an array with the help of the inbuilt directive to display the contents on the screen.

That's the property right there. Vuejs automatically binds it to the DOM. So, we can just use it in the tag.

Now, let's build the component in the same way:

Give yourself a pat on the back because you have successfully created the , , and components. Whoop! Whoop!

We need to take care of one more thing so that our app can function. Routing!!!

Open up file, this is where the vue router is defined. So modify the code like so:

Each route has a path, name and the component to be rendered when that route is invoked by the user. By the ways, we already imported the components at the top of the file.

Just a few things before we check our application in the browser:

Feel free to check out your application in the browser. Right now, you should have something like this:

The majority of the apps we use on a daily basis have a means of authenticating users. I'll show you how to easily add authentication to our Vuejs 2 application. We'll use Auth0 as our authentication service.

Auth0 allows us to issue JSON Web Tokens (JWTs). If you don't already have an Auth0 account, sign up for a free one now.

Login to your Auth0 management dashboard and let's create a new API client. If you don't already have the APIs menu item, you can enable it by going to your Account Settings and in the Advanced tab, scroll down until you see Enable APIs Section and flip the switch.

From here, click on the APIs menu item and then the Create API button. You will need to give your API a name and an identifier. The name can be anything you choose, so make it as descriptive as you want. The identifier will be used to identify your API, this field cannot be changed once set. For our example, I'll name the API Startup Battle API and for the identifier I'll set it as http://startupbattle.com. We'll leave the signing algorithm as RS256 and click on the Create API button.

Next, let's define some scopes for our API. Scopes allow us to manage access to our API. We can define as few or as many scopes as we want. For our simple example, we'll just create a single scope that will grant users full access to the API.

We need to secure the API so that the private battles endpoint will only be accessible to authenticated users. We can secure it easily with Auth0.

Open up your file and add the middleware to the private battles endpoint like so:

Try accessing the endpoint again from Postman. You should be denied access like so:

Next, let's add authentication to our front-end.

We'll create an authentication helper to handle everything about authentication in our app. Go ahead and create an file inside the directory.

Before we add code, you need to install and node package like so:

Open up the file and add code to it like so:

In the code above, we are using an hosted version of Auth0 Lock in the method and passed in our credentials.

The auth0 package calls the Auth0's authorize endpoint. With all the details we passed to the method, our client app will be validated and authorized to perform authentication. You can learn more about the specific values that can be passed to the authorize method here.

The parameters that you do not have yet are the and the . This will be an Auth0 client that will hold your users. When you created your API, Auth0 also created a test client which you can use. Additionally, you can use any existing Auth0 client found in Clients section of your management dashboard.

Check the panel of your API from the dashboard. You'll see the test client like so:

Now, go to the clients area and check for the test client. You should see it in your list of clients like so:

Open the client and change the Client Type from to .

Copy the CLIENT ID and replace it with the value of in the login URL. Replace your callback url with .

We also checked whether the token has expired via the and methods. The method returns or based on the presence and validity of a user .

We imported the Vue router and created an instance of it. We need it for redirection after login and logout.

Finally, we implemented a middleware, the method. We'll use this method to protect the route from being accessed for non-loggedIn users.

Let's go update the component to hide/show the and buttons based on the user's authentication status.

Now, your component should look like this:

We imported , and functions from the helper file. Then, we attached the and functions to the and buttons respectively.

Open up the Component and modify it like so:

We are enabling the link to private startup battles based on the login status of a user via the method.

We will create a new component and call it . This component will be activated when the route is called and it will process the redirect from Auth0 and ensure we recieved the right data back after a successful authentication. The component will store the and .

Once a user is authenticated, Auth0 will redirect back to our application and call the route. Auth0 will also append the as well as the to this request, and our Callback component will make sure to properly process and store those tokens in localStorage. If all is well, meaning we recieved an , , and verified the , we will be redirected back to the page and will be in a logged in state.

Just before you try to log in or sign up, head over to your Auth0 dashboard and add to the Allowed Callback URLs and to Allowed Origins (CORS).

We need to ensure that no one can go to the browser and just type to access the private battles route.

Open up and modify it to import the function and also add a property with a value of to the route like so:

One more thing. Now, let's register the route in our routes file like so:

Now, try to log in.

For the first time, the user will be shown a user consent dialog that will show the scope available. Once a user authorizes, it goes ahead to login the user and give him access based on the scopes.

User presented with an option to authorize

Note: Since we are using for our domain, once a user logs in the first time, subsequent logins will not need a user consent authorization dialog. This consent dialog will not be displayed if you are using a non-localhost domain, and the client is a first-party client.

Logged In, but unauthorized to see the Private Startup Battle

We have successfully logged in but the content of the private startup battle is not showing up and in the console, we are getting a error. Why?

It's simple! We secured our endpoint earlier, but right now we are not passing the JWT to the backend yet. We need to send the JWT along with our request as a header to enable the secured endpoint's recognition of the logged-in user.

Go ahead and open up the file. We will tweak the function a bit. Currently, it initiates a request only to fetch data from the API.

Now, we will pass an option to send an header with a Bearer access_token along with the request like so:

The endpoint will receive the token in the header and validate the user. If it is valid, the content will be provided to us.

Now, try to log in again.

Everything should work fine. Pat yourself on the back. You have just successfully built a Vuejs 2 app and added authentication to it!

Vuejs 2 is a lightweight, fast and awesome library for building user interfaces. Its learning curve is gentle and its API is not complex to understand. It has a fast growing community and there are many components available to the public for different functionalities.

In addition, Auth0 can help secure your Vuejs 2 apps with more than just username-password authentication. It provides features like multifactor auth, anomaly detection, enterprise federation, single sign on (SSO), and more. Sign up today so you can focus on building features unique to your app.|||

Learn how to quickly build apps with Vuejs 2 and add authentication the right way.