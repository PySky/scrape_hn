This tutorial details how to develop a RESTful API with NodeJS, ExpressJS, and TypeScript using test-driven development (TDD).

We will be using:

Additionally, we will use tsconfig.json to configure the project, Gulp to automate transpilation, and d.ts for managing typings with .

To start, we need to set a means to transpile TypeScript into JavaScript that works well with Node. Enter the tsconfig.json file. This is similar to a package.json or .babelrc or really any project-level configuration file you may use. As you can probably guess, it will configure the TypeScript compiler for the project.

Make a new directory to hold the project, and add a tsconfig.json file:

Before moving any further, let’s make sure this configuration works like we expect using the TypeScript compiler wrapper. Create a package.json and install TypeScript:

Create a new file called test.ts within the “src” directory and add the following:

Finally, let’s run this one-liner through the compiler. From the project root, run the that we installed above in our test file with:

Given no arguments, will first look at tsconfig.json for instruction. When it finds the config, it uses those settings to build the project. You should see a new file inside of “src” called test.js with the same line of code in it. Awesome!

Now that the compiler is installed and working, let’s change up the config to make things easier on ourselves. First, we’ll add an property to the of to tell TypeScript to place all of our transpiled JavaScript into a different directory rather than compiling the files right next to their source .ts files:

Remove the test.js file from the “src” folder. Now, run the compiler again, and you’ll see that is delivered to the directory.

This is much nicer, but let’s take it one step further. Instead of returning to the terminal after each change and manually running the compiler each time let’s automate the process with Gulp:

Add a gulpfile.js to the root of the directory. This is where we’ll automate the compiling of our source files:

To test this out, remove dist/test.js and run from the project root. You’ll see Gulp start up, and test.js should be compiled again and placed into “dist”. Awesome! Our project is now configured.

Let’s move on to working with Express…

For our Express server, we’ll use the express-generator as our template. We’ll start with what would be the “bin/www” file and create an HTTP server, initialize it, and then attach our Express app to it.

Install Express along with debug (to provide some nice terminal output while developing):

In TypeScript, when you install third-party packages, you should also pull down the package’s type definitions. This tells the compiler about the structure of the module that you’re using, giving it the information needed to properly evaluate the types of structures that you use from the module.

Before TypeScript 2.0, dealing with .d.ts (type definition) files could be a real nightmare. The language had a built in tool, , but it was a bear to work with and you had to decorate your TypeScript files with triple-slash comments to pull declarations into your file. Then typings came along and things were much better, but there were still some issues and now you had another separate package manager to manage in your project.

With TypeScript 2.0, TypeScript definitions are managed by and installed as scoped packages. This means two things for you:

Install the type definitions for Node, Express, and debug:

With that, we’re ready to create the HTTP server. Rename src/test.ts to src/index.ts, remove the console log, and add the following:

If you’re using an editor with rich TypeScript support, it’s not going to appreciate , but just ignore it for now. The rest of this file is pretty straightforward:

Since this file will start the app, let’s also add a script to for convenience:

Before we can start the app up, let’s make the App.ts file that we referenced on in index.ts. It’s also a good time to go ahead and install the dependencies we’ll use in the Express application.

Inside of App.ts let’s create the class to package up and configure our Express server. An instance of will:

Essentially, it’s going to bootstrap the app and deliver it to the call to in index.ts.

Currently, there’s a simple placeholder handler for the base URL that should return a JSON payload with . Before writing more code, let’s make sure that we’re starting with a working, listening, and hopefully responding server. We’re going to use httpie for this quick sanity check.

Compile, and then run the server:

To test, open a new terminal window and run:

If everything has gone well, you should get a response similar to this:

The server is listening! Now we can start building the API.

Since we’re good developers (and citizens), let’s utilize TDD (test-driven development) while we build out the API. That means we want to set up a testing environment. We’ll be writing our test files in TypeScript, and using Mocha and Chai to create the tests. Let’s start by installing these to our :

If we write out tests in .ts files, we’ll need to make sure that Mocha can understand them. By itself, Mocha can only interpret JavaScript files, not TypeScript. There are a number of different ways to accomplish this. To keep it simple, we’ll leverage , so that we can provide TypeScript interpretation to the Mocha environment without having to transpile the tests into different files. will interpret and transpile our TypeScript in memory as the tests are run.

Now, in , add a script to run mocha with the register:

With the environment all set up, let’s write our first test for the “Hello World” route we created in App.ts. Start by adding a “test” folder to the route, and add a file called helloWorld.test.ts:

In the terminal, run you should see both test pass for the describe block. Excellent! Now we can test our routes as we build out the API.

Our API will be delivering data on superheros, so we’ll need to have a datastore for the API to access. Rather than setting up a full database, for this example let’s use a JSON file as our “database”. Grab the data here and save it to a new file called data.json in the “src” folder.

With this little store of data, we’ll implement a CRUD interface for the superhero resource. To start, let’s implement an endpoint that returns all of our superheros. Here’s a test for this endpoint:

Add this to a new file called test/hero.test.ts.

To summarize, the test asserts that:

When you run , you should see this one fail with a in the terminal. Good. This is expected since we haven’t set up the route yet.

To start, create a new folder and create a new file inside the directory named HeroRouter.ts. Inside of here, we’ll implement each CRUD route for the superhero resource. To hold each route, we’ll have a class that defines the handler for each route, and an function that attaches each handler to an endpoint with the help of an instance of .

We also need to modify the function of to use our new . Add the import at the top of App.ts:

Then add the API endpoint to :

Now run and ensure that our tests pass:

Now we’re really rolling! Before moving on though, let’s break the process down since we’ll be repeating it to create and attach each of our route handlers:

We’ll follow this same workflow for each endpoint, and can leave alone. All of our endpoints will be appended to . Let’s implement a handler that returns a single hero by the property. We’ll test the endpoint by looking for Luke Cage, who has an of 1.

For the hero resource, we should have endpoints for updating a hero and deleting a hero, but we’ll leave that for you to implement. The structure that we’ve set up here should guide you through creating those last endpoints.

Once the hero resource is implemented, we could add more resources to the API easily. To follow the same process we would:

Now you’re up and running with Express and TypeScript 2.0. Go build something! You can grab the code from the typescript-node-api repo. Cheers!|||

This tutorial takes a test-first approach to developing a RESTful API with NodeJS, ExpressJS, and TypeScript.