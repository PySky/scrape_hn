In this article I will show you how to deploy Express.js applications to OpenWhisk, with minimal modification. The Part 2 generalizes the process described below.

For the purpose on this article, let’s first create a new Express 4.x application. If you want to use your own app (be sure it’s using the 4.x api. In particular, must not be in the main file), just skip this step.

To check it’s working, start the application by typing the command and load in a browser.

The generated Express application expects resources to be installed in the domain root folder, but by default OpenWhisk web actions are served from a sub-directory. Luckily only one file needs to be changed, :

The next step is to create the OpenWhisk web action that will invoke the Express app. This is a generic action that can be reused across all Express apps. It is available here and self-explanatory. Just copy it into your root directory.

Our application is now ready to be deployed to OpenWhisk. For this step, I assume you have the OpenWhisk CLI installed and set up. If you happen to have a Bluemix account (no credit cards required), the setup is much easier.

Let’s create a zip action that can then be deployed:

This command says to update an action called and to put it in the default package. makes the action web accessible with raw handling and sets the parameter to your base url.

For instance, I use this command on Bluemix:

To load this web action, go to https://openwhisk.ng.bluemix.net/api/v1/web/villard@us.ibm.com_dev/default/express

Due to several OpenWhisk limits, it’s better to host large static assets somewhere else. Here I’ll use Surge because it’s really easy to use.

First, install the tool with and run the command in the directory containing your static assets, in this case .

If this is your first time running, you will need to enter your email and password to register a new account.

We then need to tell our Express app to fetch the static assets from Surge. The OpenWhisk web action expects the argument named so let’s use it in our template:

Let’s redeployed our application, but this time using the static assets hosted on Surge:

Don’t forget to substitute the and values by your own values. Reload the action, open the HTML source code to see that the stylesheets being loaded from Surge.

With little effort, we created a new Express.js app and deployed it on a serverless cloud platform that automatically and reasonably scales for you.

In the second part of this post I’ll go through the steps of deploying a real express application composed of three separate Express apps secured by Auth0 and JWT.

Thanks for your feedback in advance.|||

In this article I will show you how to deploy Express.js applications to OpenWhisk, with minimal modification. The Part 2 generalizes the process described below. For the purpose on this article, let…