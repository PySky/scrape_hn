Our previous blog post discussed securely generating a random integer or string in PHP. Since it was published, we began working on a free and open source library to expose PHP 7's CSPRNG functions in PHP 5 projects, which we call random_compat, with many great contributions from other PHP developers.

But also, we've discovered that the volume of bad information about random number generators offered to PHP developers is at least an order of magnitude higher than we anticipated. Since we've already done our homework on this subject, we'd like to provide some nifty helper functions that other PHP programmers are usually looking for.

All of the functions on this page will require either PHP version 7, or version 5.6 with random_compat.

If you're already using Composer, simply run this command to get started:

Every snippet on this page is released under the MIT License, but we request that you leave the link back to this blog post in the docblock comment so that future developers can see where it came from. As time goes on, we may add new functions to this page (or update existing ones).

Diceware is a strategy for generating secure but easy-to-remember passphrases. Typically, you roll a six-sided die 5 times and use a lookup table to find your word. Then you repeat this process until you have your passphrase.

Implementing this in software requires deciding how you want to process the Diceware wordlist. For example:

In a real application, you're far better off not reading this from a file on disk every page load.

Now that we have a wordlist source, creating a diceware passphrase generator is as easy as pie:

Alternative to using Diceware for passphrases, you might just want to generate a random string. This is useful if you want to generate a temporary password that an attacker is unlikely to guess.

To use it, simply specify how long you would like your string to be, and a string containing all of the possible characters. For example (online demo):

This solution is similar to how PHP internally implements , except we're using a CSPRNG. This is mostly useful if you, for example, need to implement an unpredictable shuffle for a virtual card game.

If you need to implement version 4 of the UUID specification, the following function should do the trick:

If you need a team that can develop a web, mobile, or client-server application with attention to security above and beyond compliance, Paragon Initiative Enterprises is the team you want.

Our team of security consultants are experts in secure data encryption, short-term and long-term user authentication (i.e. "remember me" checkboxes), and web-based security vulnerabilities.|||

Some useful things that can be built with a CSPRNG.