appr builds and deploys pull requests in your create-react-native-app (and other Expo-based) projects, and replies with a link you can open directly on your device or emulator.

Mature technical organizations peer-review their code. Reviewing code on GitHub is simple enough: for most well-crafted pull requests, you can review the code diff in your browser, and either approve the changes, or request further improvements.

Testing another developer's changes isn't quite as easy. Typically, you will have to stash any work in progress in your own workspace, pull down the remote branch, install dependencies, compile and start the application before you can verify that the changes work as intended.

Since it was launched, I've loved Heroku's GitHub-integrated Review Apps. As part of your branch build, Heroku will spin up a new review instance of your application, which you can then access with a direct link from your GitHub pull request. Netlify offers the same functionality for deploying static websites.

Unfortunately, a one-click workflow like this doesn't exist for mobile development. To add insult to injury, the ramp-up time to test mobile app changes on your local device can be much longer than for web applications.

Enter appr. Built on Expo and inspired by Expo Sketch, appr aims to make peer-reviewing React Native app code as easy as static websites

Add the task to the section of your package.json:

Next, configure one of the currently supported CI environments:

Contributions for other CI platforms welcome.

There are a few limitations you should be aware of. appr is currently not able to deploy:

Contributions and ideas for solutions welcome.

Travis CI is free for open source projects, and offers paid plans for private repositories. To get started, create an account on Travis using your GitHub login.

Add the following to your :

This will configure your Travis build to use the latest Node.js and Yarn, and ensure that the appr build only runs on Pull Request builds.

If you're not already using Travis, it's advisable to run your unit tests before deploying review apps. You can do this by adding other steps in the section, and always leaving the appr step last: script:

Note that the default command in runs Jest in mode, which will hang forever. You can either change the script in your package.json, or, or override the test command as above.

The final step is to enable Travis CI on your repository. Log into your Travis account, and turn on the build for your project in your Profile.

After enabled, you'll be taken to your project build page. Before triggering the first build, you'll need to add a few secure environment variables to your build under :

You should now be able to create a new branch, make changes, and open a pull request. If the stars are aligned, the Travis build should publish the app to Expo!

Circle CI offers one free build container for public and private repositories. To get started, create an account on Circle CI using your GitHub login.

Add the following to your :

This will configure your Circle build to use the latest Node.js and Yarn (optional), and ensure that the appr build only runs on Pull Request builds.

Circle CI will automatically run your tests before the deployment. Note that the default command in runs Jest in mode, which will hang forever. You can either change the script in your package.json, or, or override the test command in circle.yml:

The final step is to enable Circl CI on your repository. Log into your Circle CI account, and turn on the build for your project.

After enabled, you'll be taken to your project build page. Before triggering the first build, you'll need to add a few secure environment variables to your build under :

Optionally, you can enable to avoid running build on branches that do not have open pull requests.

You should now be able to create a new branch, make changes, and open a pull request. If the stars are aligned, the Circle CI build should publish the app to Expo!

If your preferred CI is not explicitly supported by appr, but supports building GitHub pull requests, you can use it by defining environment variables as shown in the default config file.

Improvements and additions welcome. For large changes, please submit a discussion issue before jumping to coding; we'd hate you to waste the effort.

In lieu of a formal style guide, follow the included eslint rules, and use Prettier to format your code.|||

appr - Open React Native PR Builds instantly on device