I’d like to present an alternative to framework-based DI that allows you to still have clean, decoupled, testable code without handing over control of every non-trivial object’s instantiation to a DI framework.

The key idea is to:

That’s it. This basically combines Fowler’s old school Registry pattern with the DI hipness of constructor injection. I don’t claim this is anything novel, nor perfect; but I’m surprised I haven’t seen it being used more.

I’ve been using this approach for awhile now (since my Changing My Style post from a year ago) and it has been working out quite well.

There are pros and cons, but first an example.

To frame the example, let’s setup three class that respond to a user request. Something like:

This is completely made-up, but the idea is that we have several objects involved in servicing the request. Some of them are stateless ( and ) but some are stateful ( ).

The problem then is how to get the and dependencies passed down into the .

Throwing out possibilities, we could:

I’m sure there are other potential approaches I’m missing, but I think these are the most common. Per the comments with each approach above, I wasn’t satisfied with any of these and so was looking for something else.

The approach I’ve settled on lately is based around an interface. All of the shared, application-scoped objects ( , ) go into this interface:

I use the term in deference to Fowler’s pattern, but you could just as well call it , which is more Spring-like. Which, speaking of Spring, you can basically think of as making a plain, strongly-typed interface with a method for each bean in your Spring config file.

And now we just create a new instance of it and pass it around:

And that’s it. Pros/cons are discussed next, but the short of it is that we can still test the class–a fake (stub or mock, but, no, really, use a stub) can be passed into with whatever fake versions of the dependencies you want to use for the test.

Briefly, the class just instantiates the dependencies and holds on to them:

And you could just as well create a for all of your tests to reuse:

So that now instead of copy/paste setting up a lot of mock expectations/results, your test can pass a to the under test and then assert against the side affects that makes to and .

Pro: Intermediary classes (e.g. ) don’t have to know about each individual app-wide dependency of the classes it instantiates (either directly or indirectly). calls stay clean, with at most the extra parameter passed. Pro: Only classes that require app-wide sharing are in the interface–unlike auto-wiring DI, if a class is not going to be doubled out (like , which there is only ever one implementation of), we can just use and not worry about a DI library/ creating it for us. Pro: is regular Java code, so can freely use configuration files, system properties, even statements to configure the implementations of and appropriately. Pro: “scopes” become a lot less confusing–where as DI frameworks will, to the client, arbitrarily return shared (singleton) or new (prototype) instances, everything in is by definition application scoped. If you need a “prototype” instance, just call . If you need a request scope, make a new (or ) interface that follows the same pattern and explicitly models the request-scoped dependencies. Con: ’s constructor signature only declares that it’s dependency is the (meaning some number of application-scoped beans). This is not as clear or self-documenting as a traditional DI constructor signature which would specify each direct dependency as a separate parameter (e.g. and ). Con: You give up the DI container’s “more than just DI” features (like Spring’s automatic transaction management, aspect/proxy features, etc.). Although, personally, I don’t consider this a huge loss anyway.

There is a (at least one) variation of this “make an interface for your dependencies” approach.

Context IoC is a pattern than uses per-class interfaces instead of per-scope interfaces. Which addresses the con listed above of ’s explicit dependencies not being apparent from the API.

E.g. Context IoC would have a interface that declared the explicit and dependencies, plus extended the corresponding interface of each object that instantiated (so that could be used for constructing those instances as well).

I think the Context IoC approach is quite novel, but it leads to a lot of extra interfaces and so is a bit excessive in my opinion.

For me, this pattern has worked out very well to test-enable my code. I can switch out dependencies as needed without giving up the operator and without making object instantiation so painful that only a DI framework can do it.

So I can apply “YAGNI” to a DI framework and stay with the simplicity of regular Java.|||

