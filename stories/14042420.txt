React has quickly climbed its way to being a top framework choice for Javascript single page applications.

 What’s not to like?

There is however one area that could be improved; its built-in testing utilities – and this is where Enzyme steps in as the must have tool for front-end React testing.

This is an example of a test using the native utilities of the framework:

Its verbose, long-winded and not that fun to develop with. The alternative put forward, Enzyme, brings it down to something much more expressive and readable:

Enzyme uses cheeriojs – a small library that implements a subset of jQuery’s core functionalities and makes manipulating components simple. The function, used in the example above, can be applied to HTML, JSX and CSS alike – this is key to Enzyme; It gives you the ability to target DOM elements in a clear and concise manner. Here are a few examples of how it can be applied:

To understand Enzyme’s key strengths, let’s dive a little into how it simulates components and DOM elements. Although based off , there is enough abstraction that the rendering of a component comes down to 3 functions – shallow, mount and render. Basically ;

This article assumes a classic React stack making use of npm scripts, webpack as a module bundler along with ES6 syntax and it will detail a simple approach to testing your React application.

You may also want to have a quick look at this article if your application uses Redux (link to the article), as it is a common library used in React applications and knowing how to test it may be helpful, in complement to what is explored in this article.

Enzyme is completely agnostic to the test runner and assertion libraries that you use; it works with mocha, AVA, Jest… you choose! In this article we will use, without going into too much detail, the following testing tools – so you can keep using your favourites, for me it’s:

For jest the setup is simple, just remember to suffix your test files with (default configuration):

And add the following scripts to your scripts object :

Along with an object at the root of the with as a key that configures the jest testing tool (I’ll just include a few key options):

Important: The moduleNameMapper options allows you to mock a module for files that match a particular extension. In projects using webpack it is quite typical to load css inline using the webpack . The problem is Jest doesn’t know how to interpret the css , so instead make a stub that resolves all inline styles to an empty object contained in

Also don’t forget to include these libraries of course!

A shallow rendered and a mounted component, have the same methods exposed but different use cases (as in, you will find the same API in the Enzyme docs for both). As a rule of thumb, shallow render is for unit testing and will probably be used for the majority of your test cases. Mounting would be more for a form of ‘front-end integration testing’ (seeing how a change in one component propagates to other components lower in the DOM tree).

Let’s use a small snippet of code that renders a rectangle of a certain color, some text and a checkbox. Not an enthralling example, but a useful one in showing how enzyme works.

We want to test three things to begin with; we expect a div, with the correct class and some text. Note that once you have rendered a component for the test, you can easily control the data it handles with and . You can also access the props and state of a component with and . This is particularly interesting when testing different outcomes in your component’s display (for instance; hiding part of a component, checking if an error label appears, etc…).

You are going to want to simulate user interactions with your component. This is where chai-enzyme steps in to provide a variety of assertion addons that will simplify your test syntax. As we are using a checkbox, a quick look at the docs tell us that we are interested by .

If we refer back to our tested component, a function is passed down through props and should be triggered upon clicking the element it is bound to (in this case the input tag). For the moment, event propagation and more complex mouse interactions are actively being developped but most use cases are already covered.

There may be instances where you don’t want to fully mount a part of the DOM just to test one nested component inside a component. In this case use – but for every other complex case where several nested components need to be tested together, use mount. Let’s have a look at a parent component that makes use of our ColoredRectangleComponent:

Again we’ll have a look into two simple test cases; checking if the component does mount and whether or not it renders components correctly according to its state. We are expecting 2 ColoredRectangle components with the correct css classes attributed to them.

The tools provided by enzyme make testing React applications easy with a minimal setup cost. The documentation is simple and well illustrated with many examples and different tips. Finally, if you need to debug a component, Enzyme also integrates a debug tool that quite simply prints the rendered element to the console as JSX. Just use . Happy testing !

You liked this article? You'd probably be a good match for our ever-growing tech team at Theodo.|||

Introduction to Airbnb Enzyme for Testing of react applications. Covers setup, background and a few key examples to understand testing with enzyme.