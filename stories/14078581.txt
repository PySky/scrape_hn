Catapulted into most developer’s set of oft-quoted computer laws by The Mythical Man Month, Conway’s Law says:

Typically when developers mention this, it is to complain about how complicated their current project is while lamenting that change is out of their control. And they’re usually right. But what if this whole time we’ve been looking at Conway’s Law from too narrow of a vantage point.

It turns out when you apply this lens, you start to think of view-source: as an invaluable piece of research on par with Bloomberg or Glassdoor (and actually probably more accurate). I’ll walk through a couple examples (ignoring the obvious like broken links, starting with some basics and ending on obscure corners). In the end you’ll have more tools for answering questions like “Do I want to work for company X?” and “Why is company Y so good at Z?” You’ll see a lot of these answers can be inferred from the very ways their website is assembled. I’ll cover 8 aspects that you apply in-part or in-total to your research:

Also keep in mind that not everyone is in the web design business, but vendor selection can say just as much as a self-developed website. Was the agency local? They appreciate supporting their local community. Is it an out-of-the-box WordPress-esque solution? They realize not everything needs to be a special snowflake. When the site is designed out-of-the-house, not as many of these lessons can be applied — but some of them are universal.

Like I warned, the first couple are pretty obvious. You can use tools like https://www.hostingchecker.com/ and https://www.sslshopper.com/ssl-checker.html to get the answers, if you’re not comfortable with terminal. But with this information, you can get a feeling for things like:

There’s a Mark Cuban quote that is great for this question:

Generally every part of the website that isn’t directly related to the business’ core purpose should try to leverage some other company’s work (ideally something open source), so the company can focus on their competency. But if this is done, and the way it is done, says a lot:

This one is a lot like the previous point, but we’ve multiplied the nerd quota. This one also probably says more about the people managing the IT staff/servers/architecture and less about the people making the business decisions. By evaluating the 3rd party assets being loaded, you’ll uncover a lot of subtle & meaningful points:

Now we’re getting closer to the core on Conway’s law. Once you have more than 30 developers, it becomes really complicated to have consistent in front-end, back-end and infrastructure. Seeing consistency is a great thing — it implies strong communication, well-established standards, and wisely applied technologies like linting. If you’re browsing through the front-end and see occasionally discrepancies, it means you’re working with humans (and that’s a good thing). But if you’re seeing frequent & far-reaching flavors of coding:

Ignoring how you feel about code comments in general, the sheer presence of the comments can shed a lot of light:

In moderation, most of these aren’t a big deal — we’ve all been there. But if you see these on a large scale, there’s a systematic lack of quality control that’s probably worth consideration. If there’s a lot of piecemeal pasting of code, expect a general vibe of “whatever it takes to get it done” and some rather fragile systems.

In our personal lives, we often hold out hoped that our once loved service/protocol makes a comeback *coff*Wave*coff*. But there’s a point when the company’s website should stop promoting its Vine channel. So while browsing the website, you see some sections & links that have collected dust, there are some strong lessons to take:

You can’t pick your family, but you can pick your friends and pick the 3rd parties that you work with. And just like friends are a reflection of your values, you can learn from 3rd parties:

While I deeply appreciate the Two-Pizza Team Rule, there’s an art form to making sure that the teams still behave as a well-oiled machine and not a splattering of islands in roughly the same ocean. I split that analogy, but you get my point.

Honestly this point has a lot in common with Aspect 4, and there’s an argument being made of combining them. But Aspect 4 doesn’t offer the same visual interpretation as the DOM assembly, and for that reason I split them out. When you visualize the DOM, a lot of pieces become clear:

There are a lot of opinions here, and a huge amount of exceptions to all of these viewpoints. But I believe that there’s some substance here to help people — from jobseekers to competitors to admirers — to start to learn a lot and take a hard look in the mirror.

If you have any suggestions for alterations or improvements, I would love to hear them!|||

Conway’s law says a company’s code reflects the company’s design — applying in that reverse can help people understand the company