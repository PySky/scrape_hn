Structor does not depend on any starter/seed/boilerplate project. It runs even in an empty folder with .

But before you get familiar with Structor we suggest to run through a brief tutorial. This tutorial is using our starter project which lets you quickly try all cool features of Structor.

Now you should see the Structor's workspace. If not, please create an issue.

After the first opening you'll see the workspace page. We may call it a page bacause it behaves as the real page in the browser. But there are two modes in the workspace.

The first mode is an editing mode. In the editing mode we can cut, paste, duplicate, delete, replace, change style of any component on the page.

The second mode is a preview mode. In the preview mode you are able to see how page looks and try how it works in the browser.

On the left vertical toolbar you may find two buttons which are responsible for switching between modes:

On this stage of the tutorial the current page should be in the edit mode. If not, please set the edit mode on.

However we can work in Structor with only those components which are shipped with Structor distribution, in this tutorial we will install a package of Material UI components from Structor Market.

Activate a library button with plus icon as it is shown on the screenshot below. The library panel shows the groups of available components in the current project. Find the button at the top of the left-side panel and click on it.

We are forwarded to the Structor Market gallery, here we can see what packages of component presets are avaialble to install. Let's install a package, which includes components from the next version of Material UI lib.

Installation process will take some time because Structor installs dependencies via npm. Once package is installed we will see new pages in the workspace and new groups of components. Just try to open other pages using the page selector component in the top toolbar.

Let's start to compose something interesting. Make sure that the current page is page and click somewhere on the text in the center of the page. You'll see that a border appeared around some area - it means that you selected a component. There is a few ways to understand what the component is selected now.

We may find it in a breadcrumbs control at the top of the workspace as it is shown on the screenshot below. Or you can take a look at the blueprint buttons which appeared at the place you clicked.

Additionally, there is a more common method which will show us the entire structure of the page. There is a bottom panel with the components tree on the current page. Click on the button with code icon on the left vertical toolbar as it is shown on the screenshot below.

Now let's place the some components from library onto the page.

There is a requirement in the Material UI lib to place as a root component of any MUI components combination. So, we can find a component in the group (this is a wrapper of here) and place it as a container for our future combination.

Just open the group in the library panel and click on item in the list. We will see that there is a sublist. The sublist in the library shows that this component has several models. Let's click on model and see that component's model was copied to clipboard.

Now we have to replace component in the tree with the component from clipboard. If you do not have selected, select it by clicking on it on the page or just select on the treeview (or in the breadcrumbs control).

Then find button in the top toolbar, or find a blueprint button on the page which tells .

As the result we will have the composition as it is shown on the screenshot below.

Now replace a component on the page with model of component. And then place component (from HTML group) before inside of component.

Placing a component before or after another component can be provided in the same manner as we were replacing components - you have to pick a component from the library and then use or button in the top toolbar or blueprint buttons for selected component.

In the result we should have the following composition:

Structor ships with a couple source code generators for React component scaffolds. We are not going to discuss here how it works and how it can be customized. Although, please keep in mind that any scaffold template may be changed to fit your requirements easily.

Now we are going to generate a scaffold for simple React component which will have equal look and feel as our composition which we made above.

Select the topmost in the hierarchy of the current page, and click button on the top toolbar of the workspace. We will see the first page of the generators gallery, where we have to choose what component we want to generate.

Here we will choose a generator - click on button to start a generation wizard.

The next step requires to enter a name of new component and/or a namespace for component.

On this note we should step aside a bit and try to understand what the source code and its structure we will have after generation. The only requirement from Structor is to use a certain type of the source code structure. We will discuss the structure and motives to use it in the The code structure guide's chapters. But on this step please keep in mind the following structure of components which is possible to use with Structor:

Enter as a new name of React component, and enter as a namespace. We are going to create a new namespace with component. Although, we can create a component without any namespace and that will put it in folder.

Next step gives us options for a few variants of the future scaffold. Let's leave the options as they are and proceed to the next step.

Here is a preview of the generated source code. After reviewing just click on button.

Now we have to switch to the preview mode and try to click on the button - nothing happened. That is why we need to change the source code to make it something valuable.

...and made chages in generated code as it is shown below. Also, please observe that your changes are applied in the preview page almost immediatelly.

Switch again to the preview mode and try to click on the button - you will see that the counter value is increasing.

This step is not necessary to the projects which have own building process and requre to add components manually into appliation pages. Structor Starter App does not have a sophisticated app building process in terms of granularity, optimisation, etc. This step is mostly for the learning purpose.

Click on the button with book icon on on the left vertical toolbar. This will show us a list of available pages.

In the top of the list we may see two buttons: and . responsible for generating the source code for selected pages. And button generates not only the pages' source code, but also the source code for entry point in terms of Webpack compiler.

As far as we are going to build application, we are choosing . The modal dialog will worn us about what files will be generated.

After we will see a green message about a successful exporting. Now we can find a new folder along with files for React/Redux application. Additionally, please find the compiled bundle of the application in directory.

Finally we can run our application in the local Express server, go to the terminal and run following command:

This command initiates a building process of our application and starts an Express server instance on port. After the server is started we may open address in our browser.|||

structor - Structor - React UI Builder