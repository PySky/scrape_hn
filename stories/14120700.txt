Complicated reduce algorithms are still tricky for me sometimes. Clojure’s for makes map more visual, which makes it easier for me to engage my imagination. Racket extends this idea to reduce with for/fold, and also supports reducing multiple collections. Let’s port it over to Clojure.

It works exactly like reduce:

The accumulator is initialized to the value , and is initialized to the first element of , which is . Similarly, is initialized to . The body is evaluated. In this case, it evaluates to , 

 which is . is bound to the result of evaluating the body. and are bound to the next element in their collections. The body is evaluated again with these new bindings. This continues until the collections are empty, and the last accumulator value ( ) is returned.

Because the functionality is so similar, I’m using reduce to implement the macro. The biggest differences are the availability of the accumulator and element bindings within the body, and the support for multiple collections.

Luckily, an anonymous function is all we need. By naming the ’s parameters to the accumulator and element bindings, the bindings become available in the body.

The initial accumulator and collection expressions are injected into the template, but are not evaluated yet. The collections are then zipped, to be destructured again within the anonymous function on each iteration.

Let’s verify that the resulting code is correct:

The symmetry between the template and it’s result is another example where visual reasoning makes code easier to understand. Enjoy your new macro! :)|||

Complicated _reduce_ algorithms are still tricky for me sometimes. Clojure's _for_ makes _map_ more visual, which makes it easier for me to engage my imagination. Racket extends this idea to reduce with _for/fold_, and also supports reducing multiple coll...