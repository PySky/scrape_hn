Starting off, we need to configure the rule pattern for the event. We will do this using terraform and some AWS magic.

Keep in mind, I am pasting diff from our actual terraform implementation, variables and other things may very for your setup.

First, we need a template for the notification filtering. You can read more about it here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/events/CloudWatchEventsandEventPatterns.html

Terraform is going to add in the cluster_arn as a parameter.

Now, we’ll need terraform to render this template and assign a cloudwatch rule.

Next, we will need the lambda function that will accept those events and process them.

Here, there was a bit of a design process, since we are slacking the notification to a channel where a lot of our engineers “live” daily, we don’t want to bombard them with messages every interval of the ECS agent.

We discussed a few options. Usually in these technical posts you don’t get the details about the decision making but I do want to go into the details here.

The first obvious choice for us was using DynamoDB, we are using it in many other places around our stack. From storing secrets using and encrypting using KMS to application-specific configuration.

The first thing I wanted to add was a per-item TTL, this was recently added to DynamoDB. However, it’s not baked into terraform yet.

First thing I looked at is adding it to terraform BUT, it’s a bit more involved than adding something to terraform because the addition of the ability to Dynamo is done in an async way, meaning the state management and tainting the resources is a bit more complicated. Wasn’t worth it. Added to my open source todo’s.

So, DynamoDB dropped from the decision tree based on this and price.

Redis can also be super-nice for an application like this.

However, I didn’t think it’s worth the price. For something as simple as this. It’s really an overkill, even in the smallest instance type AWS has to offer. Same goes for PGsql.|||

In this post, I take you beyond the technical, into the decision making, moving between configuration management systems and why we chose the path we chose. The CI builds the container and sends an…