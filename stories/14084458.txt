This project describes step-by-step how you can build yourself a 360 degree Lidar for realtime outdoor mapping and position tracking on that map (aka ‘localization‘). This idea is also called ‘SLAM’ (simultaneous localization and mapping). We use inexpensive parts for this Lidar, so this is probably the cheapest 360 degree realtime Lidar you can build!

Parts needed:

 Note: all parts will be available as a DIY kit in this shop soon.

2. Add both to base plate (hot-glue at underside):



3. Make sure that your bearing runs smoothly (can make one rotation after driving it with one finger). My bearing had too much grease inside, so I had to disassemble the bearing and remove the grease. Assemble bearing, motor and wheel. The motor should run clock-wise when connected to +5V and GND. If not, swap the connector wires.



4. Mount slip ring on disc base with screws, stick disc and base together, mount screws at disc bottom side.



6. Wire as shown below:

 Note: Keep soldering time for the photomicrosensor short (max. 3 seconds), otherwise you risk to damage this sensitive component.

7. Test mechanics

 Make sure that the disc can turn with a constant speed (and not erratic). If the speed is not constant, the lidar will not work properly. My 3d printed parts were not very precise, so I had to rasp all parts so they fit and and do not rub.

8. Flash Arduino code

 Since we are using the serial/USB converter for flashing the Arduino, resetting the Arduino automatically will not work. Press ‘Upload’ in the Arduino IDE and then press the RESET button on the Arduino to initiate the code upload.

Could this Lidar work in a 3D world (with sloped ground)? Well, by operating the 2D lidar in a vertical orientation. Then we get a 2D stripe of the world (including the current position on that 2D stripe) that we could use for mapping and localization – A compass would help us to estimate the orientation of new stripes (blue stripe).

For a realtime test I’m using a 2D LeddarTech M16 Lidar (45 degree, 16 segments, 100-1000 Hz) monted on a servo:

I’m using MeshLab for visualization – use ‘Normals, compute’ in MeshLab to compute normal vectors for the faces.|||

