You've just fixed a bug in your code. The only problem is that you used a bunch of print statements and debugger calls, so now you have to clean those up. You can use to work through all the changes, but you have to be careful, and sometimes you can't remove individual lines.

can clean up all of your debugging statements with a single command.

This is a small script that parses the output from . By default, it deletes any new or changed lines that are "debugging statements". You can also pass a custom regex to match lines.

You can pass the flag (or ) to remove debugging statements from all files that are checked in to the git repository.

The script will show you every line that it is about to delete, and will ask you to confirm the changes. You can skip the confirmation by using the (or ) option.

The script also has a patch mode ( or ), similar to or . When running in patch mode, the script will prompt you to confirm every individual line. You can press or to cancel at any time. You can also press to skip the rest of the lines, and only delete what you have already confirmed.

$ git-remove-debug --help Usage: git-remove-debug [options] [files] -r, --regex=REGEX Use a custom regex changed lines -l, --lang=LANGUAGE Use the regex a given language -p, --patch Asks you to confirm the deletion of each matching line -a, --all Scans all files that are checked to the git repository -f, --force Does not prompt before deleting lines -h, --help Show this message Deletes any debugging statements from new or changed lines. Will display all of the proposed changes, and ask you to confirm before deleting. $ git-remove-debug Scans all files that are checked in to the git repository. You can pass a subdirectory, and it will recursively scan files in that directory. NOTE: If you call this on a large repo, you're not going to have a good time. $ git-remove-debug -a Delete all debugging statements without confirming first. $ git-remove-debug -f Only looks for new debugging statements in the given files $ git-remove-debug file other_file Enable patch mode. This will ask you to confirm every individual line. You can choose one of the following options: d - No, donâ€™t delete this line, and skip all remaining lines. $ git-remove-debug -p Deletes any new or changed lines, where the line matches the given regex $ git-remove-debug -r Use the built-in regex for a given language. $ git-remove-debug -l ruby

This software is provided without warranty of any kind. By using this script, you agree and understand that I can not be held personally responsible for any data loss.

To protect against loss of data, the script will make a backup copy of any file that it touches. The backup path will be displayed in the console.

Please note that this script may not work for all encodings and line endings. You should also be very careful if your filenames contain any spaces or UTF8 characters.

By default, this script will remove any new or changed lines. Use the or flag to scan all files in the git repo.

99% of my print statements are just a single line. If you have a multi-line print statement, you'll have to delete that manually for now. (Pull requests are welcome!)

The script has built-in support for some common files that don't have an extension:

Feel free to add some more and send a PR.

Either Mac or Linux, and a version of Ruby >= 2.0.0.

This script does not use any Ruby gems.

You could clone the repo somewhere and set up an alias:|||

git-remove-debug - Remove debugging statements with a single command.