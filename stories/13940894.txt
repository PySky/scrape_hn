Every developer is looking for a right way to deploy applications to production. Often, the question of the deployment is delayed at a later time, and it’s well known that many applications do not launch in production and developers just use solutions like Heroku for staging or demo servers. Cloud platforms are easy to use, but they are expensive and not so configurable, unlike your own VPS.

The most popular tools for this which are frequently used in the Ruby world are Chef and Chef Solo.

With Chef you can define the steps required to configure a server to fulfill a “role”, for example a Rails application server or a database server and then apply combinations of these roles to a particular remote machine.

Chef often works centrally. Central server “knows” the role that should be applied to a big number of other servers. If you are upgrading the role, the changes are applied to all of these servers automatically.

But if you don’t need to configure a big number of servers it’s easiser to use our local environment to determine the configuration and server roles, and then manually apply the configuration to the servers. To work with that we need knife-solo.

Let’s create a folder which contains our Chef:

Next, we have to set up some useful gems with bundler:

Then set up gems and initialize Chef:

Which will contain a run list and some additional attributes.

apt-packages — will be our custom cookbook with some needed libraries:

Also we need to write two cookbooks to configure monit and nginx which you can copy from my chef-template repo.

For example, I’m using the most popular cloud server hosting DigitalOcean. Let’s create a droplet with ubuntu 16.04.

The next step is creating node with IP of your machine.

Also update nginx config with your domain or IP, add user and ssh public key.

Finally, we’re able to upload the current kitchen to the target host and run chef-solo on that host. In a few minutes our config will be applied.

Web interface with states of monitored processes will be available by /monit route.

Capistrano is a Ruby framework for writing tasks related to deploying any application, in our case a Rails app, to a remote server. This include tasks like release management, checking out the code from a Git repository onto the remote server and uploading configuration files into our app each time when we need it.

As an example, I’ll use my rails-api-template which contains:

Move to your project folder and add Capistrano with some useful gems to the development group into Gemfile.

Capistrano gems should be required to Capfile.

We can point the machine’s IP, folder to deploy and a Git branch in config/deploy/production.rb

We need to create  file to add variables

Initialize folder on a server and upload configs by following two commands:

By the way, Chef and Capistrano configurations from this article are available in public repositories on GitHub.|||

Every developer is looking for a right way to deploy applications to production. Often, the question of the deployment is delayed at a later time, and it’s well known that many applications do not…