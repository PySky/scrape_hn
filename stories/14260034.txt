I have been keen on the elegance and beauty of the C# language since I wrote my first lines of C# code. I read different articles and books about it, always when I have free time. Here I am going to share with you dozens of my favorite underutilized features of C# (oft-forgotten/interesting/arcane/hidden).

 After so many comments about the previous title of the article –  “Top 15 Hidden Features of C#”, I decided to change it to the current one. Thank you all for the suggestions. My initial intent was not to mislead you. The original idea about the article came up from a Stack Overflow discussion with a similar title, so I decided not to change it because people were already familiar with the topic. But for the sake of all past and future critics I am changing the title.

 You could share your most preferred but not so well known features of the framework in the comments. I will include them in the future second part of the series. Also, you can vote in the poll that can be found at the end of the article for your most favorite underutilized feature of .NET.

1. ObsoleteAttribute

 2. Setting a default value for C# Auto-implemented properties via DefaultValueAttribute

 3. DebuggerBrowsableAttribute

 4. ?? Operator

 5. Curry and Partial methods

 6. WeakReference

 7. Lazy

 8. BigInteger

 9. __arglist __reftype __makeref __refvalue

 10. Environment.NewLine

 11. ExceptionDispatchInfo

 12. Environment.FailFast

 13. Debug.Assert, Debug.WriteIf and Debug.Indent

 14. Parallel.For and Parallel.Foreach

 15. IsInfinity

ObsoleteAttribute applies to all program elements except assemblies, modules, parameters, and return values. Marking an element as obsolete informs users that the element will be removed in future versions of the product.

 Message property contains a string that will be displayed when the attribute assignee is used. It is recommended a workaround to be provided in this description.

 IsError– If set to true the compiler will indicate an error if the attribute target is used in the code.

If we use the above class in our code, an error, and a warning are going to be displayed.

DefaultValueAttribute specifies the default value for a property. You can create a DefaultValueAttribute with any value. A member’s default value is typically its initial value.

 The attribute won’t cause a member to be automatically initialized with the specified value. Hence, you must set the initial value in your code.

The auto-implemented properties are initialized in the constructor of the class via reflection. The code iterates through all properties of the class and set them their default value if the DefaultValueAttribute is present.

 Official documentation– https://msdn.microsoft.com/en-us/library/system.componentmodel.defaultvalueattribute.aspx



Determines if and how a member is displayed in the debugger variable windows.

If you use the sample class in your code and try to step through it via the debugger (F11), you will notice that the code is just executing.

One of my favorite “hidden features of C#” is the ?? operator. I’m using it heavily in my code.

 The ?? operator returns the left-hand operand if it is not null, or else it returns the right operand. A nullable type can contain a value, or it can be undefined. The ?? operator defines the default value to be returned when a nullable type is assigned to a non-nullable type.

Curry– In mathematics and computer science, currying is the technique of translating the evaluation of a function that takes multiple arguments (or a tuple of arguments) into evaluating a sequence of functions, each with a single argument.

 In order to be implemented via C#, the power of the extension methods is used.

The curry extension method usage is a little bit overwhelming at first.

The types returned by the different methods can be exchanged with the var keyword.

 Official documentation– https://en.wikipedia.org/wiki/Currying#/Contrast_with_partial_function_application

 Partial – in computer science, partial application (or partial function application) refers to the process of fixing a number of arguments to a function, producing another function of smaller arity.

The partial extension method usage is more straightforward than the curry one.

Again the types of the delegates can be declared with the var keyword.

 Official documentation– https://en.wikipedia.org/wiki/Partial_application

 



A weak reference allows the garbage collector to collect an object while still allowing an application to access the object. If you need the object, you can still obtain a strong reference to it and prevent it from being collected.

If the garbage collector is not called explicitly, there will be significant chance the weak reference to be still assigned.

 Official documentation– https://msdn.microsoft.com/en-us/library/system.weakreference.aspx



Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.

The BigInteger type is an immutable type that represents an arbitrarily large integer whose value, in theory, has no upper or lower bounds. This type differs from the other integral types in the .NET Framework, which have a range indicated by their MinValue and MaxValue properties.

 Note: Because the BigInteger type is immutable and because it has no upper or lower bounds, an OutOfMemoryException can be thrown for any operation that causes a BigInteger value to grow too large.

I’m not sure that these can be treated as underutilized features of .NET because they are undocumented, and you should be careful with them. Probably there isn’t a documentation for a reason. Maybe they are not adequately tested. However, they are colored by the Visual Studio editor and recognized as official keywords.

 You can create a typed reference from a variable by using the __makeref keyword. The original type of the variable represented by the typed reference can be extracted using the __reftype keyword. Lastly, the value can be obtained from the TypedReference using the __refvalue keyword. The __arglist has similar behavior to the keyword params- you can access parameters lists.

In order to be able to use __arglist you need the ArglistTest class.

Remarks the ArgIterator object enumerates the argument list starting from the first optional argument, this constructor is provided specifically for use with the C/C++ programming language.

 Reference– http://www.nullskull.com/articles/20030114.asp and  http://community.bartdesmet.net/blogs/bart/archive/2006/09/28/4473.aspx



Gets the newline string defined for this environment.

Represents an exception whose state is captured at a certain point in code. You can use the ExceptionDispatchInfo.Throw method, which can be found in the System.Runtime.ExceptionServices namespace. This method can be used to throw an exception and preserve the original stack trace.

The caught exception can be thrown again in another method or even in another thread.

 Official documentation– https://msdn.microsoft.com/en-us/library/system.runtime.exceptionservices.exceptiondispatchinfo(v=vs.110).aspx

 



If you want to exit your program without calling any finally blocks or finalizers use FailFast.

If i equals 42 the finally block won’t be executed.

 Official documentation– https://msdn.microsoft.com/en-us/library/ms131100(v=vs.110).aspx



Debug.Assert– checks for a condition; if the condition is false, outputs messages and displays a message box that shows the call stack.

If the assert fails in Debug mode, the below alert is displayed, containing the specified message.

 

 Debug.WriteIf– writes information about the debug to the trace listeners in the Listeners collection if a condition is true.

Debug.Indent/Debug.Unindent– increases the current IndentLevel by one.

If we want to display the ingredients for a cake in the Debug Output Window, we can use the code above.

 

 Official documentation: Debug.Assert, Debug.WriteIf, Debug.Indent/Debug.Unindent



I’m not sure if we can add these to the underutilized features of .NET list because they are heavily used in the TPL (Task Parallel Library). However, I’m listing them here because I like them a lot and utilize their power in my multithreaded applications.

 Parallel.For– executes a for loop in which iterations may run in parallel.

Interlocked.Add method adds two integers and replaces the first integer with the sum, as an atomic operation.

 Parallel.Foreach– executes a foreach (For Each in Visual Basic) operation in which iterations may run in parallel.

Returns a value indicating whether the specified number evaluates to negative or positive infinity.|||

List of my favourite underutilized features of .NET framework. Contain full explanation what they are doing accompanied with C# code examples.