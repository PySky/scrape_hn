It’s understandable why so many newcomers to React+Redux have difficulty wrapping their heads around asynchronous actions. React is simply a view layer. Redux is simply a state management layer. But it takes much more to build a typical app.

These poor developers are given the corner pieces of a puzzle and the rest of the pieces are scattered about on the ground. There’s no reference picture to see what the puzzle is supposed to look like — everyone you ask would show you a different picture anyways.

Even developers experienced in React+Flux have difficulty picking up Redux because now they’re told not to put asynchronous calls in their components. Well then, where?

The good news is that Redux gives you a lot of flexibility.

Pretty much the only steadfast rule is that you musn’t put asynchronous code in your reducer.

Look… if you really want to put asynchronous code in your reducer, go ahead. The Redux police aren’t going to come lock you up. It’s your code, after all! But, by doing so, you’re simultaneously suffering all the overhead of Redux and sacrificing many of the benefits. And you’ll just confuse anyone else who looks at your code. It’s better to learn the right way.

The bad news is that Redux gives you a lot of flexibility.

Redux doesn’t care about who, where, when, what, why, and how data comes. Redux is designed to give you a predictable state machine. There is one central store and exactly one entry point into the store.

First of all, let’s define asynchronous operations.

We’re talking about any situation where our code has to wait for something else before it can continue. For example, when we’re logging in a user, we send the user’s credentials to the server and have to wait for a response to approve or reject the user.

We might have some additional business logic like this:

 – if login fails, show an error

 – if login succeeds, wait 2 seconds and then show a system message

There are lots of libraries that can help you solve this problem. Unfortunately, discovery is a problem in JavaScript niches like React+Redux.

As of the time of writing, the most popular third-party Redux side effects libraries according to GitHub stars are:

Kudos to redux-loop and redux-saga for having a close-rate of 90%+

Let’s look at how our login functionality could be implemented in each of these libraries.

In all cases, you can assume we’ve got the following action types:

In most cases you can assume we’ve got the following basic action creators (they will have slight variations in some of the examples). We accept a little more boilerplate here where it doesn’t matter to reduce the boilerplate in the bulk of our code where it does matter.

You can also assume we’ve got a function that performs the actual POST request to our API and returns a Promise . (All the examples will also work with minor modifications if you prefer the Node.js callback-style functions).

I’m going to start with redux-thunk because that’s where the official documentation starts and that’s where a lot of people start. It’s also the easiest to understand.

With redux-thunk, all the logic is wrapped up neatly in a function called a thunk. This function takes a reference to the dispatch function and you execute it by dispatching the thunk the same way you would a simple action.

To execute the login sequence we dispatch our thunk:

Redux-Promise allows you to dispatch JavaScript Promises to your store.

We can either dispatch a promise directly or in the payload property.

Regardless of which action creator style we choose, however, redux-promise does not allow us to implement our simple login functionality.

In one case the error is silently dropped and in both cases the success path has no way to chain together the rest of our operations.

Redux-Saga puts all the asynchronous logic in generator functions called sagas:

To run our code, we just need to register the saga with the middleware and we’re done.

Redux-Logic is like a super-charged thunk from redux-thunk but is invoked from middleware similar to how a saga is called in redux-saga.

This little code example doesn’t do justice to all the capabilities of redux-logic. It has other lifecycle hooks for intercepting actions for validation, transformation, etc.

Redux-Loop borrows from Elm the premise that the reducer should be responsible for follow-up effects. In other words, given a current state and an action, redux-loop would have your reducer return the next state and side effects from the state transition.

Pretend this is what our reducer normally looks like:

This is what it looks like with redux loop, note we also have to modify an action creator and add some helper functions:

We don’t need to do anything special to execute our asynchronous operations. Just dispatch the request action and off it goes.

Redux-Side-Effects is similar to redux-loop in the sense that it believes the reducer should be responsible for describing side effects of an action. However, unlike redux-loop, it uses generator functions as reducers to yield side effects.

Okay, I admit this is actually pretty cool. I could see myself using this on a small/medium project with basic async operations. But I think this will not scale well with a large app and complex operations.

Redux-Ship aims to have “composable, testable, and typable side effects for Redux.” It’s twice as verbose as basic Redux because it introduces new concepts, Effect and Commit, as well as new functions to select and run effects.

Overall this is very similar to redux-saga but explicitly puts side effects in the core code rather than letting the middleware take care of them.

Redux-Observable is radically different from the others because it uses a Reactive-style of programming. It uses the term epic to describe a sequence of asynchronous operations. Everything is a stream. The dollar sign $ is used by convention to indicate a variable that holds a stream.

Redux-Cycles, like redux-observable, uses a Reactive style of programming. It attempts to go one step further in making pure functions by eliminating side-effects from the epics. It refers to these pure epics as cycles.

Sorry that my example is incomplete. The documentation was a little lacking. I think one is expected to know Reactive methods before using this library.

Redux-Effects has a novel method of chaining operations by nesting actions with success and failure paths like a decision tree.

I can see this quickly becoming a nightmare. We could manage a little better with a helper method for composition.

But it’s unclear to me how we’d model delays and I also don’t see a way to cancel a tree of effects because there is no access to the store (although this could be handled via middleware).

redux-promise and redux-effects were disqualified for not being able to support the basic requirements.

1. Must be transpiled down to ES5 via Babel, TypeScript 2.3, etc.

So what is the right way to do asynchronous operations in Redux?

There really is no right answer for everyone. It’s largely a matter of preference.

Beginners should continue to consider redux-thunk first because, as small as Redux is, there’s more than enough basics to learn.

Developers who are more comfortable with an imperative, top-down style of programming will do better with redux-saga or redux-thunk. If you like the simplicity of thunks but feel dirty using them, give redux-logic a shot.

Developers who like the Reactive style of programming will feel more comfortable with redux-observable or redux-cycles.

Redux-saga is certainly winning the popularity contest and it (along with redux-logic) scales much better with complexity compared to the other contenders.

Which will you choose?|||

