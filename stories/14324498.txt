Small utility that you can use to generate advanced Firebase rules.

It takes as input a declarative definition of your Firebase schema, and generates the Firebase rules that will enforce it.

Let's suppose that you want to enforce a schema for a basic chat app. The complete working example is located at .

You can generate the rules by running the script by running the following command:

Our chat example app will be composed of three main object types: users, rooms and messages:

Let's start by defining the schema for users. Object schemas are defined using :

s accept a list of fields as input. Fields can be either required ( ) or optional ( ). The following fields are available (some fields have parameters):

Sometimes, one will want to have a collections of objects of the same schema, indentified by an unique ID. Use to define new collections. The following example define the , and collections of our example:

Note: empty collections in Firebase are automatically removed by the database. If you want to allow an object to contain an empty collection, define the collection as an optional field (i.e. using ).

You can add access and validation constraints to any schema node (objects, fields or collections) using the , , and methods. These matches the , and constraints of Firebase rules and have access to the Firebase Rules variables.

In the following example, we are going to redefine the collection we defined earlier with new constraints:|||

firebase-rules-generator - Small utility that you can use to generate advanced Firebase rules