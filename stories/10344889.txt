A couple of weeks ago, the OSS-security mailinglist got a really interesting thread about the dangers of escape sequences inside a terminal. It didn't really get a lot of attention back then but the follow-up thread made by Frederico Bento did.

These techniques have been known for many years (especially since escape sequences go way back), but I have to admit -- I wasn't aware of this kind of impact.

Escape sequences allow you to do funny things like write blinking commit messages, but there's a darker side to them as well.

The example below illustrates the real danger of escape sequences.

It's important to remember: we can't trust at the command line.

While it's never been safe to just run from any site on the internet, these escape sequences show that downloading the file first and inspecting it with (or , , , ...) can trick even experienced sysadmins.

There are a couple of ways to protect you from this.

The parameter shows all non-printable characters (which seems like a safe default to have, odd that it isn't? Update: turns out, not a good idea to have as a default.).

Catting a file and piping it to xxd (a hexdumper) will show you the escape characters as well.

The old saying of "less is more" is true here as well, since will show the escape sequences by default.

Let's all agree to never trust anything that has been posted on the internet without very thorough inspection. And let's especially agree to never run an arbitrary command or script found on the internet, without really close inspection.

If you're up for some more reading, the original oss-security thread has some impressive examples on how to fool diff and gcc compilation as well.|||

The Web, Open Source, PHP, Security, DevOps & Automation.