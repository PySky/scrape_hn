Grails makes it very easy to put any logic of your application in a service. Just and you’re good to go. There’s a single instance by default, injectable anywhere. Powerful stuff and makes it easy to get up ‘n running very fast!

Creating a new application, following so-called “best practices” from blogs like these 🙂 and the ‘idiomatic Grails-way’ described in the docs and in tutorials work in the beginning, but there’s always a tipping point — where the application has grown a reasonable size — where one should start following a different, maybe less-Grailsey, strategy.

So what can go wrong by creating services in your application?

In a previous anti-pattern post about dynamic finders I tried to explain what could happen from Day 1 of your project onwards.

A team really took this advice to heart and started centralising their Album queries in a , their Product queries in a and so on.

This team started out really sharp: they almost were implementing business-like logic in controllers, but could pull those into services just in time. The command would even immediately create an empty unit test — ready to implement.

The productivity was unparalleled. The team never had to manually create a class anymore with their IDEs and for the next sprints the team burned through the backlog like a hot knife through the butter.

Looking at their code, it seems their folder consists of a dozens of classes:

This happened to me a gazillion times before. Me and the team value the simplicity and power of Grails. Hence, it’s pretty easy to start using the Grails commands to the fullest, such as all the commands:

In many Grails projects, similar to the fictional one 🙂 above, the command has been over-used, because it seems to be idiomatic way of creating “business logic in the service layer”.

Yes, this command does create a nice, empty unit test, and is automatically a handy Spring bean injectable in controllers, tag libraries and other Grails artefacts.

Yes, using a works well in blog posts, demo’s and tutorials.

However, it seems that we have forgotten basically everything is a “service” to someone else, but that we do not necessarily need to postfix (“Service”) every class as such.

Seems that people usually understand when something needs to be a controller (“let’s do “) or a tag library (“let’s do “) and so forth, and for everything else: boom!, “let’s do “.

In any other, non-Grails project we’re used to calling a builder simply “PersonBuilder”, in Grails projects it’s suddenly “PersonBuilderService”. In any other project a factory is a “PersonFactory”, in a Grails project it’s a weird “PersonFactoryService”.

What if a “PersonReadService” is responsible for getting or finding persons? For years people having been using the Repository pattern for this and this can be reflected with a “Repository” postfix, e.g. “PersonRepository”.

What we can we do about it?

First, next time you’re about to create a class following one of the Famous Design Patterns, such as Builder, Factory, Strategy, Template, Adapter, Decorator (see sourcemaking.com for a nice overview), or other “well-known” Java (EE) patterns, such as Producer or Mapper or something, ask yourself a question:

Can it be a regular class in ?

Do you still want to have the benefit of Spring and Dependency Injection?

In other words, do you need an instance of your class to be able to be injected into any Grails classes, such as a controller, as you are used to with a service, like the below?

The underlying container is created by the Spring Framework.

Yes, it want them to be a Spring bean!

Sure, we can do this ourselves. The Grails idomatic way is to specify beans in .

We’ve defined a a bean named “productRepository” of class and we’ve indicated the needs to be injected.

This is how the original code has changed, but the behaviour has not: it’s now using instead.

This is not the only way to declare Spring beans.

We declared Spring beans the Grails way, but we can also declare beans the Spring way.

Ok, there’s not just “a Spring way”, there are many ways, from the old XML declarations, classpath scanning to Java-style configuration.

Having (a subset of) your 532 classes in might be considered not all that better than the XML configuration Spring used in the early days.

Even through the Beans DSL is a lot more powerful here than XML ever was (because: Groovy), we’re not transitioning our automatically picked up service beans to get manual labour back, in my opinion. 😉

This is how it would look:

There are use cases where is perfectly fine, but why not get rid of the boiler-plate and leverage the modern features of Spring at our disposal?

This makes Spring, at application startup, scan all components on the classpath under the package “example” and register them as Spring beans. Or specify to be more explicit.

What are these “components” you say? All classes annotated with Spring’s stereotype annotation . Or or which are just specializations.

While we’re at it, I recommend to use constructor-injection, which means we create (or let the IDE create) a constructor.

 * We make the dependencies of explicit.

 * Spring will automatically “autowire” our constructor as long as we have exactly one, and inject all parameters of the constructor

This is it.

Now, if we would have done this to the original, 532 classes we might end up with a more enjoyable tree of files. E.g.

Some actual classes cal still reside in and the rest can become clearly named classes, neatly placed in , while you still enjoy the benefit of using them as Spring beans.

If you and the team early on in the process decide on proper naming conventions (packages, class prefixes and such), you don’t have to reorder everything like we did just now. Together with the team, create and name your classes in an organized place.|||

The context Grails makes it very easy to put any logic of your application in a service. Just grails create-service and you're good to go. There's a single instance by default, injectable anywhere. Powerful stuff and makes it easy to get up 'n running very fast! Creating a new application, following so-called "best practices" from…