In this post we'll get hands-on and use Docker's LinuxKit to build, run and connect to a bootable Linux system image with OpenSSH. You will need Docker for Mac for this example, but LinuxKit can create images bootable on many types of system.

Photo: Running LinuxKit for the first time in Starbucks in Austin during Dockercon

LinuxKit is an exciting new project spun out of Docker's internals. It is designed to build bootable Linux systems that can run on bare-metal, the cloud, in a Docker container or through HyperKit (the Hypervisor used for Docker for Mac). A very small init process starts the system, then everything else is run through containers via containerd.

I want to show you how to build and run an SSHD server in around 10 minutes. We'll be using an example that was demo'd in the general session at Dockercon by Rolf Neugebauer

First pull the code down for LinuxKit and build it.

Now head over to the directory and initiate a :

You'll see output like this:

This is building two new CLIs called and which can then be used to create and start a bootable system.

Install the new and CLI:

I've put together a sshdkit Github repository with some utility scripts, we'll clone that into the current folder and use it for the rest of this post.

Put your public SSH key into the YAML file:

First of all edit the sample file and put your ssh key into the slot that says :

Your ssh key will be found in $HOME/.ssh/id_rsa.pub, if that file is missing then type in and hit enter to all the questions.

You'll see the CLI tool will pull down various images down and then construct one final package including a recent Linux kernel.

You will see several system images created in the current folder:

Now go ahead and type in the following and watch a full Linux system boot up in your terminal. When it's ready you will be connected to a BusyBox shell and can type in commands.

We're also allocating a static IP address so we can access it later.

The easiest way to access the SSHD VM we started in HyperKit is by running a Docker container with the SSH client and your SSH keys baked-in.

Use the included utility script to build that Docker image:

Now run the Docker container which is an Alpine Linux image with SSHD added and your SSH keys mounted:

From this Docker container we can connect with the client into the SSHD VM:

As you can see this system is running and :

You can boot additional systems by allocating them a separate IP address. This is the contents of the boot.sh file ( ):

On my 2016 entry-level Macbook 12" this took around 4-5 seconds, which feels blisteringly fast.

You can now connect to either or both of those SSHD servers at once.

This was a very simple example of how to build a bootable image with a useful system service and then connect to it. It feels like the possibilities opened up by this project are endless. I'm really excited to see what people will do with this power and flexibility.

If you're a Google Cloud user, you can boot images there just as easily. PacketHost even enables booting the image we just built on a bare metal server.

I think that conceptually LinuxKit could eventually build images for a 32-bit Raspberry Pi architecture, but this will take some tweaking and porting of the Kernel and images used to construct a system. For now the easiest way to get started on a Raspberry Pi is with the Raspbian image and my tutorial series.

One of the other cool demos shown on stage was building a similar bootable system image, but with Kubernetes baked-in. So that's Kubernetes on Mac, booted up in seconds. Here's a Tweet from Docker Captain Jesse White:

Rolf and the rest of Docker's Engineering team are building out some very practical examples and instructions for booting these systems on bare metal, Docker and other platforms.

Head over to the LinuxKit repository to try the other examples such as an OS for Redis and find out more:

RancherOS is an operating system which uses Docker as its starting point and runs all its system services through Docker containers. LinuxKit works in a very similar way, but leverages containerd instead of Docker directly.

See video demos of Moby's Cool Hacks winners during the closing keynote at Dockercon.

FaaS (Functions as a Service) which is an easy-to-use serverless framework for Docker and Play-with-Docker (an interactive Docker playground for learning and training).|||

LinuxKit builds bootable Linux systems that can run on many targets and load in seconds. Get started in 10 mins with an SSH server as an appliance