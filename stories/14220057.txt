In this post we’re going to show you how to load test a RESTful API using our popular Ruby-JMeter gem. If you only use JMeter, don’t worry, the gem will also output the format so you can use the examples here without the gem as well.

We’re using an example application for this demonstration, based on code taken from a popular Railscast about API versioning.

Our application lets users create, read, update or delete products. The application can be accessed using a browser or via a RESTful API. The following product list is just a simple index view of all the products. It looks like this in HTML.

We can also make the same call using a to the products API endpoint with a response in JSON like this.

This gem lets you write test plans for JMeter in your favorite text editor, and optionally run them on Flood IO. It’s great for users who want to skip using the JMeter GUI and express their test plans in a succinct, easy to read and shared format.

So instead of looking at something like this in JMeter:

We can write the test plan like this in Ruby-JMeter.

Most RESTful APIs will respond to HTTP verbs (or methods) such as , , , and . These normally relate to , , , and (CRUD) operations.

Our test application supports the following routes.

So tying that all together, we can extend our Ruby-JMeter test plan to cover some of these other methods as follows.

The HTTP verb is often used to retrieve (or read) a representation of a resource. We've already demonstrated the index view of our products which lists all the products in our catalog using a as follows.

The verb is often used for creation of new resources. In order for us to create a new product we need to provide some additional parameters for the product itself via the parameter as follows.

We should also validate the response and extract the newly created product ID so we can use it in subsequent requests. If the request is processed without errors we should expect a response code along with a response body in JSON that looks like this.

We can check for the same in our test plan using the and methods on the response body like this.

We’ve already published a more complete guide to using JMeter Regular Expressions which might be of help. JMeter-Plugins also provide a useful JSON path extractor if you don’t want to deal with regex.

Now that we’ve created a product, we can use its product ID extracted during the creation and use the verb to show the matching product in the database. We'll also assert that the product name is the same as the product we created as follows.

Now that we’ve created a product, we can use its product ID extracted during the creation and use the verb to update its attributes. If the request is processed without errors we should expect a response code along like this.

Notice in this case we used the parameter in order to modify attributes via query parameters instead.

Finally we can delete a product using the verb. It's as straightforward as this.

Once you’ve completed your test plan, you can scale out and run the test on distributed infrastructure in the AWS cloud using Flood IO.

As promised, if you don’t want to use Ruby-JMeter you can use the formatted test plan available here.

Upload your test plan using our GUI, or use our own API to start your own load test.|||

In this post we’re going to show you how to load test a RESTful API using our popular Ruby-JMeter gem. If you only use JMeter, don’t worry, the gem will also output the JMX format so you can use the…