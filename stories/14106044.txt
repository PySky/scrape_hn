One of the major advantages of JavaScript is that everything is asynchronous. For the most part, different parts of your code donâ€™t affect the execution of others.

Unfortunately, this is also one of JavaScript's major disadvantages. Because everything is asynchronous by default, it makes it that much more difficult when you do want to execute code synchronously.

The first solution to this problem was callbacks. If a part of your code was dependent on the result of something else, we would have to nest our code -

Nesting callbacks on callbacks, as we know, became unmaintainable. So, the solution of promises was created. This allowed us to deal with synchronous code in a much cleaner, flatter, way.

As with everything, promises were not perfect either. So, as part of the ES2017 Specification, another method for dealing with synchronous code was defined; asynchronous functions. These allow us to write asynchronous code as if it were synchronous.

An asynchronous function is defined with the function expression. A basic function looks like this -

We define a function as an asynchronous function by preceding the function declaration with . This keyword can be used with any function declaration syntax -

Once we have defined a function as an asynchronous function, we are able to use the keyword. This keyword is placed before the calling of a promise, which will pause the execution of the function until the promise is either fulfilled or rejected.

Error handling in asynchronous functions is done with the help of and blocks. The first block, , allows us to attempt an action. The second block, , is called if the action is failed. It accepts one paramter containing whatever error was thrown.

Asynchronous functions aren't really a replacement for promises. The two work hand in hand. An asynchronous function will the execution of a promise, and an asynchronous function will always return a promise.

The promise returned by an asynchronous function will resolve with whatever value is returned by the function.

If an error is thrown, the Promise will be rejected with that error.

With promises, we can execute multiple promises in parallel using the method.

With asynchronous functions, we have to work around a bit to get the same effect. If we just list each function to await in sequence, they will be executed in sequence since will pause the execution of the rest of the function.

This will take 1000ms to complete, because the second is not even started until the first has been completed. To get around this, we need to reference the functions in this way -

This will take only 500ms to complete because both functions are being executed at the same time.

As I mentioned, asynchronous functions aren't a replacement for promises, the two are used together. Asynchronous functions provide an alternative, and in some cases better, way of working with promise-based functions. But, they still use and produce promises.

Since a promise is returned, an asynchronous function can be called by another asynchronous function, or a promise. We can mix and match depending on which syntax is best suited for each case.

The following will occur:

At the time of writing, both asynchronous functions and promises are available in the current versions of all major browsers, with the exception of Internet Explorer and Opera Mini.|||

