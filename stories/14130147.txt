Fluture offers a control structure similar to Promises, Tasks, Deferreds, and what-have-you. Let's call them Futures.

Much like Promises, Futures represent the value arising from the success or failure of an asynchronous operation (I/O). Though unlike Promises, Futures are lazy and adhere to the monadic interface.

Some of the features provided by Fluture include:

Fluture depends on these functions being present: , and . You may need to polyfill one or more.

The sets a -field for build-tools like Rollup.

Hindley-Milner type signatures are used to document functions. Signatures starting with a refer to "static" functions, whereas signatures starting with a refer to functions on the prototype.

A list of all types used within the signatures follows:

Fluture interprets your transformations in a stack safe way. This means that none of the following operations raise :

Creates a Future with the given computation. A computation is a function which takes two callbacks. Both are continuations for the computation. The first is , commonly abbreviated to . The second , which abbreviates to . When the computation is finished (possibly asynchronously) it may call the appropriate continuation with a failure or success value.

Additionally, the computation may return a nullary function containing cancellation logic. This function is executed when the Future is cancelled after it's forked.

Creates a Future which immediately resolves with the given value. This function is compliant with the Fantasy Land Applicative specification.

Creates a Future which immediately rejects with the given value. Just like but for the rejection branch.

Creates a Future which resolves with the given value after n milliseconds.

Creates a Future which rejects with the given reason after n milliseconds.

Returns a Future which caches the resolution value of the given Future so that whenever it's forked, it can load the value from cache rather than reexecuting the chain.

A specialized version of fantasy-do which works only for Futures, but has the advantage of type-checking and not having to pass . Another advantage is that the returned Future can be forked multiple times, as opposed to with a general solution, where forking the Future a second time behaves erroneously.

Takes a function which returns an Iterator, commonly a generator-function, and chains every produced Future over the previous.

This allows for writing sequential asynchronous code without the pyramid of doom. It's known as "coroutines" in Promise land, and "do-notation" in Haskell land.

Error handling is slightly different in do-notation, you need to the error into your control domain, I recommend folding into an :

This function has an alias , for environments in which is a reserved word.

Creates a Future which resolves with the result of calling the given function, or rejects with the error thrown by the given function.

This function has an alias , for environments in which is a reserved word.

Takes a function and a value, and returns a Future which when forked calls the function with the value and resolves with the result. If the function throws an exception, it is caught and the Future will reject with the exception:

Partially applying with a function allows us to create a "safe" version of . Instead of throwing exceptions, the encased version always returns a Future when given the remaining argument(s):

Furthermore; and are binary and ternary versions of , applying two or three arguments to the given function respectively.

Allows Promise-returning functions to be turned into Future-returning functions.

Takes a function which returns a Promise, and a value, and returns a Future. When forked, the Future calls the function with the value to produce the Promise, and resolves with its resolution value, or rejects with its rejection reason.

Furthermore; and are binary and ternary versions of , applying two or three arguments to the given function respectively.

Creates a Future which rejects with the first argument given to the function, or resolves with the second if the first is not present.

This is a convenience for NodeJS users who wish to easily obtain a Future from a node style callback API. To permanently turn a function into one that returns a Future, check out futurization.

Transforms the resolution value inside the Future, and returns a new Future with the transformed value. This is like doing , except that it's lazy, so the transformation will not be applied before the Future is forked. The transformation is only applied to the resolution branch: If the Future is rejected, the transformation is ignored. To learn more about the exact behaviour of , check out its spec.

Maps the left function over the rejection value, or the right function over the resolution value, depending on which is present.

Allows the creation of a new Future based on the resolution value. This is like doing , except that it's lazy, so the new Future will not be created until the other one is forked. The function is only ever applied to the resolution value; it's ignored when the Future was rejected. To learn more about the exact behaviour of , check out its spec.

Resolve with the rejection reason, or reject with the resolution value.

Map over the rejection reason of the Future. This is like , but for the rejection branch.

Chain over the rejection reason of the Future. This is like , but for the rejection branch.

Applies the left function to the rejection value, or the right function to the resolution value, depending on which is present, and resolves with the result.

This provides a convenient means to ensure a Future is always resolved. It can be used with other type constructors, like , to maintain a representation of failures:

Applies the function contained in the left-hand Future or Apply to the value contained in the right-hand Future or Apply. If one of the Futures rejects the resulting Future will also be rejected.

Note that even though does not conform to the latest spec, the hidden -method does. Therefore Future remains fully compliant to Fantasy Land.

Returns a new Future which either rejects with the first rejection reason, or resolves with the last resolution value once and if both Futures resolve. This behaves analogously to how JavaScript's and-operator does.

Returns a new Future which either resolves with the first resolution value, or rejects with the last rejection value once and if both Futures reject. This behaves analogously to how JavaScript's or-operator does.

Functions listed under this category allow for more fine-grained control over the flow of acquired values.

Allows a Future-returning function to be decorated with resource acquistion and disposal. The signature is like , where is a Future which might create connections, open file handlers, etc. is a function that takes the result from and should be used to clean up (close connections etc) and also takes the result from , and may be used to perform any arbitrary computations using the resource. The resolution value of is ignored.

In the case that a hooked Future is cancelled after the resource was acquired, will be executed and immediately cancelled. This means that rejections which may happen during this disposal are silently ignored. To ensure that resources are disposed during cancellation, you might synchronously dispose resources in the function of the disposal Future:

Run a second Future after the first settles (successfully or unsuccessfully). Rejects with the rejection reason from the first or second Future, or resolves with the resolution value from the first Future.

Note that the first Future is given as the last argument to :

As with ; when the Future is cancelled before the finally computation is running, the finally computation is executed and immediately cancelled.

This function has an alias , for environments in which is a reserved word.

Execute the computation that was passed to the Future at construction using the given and callbacks.

After you a Future, the computation will start running. If you wish to cancel the computation, you may use the function returned by :

Extracts the value from a resolved Future by forking it. Only use this function if you are sure the Future is going to be resolved, for example; after using . If the Future rejects and was used, an (likely uncatchable) will be thrown.

Just like fork, returns the function:

An alternative way to the Future. This eagerly forks the Future and returns a Promise of the result. This is useful if some API wants you to give it a Promise. It's the only method which forks the Future without a forced way to handle the rejection branch, so I recommend against using it for anything else.

Race two Futures against each other. Creates a new Future which resolves or rejects with the resolution or rejection value of the first Future to settle.

Run two Futures in parallel. Basically like calling with exactly two Futures:

Creates a Future which when forked runs all Futures in the given in parallel, ensuring no more than Futures are running at once.

If you want to settle all Futures, even if some may fail, you can use this in combination with fold:

ConcurrentFuture (or for short) is the result of applying to . It provides a mechanism for constructing a Fantasy Land from a member of . This allows Futures to benefit from the Alternative Interface, which includes parallel , and .

The idea is that you can switch back and forth between and , using and , to get sequential or concurrent behaviour respectively. It's useful if you want a purely algebraic alternative to and .

Returns true for Futures and false for everything else. This function (and ) also return for instances of Future that were created within other contexts. It is therefore recommended to use this over , unless your intent is to explicitly check for Futures created using the exact constructor you're testing against.

A Future that never settles. Can be useful as an initial value when reducing with , for example.

Returns if the given input is a .

When using this module with Sanctuary Def (and Sanctuary by extension) you might run into the following issue:

This happens because Sanctuary Def needs to know about the Future type in order to determine whether the variable types are consistent.

To let Sanctuary know about Futures, we can provide it a using from Sanctuary Def, and pass it to Sanctuary using :

To reduce the boilerplate of making Node or Promise functions return Futures instead, one might use the Futurize library:

Sometimes you may need to convert one Future to another, for example when the Future was created by another package, or an incompatible version of Fluture.

When returns , a conversion is necessary. Usually the most concise way of doing this is as follows:

The name "Fluture" is a conjunction of "FL" (the acronym to Fantasy Land) and "future". Fluture means butterfly in Romanian: A creature you might expect to see in Fantasy Land.

Thanks to Erik Fuente for the logo, and WEAREREASONABLEPEOPLE for sponsoring the project.|||

Fluture - :butterfly: FantasyLand compliant (monadic) alternative to Promises