Style matters. Elixir has plenty of style but like all languages it can be stifled. Don't stifle the style.

This is community style guide for the Elixir programming language. Please feel free to make pull requests and suggestions, and be a part of Elixir's vibrant community.

If you're looking for other projects to contribute to please see the Hex package manager site.

Translations of the guide are available in the following languages:

Use two spaces per indentation level. No hard tabs. [link] Use Unix-style line endings (*BSD/Solaris/Linux/OSX users are covered by default, Windows users have to be extra careful). [link] If you're using Git you might want to add the following configuration setting to protect your project from Windows line endings creeping in: [link] Use spaces around operators, after commas, colons and semicolons. Do not put spaces around matched pairs like brackets, parentheses, etc. Whitespace might be (mostly) irrelevant to the Elixir runtime, but its proper use is the key to writing easily readable code. [link] Do not use spaces after non-word operators that only take one argument; or around the range operator. [link] Use blank lines between s to break up a function into logical paragraphs. [link] ( ) altered_data .function(data) result another_result one two three four ...but run single-line s that match for the same function together. [link] If you use the syntax with functions and the line that makes up the function body is long, put the on a new line indented one level more than the previous line. [link] When you use the convention above and you have more than one function clause using the syntax, put the on a new line for each function clause: If you have more than one multi-line s do not use single-line s. [link] Use the pipe operator ( ) to chain functions together. [link] .strip( .downcase(some_string)) some_string .downcase .strip Multiline pipelines are not further indented some_string .downcase .strip Multiline pipelines on the right side of a pattern match should be indented on a new line sanitized_string some_string .downcase .strip While this is the preferred method, take into account that copy-pasting multiline pipelines into IEx might result in a syntax error, as IEx will evaluate the first line without realizing that the next line has a pipeline. Avoid using the pipe operator just once. [link] Use bare variables in the first part of a function chain. [link] This actually parses as String.strip("nope" |> String.downcase). .strip .downcase .strip(some_string) .downcase .codepoints some_string .strip .downcase .codepoints

Use parentheses when a has arguments, and omit them when it doesn't. [link] Add a blank line after a multiline assignment as a visual cue that the assignment is 'over'. [link] something x something .downcase something x something .downcase Never use for multi-line . [link] some_condition, note no end in this block some_condition Never use with . Rewrite these with the positive case first. [link] Use as the last condition of the special form when you need a clause that always matches. [link] Never put a space between a function name and the opening parenthesis. [link] Use parentheses in function calls, especially inside a pipeline. [link] f f( ) not preferred and parses as rem(2, (3 |> g)), which is not what you want. rem g rem( ) g Omit parentheses in macro calls when a do block is passed. [link] Optionally omit parentheses in function calls (outside a pipeline) when the last argument is a function expression. [link] Use parentheses for calls to functions with zero arity, so they can be distinguished from variables. Starting in Elixir 1.4, the compiler will warn you about locations where this ambiguity exists. [link] , . do_stuff is this a variable or a function call? do_stuff() this is clearly a function call Indent and align successive clauses. Put the argument on a new line, indented normally. [link] If the expression has a block with more than one line, or has an option, use multiline syntax. [link]

Annotations should usually be written on the line immediately above the relevant code. [link] The annotation keyword is uppercase, and is followed by a colon and a space, then a note describing the problem. [link] In cases where the problem is so obvious that any documentation would be redundant, annotations may be left at the end of the offending line with no note. This usage should be the exception and not the rule. [link] Use to note missing features or functionality that should be added at a later date. [link] Use to note broken code that needs to be fixed. [link] Use to note slow or inefficient code that may cause performance problems. [link] Use to note code smells where questionable coding practices were used and should be refactored away. [link] Use to note anything that should be looked at to confirm it is working as intended. For example: REVIEW: Are we sure this is how the client does X currently? [link] Use other custom annotation keywords if it feels appropriate, but be sure to document them in your project's or similar. [link]

Use one module per file unless the module is only used internally by another module (such as a test). [link] Represent each level of nesting within a module name as a directory. [link] List module attributes and directives in the following order: [link] Add a blank line between each grouping, and sort the terms (like module names) alphabetically. Here's an overall example of how you should order things in your modules: Use the pseudo variable when a module refers to itself. This avoids having to update any self-references when the module name changes. [link] If you want a prettier name for a module self-reference, set up an alias. [link] Avoid repeating fragments in module names and namespaces. This improves overall readability and eliminates ambiguous aliases. [link]

Documentation in Elixir (when read either in with or generated with ExDoc) uses the Module Attributes and .

Typespecs are notation for declaring types and specifications, for documentation or for the static analysis tool Dialyzer.

Custom types should be defined at the top of the module with the other directives (see Modules).

No guidelines for collections have been added yet.

No guidelines for regular expressions have been added yet.

Refer to Awesome Elixir for libraries and tools that can help with code analysis and style linting.

It's our hope that this will become a central hub for community discussion on best practices in Elixir. Feel free to open tickets or send pull requests with improvements. Thanks in advance for your help!

Check the contributing guidelines and code of conduct for more information.

A community style guide is meaningless without the community's support. Please tweet, star, and let any Elixir programmer know about this guide so they can contribute.

This work is licensed under a Creative Commons Attribution 3.0 Unported License

The structure of this guide, bits of example code, and many of the initial points made in this document were borrowed from the Ruby community style guide. A lot of things were applicable to Elixir and allowed us to get some document out quicker to start the conversation.

Here's the list of people who have kindly contributed to this project.|||

elixir_style_guide - A community driven style guide for Elixir