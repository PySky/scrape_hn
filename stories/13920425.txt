Stripe users in the United States, Canada, and Europe can process card payments that require authentication with 3D Secure using Sources—a single integration path for creating payments using any supported method. Users in other countries that Stripe supports can request an invite. Considering when to use 3D Secure You can learn more about 3D Secure, and when you may want to accept it, over at our support site. The process for 3D Secure card payments begins in the same way as regular card payments with your integration first creating a Source object that represents the card information. Instead of using this source to make a charge request, it’s used to create a 3D Secure object. Your customer is then potentially redirected to their card issuer’s website to verify their identity using 3D Secure. Once completed, your integration uses the 3D Secure source to make a charge request and complete the payment. You then have the option of saving the card information to use for future payments. Within the scope of Sources, 3D Secure card payments are are a pull-based, synchronous method of payment. This means that your integration takes action to debit the amount from the customer’s card and there is immediate confirmation about the success or failure of a payment.

Card information is sensitive by nature. While sources for other payment methods are created server-side, card sources must be created client-side using Stripe.js. This ensures that no sensitive card data passes through your server so your integration can operate in a PCI compliant way. When your customer submits their card information using your payment form, it is sent directly to Stripe, and a representative object is returned for you to use. The process is similar to the creation of tokens. If you’re already using Stripe.js to tokenize card information, switching to sources is only a small change.

This guide supplements our Stripe.js documentation with specific usage for sources. Refer to this if you need further information on using Stripe.js. To create a source with Stripe.js, first include the library within your payment page and set your publishable API key. Once included, use the following method (instead of ) to create a source when a customer submits their card information in your payment form: 



 When your script receives the response from Stripe’s servers, the following function is called. Similar to using Stripe.js to create card tokens, this function does the following: If the card information entered by the user returned an error, the error is displayed on the page If no errors were returned then a source was created successfully. Add the returned source ID to the form and submit the form to your server. function stripeResponseHandler(status, response) { // Grab the form: var $form = $('#payment-form'); if (response.error) { // Problem! // Show the errors on the form $form.find('.payment-errors').text(response.error.message); $form.find('button').prop('disabled', false); // Re-enable submission } else { // Source was created! // Get the source ID: var source = response.id; // Insert the source into the form so it gets submitted to the server: $form.append($('<input type="hidden" name="source" />').val(source)); // Submit the form: $form.get(0).submit(); } } Once the source has been created, its status is immediately set to . No additional customer action is needed so the source can be used straight away. At this stage, you can either proceed with a regular card payment and make a charge request, or continue with the 3D Secure process. As card payments are a pull-based payment method, there is no movement of funds during the creation of a source. Only when a charge request has been made, and the payment is successful, is the customer’s card debited and you receive the funds. If you’re building an iOS app, you can implement sources using our iOS SDK. Refer to our Sources for iOS SDK documentation to learn more.

Determine if the card supports or requires 3D Secure The behavior of, and support for, 3D Secure can vary across card networks and types. For cards that are not supported, perform a regular card payment instead. Some issuing banks, however, require the use of 3D Secure to reduce the risk for fraud, declining all charges that do not use this process. So you can best handle these different situations, check the attribute value of the card source before continuing with the 3D Secure process. 3D Secure is required. The process must be completed for a charge to be successful. 3D Secure is optional. The process isn’t required but can be performed to help reduce the likelihood of fraud. 3D Secure is not supported on this card. Proceed with a regular card payment instead. At this stage, you can either proceed with the rest of the 3D Secure process below or perform a regular card payment (if 3D Secure is not supported). If you need to make use of subscriptions, continue to our 3D Secure and Subscriptions documentation.

Using the card source that has been created with Stripe.js, a 3D Secure object is then created. This can be created client-side using Stripe.js or server-side using the API, providing the following values: A positive integer in the smallest currency unit representing the amount to charge the customer (e.g., 1099 for a €10.99 payment). The currency the payment is being created in (e.g., eur). The URL the customer should be redirected to after they have successfully verified the payment. The ID of the card source. The handler function is called once the source has been created so you can create a charge when the source becomes chargeable. # Set your secret key: remember to change this to your live secret key in production # See your keys here: https://dashboard.stripe.com/account/apikeys Stripe.api_key = "sk_test_BQokikJOvBiI2HlWgH4olfQ2" source = Stripe::Source.create({ amount: 1099, currency: 'eur', type: 'three_d_secure', three_d_secure: { card: 'src_19YP2AAHEMiOZZp1Di4rt1K6', }, redirect: { return_url: 'https://shop.example.com/crtA6B28E1' }, }) # Set your secret key: remember to change this to your live secret key in production # See your keys here: https://dashboard.stripe.com/account/apikeys stripe.api_key = "sk_test_BQokikJOvBiI2HlWgH4olfQ2" source = stripe.Source.create( amount=1099, currency='eur', type='three_d_secure', three_d_secure={ 'card': 'src_19YP2AAHEMiOZZp1Di4rt1K6', }, redirect={ 'return_url': 'https://shop.example.com/crtA6B28E1' }, ) // Set your secret key: remember to change this to your live secret key in production // See your keys here: https://dashboard.stripe.com/account/apikeys \Stripe\Stripe::setApiKey("sk_test_BQokikJOvBiI2HlWgH4olfQ2"); $source = \Stripe\Source::create(array( "amount" => 1099, "currency" => "eur", "type" => "three_d_secure", "three_d_secure" => array( "card" => "src_19YP2AAHEMiOZZp1Di4rt1K6", ), "redirect" => array( "return_url" => "https://shop.example.com/crtA6B28E1" ), )); // Set your secret key: remember to change this to your live secret key in production // See your keys here: https://dashboard.stripe.com/account/apikeys Stripe.apiKey = "sk_test_BQokikJOvBiI2HlWgH4olfQ2"; Map<String, Object> sourceParams = new HashMap<String, Object>(); sourceParams.put("amount", 1099); sourceParams.put("currency", "eur"); sourceParams.put("type", "three_d_secure"); Map<String, Object> redirectParams = new HashMap<String, Object>(); redirectParams.put("return_url", "https://shop.example.com/crtA6B28E1"); sourceParams.put("redirect", redirectParams); Map<String, Object> threeDSecureParams = new HashMap<String, Object>(); threeDSecureParams.put("card", "src_19YP2AAHEMiOZZp1Di4rt1K6"); sourceParams.put("three_d_secure", threeDSecureParams); Source source = Source.create(sourceParams); // Set your secret key: remember to change this to your live secret key in production // See your keys here: https://dashboard.stripe.com/account/apikeys var stripe = require("stripe")("sk_test_BQokikJOvBiI2HlWgH4olfQ2"); var source = stripe.sources.create({ amount: 1099, currency: "eur", type: "three_d_secure", three_d_secure: { card: "src_19YP2AAHEMiOZZp1Di4rt1K6", }, redirect: { return_url: "https://shop.example.com/crtA6B28E1" }, }, function(err, source) { // asynchronously called }); Either approach to creating a 3D Secure source results in the following response: As 3D Secure card payments are a pull-based payment method, there is no movement of funds during the creation of a source. Only when a charge request has been made, and the payment is successful, is the customer’s card debited and you receive the funds. Checking if verification is still required When creating a 3D Secure source, its status is most commonly first set to and cannot yet be used to create a charge. In some cases, a 3D Secure source’s status can be immediately set to . This can happen if the customer’s card has not yet been enrolled in 3D Secure. Should this occur, the value is set to and set to . The attribute of the 3D Secure source can be immediately set to if the card does not support 3D Secure, or there was a technical failure (e.g., the issuing bank’s 3D Secure service is down). Should this occur, you can either continue with a regular card payment, interrupt the payment flow, or attempt to create a 3D Secure source later. Source creation for 3D Secure card payments may return any of the following errors: The payment method is currently not available. You should invite your customer to fallback to another payment method to proceed. An unexpected error occurred preventing us from creating the source. The source creation should be retried.

Once you determine if the card supports or requires 3D Secure, your customer must successfully verify their identity with their card issuer to make the source chargeable. To allow your customer to verify their identity using 3D Secure, redirect them to the URL provided within the attribute of the object. We recommend using a HTTP status code when performing this redirect if the source has been created as part of a form submission or using client-side Javascript. After the customer has authorized the payment, the object’s status is updated to and it is ready to use in a charge request. Additionally, the attribute is set to . Stripe populates the with the following GET parameters when your customer returns to your website: : a string representing the original ID of the object : indicates if this is a live payment, either or : used to confirm that the returning customer is the same one who triggered the creation of the source (source IDs are not considered secret) You may include any other GET parameters you may need when specifying . Do not use the above as parameter names yourself as these would be overridden with the values we populate. The redirect for 3D Secure verification can also take place within an IFRAME, allowing your customer to remain on your website during the process. To perform verification within an IFRAME: Set the to a static holding page when creating a 3D Secure source Create an IFRAME from the using JavaScript Start client-side polling of the source to determine updates to its status Once the source’s status transitions to , close the IFRAME Continue polling the source and display a payment confirmation message once the source’s status transitions to Although still needs to be set when creating a 3D Secure source, your customer is not redirected away from your site once verification is completed—the IFRAME is simply closed instead. The static page should contain a message informing the customer that the verification process is complete and that the window will close shortly. Certain banks support 3D Secure verification within a natively installed banking app. If you are integrating 3D Secure within a mobile application and your customers are redirected, you can use your application URI scheme when providing a value for so that your customers are returned to your app after they have completed authentication. If the customer’s card is enrolled in 3D Secure but the issuing bank determines the risk of fraud is low, your customer may not be have to complete verification during the redirect. In that case, the source’s attribute is set to .

Confirm that the source is ready to use Once the customer has authenticated the payment, the source’s transitions to and it can be used to make a charge request. You can determine whether authentication was successful using client-side source polling with Stripe.js. You can use Stripe.js to poll the object, client-side. The JavaScript handler is called as soon as the object is retrieved, client-side, and every time its status is updated. In particular, it is called when the status changes from to either or , and from to once your server makes the associated charge request. Stripe.source.poll( "src_16xhynE8WzK49JbAs9M21jaR", "src_client_secret_UfwvW2WHpZ0s3QEn9g5x7waU", function(status, source) { // `source`: is the source object. // `status`: is the HTTP status. if non 200, an error occured // and the poll is canceled. // This handler is called as soon as the source is retrieved and subsequently // anytime the source's status (`source.status`) is updated. }) The following webhook events are also sent to notify you about changes to the source’s status, and supplement your use of client-side polling: A object becomes after a customer has authenticated and verified a payment. A object expired and cannot be used to create a charge. A object that was single-use has already been charged. A object failed to become chargeable as your customer declined or failed to authenticate the payment. In some rare instances, customers may assume that the order process is complete once they have completed the 3D Secure authentication flow. This can result in the customers closing their browser instead of completing the redirection back to your app or website. When accepting 3D Secure card-based payments, use the event to confirm when a source is chargeable, even if you make use of client-side polling. This allows you to confirm that the customer has verified their identity and the source is can be used in a charge request, even if they have closed their browser. A source must be used within six hours of becoming . If it is not, its status is automatically transitioned to and your integration receives a webhook event. As card payments are a pull-based payment method, there is no movement of funds during the creation of a source. Only when a successful charge request has been made is the customer’s card debited and you receive the funds.

Confirm that the charge has succeeded and the payment is complete Since 3D Secure-based card payments is a synchronous payment method, the object’s status immediately reflects whether or not it has been successful. Either of the following events are sent when the charge’s status is updated: The charge succeeded and the payment is complete. The charge has failed and the payment could not be completed. After confirming that the charge has succeeded, notify your customer that the payment process has been completed and their order is confirmed. Card networks provide a process for cardholders to dispute payments made with their card. A dispute can be filed by the cardholder any time after a payment has been successful. When accepting 3D Secure-based card payments, the customer’s bank is liable if any payment is disputed as fraudulent or unrecognized. These types of disputes are handled internally, do not appear in the Dashboard, and do not result in funds being withdrawn from your Stripe account. Should a customer dispute a payment for any other reason (e.g. product not received), then the standard dispute process applies. As such, you should make the appropriate decisions regarding your business and how you manage disputes, if they occur, and how to avoid them completely.

Once the 3D Secure source has been used to make a successful payment, you can save the original card source to a new Customer object. # Set your secret key: remember to change this to your live secret key in production # See your keys here: https://dashboard.stripe.com/account/apikeys Stripe.api_key = "sk_test_BQokikJOvBiI2HlWgH4olfQ2" customer = Stripe::Customer.create({ source: 'src_18eYalAHEMiOZZp1l9ZTjSU0', }) # Set your secret key: remember to change this to your live secret key in production # See your keys here: https://dashboard.stripe.com/account/apikeys stripe.api_key = "sk_test_BQokikJOvBiI2HlWgH4olfQ2" customer = stripe.Customer.create( source='src_18eYalAHEMiOZZp1l9ZTjSU0', ) // Set your secret key: remember to change this to your live secret key in production // See your keys here: https://dashboard.stripe.com/account/apikeys \Stripe\Stripe::setApiKey("sk_test_BQokikJOvBiI2HlWgH4olfQ2"); $customer = \Stripe\Customer::create(array( "source" => "src_18eYalAHEMiOZZp1l9ZTjSU0", )); // Set your secret key: remember to change this to your live secret key in production // See your keys here: https://dashboard.stripe.com/account/apikeys Stripe.apiKey = "sk_test_BQokikJOvBiI2HlWgH4olfQ2"; Map<String, Object> customerParams = new HashMap<String, Object>(); customerParams.put("source", "src_18eYalAHEMiOZZp1l9ZTjSU0"); Customer customer = Customer.create(customerParams); // Set your secret key: remember to change this to your live secret key in production // See your keys here: https://dashboard.stripe.com/account/apikeys var stripe = require("stripe")("sk_test_BQokikJOvBiI2HlWgH4olfQ2"); stripe.customers.create({ source: "src_18eYalAHEMiOZZp1l9ZTjSU0", }, function(err, customer) { // asynchronously called }); The ID of the card source can be retrieved from the 3D Secure source as the value of the attribute. Since the 3D Secure process has already taken place, you can create additional payments using the customer as normal. # Set your secret key: remember to change this to your live secret key in production # See your keys here: https://dashboard.stripe.com/account/apikeys Stripe.api_key = "sk_test_BQokikJOvBiI2HlWgH4olfQ2" charge = Stripe::Charge.create({ amount: 1099, currency: 'eur', customer: 'cus_VWaMywLC4keKS6', }) # Set your secret key: remember to change this to your live secret key in production # See your keys here: https://dashboard.stripe.com/account/apikeys stripe.api_key = "sk_test_BQokikJOvBiI2HlWgH4olfQ2" charge = stripe.Charge.create( amount=1099, currency='eur', customer='cus_VWaMywLC4keKS6', ) // Set your secret key: remember to change this to your live secret key in production // See your keys here: https://dashboard.stripe.com/account/apikeys \Stripe\Stripe::setApiKey("sk_test_BQokikJOvBiI2HlWgH4olfQ2"); $charge = \Stripe\Charge::create(array( "amount" => 1099, "currency" => "eur", "customer" => "cus_VWaMywLC4keKS6", )); // Set your secret key: remember to change this to your live secret key in production // See your keys here: https://dashboard.stripe.com/account/apikeys Stripe.apiKey = "sk_test_BQokikJOvBiI2HlWgH4olfQ2"; Map<String, Object> chargeParams = new HashMap<String, Object>(); chargeParams.put("amount", 1099); chargeParams.put("currency", "eur"); chargeParams.put("customer", "cus_VWaMywLC4keKS6"); Charge charge = Charge.create(chargeParams); // Set your secret key: remember to change this to your live secret key in production // See your keys here: https://dashboard.stripe.com/account/apikeys var stripe = require("stripe")("sk_test_BQokikJOvBiI2HlWgH4olfQ2"); stripe.charges.create({ amount: 1099, currency: "eur", customer: "cus_VWaMywLC4keKS6", }, function(err, charge) { // asynchronously called }); As the 3D Secure process isn’t performed when using saved card information to make a charge request, future payments are not protected by 3D Secure’s liability shift. If you wish to make use of 3D Secure-enabled cards for subscription payments, there are some additional steps you can take to ensure they are handled correctly.

Not all cards support 3D Secure or require the customer be redirected to their bank authentication page. Use the following card information to fully test 3D Secure payments. 3D Secure is supported but not required on this card. The value of the card source's attribute is . Charges succeed whether 3D Secure is used or not. 3D Secure is supported and required on this card. The value of the card source's attribute is . 3D Secure must be completed for a charge to be successful. 3D Secure is not supported or required on this card. The value of the card source's attribute is . Proceed with a regular card payment instead. All other Visa and Mastercard test cards do not require verification from the customer's bank. The 3D Secure Source status is immediately set to upon source creation. When creating a object using your test API keys, you can follow the URL returned in the field. This leads to a Stripe page that displays information about the API request, and where you can either authorize or cancel the payment. Authorizing the payment redirects you to the URL specified in . Clicking on the Failure button results in the 3D Secure source status to transitioning to .|||

Stripe is a suite of APIs that powers commerce for businesses of all sizes.