Understanding Flexbox: Everything you need to know

I’ll first walk you through the basics of Flexbox. I believe any attempt at understanding Flexbox must begin here.

Flexbox is certainly something you should take seriously. It paves the way for the modern style of laying out content, and it’s not going away anytime soon. It has emerged as a new standard. So with outstretched arms, embrace it!

Learning Flexbox may not be fun at first. It will challenge what you know about layouts in CSS. But that’s fine. Everything worth learning begins that way.

Here’s a tweet from Philip Roberts, a developer whom I respect very much:

If you prefer to read the entire tutorial in a single .pdf document, here’s the download link  — no strings attached, & if you want a more immersive experience, use the interactive course  — it is free. No strings attached.

This article will cover all the fundamental concepts you need to get good with the CSS Flexbox model. It’s a long one, so I hope you’re ready for it.

I’ll walk you through building a lot of “small things.” Afterwards, I’ll wrap things up with this music app completely laid out with Flexbox.

Learning the fundamentals is cool. What’s even cooler is applying these fundamentals to build real-world apps.

I’ll get into the inner workings of Flexbox while you learn to build the music app layout. You’ll also get a feel for the role Flexbox plays in responsive web design, too.

I’m excited to show you all this.

But before you get started building user interfaces, I’m going to walk you through some drills, first. This may seem boring, but it’s all part of the process of getting you adept at Flexbox.

CSS has evolved a lot over the past few years. Designers loved the introduction of filters, transitions, and transforms. But something was missing. Something we all craved.

Crafting Intelligent page layouts with CSS seemed to have persisted for too long, and this got many of us writing hacky CSS.

We always had to deal with floats, table display hacks, and the consequences they brought. If you’ve written CSS for sometime, you can probably relate to this. And if not, welcome to a better world!

It seems like our prayers as designers and front-end developers have finally been heard. This time, in grand style.

Now we can all ditch those hacky CSS tricks. No more incessant use of floats, table-cell displays.

It’s time to embrace a cleaner modern syntax for crafting intelligent layouts. Welcome the CSS Flexbox model.

According to the specification, the Flexbox model provides for an efficient way to layout, align, and distribute space among elements within your document — even when the viewport and the size of your elements is dynamic or unknown.

If that sounds too formal, I understand the feeling. In just a bit, I’ll explain what that means in plain English.

Whether you write CSS in your dreams, or you’re just getting started, you’ll feel right at home.

This is the first question everyone asks, and the answer is much simpler than you may have expected.

To start using the Flexbox model, all you need to do is first define a flex-container.

In regular HTML, laying out a simple list of items takes this form:

If you glanced at that, you must have seen that the unordered list ( ) houses the list elements( ).

You’d call the the parent element, and the the child element.

To use the Flexbox model, you must make a parent element a flex container (AKA flexible container).

You do this by setting or for the inline variation. It's that simple, and from there you're all set to use the Flexbox model.

What actually happens is, a Flexbox formatting context is immediately initiated.

Told you it wasn't as difficult as you expected.

Using an unordered list and a bunch of list elements, below is what initiating a Flexbox formatting context looks like.

Style the list items just a bit, so you may see what’s going on here.

Here is what you should have:

You may not have noticed, but something has happened already. The Flexbox formatting context is now initiated.

Remember that ‘li’ elements are by nature block elements, which means they stack vertically, and this applies for other CSS block elements, such as ‘div’.

The image above is the result you may have hoped for.

However, with the inclusion of that simple one-liner, , you can immediately see a change in layout.

The list elements are now stacked horizontally, from left to right. Just like they would if you used float.

The Flexbox model kicks in as soon as you introduce the “flex display” on any parent element.

You may not understand why that change in the orientation of the list elements came to be. I promise I’ll go into the inner workings of that very soon. For now, blind trust would suffice.

Understanding that the inclusion of the “flex display” starts off the Flexbox model.

There’s one more thing I need to call your attention to.

As soon as you set the display property to flex, the unordered list automatically becomes the flex container and the child elements (in this case, the list elements ) become flex items.

These terms would come up over and over again as I walk you through some more interesting things the Flexbox model has in place.

I’ve used two key words, and I’d like to lay more emphasis on them. They are vital to understanding what lies ahead.

This is the foundation for using the Flexbox model.

In the section above, I established some fundamental principles. What flex-containers and flex-items are, and how to initiate the Flexbox model.

Now is a good time to put all of that to good use.

Having set a parent element as a flex container, a couple of alignment properties are made available to be used on the flex container.

Just like you’d define the width property on a block element as , there are 6 different properties the flex container can take on.

The good news is that defining these properties doesn’t require a different approach from what you’re already used to.

The property controls the direction in which the flex-items are laid along the main axis.

It may take any of four values.

In layman’s terms, the property let's you decide how the flex items are laid out. Either horizontally, vertically or reversed in both directions.

Technically, “horizontal” and “vertical” isn't what the directions are called in the "flex world".

These are described as main-axis and cross axis. The defaults are shown below.

In layman’s terms again, the main-axis’ default direction feels like “horizontal.” From left to right.

The cross-axis feels like “vertical.” From top to bottom.

By default, the property is set to and it aligns the flex-item(s) along the main axis. This explains what happened with the unordered list at the start of this article.

Even though the property wasn't explicitly set, it took on the default value of

The flex items were then laid across the main-axis, stacking horizontally from left to right.

If the property is changed to the flex-items will be aligned along the cross axis.

They would stack from top to bottom, not from left to right any longer.

The flex-wrap property can take on any of three values:

I’ll explain how the property works by walking you through an example.

Try sticking a lot more list items into the unordered list.

What do you think? Will the flex container resize to accommodate more, or will it break up the list items unto another line?

Fortunately, the flex-container adapts to accommodate the new flex-items

Add a ridiculous amount of flex-items to the parent element. Make it a total of 10 items.

Again, the flex container adapts to fit all children in, even if the browser needs to be scrolled horizontally.

This is the default behavior of every flex container. A flex container will keep on accommodating more flex items on a single line.

This is because the property defaults to . This causes the flex container to NOT wrap.

The isn’t a iron-clad value. It can be changed.

With that number of flex-items, you certainly want the flex-items to “wrap” within the flex-container.

“Wrap” is a fancy word to say, “when the available space within the flex-container can no longer house the flex-items in their default widths, break unto multiple lines.

This is possible with the value.

With this, the flex-items now break up into multiple lines when needed.

In this case, when a single line can no longer contain all the list items in their default width, they break up into multiple lines. Even on resizing the browser.

Here’s what that looks like.

Note that the flex items are now displayed in their default widths. There’s no need to force multiple flex items unto one line.

There’s one more value, .

Yes, you guessed right. It lets the flex items break unto multiple lines, but in the reverse direction.

The is a shorthand property which takes and values.

Ever used the shorthand property? .

It's the same concept here. Multiple values declared in one line.

See the example below.

Try out the other combinations this could take. , ,

The results produced are not different from what you’ve seen with the and values.

I'm sure you understand what those would produce.

Life’s really good with the Flexbox model. If you still doubt that, the property may convince you.

The property takes on any of the 5 values below.

And what exactly does the property bring to the table?

Well, It may remind you of the text-align property.

The justify content property defines how flex items are laid out on the main axis.

Consider the simple unordered list below.

You should have this:

With the , the three flex-items may be aligned across the main-axis in whatever way you desire.

Here's the breakdown of what's possible.

The default value is .

groups all flex-items to the start of the main axis.

groups the flex-items to the end of the main axis.

does just what you'd expect: it centers the flex items along the main axis.

keeps the same space between each flex item.

Um, did you notice anything different here?

Take a look at the descriptive image below.

Finally, keeps the same spacing around flex items.

See the descriptive image below.

Don’t worry if these seem like too much to get a hold of. With a bit of practice you will get very comfortable with the syntax.

Be sure to understand how they affect the display of flex items along the main axis.

The property is somewhat similar to the property.

Having understood the property, this should be easier to take in.

can be set to any of these values:

It defines how flex-items are laid out on the cross axis. This is the difference between the property and .

Below is how the different values affect flex items.

Do not forget the direction being affected by these properties. The cross-axis.

The default value is This will “stretch” the flex-items so they fill the entire height of the flex container.

The does what you expect. It groups the flex items to the start of the cross-axis.

As expected, groups the flex items to the end of the cross-axis.

The value is equally predictable. It aligns the flex items to the center of the flex-container.

And the baseline value?

It aligns flex-items along their baselines.

The result appears to look just like but it is subtly different.

What the heck is “baseline”?

The image below should help.

Notice how all the flex-items are aligned to have their content seat on the “baseline”?

While discussing the property, do you remember what happened when you added more flex-items to the flex-container?

The property is used on multi-line flex-containers.

It takes the same values as apart from .

By definition, it controls how the flex-items are aligned in a multi-line flex container.

Just like , the default value is also

These are values you should now be familiar with. So, here’s how they affect a multi-line flex-container with 10 flex-items.

With , the flex items are “stretched” to fit the available space along the cross-axis.

The spacing you see between the flex items below is owing to the set on the items.

You’ve seen the value before.

This time it aligns the items in the multi-line container to the start of the cross-axis.

Remember the default cross axis is from top-to-down.

Thus, the flex items are aligned to the top of the flex container.

The value aligns the flex items to the end of the cross-axis.

Like you may have guessed, aligns the flex-items to the center of the cross-axis.

That’s the last of the flex-container properties.

You now understand how to use the various flex-container properties.

You’ll use these to work through the practical sections coming up.

In the previous section, I explained flex-containers and their alignment properties.

Sure you’re getting a feel of what lies ahead.

I’d take my focus off flex-containers now, and walk you through flex-items and their alignment properties.

Like flex-containers, a couple alignment properties are also made available on all flex-items, too.

Let me walk you through them.

The order property allows for reordering the flex items within a container.

Basically, with the order property you can move a flex-item from one position to another. Just like you would do with “sortable” lists.

This is done without affecting the source code. Which means the position of the flex items in the HTML source code isn’t changed.

The default value for the order property is 0. It may take on either negative or positive values.

It’s worth noting that flex items are re-ordered based on the number values of the order property. From lowest to highest.

An example always does the trick. Consider the unordered list below:

By default, the flex items all have an value of .

Just as you expected, you get this (see below) after some basic styling.

The Flex items are displayed just as specified in the HTML source order. Flex item 1, then 2, 3, and 4.

What if for some reason you wanted the flex-item 1 to appear last? Without changing the source order in the HTML document?

“Without changing the source order” means you do not get to do this:

Now that’s where the property comes in.

All you need to do is make the value of flex-item 1 higher than that of other list items.

If you ever used the property on block elements, you'd be familiar with this sort of thing.

The flex items are then re-ordered from lowest to highest.

Do not forget that by default, list-items 2, 3, and 4 all have the order value of 0.

Now, flex-item 1 has an order value of 1.

Flex-items 2, 3, and 4 all have an order value of 0. So, the HTML source order is kept — no modifications made to the default display.

What if you gave flex-item 2 an order value of 2?

Yes, you guessed right. It goes up the stack too. It now represents the flex-item with the highest value.

And what happens when two flex items have the same order value?

In the example below, flex-item 1 and 3 are given the same values

The items are still arranged from lowest to highest order value.

This time, flex-item 3 appears last because it comes after flex-item 1 in the source file (HTML document).

The re-ordering is based on the positions in the source file, when two or more flex items have the same order value.

That was a lot of explanation.

I’d move on to some other property.

The beauty of flex items is being “flexible.”

The and properties allow us play around this “flexibility” even more.

The and properties control how much a flex-item should “grow” (extend) if there are extra spaces, or “shrink” if there are no extra spaces.

They may take up any values ranging from 0 to any positive number.

Let me demystify that.

Consider the simple unordered list below. It comprises just one list item.

With a bit more styling, it appears like this.

By default, the property is set to . By implication, the flex-item does NOT grow to fit the entire space available.

The value is like a “turn-off” switch. The switch is turned off.

However, if you changed the value to , here's what happens.

The flex-item now “grows” to occupy all the available space. The switch is turned on!

If you tried resizing your browser, the flex-item would also “shrink” to accommodate the new screen width.

Why? By default, the property is set to 1. Which means the switch is also turned on!

I’ll take a closer look at the and properties in a bit in case you still don't feel confident with your understanding of this.

Remember how I said the beauty of the flex-items is being “flexible”? Well, it appears you also have a control over that.

The property specifies the initial size of a flex-item. Before the or properties adjust it's size to fit the container or not.

The previous statement is really important- so i’m taking a moment to reinforce that.

The default value is . can take on any values you'd use on the normal width property. That is, etc

Note that when trying to set the basis property to a zero based value, use the unit also. Use not just

I’d bring back the “one list” example here again.

By default, the initial width of the flex item is influenced by the default value, .

The width of the flex-item is computed "automatically" based on the content size (and obviously, plus whatever padding you set too).

This means if you increased the content in the flex-item, it automatically resizes to fit.

If, however, you want to set the flex-item to a fixed width, you can also do this:

Now the flex-item has been constrained to a width of 150px.

It’s getting even more interesting.

The shorthand allows you set the , and properties all at once.

When appropriate, I advice you set all three properties at once using the flex shorthand than doing so individually.

The code above is equal to setting the three properties:

first, then , and then . The acronym, GSB may help.

What happens if you fail to set one of the values in the flex-shorthand?

If you set only the and values, would default to zero.

This is called an absolute flex. And when you set only the , you get a relative flex.

I know what you’re thinking. What’s the purpose of the relative and absolute flex?

I answer that question later in this article. Again, blind trust will suffice for now.

Let’s take a look at some very useful flex shorthand values.

This is same as writing and it's the default behavior of all flex items.

Let me break this down, just a bit.

It’s easier to understand this by taking a look at the property first.

The is set to , which means the initial width of the flex-item will be automatically determined based on the size of the contents.

Moving on to the next property, the value is zero. This means the property wouldn't tamper with the initial width of the flex item.

The grow switch is off.

Since flex-grow controls the “growth” of the flex-items and it’s set to zero, the flex-items will not “grow” to fit the screen.

Finally, the flex shrink value is 1. It says this — “shrink the flex-item when it is necessary”

Here is what this looks like when applied to some flex items.

Notice how the flex items don’t grow. The width is computed automatically, and they shrink upon resizing the browser — if necessary.

This is same as .

Using the same framework I established earlier, the width is computed automatically BUT the flex item does NOT grow or shrink (they are both set to zero).

The grow and shrink switches are both off.

It’s essentially a fixed width element whose initial width is based off of the content size in the flex item.

See how this flex shorthand affects two flex items. One housing more content than the other.

The first thing you should notice is, the flex items both have different widths.

That is expected since the widths are computed automatically, based on the content size.

Try resizing your browser, and you’ll notice that the flex items don’t shrink with its width. They pop out of the parent element, and you have to scroll your browser horizontally to view all the content.

No worries, I’ll show you how to deal with this weird behavior later.

This is same as .

This says, "compute initial width automatically, but grow to fit the entire available space and shrink if necessary"

The grow and shrink switches are turned on, and the widths computed automatically.

This time around, the items fill up the available space and they shrink upon resizing the browser too.

Where “positive number” represents any positive number (without the quotes)

This is the same as .

is the same as writing 2 represents any positive number.

Following the same framework I established earlier, this says, “set the initial width of the flex item to zero (ehm, no width?), grow the item to fill the available space, and finally shrink the item whenever possible”

With the flex items having “no width”, how’s the width computed?

The value takes over, and determines the extent the flex item “widens”.

That takes care of the no-width problem.

It’s more practical to use this flex shorthand when you have more than one flex item whose initial widths, are set to any zero based values e.g. 0px

What really happens is, the widths of the flex items are computed based on the ratios of the value.

I’d break that down just a bit.

Consider two list items marked up and styled below.

Remember that setting lets the flex-item fill up the available space. The grow switch is turned on.

Here you have two flex-items. One has a property of and the other , what then happens?

You have the grow switches turned on for both items. However, the magnitude of growth differs. 1 and 2.

They both expand to fill up the available space, but in some proportion.

The latter takes up 2/3 of the available space while the former takes 1/3.

You know how I arrived at that?

Even though both flex-items have contents of the same size (approximately), they however take up different spaces.

The widths are not based on the content size, but the grow values.

One is about two times the other.

The property takes a step further in giving us so much control over flex items.

You already saw how the property helps in collectively aligning all flex-items within a flex-container.

What if you wanted to change the position of a single flex-item along the cross-axis, without affecting the neighboring flex-items?

This is where the property comes to the rescue.

It may take on any of these values:

These are values you’re already familiar with, but as a refresher here’s how they affect a particular targeted item.

In this case, the first item within the container.

The targeted flex-item is in red.

aligns the targeted item to the end of the cross axis.

aligns the targeted item to the center of the cross axis.

“stretches” the targeted flex item to fill up the available space along the cross axis.

aligns the targeted flex item along the baseline.

It does look like the same result as but I’m sure you understand what the baseline is.

sets the value of the targeted flex item to the parent’s value or if the element has no parent.

In the case below, the flex-container has an value of

This aligns all the flex-items to the start of the cross-axis.

The targeted flex-item now inherits the value — the parent’s value.

This is the base styling on the flex-items used above. Just so you understand what’s going on even better.

You’re pretty much getting ready for the fun part now :-)

Having covered some ground in previous sections, it’s important to clarify a few important concepts here too.

What really is the difference between an absolute and relative flex-item?

The major difference between these two is got to do with spacing and how they are computed.

The spacing within a relative flex item is computed based on it’s content size. In an absolute flex item, it is based solely on “flex”, not content.

Consider the markup below.

Two list elements. One has far more texts than the other.

If you already forgot, is the same as setting: and

Using the framework I established earlier, the initial widths of the flex-items are automatically computed , and then they "grow" to fit the available space .

When flex-items have their widths computed automatically, , it is based on the size of the content contained within the flex-items.

The flex-items in the example above do NOT have contents of the same size. Hence, the sizes of the flex-items would be unequal.

Since the individual widths weren’t equal in the first place (it was based off content), when the items grow, the widths also stay unequal.

The flex-items in the example above are relative flex-items.

Let’s make the flex-items absolute — meaning this time their widths should be based on “flex” NOT content size.

See the result below.

Do you see both flex-items have the same widths this time?

The initial widths of the flex-items is zero , and then they “grow” to fit the available space.

When there are two or more flex-items with zero based values, they share the spacing available based on the values.

Now the widths aren’t computed based on content size. The widths are based on the flex value specified.

So you got that. Right?

Absolute flex-items have their widths based solely on flex, while relative flex items have their widths based on content size.

When you use on flex-items, things can look quite weird.

You do need to understand what's going on. It may result in unexpected results, but I'm going to explain all that.

When you use on a flex-item, the direction (left, right or both) that has the value will take up any empty spaces available.

Consider the navigation bar marked up and styled below:

See the result of that below.

There are a couple of things to note here:

Now use on the first list item (branding) and see what happens.

The extra space that existed has now been distributed to the right of the first flex-item.

Do you remember what I said earlier?

When you use on a flex-item, the direction (left, right or both) that has the value will take up any empty spaces available.

What if you wanted an auto margin alignment on both sides of a flex-item?

Now the space is distributed across both sides of the flex-item.

So, is there a trade off with the cool auto-margin alignment?

It appears there’s one. It can be a source of frustration if you don’t pay attention too.

When you use the auto-margin alignment on a flex-item, the property no longer works.

For instance, setting a different alignment option on the flex-container above via the property, has no impact on the layout.

Navigation systems are a very big part of every website or application. Every website on the planet has got some sort of navigation system in place.

Take a look at these popular sites and how they approach their navigation systems.

Do you see how Flexbox can help you build these layouts more efficiently?

Take a closer look to see where the auto-margin feature may come in very handy too.|||

This article will cover all the fundamental concepts you need to get good with the CSS Flexbox model. It’s a long one, so I hope you’re ready for it. If you prefer to read the entire tutorial in a…