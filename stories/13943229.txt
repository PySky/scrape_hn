Nous sommes en 2017 et la percée de React dans l’industrie du Web ne fait plus aucun doute. Lorsque Facebook a présenté sa librairie de gestion et de manipulation d’interface, il a surtout présenté un nouveau paradigme. Là où la plupart des autres outils du marché (AngularJS ou Ember par exemple) ont visiblement cherchés à optimiser le travail du développeur et la production des applications en s’approchant d’une conception type ‘Web Components’, React s’est avant tout tourné vers la performance en prenant en compte les lacunes de nos navigateurs. Et la première d’entre elle, aussi paradoxale soit-elle, est le rendu et la manipulation de l’arbre DOM en page web. Pour compenser cette faiblesse, les développeurs de React ont intégré ce que l’on nomme un DOM virtuel.

Ce DOM Virtuel est une version miroir du DOM réel, placé en mémoire, et sur lequel ont effectuera nos manipulations avant de les envoyer vers le navigateur. C’est un élément de la Bibliothèque React dont on entend régulièrement parler, sans pour autant expliquer comment il est mis en place. Je vous propose donc de voir ça d’un peu plus près en créant notre propre DOM virtuel.

Les API DOM (implémentées par Netscape et Microsoft en 1997) sont, dès leurs origines, accessible via JavaScript ou ses équivalents (comme le JScript des anciens navigateurs de Microsoft). Mais leur standardisation par le W3C et l’application de ce standard mettra un peu de temps à être appliqué, notamment sur Internet Explorer qui domine alors le marché.

Dans cette première étape, on utilise les API natives de JavaScript pour accéder au DOM de la page : On cible des éléments avec ‘document.getElementById(id)’ puis on y accède et les modifie avec ‘element.innerHTML’.

En effet ‘innerHTML’ ne prend pas en entrée des éléments DOM mais du code HTML sous forme de chaine de caractères. Ce code HTML doit être convertit avant de pouvoir être intégré à l’arbre DOM de la page et c’est justement ce que fait ‘innerHTML’. Mais ici, on le fait directement lors de l’intégration. De plus, le code HTML fournit n’est pas manipulable, autrement qu’en chaine de caractère, avant cette conversion : si on a besoin de lire une donnée de ce code HTML, on devra soit ‘parser’ la chaine de caractère (ce qui est loin d’être confortable), soit relire directement ce qui a été ajouté dans le DOM de la page Web… C’est ici que la mise en place d’un DOM Virtuel prend tout son sens…|||

De même que Tim Berners Lee n’avait probablement pas imaginé que le World Wide Web évoluerait d’une plateforme de partage documentaire vers une distribution d’applications décentralisées, lorsque…