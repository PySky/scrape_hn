Migrat is a pluggable Node.js migration tool designed for diverse stacks and processes. It is not tied any particular database engine and supports multi-node environments by differentiating migrations that should run on one node (to update a global database, for instance) and migrations that should run on all nodes (like updating a per-node cache).

Migrat works great on its own, but it's even better with plugins to reduce boilerplate. Plugin list (the ones without links haven't been developed yet â€“ help welcome (see the "Writing Plugins" guide):

With plugins, you can have a migration directory that looks like:

$ migrat init set up a migrat project in the current directory $ migrat up --dry-run show which migrations need to be run $ migrat up [filename] get up to date (only forward) $ migrat down filename

Migrat will look for for a in your project directory, unless overriden by :

. { REQUIRED. The folder to store migration scripts in. migrationsDir , REQUIRED. Where the current migration state specific to the current machine is to be stored. This is only used to for migrations created with the `--all-nodes` flag. Make sure it is writable by the user executing migrat and isn't wiped localState , OPTIONAL. Invoked at the beginning of a run, this method should return an object with any details you want passed through to all migrations. This can be database connections, ( ) { ( , {}); }, argument will always be a variable-length string. Store it to redis, disk, database, ... whatever suits you. ( , ) { (); }, REQUIRED. This method is responsible for fetching the ( ) { ( , state); }, OPTIONAL. Provide a function that returns a string to use as the source for a new migration file. The `details` argument will be an object containing: * "filename" The name of migration file. * "timestamp" The Date object used to put the timestamp at the beginning of the migration filename. ( , ) { . ( , , callback); }, OPTIONAL. Invoked at the beginning of a migration run. Use this to establish a global lock. You can either wait for a lock to become available, or fail. ( ) { (); }, OPTIONAL (unless `lock` is implemented). Implement this to release any global lock acquired by the `lock` function. ( ) { (); }, OPTIONAL. The number of milliseconds to give up after if a lock cannot be obtained or released. This is only applicable if the `lock` function is implemented. lockTimeout , OPTIONAL. Invoked at the very beginning of a run before any locks are acquired or state is read. Use this to ( ) { (); }, OPTIONAL. Callback executed right before all ( , ) { (); }, ( , ) { (); }, ( , , ) { (); }, OPTIONAL. Callback executed right after all ( , , ) { (); }, OPTIONAL. Invoked at the very tail end of a run once locks are released and state has been stored. Use this to tear down any connections established in `initialize`. ( ) { (); } };

Before submitting pull requests, please update the tests and make sure they all pass.

Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.|||

A pluggable Node.js data migration tool.