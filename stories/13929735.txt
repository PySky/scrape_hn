Do You Really Want To Be Doing This at 50?

"But large scale, high stress coding? I may have to admit that's a young man's game."

No, it's a stupid person's game (sure it's mostly men, but not 100%). I'm 55 and have been coding professionally since 1981 and started in school in 1973 or so. One thing I've learned for sure is that coding yourself to death is not worth it in the end.

My recent post Why I Don't Do Unpaid Overtime and Neither Should You remains my most popular post every week since it appeared. Seems I am not the only one who has figured out that deathcoding is a waste of life. I won't repeat what I said there.

To the question of still doing this at 55, in my case, the answer is yes. I still enjoy the challenges, managing complex problems and finding good solutions. Every morning I read a number of websites devoted to technology and programming to see what is new. I figure the day I don't care about new things is the day I give up being a programmer. My morning ritual has not changed since I started my first programming job, except in those days it was magazines, catalogs and books plus the occasional conference.

I remember a job I had at that first company (General Dynamics) where I was trained to support the new IBM PC's we were getting. This wasn't my only task but it was something new so no one knew what might be needed so I read everything I could get my hands on including the entire body of IBM's product literature. Soon the IBM reps were coming to me to find out how to configure and combine various products together. I didn't have to learn all this stuff but it seemed a useful body of knowledge. Today I still learn stuff because it is interesting even if the need seems unlikely.

If you aren't curious about the world of programming and other related technology areas then your programming career isn't going to last. Most of the people I knew who got Computer Science degrees when I was in college no longer program anything; they lost interest, or stopped learning and eventually got run over by the new technology steamroller. My degree (and a half) was in Chemistry of all things.

Through the years I've morphed so many times I may as well be in a Wolfman movie (which was my nickname in high school).

The thing I find most important today is that you should never work longer, just smarter. Being older does mean you can't code 20 hours a day anymore, or rather imagine you can code 20 hours a day as it's not really good coding. Is there a real limit to how many hours a day you can actually be producing a quality application? Probably it does go down over time but as long as you continue to learn how to code smarter the end result is still quality, just with less caffeine.

The biggest difference between today and when I started is the sheer variety of choices of languages, tools, platforms, methodologies and in general options that one can choose from (or have chosen for you). It's impossible for anyone to know everything anymore, even about a narrow area like I was able to do with my IBM PC knowledge. What matters more is the ability to choose wisely among the many options. One of my favorite movie lines is from Indiana Jones and the Holy Grail, where the bad guy melts down and the old knight says "He chose poorly". So much glittery stuff to pick from but only some is actually usable.

Having experience sometimes gives you the upper hand in knowing when to go and when to slow. Then again being young lets you look at something new and not worry about failure. There is benefit to both points of view, I think of the young Steve Jobs who had all the right ideas but couldn't make them work and the older Steve Jobs who could take the ideas and make them amazing. The point is not that either age is by itself a benefit but that you keep some of the curiosity and vision of youth and combine it with experience and a longer viewpoint when being older so you never become obsolete.

If you want to be a programmer at 55 still you can't ever lose the hunger to know more, know better and know simpler. Once you lose that edge the technology steamroller keeps on coming closer and closer until you wind up flat doing something else for a living.

I never considered when I was 24 and in my first professional programming job what being 55 was going to be like, but I already knew what I had to do to keep relevant and always a step ahead.

Will programming still exist in 31 more years? A good question. Will I still be programming at 86? Probably not but if it's still possible and I still care, maybe. By then I should be so smart I can do a whole day's work in 30 minutes.

Either that or I will tell my robot friend to do it for me and get back to my nap!|||

The Codist - programming blog