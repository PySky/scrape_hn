Angular version 4.0.0 - invisible-makeover - is now available. This is a major release following our , and is backwards compatible with 2.x.x for most applications.

We are very excited to share this release with the community, as it includes some major improvements and functionality that we have been working on for the past 3 months. We’ve worked hard to make sure that it’s easy for developers to update to this release.

In this release we deliver on our promise to make Angular applications smaller and faster. By no means are we done yet, and you'll see us being focused on making further improvements in the coming months.

We’ve made changes under to hood to what AOT generated code looks like. These changes reduce the size of the generated code for your components by around 60%  in most cases. The more complex your templates are, the higher the savings.

During our release candidate period, we heard from many developers that migrating to 4 reduced their production bundles by hundreds of kilobytes.

We have pulled animations out of and into their own package. This means that if you don’t use animations, this extra code will not end up in your production bundles.

This change also allows you to more easily find documentation and to take better advantage of autocompletion. You can add animations yourself to your main NgModule by importing

Our template binding syntax now supports a couple helpful changes. You can now use an if/else style syntax, and assign local variables such as when unrolling an observable.

"let user of users; count as count; index as i"

Universal, the project that allows developers to run Angular on a server, is now up to date with Angular again, and this is the first release since Universal, originally a community-driven project, was adopted by the Angular team. This release now includes the results of the internal and external work from the Universal team over the last few months. The majority of the Universal code is now located in

We’ve updated Angular to a more recent version of TypeScript. This will improve the speed of and you will get better type checking throughout your application.

Now when there is an error caused by something in one of your templates, we generate source maps that give a meaningful context in terms of the original template.

All of our code now has Closure annotations, making it possible to take advantage of advanced Closure optimizations, resulting in smaller bundle sizes and better tree shaking.

Updating to 4 is as easy as updating your Angular dependencies to the latest version, and double checking if you want animations. This will work for most use cases.

command you normally use, and everything should work.

If you rely on Animations, import the new in your root NgModule. Without this, your code will compile and run, but animations will trigger an error. Imports from were deprecated, use imports from the new package

One of the goals for version 4 was to make Angular compatible with TypeScript's setting, allowing for a more restrictive subset of types to be mandated. We discovered during the RC period that there is more work to be done for this to function properly in all use cases, so we intentionally made 4.0 incompatible with the strictNullChecks setting in order to  avoid breaking apps that would otherwise eagerly adopt this TypeScript mode when the proper support lands in 4.1 (tracking issue is

You should also stay tuned for updates to our documentation, a stable release of the CLI, and guidance for library authors on packaging.|||

