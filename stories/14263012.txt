Create-React-App is taking the react community by storm, and as usual, I’m completely obsessed with Redux, and how it’s transformed the way I build my apps. So what’s new?

Well, over the last few days, I’ve been playing with the underlying state manager from Jumpsuit.

Jumpsuit is much like create-react-app in that it helps you go from zero to productivity in a few seconds with only one dependency. The added bonus: a paper-thin API that abstracts all of the confusing and monotonous react+redux setup into a dead simple developer experience.

One piece of Jumpsuit is it’s state management, which (just a few weeks ago) I extracted into it’s own module called “Jumpstate”. It’s sole purpose is to simplify Redux reducers, action constants and action creators into a single intelligent instance. Creating a Jumpstate reducer looks something like this:

Hopefully it’s pretty straightforward what is happening here. We just created a reducer with an initial state with set to , and then we added two actions (functions) that receive the current , change it in some way, and then return the new state.

Right off the bat, there are 2 traditional redux steps we just bypassed completely:

So what is this object we just exported? Well, it’s a function. It’s a reducer. It’s exactly what you’re used to handling in redux, but with a few smart exceptions.

Auto-dispatching methods — For every action you created on the state, you now have a convenient method on the reducer itself to that, when called, will: create an action for you, populate it with your parameters, and then dispatch it to the store, all without you haven’t to touch anything! For example, to increment the count on the state, just do this:

Under the hood, this is all redux. If you don’t believe me yet, you’ll enjoy this next example.

In the snippet above, we did almost the exact same thing as the first time, but we added an optional flag to the state: . It does exactly what you’re imagining, too.

Now when we call , Jumpstate doesn’t perform any dispatching magic for you behind the scenes, but instead we created a dispatchable action for you to use any way you please:

The action returned by the method is mapped to the state from which it was created, and will be handled there by your action function when sent through the dispatcher.

Using create-react-app, redux, and jumpstate, I’ve created a repo called create-react-app-jumpstate-example to demonstrate just how easy it is to get started using Jumpstate.

Looking at the master branch, you’ll see the first two commits to the repo are merely a clean create-react-app initialization. Nothing new there, just the standard welcome to react template they have provided.

The third commit is where the money is:

I’ve imported , , and , and set up a simple redux store using our new reducer. You’ll also notice an method in the store setup. This is the tiny extra step required to enable Jumpstate to magically dispatch your methods through the redux store.

After that you can see how simple it is to command your store:

An added benefit of this entire model is that a component must directly import a state to modify it in any way. You can also easily abstract your state methods using asynchronous layers that then modify the state as things change in your app. For example:

Instead of exposing the state methods directly, we can export more sensible methods specific to our app, and handle all of the state updates behind the scenes. This concept is more similar to a services model and is easy to both reason about and understand, especially for newer developers.

I believe redux has been the best thing to happen to state management in a long time. It’s become more than just a library, but instead it’s own flux-like paradigm of reasoning about application state. It sure beats the crap of the 2-way-databinding-mutating-mess of 4 years ago, but even so, there are still ways we can improve it and simplify it.

Simply put, that’s why Jason Maurer and I created Jumpstate: to enable developers of all levels to utilize the power of Redux without having to put their fingers too close to the metal.

I hope you have time to try out Jumpstate with Redux! Feel free to clone and share the example repo above to get started on your next Jumpstate app, I know I will :)|||

Create-React-App is taking the react community by storm, and as usual, I’m completely obsessed with Redux, and how it’s transformed the way I build my apps. So what’s new? Jumpsuit is much like…