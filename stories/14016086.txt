JavaScript frameworks & libraries for building in-browser apps have made a tremendous impact on developers' careers around the globe. Angular, React or Ember are among most desired skills, barely anyone even considers building "traditional", server-side-templated MV-Whatever application anymore. SPA (Single Page App) is the king, long live the king. This trends doesn't seem to grow old, quite the opposite - newly rising wave of PWAs (Progressive Web Apps) is quite likely to prolong it even further.

But in fact, does making SPAs out of every client-facing app make any sense? Many teams keep over-engineering their stuff (virtual component models, multi-version parallel framework, advanced cross-module communication, dynamic module life-cycle mgmt, ...) for the sake of being "future-proof" (meeting anticipated future requirements & growth), but they inevitably end-up fighting excessive technical complexity, instead of business domain-related challenges.

Don't get me wrong here, I'm not suggesting you to get back straight into server-side templating (yikes), server-side stateful controls (yikes x 2) or "RIA" plugins (yikes x 3). The model I find optimal is a of:

Before we dive into the details of what micro-app is & what does it matter, one clarification: the general purpose of introducing this concept is not to provide new feature capabilities, it's all about maintainability, delivery process agility & overall simplicity.

The goal is to take what's best from the both worlds (client-side web apps & server-side web apps), but it's just not possible without inheritance of some drawbacks ...

Fortunately all the cons mentioned above are at least counterbalanced by some significant pros:

Obviously there are some pre-requisites for this model to work:

Still, even keeping this constraints in mind, I find the micro-app approach a very sensible compromise between .|||

