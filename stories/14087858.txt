Posted by Bob on Tue 11 April 2017 in Tips â€¢ 3 min read

When playing with decorators (this week's challenge) I got stuck: how do you write a decorator that takes an optional argument? Python cookbook 3rd ed edition to the rescue. In this post how I failed my way to the right solution.

The code for this article is here.

To add an argument to a decorator I ended up having three levels of functions (see here and here):

This works fine if we have an argument:

But when I call it without an argument (which I thought would work because I set it as optional argument) it fails:

My intuition was that the above syntax was pretty complex so I went with the class decorator syntax (a nice exercise too):

Again this works fine when I give it an argument:

But leaving the arg off it fails:

Luckily I had Python cookbook 3rd ed nearby. What I love about this book, apart from its technical depth, is that it offers short and concise recipes that you can start using right away. This really covered a need I had when I was writing my decorators: the ability to have them behave in certain ways.

Here is the cookbook's solution modified for my sleep decorator:

The code looks like magic and I am still wrapping my head around it.

The key part though is the use of partial():

I should probably write another article on this useful feature ...

As mentioned our code challenge of this week is all about decorators. Maybe you can use what you learned in this article to write more versatile decorators.

Keep Calm and Code in Python!|||

When playing with decorators (this week's challenge) I got stuck: how do you write a decorator that takes an optional argument? Python cookbook 3rd ed edition to the rescue. In this post how I failed my way to the right solution.