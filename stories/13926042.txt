An application state is usually divided into three realms:

MobX is an excellent state management choice to deal with those three realms: It allows you to represent your state as a graph while other solutions, like Redux for instance, force you to represent your state as a tree.

With resources are implemented with all their REST actions built in ( , , , , ...) so instead of writing, over and over, hundreds of lines of boilerplate we can leverage REST conventions to minimize the code needed for your API interactions.

If you want to see a full example with React you can check out the mobx-rest-example repo. The demo is deployed here.

is very simple and its source code can be read in 5 minutes.

A represents one resource. It's identified by a primary key (mandatory) and holds its attributes. You can create, update and destroy models in the client and then sync them with the server. A part from its attributes, a also holds the state of the interactions with the server so you can react to those easily (showing loading states for instance).

An that holds the attributes of the model.

A pointer to a . By having models "belong to" a collection you can take the most out of .

A object that represents the state of the ongoing request, if any.

An object that represents the state of the failed request, if any.

Initialize the model with the given attributes.

Return the object version of the attributes.

Implement this abstract method so knows what to use as a primary key. It defaults to but if you use something like mongodb you can change it to .

Implement this abstract method so knows where its API points to. If the model belongs to a (setting the attribute) this method does not need to be implemented.

Return the url for that given resource. Will leverage the collection's base url (if any) or . It uses the primary id since that's REST convention.

Helper method that asks the model whether there is an ongoing request with the given label.

Return whether that model has been syncronized with the server or not. Resources created in the client side (optimistically) don't have and attribute yet (that's given by the server)

Get the given attribute. If the attribute does not exist, it will throw.

Check that the given attribute exists.

Update the attributes in the client.

Request this resource's data from the server. It tracks the state of the request using the label and updates the resource when the data is back from the API.

The opposite of . It takes the resource from the client and persists it in the server through the API. It accepts some attributes as the first argument so you can use it as a + . It tracks the state of the request using the label .

Tells the API to destroy this resource.

When dealing with REST there are always cases when we have some actions beyond the conventions. Those are represented as calls and are not opinionated.

A represents a group of resources. Each element of a is a . Likewise, a collection tracks also the state of the interactions with the server so you can react accordingly.

An that holds the collection of models.

A object that represents the state of the ongoing request, if any.

An object that represents the state of the failed request, if any.

Initializes the collection with the given resources.

Abstract method that must be implemented if you want your collection and it's models to be able to interact with the API.

Abstract method that tells which kind of objects this collection holds. This is used, for instance, when doing a so we know which object to instantiate.

Return a plain data structure representing the collection of resources without all the observable layer.

Return an array with the observable resources.

Helper method that asks the collection whether there is an ongoing request with the given label.

Helper method that asks the collection whether there is any model in it.

Find a model at the given position.

Find a model (or not) with the given id.

Helper method that filters the collection by the given conditions represented as a key value.

Same as but it will halt and return when the first model matches the conditions.

Add a model with the given attributes.

Remove any model with the given ids.

Merge the given models smartly the current ones in the collection. It detects what to add, remove and change.

Instantiates and links a model to the current collection.

Add and save to the server the given model. If attributes are given, also it builds the model for you. It tracks the state of the request using the label .

Fetch the date from the server and then calls to update the current models. Accepts any option from the method.

Exactly the same as the model one, but at the collection level.

This is the object that is going to make the requests to interact with your API. There are two example implementations currently:

A collection looks like this:

And here an example of how to use React with it:

Your collections and models will have the following state shape:

This is something that mobx makes really easy to achieve:

I recommend to always fallback with a null object which will facilitate a ton to write code like .

Developed and battle tested in production in Factorial

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.|||

mobx-rest - REST conventions for Mobx