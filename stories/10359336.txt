Message boxes. Â Ever a source of frustration in WPF. Â MahApps has some nice dialog boxes to which I recently helped out with an MVVM API, but Material Design In XAML Toolkit can run with or without MahApps so I wanted a custom implementation which would meet these goals:

All software is evolution and after aÂ reasonable attempt of doing something similar for a client â€“ which ended up with a bit of a code-smell around callbacks from the API â€“ Iâ€™veÂ come up someÂ composable pieces whichÂ I hope are flexible, easy to use, and â€“ most importantly â€“Â provide an attractive GUI ðŸ™‚

The cornerstone is the DialogHost control. Â Itâ€™s a content control, meaning the underlying content over which the popup dialog will be displayed can be targeted; to a specific area of your app, or the entire Window content.

When the dialog is open, the underlying content will be dimmed and disabled.

DialogHost.DialogContent (associated with DialogHost.DialogContentTemplate) is your typical XAML content object property for setting the content of your dialog. Â You can infer fromÂ this that you can use MVVM to bind content, but there are multiple ways of populating the content, showing the dialog, closing the dialog, and processing responses, soÂ hereâ€™s a list of all the strategies for usingÂ the dialog (after the gif):

RoutedCommand typicallyÂ used from a buttonÂ whereÂ optional content can be provided via the CommandParameter.

Dependency property, to be triggered from XAML, set fromÂ code-behind or via a binding. Â Content must be set in DialogHost.DialogContent.

Async/await based static API which can be used purely in code (for example from in a view model). Â Content can be passed directly to the dialog.

RoutedCommand, typically used onÂ buttons inside the dialog, where the command parameter will be passed along to the dialog response.

Dependency property, to be triggered from XAML, set fromÂ code-behind or via a binding.

TheÂ DialogClosingEventHandler delegate is key. Â It providesÂ the parameterÂ provided toÂ DialogHost.CloseDialogCommand, and allows the pending close to be cancelled.

The following mechanisms allow handling of this event, via code-behind, MVVM practices, or just from the code API:

Bubbling RoutedEvent, which could be used in code-behind.

Attached property, whichÂ accepts aÂ DialogClosingEventHandler which makes it easy to subscribe to the closing event in a more localized area of XAML.

Standard dependency property which enables the aÂ DialogClosingEventHandler implementation to be bound in, typically from a view model.

The async response from this method returns the parameter provided whenÂ DialogHost.CloseDialogCommand was executed. Â As part of the Show() signature a DialogClosingEventHandler delegate can be provided to intercept the on-closing event, just prior to the close.

More complete usage examples can be found in MainDemo.Wpf which is part of the Toolkit solution, primarily in MainDemo.Wpf/Dialogs.xaml.|||

(Note this article refers to a pre-release version, which can be found on nuget provided pre-release versions are included in your search.) Message boxes. Â Ever a source of frustration in WPF. Â MahApps has some nice dialog boxes to which I recently helped out with an MVVM API, but Material Design In XAML Toolkit can runâ€¦