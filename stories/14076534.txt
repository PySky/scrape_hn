Setting up a basic workflow for postcss with gulp is fairly straightforward. Cssnext also allows us to specify variables in a central javascript file that can be used across your entire codebase. This means that you can standardise styles further, for those cases where styling in both css and javascript is sometimes unavoidable (e.g. data visualization).

I will mainly focus on providing support for variables, custom media queries and partial imports. In order to keep this tutorial reasonably short I can’t cover more than that, but I hope that by the end you will have enough of an overview to be able to add your own plugins to take advantage of more advanced features of postcss.

The source code for this examples can be found on github.

To get started initialise a new folder with npm. In this folder you will need a src and css folder. The src folder will contain the uncompiled css, and the css folder will contain the processed/compiled css files.

Next you will have to install gulp and some additional gulp packages. Make sure that they are all listed in .

Create a in the root of your project. Here’s what the file should look like:

Our gulpfile contains two tasks, one for building the css files, and the default task for watching the src directory for changes. The watcher will run the build command when anything in the src folder changes. The build task will look for a main.css file in the src directory, and will process that file using the processors specified (in this case partialImport and cssnext). Cssnext will transform the css to be compatible with browsers that have more than 1% market share (according to caniuse database). The processed css will be output to the  directory.

To run the gulp tasks in our project without installing gulp globally, we need to add some npm scripts to our .

Now we can run the gulp tasks using npm, and .

Create a main.css file in the src directory and add some sample css (as shown below) to check the compilation process.

Once you run the gulp task via npm…

…the above css should successfully compile to this:

To go one step further, we can make the variables and available for both css files and javascript files. To do this you will have to create a  , a  , and alter  and .

To begin with, remove all variable definitions and custom media query definitions from main.css. You should be left with this:

Next, define your variables in a simple javascript object in  .

Then define your media queries also as a simple javascript object in  .

Finally, you will have to make the cssnext processor aware of the existence of styleVariables.js and mediaQueries.js. In order to do that you will have to add some code to . To do this, import the and into your gulpfile and plug them into the cssnext options.

So now you have a simple postcss processor that allows you to share variables between css and js. For other cool stuff that you can add to this setup, check out the postcss github repo.

You can find the code used for this tutorial on github.|||

Setting up a basic workflow for postcss with gulp is fairly straightforward. Cssnext also allows us to specify variables in a central javascript file that can be used across your entire codebase…