If you have not had a chance to discover Vent or would like to get a better understanding of the tool, its design, or the impetus behind its creation, I would recommend reading our introductory article here first.

At its core, Vent is a highly flexible tool designed to be built upon and customized. It provides a platform to collect and analyze data with any technology of your choice. As Vent is based on boot2docker, it supports Docker containers, and anything within the realm of containerization!

So what can one do with Vent? To illustrate Vent’s flexibility and a potential use case for your environment, let’s consider a simple problem:

Currently, Vent supports data aggregation in Elasticsearch. But perhaps your team has a visualization tool that works with a different database, such as Couchbase or Redis.

Solution: Simply add a Couchbase or Redis container as a core service to Vent and configure the service accordingly on boot. That’s it.

For use cases like this and many others, this tutorial will review developing and debugging for Vent.

Note — When it comes to developing for Vent, there are multiple ways to do so: Contributing to the Source Code or Developing Plugins for Vent. This tutorial only discusses the first. Stay tuned for the latter!

Before we begin, there are just a couple things that need to be in place.

For general developer workflow and guidelines please see our Contributing Guidelines.

When developing for Vent, the workflow can get tiring fast. Having to rebuild every single time you make a one-line edit to the code ends up with ~10 min of build time for every change you make.

Luckily there's a much quicker way to update a Vent instance, and you don't need to shutdown Vent to do it!

Let’s break it down into steps:

Below is an example, whereby the help message when adding a Plugin is updated:

To further speed up the workflow I recommend making a script file (example: sync.sh), and adding frequent files for development into the script as commands.

With all the moving parts in Vent, debugging can be confusing at first. There are several modules baked into Vent that all deal with different sources of input/output and keeping track of the redirections can make debugging complicated. Below are some things to bear in mind.

Here’s how you can access the Vent command line and find the files you've made changes to:

Vent is a tool by developers for developers. Hopefully this tutorial made it that much easier to customize and use Vent. Feel free to drop us a line on our GitHub with any questions, feedback, or comments!|||

If you have not had a chance to discover Vent or would like to get a better understanding of the tool, its design, or the impetus behind its creation, I would recommend reading our introductory…