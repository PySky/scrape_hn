Selenium is already a well-known player when it comes to browser automation and is usually a part of any serious integration testing stack. That being said, it is also an increasingly popular choice for web scraping. Now APIs are usually the ones with detailed rate-limiting systems but if you are the type of person that understands that web scraping is sometimes necessary and you intend to be relatively gentle about it, selenium-respectful might be for you!

The library auto-detects the presence of a YAML file named selenium-respectful.config.yml at the root of your project and will attempt to load configuration values from it.

The resulting active configuration would be:

In your quest to use selenium-respectful, you should only ever have to bother with one class: RespectfulWebdriver. Instance this class and you can perform all important operations.

Before each example, it is assumed that the following code has already been executed.

Realms are simply named containers that are provided with a maximum requesting rate. You are responsible of the management (i.e. CRUD) of your realms.

Realms track the HTTP requests that are performed under them and will raise a catchable rate limit exception if you are over their allowed requesting rate.

This returns a list of currently registered realm names.

Either of these registers 3 realms:

This updates the maximum requesting rate of Google to 25 requests per 5 seconds.

This would unregister the Google realm, preventing further queries from executing on it.

This would unregister all 3 realms in one operation, preventing further queries from executing on them.

To pilot your web browser to a given URL, just use the get method as you would normally do with your WebDriver instance. The only major difference is that a realms kwarg is expected. A wait boolean kwargs can also be provided (the behavior is explained later).

If not rate-limited, it would direct the browser to the provided URL.

You can have a single request count against multiple realms if it makes sense in your use case.

Executing these get calls will either perform the action in the browser or raise a SeleniumRespectfulRateLimitedError exception. This means that you'll likely want to catch and handle that exception.

Requesting with a get call accepts a wait kwarg that defaults to False. If switched on and the realm is currently rate-limited, the process will block, wait until it is safe to send requests again and perform the requests then. Waiting is perfectly fine for scripts or smaller operations but is discouraged for large, multi-realm, parallel tasks (i.e. Background Tasks like Celery workers).

Yes. The use of Redis allows for selenium-respectful to go multi-thread, multi-process and even multi-machine while still respecting the maximum requesting rates of registered realms. Operations like Redis' SETEX are key in designing and working with rate-limiting systems. If you are doing Python development, there is a decent chance you already work with Redis as it is one of the two options to use as Celery's backend and one of the 2 major caching options in Web development. If not, you can always keep things clean and use a Docker Container or even build it from source. Redis has kept a consistent record over the years of being lightweight, solid software.|||

selenium-respectful - Minimalist Selenium WebDriver wrapper to work within rate limits of any amount of websites simultaneously. Parallel processing friendly.