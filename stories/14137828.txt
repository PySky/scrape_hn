You are here: Home ‣ Dive Into Python 3 ‣

Having grown up the son of a librarian and an English major, I have always been fascinated by languages. Not programming languages. Well yes, programming languages, but also natural languages. Take English. English is a schizophrenic language that borrows words from German, French, Spanish, and Latin (to name a few). Actually, “borrows” is the wrong word; “pillages” is more like it. Or perhaps “assimilates” — like the Borg. Yes, I like that.

We are the Borg. Your linguistic and etymological distinctiveness will be added to our own. Resistance is futile.

In this chapter, you’re going to learn about plural nouns. Also, functions that return other functions, advanced regular expressions, and generators. But first, let’s talk about how to make plural nouns. (If you haven’t read the chapter on regular expressions, now would be a good time. This chapter assumes you understand the basics of regular expressions, and it quickly descends into more advanced uses.)

If you grew up in an English-speaking country or learned English in a formal school setting, you’re probably familiar with the basic rules:

Other languages, of course, are completely different.

Let’s design a Python library that automatically pluralizes English nouns. We’ll start with just these four rules, but keep in mind that you’ll inevitably need to add more.

So you’re looking at words, which, at least in English, means you’re looking at strings of characters. You have rules that say you need to find different combinations of characters, then do different things to them. This sounds like a job for regular expressions!

Let’s look at regular expression substitutions in more detail.

And now, back to the function…

Let’s look at negation regular expressions in more detail.

Regular expression substitutions are extremely powerful, and the syntax makes them even more powerful. But combining the entire operation into one regular expression is also much harder to read, and it doesn’t directly map to the way you first described the pluralizing rules. You originally laid out rules like “if the word ends in S, X, or Z, then add ES”. If you look at this function, you have two lines of code that say “if the word ends in S, X, or Z, then add ES”. It doesn’t get much more direct than that.

Now you’re going to add a level of abstraction. You started by defining a list of rules: if this, do that, otherwise go to the next rule. Let’s temporarily complicate part of the program so you can simplify another part.

The reason this technique works is that everything in Python is an object, including functions. The data structure contains functions — not names of functions, but actual function objects. When they get assigned in the loop, then and are actual functions that you can call. On the first iteration of the loop, this is equivalent to calling , and if it returns a match, calling .

If this additional level of abstraction is confusing, try unrolling the function to see the equivalence. The entire loop is equivalent to the following:

The benefit here is that the function is now simplified. It takes a sequence of rules, defined elsewhere, and iterates through them in a generic fashion.

The rules could be defined anywhere, in any way. The function doesn’t care.

Now, was adding this level of abstraction worth it? Well, not yet. Let’s consider what it would take to add a new rule to the function. In the first example, it would require adding an statement to the function. In this second example, it would require adding two functions, and , and then updating the sequence to specify where in the order the new match and apply functions should be called relative to the other rules.

But this is really just a stepping stone to the next section. Let’s move on…

Defining separate named functions for each match and apply rule isn’t really necessary. You never call them directly; you add them to the sequence and call them through there. Furthermore, each function follows one of two patterns. All the match functions call , and all the apply functions call . Let’s factor out the patterns so that defining new rules can be easier.

If this is incredibly confusing (and it should be, this is weird stuff), it may become clearer when you see how to use it.

Rounding out this version of the script is the main entry point, the function.

You’ve factored out all the duplicate code and added enough abstractions so that the pluralization rules are defined in a list of strings. The next logical step is to take these strings and put them in a separate file, where they can be maintained separately from the code that uses them.

First, let’s create a text file that contains the rules you want. No fancy data structures, just whitespace-delimited strings in three columns. Let’s call it .

Now let’s see how you can use this rules file.

The improvement here is that you’ve completely separated the pluralization rules into an external file, so it can be maintained separately from the code that uses it. Code is code, data is data, and life is good.

Wouldn’t it be grand to have a generic function that parses the rules file? Get rules, check for a match, apply appropriate transformation, go to next rule. That’s all the function has to do, and that’s all the function should do.

How the heck does that work? Let’s look at an interactive example first.

Since sets up an infinite loop, you could theoretically do this forever, and it would just keep incrementing and spitting out values. But let’s look at more productive uses of generators instead.

So you have a function that spits out successive Fibonacci numbers. Sure, you could do that with recursion, but this way is easier to read. Also, it works well with loops.

Let’s go back to and see how this version of the function works.

What have you gained over stage 4? Startup time. In stage 4, when you imported the module, it read the entire patterns file and built a list of all the possible rules, before you could even think about calling the function. With generators, you can do everything lazily: you read the first rule and create functions and try them, and if that works you don’t ever read the rest of the file or create any other functions.

What have you lost? Performance! Every time you call the function, the generator starts over from the beginning — which means re-opening the patterns file and reading from the beginning, one line at a time.

What if you could have the best of both worlds: minimal startup cost (don’t execute any code on ), and maximum performance (don’t build the same functions over and over again). Oh, and you still want to keep the rules in a separate file (because code is code and data is data), just as long as you never have to read the same line twice.

To do that, you’ll need to build your own iterator. But before you do that, you need to learn about Python classes.|||

