A trie (don’t follow that link just yet) is a wierd data structure. I mean, not wierder than any other wierd data structure of course but still, very wierd. I think it’s like that because of math. Math is wierd. Wierd and wonderful.

The implications of this, I think, is not yet known to most of us.

The standard interpretable definition of a trie is, in one try, you should be able to determine if…

- a word exists

- a word kind of exists (i.e. exists as a prefix, suffix, wildcard, or within near proximity of a word that exists)

…in a system defined by a lexicon by performing a single scan of a tree.

You already know what a lexicon is. The definition requires some deaper explanation though. How do you represent a lexicon as a tree?

A trie stores each word once, at worst, but sometimes less than once. The characters of the word “banana” will be reused if the lexicon also contains the word “bananas”.

Assuming you are reading this while drinking your morning coffee, let’s implement a trie and then serialize it to disk while your coffee is still warm.

Because if you serialize a trie into a file in such a way that you can scan that file sequentially, with precisely the same algorithms you would have used if that darn tree was residing in memory, do you know what you would have? A search engine. Not a pretend one. A real one. Do you know what you could do with a search engine (Google knows)?

A way to fulfill the trie requirements is to construct a binary tree. According to Wikipedia any tree can be represented as a binary tree. This is good news if you could not intuitively come to that conclusion yourself, because your first vision of a trie may not be not one of a binary. It might be more or a graph with a single root (an acyclic graph).

If you implement a tree as a binary one, theoretically, you would disqualify half of the tree with each step you would take in it. Imagine the implications of eliminating half of a lexicon as you step through the characters of a word. Imagine eliminating half of a huuuuuuuuuuuuuuuuuuuuuge, google-huge file, at each step you took in that file. Not so scary a climb any more.

Seriously not that hard to serialize.|||

A trie (don’t follow that link just yet) is a wierd data structure. I mean, not wierder than any other wierd data structure of course but still, very wierd. I think it’s like that because of math…