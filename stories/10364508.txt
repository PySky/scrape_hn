Using modern ES7 functional bind syntax you can now call the underscore.js function the 'right' or non-functional way. underline.js is a thin layer between your code and underscore.js which binds all underscore functions called to the target object.

{ , , , } ; [ , , , , , ] ([ , , ]) Check for all elements are less than 10 [ , , , ] (( ) e ) { a , b } () [ {name , age }, {name , age }, {name , age } ] ( ) . ([ , , , , , ], [ , , ]) . ([ , , , ], ( ) e ) . ({ a , b }) . ({ a , b }) . ([ {name , age }, {name , age }, {name , age } ], )

[ , , , , , ] ([ , , ]) (( ) e ) Too much typing to chain in underscore and get its value . ([ , , , , , ]). ([ , , ]) . (( ) e ) . ()

Try it out in the REPL

To get started you will need to use Babel transpiler with experimental feature es7.functionBind enabled. Then:

All of the functions available in underscore.js are available in .|||

underline.js is like underscore.js but using modern ES7 syntax