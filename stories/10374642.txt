I use Vim as my primary text editor. Vim is not perfect. It is great in some aspects, but it sucks in others. There are lots of IDEs out there, and some time ago I even tried to switch to an IDE, but I failed, even though most IDEs have Vim-emulation mode. Nothing else can give that true “talking-to-editor” feeling to me. But, well, Vim is not perfect. One of the things I really miss is that there's no such thing as a “project” in Vim. Vim is a text-editor, not an IDE, and unfortunately in 2015 we still don't have a standard interface between a text editor and an IDE. That's the real shame in my opinion, and so, we have to struggle with rather hackish solutions all the time.

One of the things I undoubtedly need for my daily development is the code navigation: you know, the ability to quickly jump to some symbol's definition. When I moved to Vim about 5 years ago, I quickly found out there is no convenient way to do that: all of the existing solutions had some limitations. The Vim's traditional way to perform the code navigation is by using tags. Tags are generated by the external utility Exuberant Ctags, which, while being rather simple parser, supports lots of languages. Surely we can be pure geeks, and use ctags directly, like this: And then, in Vim, use our tags by typing: After this, Vim is aware of where project's symbols are located. We can now place our cursor on some symbol, press , and Vim will bring us to the symbol's definition. Or, we can just type . It works. The problem is that generating tags manually is just a little bit inconvenient. And given that we actually have to re-generate tags every time we make any changes to source files, it becomes completely unacceptable. So, that's what various plugins are for: they try to make the process of dealing with tags somewhat more convenient. But sadly, and surprisingly enough, I failed to find the solution that would satisfy me. What I want is to be able to just specify where my project files are located (to generate tags for), and then forget about tags at all. Tags should be generated and re-generated automatically when appropriate, and the whole process should be completely transparent to the user (i.e. to me). Existing plugins, however, required me to perform too many actions to be really convenient. In the absence of existing solutions, and taking into account my strong wish to keep using Vim, I had to roll my own.

Assume we have two simple projects: and . They are located in , and they have the following files: So, the first project has the following files: Whereas the second project has: And let's make Indexer aware of these pieces of art. Make sure our contains the following: [My first project] /home/dimon/projects/first   [My second project] /home/dimon/projects/second After you've edited the , it's better to restart Vim. Sorry about that! It's not very convenient, but it doesn't hurt much, since we edit it rarely. Now, let's see Indexer in action! Open file from the first project: . At this moment, Indexer will notice that opened file belongs to the project “My first project”, which is not yet opened. So, it will generate tags for the whole project (well, even though it consists of just a couple of files), save tags file as , and set to this location. Now, you can type in your Vim: And Vim will bring you where the is defined in our first project. I promised that multiple projects are supported as well, so, let's check that claim: open file from the second project: . At this moment, Indexer will notice that opened file belongs to the project “My second project”, which is not yet opened. So, it will generate tags for all files under , save tags file as , and set to this location. Now, you can type in your Vim: And Vim will bring you where the is defined in our second project, that is, to . As you see, two projects don't interfere with each other, even though they contain the same symbols. And more: after you typed , Vim has opened the file , Indexer has noticed that opened file belongs to the project “My second project”, which is already opened, and active. So, no special actions were done: tags are not regenerated (since they're already up-to-date). Okay, going further. Let's open file from the first project. Then, Indexer notices that opened file belongs to the project “My first project”, which is already opened, but inactive. So, it will not generate any tags now, but instead just set to already generated .

Indexer updates tags for some particular project when you save any file from that project. However, as was mentioned before, on rather large projects it would take noticeable time to rebuild tags for the whole project (even in though tags are generated in background, it is inconvenient), so, Indexer does its best to avoid that. On Linux and Mac, by default Indexer does not rebuild tags for the whole project. Instead, it removes tags for saved file by sed, and then runs in append mode. This way, we don't have any stale tags (since they're removed by ), all relevant tags are saved, and the whole thing works much faster. However, on Windows, all versions of that I was able to find are buggy: one of them couldn't handle Windows line endings correctly, another one works “most of the time”, but sometimes corrupts tags file, etc. After all, I gave up, and on Windows tags are rebuilt for the whole project every time you save every single file, by default. There is an option , if you want to change the default behaviour on any platform.

We need to make a note about background tags generation. First of all, you need your vim to be built with . All popular pre-built binaries have this feature enabled, so you're unlikely to have troubles with it. Then, it will work out-of-the-box for Gvim, but not for terminal Vim. If you want it to work in terminal, you should run your Vim like this: What is the ? I'll explain briefly: in order to achieve background tags generation, Indexer has to run ctags asynchronously: separate process with ctags is spawn, Vim goes to do its own business, and later, when ctags process is done, Vim gets notified about that, and Indexer proceeds further. The crucial part is to talk to running Vim about something (in this case - about finished ctags process). For this to be done, the running instance of Vim should have some servername: that way, we can even work with multiple running Vim instances. Gvim is started with default servername , so, it works by default. I have no idea why terminal doesn't have set.

The idea is quite simple: in the root of our project directory, we create the directory, in which we can store any number of files (usually, 1 file is enough) with project-specific settings. When we open some file in Vim, Vimprj walks up by tree, looking for the directory. For each found, Vimprj sources all files, and continues to go up, looking further for other , until it reaches the root of filesystem. Example tree may look like this: Of course, it is optimized: if we open some file from the location for which we have already applied settings, the files won't be sourced again. But if we switch project (open some file from different location, with its own ), then, of course, all settings will be re-applied. The easiest use-case for Vimprj is probably an indentation options. Assume I'd like to use 4-space indent in my projects. No tabs, exactly four spaces. One day I need to work on another project written by someone else, and there's 2-space indent. Or maybe tabs. So, in my own projects, I create a file : And in the project with 2-space indentation, I put the following settings: Now, every time I open any file under , the and options will be set to . When I open any file from , these options will be set to . Very convenient, no pain! More, we can put whatever other project-specific settings here: some mappings, other plugins' settings.. Whatever. And we can nest projects: for example, we may have some “environment” project with things that are common for inner projects. And each particular project can set more precise settings. We'll talk about that later, in the section about Indexer's subprojects. Okay, that sounds good. But actually, with the current design, we have an issue. Can you spot it? Assume I open file from : tab is 4-space. Good, now, open some file from : tab is 2-space. Still good! And now, open some file that is not contained in any project. Oops. Of course, I'd like tab to be 4-space, since it is my preferred settings. But, as you might have guessed, with the design described above, it's still 2-space: nothing to to get 4-space settings, so, the last applied settings are still in effect. That leads us to the fact that we want to have some default settings.

Let's recall what we have started with: we wanted to get rid of centralized , which we can't even include in the project's repository. The solution is to have separate for each project, and refer to it from our file. We can put pretty much anywhere inside our project, but I prefer to store it right into dir. It feels natural. So, let's try to refactor our project from the examples above, so that it doesn't depend on central . We end up with the following tree: And our should contain the following settings for Indexer: s sVimprjPath = g indexer_indexerListFilename = s sVimprjPath   " TODO: here may be any other project-specific settings, such as tabstop, etc And in our , we don't have to use absolute filenames anymore: it's much more flexible to take advantage of the variable, which is carefully set by Vimprj for us. So, new looks like this: Now, we can (but not have to) remove your old record of the project from the central . And let's check it: open some file from our project! This time, Indexer will use our local file . You can verify that by issuing the command: * Indexer version: 4.15 * Ctags version: Exuberant Ctags 5.9~svn20110310, Copyright (C) 1996-2009 Darren Hiebert * Filelist: indexer file: /home/dimon/projects/first/.vimprj/.indexer_files * Index-mode: DIRS. (option g:indexer_ctagsDontSpecifyFilesIfPossible is ON) * At file save: remove tags for saved file by SED, and just append tags * Background tags generation: YES * Projects indexed: My first project * Root paths: /home/dimon/projects/first * Paths for ctags: /home/dimon/projects/first * Files for ctags: * Paths (with all subfolders): .,/usr/include,,,/home/dimon/projects/first, * Tags file: ./tags,./TAGS,tags,TAGS,/home/dimon/projects/first/.vimprj/.indexer_files_tags/My_first_project Among others, it shows the filelist file being used: . And with this setup, tags file is saved into , that is, under the project directory. So, I always put tags directory to my list, like this: Now, it's much better, isn't it? All necessary project information is kept into repository, and we can move our project in just any place in our filesystem, it will just work.

If you use Project plugin, then you probably want to do the same with : store it in your project's tree, instead of using central . On the Indexer part, it's as easy as for : you just put your to the directory , and in your point Indexer to it: s sVimprjPath = g indexer_projectsSettingsFilename = s sVimprjPath   " TODO: here may be any other project-specific settings, such as tabstop, etc It's enough for Indexer, but we also want the Project plugin to use our local , don't we? Unfortunately, the author of the Project plugin, Aric Blumer, decided not to provide an option to set the path to ; instead, the only way to use different file is to use command, which actually opens a Project window with specified file opened. So, in our , we can add the following: But this way, the command will be executed each time we switch the project, causing Project window to open, which is not very convenient. I'd still prefer to just set the variable with path to . For example, I never actually type command; instead, I use mapping for toggle project window, like this: So I just hit , and project window is opened or closed. And I want it to open or close the project that is stored in the variable. I asked Aric Blumer to provide this simple functionality, but he refused by answering that I'm the first person who asks about this. Sounds pretty strange to me, but then, I had to hack on Project plugin a bit, as it's just a matter of a few lines. A command: $ diff -u project.vim project_new.vim --- project.vim 2006-10-13 17:47:08.000000000 +0400 +++ project_new.vim 2015-10-12 11:38:10.923919092 +0300 @@ -1269,7 +1269,11 @@ if !exists("*<SID>DoToggleProject()") "<<< function! s:DoToggleProject() if !exists('g:proj_running') || bufwinnr(g:proj_running) == -1 - Project + if !exists("g:proj_running") && exists('g:proj_project_filename') + exec('Project '.g:proj_project_filename) + else + Project + endif else let g:proj_mywindow = winnr() Project When this patch is applied, we can use the variable . All in all, our looks like this: s sVimprjPath = g indexer_projectsSettingsFilename = s sVimprjPath g proj_project_filename = s sVimprjPath   " TODO: here may be any other project-specific settings, such as tabstop, etc This way, I open some file from my project, hit , and Project opens my local .

Well, at the moment, Indexer does not support sub-projects. But the good news is that we can work around this and get what we need with the flexibility of Vimprj! Let's look at how it is done. Remember that in our files we can set any options. So, the main idea is to manually set up tags of needed libraries. Like this: For rather large projects, where I have lots of libraries, I usually have the “environment” repository, which includes several library sub-repositories, together with a main project (as just one more sub-repository). This technique described, for example, in the Mercurial's wiki. So, let's assume we have the project that uses a couple of libraries. As described above, we'll have the environment directory (let's name it ), which will have both libraries and the itself. We end up with the following hierarchy: Notice that the environment directory has its own . We use it to set up variables with paths to libraries: s sVimprjPath = s sProjectPath = s sVimprjPath VIMPRJ_ENV__PATH__LIB_1 = s sProjectPath VIMPRJ_ENV__PATH__LIB_2 = s sProjectPath   " paths to all libraries tags (generated by Indexer) VIMPRJ_ENV__PATH__LIB_1__TAGS = VIMPRJ_ENV__PATH__LIB_1 VIMPRJ_ENV__PATH__LIB_2__TAGS = VIMPRJ_ENV__PATH__LIB_2 As you see, we specify paths to tag files ( , ), so that we can use these variables in our : This way, when we open any file from , tags for libraries will be used by Vim. Each library has its own with and , which are very simple (just like ones for the project, in the section Store .indexer_files inside .vimprj). You may find the whole working example in the Indexer repository, doc/examples/vimprj_subprojects. I must admit that such an implementation of sub-projects is a way too hackish. I see two clear drawbacks: When we've just cloned our repositories, and open some file from , tags for libraries won't be generated automatically. We have to open each library in Vim, so that Indexer will generate tags for each of them; In the , we have to specify exact path to tags file, like , which is an implementation detail of Indexer actually. Maybe one day Indexer will support sub-projects internally, and then, all of these inconveniences will be out. However, at the moment, it's much better than nothing: once we set things up and generated tags for all libraries, the whole thing works pretty nice.

All of the above is quite nice, and it allows me to set up my projects accordingly to my needs. However, it sounds like an overkill if I occasionally download some third-party project, and want to just quickly peek at the source code, being able to navigate it: I have to create directory inside with and … I'm far too lazy. Instead, I've implemented simple feature: we can specify that some directory contains different projects. Then, Indexer will treat every directory inside as a separate project, without any additional change to ! For such third-party projects, I use the directory . I just download , and save it as . And in my generic , I have the following lines: That's all! The key here is a special “project name”: . Every single directory inside is now treated by Indexer as a separate project. I download some new project to , restart the Vim, and open any file from newly saved project. Indexer generates tags for it, and I can navigate the code immediately. That's simple, eh? By the way, this is the only thing I use generic for. Again, sorry for obliging you to restart Vim. When it starts, Indexer fetches the list of all directories under , and this list remains statically for the whole Vim runtime. I hope I'll find time to remove this limitation in the future.

Indexer sucks at really large projects (for example, Linux Kernel). When project is so large, ctags may pretty much run for several minutes while generating tags. And even though we use trick with and when saving file, anyway it works a way too slow to be useful. If you get your processor loaded 100% for 30-60 seconds at every file save, it's not good at all. More, by default, Indexer will re-generate tags when the project is opened for the first time in the particular Vim session (since Indexer has no reliable way to check whether tags are up-to-date: checking dates of every single file in vimscript will probably be even slower than just generate new tags). So, when I use Indexer to navigate Linux Kernel, I turn this option: Then, if tags file already exists, Indexer will not re-generate it. But luckily, my projects aren't that big, so, Indexer works quite well for me.|||

