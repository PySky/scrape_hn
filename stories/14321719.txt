This reference is intended to be precise opcode and instruction set reference (including x86-64). Its principal aim is exact definition of instruction parameters and attributes.

coder, coder-abc, geek, geek-abc (these contain both x86-32 and x64 instructions).

In contrast to other references, primary source of this reference is an XML document, which guarantees clear and structured information base and therefore ability to extract many various informations such as a list of instructions from requested groups, etc.

The reference is primarily based on Intel manuals as Intel is the originator of x86 architecture. Additionally, it describes undocumented instructions as well. On appropriate places, it gives a notice if an opcode act differently on architecture. Support for Cyrix, NexGen etc. specific instructions is not scheduled at all.

Get one copy for $20, two copies for $32.

Immediately following the initial release of the reference, it emerged that a large number of users are interested in a printed version. You can order a copy in the on-line store.

These editions are available at the moment: The suite is intended to more common use and contains the following editions: coder32, coder64, and coder (sorted by opcode), and coder32-abc, coder64-abc, and coder-abc (sorted by mnemonic). The suite is intended for deeper research of x86 architectures' instruction set. This includes geek32, geek64, and geek editions (by opcode) and geek32-abc, geek64-abc, and geek-abc editions (by mnemonic). More on the purpose and use of this suite see close below.

Don't get confused by geek(-abc) and coder(-abc) editions. Both of them contains instruction set of both x86-32 and x86-64 architectures. If you don't have a particular reason to use them (such as to view the differencies between the architectures), the other editions would probably suit you better.

Editions coder32 a geek32 relate exclusively to x86-32 architecture. Similarly, editions coder64 and geek64 relate exclusively to x86-64 architecture.

The following chart illustrates the differencies between editions for current release:

The geek editions contains as much complete information from the source XML document as possible. That's why they may seem quite unclear. You appreciate them only if you need to get to know the instruction set deeply or if you investigate the source and you need to visualize it better.

These editions use specific operand codes (which are described in Instruction Operand Codes chapter below). These codes may look strange and obscure at the first sight. The reason to use them is that they hold more information than the more common ones. One example can be operand combination , such as in instruction in coder64 edition. One can determine that the destination operand is either , , or , and the source one is either or . A problem arises when one needs to determine what magic is behind combination. If one is just getting started with x64 architecture, it is not clear how exactly is 32-bit immediate added to 64-bit . This question is answered by corresponding geek edition, in geek64 edition. The immediate value is encoded there using code. code means , means or ( or ). The most important part is code, which means . Now is it clear.

As for Itanium-specific instructions, they are added just for the sake of interest - they give a notice that the appropriate opcodes are already used.

If you want to refer to particular opcode (in any edition), e. g., , it can be easily achieved this way:

You can order a printed copy in the on-line store. This is how a copy looks like:

Since editions can look complicated at first sight, here goes an outline how to work with them. Following examples come from coder32's edition because it is easier to use than geek's editions.

Let's start with more known instruction, such as . We find something similar to the following:

First column pf (Prefix) is empty. That means the instruction's opcode doesn't contain any fixed prefix.

Next column 0F is just allocated for prefix for multiple-byte opcodes so it is empty.

Next column po (Primary Opcode) holds primary opcode value itself.

Because the instruction's opcode doesn't contain any added byte, the column so (Secondary Opcode) is empty too.

The opcode doesn't contain any specific bits so the column flds (Opcode Fields) is empty.

The column o (Register/Opcode Field) here holds "r", which indicates that the instruction uses "full" ModR/M byte (no opcode extension).

Because this instruction is supported since 8086 processor, proc column (Introduced with Processor) is empty.

This instruction is officially documented so st column is empty too.

Instruction can work on any ring level so the column rl, Ring Level, is empty.

The column x holds "L", which means that prefix is allowed with this instruction.

Next three columns, mnemonic, op1 and op2 show instruction's syntax. The destination operand of this instruction is set up using bold, what always means the operand is modified by the instruction.

The column iext (Instruction Extension Group) is empty because the instruction doesn't belong to any instruction set extension.

instruction is influenced by CF flag, what represents tested f column.

This instruction influences (overwrites) all status flags. These can be found in next column modif f column.

All of these flags are defined (don't contain random values) so the same flags are in next def f column, and undef f column must be empty.

No flag is set to a fixed value (all modified flags depend on input operands) so f values column is empty.

Last column description, notes contains only a general description of the instruction.

Some opcodes (only a few) depend on Opcode Extension Field in ModR/M byte. Using this field, the opcode is actually extended by three bits. In most cases, different extension of the same opcode means more or less different instruction. An example can be opcode . We choose last three extensions of the opcode:

The opcode extension can be a value from 0 through 7. These values are indicated in o (Register/Opcode Field) column. In this example, values 5, 6, and 7 are chosen.

Additionally, this example shows that operands, which are not explicitly used ( , , and operands), are set up using italic. It also shows that and instructions always destroy all status flags: both modif f and undef f column contain these flags.

Some opcodes are represented by more instructions with the same meaning, using different syntaxes. (This doesn't apply to the case when an opcode depends on Opcode Extension field in ModR/M byte. In this case, these instructions act more or less differently). Best known example are conditional jumps, for example , where we find something similar:

Each syntax has dedicated row in mnemonic column and in columns with instruction operands.

More complex case is, for example, instruction:

Here, the opcode's record is complicated by the fact that since 80386 processor, the syntax is extended (thanks to 32-bit operands) with mnemonic and syntax is changed. That's why all four syntaxes have to be split by twos.

More examples with multiple syntaxes: , , or .

All main editions contain a few undocumented instructions (from the Intel manual point of view). No that in this reference, undocumented doesn't equal invalid. All undocumented instructions mentioned by this reference work well in their shape. It is, for example, instruction:

In this case, the documented meaning goes first, as indicated in st column by "D" value. Since this opcode's documented meaning is not a common one, there is additional reference to the description where the opcode is documented. The column mnemonic implies by the value "undefined" (which is set up using italic, which always means here that it is not an original mnemonic) that the documented meaning of this opcode is "undefined and reserved". This is also stated in the last column.

Below goes the undocumented meaning of the opcode - st column holds "U" value. Each undocumented meaning should contain a reference to the description where is the opcode unofficially documented, like in this case.

More examples of undocumented instructions: or .

Fixed extraordinary prefix, which may change the semantic of the Primary Opcode. Usually used in case of waiting x87  instructions, and many instructions. , , Basic opcode. Second opcode byte in case of two- and three-byte opcodes. For coder's editions: means a register code, from 0 through 7, added to the value. Fixed appended value to the primary opcode. It is used in some special cases, x87  instructions and for new three-byte instructions. , , , three-byte escape This column is present only in geek's editions. It contain present Primary Opcode binary fields. These are: means a register code, from 0 through 7, added to the basic value of the Primary Opcode. The following fields are case-sensitive: if a letter of the code is set up in lower case, it means the appropriate bit is cleared, otherwise is set. means bit (bit index 0, ) is present; may be combined with bits or  . means bit  (bit index 1, ) is present; may be combined with bit  . means bit (bit index 1, ) is present; may be combined with bit  . means bit field (4 bits, bit index 0, ). Used only with conditional instructions. means segment register specifier - a code of one of original four segment registers (2 bits, bit index 3). See also addressing method. means segment register specifier - a code of any segment registers (3 bits, bit index 0 or 3). See also and addressing methods. means bit field (2 bits, bit index 1, ); used only with instructions coded with second floating-point instruction format. The value of the opcode extension (values from 0 through 7). indicates that the ModR/M byte contains a register operand and an r/m operand. Indicates the instruction's introductory processor (code in curves apply to XML reference): The opcodes that are not forward-compatible (the ones which have been abandoned) are present only in geek's editions. If the processor marking is a range (e.g., ), it means that the instruction is unsupported in latter processors. (e. g., ) means the instruction is supported in any of latter processors and also in 64-bit mode, if the next row doesn't explicitly say otherwise. (e. g., ) the same meaning, but only in the latter steppings of the processor (e. g., instruction extensions). If this column is empty: In case of 32-bit editions, it means (8086 and all latter processors). In case of 64-bit editions, it means (P4, latter stepping, and all latter processors), because Intel 64 Architecture is available since latter stepping of the Pentium 4 processor. Indicates how is the instruction documented in the Intel manuals: means fully documented. It can contain a reference to description which chapter in Intel manual it is documented in, if it may be unclear. undocumented at all. It should contain a reference to description of the source. Note that in this reference, undocumented doesn't equal invalid. All mentioned undocumented instructions should work well in their scope. If this column is empty, it means (documented with no further notes). Indicates the mode, which is the instruction valid on. Virtual-8086 Mode is not taken into account. applies for real, protected and 64-bit mode. is not taken into account. applies for protected and 64-bit mode. is not taken into account. applies for 64-bit mode. is not taken into account. If this column is empty, it means . For 64-bit editions,  code indicates in most cases that the semantics of the opcode is specific to 64-bit mode. The ring level, which is the instruction valid (3 or 0) from;  indicates that the level depends on a flag(s) and it should contain a reference to the description of that flag, if the flag is not too complex. If this column is empty, it means ring 3. , , indicates that the instruction is basically valid with prefix. The following codes apply only to x87 instructions (none of them can use prefix). incidates that the opcode performs additional push of a value to the register stack. incidates that the opcode performs additional pop of the register stack. incidates the same like , but pops twice. The instruction mnemonic itself. If there is no mnemonic, it holds additional information about the mnemonic or instruction: If the mnemonic is set up using italic, there is no oficial mnemonic and the present one is just suggested one. , , means that there is no mnemonic for the opcode. means that the opcode is invalid. This option is not used everywhere the opcode is invalid, but only in some cases. means that the behaviour of the instruction is according to official documentation undefined. means that the opcode is treated as integer instruction. It should contain a reference to description of the source. means that the prefix has no meaning (no operation). If there is a mnemonic, it can hold additional attributes of the instruction: means that the instruction is treated as integer instruction (except instructions themselves). It should contain a reference to description of the source. Only geek's editions: means that the opcode is an alias to another opcode. The attribute should be a reference to that instruction. , means not true alias. It should contain a reference to the description of the differences between referenced instructions. Instruction operands. Geek's editions use special operand codes, explained in Instruction Operand Codes chapter below. If an operand is set up using italic, it is an implicit operand, which is not explicitly used. If an operand is set up using boldface, it is modified by the instruction. The instruction extension group, which was the opcode released on: These columns are present only in geek's editions. They classifies the instruction among groups. These groups don't match the instruction groups given by the Intel manual (I found them too loose). One instruction may fit into more groups. instruction extensions technology groups. Note that these groups are just experimental and may change in future. instruction extensions groups. Note that these groups are just experimental and may change in future. instruction extensions groups. Note that these groups are just experimental and may change in future. instruction extensions groups. Note that these groups are just experimental and may change in future. instruction extensions group. Note that these groups are just experimental and may change in future. instruction extensions group. Note that these groups are just experimental and may change in future. instruction extensions group. Note that these groups are just experimental and may change in future. and instruction extensions has no groups at the moment. The grouping may be added in future. For register, indicates these flags using pattern. Present flag fits in with the appropriate group. For flags, indicates these flags using flag pattern. Present flag fits in with the appropriate group. Note that if a flag is present in both Defined and Undefined column, the flag fits in under further conditions, which are not described by this reference. For register, indicates the values of flags, which are always set or cleared, using case-sensitive flag pattern. Lower-case flag means cleared flag, upper-case means set flag. For flags, indicates these flags using flag pattern. Present flag holds its value. Short desciption of the opcode. For now, the descriptions are very general. They will be improved in future perhaps.

These codes come from official codes used in Intel manual Instruction Set Reference, N-Z for Pentium 4 processor, revision 17. The reason of using this particular, out-of-date revision is that the codes from this revision are most apposite ones. In next revisions the codes changed unfortunately. These codes were modified and completed mainly because of the possibility to code operands simultaneously for 64-bit mode. Ideally, it would be the best to make brand new codes, but I'm afraid those wouldn't be widely acceptable.

The State column says if the code is original, added or changed.

The "Geek" part in these tables in the first column indicates codes used in geek's editions and in the source XML document as well. The "Coder" part indicates alternative codes used in coder's editions. These are used also within instruction reference in Intel manual.

The following abbreviations are used for addressing methods: Direct address. The instruction has no ModR/M byte; the address of the operand is encoded in the instruction; no base register, index register, or scaling factor can be applied (for example, far  ( )). Memory addressed by , or by in 64-bit mode (only ). Memory addressed by , or by in 64-bit mode (only ). (This code changed from single in revision 1.00) Memory addressed by or by (only and ) (This code changed from (introduced in 1.00) in revision 1.02) The reg field of the ModR/M byte selects a control register (only  ( ,  )). The reg field of the ModR/M byte selects a debug register (only  ( ,  )). A ModR/M byte follows the opcode and specifies the operand. The operand is either a general-purpose register or a memory address. If it is a memory address, the address is computed from a segment register and any of the following values: a base register, an index register, a scaling factor, or a displacement. (Implies original ). A ModR/M byte follows the opcode and specifies the operand. The operand is either a x87 stack register or a memory address. If it is a memory address, the address is computed from a segment register and any of the following values: a base register, an index register, a scaling factor, or a displacement. (Implies original ). A ModR/M byte follows the opcode and specifies the x87 stack register. The reg field of the ModR/M byte selects a general register (for example,  ( )). The r/m field of the ModR/M byte always selects a general register, regardless of the mod field (for example,  ( )). Immediate data. The operand value is encoded in subsequent bytes of the instruction. The instruction contains a relative offset to be added to the instruction pointer register (for example,  ( ), )). The ModR/M byte may refer only to memory: mod != 11bin ( , , , , , , , , , , , ). The R/M field of the ModR/M byte selects a packed quadword technology register. The instruction has no ModR/M byte; the offset of the operand is coded as a word, double word or quad word (depending on address size attribute) in the instruction. No base register, index register, or scaling factor can be applied (only   ( , , , )). The reg field of the ModR/M byte selects a packed quadword technology register. A ModR/M byte follows the opcode and specifies the operand. The operand is either an technology register or a memory address. If it is a memory address, the address is computed from a segment register and any of the following values: a base register, an index register, a scaling factor, and a displacement. The mod field of the ModR/M byte may refer only to a general register (only  ( - , )). The reg field of the ModR/M byte selects a segment register (only  ( , )). Stack operand, used by instructions which either push an operand to the stack or pop an operand from the stack. Pop-like instructions are, for example, , , , . Push-like are, for example, , , . No Operand type is provided along with this method because it depends on source/destination operand(s). The reg field of the ModR/M byte selects a test register (only  ( , )). The R/M field of the ModR/M byte selects a 128-bit register. The reg field of the ModR/M byte selects a 128-bit register. A ModR/M byte follows the opcode and specifies the operand. The operand is either a 128-bit register or a memory address. If it is a memory address, the address is computed from a segment register and any of the following values: a base register, an index register, a scaling factor, and a displacement Memory addressed by the or by (only , , , and ). In 64-bit mode, only 64-bit ( ) and 32-bit ( ) address sizes are supported. In non-64-bit modes, only 32-bit ( ) and 16-bit ( ) address sizes are supported. Memory addressed by the or by (only , , , , and ). In 64-bit mode, only 64-bit ( ) and 32-bit ( ) address sizes are supported. In non-64-bit modes, only 32-bit ( ) and 16-bit ( ) address sizes are supported. The implicit segment register cannot be overriden by a segment prefix. The instruction has no ModR/M byte; the three least-significant bits of the opcode byte selects a general-purpose register

The following abbreviations are used for addressing methods only in case of direct segment registers and are accessible only in geek's editions as segment register's title. As for source XML document, they are used within atribute of or elements. All of them are added: The two bits at bit index three of the opcode byte selects one of original four segment registers (for example, ). The three least-significant bits of the opcode byte selects segment register , , or (for example, ). The three bits at bit index three of the opcode byte selects segment register or (for example, ).

The following abbreviations are used for operand types: Two one-word operands in memory or two double-word operands in memory, depending on operand-size attribute (only ). Packed- . Only x87 instructions (for example, ). Byte, sign-extended to the size of the destination operand. Byte, sign-extended to the size of the stack pointer (for example,  ( )). Byte or word, depending on operand-size attribute. (unused even by Intel?) Doubleword-integer. Only x87 instructions (for example, ). Double-quadword, regardless of operand-size attribute (for example, ). Doubleword, or quadword, promoted by in 64-bit mode (for example, ). Double-real. Only x87 instructions (for example, ). Doubleword, sign-extended to 64 bits (for example,  ( ). Extended-real. Only x87 instructions (for example, ). 32-bit or 48-bit pointer, depending on operand-size attribute (for example,  ( ). 32-bit or 48-bit pointer, depending on operand-size attribute, or 80-bit far pointer, promoted by in 64-bit mode (for example,  ( )). Quadword, regardless of operand-size attribute (for example,  ( )). Qword-integer. Only x87 instructions (for example, ). Quadword, promoted by (for example, ). 6-byte pseudo-descriptor, or 10-byte pseudo-descriptor in 64-bit mode (for example, ). Single-real. Only x87 instructions (for example, ). Word or doubleword, depending on operand-size attribute (for example,  ( ),  ( )). Word or doubleword, depending on operand-size attribute, or doubleword, sign-extended to 64 bits for 64-bit operand size. Quadword (default) or word if operand-size prefix is used (for example,  ( )). Word or doubleword, depending on operand-size attribute, or quadword, promoted by in 64-bit mode. Word or doubleword sign extended to the size of the stack pointer (for example,  ( )). Word, regardless of operand-size attribute (for example, ). Word-integer. Only x87 instructions (for example, ).

The following abbreviations are used for operand types and are accessible only in geek's editions as operand's code title. They are issued to indicate a dependency on address-size attribute instead of operand-size attribute. As for source XML document, they are used within atribute of or elements. All of them are added: Word or doubleword, according to address-size attribute (only and families). Doubleword or quadword, according to address-size attribute (only and families). Word, according to address-size attribute (only instruction). Word, according to current stack size (only and instructions in 64-bit mode). Doubleword, according to address-size attribute (only instruction). Quadword, according to address-size attribute (only instruction). Quadword, according to current stack size (only and instructions).

In this version, the reference is almost complete. It contains general, system, , MMX, , , , , , , , and instructions (both one-byte and two-byte ones). We are working on -specific instructions and Intel instructions now.

The and * instruction classification among groups is considered experimental and may change in future.

Note that from the point of project's progress, modifications of any of editions is almost useless. A edition is just a result of transformation of source XML file, so all modifications need to be done there.

Bukowski's disassembler is first public implementation of the XML reference.

Mediana, maintained by Mikae, is table-based x86/x86-64 disassembler engine. However, the transformation from source XML file is not a part of the project.

Since version 1.12, the reference is licensed under GPL-3.0. For more see its GitHub repository.

The old license (used up to version 1.12) is not available anymore.

This reference has been completed using the following resources:

Thanks to all these geeks involved in some way in this project:

Christian Ludloff: maintainer of Sandpile.org site, one of important sources for this project

Miloslav Ponkrác: helped with PHP and JavaScript on this site

The source files can be downloaded from GitHub repository.

My contact information is here.|||

This reference is intended to be precise opcode and instruction set
  reference (including x86-64). Its principal aim is exact definition
  of instruction parameters and attributes.