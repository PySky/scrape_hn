I was a fan of MUDs from my earliest introduction to computers. I remember writing to Richard Bartle when I was young asking about the possiblity of accessing MUD1 from New Zealand after having read about it in a magazine. The reply was very positive but unfortunately the cost of 300 baud modem access at international phone rates was prohibitive. It was later in life that my first use of the internet and a shell account on my ISP was to compile and run a MUD client.

The MOO variants of MUDs are particularly interesting as they are multi user, programmable, interactive systems. They're like IRC where users can create objects, rooms and worlds by writing programs within the system. This resulted in systems with interesting programming systems with permission models for different levels of users. Content, including code, was stored in a persistent object database. LambdaMOO was a very popular instance of a MOO.

A while back I stumbled across 3-Move, a multi user networked online text-based programmable environment, by Tony Garnock-Jones. It's a neat system that includes:

There's not much written in the way of documentation on getting it running so this post documents how I got it working. It appears to not be actively developed anymore but it's a nice small system to learn from.

This produces the executable which is the virtual machine and a which is a helper program to clean up database checkpoint files.

The executable requires a database as an argument. This database stores the state of the persistent world. It's loaded in memory when is run and can be saved by occasionally checkpointing the system. Optional arguments are source code files that are compiled and executed.

In the db directory are a number of source files that contain the code for a multi user virtual environment. The command parser, socket usage, line editor, etc are all written in these files.

To create an initial database there is a script that creates a database with the content of the file. It can be run with:

This creates the database in a file, , and a symbolic link to the executable in the current directory for easy execution. All the script does is run on files in the right order to build the database. It's equivalent to:

Each run of creates a new database called , containing the state of the old database plus any changes made by the . This is then renamed back to and run again on the next file. The end result is a complete database with a default virtual environment.

With the database built the system can be run with:

It calls the and functions to before calling to ensure that the system can access the default "Wizard" user which has full permissions to call the socket related functions.

is implemented in login.move. It creates a server socket that accepts connections on port . It can be connected to via , , or similar program:

The database only contains one user, , to begin with. It has no password:

The command can be used to find out what commands can be sent to objects:

is another useful verb for finding out internal details of an object:

It's important to set a password when first logging in:

A multi user environment without other users isn't much fun. Guest users can be added with:

These are special users in that any login name of will pick from the current guest users that are not logged in. This allows people to explore the system without creating a user. Specific users can also be created:

Here's an example interaction of the user logging in:

Wizards can create rooms and routes to them with :

Normal users can create rooms but can't dig paths to the new room inside an existing room they didn't create themselves. They can use to go to the room created and build up rooms from there. A friendly Wizard can link the rooms later if desired. The room logic is in room.move.

Programs can be written and executed within the environment. This is done by creating a object, editing it and compiling it:

This "hello world" example gets the current user with and calls the method which sends output to that users connection.

The code for the object is in program.move. Note that the verb wraps the code from the program inside a " ". can be set using the verb on a program. This enables writing programs that can add verbs to objects. The tricks subdirectory has some example of this, for example ps.verbs.move that adds the verb to the target:

If that text is copied and pasted into a program, then can be added to an object with:

All changes to the system are done in memory. A method should be called occasionally to save the current state of the database. An example of how to do this is in checkpoint.move but it can also be done by any Wizard calling .

Checkpoints don't overwrite the existing database - they save to a new file of the form , where is an incrementing number. When restarting a system it's important to use the last checkpoint to start from.

The programming language used by 3-Move is undocumented but it's pretty easy to follow from the examples. The primitives can be seen in the files in the move directory. Functions are of the form:

The system uses a prototype object system. Objects are created by calling on an existing object:

Objects can have fields. These are defined as:

Fields are accessed using the dot operator ( ) and methods with the colon operator ( ). There are separate namespace for fields and methods.

Objects and fields can have flags set to control permissions. An example from the source:

From within a method it's possible to query the user that called it and from there dynamically check permissions:

This ensures that can only be called on the object if the caller is the owner of the object and if they are a privileged user. Another example is:

Here can only be called if the object is world writeable, or group writeable and the caller is a member of the group, or owner writeable and the caller is the owner, or the caller is privileged.

Objects can also have flags set:

Anonymous functions and higher order functions are available. Unfortunately there's no REPL but snippets can be tested in objects when logged in, or added to a file and executed against the database. The result will be printed as part of the output:

Lightweight threads are spawned using and . The first version, takes a function to spawn in the background. It uses a default CPU quota of 15,000 cycles before it terminates:

Threads are saved in the database when checkpointed and resumed when the database is started. allows setting a quota value other than the default of 15,000 cycles. It also allows three special values. A quota value of means the thread should exit as soon as possible. means the thread should run forever, with no quota, and can be checkpointed and resumed on restart like normal threads. A value of means the thread runs forever but is not checkpointed and therefore not resumed at startup.

The language has support for first class continuations via the primitive. This works the same as the scheme call-with-current-continuation function. An example from the wikipedia page:

There is a tricks directory that contains utility code and examples. This includes an http server written in , code for sending mail via smtp, and some bot examples.

The move language looks quite nice. I suspect it'd be useful for things other than virtual worlds - server side applications that can be extended with scripts safely are a common use case. I've put an example server on port to experiment with. There are a few guest accounts configured:

There's a port for SSL connections on 7778 that can be connected via:

The SSL connection was set up on the server using socat to forward to the 7777 port:|||

