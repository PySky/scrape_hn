C values come in two types: lvalues and rvalues. The intuitive way to think of this is that lvalues are the things allowed on the left side of expressions, and rvalues are the things allowed on the right side. For instance, consider the following two assignment statements:

The first assignment statement is legal because is an lvalue and 1 is an rvalue, and everything appears in the right place. The second assignment statement is illegal because it has an rvalue on the left-hand side. In fact, if you try to compile this code you’ll get a cryptic error explaining this:

Literals like , , and are normally rvalues. This means that literals can only appear on the right side of an assignment expression. However, there’s one corner case: string literals (e.g. ) are actually lvalues!

To understand why, we need to understand what the type of a string literal is in C. You might assume that a string literal has type or , but that’s wrong. In C, a string literal has type . There are a few different reasons why this makes sense, but one way to think about this is how the operator is supposed to work on a string literal. Consider the following C program; what do you think will be printed to the screen?

This program actually prints , because 6 is the length of the string , including the terminating null byte. If string literals were pointer types, then this would just print the size of a pointer, which would be 4 for a 32-bit system or 8 for a 64-bit system. Since string literals are actually arrays, the operator can instead print the actual size of the array, which is the string length in this case. This is very convenient, since it allows compile-time substitution of the size of string literals, which arises frequently.

Another reason that string literals should be array types, rather than pointer types, is that it lets them be used in array contexts. For instance, you can write code like this, which only works if string literals are arrays:

In general, array types in C will automatically decay into pointer types if necessary. For instance, the parameter for is a const pointer:

When passing a string literal like to , the value decays from a to a . This works because arrays decay into pointer types, and non-const values can be used in const contexts. Thus an expression like is perfectly valid, even though is really an array, not a pointer.

Arrays are always lvalues (since they must have an address in memory), and thus C string literals are also lvalues.

The following program is legal according to the C spec, but is logically invalid:

When compiling this program, GCC gives a warning (“warning: assignment of read-only location”), but still produces an executable. The executable terminates with a segmentation fault when run. What actually happens though, when we run a program like this? GDB shows the following disassembly when the program crashes:

This is showing us that the compiler is trying to write a single zero byte to memory location 0x400530. We can ask GDB what’s mapped at this memory location, but the output isn’t too useful:

This isn’t useful because we see the range that 0x400530 is mapped at, but not what permissions that range is mapped with. To see the permissions, we need to look at :

This shows that memory address 0x400530 is mapped with permissions , which means that the memory location is readable and executable, but not writable. In other words, the compiler has generated valid code, but the linker has arranged the memory layout such that the generated code will segfault. This is a weird idiosyncrasy of C: the language standard generally pretends like linkers don’t exist, even though in practice linking has a big effect on the runtime behavior of programs.

As a minor (but important) point of trivia, the type of string literals in C++ is different from C. In C, a string literal has type . In C++, a string literal has type .

The fact that C++ makes a string literal into a const value improves things somewhat. For instance, if you compile the previous example with a C++ compiler, you should get a compiler error (rather than a warning), since mutating const values is strictly prohibited. As always you can easily circumvent these checks with type casts or aliased pointers, so you still need to exercise caution.

For completeness, I should also add that while C++ has lvalues and rvalues, it further subdivides them into a much more complicated value category zoo, with exotic types like glvalues and xvalues.|||

