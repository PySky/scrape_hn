“There is nothing called state. There are events and the story we tell about what it means.”

Flux allows you to quickly build an application in CQRS way without the hassle of a messaging system like RabbitMQ or Kafka inbetween your command and read model services.

It’s a good practice to have one command service per Aggregate (as per DDD terminology) and various read model/view services. the command service stores the events that are emited by each command and expose the same as a json feed for the consumers (read model services) to consume in regular intervals allowing you to easily decouple commands and “read model” services.

Flux suggests that you use one service per Aggregate, which accepts commands and publishes events.

This is how you can define an aggregate in Flux:

The last argument is an EventStore, which provides an implementation to store and retrieve events - there are 2 implementations at the moment an inmemory one and a boltdb implementation

Once you have the aggregate initialized, you can execute commands on it which will in turn emit events, make sure to update the state of the aggregate through a handler method (prefixed with the name Handle) on the aggregate

Feed handler allows you to publish the events as a json feed for the outside world.

Same feed exposed by the endpoint /events is as below

Event consumer allows you to consumer the events emitted by the aggreate in another service. you can start the event consumer like shown below, in the below example the consumer polls the aggregate service every 5 seconds to check for new events.

You could pause,resume & stop the consumer

Read model is nothing but the result of how you interpret the events provided by the consumer shown above.

There is a simple example application here if you would like to refer|||

