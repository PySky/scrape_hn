A fast, efficient Python library for generating country, province and state specific sets of holidays on the fly. It aims to make determining whether a specific date is a holiday as fast and flexible as possible.

# HolidayBase class and define your own _populate(year) method. See below

# For more complex logic like 4th Monday of January, you can inherit the

# 2) a list of dates (in any format: date, datetime, string, integer),

# of using the pre-defined countries/states/provinces available

# Easily create custom Holiday objects with your own dates instead

# The Holiday class will also recognize strings of any format

The latest stable version can always be installed or updated via pip:

If the above fails, please use easy_install instead:

datetime date holidays date( , , ) holidays.US() date( , , ) holidays.US() But this is not efficient because it is initializing a new Holiday object and generating a list of all the holidays in 2014 during each comparison It is more efficient to create the object only once us_holidays holidays.US() date( , , ) us_holidays date( , , ) us_holidays Each country has two class names that can be called--a full name and an abbreviation. Use whichever you prefer. holidays.UnitedStates() holidays.US() holidays.Canada() holidays.CA() holidays.US() holidays.CA() Let's print out the holidays in 2014 specific to California, USA date, name (holidays.US( , ).items()): date, name New Year Martin Luther King, Jr. Day Susan B. Anthony Day Washington César Chávez Day Memorial Day Independence Day Labor Day Columbus Day Veterans Day Thanksgiving Christmas Day So far we've only checked holidays in 2014 so that's the only year the us_holidays.years ([ ]) (us_holidays) Because by default the `expand` param is True the Holiday object will add holidays from other years as they are required. date( , , ) us_holidays us_holidays.years ([ , ]) (us_holidays) If we change the `expand` param to False the Holiday object will no longer us_holidays.expand date( , , ) us_holidays us.holidays.expand date( , , ) us_holidays January 1st, 2012 fell on a Sunday so the statutory holiday was observed on the 2nd. By default the `observed` param is True so the holiday list date( , , ) us_holidays us_holidays[date( , , )] date( , , ) us_holidays us_holidays.get(date( , , )) The `observed` and `expand` values can both be changed on the fly and the holiday list will be adjusted accordingly us_holidays.observed date( , , ) us_holidays us_holidays.observed date( , , ) us_holidays Holiday objects can be added together and the resulting object will generate the holidays from all of the initial objects north_america holidays.CA() holidays.US() holidays.MX() north_america.get( ) north_america.get( ) The other form of addition is also available north_america holidays.Canada() north_america holidays.UnitedStates() north_america holidays.Mexico() north_america.country [ , , ] We can even get a set of holidays that include all the province- or a ([holidays.CA( x) x holidays. . ]) a.prov [ , , , , , , , , , , , , ] Sometimes we may not be able to use the official federal statutory holiday list in our code. Let's pretend we work for a company that does not include Columbus Day as a statutory holiday but does include "Ninja Turtle Day" on July 13th. We can create a new class that inherits the UnitedStates class and the only method we need to override is _populate() dateutil.relativedelta relativedelta ( . ): ( , ): Populate the holiday list with the default US holidays holidays.UnitedStates._populate( , year) .pop(date(year, , ) relativedelta( MO( )), ) [date(year, , )] date( , , ) Holidays( ) date( , , ) CorporateHolidays( ) date( , , ) Holidays( ) date( , , ) CorporateHolidays( ) We can also inherit from the HolidayBase class which has an empty _populate method so we start with no holidays and must define them all ourself. This is how we would create a holidays class for a country that is not supported yet. ( . ): ( , ): [date(year, , )] [date(year, , )] hdays NewCountryHolidays() We can also include prov/state specific holidays in our new class. ( . ): ( , ): .prov : .prov [date(year, , )] .prov : [date(year, , )] .prov : [date(year, , )] hdays NewCountryHolidays() hdays NewCountryHolidays( ) If you write the code necessary to create a holiday class for a country not currently supported please contribute your code to the project! Perhaps you just have a list of dates that are holidays and want to turn them into a Holiday class to access all the useful functionality. You can use the append() method which accepts a dictionary of {date: name} pairs, a list of dates, or even singular date/string/timestamp objects. custom_holidays holidays.HolidaysBase() custom_holidays.append([ , ]) custom_holidays.append(date( , , ))|||

python-holidays - Generate and work with holidays in Python