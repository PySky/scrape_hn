This post is the first of a series that will discuss coroutines in python, and how to leverage them to solve data crunching problems elegantly. Later in the series, We'll discuss native asynchronous programming introduced in PEP 492 (Coroutines with async and await syntax).

The first post will introduce coroutines, and explain a bit about how they work and how to use them.

! : The first few chapters are dedicated to python 2, and are heavily influenced by David Beazley's talk - A Curious Course on Coroutines and Concurrency.

In Python 2.5, generators picked up some new features to allow "coroutines" (PEP-342). Most notably: new , & methods, that allowed functions to consume values sent into it.

As David mentioned, If Python books are any guide, this is the most poorly documented, obscure, and apparently useless feature of Python.

The following example shows a naive usage of a coroutine:

Although, syntactically, generators and coroutines are similar, they are fundamentally different. You can mix and match both concepts - i.e: cause a function to generate and consume values.

The following example illustrates a "generator" that produces and receives values:

Although it works, its hard to follow and flaky:

Try to avoid mixing both concepts. remember:

All coroutines need to get "bootstrapped" by first calling or . These calls advance the function execution to the location of the first yield expression.

Remembering to bootstrap the coroutine is easy to forget. This is easily solved by wrapping coroutines with a decorator:

Now, our example will be simpler:

A coroutine might run indefinitely. Use to shut it down. otherwise, the garbage collector will do it for you.

As opposed to regular functions, when a coroutine is closed, a exception is thrown, and every subsequent or call raises a exception.

Errors are supported in coroutines, and behave like you expect:

You can also cause a coroutine to raise an exception:

is used to raise an exception inside the generator; the exception is raised by the yield expression where the generatorâ€™s execution is paused.

Let's look at the byte code:

You've probably noticed that the opcode is used for both consuming and producing data. Although generators and coroutines are different, they share a lot of code behind the scenes.

That's the reason why the coroutine has two opcodes, rather then one for consuming, and one for producing.

In other words, the distinction between generators and coroutines is mostly conceptual.

Go ahead and read the next part of the series, coroutines: pipelines & data flow.|||

