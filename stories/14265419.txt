At LogoGrab, our workflow is very computational-intensive, so we approach the different cloud offerings available to us in a pragmatic way. We do this by leveraging the competition on the market to align with our client requirements in terms of speed, privacy, and cost. The result is a hybrid cloud approach that uses a combination of cloud providers with different APIs and specifications. This blog series will explore how we can unify the resources into one tool to manage the mental overhead of our engineers at LogoGrab (including myself!).

In this first post, we will explore the use of Haskell as a vessel for implementing this tool. Haskell is chosen as the language of implementation due to the type safety and patterns this particular functional programming offers. It is also a language that I have become quite familiar with over the past few years. 

 



As a first step in unifying the diverse cloud providers I chose to write an SDK for one of them called Scaleway so that we can view this set of servers in our final implementation of the tool, and since it didn’t exist for Haskell, we had to roll our own. You can find the current implementation of the SDK here.

I’m going to focus on one particular aspect of the code instead of the whole code base. Let’s look at how the requests can be made type safe, preventing a user to provide the wrong kind of resource ID when retrieving a certain type of resource.

To start off, the request functions looked like the following snippets of code:

There's already too much duplication here, so let's refactor this code a bit to make our code more concise.

Obviously we won't get away with this because we have an sitting there instead our . The problem here is that we need be able to get our ID from our Resource ID types.

To shed more light on the issue, our Resource ID types are defined as:

We need some way of unpacking the from our types here. To solve this, I came up with a typeclass that would give us the desired behavior:

So let's see what the instances for this typeclass will be:

Now we can revisit our function:

Making our other retrieve functions even simpler!

The only thing is, and have no way of relating to each other. For example, we could provide as the and give . In the same fell swoop we will get rid of the need to pass the value. To go about this we will introduce General Algebraic Data Types (GADTs) and the DataKinds extension.

We now have types that are explicitly related to the resources. So let us take a look at the types of our functions once again:

If we recall from before had a type constraint so we need to make an instance for our new types:

We have gotten as far getting the ID for the resource, but we said we would also get rid of that pesky string value. Well here it is: typeclasses to the rescue again!

Now we can write our final definition for and our other functions:

Our final touch is to add some smart constructors to construct our types:

This solution gives us two benefits:

After that whirlwind of code we have come to the end of this post. We touched lightly on the idea of a hybrid cloud and the pursuit of unifying this diverse land into one tool. We have also seen how Haskell can provide us with type safety by encoding our actions in the type system via GADTs and DataKinds.

Since I am no expert at Haskell, feel free to drop a line if you have any comments or suggestions (or even better: make a PR on the github repo!)

In the next episode of this series we will look at how we can dispel any fear of writing Haskell by exploring a tutorial on how to use Amazonka, the Haskell client library for Amazon Web Services. You can look forward to exploring documentation and becoming more comfortable with the GHCI REPL. The tutorial will show how we can make requests using Amazonka and convert the results into our own domain type, in this case, a LogoGrab Instance.

For more information about Haskell you can check out https://www.haskell.org/, https://www.fpcomplete.com/haskell http://www.haskellbook.com, or swing by http://www.fpchat.com/.|||

At LogoGrab, our workflow is very computational-intensive, so we approach the different cloud offerings available to us in a pragmatic way.