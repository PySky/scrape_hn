In my previous article Getting Started with Jenkins and GitHub I showed you how to create your first Jenkins job and download the source of your project from GitHub. If your projects are stored in TFS, you can read how to setup your Jenkins job for TFS here: Integrate Jenkins with Team Foundation Server. The next logical step in your build will be to build your solution or projects. I will guide you how to do it via MSBuild as build engine and NuGet for downloading the necessary packages.

For MSBuild, Version  chooses the configuration that you have created – MSBuild.exe

 For MSBuild Build File – enter the path to the project/solution that needs to be built in the format – ${WORKSPACE}\PhantomTube\PhantomTube.sln (${WORKSPACE} is a Jenkins variable that contains the default workspace location)

 In Command Line Arguments – you can enter MSBuild.exe arguments that you use when you build your project through the command line. For example /p:Configuration=Release is going to build your project in Release mode. Or you can increase the logging verbosity, etc.



To restore NuGet packages, you have a couple of options. You can try some of the available plugins. However, my preferred approach is to use Windows batch command. 

 First you need to download the NuGet.exe which you are going to use for the operation.

 You need to paste a command like the following in the Command text box: “C:\J\Nuget\NuGet_2.81.exe restore “C:\J\jobs\PhantomTube\workspace\PhantomTube\PhantomTube.sln“”

 The step should be moved above the MSBuild step because in order the build to be successful you are going to need all package downloaded beforehand.



Now you are ready to test your setup. Open your job from the link listed on the. Click thebutton.If you open the console output, you can check the status of your build.|||

Tutorial with images and explanations how to build .NET project with MSBuild and download necessary packages via NuGet through Jenkins job.