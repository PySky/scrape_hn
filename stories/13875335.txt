Python 3's uptake is dramatically on the rise rise these days, and I think therefore that it is a good time to take a look at some data structures that Python 3 offers, but that are not available in Python 2.

We will take a look at , and , all of which are new to Python 3.

is a supercharged version of the venerable and while it was added in Python 3.5, it really came into its own in Python 3.6.

In comparions to , gives you (Python >= 3.6):

See an illustrative example below:

I like the class-based syntax compared to the old function-based syntax, and find this much more readable.

The class is a subclass of , so it can be handled like any normal :

A more advanced example, subclassing and using default values (note: default values require Python >= 3.6.1):

In short, this modern version of namedtuples is just super-nice, and will no doubt become the standard namedtuple variation in the future.

See the docs for further details.

is used as a read-only dict and was added in Python 3.3.

That is read-only means that it can't be directly manipulated and if users want to make changes, they have to deliberately make a copy, and make changes to that copy. This is perfect if you're handing a -like structure over to a data consumer, and you want to ensure that the data consumer is not unintentionally changing the original data. This is often extremely useful, as cases of data consumers changing passed-in data structures leads to very obscure bugs in your code that are difficult to track down.

Note that the example shows that the object cannot be directly changed.

So, if you want to deliver data dicts to different functions or threads and want to ensure that a function is not changing data that is also used by another function, you can just deliver a object to all functions, rather than the original , and the data dict now cannot be changed unintentionally. An example illustrates this usage of :

If you send in a to instead, however, attempts to change the dict will result in an error:

We now see that we have to correct the code in to first copy and then alter the copied dict to avoid this error. This feature of is great, as it helps us avoid a whole class of difficult-to-find bugs.

Note though that while is read-only, it is not immutable, so if you change , will change too:

We see that is actually a view of the underlying , and is not an independent object. This is something to be aware of. See the docs for further details.

is a simple class that provides attribute access to its namespace, as well as a meaningful repr. It was added in Python 3.3.

In short, is just a ultra-simple class, allowing you to set, change and delete attributes while it also provides a nice repr output string.

I sometimes use this as an easier-to-read-and-write alternative to . More and more though, I subclass it to get the flexible instantiation and repr output for free:

This subclassing of is not revolutionary really, but it can save on a few lines of text in some very common cases, which is nice. See the docs for details.

I hope you enjoyed this little walkthrough of some new data structures in Python 3.

The article has been positively mentioned on the Python Bytes podcast at around the 6:00 min. mark. Thanks!

A Korean translation of this article has been made, courtesy of mnpk. Thanks!

A Russian translation of this article has been made, courtesy of olshevskiy87. Thanks!|||

Articles - Programming articles (Python mostly)