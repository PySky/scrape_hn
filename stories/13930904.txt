Like most software systems, cryptographic toolkits are built in layers. In my experience many people, even software developers, don’t understand the difference among the various crypto layers or when and how to use them. When bugs arise in algorithms, protocols, or libraries, it’s important to know what layer those bugs are in, or we might incorrectly blame the lower layer for “letting” the higher layer do something wrong.

In brief, here’s my way of thinking about the layers of crypto, from least abstract to most abstract. In reality, it’s not actually this neat and tidy, but let’s take a stab at it:

At each layer in this stack, some developer somewhere can take some action that the previous layer didn’t stop them from taking. That’s just the reality of programming. In the space between 5 and 6, WhatsApp got a lot of bad press for making different choices from Signal about how it does key rotation (even though it wasn’t a mistake or a back door). Similarly, people usually even mess up deployment of HTTPS.

Despite Java having implemented AES many years ago, its libraries (layer 3) are so vague that they’re super easy to use wrong, and so everyone uses them wrong. In fact, most people skip layers 4 and 5 and just start hacking away on layer 6. When this happens, they barely know what security properties they’re looking for and it’s not going to be secure. Your above average programmer simply can’t pick up an AES library and use it to secure a piece of software. The bigger the conceptual distance between these layers, the bigger the mistakes.

When it comes to Java, we saw an opportunity to be helpful and add a layer 4/5 with our AES library for strings in Android. It’s very short, very opinionated about how to do things right, and it makes a lot of choices for you. It also can’t be used for anything besides encrypting strings in Java using AES, unlike layer 3 which has the kitchen sink. That’s always the trade-off with climbing up the abstraction layers. It tries not to let the conceptual details of the algorithm leak all the way up to the application where they can be misused.

Similarly, and on a much larger scale, crypto_box from NaCL combines a set of algorithms in a meaningful way to get what you probably actually want. PGP handles keys, signatures, and both symmetric and asymmetric ciphers. OpenSSL provide the crypto for a vast array of different protocols and applications, including email, HTTPS, files, and chat.

I like to point to Signal because they did a great job of really thinking through and owning layers 4 through 6. They had specific application-layer goals and built them. That’s also what Tozny is doing with E3DB, our end-to-end encrypted database.

Cryptol by our parent company Galois is a programming language that shortens the conceptual distance between the math and the algorithm and provides the SAW workbench to prove the next step up. Amazon used this for their TLS implementation with great results.

In a recent blog post, esteemed crypto guru Scott Arciszewski charged that “JOSE is a bad standard that everyone should avoid.” His blog post has been updated a few times, but as of this writing, his current argument attacks the “standard” at different layers and conceptual gaps. In summary (and with massive amounts of interpretation on my part):

His criticisms and recommendations make it clear that he’s arguing to close the conceptual gap between 2 and 6. He argues JOSE is a bad “5” and a good “5” would offer combinations of ciphers and operations that are always mutually consistent. He knows what he’s talking about and has done a lot of work to close similar gaps. But, his post is a long way from being convincing about its claims.

JOSE is a solid standard. It’s been implemented very widely and successfully by awesome protocol engineers, cryptographers, and developers. But the sad fact remains: Crypto software for programmers sucks.

There are few good tools that close the most important gaps, and it’s been bad for a long time. But it’s getting better. libSodium firmly sits between 3 and 4 and closes some of that distance.  Toolkits like the Whisper protocol are fantastic for very specific applications because they close the gap all the way up to 5+. In my humble opinion, we need more and better protocols that do a good job solving specific problems at that level so programmers can build better applications.

Tozny is building an end-to-end encrypted database for storing and sharing sensitive data. Take a look at our examples where you can implement end-to-end sharing of data in a few lines of code, without listing  a single crypto cipher. The goal is to let you store data for later retrieval on a demand or on a publish-subscribe basis, but to work at a simple name/value pair basis like a regular NoSQL database.

When we do a full release, you can use Project E3DB for any type of data storage.

We do use JWE standards in our implementation because we want to remain flexible about the ciphers we offer going forward. This is important for interfacing with crypto systems that are not under our complete control, but we narrow the scope of JWE significantly so that only secure combinations of ciphers can be used for their appropriate purpose.

E3DB is going to be awesome. Come try it out.|||

JOSE is a solid standard. It’s been implemented widely and successfully by awesome protocol engineers, cryptographers, and developers.