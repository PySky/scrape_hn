Initially, didn't accept any option and didn't expand anything. All it was doing was outputting its arguments separated by a space character and terminated by a newline character.

Now, someone thought it would be nice if we could do things like to output newline or tab characters, or have an option not to output the trailing newline character.

They then thought harder but instead of adding that functionality to the shell (like where inside double quotes, actually means a tab character), they added it to .

David Korn realized the mistake and introduced a new form of shell quotes: which was later copied by and but it was far too late by that time.

Now when a standard Unix receives an argument which contains the two characters and , instead of outputting them, it outputs a tab character. And as soon as it sees in an argument, it stops outputting (so the trailing newline is not output either).

Other shells/Unix vendors/versions chose to do it differently: they added a option to expand escape sequences, and a option to not output the trailing newline. Some have a to disable escape sequences, some have but not , the list of escape sequences supported by one implementation is not necessarily the same as supported by another.

Sven Mascheck has a nice page that shows the extent of the problem.

On those implementations that support options, there's generally no support of a to mark the end of options (zsh and possibly others support for that though), so for instance, it's difficult to output with in many shells.

On some shells like 1 or 2 or ( variable), the behavior even depends on how the shell was compiled or the environment (GNU 's behaviour will also change if is in the environment). So two s, even from the same version of are not guaranteed to behave the same.

POSIX says: if the first argument is or any argument contains backslashes, then the behavior is unspecified. echo in that regard is not POSIX in that for instance is not outputting as POSIX requires. The Unix specification is stricter, it prohibits and requires expansion of some escape sequences including the one to stop outputting.

Those specifications don't really come to the rescue here given that many implementations are not compliant.

All in all, you don't know what will output unless you can make sure that doesn't contain backslash characters and doesn't start with . The POSIX specification actually does tell us to use instead in that case.

So what that means is that you can't use to display uncontrolled data. In other words, if you're writing a script and it is taking external input (from the user as arguments, or file names from the file system...), you can't use to display it.

This is OK:

This is not:

(Though it will work OK with some (non Unix) implementations like 's when the option has not been enabled in one way or another like at compilation time or via the environment).

, on the other hand is more reliable, at least when it's limited to the basic usage of .

Will output the content of followed by a newline character regardless of what character it may contain.

Will output it without the trailing newline character.

Now, there also are differences between implementations. There's a core of features that is specified by POSIX, but then there are a lot of extensions. For instance, some support a to quote the arguments but how it's done varies from shell to shell, some support for unicode characters. The behavior varies for in multi-byte locales, there are at least three different outcomes for

But in the end, if you stick to the POSIX feature set of and don't try doing anything too fancy with it, you're out of trouble.

But remember the first argument is the format, so shouldn't contain variable/uncontrolled data.

A more reliable can be implemented using , like:

The subshell (which implies spawning an extra process in most shell implementations) can be avoided using with many shells, or by writing it like:

With , at run time, there are two things that control the behaviour or (beside or redefining as a function or alias): the option and whether is in posix mode. mode can be enabled if is called as or if is in the environment or with the the option:

It still honours and (and ):

This time, is both POSIX and Unix conformant. Note that in POSIX mode, is still not POSIX conformant as it doesn't output in:

The default values for xpg_echo and posix can be defined at compilation time with the and options to the script. That's typically what recent versions of OS/X do to build their . No Unix/Linux implementation/distribution in their right mind would typically do that for though.

In , whether expands escape sequences or not and recognises options depends on the content of .

If contains a component that contains or before the or component then it behave the SysV/Unix way (expands sequences, doesn't accept options). If it finds or first, then it behaves the BSD3 way ( to enable expansion, recognises ). The default is system dependant, BSD on Debian:

The reference to BSD for the handling of the option is misleading here. All those different and incompatible behaviours were all introduced at Bell labs:

BSDs just descended from Unix V7. FreeBSD still doesn't support , though it does support like Unix V7 did.|||

