[The framework] lets us write our UIs as pure function of their states. Right now we write UIs by poking at them, manually mutating their properties when something changes, adding and removing views, etc. This is fragile and error-prone. […] [The framework] lets us describe our entire UI for a given state, and then it does the hard work of figuring out what needs to change. It abstracts all the fragile, error-prone code out away from us.

If you are using CocoaPods:

Add the following to your Podfile:

If you are using Carthage:

Then add the following line to your :

Download and drop folder in your project.

Remember to import the Render framework in your source files.

Render’s building blocks are Components (described in the protocol ) and its layout engine is based on Yoga.

This is what a component looks like:

The view description is defined by the method.

is an abstraction around views of any sort that knows how to build, configure and layout the view when necessary.

Every time is called, a new tree is constructed, compared to the existing tree and only the required changes to the actual view hierarchy are performed - if you have a static view hierarchy, you might want pass the ‘.preventViewHierarchyDiff’ option to skip this part of the rendering . Also the closure passed as argument is re-applied to every view defined in the method and the layout is re-computed based on the nodes’ flexbox attributes.

The component above would render to:

Check the demo project for more examples

Components are plain UIViews, so they can be used inside a vanilla view hierarchy with autolayout or layoutSubviews. Similarly plain vanilla UIViews (UIKit components or custom ones) can be wrapped in a .

The framework doesn’t force you to use the Component abstraction. You can use normal UIViews with autolayout inside a component or vice versa. This is probably one of the biggest difference from Facebook’s .

Render’s function is performed on the main thread. Diff+Reconciliation+Layout+Configuration runs usually under 16ms for a component with a complex view hierarchy on a iPhone 4S, which makes it suitable for cells implementation (with a smooth scrolling).

You can wrap your components in or and use the classic dataSource/delegate pattern for you view controller.

You can quickly leverage the efficiency of UITableView and its cell reuse capabilities by using TableNode as the container node for your children. In this way the node’s subnodes will be wrapped inside UITableViewCollectionCells.

Size, margins and padding can now be expressed as a % of the parent.

Buffer is a μ-framework for efficient array diffs, collection observation and data source implementation. It exposes a declarative API for UITableView and UICollectionView. This is an example of how to use Buffer with Render’s ComponentViews.

Dispatch is a Flux-like implementation of the unidirectional data flow architecture in Swift. In this architecture views are simple function of your state - this works especially well with Render’s declarative programming style.

Checkout the TodoApp example to see how to get the best out of Dispatch and Render.

ReSwift is a Redux-like implementation of the unidirectional data flow architecture in Swift.|||

