The fxruby library is an excellent wrapper for the FOX Toolkit. However, it reflects the C++-ness of FOX, rather than being more Ruby-like. As such, creating composed objects with it tends to be rather cumbersome, given its C++ roots. For every new component you create with fxruby, you are handed back a reference to that object, which you’ll need to store somewhere. And then all the subsequent child objects will need to be passed pointers to the parent objects.

So, if you need to redo a layout, it becomes a messy exercise.

fxruby-enhancement makes this a snap to do. You simply declare your GUI arrangement in a nested fashion. fxruby-enhancement will take care of passing parents to the nested children, and other issues as well. You can now focus on creating your great GUI layout that you can change on the fly without much fuss and bother.

fxruby-enhancement (also referred to as “Enhancement”) is basically a DSL of sorts, and every effort has been taken to make it intuitive to use. Once you get the hang of it, you should be able to look at the FXRuby API documentation and infer the DSL construct for fxruby-enhancement. Please also see the many examples.

Enhancement basically leverages Ruby’s singleton feature, and eliminates the need to “subclass” the FXRuby objects and the like. In fact, you might even consider this Enhancement’s own “paradigm” for doing GUI programming.

Your input and criticisms are more than welcome. Feel free to raise issues on GitHub. I have not anticipated all the ways someone might try to use Enhancement. I am making heavy use of Enhancement in my RubyNEAT project – which is why I created it.

Requirements: You must have Fox16 installed on your system. Depending on your operating system, the details will vary. And currently on MacOSX you will also need to install X-Windows. Here, we link you to the details provided by FXRuby for your particular environment:

To install the gem from commandline:

fxruby-enhacement depends on fxruby version 1.6, and will automatically include it. However fxruby has a c-extension that must compile properly on your system. Normally, this is not a concern, but it is something to be aware of.

fxruby-enhancement (which we will refer to as “Enhancement” from time to time) makes use of the singleton pattern in Ruby. There is basically no need to declare subclases off of most FXRuby classes. This is a very C++ish way, and the way the C++ Fox Toolkit works. It will make most hard-core Rubyists gnash their teeth.

Here, we do away with all of it. Also, the SEL_x variables – which maps to the C++ #defines of the same – is replaced with method declarations of the nature of sel_x – just the lowercase version of the same. For instance, in the straight fxruby, you would have to do something like:

And here we illustrate something else, the instance declaration. Why do we do it this way? Because Enhancement is multi-phase. First, we declare the GUI layout with Enhancement. At this time, none of the underlying FXRuby objects exist yet, but need to be referenced anyway. So we defer that part where references need to be resolved to the instance claus, which, as you can well imagine, means the FXRuby object instances have been instantiated.

You will also note the use of the ref clause, as in:

When the :back_buffer object was declared, it was done thusly:

So when the actual FXImage object is instantiated, it is associated to the :back_buffer tag, which then is found by ref() and can be used anywhere in the instantiation phase.

This is something to be aware of, depending on how you’d like to style your code for Enhancement. I prefer the use of the braces {}, but others might prefer the use of do…end.

Even though Ehnancement is a bit “opionated”, I don’t wish to impose a coding style on you. But I do wish to alert you to the subtle difference in syntax that Ruby expects.

If you use the braces, you must enclose the parameters to the directive in parens (). If you use do…end, you have no such requirement. for example, to use do…end:

is perfectly OK, whereas:

would generate a syntax error. You must, in this case:

And that won’t get your hands slapped by the Ruby parser.

This represents the work flow, in the order stated:

This phase, under the proverbial hood, ceates the component objects, which are just place-holders for the underlying FXRuby objects.

When the FXRuby object is created, it is assigned to its place holder component object, and can be references as comp.inst. In most cases, you will almost never need to touch the component objects directly.

During the FXRuby instantiantion stage, all of the FXRuby objects are instantiated and stored in their respective component objects. If they are tagged, the instantiated object may be referenced with ref(), and the component object itself may be referenced via refc(). There is almost never a case where you would need to go after the component object directly.

All of the FOX Toolkit C++ objects, resources, etc. that correspond to the FXRuby objects are now set up, and activated. With the all-important “show PLACEMENT_SCREEN” command, the FOX GUI should now be visible.

In handling interfacing to databases, AMQPs like RabbitMQ, network connections, or just about anything else that might otherwise slow down the GUI (Fox) thread and make it non-responsive, there needs to be a clean way to get data into and out of the GUI thread.

Fox provides some mechanisms specifically for sockets or system-level IO, but these are too specific, and would require some awkard workarounds to make them work in the general context.

And so we provide a means to accomplish that in a clean – to you, anyway – manner. We make use of queue_ding queues for passing messages into and out of the FXRuby (and therefore FXRuby Enhancement) space. This will allow you to keep the GUI thread responsive and also to maintain a seperation of concerns.

Queue Ding is an enhancement for doing queing across threads in Ruby, and we offer it here to allow external events to be funneled into and out of the Fox GUI thread. Usage is easy and straightforard. When removing entries from Queue Ding using #next, the queue will block until the next entry arrives. Since Queue Ding is really derived from ::Array, you may also do thing like #empty? to check to see if entries are availabe to avoid blocking.

To get messages objects into fxruby_enhacement, simply #push or #<< it into the queue as shown:

In the DSL, you must set up a handler for the ingress,

And so your handler will most likely act as a dispatcher for the payloads received. For example:

Note that this ingress handler is responding to two tags. You can have as many tags as you like for your ingress handler, and as many ingress handlers as you like.

Currently, all the tags should be unique. Later we may support having multiple blocks associated with the same tag. Please feel free to generate an issue if you want this!!!

Wnen your Fox application needs to send a message to other listening threads, You simply push your payload onto the egress queue thusly:

and your Ruby thread external to Fox would simply do:

where you’ll block pending the arrival of the next message. If you do not wish to block, you may do:

There are times you may want to be able to create, and popup, say, a dialog box, or perhaps you want to create on the fly child components on an existing window.

This is made possible with the “reuse: true” flag. For example:

This code snippet can be run in the context of the app or a window. If you do it in a window context, that window will become the “owner”, and will initially be placed hovering over it.

With reusable components, you will use the #starten and #stoppen methods to create and destroy the component. Please see the Dialog Box for a full example, and also the docs for #starten and #stoppen.

In an effort to eliminate the fuss and bother with scoping issues and object reference, ref(:some_tag) will retrive the FXRuby instance object so tagged with :some_tag.

You may have anonymous, i.e., untagged objects, and those will not be findable by ref(). It is not necessary to tag all objects, either.

refc() is similar to ref(), except it retrives the underlying component object insted. Indeed, the following are equivalent operations:

Where might you want to use refc() instead of ref()? In cases where the underlying FXRuby object have not been instantiated yet, you’d use refc() instead of ref(), almost always during the component configuration. For example:

Here, we set the button to exit the application by sending the FXApp object the ID_QUIT message. But at the time we set the configuration, the FXApp object has not been instantiated yet. So we use refc() instead of ref().

Underlying, the component object is really a subclass of OpenScript. While you may like to stuff some additional data there, this is frowned upon because it might conflict with Enhancement. If you have a need for this, please do a issue in GitHub.

The ‘as’ clause allow you to shift context back to a previously defined component, so that you can factor your code in a way to promote encapsulation.

This is especially useful in large projects where you are making heavy use of binding.fx to modularize your GUI layout. It helps you keep everything related in one place.

For example, deep within a window definition, you made need to define an image to be used by a widget. However, the image needs to be defined in the fx_app context, taking it far away from where it is actially needed. Here’s an example of how you would do that:

As you can see, your components will need to be tagged to be referenced by ‘as’.

fox_component and fox_instance are roughly the equivalent of refc() and ref(), respecively. The difference mainly being that fox_component does no sanity checking, and is therefore slightly faster.

At some point, they may be merged, but for now don’t count on it.

To initialize and run your app, you customairly do the following:

Which presumes your fx_app declaration was tagged with :app as follows:

This is the only time you will reference the component object directly for the obvious reason that you must start from someonere.

To begin the declaration of your app, you must do the following somewhere:

Typeically you’d do this inside of a module, but you could do it also in a class body. Please see the examples.

fx_chart is a custom widget supplied by Enhancement, and provides very simple charting abilities. We have mainly created this with the needs of RubyNEAT in mind, but hopefully we will eventually grow the scope of what fx_chart can do.

Initally, we provide basic x-y Cartesian charting suitable for representing time series, etc.

Data is in the format of an array of vectors, with each update adding a new vector to the array. For example:

Even though the “vectors” are themselves arrays, we shall refer to them as such for the sake of this discussion.

You may specify the first entry in the vector as the range, in which case it will be used to plot the rest of the vector as the “range” on the chart.

Each entry in the vectors must have some sort of designation to describe how the chart will display them. So we represent this as an association of labels, and each label will define how the data from that position in the vector will be drawn and labeled. For example:

Specifying the position of the vector as keys in the hash will allow us to “leave gaps” in the specification, particulary when the number of entries in that vector become large.

FOX (and therefor FXRuby) supports data synchronization among components. fx_data_target encapsulates the FXDataTarget class, just like all the other fx_* directives do. However, in this case, some special treatment is necessary since it is referenced at a time the underlying FXRuby object has not been created yet.

Enter refc(). You use refc(), instead of ref(), to use it when you are configuring the component (really, specifying the initial parameters to the underlying FXRuby class!) We illustrate here:

And so the two text components – or widgets – are initially set to the value of “initial value”, and when one changes, the other is instantly updated.

Otherwise, you can deal with fx_data_target as expected. See the DataTarget Example.

For canvas work, you typically have to create and destory the FXDCWindow object. To ease this, use the fx_dc instead. For example:

This example has been borrowed from Scribble.

Inside of your component declaration, you will undoubtly want to specify what you want to do once the FXRuby object is actually instantiated. This is what the instance clause will allow you to do. Your code block there will be passed a reference to the FXRuby object, allowing you to set up connections, change the component state, etc.

There are some added benefits as well. When making a connection, with the normal FXRuby, you would do something like this:

But with Enhancement, you would be able to do it thusly:

which will make it feel more Ruby-like and less C++-like.

ingress_handler will allow you to set up the handler for messages coming in from an external source to FXRuby thread, such as RabbitMQ, network connections, databases, or anything else. It allows you to do clean multhreaded Ruby without the normal worries of semaphores and synchronization and the like – it is all handled for you “magically” behind the scenes!

You may have as many ingress_handlers specified as you like, as each one needs to have a tag, and the tags are used to dispatch the messages.

Here is an example taken from RubyNEAT Panel:

Here you can see that a status message has been dispatched to this ingress_handler, and that the message contains a list of ‘neaters’ and ‘neurons’ that are being sent to the wlist and nlist list (:ov_conn_neaters_widget_list and :ov_conn:_neurons_list), respecively.

You may declare your ingress_handler anywhere in your code and have the expected happen.

igress_handler may also be specified with more than one tag, for instance:

The same block is assigned to all the given tags of :warn, :info, and :error.

To designate a component as reusable, declare it with “reuse: true” as in the example:

Then in the instance clause or to the response to an event, you would do:

to activate it, and

to deactive it (and remove the ‘server’-side FOX components!)

Note that you call refc(), not ref() in this case, because the functionality lies in the component object holder for the actual FOX component, not within the FXRuby object itself.

This feature is still under development, and is not fully implemented yet.

This is a way to split up your layouts into different .fx “modules”, purely for organizational reasons. For example,

will load the overview.fx portion of the GUI, which happens to be a tab contents in the tab book, which in our case looks like:

Because this is a spinoff project of the ongoing RubyNEAT effort, there is a splendid RubyNEAT Panel example, that is still in the works. However, you are free to look at the code that is there to get good ideas.

Class-based Enhancement (this is currently not supported!!!):

Even though the old way has a slightly smaller line count, you can see how messy it can be assigning each newly-created object to a variable, and then having to pass that variable to the children. Perhaps this example is too small, but perhaps the next one will more illustrative.

The Ball class is the same, but the actual Fox-related code should clearly illustrate the power of Enhancement.

More examples can be found HERE.

fx_data_target (:some_name) must be referenced as refc(:some_name) and not ref(…). See the example below.

Copyright (c) 2016-2017 Fred Mitchell. See MIT License for further details.

These are my personal notes, not meant for anyone else. You may see some interesting tidbits here, but I am not gauranteeing anything to be useful or reliable in this section. YOU HAVE BEEN WARNED.

We have an issue with needing to have reusable components (dialog boxes, say), and ṕroperly handling data targets designations.

Data targets cannot be done the same way we are doing the other fxruby components, because they have a different workflow. Basically, they need to be instantiated before the other comonents that uses them, and they are not really “child” objects, either. Referring to them using the ref() or refc() approach simply fails, because they won’t be instantiated in time.

We have ameroliated this problem by checking in the parameter list for an OpenStruct object, and calling #inst on it to pass in the instance, rather than the object itself. So now you simply use refc() in those cases.

This bug is a bit difficult to describe, but want to capture it here. It has to do with my “pushing the limits” of Ruby’s metaprogramming features.

Change “axial” to “axis” to recrystalize this bug. I suspect that the parser or some aspect of the intepreter is confusing the “axis” function with the “axis” variable on the OpenStruct object, and it has to do with the exact way I am doing the parameters for the axis function that trips it up. A similar approach with the background function works perfectly fine:

Which results in the error of:

A simple workaround was to rename the variable to “axial” or anything different from the function “axis”.

I need to investigate if this bug also exists in prior releases of Ruby, and also produce a single-file scaled down example of this bug, so it can be reported back to Matz.

It is critical where the ‘as’ clause is executed, and we need to alter that, because the fx_data_target instance is not established at the time it’s needed.

It is thought that the execution must take place before kinder create_fox_components, but I need to think about this. It’s execution time is critical to the proper flow of Enhancement.

The following debug code allows you to specify not only which files to trace, but also a line range. And colored to. Massively useful. Maybe should be a gem in its own right?

It is now indeed clear that the ‘as’ must stick its kinder in the kinder list of ‘as’es parent component, NOT the referred ‘as’ component itself. This is conceptually tricky from the code point of view, BUT it is the intuitive assumption from the programmer’s point of view. From his perspective, ‘as’ “executes” at the place he put it.

And so let us do the “hard” thing here to make the lives of our users happy. :D

We have solution. We simply will put the kinder parent in a hash with the Enhancement.stack level that this kinder parent as opposed to the “real” parent is to be used. When the owner ‘as’ completes, it removes that entry from the hash.

This will allow for nesting of ‘as’ declerations as well, with the intituively expected result. I do not recommend nesting ‘as’ declarations, but at the same time I do not wish to restrict our users from doing so. I simply cannot conceive of all the possible ways Enhancement will be leveraged.

Passing in a nil for the event is not the same as passing in nothing at all. Probably has to do with how the C interface is implemented or works.

As such, we have the components of the chart laid out as boxes linking to each other to represent their relative positions to each other. As such:

And so, given the initial width and height of the canvas, we work to determine everything else. For those boxes that contain text, we know what the text will be, and therefore how long and tall – minimum – they will need to be. And thusly we use the hints.

Boxes can define their margins, and therefore, coupled with the float factor, determine their relationship with their neighors. a dominance score as shown in the diagram above determins how the layout will proceed.

Since the chart will have the same basic layout, with some components enabled and disabled and like, we shall work our way from the outside in.

Some boxes, like the Rulers, will take their width and height based on the dominate they are connected to. Others, like the title and caption and legend boxes, are floating.

We have come up with the splendid idea of creating the “NullBox” – basically the equivalent of having zero or the empty set. It will simplify the layout algorithm

The layout algorithm shall procede as follows:

In all of this, this layout will take place everytime the application window is resized, so be aware of this. The computaitons shall be swift, just basic MDAS arithemtic. Nothing heavy-duty or fancy.

For the superior layout, we calculate the x and height, or the y and width respectively, for the boxes. Floating status becomes critical here, for the above will only need to be determined thusly for the non-floating cases, where there is dependency on the superior’s dimensions and position.|||

fxruby-enhancement - FOX Toolkit Wrapper for Rubyists.