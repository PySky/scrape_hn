A set of programs for creating, manipulating, and outputting a stream of Records, or JSON hashes. Inspired by Monad.

The quickest way to start using recs is via the minimal, standalone bundle:

This is also known as the "fatpacked" recs.

You can also install recs from CPAN as App::RecordStream:

Using cpanm in interactive mode will prompt you for optional feature support. Other CPAN clients such as cpan and cpanp also work fine, but you can't opt to use any optional features (just like cpanm in non-interactive mode). A kitchen-sink install of App::RecordStream looks like:

If you don't have cpanm itself, you can install it easily with:

The recs system consists of three basic sets of commands:

These commands can interface with other systems to retrieve data, parse existing files, or just regex out some values from a text stream.

Commands are run using . If you're using a CPAN-based install, you may also run commands directly as , though this is no longer recommended for forwards compatibility. Both installation methods provide a top-level executable which dispatches to commands, so this is the preferred invocation style.

The core recs commands are briefly summarized below, and you can list all available commands by running .

To read more about each command, run . Longer documentation is available as or . For example, to read more about "fromcsv", you might run any of the following:

Annotate records with common fields, will memoize additions to speed up common annotations Perforce aggregation operations on records. Group by a field, get an average, sum, correlation, etc. Very powerful Eval a string of Perl against each record Flatten records of input to one level Select records for which a string of Perl evaluates to true. Take records, grouped by keys, and run a separate recs command for each group. Based on a time field, tag records with a normalized time, i.e. every 5 minute buckets Perform an inner join of two record streams. Associate records in one stream with another stream. Filter to a range of matching records with paired Perl snippets and . Sort records based on keys, may specify multiple levels of sorting, as well as numerical or lexical sort ordering Outputs the top n records. You may segment the input based on a list of keys such that unique values of keys are treated as distinct input streams. This enables top n listings per value groupings. Perform a block of Perl on each record, which may modify the record, Record is then output Perform a block of Perl on each record to generate a record stream, which is then output with a chain link back to the original record.

Many of the commands above take key arguments to specify or assign to a key in a record. Almost all of the places where you can specify a key (which normally means a first level key in the record), you can instead specify a key spec.

A key spec may be nested, and may index into arrays. Use a to nest into a hash and a to index into an array (i.e. )

An example is in order, take a record like this:

In this case a key spec of would have the values 1, 2, and 3 respectively.

Similarly, would have the value of for all 3 records

You can also prefix key specs with to engage the fuzzy matching logic. Matching is tried like this, in order, with the first key to match winning:

Given the above example data and the fuzzy key spec , the portion would expand to and would be the index into the array, so all records would have the value of .

Simiarly, would have values 1, 2, and 3.

The data stream format of the recs commands is JSON hashes separated by new lines. If you wish to write your own recs command in your own language, just get a JSON parser and you should be good to go. The recs commands use JSON::MaybeXS.

If you name your command as and put it somewhere in your environment variable, the command will dispatch to it when called as . It will also be included in output.

If you want to write your new command in Perl, you can use the same Perl API that the standard recs toolkit uses. See the various App::RecordStream::Operation subclasses. Once your new operation class is installed in perl's library paths, will find it automatically without the need for any executable command shim.

Each of the commands discussed have a mode available to print out usage and examples for the particular command. See that documentation for detailed information on the operation of each of the commands. Also see some other man pages:

This software is released under the MIT and Artistic 1.0 licenses.|||

RecordStream - commandline tools for slicing and dicing JSON records.