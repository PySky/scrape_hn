In the previous post, we discuss about various ways of creating objects in JavaScript. One of the ways to create objects in JavaScript is using the Constructor function. Consider the construction function below:

Let’s create objects person1 and person2 using the Human constructor function

On executing the above code JavaScript engine will create two copy of constructor function each for person1 and person2.

i.e. every object created using the constructor function will have it’s own copy of properties and methods. It doesn’t make sense to have two instances of function fullName that do the same thing. Storing separate instances of function for each objects results into wastage of memory. We will see as we move forward how we can solve this issue.

When a function is created in JavaScript, JavaScript engine adds a prototype property to the function. This prototype property is an object (called as prototype object) has a constructor property by default. constructor property points back to the function on which prototype object is a property. We can access the function’s prototype property using the syntax functionName.prototype.

As shown in the above image, Human constructor function has a prototype property which points to the prototype object. The prototype object has a constructor property which points back to the Human constructor function. Let’s see an example below:

To access prototype property of the Human constructor use the below syntax:

As seen from the above image prototype property of the function is an oject (prototype object) with two properties:

Creating an object using the constructor function

When an object is created in JavaScript, JavaScript engine adds a __proto__ property to the newly created object which is called as dunder proto. dunder proto or __proto__ points to the prototype object of the constructor function.

As shown in the above image, person1 object which is created using the Human constructor function has a dunder proto or __proto__ property which points to the prototype object of the constructor function.

As it can be seen from the above image, both person1’s dunder proto or __proto__ property and Human.prototype property are equal let’s check if they point at the some location using === operator

This shows that person1’s dunder proto property and Human.prototype are pointing to the same object.

Now, lets’s create an another object person2 using the Human constructor function

Above console output shows that even person2’s dunder proto property is equal to the Human.prototype property and they points to the same object.

Above statement proves that the person1’s and person2’s dunder proto properties points to Human constructor function’s prototype object.

Prototype object of the constructor function is shared among all the objects created using the constructor function.

As prototype object is an object, we can attach properties and methods to the prototype object. Thus, enabling all the objects created using the constructor function to share those properties and methods.

New property can be added to the constructor function’s prototype property using either the dot notation or square bracket notation as shown below:

name and age properties have been added to the Human prototype

Let’s analyze what happened when we did console.log(person.name) Let’s check if person object has name property

As we can see that person1 object is empty and it does not have any property except it’s dunder proto property. So how does the output of console.log(person.name) was “Ashwin”?

When we try to access a property of an object, JavaScript engines first tries to find the property on the object; if the property is present on the object it outputs its value. But, if the property is not present on the object then it checks tries to find the property on the prototype object or dunder proto of the object. If the property is found the value is returned else JavaScript engine tries to find the property on the dunder proto of the dunder proto of the object. This chain continues till the dunder proto property is null. In this cases output will be undefined.

So, when person1.name is called, JavaScript engine checks if the property exists on the person object. In this case, name property was not on the person’s object. So, now JavaScript engine checks if the name property exists on the dunder proto property or the prototype of the person’s object. In this cases, name property was there on the dunder proto property or the prototype of person’s object. Hence, the output was returned “Ashwin”.

Let’s create an another object person2 using the Person constructor function.

Now, let’s define a property name on the person1 object

Here person1.name outputs “Anil”, because as mentioned earlier JavaScript engines first tries to find the property on the object itself as in case of person1 the property is present on the object JavaScript engines outputs value of name property of person1.

In case of person2, name property is not present on the object. Hence, it outputs person2’s proptotype property name.

As prototype object is shared among all the objects created using the constructor function, it’s properties and methods are also shared among all the objects. If an object A modifies property of the prototype having primitive value, other objects will not be effected by this as A will create a property on its objects as shown below.

When person1 want to have different value for the name property, it creates a name property on its object.

In the above example, person1 and person2 points to the same friends array of the prototype object. person1 modifies friends property by adding another string in the array.

Because the friends array exists on Person.prototype, not on person1, the changes made in the friends property by person1 objects are also reflected on person2.friends (which points to the same array).

If the intention is to have an array shared by all instances, then this outcome is okay. But here this was not the case.

To solve the problems with the prototype and the problems with the constructor, we can combine both the constructor and function.

To solve above both problmens, we can define all the object specific properties inside the constructor and all shared properties and methods insdie the prototype as shown below:

In the above example, friends property of person2 did not change on changing the friends property of person1.|||

In the previous post, we discuss about various ways of creating objects in JavaScript. One of the ways to create objects in JavaScript is using the Constructor function. Consider the construction…