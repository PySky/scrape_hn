Proposal to start a new implementation of Thunderbird based on web technologies Our base goes away. Gecko will change dramatically in the future, and dropping many features that Firefox does not need anymore, but that Thunderbird relies on. Our codebase is now roughly 20 years old. It heavily and intrinsically relies on those very Gecko technologies that are now being faded out, more or less aggressively. JavaScript and HTML5 have evolved dramatically. Entire applications in JS are now realistic, and have been done. There are several existing JS libraries we might leverage. JavaScript is an efficient language, which allows fast development. A rewrite in JavaScript makes sense now. We will learn from shortcomings of existing Thunderbird, and solve them, for example a more flexible address book, and cleanly supporting virtual folders without overhead.

 The goal of the rewrite is to be close to the existing Thunderbird, in UI and features, as a drop-in replacement for end users, without baffling them. They should immediately recognize the replacement as the Thunderbird they love. It will install and run as normal desktop application, like Thunderbird does today. It keeps user data local and private.

 We can also make a new, fresh desktop UI, as alternative to the traditional one, for new users. The technology also gives us the option to run it as mobile app.

 While we implement the new version of Thunderbird, the old codebase based on Gecko will be maintained until the rewrite is ready to replace the old one. I expect this effort to take roughly 3 years: 1 year until some dogfood (usable by some developers and enthusiasts). 2 years until a basic feature set is there. 3 years until we can replace Thunderbird.

 I will describe each point in more detail below.

 I would like to put this up for discussion. I have not discussed this with the rest of the council yet, but rather I start the discussion here, to make it public, so that everyone can follow the discussion. Ultimately, this will be a team effort. The TB Council, even with employees, will not be able to do this alone. I hope that Thunderbird can fund a number of developers on this, but I would like this to be an open-source project in the sense that everybody can participate. Please see this also as a call for help. If you are an experienced JavaScript developer who already wrote applications and libraries in JavaScript, please step forward and write us that you want to help. I've been working on Thunderbird since 18 years, and I care about it a lot. More importantly, I care about communicating with my friends in a way that's private and not controlled by any single entity, but decentralized and running and stored on my own computer. In other words, we need a desktop (or smartphone) email client. Not just today, but also 30 years from now, if the world didn't collapse until then. 

 This is important for the freedom of the individual, of communication, and of computing. There are not many contenders left that defend the freedom of communication, because most have an interest to bind users to their own services. If I want to communicate with teenagers today, or even my mother, the best way is WhatsApp or SnapChat, closed systems. In order to make a different in this world, Thunderbird needs to be a viable option, not just next year, and not only for the existing userbase, but for the whole world, all age groups and all usage patterns. The current Thunderbird codebase has served well - 25 million users are amazing - but will not be able to defend freedom for all of us. Given the current technical challenges we face, this is the perfect time for a fresh start.

 Firefox has discontinued the Firefox XUL extensions, killing tens of thousands of small projects this way. This is a massive cut that goes to the base of Firefox. They did that, because these extensions use XUL and XPCOM, and this is preventing Firefox developer from making more drastic changes in the internal architecture. They are gradually moving to using some Rust components, which means the XPCOM base is no longer viable. At the same time, they also want to gradually decrease reliance on XUL in favor of HTML, and remove parts of the XUL implementation that they no longer need to run Firefox. That's why they remove XUL extensions. Thunderbird heavily relies on XUL, all its UI is written in XUL. Some parts of XUL - esp. some features of the tree widget - were back then written only for Thunderbird. We can expect breakage in this area, as Mozilla has clearly stated that they will no longer care about breaking Thunderbird. In fact, I think this problem is part of the motivating force behind Mozilla asking us to be independent.

 Thunderbird relies on those very Gecko technologies Thunderbird is based entirely on XPCOM (backend module API) and XUL (user interface). If you take out XPCOM and XUL from Thunderbird, you have effectively rewritten it. This change is as dramatic as the change from Netscape 4.5 to Mozilla was, when it was rewritten with XUL and XPCOM. 90% of the code was new. We are faced with a similar problem. Gradual change would be very costly

 Of course, the changes in Gecko are gradual, but eventually, the technology will go away, so the overall work is there nonetheless. Given that XPCOM is the very technology that creates the API between the modules, is hard to replace step by step. I think we would spent as much time integrating the new modules with the old code as we would take writing the module in the first place, which means the overall effort increases at least 2-fold by trying to do it step by step. Having worked on Thunderbird since 18 years, I do not deem it feasible to modernize it component by component. I estimate it would be 4 times faster to start with a clean slate and start from 0.

 JavaScript is today the best choice

 JavaScript, if used diligently and with good design, is a very efficient language. Both in execution time, but more importantly for developers. Personally, I wrote apps in many languages, including C++, Java and JavaScript. Of those, JavaScript is by far the most productive - I am personally 4-10 times as productive as with C++. Today, we have node.js, Electrolysis, Cordova and other platforms that are already ready-made to create desktop applications using HTML5 and JavaScript. There are already other applications that have been written this way, and there is existing knowledge and libraries on how to do this. There are some known shortcomings of Thunderbird, as it is implemented and designed today. Some are on the feature level, for example the address book is not flexible enough to capture even 3 email addresses for one person, it cannot link 2 persons (e.g. a couple), and so on. A modern re-write would consider today's user requirements. Deeper goes the problem ofÂ  virtual folders. Thunderbird has them implemented as a bolt-on, which essentially keeps a copy of the mails, as far as I understand, and they are slow and inflexible. A new Thunderbird implementation could take an approach of where folders are a view that is computed in real time (like views in databases). This matches what GMail does with the AllMails folder and tags as properties, and then tags also form a virtual folder. There are important implications that this has: I can have a unified inbox, one inbox per folder, and I can have the emails sorted into specific project folders on arrival, all without overhead. The same incoming email appears in all 3 folders in the same second, and is marked read at the same time. I no longer have to move emails, but they are filtered. Even deeper are design shortcomings of Thunderbird. It establishes a rough border between user interface and backend modules for IMAP etc., but is not very consistent in enforcing the independence of the 2 layers.

 Right now, large parts of the logic are written as part of the frontend code, which is one of the big reasons why Thunderbird code is so difficult to understand and modify. It also makes it practically impossible to write alternative frontend. Instead, the architecture should be flexible enough to allow this, by strictly separating logic from UI using design patterns. Some backend modules call the frontend, to update changes. Instead, we should use a classic observer/subscriber design pattern, where the frontend subscribes to changes in the backend, and updates itself. That allows more flexibility for the frontend. All lists should be observable, which is a simple but very powerful way to decouple logic from UI. See Linq in C#, and https://wiki.mozilla.org/Jetpack/Collections , which takes it a step further. This could be the technical basis for very flexible virtual folders that update immediately and are fast. But it would be used whenever there is a list.

 Be close to the existing Thunderbird Even though we write almost all code from scratch, we will save a lot of time by having a clear goal: We want to replicate the current Thunderbird, from an end user perspective. That means, the user will find the same 3-pane window layout, the same way how folders and message lists and the thread pane operate. The theme will be similar. Existing Thunderbird users should feel right at home.

 Even though we write almost all code from scratch, we will save a lot of time by having a clear goal: We want to replicate the current Thunderbird, from an end user perspective. That means, the user will find the same 3-pane window layout, the same way how folders and message lists and the thread pane operate. The theme will be similar. Existing Thunderbird users should feel right at home. We retain the overall UI and most features and qualities like performance, even if we do not copy all little details.

 Disclaimer: Given that the technological basis - particularly HTML - is completely different, there will be some things that work differently in some ways. Hopefully, many will be better. We will have some technical limitations. Some will be just different, because the underlying implementation is completely different. The goal is not to copy bug for bug, but to make existing users immediately recognize this as Thunderbird, and feel at home, even if some details are different. We must pay attention to also keep technical qualities that many of our users rely on. An obvious one is that the new implementation must be able to quickly scroll through a list of up to 100000 messages. There is no such HTML widget that allows that, we would have to create one, but I think it's feasible, I already have ideas how to do that. We also need to preserve privacy and security qualities that Thunderbird has, or even improve on it.

 In addition to replicating the current Thunderbird UI, we should also experiment with new forms of UI, in parallel. For example, we should create a UI that's suitable for the new generation of users that never used a desktop email client before. These people do not feel at home with Thunderbird today, and we should create something for them. A lot of the new userbase is on mobile platforms and on tablets. That new UI should be "responsive" (automatically adapting to different screen sized) so that it runs well on tablets and smart phones as well. With Cordova and similar toolkits, we have a technological basis to quickly make a mobile app out it so that it installs like any other app. It would be a replacement for the system "email" app. The goal for the new UI are 1 billion users. During the time while the new rewrite is implemented, a smaller part of the staff will maintain Thunderbird, as they have done in the last 2 years. We keep up with Gecko changes, and fix smaller bugs. But we will not do major refactoring or big new features on the old codebase. This gives users a continuously updates Thunderbird. Particularly important are security updates for security holes found in Gecko, which Thunderbird inherits. They might be exposed in HTML emails, RSS feeds or other places where Thunderbird shows HTML and renders images. The majority of the team should concentrate on the rewrite. This is also why this decision is important to make now, because Thunderbird has now resources to hire a number of developers, and we need to decide on which efforts we spend the precious little money we have through the generous donations of our existing users. I would estimate that we need a team of 10 full time developers, for 3 years. We need 2 persons for the framework, 3 for backend modules, 4 for frontend UI, and 1 for theming. In the first year, we are laying the foundation, getting the framework sorted out, building infrastructure etc.. 

 After 1 year, I would expect a first demo that can read and write email, but with a very minimal feature set and many rough edges. A few enthusiastic first alpha users might be able to use it for their email needs, and some developers can use it for their daily needs. In the second year, we would concentrate on building the important features that are needed for most users.

 After 2 years, we should have an email client that's appealing to most normal users. Even some power users might like it, because we have advanced features that no other client has, but they will miss some features. In the third year, we concentrate on feature parity to the old Thunderbird. We add any features that Thunderbird currently has and are appreciated by the existing userbase. We also add functionality that allows larger deployments, as a significant part of userbase are enterprises. Any features that are used by significantly less than 1% of the userbase will not be implemented, in favor of other features that are desperately needed today.

 After 3 years, 95% of the existing Thunderbird userbase should find the features they need in the new implementation. There will be some changes and adoptions necessary, but there should be a way to do what they need. That's what I call "feature parity".

Re: Proposal to start a new implementation of Thunderbird based on web technologies Hello Joshua,

 

 first off: Thank you so much for the nice, level-headed response! This is the kind of discussion I was hoping for. This is productive and great. Thank you!

 

 Joshua Cranmer wrote on 4/5/17 7:31 PM:

 every estimation for feature implementation I've seen from Mozilla has been wildly optimistic 

 I'm not Mozilla. :-)

 I've done rewrites and challenging tasks before, and typically kept my estimates.

 

 I would rather convince others on a rational level, or if I'm missing some aspects or ideas, improve my proposal to accommodate valid needs that I've overlooked.

 

 Let's talk about the proposal then. For my part, I have one non-negotiable requirement: we should be able to ship CardDAV support to our users by 2018. Beyond that, I think there should be means to implement new features in TB in a more rapid basis "if prudent"

 

 Now, we're talking! This is getting somewhere. That's exactly the concrete level at which we should be talking.

 

 Yes, I totally agree that the address book can't stay as-is until 2020, even in the old Thunderbird. Just 2 email addresses per person are just ridiculous. Sync is critically important these says, and CardDAV is part of that, yes. And I think everybody agrees that the old AB implementation is ripe to be trashed. So, this would be an excellent component to backport from the new Thunderbird to the old. I totally agree.

 

 There are probably other such low-hanging fruits. 

 

 1. Delete the requirement that feature development in Thunderbird is unfunded. It's okay to leave it vague which features would be implemented sooner--the only two that really come to my mind are CardDAV and EAI. Beyond that, I don't think that there are many features which are urgent to implement (e.g., JMAP would be nice, but no one's really clamoring for it).

 

 I fully subscribe to this.

 

 We are actually in violent agreement. What you wrote is exactly what I think as well.

 

 (I've formulated it too extreme in my original proposal. I've tried to be short - already hardly anybody read my entire proposal, even though I tried to be short.)

 

 Later: 

 I've mentioned several times the Servo model, and if that's essentially what you're proposing, I don't have problems with it. That model (to me, at least) is that you use an entirely different product to develop all of the backend pieces which you can then reintegrate into Thunderbird as they become feasible replacements 

 Yes. And no. It's a balance of how much you backport and where you focus.

 

 I think you described it best under point 1. You phrased the balance exactly as I have it in mind. 

 

 2. Make it clear that being able to transfer features to Thunderbird is a priority. i.e., you'd rather a 100% complete address book and 50% complete IMAP than 80% of both. 

 I'm not sure what you mean. But I don't think that when we rewrite, we should first complete 100% of the Thunderbird IMAP features before we start with address book, or vise versa. Rather, I subscribe to the MVP (Minimum viable product) idea. I want to first have a functional, but minimal and simple email client using only web techs (plus socket and file I/O of course, but still pure JS). That includes all of IMAP, POP3, AB etc., but not at the level of TB yet, but just the basics to read and send mail. Then, we build it out to be a good (not simple) email client, so that 80% of the users are happy with it. Then, finally, we build all the remaining TB features that the remaining 19% need. That's the idea of MVP.

 

 (And yes, I left the last 1% of users. There will always be holdouts that insist on the most arcane features. There's no way to make them happy, no matter what we do, and trying to will consume so much energy that we will ignore the needs of the remaining 80%.) 

 

 This also means that whatever platform support library you have would include support for xpcshell/xpconnect/whatever else is being used by Gecko as a base layer.

 

 I don't understand. XPCOM is slated to be killed in Gecko in the long term, it's one of the technologies we need to get away from. Thunderbird on Android is not going to use XPCOM, nor a compat layer emulating XPCOM, but a pure JS module system.

 

 If things are backported from the new implementation into old Thunderbird, TB can use it on the pure JS level. Or build a small XPCOM wrapper in JS, if absolutely necessary. 

 

 I believe that it would be fairly easy to replace the address book, import, mime, and compose code 

 heh! I agree that these are components that would be easiest in a relative sense. But not easy in an absolute sense. "Fairly easy" is quite a statement. :) You of all people should know how hard it is to replace libmime, within existing Thunderbird. 

 

 replacing the account implementations and associated frontend bits (e.g., nsMsgDBView) is probably so difficult it's not worth attempting. Accordingly, to me, there seems to me to be little reason not to throw some people at porting over the first few bits rapidly.

 

 Right!

 

 I think you're actually saying here that you agree with my approach. Because the conclusion is that a gradual rewrite of Thunderbird, with the result of eventually everything being replaced with JS components without XPCOM and XUL, is "probably so difficult it's not worth attempting". That's precisely what I keep saying! :)

 

 3. Paid support, if necessary, would be available to do the porting of bits to Thunderbird. 

 What do you mean? If you meant that Thunderbird or Mozilla could hire people specifically to backport parts of the new implementation to old Thunderbird, then yes, I think that would be a great way to distribute the work load among several developers.

 

 One way to visualize the problem is the components on the x axis and the different tasks for each component on the y axis. Instead of slicing work in x axis, you can slice in the y axis. I think that produces much better and more homogeneous results, because you use the individual talents better. (Of course, you can slice in both directions, too.)

 

 That means: One team builds the new client, another team backports the new components to old Thunderbird, and a third team fixes Gecko breakage in old Thunderbird. All of these need different skills.

 

 Even within the new client team, we could slice work. In another project, I need 10% for the implementation of the client, 10% for the server, 40% for tests, and 40% for reviews and landing. If you add integration into old Thunderbird on top, numbers look several times worse. If we could reduce that overhead (make sure reviews and CI are efficient) and slice work horizontally (e.g. let another dev build the tests, yet another backport etc.), that would help a lot. Like a factory line. A good test suite is independent of the implementation, anyway, and can be written even before the component. 

 

 Beyond that, I think the crux of the issue is in the manner of a pitch. Most users aren't going to notice backend changes at all unless it impacts them, but front-end changes tend to engender a lot of complaints. 

 Agreed! :-)

 

 Luckily, with CSS, we can style the new HTML-based implementation very much like the old Thunderbird, so that people will immediately recognize it as TB.

 

 I've once reimplemented a C# desktop app as webapp. Not only was it 100 times faster to load, and 50 times faster to implement, but I could make it look almost like the desktop app, using CSS. It was immediately recognizable. You can do amazing things with JS and CSS.

 

 So, I don't worry about that part. 

 

 --and in terms of pitch, you don't describe it as being the replacement for Thunderbird. 

 How would you describe it?

 

 

 Ben

 I'm not Mozilla. :-)I've done rewrites and challenging tasks before, and typically kept my estimates.Now, we're talking! This is getting somewhere. That's exactly the concrete level at which we should be talking.Yes, I totally agree that the address book can't stay as-is until 2020, even in the old Thunderbird. Just 2 email addresses per person are just ridiculous. Sync is critically important these says, and CardDAV is part of that, yes. And I think everybody agrees that the old AB implementation is ripe to be trashed. So, this would be an excellent component to backport from the new Thunderbird to the old. I totally agree.There are probably other such low-hanging fruits.We are actually in violent agreement. What you wrote is exactly what I think as well.(I've formulated it too extreme in my original proposal. I've tried to be short - already hardly anybody read my entire proposal, even though I tried to be short.)Later:Yes. And no. It's a balance of how much you backport and where you focus.I think you described it best under point 1. You phrased the balance exactly as I have it in mind.I'm not sure what you mean. But I don't think that when we rewrite, we should first complete 100% of the Thunderbird IMAP features before we start with address book, or vise versa. Rather, I subscribe to the MVP (Minimum viable product) idea. I want to first have a functional, but minimal and simple email client using only web techs (plus socket and file I/O of course, but still pure JS). That includes all of IMAP, POP3, AB etc., but not at the level of TB yet, but just the basics to read and send mail. Then, we build it out to be a good (not simple) email client, so that 80% of the users are happy with it. Then, finally, we build all the remaining TB features that the remaining 19% need. That's the idea of MVP.(And yes, I left the last 1% of users. There will always be holdouts that insist on the most arcane features. There's no way to make them happy, no matter what we do, and trying to will consume so much energy that we will ignore the needs of the remaining 80%.)I don't understand. XPCOM is slated to be killed in Gecko in the long term, it's one of the technologies we need to get away from. Thunderbird on Android is not going to use XPCOM, nor a compat layer emulating XPCOM, but a pure JS module system.If things are backported from the new implementation into old Thunderbird, TB can use it on the pure JS level. Or build a small XPCOM wrapper in JS, if absolutely necessary.heh! I agree that these are components that would be easiest in a relative sense. But not easy in an absolute sense. "Fairly easy" is quite a statement. :) You of all people should know how hard it is to replace libmime, within existing Thunderbird.Right!I think you're actually saying here that you agree with my approach. Because the conclusion is that a gradual rewrite of Thunderbird, with the result of eventually everything being replaced with JS components without XPCOM and XUL, is "probably so difficult it's not worth attempting". That's precisely what I keep saying! :)What do you mean? If you meant that Thunderbird or Mozilla could hire people specifically to backport parts of the new implementation to old Thunderbird, then yes, I think that would be a great way to distribute the work load among several developers.One way to visualize the problem is the components on the x axis and the different tasks for each component on the y axis. Instead of slicing work in x axis, you can slice in the y axis. I think that produces much better and more homogeneous results, because you use the individual talents better. (Of course, you can slice in both directions, too.)That means: One team builds the new client, another team backports the new components to old Thunderbird, and a third team fixes Gecko breakage in old Thunderbird. All of these need different skills.Even within the new client team, we could slice work. In another project, I need 10% for the implementation of the client, 10% for the server, 40% for tests, and 40% for reviews and landing. If you add integration into old Thunderbird on top, numbers look several times worse. If we could reduce that overhead (make sure reviews and CI are efficient) and slice work horizontally (e.g. let another dev build the tests, yet another backport etc.), that would help a lot. Like a factory line. A good test suite is independent of the implementation, anyway, and can be written even before the component.Agreed! :-)Luckily, with CSS, we can style the new HTML-based implementation very much like the old Thunderbird, so that people will immediately recognize it as TB.I've once reimplemented a C# desktop app as webapp. Not only was it 100 times faster to load, and 50 times faster to implement, but I could make it look almost like the desktop app, using CSS. It was immediately recognizable. You can do amazing things with JS and CSS.So, I don't worry about that part.How would you describe it?Ben|||

