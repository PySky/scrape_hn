Interceptors are uber cool. Introduced as a new feature of okhttp2.2, interceptors are meant to be hooked with your http calls so that you can see what’s going up and what’s coming down. Every single detail. There isn’t much to them, they look like

Now, accept the harsh truth that network connections are buggy. They fail when you don’t expect them to. Sometimes, the responses are absurd. Sometimes, you have ‘token auth failure’ issue to deal with. With these nuisances, low bandwidth and high latency connections, such calls are randomly going to fail. It will happen.

It’s a nice thing (also, dangerous on some levels) to implement such failure-proof policy inside an android app which frequently consumes some REST API. With such policy in place at architectural level, its easy to monitor the network calls our app makes and easily handle nasty situations, for example, one can keep retrying the same call until something is fetched, atleast for important APIs.

Interceptors are designed to do exactly that and they are pleasant to work with. Also, as Jesse Wilson suggests here, they are highly dangerous.

So you get that. You have an incredible amount of power at hands if you chose to work with interceptors and you gotta deal with it carefully.

Let’s see how this policy kicks in, say, in case of token auth failure. We made a request, say Req A with an auth token set as a header, and got a response that our token has expired. Now our policy is to fire a new side request that gets us a refreshed token. Then, we make Req A again with the new token. This is how a custom interceptor which does exactly that looks like.

Now, when you set up your Retrofit2 service to make that Req A, just add this interceptor to the okhttp client.

It’s always good to read official docs before you dive in.|||

