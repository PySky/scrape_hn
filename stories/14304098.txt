In the introduction blog post we introduced the APIs and . We recommend the immutable style as the “default choice” and now we will illustrate the two styles with another example and elaborate more around when to use the mutable vs. immutable style.

In this post we will look at how to implement a round-robin router with Akka Typed. By the way, Routers are something that is not implemented in Akka Typed yet. It can be a nice feature to package some typical routers as reusable behaviors with some configuration options. However, we will not implement the call-site routing in the router actor references, since that adds a lot of complexity. It’s better to let a router be an ordinary actor.

Let’s start with the immutable style. This is how a round-robin router may look like:

A number of child actors for the routees, the workers, are created when the router is started. We use to spawn these actors via the parameter. The actor refs for these actors are passed to the initial behavior.

When a message is received the routee for the current index is selected and the message is passed on. The index is increased in the behavior for the next message.

Let us look at how the same thing can be implemented with the mutable style and then we will discuss the trade-offs.

We recommend the immutable style because:

If we recommend the immutable style, why did we then provide the alternative mutable style? We found the following reasons:

The full source code of these examples, including corresponding Java examples, are available in patriknw/akka-typed-blog.|||

