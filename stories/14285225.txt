Infrastructure software components like the Linux operating system, the PostgreSQL database, the Jenkins continuous integration server and the Puppet configuration management tool are amongst the most popular products in their category. Many of the building blocks used for in-house software development (user interface widget libraries, programming languages) are open-source and heavily used by enterprise developers (e.g., AngularJS, NodeJS).

Companies rely on open-source software because of cost, its quality, its ability to integrate more easily with other software due to open interfaces and for risk management. When the company behind proprietary software goes bankrupt, there is no guarantee for further support. Open-source software can be supported in-house or by an ecosystem of partners.

While companies like Google are not open-sourcing core assets such as their search algorithm, they are open-sourcing a significant amount of the software they develop. In Google’s case this includes the Android operating system, Chrome web browser, AngularJS framework, Go programming language and more recently the Kubernetes container orchestration solution.

Enterprise IT departments typically also have a number of these “non-core” assets that could be shared with the broader community. These can range from a plugin to an existing project, a set of user interface widgets or programming libraries to fully fledged internal IT tools.

Although starting open-source projects is a relatively new phenomenon for more traditional IT departments, there are already several examples out there:

Contributing to and starting open-source projects can deliver cost savings for your company because you tap into the efforts of volunteers and can share the efforts with other users:

However, I believe the real reasons for contributing to and starting open-source projects are far more profound: It can be a catalyst for the cultural transformation that many enterprise IT departments are currently going through: Many enterprise IT departments are starting or are on the road of large-scale Agile and DevOps transformation programs. The cultural elements such as collaboration, end-to-end ownership and decentralization of decision power to engineers are deeply rooted in the open-source community.

Contributing to or starting open-source projects can accelerate these cultural elements:

The best software developers often contribute to open-source software because it increases their own market value/visibility and for altruistic reasons: it gives them a purpose that goes beyond their immediate job. Allowing developers to contribute to open-source software is a must-do for recruiting these profiles.

In addition, being “present” in the open-source community has a number of other benefits:

Adopting open-source practices internally typically requires a shift in both tooling and processes:

In terms of external contributions, I advise to start small: encourage engineers to contribute patches back to existing open-source projects or make plugins that you use internally available as a separate project

More than “creating the list of projects we will open-source”, I believe in an approach where management creates the right context:

In summary, contributing to open-source software can help your enterprise IT department in your DevOps/Agile transformation and in recruiting the best talent. Contributing to open-source software does not require a lot of investments, but does require a significant mindset shift.|||

