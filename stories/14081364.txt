The most important part of my company, PolicyStat, is our people. The processes, the tools, the software, the legal entity… all of that pales in importance compared to our team. Our team is what makes our customers successful, and making our customers successful is why we exist as an organization. This means that hiring/recruiting is the single most important thing we do.

Belief in the primacy of team quality is fairly uncontroversial. You’ll find few executives who openly disagree. Despite this lip service, I think the actions of many (most?) organizations in our industry reveal a failure to invest in their hiring process. The standard interview process consists of a series of unstructured conversations that do a poor job of predicting which candidate will best improve the team on which they will work. These unstructured conversations do little more than allow us to confirm our biases and hire people that remind us of ourselves.

Despite the existence of the internet, superior job boards, machine learning, and a world-wide network of talent, most hiring is still done via referrals. My theory is that referrals dominate because hiring managers tacitly realize that their interviewing process is not a great predictor of actual success.

There are many problems with relying mostly on referrals + unstructured interviews for hiring, all of which are well-described in How to Make Tech Interviews a Little Less Awful:

Rather than appealing to the extensive research showing the superiority of work samples and structured interviews (done by Google and others), or to PolicyStat’s experience using this technique across 300+ candidates and 6 unique positions, let’s start by appealing to common sense. Pretend we’re hiring a concert violinist. Which interview method do you guess is better at predicting violinist success?:

Not many folks find option 1 compelling, yet that’s exactly what we’re choosing with the standard interview process. This really isn’t rocket surgery.

When candidates interview at PolicyStat, we give them a specific project that mirrors the actual work as closely as possible. We then score that work sample (aka “job simulation”, aka in-basket test) with an objective rubric we defined ahead of time. We use the result of that rubric as the heaviest single component of our final decision.

There’s an increasing amount of buzz from the tech community about this approach to interviewing, from companies like Spreedly, Matasano, to AirBnB’s data science team. I’m proud of my tech peers, but the advantages of this approach aren’t limited to engineering/programming positions. We’ve used work samples + structured interviews with great results for these titles:

The general pattern is to figure out the most frequent, most important things someone will do in that role and then to simulate them. There are various tactics for doing a good job of that (and I’m working on a post with our learning), but let’s walk through a quick example. Lots of knowledge work involves answering email and there’s an easy pattern for creating email-answering work samples:

Creating a good work sample test is not easy, but is an investment that pays with each additional interview. Your work sample can be iterated on to make it reliably better at predicting candidate success. Here are the core tenants we’ve landed on for the creation of a predictive work sample:

The work sample should be as close as possible to an important task (or set of tasks) that the candidate will perform while actually doing the job. In academic circles, this property is sometimes referred to as criterion-related validity and content validity. A work sample to file an expense report is probably not a good idea because it’s not an important task.

The closer your work sample matches the context of the actual work, the better it will predict success in the role. For example, if the job is software engineering, asking a candidate to write code on a whiteboard is worse than asking them to write it in a browser, which is worse than letting them use their laptop with their preferred text editor and environment.

Consistently enforcing a time constraint is the best way to respect the candidate’s time. Constraining time mitigates against providing an advantage to candidates that have more flexibility in their schedule or fewer other demands.

Evaluating a complex work is a hard problem, which means our brains substitute easier questions and introduce bias. A biased evaluation of actual work is better than a biased evaluation of a candidate’s resume and ability to mirror you, but we can do better. When in doubt, err towards more granular scoring and validate by having scorers use the rubric independently. Everywhere that two scorers differ, that’s your list for rubric improvement. Our 4-hour engineering work sample has ~90 individual items on the rubric.

Because this work sample is timed, candidates should get a prep guide in advance of their scheduled work sample with a list of resources they can use to prepare. It should include tutorials, blog posts, sample projects, and whatever else they would have googled and found if given an unlimited amount of time to learn and complete the project. You want to hire folks who can learn. A work sample that mostly tests how recently someone has used a specific learnable tool/technique is going to cause a lot of preventable false negatives.

Providing detailed, meaningful feedback is the least we can do after candidates spend 4+ hours interviewing with us. The more detailed, the better the candidate experience.

Better: “You lost points on support tickets 3, 5, and 7 because we’re looking for a non-corporate expression of personal empathy like ‘I’m sorry this bug has wasted so much of your time’”

Bonus Points: This feedback turns the work sample calibration into a useful training exercise for your current team.

Every tiny piece of your hiring process should be subject to many small improvements, from the work sample, to the prep guide, to the job post, to your email communication. You’re not going to eliminate all context bias or rubric bias on the first crack. You’re not going to strike the perfect tone in your email communication. You’re probably going to fall prey to the curse of knowledge and forget to provide important information. That’s OK, because those things were true about your unstructured process, too. The difference is that improvements made to your structured, work sample-based process are durable.

My general rule is that if I need to answer a candidate’s one-off question, then that’s a “bug” in my process. I find a place in the prep guide, job post, or opening explainer email to insert that information. The next candidate then gets a slightly better experience.

If anyone else has experience using work samples for their interviews, I’d love to talk shop. Please get in touch.

If you’d like to improve the quality of patient care within healthcare, and you think that companies should hire based on who does the best work, PolicyStat is hiring|||

Traditional hiring is broken. Improve your team and create a more scalable, efficient, and reliable recruiting process by adding a Work Sample. Bonus: It’s the right thing to do if you value diversity