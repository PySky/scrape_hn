Try out the demo!

Have you ever wanted a drag and drop library that just works? That doesn't just depend on bloated frameworks, that has great support? That actually understands where to place the elements when they are dropped? That doesn't need you to do a zillion things to get it to work? Well, so did I!

You can get it on npm.

If you're not using either package manager, you can use by downloading the files in the folder. We strongly suggest using , though.

There's a caveat to . You shouldn't include it in the of your web applications. It's bad practice to place scripts in the , and as such makes no effort to support this use case.

Place in the , instead.

There's a few CSS styles you need to incorporate in order for to work as expected.

You can add them by including or in your document. If you're using Stylus, you can include the styles using the directive below.

Dragula provides the easiest possible API to make drag and drop a breeze in your applications.

By default, will allow the user to drag an element in any of the and drop it in any other container in the list. If the element is dropped anywhere that's not one of the , the event will be gracefully cancelled according to the and options.

Note that dragging is only triggered on left clicks, and only if no meta keys are pressed.

The example below allows the user to drag elements from into , and from into .

You can also provide an object. Here's an overview of the default values.

You can omit the argument and add containers dynamically later on.

You can also set the from the object.

And you could also not set any arguments, which defaults to a drake without containers and with the default options.

The options are detailed below.

Setting this option is effectively the same as passing the containers in the first argument to .

Besides the containers that you pass to , or the containers you dynamically or from drake.containers, you can also use this method to specify any sort of logic that defines what is a container for this particular instance.

The example below dynamically treats all DOM elements with a CSS class of as dragula containers for this .

You can define a method which will be invoked with whenever an element is clicked. If this method returns , a drag event won't begin, and the event won't be prevented either. The element will be the original click target, which comes in handy to test if that element is an expected "drag handle".

You can set to a method with the following signature: . It'll be called to make sure that an element , that came from container , can be dropped on container before a element. The can be , which would mean that the element would be placed as the last element in the container. Note that if is set to , will be set to the copy, instead of the originally dragged element.

Also note that the position where a drag starts is always going to be a valid place where to drop the element, even if returned for all cases.

If is set to (or a method that returns ), items will be copied rather than moved. This implies the following differences:

If a method is passed, it'll be called whenever an element starts being dragged in order to decide whether it should follow behavior or not. Consider the following example.

If is set to (or a method that returns ) and is as well, users will be able to sort elements in -source containers.

By default, spilling an element outside of any containers will move the element back to the drop position previewed by the feedback shadow. Setting to will ensure elements dropped outside of any approved containers are moved back to the source element where the drag event began, rather than stay at the drop position previewed by the feedback shadow.

By default, spilling an element outside of any containers will move the element back to the drop position previewed by the feedback shadow. Setting to will ensure elements dropped outside of any approved containers are removed from the DOM. Note that events won't fire if is set to .

When an element is dropped onto a container, it'll be placed near the point where the mouse was released. If the is , the default value, the Y axis will be considered. Otherwise, if the is , the X axis will be considered.

You can provide an method with a signature. This method should return for elements that shouldn't trigger a drag. The argument is the element that was clicked, while is the item that would be dragged. Here's the default implementation, which doesn't prevent any drags.

Note that will be invoked on the DOM element that was clicked and every parent up to immediate children of a container.

As an example, you could set to return whenever the clicked element (or any of its parents) is an anchor tag.

The DOM element where the mirror element displayed while dragging will be appended to. Defaults to .

When this option is enabled, if the user clicks on an input element the drag won't start until their mouse pointer exits the input. This translates into the user being able to select text in inputs contained inside draggable elements, and still drag the element by moving their mouse outside of the input -- so you get the best of both worlds.

This option is enabled by default. Turn it off by setting it to . If its disabled your users won't be able to select text in inputs within containers with their mouse.

The method returns a tiny object with a concise API. We'll refer to the API returned by as .

This property contains the collection of containers that was passed to when building this instance. You can more containers and old containers at will.

This property will be whenever an element is being dragged.

Enter drag mode without a shadow. This method is most useful when providing complementary keyboard shortcuts to an existing drag and drop solution. Even though a shadow won't be created at first, the user will get one as soon as they click on and start dragging it around. Note that if they click and drag something else, will be called before picking up the new item.

Gracefully end the drag event as if using the last position marked by the preview shadow as the drop target. The proper or event will be fired, depending on whether the item was dropped back where it was originally lifted from (which is essentially a no-op that's treated as a event).

If an element managed by is currently being dragged, this method will gracefully cancel the drag action. You can also pass in at the method invocation level, effectively producing the same result as if was .

Note that a "cancellation" will result in a event only in the following scenarios.

If an element managed by is currently being dragged, this method will gracefully remove it from the DOM.

The is an event emitter. The following events can be tracked using :

Returns whether the instance can accept drags for a DOM element . This method returns when all the conditions outlined below are met, and otherwise.

Removes all drag and drop events used by to manage drag and drop between the . If is called while an element is being dragged, the drag will be effectively cancelled.

Dragula uses only four CSS classes. Their purpose is quickly explained below, but you can check to see the corresponding CSS rules.

There's now a dedicated support channel in Slack. Visit this page to get an invite. Support requests won't be handled through the repository anymore.|||

dragula - :ok_hand: Drag and drop so simple it hurts