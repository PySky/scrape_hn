I have been tinkering with the vanilla source code of Wolfenstein 3D from 1992. Even though it is more than 20 years old and has rotten for modern systems, you can still compile it if you recreate the environment. All you need is :



Open a command line and create two folders, one for each DOS drive needed:



 Now we have all the files in the filesytem. Just to check, type: 

 



You should have the following :

 



Mount the filesystem, one folder for each drive :

Now is time to install Borland C++ 3.1 :



 Press enter when you select the source drive ( it should already be A drive )



Leave all the default settings and select "Start Installation":

 The warnings will tell you that Microsoft windows folder could not be found but it is not needed anyway, just press Enter.

 

 

 

 



We have a system running and a compiler on it: Time to decompress (again) the source code.

 





 

 Type 'C'

 

 Keep the default path: 

 

 Y to create the directory.

 

 Installing ! 

 





 After pressing OK, use the mouse or the shortcuts to Project -> Open Project : 



Select Options -> Directories and change the value as follow :

Try to compile again (Compile -> Build All): 

 Compiling did work but the linking failed: "Unable to find OBJ file" because the path of SIGNON.OBJ and GAMEPAL.OBJ in wrong in the project: They are marked in : 

 

 Delete them from the project (Select and the Projext -> Delete item). Add them again via PROJECT -> Add Item... . Add and 

 Try to compile again via (Compile -> Build All) 

 IT WORKED ! But will it run ? 



Download the shareware version or even better: Purchase as full version on Wolfenstein 3D.



Go back to DosBox and install the game to .

After installation of the game, copy the .EXE we just compiled to the game folder,

Try to run it:



 Hm, that looks weird..... 

 

 Uh... 

 What ? 

 I did not remember it like that.... 

 Ok something must be very wrong here !!



It has to do with the production access pipeline and how they are used by the engine. When Adrian Carmack and Kevin Cloud were done crafting all the graphic files, they used a tool (IGRABed) to pack them together. The output was made of 3+2 files.

The VGAHEAD file is an index containing pointers to the VGAGRAPH where the data is stored huffman compressed. VGADICT contains the huffman dictionaries to decompress the data.

 

 The two other files produced:

Are compiled into engine as seen in the following drawing :

 

 

 What are the and files needed for? In short, to allow access by name. When IGRABed assembled all files it would also create an enum with matching indices:

 

 GRE.H

This way when the engine requested a particular asset, it could use a logical name (L_GUYPIC) instead of a "magic number" (2).

 

 That means the engine shipped with the indices of the images in the VGA files HARD-CODED. Since the assets and codebase evolved after shipping wolf3D shareware (with Spears of Destiny), the newly compiled game indices do not match the location in the original assets files.

Fortunately there is a simple solution to this problem: Somebody regenerated the VGA assets so they match the indices in the .H and .EQU released with the source code. Just copy those files (if you use the shareware assets you will have to change the file extension from .WL6 to .WL1).

 





 It works !! 

 

 Yet we are are not done ! 



It may not be obvious to people that never saw the original game but the DosBox image above is not what people saw in 1992. The VGA framebuffer was 320x200 but the CRT monitors had an aspect ratio of 4:3. Which mean the framebuffer was stretched vertically when sent to the monitor. DosBox has an option to compensate for that : 



Change that aspect to true: 

 Try again :

|||

