I think it is safe to say that if you are a developer, you probably hate programming in Windows. There are hundreds of organisations worldwide with their legacy applications running on Windows, and they are still struggling to automate their infrastructure due to the misconception that DevOps is just for the open source world—and that’s paired with a lack of proper package management solutions for Windows. Personally, after a brief period of using Chef on Windows, and discovering how convenient they have made it to implement config management for Windows platform, I thought it would be worth sharing my experience.

Chef is an automation platform founded in 2008, and it gives you automation solutions for configuration management, installing packages, etc. It transforms infrastructure to code—that is, it automates how infrastructure is configured, deployed and managed across your network irrespective of the size of your environment.

Chef started its support for Microsoft Windows from 2011 when it released the knife-windows plugin. To get started, you can install the ChefDK install package from here. This makes it easier than ever to get Chef and Ruby installed on Windows.

You can check to see if the Chef Client Service is operational by running the following commands:

c:\WINDOWS\system32>chef-service-manager -a install Service “chef-client” has successfully been installed. C:\WINDOWS\system32>chef-service-manager -a start One moment...Start pending One moment...Start Pending Service “ chef-client” is now ‘running’. C:\WINDOWS\system32>chef-service-manager State of chef-client service is: running C:\WINDOWS\system32>chef Usage: chef -h/--help chef -v/--version Chef command [arguments...] [options...] Available Commands: exec Runs the command in context of the embedded ruby env Prints environment variables used by ChefDK gem Runs the ‘gem’ command in context of the embedded ruby generate Generate a new app, cookbook, or component shell-init Initialize your shell to use ChefDK as your primary ruby install Install cookbooks from a Policyfile and generate a locked cookbook set update Updates a Policyfile.lock.json with latest run_list and cookbooks push Push a local policy lock to a policy group on the server push-archive Push a policy archive to a policy group on the server show-policy show policyfile objects on your chef server diff generate an itemized diff of two policyfile lock documents provision provision VMs and clusters via cookbook export Export a policy lock as a chef zero code repo clean-policy-revisions Delete unused policy revisions on the server clean-policy-cookbooks Delete unused policyfile cookbooks on the server delete-policy-group Delete a policy group on the server delete-policy Delete all revisions of a policy on the server undelete undo a delete command verify Test the embedded ChefDK application

Developing cookbooks on Windows is as easy as on any other platform. Let’s start with a simple example of creating a text file on the desktop. Navigate to the cookbook folder in your chef-repo, and generate a new cookbook called ‘testcookbook’.

The above commands create a template of a cookbook. Now, to write the first recipe, open the default.rb file in the Recipes folder.

The above recipe contains a simple ‘file’ resource which creates a text file called test and puts in the content “This is a test file” on the system desktop. If you are familiar with writing Chef for Linux, you will see how they have kept the ‘file’ resource the same for both platforms. (This is one of the advantages I observed.) To run the above recipe, execute the chef-client command in the local mode as:

Next, let’s create a more complex cookbook to do the following:

 Install IIS (Web-Server) if it is not already installed.

 – Install the IIS Management Console (Web-Mgmt-Console) if it is not already installed.

 – Start and enable the IIS Service (W3SVC)

 – Set the Default.htm webroot page to whatever is configured in our template HTML file, index.html.erb

Add the following to a new recipe:

The Windows cookbook is a community cookbook available in the Chef supermarket that helps all Chef users create Windows-based cookbooks easily. For example, the resource ‘windows_feature’ allows you to install any software that can support or improve the functionality of the server in an idempotent way without the user worrying about the underlying powershell code.

if I were to rewrite the above-mentioned IIS cookbook using the Windows cookbook resources, it would look as below:

And that’s it! Hopefully this will get you started with Chef on Windows, get your workstation ready, and let you run your first Windows cookbook successfully. To further build on what you have currently, I would highly recommend going through the Windows cookbook in much more detail and taking the time to understand its full potential. As much of a pain as it is to program in Windows, Chef has definitely done their part in making it as easy as possible.|||

Developing cookbooks on Windows is as easy as on any other platform. Let’s start with a simple example of creating a text file on the desktop.