For a collection of useful macros, see the associated Magma project

Macros are written directly in the source, and the program is used to process a file with macros to a macroexpanded file.

If you're running Arch or a similarly bleeding-edge distro, just install from Pacman and skip to step 5. Otherwise, you need to manually download the latest SBCL[1].

[1]: Buildapp doesn't work on older versions of SBCL, and it is required to build the executable.

A macro is a function that operates on your code's abstract syntax tree rather than values. Macros in cmacro have nothing to do with the C preprocessor except they happen at compile time, and have no knowledge of run-time values.

In cmacro, a macro maps patterns in the code to templates. A macro may have multiple cases, each matching multiple patterns, but each producing code through the same template.

Macros are not primarily about safety and performance: They are about the programmer. Macros give you automation, plain and simple. They allow you to abstract away and remove repetition in places where a functional or object-oriented approach can't. For example, Common Lisp's WITH-OPEN-FILE macro helps with the common pattern of 'acquire a resource, apply something to it, and close it'. While this can be done in languages that support (And have simple syntax for) anonymous functions, macros help reduce this syntactic overhead.

cmacro has a very lenient notion of C syntax, which means you can write macros to implement DSLs with any syntax you like. You could implement Lisp-like prefix notation, or a DSL for routing URLs, or the decorator pattern, for example.

For a very simple example, this macro matches anything of the form , where is any arbitrary expression, and performs a simple transformation:

With this definition, code like becomes .

A more complicated macro can match multiple patterns, like the macro which implements a DSL for defining routes in a hypothetical C web framework.

Because a language without macros is a tool: You write applications with it. A language with macros is building material: You shape it and grow it into your application.

There is a sweet spot between low-level performance and control and high-level metaprogramming that is not yet occupied by any language: Metaprogramming, being an inherently compile-time thing, can be done in the absence of automatic memory management or dynamic typing. Rust seems to want to fill this spot, and I also approached this problem with Corvus, but I feel this approach of adding metaprogramming to C - A simple language, with a long history, that runs truly everywhere - can become useful.

A more complicated example, using the function:

This stores the result of the condition in the variable . See Anaphora for a collection of similar anaphoric macros.

The syntax for variables is just a name followed by an optional, space-separated list of qualifiers, enclosed in the operator, eg: , , .

These use regular variable syntax but the text starts with a '@'.

The lex and yacc grammars were originally posted by Jeff Lee in 1985, and rescued and updated to the recent standards by Jutta Degener.

The syntax for macro definition was inspired by Mozilla's great sweet.js library. Originally I considered multiple different ways of defining them, including external YAML files or just piping the AST to an XSLT or similar program, but this seemed like the best way.

The Makefile is largely based on that of Dimitri Fontaine's pgloader utility.

Peter Norvig's Paradigms of Artificial Intelligence Programming chapter on Eliza was used as a reference for the pattern-matching engine.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.|||

cmacro - Lisp macros for C