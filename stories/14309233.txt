In my new series of articles “Design Patterns in Automated Testing“, I am going to present you the most useful techniques for structuring the code of your automation tests. In my examples, I am going to use Selenium WebDriver. However, the patterns are abstract structures, and they can be implemented with any similar automation framework or programming language. One of the most popular patterns in Web Automation is the so called Page Object Pattern. To understand the primary goal of the pattern, first you need to think what your web automation tests are doing. They navigate to different web pages and click/type on/in various elements. The Page Object Pattern wraps all elements, actions and validations happening on a page in one single object- Page Object. I am going to show you two ways how you can use this pattern. Through the usage of the built-in Page Objects in Selenium WebDriver and via manually created classes.

The classes and objects participating in this pattern are:

If you are not familiar with the WebDriver Framework, you can look into my article- Getting Started with WebDriver C# in 10 Minutes. To be able to use the page object pattern built-in feature of the framework, you need to install an additional NuGet Package- Selenium.Support

 

 The automation test cases in the below examples will navigate to Bing, search for “Automate The Planet” and validate the count of the returned results. In this particular case, there is a need of only two classes- BingMainPage and the test class BingTests.

There are two important things to highlight in the above example.

Just add a property with the desired name and place the above attribute with the appropriate properties- the type of the locator (Id, Class, CSS) and the value of the Locator.

 Initialization of the Elements

The static method InitElements takes the responsibility to initialize all of the elements on the page the first time when the driver navigates to it.

The main pros of the Page Object Pattern are the readability and that it follows the DRY (Do not Repeat Yourself) and Single Responsibility SOLID Principles. It helps you to built an easy to maintain tests that do not use element locators directly.

The classes and objects participating in this pattern are:

Using this approach, we don’t need anymore the Selenium.Support NuGet.

 Paste all elements of the page in a new element map class.

At last, put together all classes in the Main Page Object.

As you can see the usage of the second type of page object pattern structure is identical to the previous one. Regardless, I like the second solution more because it follows the SOLID Principles more strictly. The different classes used in it have a stronger Cohesion.|||

Explains in details how to implement Page Object Pattern- through the usage of the built-in feature in WebDriver and how to create it from scratch.