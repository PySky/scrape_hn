Ever since Dan Abramov showed a prototype of Redux at React Europe in 2015, I‚Äôve been fascinated with discussions around how to better manage state in a complex web application. Shameless plug: I even open sourced Redux Bug Reporter, a drop in React component and Redux enhancer that allows for filing bugs with enough serialized state and actions to allow for complete replay of the bug. But while there are plenty of excellent discussions and posts online about Redux best practices, I‚Äôve seen less information from how large companies are actually using Redux at scale.

About a month ago, I came across Ryan Johnson‚Äôs excellent post ‚ÄúDissecting Twitter‚Äôs Redux Store‚Äù. In it, he walked through using the React Developer Tools to output the redux state of the Twitter mobile website, and broke down some of the design decisions evident from the results, mostly notably the normalized data structure.

When looking at the tweet data, he noted that in the data, each tweet id had a status of . Ryan stated:

This made me think immediately of the excellent Redux DevTools Extension, which allows you to see all redux actions and the related state changes over time. If I could get this extension enabled on the twitter mobile site, I could see all changes to the redux store over time, and how the data responded to each action.

The process to use the Redux DevTools Extension on your own code is relatively simple, and documented very well in the project‚Äôs docs. The basic pattern is calling out to a global variable when creating a store, like so:

If exists, the store automatically hooks into the extension to provide the debugging capabilities we‚Äôd like.

The mobile twitter website isn‚Äôt a project I have the source code to, however. I wondered if it was reasonably possible to attach the extension in production, with twitter‚Äôs minified code. It turns out that it‚Äôs actually not too difficult üôå.|||

Ever since Dan Abramov showed a prototype of Redux at React Europe in 2015, I‚Äôve been fascinated with discussions around how to better manage state in a complex web application. Shameless plug: I‚Ä¶