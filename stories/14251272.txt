MySQL continues to be one of the most popular databases used in cloud-native applications. In fact, MySQL is so popular that other cloud databases such as AWS Aurora maintain wire protocol compatibility with MySQL. For SREs and DevOps engineers running MySQL database in production, it is crucial to understand how to monitor MySQL. MySQL poor health can lead to cascading effects on other application components. For example, slow queries can impact page load times for an application, or missing indexes can result in high-latency and application time-outs. By effectively monitoring the performance of databases and query executions, SREs and DevOps can identify if there are bottlenecks in the database tier which affect the overall application performance. With this appreciation for the importance of MySQL monitoring, let us quickly survey what techniques are commonly used for MySQL monitoring and then discuss Netsil’s approach for the same.

Netsil adopts the following approach for monitoring MySQL:

Interaction Analytics: Without instrumenting the database or the application, just by looking at the wire protocol (through packet capture) in a very lightweight fashion, Netsil’s interaction analytics approach allows you to monitor how each and every query is doing. This approach has extremely low overhead and gives instant visibility into latency, throughput, error code, distribution of requests, response sizes etc. for every query. Polling: In addition to the interaction analytics approach, Netsil AOC also uses a polling technique to give a complete picture of the database performance. Basic polling allows us to look at the saturation metrics of database (e.g., thread counts, IOPS issues, connections/sec, etc.). DevOps are often weary of putting an agent on the database server, due to overheads. Moreover, sometimes the server is not accessible if it is a hosted MySQL solution. With Netsil you do not need to install collectors on the database server and you can look at interactions from the client side. Our solution works over SSL as well.

By using interaction analytics combined with basic polling, Netsil is able to extract details about queries which are not possible with other approaches and with very little overhead. Let us take a quick look at the MySQL protocol, followed by Netsil MySQL monitoring.

The MySQL client/server protocol is not as clean as PostgreSQL since it has grown organically. For example, in contrast to PostgreSQL, first byte is not always the message type. The meaning of bytes change depending on the state of client and server because the message headers are missing from the wire protocol. For these reasons, the MySQL protocol is famously difficult to parse. Interpreting what the bytes are on the wire can be challenging. In a future blog post we will provide more details on how we handle the MySQL protocol complexity. For now, we have done the hard work and let us focus on the powerful MySQL monitoring offered by Netsil AOC.

We described the four golden signals of monitoring, i.e., latency, traffic, errors, and saturation in our previous post, in the context of APIs and services. Here we briefly describe how we can use these signals for monitoring health and performance of MySQL databases.

Monitoring golden signals on the SLO-side with Netsil AOC



For databases, the golden signals on the Service Level Objective (SLO) side (latency, traffic and errors) are similar to APIs. With AOC, you can drill down latency, traffic and errors further based on dimensions such as query string, query type, server error code, server error string, username, schema name, server instance, server port, etc.

Saturation metrics, i.e measure of how full/busy the database is, comes from the polling component.

In conclusion, Netsil’s interaction analytics approach combined with basic polling gives complete visibility into the performance of the MySQL database, without any instrumentation on client application or database side. By interpreting the network interactions, Netsil is able to track the performance of queries with no overhead to database servers. If you are using MySQL for your cloud application, we encourage you to try Netsil AOC for free.|||

Monitor the performance of MySQL database without any code instrumentation on either client application or database side.