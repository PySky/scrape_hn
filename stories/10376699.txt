is written in Go. You need to have version 1.5.1 or higher installed. For Go installation instructions see https://golang.org/doc/install.

Third party packages are vendored using the Go 1.5 vendor experiment.

To install export and then use .

will be installed into . If you'd like to install it into another directory (e.g. ), then you can export prior to running .

To build an RPM for either RHEL 6 or 7, which can be used for installation on other systems, into the source directory and run .

The configuration is handled through the following environment variables.

The bind address and port that will listen on. The format for this value is or . The default value is . A comma-separated list of regions that will scan for AMIs. Use "us-east-1" for US East, "us-west-1" for US West 1, etc. The AWS Resource Name of the role will assume (STS AssumeRole), e.g. . This can be used for running with a user/iam role outside of the account where the AMIs are built. Note that this requires the user/iam role to be granted permission from within the builder account. The type of cache to use. Currently supported values are and . The default value is . See Cache Types for more information. The time to wait before the AMI cache is updated. The format of this value is a duration such as "5s" or "5m". The default value is "15m", or 15 minutes. A comma-separated list of memcached servers to use. This only needs to be defined when AMIQUERY_CACHE_MANAGER is set to . The file location to send application log messages. Note that does not manage this file, it only writes to it. The default is to log to STDERR. The file location to send HTTP log messages. Note that does not manage this file, it only writes to it. The default is to log to STDERR.

This most basic configuration listens on and uses the cache manager with a 15 minute cache TTL. It will attempt to use AWS credentials from either environment variables, , or the meta-data on an EC2 instance.

This configuration listens on localhost:8081 and uses the cache manager talking to and . It also sets the cache TTL to 5 minutes.

The internal cache uses a builtin type and caches AMIs within the process. If AMIQUERY_CACHE_MANAGER is undefined, the internal cache is used. You can explicitly define it by setting AMIQUERY_CACHE_MANAGER to .

memcached is used to cache AMIs. You must set AMIQUERY_CACHE_MANAGER to and provide the list of AMIQUERY_MEMCACHED_SERVERS to use memcached.

leverages vendor mime types to return the RESTful API version to use.

See http://blog.pivotal.io/pivotal-labs/labs/api-versioning for more information.

Queries can search by region, ami, status, and tag using the following schema.

If no mime type is specified then will default to the latest API version.

is also a tag on the AMI, it's provided as a query parameter for convenience.

You may also specify the query parameter to receive the output in JSONP. Additionally, you can specify the query parameter to see the results in a more human friendly format. Note that and are mutually exclusive with taking precedence if both are specified.

Get all AMIs from all supported regions:

Get all AMIs from the region:

Get all AMIs from regions and :

Get all AMIs from region that have the tag set to :

Get all AMIs from region that have the tag set to and the tag set to :

Get all AMIs from region with the JSONP callback function named :

Get all AMIs from region and display the results in a more human readable format:|||

ami-query - Provide a REST interface to your organizations AMIs