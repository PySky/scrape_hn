we're zany to the max

JDAHA'I >=C;F;E;AO EE; F;KH IC;=?B;I The first example is clearly much more readable than the second. UPDATE: This situation has changed since the Standard was first published. Thanks to the widespread availability of Unicode tables, most people nowadays find the hexadecimal form to be quite legible. A recent amendment adds this capability to SGML. (XML has always allowed it, since it wasn't designed to be read by humans.) Q. Why does nsgmls complain that '((a|b)*,b)' is ambiguous? A. Because it's not clear whether 'a' stands for Anchor, Author, or Address. Q. OK, so how do I make it unambiguous? A. This depends of course on the content model in question. Your best bet is to post to comp.text.sgml, where you are likely to receive several answers. Many will be wrong, so don't take any advice from the newsgroup unless three or more respondents say the same thing. Q. What's an RE? A. RE is an acronym for Record End, which is sort of like a newline, only different. Goldfarb's First Law of Text Processing states that: "... if a text processing system has bugs, at least one of them will have to do with the handling of input line endings." [The Handbook, footnote p. 321] The Record End concept was introduced to make sure that SGML parsers don't violate Goldfarb's First Law. Q. So what's an RS? A. An RS is a fictitious character inserted by the entity manager and later removed by the parser. Applications shouldn't ever have to worry about RSs; their primary function is to make REs disappear in mysterious places. Q. What's the difference between a QUANTITY and a CAPACITY? A. In the SGML declaration, a "quantity" is an arbitrary limit placed on the size of individual parts of a document which must be increased in order to use reasonable DTDs. A "capacity" on the other hand is an arbitrary limit placed on the size of the document as a whole which must be increased in order to process reasonably-sized documents. Quantities and capacities are used to make sure that every document includes an SGML declaration. Were it not for the ridiculously small limits in the Reference Concrete Syntax, most SGML users would be able to simply use the default SGML declaration instead of providing their own, slightly modified version, in violation of section 6.2. Q. What are inclusion exceptions and how do they work? A. There are two primary schools of thought regarding inclusions. Some feel that inclusion exceptions are a dangerous and badly designed feature, and should never be used (exclusion exceptions, however, are another matter). Others feel that inclusion exceptions are a useful and necessary enhancement to SGML's formal model. Q. What are exclusion exceptions and how do they work? A. There are two primary schools of thought regarding exclusions. Some feel that exclusion exceptions are a dangerous and badly designed feature, and should never be used (inclusion exceptions, however, are another matter). Others feel that exclusion exceptions are a useful and necessary enhancement to SGML's formal model. ============================================================ Part 7. HyTime. ============================================================ Q. What's a grove? A. I've heard that it's supposed to be an acronym for some thing or another, but I don't buy it. Q. What's the difference between a 'wand' and a 'baton' in the HyTime scheduling and rendition module? A. Sorry, it took me three months just to figure out 'pathloc'. I'm not even going to try to answer that one. Q. How many HyTime consultants does it take to screw in a lightbulb? A. Just one. HyTime's powerful linking and location facilities make it trivial to create a link expressing the abstract semantic of "screwing" with the lightbulb and the socket as link-ends, and even if the lightbulb and socket are not expressed as SGML objects you're free to use whatever application-specific query notation you desire to locate them. The actual installation of the light bulb is, of course, left up to the application. ============================================================ Part 8. DSSSL, CSS, XSL, and DHTML. ============================================================ Q. What are DSSSL, CSS, XSL and DHTML? A. They are acronyms. See Robin Cover's extensive SGML/XML web site at for more information. ============================================================ Part 9. Acknowledgments ============================================================ Thanks to Christian Wetzel, Steve Pepper, and David Carlisle for some of the funnier answers. >|||

