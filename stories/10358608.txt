To create a Lambda function you first create a Lambda function deployment package, a .zip file consisting of your code and any dependencies.

You can create a deployment package yourself or write your code directly in the Lambda console, in which case the console creates the deployment package for you and uploads it, creating your Lambda function. Note the following to determine if you can use the console to create your Lambda function:

After you create a deployment package, you may either upload it directly or upload the .zip file first to an Amazon S3 bucket in the same AWS region where you want to create the Lambda function, and then specify the bucket name and object key name when you create the Lambda function using the console or the AWS CLI.

The following is an example procedure to create a deployment package (outside the console).

This should work for most standard installations of Python and pip when using pure Python modules in your Lambda function. If you are including modules that have native dependencies or have Python installed with Homebrew on OS X, you should see the next section which provides instructions to create a deployment package when using Virtualenv. For more information, see Create Deployment Package Using a Python Environment Created with Virtualenv and the Virtualenv website.

You will use to install dependencies/libraries. For information to install , go to Installation.

You create a directory, for example . Save all of your Python source files (the .py files) at the root level of this directory. Install any libraries using pip. Again, you install these libraries at the root level of the directory. For example, the following command installs the HTTP library in the directory. If using Mac OS X and you have Python installed using Homebrew (see Homebrew), the preceding command will not work. A simple workaround is to add a file in your with the following content. Zip the content of the directory, which is your deployment package. Zip the directory content, not the directory. The contents of the Zip file are available as the current working directory of the Lambda function. For example: /project-dir/codefile.py/lib/yourlibraries

AWS Lambda includes the AWS SDK for Python (Boto 3), so you don't need to include it in your deployment package. However, if you want to use a version of Boto3 other than the one included by default, you can include it in your deployment package.

This section explains how to create a deployment package if you are using a Python environment that you created with the Virtualenv tool. Consider the following example:

Now, to create a deployment package you do the following:

For an example of creating a Python deployment package, see Python.|||

Simple scenario â€“ If your custom code requires only the AWS SDK library, then you can use the inline editor in the AWS Lambda console. Using the console, you can edit and upload your code to AWS Lambda. The console will zip up your code with the relevant configuration information into a deployment package that the Lambda service can run.