I performed a quick audit of the RTE Player android application by sending the traffic through a burp proxy and investigating the requests the application makes to RTEs web servers.

When logging in to RTE Player, I was surprised to see several calls with sensitive information going over http, before a final call which goes over https.

Worryingly, the oauth token gets sent in plain text over http, along with the cookie used to login over https.

Please note: I have removed the sensitive pieces of my cookie and oauth tokens to avoid having my Facebook account compromised, and I’ve also removed some sensitive account information as well.

Feel free to check this out for yourself using a free version of burp.

The first json call to http://www.rte.ie is a request for an access token.

The above request is for an access token which is sent over http. The request contains a cookie which is made up of several fields: __cfduid, rtedaxuid, _ga, _gid, _gat and finally rtesso.

To compound this issue, all of these values in this cookie will be used later in our final call to https://login.rte.ie in addition to the oauth token we get from the above call.

Moving along, the above call results in the following response:

The above oauth information is used in subsequent calls. If you signed up for an account on RTE player using Facebook, or Google+, this oauth information above can be used to access information from your Facebook or Google+ account.

The next call is another request sent over http, this time to feeds.rasset.ie:

The response for this call is as follows. Note my parental control “pin” is also sent over plain text as well.

The next two calls are requests to get bookmarks and favourites, both calls look the exact same and have all of the oauth information included. These are sent over http as well. I’m not including them here as it’s not necessary.

Finally, a call is sent over https to https://login.rte.ie and the cookie used in this request is similar to the initial cookie sent over http, but it also has the oauth information appended.

Given that sensitive information is sent over http, it’s extremely easy for an attacker to sniff this traffic, thereby compromising your RTE Player account, and compromising information from your Facebook/Google+ account if you have those linked to RTE Player using oauth.

The RTE Player application has access to the private email address associated with a Facebook/Google+ account, and an attacker can use the compromised RTE oauth token to retrieve this address which is often not publicly available.

This information could then be used in a phishing attack, which could lead to a victims Facebook/Google+ account being compromised.

My recommendation would be to go into your Facebook/Google+ App Settings and remove the permissions for the RTE Player application, and to stop using the RTE Player mobile application until these issues are resolved.

I did not look at the iOS application as I do not own an iPhone, but I would suspect the issue exists there as well. If any of you have an iPhone handy, feel free to check it out and respond back if you have time.

I did notice RTE are using an anti-CSRF token in the final call over https which is good news, but sending all of the information over http prior to the final call over https really needs to be addressed.|||

I performed a quick audit of the RTE Player android application by sending the traffic through a burp proxy and investigating the requests the application makes to RTEs web servers. When logging in…