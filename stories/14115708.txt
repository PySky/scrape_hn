Or should be that be JsonPath? What­ev­er, it’s a tool I’ve been us­ing late­ly and gen­er­al­ly like. But it could use a lit­tle work.

The last project I worked on, Step Func­tions, has a JSON DSL for State Machi­nes, which makes use of JSONPath (see Paths and In­put and Out­put Pro­cesing) to solve a tricky prob­lem in a way that peo­ple seem to find easy to un­der­stand and use.

Ear­ly on in that project we adopt­ed the Jay­way JsonPath li­brary and it seems to most­ly Just Work.

But, we’ve had a few ques­tions from cus­tomer along the lines of “Your ser­vice re­ject­ed my In­putPath, but it looks OK to me.”

Which rais­es the ques­tion: What is a le­gal JsonPath, any­how?

To the ex­tent there’s an “official” def­i­ni­tion, the most ob­vi­ous can­di­date would be Ste­fan Goessner’s JSONPath - XPath for JSON. Stan­dards wonks will sneer at it, not a shred of BNF in sight. But I like it, be­cause it ap­plies the most im­por­tant les­son from Mark Pilgrim’s im­mor­tal Morons and Ass­holes es­say: Have lots of ex­am­ples.

Hav­ing said that, it’s kind of skin­ny. And if you go back to that Jay­way JsonPath spec and start scrolling the README.md, well, you can keep scrolling and scrolling, and there’s a lot of good­ness there.

But stil­l, is a valid JSONPath? Or should you have to say ? Be­cause blog-entry is not, af­ter al­l, a JavaScript “Name” con­struc­t.

For the pur­pos­es of AWS Step Func­tion­s, JsonPath means what Jay­way says it mean­s. But I’d be hap­pi­er if there were an RFC or some­thing be­cause, good as Jay­way is, peo­ple do [*­gasp*] write code in lan­guages oth­er than Java.

So, an RFC may­be? The idea’s not crazy.

Cap­i­tal­iza­tion · Let me set­tle one dis­pute right here: Ste­fan Goess­ner says “JSONPath”, Jay­way says “JsonPath”. Stefan’s right, be­cause it’s called JSON not Json, and by the anal­o­gy with XPath.|||

