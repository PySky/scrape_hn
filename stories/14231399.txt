In Part 1 of this series, we looked at serverless architecture and what it means for web development. We also looked at Backand and creating an account to work with our to-do List application. In this article, we'll build our application's data model by walking through a simple set of requirements. We'll implement the data model in Backand, then work on building a simple UI to present our data to the user.

Common software development wisdom is that changing requirements becomes an order of magnitude more challenging as you move through the development process. While a change at design time might have some frustrating repercussions, on average it would cost ten times as much to make the exact same change once design has completed and implementation has begun, and one hundred times as much once development is completed and we're ready to deploy to production. In recognition of this, let's spend some time defining the requirements of our application:

This requirements list is extremely basic, but for the purposes of this exercise, this small requirements list fits us perfectly - without confounding the design with a lot of extra functionality and testing.

Now that we have a set of requirements, we can use these to build an object model. Focusing on the requirements, we can quickly recognize that we'll need an object to manage our to-do list entries - let's call this "item." The "item" object, in turn, has a name, description, an owner, and a completion flag. This also implies that we have an "Owner" object - for now we'll just call that "users," and add some simple data - firstName, lastName, and email.

As we're using Backand to manage our application, we'll need to convert the above text description into a suitable format. Backand provides us with two tools to do this - a GUI Schema editor, which allows us to quickly build a model using GUI tools, or a JSON Schema editor, which allows us to define our fields using a JSON-formatted schema description. Which approach you choose will depend heavily on your personal preferences. For this article, I've converted our schema into a Backand-compatible JSON schema object below:

Most of the schema above should be fairly self-explanatory. The trickiest portion is the "items" collection in the "users" object. This uses a one-to-many relationship, representing that a single user can own many different to-do items. To use this model, paste it into the Backand Schema editor:

Once you've pasted the schema in, click "Validate & Update" to save these changes to your database. Backand will convert this schema to SQL statements, and make the appropriate modifications to your app's underlying database automatically.

Now that we've chosen a schema, let's create a simple UI. Our UI has to have the following components:

We'll ignore the user component for now, adding it in at a later stage in the tutorial. A simple mockup of the above might resemble the following:

This uses Twitter Bootstrap's Links and Buttons functionality, providing a simple UI with a clean look-and-feel. The HTML is fairly straightforward:

This includes Twitter Bootstrap using their CDN, then defines a list group. Each list group entry has a title, a button, and a description. We will use code to automatically hide the description when the item is not selected, but for now this is sufficient to get us started.

In this article we covered defining a data schema for our to-do list model, and created a very basic UI using Twitter Bootstrap. Next, we'll look at what we need to do in order to connect this HTML to our Backand application, and replace the default list in the HTML above with a dynamic list constructed based on server responses. We'll use jQuery for simplicity's sake, but functionality is also available - along with ready-made SDKs - for AngularJS 1, AngularJS 2, and React, among other platforms. If you want to get a head start, head over to Backand's SDK Github page for more info, otherwise - see you next time!|||

In this tutorial, we'll continue with our work from Part 1, and create a basic UI using Twitter's Bootstrap, and define a data schema for our to-do list model.