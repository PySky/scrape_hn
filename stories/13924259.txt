Android O introduces a variety of new features and capabilities for users and developers. This document highlights what's new for developers.

Make sure to check out Android O Behavior Changes to learn about areas where platform changes may affect your apps.

In Android O, we've redesigned notifications to provide an easier and more consistent way to manage notification behavior and settings. These changes include:

Figure 1. The screen on the right shows inline controls for notifications in Android O.

Account creation, login, and credit card transactions take time and are prone to errors. Users can easily get frustrated with apps that require these types of repetitive tasks.

Android O makes filling out forms, such as login and credit card forms, easier with the introduction of the Autofill Framework. Existing and new apps work with Autofill Framework after the user opts in to autofill.

You can take some steps to optimize how your app works with the framework. For more information, see Autofill Framework Overview.

Android O allows activities to launch in picture-in-picture (PIP) mode. PIP is a special type of multi-window mode mostly used for video playback. PIP mode is already available for Android TV; Android O makes the feature available on other Android devices.

When an activity is in PIP mode, it is in the paused state, but should continue showing content. For this reason, you should make sure your app does not pause playback in its handler. Instead, you should pause video in , and resume playback in . For more information, see Multi-Window Lifecycle.

To specify that your activity can use PIP mode, set to true in the manifest. (Beginning with Android O, you do not need to set to true if you are supporting PIP mode, either on Android TV or on other Android devices; you only need to set if your activity supports other multi-window modes.)

Android O introduces a new object, , which you pass to PIP methods to specify how an activity should behave when it is in PIP mode. This object specifies properties such as the activity's preferred aspect ratio.

The existing PIP methods described in Adding Picture-in-picture can now be used on all Android devices, not just on Android TV. In addition, Android O provides the following methods to support PIP mode:

Android O introduces a new feature, Fonts in XML, which lets you use fonts as resources. This means, there is no need to bundle fonts as assets. Fonts are compiled in file and are automatically available in the system as a resource. You can then access these fonts with the help of a new resource type, . Android O also provides a mechanism to retrieve information related to system fonts and provide file descriptors. For more information, about using fonts as resources and retrieving system fonts, see Working with fonts.

Android O introduces adaptive launcher icons. Adaptive icons support visual effects, and can display a variety of shapes across different device models. To learn how to create adaptive icons, see the Adaptive Icons preview feature guide.

Android developers of imaging apps can now take advantage of new devices that have a wide-gamut color capable display. To display wide gamut images, apps will need to enable a flag in their manifest (per activity) and load bitmaps with an embedded wide color profile (AdobeRGB, Pro Photo RGB, DCI-P3, etc.).

Android O adds support for Wi-Fi Aware, which is based on the Neighbor Awareness Networking (NAN) specification. On devices with the appropriate Wi-Fi Aware hardware, apps and nearby devices can discover and communicate over Wi-Fi without an Internet access point. We're working with our hardware partners to bring Wi-Fi Aware technology to devices as soon as possible. For information on how to integrate Wi-Fi Aware into your app, see Wi-Fi Aware.

Android O provides APIs that allow you to customize the pairing request dialog when trying to pair with companion devices over Bluetooth, BLE, and Wi-Fi. For more information, see Companion Device Pairing.

For more information about using Bluetooth on Android, see the Bluetooth guide. For changes to Bluetooth that are specific to Android O, see the Bluetooth section of the Android O Behavior Changes page.

Android O provides several APIs to help you manage the objects that display web content in your app. These APIs, which improve your app's stability and security, include the following:

To learn more about how to use these APIs, see Managing WebViews.

Android O introduces in-app pinning of shortcuts and widgets. In your app, you can create pinned shortcuts and widgets for supported launchers, subject to user permission.

For more information, see the Pinning Shortcuts and Widgets preview feature guide.

Android O supports the following accessibility features for developers who create their own accessibility services:

To learn more about how to make your app more accessible, see Accessibility.

Android O introduces a new permission, , which allows apps to answer incoming phone calls programmatically. This permission is classified as dangerous and is part of the permission group.

We've updated content providers to include support for loading a large dataset one page at a time. For example, a photo app with many thousands of images can query for a subset of the data to present in a page. Each page of results returned by a content provider is represented by a single Cursor object. Both a client and a provider must implement paging to make use of this feature.

For detailed information about the changes to content providers, see and .

A new method returns a object containing configuration and performance information, expressed as a map of attributes and values. The method is defined for these media classes:

Metrics are collected separately for each instance and persist for the lifetime of the instance. If no metrics are available the method returns null. The actual metrics returned depend on the class.

Android O adds several new methods to the MediaPlayer class. These methods can improve your app's handling of media playback in several ways:

Metadata can be useful for offline processing. For example, gyro signals from the sensor could be used to perform video stabilization.

When adding a metadata track, the track's mime format must start with the prefix "application/". Writing metadata is the same as writing video/audio data except that the data does not come from a . Instead, the app passes a with an associated timestamp to the method. The timestamp must be in the same time base as the video and audio tracks.

The generated MP4 file uses the defined in section 12.3.3.2 of the ISOBMFF to signal the metadata's mime format. When using to extract the file with metadata track, the mime format of the metadata will be extracted into .

Beginning with Android O, the platform offers enhanced support for multiple displays. If an activity supports multi-window mode and is running on a device with multiple displays, users can move the activity from one display to another. When an app launches an activity, the app can specify which display the activity should run on.

Note: If an activity supports multi-window mode, Android O automatically enables multi-display support for that activity. You should test your app to make sure it works adequately in a multi-display environment.

Only one activity at a time can be in the resumed state, even if the app has multiple displays. The activity with focus is in the resumed state; all other visible activities are paused, but not stopped. For more information on the activity lifecycle when several activities are visible, see Multi-Window Lifecycle.

When a user moves an activity from one display to another, the system resizes the activity and issues runtime changes as necessary. Your activity can handle the configuration change itself, or it can allow the system to destroy the process containing your activity and recreate it with the new dimensions. For more information, see Handling Configuration Changes.

provides two new methods to support multiple displays:

The adb shell is extended to support multiple displays. The command can now be used to launch an activity, and to specify the activity's target display:

Android O introduces several improvements to how apps get access to user accounts. For the accounts that they manage, authenticators can use their own policy to decide whether to hide accounts from, or reveal accounts to, an app. The Android system tracks applications which can access a particular account.

In previous versions of Android, apps that wanted to track the list of user accounts had to get updates about all accounts, including accounts with unrelated types. Android O adds the method, which lets apps specify a list of account types for which account changes should be received.

AccountManager provides six new methods to help authenticators manage which apps can see an account:

Android O introduces two special Package Name values to specify visibility levels for applications which were not set using the method. The visibility value is applied to apps that have the permission, and target versions of Android lower than Android O, or whose signatures match the authenticator targeting any Android version. provides a default visibility value for apps which were not set previously and for which is not applicable.

For more information about the new account access and discovery APIs, see the reference for and .

Starting in Android O, the API now supports seeking and playing in reverse. Seeking lets you set the position of the animation set to a specific point in time. Playing in reverse is useful if your app includes animations for actions that can be undone. Instead of defining two separate animation sets, you can play the same one in reverse.

Android O lets you set the size of your text expand or contract automatically based on the size of the TextView. This means, it is much easier to optimize the text size on different screens or with dynamic content. For more information, about autosizing TextView in Android O, see Autosizing TextView.

Android O learns about users' personalized sharing preferences and better understands for each type of content which are the right apps to share with. For example, if a user takes a photo of a receipt, Android O can suggest an expense-tracking app; if the user takes a selfie, a social media app can better handle the image. Android O automatically learns all these patterns according to users' personalized preferences.

Smart sharing works for types of content other than , such as , , , , etc.

To enable Smart sharing, add an of up to three string annotations to the intent that shares the content. The annotations should describe the major components or topics in the content. The following code example shows how to add annotations to the intent:

For detailed information about Smart sharing annotations, see .

Android O allows each app to declare a category that it fits into, when relevant. These categories are used to cluster together apps of similar purpose or function when presenting them to users, such as in Data Usage, Battery Usage, or Storage Usage. You can define a category for your app by setting the attribute in your manifest tag.

Android O adds three new StrictMode detectors to help identify potential bugs in your app:

Android O gives better guidance and behaviors around cached data. Each app is now given a disk space quota for cached data, as returned by .

When the system needs to free up disk space, it will start by deleting cached files from apps that are the most over their allocated quota. Thus, if you keep your cached data under your allocated quota, your cached files will be some of the last on the system to be cleared when necessary. When the system is deciding what cached files to delete inside your app, it will consider the oldest files first (as determined by modified time).

There are also two new behaviors that you can enable on a per-directory basis to control how the system frees up your cached data:

Finally, when you need to allocate disk space for large files, consider using the new API, which will automatically clear cached files belonging to other apps (as needed) to meet your request. When deciding if the device has enough disk space to hold your new data, call instead of using , since the former will consider any cached data that the system is willing to clear on your behalf.

The Storage Access Framework (SAF) allows apps to expose a custom , which can provide access to files in a data source to other apps. In fact, a documents provider can even provide access to files that reside on network storage or that use a protocol like Media Transfer Protocol (MTP).

However, accessing large media files from a remote data source introduces some challenges. Media players require seekable access to a file from a documents provider. In cases where a large media file resides on a remote data source, the documents provider must fetch all of the data in advance and create a snapshot file descriptor. The media player cannot play the file without the file descriptor, thus playback cannot begin until the documents provider finishes downloading the file.

Starting in Android O, the Storage Access Framework allows custom documents providers to create seekable file descriptors for files residing in a remote data source. The SAF can open a file to get a native seekable file descriptor. The SAF then delivers discrete bytes requests to the documents provider. This feature allows a documents provider to return the exact range of bytes that a media player app has requested instead of caching the entire file in advance.

To use this feature, you need to call the new method. The method accepts a object as a callback. The SAF invokes the callback any time a client application performs file operations on the file descriptor returned from the documents provider.

Android enterprise introduces many new features and APIs for devices running Android O. We've made the profile owner and device owner management modes more powerful, productive, and easier to provision than ever before. We've also enabled a whole new deployment scenario.

Some notable highlights include the following:

To learn more about the new APIs and features for Android enterprise in Android O, see the Android in the Enterprise page.

In Android O we are adding OpenJDK Java language features to Android. We are adding from OpenJDK 8 as well as and including from OpenJDK 7. Check out the new packages in the API diff report.|||

Highlights of what's new for developers in Android O.