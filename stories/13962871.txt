This page lists security vulnerabilities which Sandstorm mitigated, such that Sandstorm users were never vulnerable to the bug—even before it was fixed.

Most of the bugs listed below are publicly-disclosed security vulnerabilities against apps which have Sandstorm ports. Of course, the disclosures were made against the non-Sandstorm version of the app. On Sandstorm, these bugs either didn't matter at all, or their impact was drastically reduced.

We also list some bugs below reported against the Linux kernel. These are bugs that normally would allow any process executing on a Linux machine to gain full control of the machine. Under a naive containerization environment, these bugs might allow an app to escape its container. However, Sandstorm's hardened sandbox protected against these vulnerabilities.

A few notes, to be sure we are on the same page.

On Sandstorm, every Etherpad instance hosts only a single document. Only users with whom that document has been shared (with at least read access) are able to interact with the Etherpad instance in any way. Therefore, it is nearly impossible for Etherpad to have a significant security issue on Sandstorm: in order to exploit the issue against a particular document, you would already have to have access to that document, probably making the attack moot.

CVE-2015-3297, 4085: Path injection bugs could allow remotely dumping arbitrary files from the server's filesystem, including the Etherpad database, leaking pad contents and user credentials (session tokens). On Sandstorm, Etherpad can only see its own package contents and database, not files belonging to other apps or the system, so it can only leak its own data. The main damage from that—leaking pad contents—doesn't matter on Sandstorm because to launch the attack the attacker would need read access already (as described above). Meanwhile, leaking session tokens could normally (outside Sandstorm) allow impersonation of other users, but on Sandstorm Etherpad relies on Sandstorm for authentication, and only uses session tokens to disambiguate anonymous users. Thus, on Sandstorm, this bug could be exploited to allow one user with edit access to impersonate some other anonymous user (forging edit history), but not to impersonate a logged-in user. CVE-2015-2298: Due to a malformed database query, a request to export a pad by ID would in fact return contents of all pads on the server which had the specified ID as a substring of their own. Thus, all pads on the server could be dumped by specifying a series of one-character IDs (or maybe in a single query with an empty ID). This bug is irrelevant on Sandstorm because the attacker would need already to have read access to launch the attack (as described above).

The WordPress app on Sandstorm is used to publish public web sites. However, the app does not respond to individual page views of that site. Instead, the app generates static content which it hands off to Sandstorm, and Sandstorm serves the site statically. The site administrator accesses WordPress's administrative interface through Sandstorm like any other app, but visitors to the public site visit a separate hostname where they don't see Sandstorm at all. The site owner may share access to the edit UI but would never share this access publicly.

As a result of this model, there is no way to exploit a bug in WordPress on Sandstorm if you only have access to the published site, because there is no way for you to cause any WordPress code to execute at all. The site owner must explicitly share access to the admin interface with you before you can interact with the app.

Additionally, because the WordPress admin interface is served through Sandstorm on a random, unguessable hostname, CSRF attacks are far more difficult to carry out against this interface. (They are not impossible, but they require a passive MITM of network traffic or other information leaks to carry out.)

This model has a downside: comments are currently not supported. However, with some engineering effort, comments could be re-enabled while maintaining strong security. To accomplish this, the public-facing web site would use client-side Javascript to communicate with an HTTP API exported by the Sandstorm app whenever a user posts a comment. In order to prevent vulnerabilities in the comment-handling code from threatening core site administration, comments could be managed by a separate app that runs in a separate grain (container) from the core site. With the right design, there is no need for information about comments to flow into the core site management, so vulnerabilities in the comment infrastructure would at worst allow an attacker to deface other users' comments, not the whole web site.

WordPress has reported many vulnerabilities. Below, we cover all WordPress CVEs scored with a severity of 6 or more in 2014 and 2015.

When using Roundcube for email on Sandstorm, each user's mailbox lives in a unique grain of the app. This is by contrast with standard Roundcube, where a central install serves multiple users.

When using ShareLaTeX on Sandstorm, each LaTeX document lives in a separate grain. The situation is much the same as Etherpad: it is difficult to imagine a ShareLaTeX vulnerability that would have more than trivial impact on Sandstorm.

When using Tiny Tiny RSS in Sandstorm, every user's feed lives in a unique grain.

The Linux kernel has had many bugs that could allow any local process to gain root privileges or otherwise bypass security rules. Sandstorm blocks most of these vulnerabilities by virtue of its server-side sandbox which disables much of the Linux kernel API thereby reducing the surface of attack only to core, well-reviewed functionality.|||

