I come from the land of PHP and Javascript, with very little Ruby experience. I have seen quite a few posts around the interwebs introducing Elixir from a Rubyist’s perspective but I haven’t really seen any from a perspective I can relate to. The syntax of Elixir is kind of foreign to most people outside of Ruby-land, so I hope to help push people a little bit over the initial hump with some examples using PHP and Javascript (ES2015) along with the Elixir examples.

My goal with this post is to help introduce the syntax as well as a shallow introduction to immutability and how we use recursion instead of loops.

So, we have to admit that the Elixir syntax is very Ruby-like although the concepts and semantics are largely inherited from Erlang. However, Elixir introduces a lot of great new things of it’s own, as well as cherry-picking some nice concepts from other functional languages.

Please read the elixir guide on basic types for more detailed info, this is a good place to start.

These common types you should already be used to:

And maybe some you aren’t used to:

Please read the elixir guides on keyword lists & maps, and structs for more detailed info.

In Elixir, functions (named functions) are always defined in modules. Modules are basically just however you decide that you want to group your functions. You should do this in a way that has meaning to you and makes sense in the context of your project. Defining a function is similar to any other language.

You define and use a function as follows: (I’m encapsulating the PHP and Javascript versions in a class and object, to better compare with the Elixir module syntax)

Anonymous functions are first class values and can be passed as arguments or returned from other functions.

Here is how you define and call an anonymous function:

Since these functions are only calling another function on the argument, there are better ways these could be written, but for the sake of this example I wanted to show the function yet keep the function body simple.

You may have noticed that there is no statement, because Elixir has implicit returns. This means that the result of the last statement is what is returned.

Passing above means the last statement executed is .

There is a lot to say about pattern matching, because it’s kind of a big deal in Elixir. However, I’m going to keep it shallow.

The last example could be re-written as:

You can define the same function multiple times, and Elixir will execute the first one whose argument pattern matches. So, in the example above, the first function will only ever match when is passed, and the second one will match any other argument.

This looks like typical assignment as done in other languages, but in Elixir it is actually matching the pattern of the left-hand side and right-hand side and doing the assignments based on that. Here is an example that might help clarify what this means. Pay attention to how the left-hand and right-hand side match, and how assignment is done based off of that:

Some more examples, note that assignment can only be done if the variable you want to assign is on the left:

Elixir doesn’t have loops, so iterating collections is done with recursion.

In a recursive function, we will call the same function recursively until a condition is met. Below, we will call the list recursively until the tail is empty, and return the empty list (see the first function definition), which will stop the recursion. This function is doing the same as our others, transforming a string to uppercase, except it is doing it for every item in a list.

Note the multiple definitions of the same function, again. The first one that matches will be called.

You will see another (probably) new-to-you concept here. We can define a function without the if we use . This is good for short, single line functions.

Luckily, we have functions that should cover at least all of your basic needs in modules like , and .

You should be familiar with a lot of the functions, especially the most common ones like , , and from your other languages. They are common in languages like PHP and Javascript.

The most notable thing about these functions is that none of them will mutate the original collection. (Actually, no functions in elixir will, ever.)

Using a built-in map function to apply an anonymous function to each item in a collection:

Comprehensions might have a similar feel to for loops (or for..in, or foreach) but they are not quite the same thing. Due to recursion and scope, for example, you can not iterate on a counter variable like you might be used to in non-functional languages.

A comprehension will return a list of the results of each execution. I won’t really go further into this subject, however, since this is just an intro post. They have their uses, but I find myself rarely using comprehensions.

Pipes might look odd at first, but they are actually very simple and very awesome.

All that you really need to know is that they take the result of one function and pass it as the first argument into the next function. If you are familiar with unix, then you should understand the idea of a pipe operator, it’s the same idea.

For example, you could refactor this:

The real beauty comes from the fact that you can chain pipes as much as you want. This gets rid of temporary variables and also improves readability significantly.

Here is another example refactor where I will add some chained pipes. Let’s take this:

and make it much better:

I think it’s clear to see how great this is.

Elixir clearly has some really great things going on, and we’re not even scratching the surface here, as I’ve mentioned nothing about processes or OTP.

I hope however, that this has helped you to at least not have a mini-wtf-heartattack when you look at some elixir code and gets you interested to learn more and try it out.

If you think I should include anything else, or have any critiques, please feel free to comment below.|||

