Welcome to the Kubernetes deep dive blog post series. We, that is, Stefan Schimanski (Engineering) and Michael Hausenblas (Advocacy), will dive into specific aspects of Kubernetes and how they’re utilized within OpenShift. If you’re interested in the inner workings of Kubernetes and how to debug it, this blog post series is for you. Also, if you want to extend Kubernetes or start contributing to the project, you might benefit from it. Familiarity with Go is an advantage but not a hard requirement to follow along.

In this installment, we start with a general introduction of the Kubernetes API Server, provide some terminology and explain the API request flow. Future posts will cover storage-related topics and extensibility points of the API Server.

On a conceptual level, Kubernetes is made up of a bunch of nodes with different roles. The control plane on the master node(s) consists of the API Server, the Controller Manager and Scheduler(s). The API Server is the central management entity and the only component that directly talks with the distributed storage component etcd. It provides the following core functionality:

The Kubernetes API is a HTTP API with JSON as its primary serialization schema, however it also supports Protocol Buffers, mainly for cluster-internal communication. For extensibility reasons Kubernetes supports multiple API versions at different API paths, such as   or . Different API versions imply different levels of stability and support:

Let’s now have a look at how the HTTP API space is constructed. At the top level we distinguish between the core group (everything below , for historic reasons under this path and not under ), the named groups (at path ) and system-wide entities such as .

A part of the HTTP API space (based on v1.5) is shown in the following:

Going forward we’ll be focusing on a concrete example: batch operations. In Kubernetes 1.5, two versions of batch operations exist: and , exposing different sets of entities that can be queried and manipulated.

Now we turn our attention to an exemplary interaction with the API (we are using Minishift and the proxy command here to get direct access to the API):

And further, using the new, alpha version:

In general the Kubernetes API supports create, update, delete, and retrieve operations at the given path via the standard HTTP verbs , , , and with JSON as the default payload.

Most API objects make a distinction between the specification of the desired state of the object and the status of the object at the current time. A specification is a complete description of the desired state and is persisted in stable storage.

After this brief overview of the API Server and the HTTP API space and its properties, we now define the terms used in this context more formally. Primitives like pods, services, endpoints, deployment, etc. make up the objects of the Kubernetes type universe. We use the following terms:

Kind is the type of an entity. Each object has a field which tells a client—such as or oc—that it represents, for example, a pod:

There are three categories of :

API Group is a collection of that are logically related. For example, all batch objects like or are in the API Group.

Version. Each API Group can exist in multiple versions. For example, a group first appears as and is then promoted to and finally graduates to . An object created in one version (e.g. ) can be retrieved in each of the supported versions (for example as ). The API server does lossless conversion to return objects in the requested version.

Resource is the representation of a system entity sent or retrieved as JSON via HTTP; can be exposed as an individual resource (such as ) or collections of resources (like ).

More precisely, the actual path for jobs is because jobs are not a cluster-wide resource, in contrast to, for example, node resources. For brevity, we omit the segment of the paths throughout the post.

Note that may not only exist in different versions, but also in different API Groups simultaneously. For example, started as an alpha in the extensions group and was eventually promoted to a GA version in its own group . Hence, to identify uniquely you need the API Group, the version and the kind name (GVK).

Now that we’ve reviewed the terminology used in the Kubernetes API we move on to how API requests are processed. The API lives in k8s.io/pkg/api and handles requests from within the cluster as well as to clients outside of the cluster.

So, what actually happens now when an HTTP request hits the Kubernetes API? On a high level, the following interactions take place:

The complete flow looks as follows:

Again, note that for brevity, we omit the segment of the HTTP paths in above figure.

Let’s now have a closer look at the filters that in config.go sets up:

And with this, we conclude this first installment of the API Server deep dive. Next time we’ll have a look closer look at how serialization of resources is happening as well as how objects are persisted in the distributed storage.|||

In this installment we start with a general introduction of the Kubernetes API Server, provide some terminology and explain the API request flow.