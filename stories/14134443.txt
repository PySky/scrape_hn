This guide will teach you how to install and configure LEMP stack with Nginx 1.10, MySQL 5.7, PHP 7.1 in Debian 8 “Jessie” on Digital Ocean droplet. All steps are covered, from creation of droplet to securing it with firewall and SSL encryption. You can use instructions from the guide not only for droplet on Digital Ocean, but for any VPS hosting with Debian 8 “Jessie” as well.

Account on Digital Ocean or any other VPS hosting. If you are using other VPS hosting, you need to install Debian 8 image and enable SSH access on your server, and then proceed to step 3.

Log into your account on Digital Ocean and create new droplet by clicking “Create droplet” button:

Select suitable droplet billing plan. You can start with the cheapest and upgrade later to more expensive when you will really need it, without need to reinstall software from scratch.

Select server location. The closer server is located to your target audience, the faster it will be loading for them. For example, if you are targeting Germans, choose Frankfurt datacenter here.

Don’t forget to enable monitoring in “Select additional options” section. It is new feature on Digital Ocean, but you definitely want to use it. Seeing stats about loading of your website can be useful to prevent downtimes. Even more, monitoring is free of charge, so there is no reason not to enable it.

I recommend enabling IPv6 support as well (see why at http://www.networkcomputing.com/networking/six-benefits-ipv6/1148014746, https://blog.apnic.net/2016/05/04/you-have-ipv6-turn-it-on/), but you can stay with IPv4, if you don’t care.

Optionally, you can setup SSH key for login onto your website right away. If you don’t provide SSH key at this point, you will be able to login with password that Digital Ocean will send you in email message after droplet creation. Later on you can add SSH keys or change provided password to something stronger.

During first time, you can use web interface to connect to your droplet. It can be found in your droplet control panel:

Clicking on that button will provide you simple SSH console directly in browser:

However, I recommend using openssh or PuTTY to connect to your droplet from your local machine. Using local ssh client will prevent from some console graphics glitches (I had some during installation of certbot) and provide capability to insert commands from clipboard. Personally I use openssh client that comes bundled inside Git for Windows. Command line interface of this ssh client is absolutely the same as openssh in Linux, so if you know how to use it in Linux, then learning curve is zero:



Usually, people use abbreviation LEMP to describe server setup that uses Linux, Nginx, MySQL and PHP. We need to install this software, and also vsftpd for FTP access to our server.



You may ask, why not to use only SSH to transfer files to server, and use FTP as well? Because FTP times faster, see https://delightlylinux.wordpress.com/2013/06/26/which-is-faster-ssh-or-ftp/. Also you will be able to update WordPress website that is hosted on your server by using FTP, provide restricted access to server files to 3rd party, etc.

We need to add several additional repositories to list of known sources for `apt`. For example, PHP 7 in Debian 8 is hosted by third party (Ondřej Surý), and Nginx 1.10 is in Debian’s `testing` repository.

You will still remain on stable Debian 8 branch for other packages after installation, if you follow instructions.

Execute next script in shell to add PHP 7.1 repositories to apt:

Execute next script in shell to add testing Debian 8 repositories to apt:

Look for latest link to .deb installer with APT repository on MySQL official website, and substitute it for wget in following script, if it has been changed.

During .deb installation you will be asked about preferred version of MySQL. Select 5.7 (5.6 is default), because it provides significant performance boost (3x faster, accordingly to change list).

Execute next script in shell to update apt packages cache, so you can use with newly added packages:

Execute next commands to install Nginx 1.10, MySQL 5.7 and PHP 7 in Debian 8:

Remember, you need not PHP 7.1 (which comes with apache2 module), but PHP7.1-FPM binding for PHP 7 to work with Nginx.

It is important to install vsftpd not from stable, but from testing branch of Debian 8, because stable version of vsftpd contains major bug. Due to this bug, WordPress can’t update by FTP. You can find more details about this bug in ticket on WordPress issue tracker.

At this point we installed all required software for our server, but it is far from working condition. We have to configure it, so PHP7.1-FPM and Nginx could work together, vsftpd could provide access to website files via FTP and MySQL would allow remote access to database for easy database management.

Let’s start with Nginx server configuration. Since we want to have secure webserver, we will use SSL encryption for our website, and HTTP version of site will redirect to HTTPS always, because benchmarks show that SSL encryption doesn’t add much overhead to loading times.

I suggest you to start with removing default Nginx configuration from enabled sites configurations by executing next command in console:

Then, create website configurations in  and add them as symbolic links to directory by executing next commands:

where is domain name of your website.

Here I provide real world configurations for Nginx. You can freely adapt them for your website.

Sample configuration for Symfony website (alternative to official configuration):

And the last, but not least, step is to give proper permissions to Nginx log directories and files. Nginx uses www-data user for access to filesystem, so you need to execute next commands:

Execute to verify that directory has correct permissions. You need to have something like next:

Don’t forget to restart Nginx by running . After that you can check if it is running correctly by executing .

Before changing any configuration, install all PHP extension that you may need. For example, I installed all necessary extensions for me by executing next commands:

After that you need to make at least minor changes to your .

You can check http://php.net/date.timezone to find your timezone name.

Don’t forget to restart PHP7.1-FPM by running . After that you can check if it is running correctly by executing .

The only configuration file for the FTP server is .

Use next sample configuration for vsftpd to enable passive transferring mode and SSL for FTP:

Notice that you also set custom umask in configuration, so uploaded files have proper permissions.

After that, generate SSL certificate for FTP server. To do this, create directory for SSL certificates, if it doesn’t exist yet:

Afterwards, we can generate the SSL certificate by executing next command:

vstfpd uses Linux authentication mechanism to provide access to FTP server, so in order to connect to your FTP, create new user:

All new uploaded files will belong to that user. However, we will need to access folders that were created by this user from www-data user, which is used by PHP7.1-FPM and Nginx. To provide permissions for www-data user, you need to add it to ftpguy group:

vsftpd displays home directory of ftpguy user in FTP client, so you can’t reach root of filesystem. However, sometimes you need to access some upper level directory, e.g. directory. To do this, you can mount external directory inside home directory of FTP user, by using next commands:

Don’t forget to restart vsftpd by running . After that you can check if it is running correctly by executing .

In my setup I connect to MySQL server remotely from my local machine by using HeidiSQL. It is really the best SQL client I tried, and I tried about dozen of them so far.

Before configuring MySQL, let’s remove its default trash and prepare for production by executing next command:

Then, we need to configure MySQL in such way that it will accept remote connections. To do this, open in your favorite text editor (vim, emacs, nano, etc.) and comment next line with # symbol:

Use default MySQL client to create user for remote connection:

SQL code to create new user and give them required permissions is next:

In the best case, you shouldn’t create a user that has all rights to all databases and tables and can be used from remote machine! This can lead to serious security flaws, because if somebody gets your user password, he will control what is going on in all your databases. So, create admin user for each specific database and limit responsibilities to new users to prevent security problems.

Execute next command to create initial performance schema table in MySQL 5.7, so you will not encounter “Table ‘performance_schema.session_variables’ doesn‘t exist“ problem with HeidiSQL or other MySQL clients:

We will not open port 3306 in firewall for access to MySQL. This is because by default MySQL doesn’t encrypt connection to server, so your passwords and sensitive information is vulnerable to man-in-the-middle attack. To prevent this, you have 4 ways:

For my setup I needed remote access to MySQL, so going first way wasn’t an option. Configuring SSL encryption for MySQL or VPN network is a bit complicated, but sometimes useful. SSH tunneling for MySQL connections is a king, since it is easy to configure on server side (just by commenting out , what we already done) and works pretty fast on client.

To use SSH tunnel in HeidiSQL you will need to select “MySQL (SSH tunnel)” in “Network type” combobox, and then specify SSH parameters in “SSH tunnel” tab:

Don’t forget to restart MySQL by running . After that you can check if it is running correctly by executing .

If you looked carefully to Nginx configuration, you could notice that it uses SSL certificates to secure HTTPS access. These certificates can be obtained by one of three ways:

If you are running serious business, stick with SSL certificates from professional security provider, because SSL certificates from Let’s Encrypt don’t include ownership information. However, if you are running blog, pet project or early stage startup, Let’s Encrypt certificates will be breath of fresh air for you, because they easy to install, use, and free of charge.

You can install Let’s Encrypt certificate by using certbot application. It is available in testing branch of Debian 8 “Jessie”:

You can generate certificates for your website by simply running:

After that you will receive congratulations message that your certificates were generated successfully: You will find new certificates inside , where binaryspaceship.com is name of your website, of course.

The only minor problem for me with certbot is that it is implemented as Python script, so I need to have Python interpreter on my server. I saw several implementation of certbot alternatives in PHP and Bash script language, but they are not as reliable and well-supported as certbot at the moment, unfortunately.

There are several firewalls available for Linux, but I prefer ufw, because it is fast to install and easy to use:

After installation of ufw, enable it for IPv6 by modifying configuration. You need to set next option where:

Enable access for SSH, FTP, HTTP, HTTPS, FTP passive ports. It is very easy in ufw and can be done by executing next commands:

Execute to see that rules are properly set:

You may want to use CDN to deliver your website content to users faster. If you need free and simple CDN, I recommend using Cloudflare.

I will not cover installation of website on Cloudflare in this article, but you may find necessary information on Cloudflare website in Cloudflare 101 section.

However, since we use redirection from HTTP to HTTPS version of website in Nginx, there is simple configuration point that you have to know to prevent Cloudflare looping problem. Looping problem causes web browser to receive code 301 Moved Permanently constantly when your website uses Cloudflare.

You need to select Full SSL mode in “Crypto” tab in your website profile to prevent SSL access loop, because in Flexible mode Cloudflare will try to access HTTP version of your website and don’t understand how to behave correctly if you redirect it to HTTPS version of site in Nginx.

Hopefully by this point you have working server with LEMP (Nginx 1.10, MySQL 5.7, PHP 7.1) in Debian 8. Also your server is secured with firewall and SSL encryption. You have remote access to your MySQL database and ready to meet every challenge that may occur during development using PHP 7. Your website is available with high speed in any point around the world due to Cloudflare CDN. My congratulations!

Update: You can continue to harden your security by enabling fail2ban and following more advanced Linux security tips. For example, see https://www.rootusers.com/23-hardening-tips-to-secure-your-linux-server/, https://linux-audit.com/linux-server-hardening-most-important-steps-to-secure-systems/.|||

The guide will teach you how to install modern LEMP software like Nginx 1.10, MySQL 5.7, PHP 7.1 in Debian 8 "Jessie" on Digital Ocean droplet or other VPS.