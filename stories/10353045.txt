Some time ago, our CTO, Jon Jensen, sent me a link to a very interesting blog article about AngularJS. I have used the AngularJS framework in one of our internal projects and have been (vocally) very pleased with it ever since. It solves many problems of other frameworks and it makes you quite productive as a developer, if you know what you’re doing. It’s equally true that even the best marketed technology is no silver bullet in real life. Once you’ve been through a couple of luckless technology-crushes, you tend to stay calm — understanding that in the end there’s always some tradeoff. We’re trying to do our best at finding a balance between chasing after the newest and coolest, and honoring what’s already stable and above all safe. Because the author of the blog article decided to point at some elephants in the room — it immediately caught our attention. I must admit that the article resonates with me somewhat. I believe, though, that it also doesn’t in some places. While I don’t have as much experience with Angular as this article’s author, I clearly see him sometimes oversimplifying, overgeneralizing, and being vague. I’d like to address many of the author's points in detail, so I will quote sections of the article. The author says:

The first example that meets those requirements is our internal project. Saying that Angular isn’t a good fit for author’s definition of “professional web apps” is IMHO a huge overgeneralization. Jon Jensen shared with me the following thoughts on this:

Those questions make sense to me. The long run may not be so long for modern JavaScript apps. Later the blog writer asks:

Then the author says:

That intrigues me and I’ll look for similar opinions by others that explain in details why the writer thinks that dependency injection will leave me stuck without needed functionality someday. Then:

I don’t really think that’s a problem because a directive only has the amount of responsibility you make it have. One can use or abuse any technology so this point doesn’t really resonate with me. Then:

That’s only a half-truth. You can use e.g. RequireJS and have “real modules” with Angular — there’s even a good blog article describing how to do it: http://www.sitepoint.com/using-requirejs-angularjs-applications/. If you were to use just Angular-flavored modules one issue you might run into though could be name clashes. But then unless you want to use a dozen of 3rd party modules you find on GitHub — name clashes aren’t a real problem out there in the wild. And also if you do want to use those modules, you cannot expect to have a “maintainable” codebase over time anyway can you?

I somewhat agree. Managing scopes is sometimes a pain.

That for me falls under the “use or misuse potential” category. I can’t see it causing any problem unless you create a huge nest of dependent variables and want then to debug if it goes wrong (there are cleaner ways to achieve the same results).

Transparent scope and "referential hell" mean that you CANNOT KNOW what part of the system will be updated when you introduce a change using $scope.$apply(). You have no guarantees. This is a design tradeoff. Do you know that each time you call $scope.$apply() you actually call $rootScope.$apply()? And this call updates all scopes and run all your watches? Moreover, $rootScope.$apply() is called each time when: $timeout handler is invoked (almost all debounce services are broken by design) $http receives a response (yeah, if you have a polling implemented on $http ...) any DOM handler is called (have you throttled your ng-mouseovers? They actually invoke ALL your $watches, and built-in digest phasing does not really help) If you know, that some change is localised (like, if you click the button, only the same $scope will be affected), then you MUST use $scope.$digest. But again, you will face nasty "$digest is already in progress" issue...

This is a huge annoyance. He’s right about it. Then:

I’d say quite the contrary is true. When we switched to Angular with the our internal app, no-one on the team had any experience with it. The team was ranging in experience — from “not much outside of jQuery” to some much more experienced with many JavaScript frameworks. Yet the team started producing much more almost right away. I also heard them saying that Angular is much easier than our previous setup — which was Backbone + KnockoutJS.|||

