The header for the Haskell code in this file is:

And, the ghc extensions used are:

A binary relation $\sqsubseteq$ on a set $X$ is a preorder iff the relation $\sqsubseteq$ is both reflexive and transitive.

A binary relation $R$ is reflexive if $x \mathrel{R} x$ for any $x$.

A binary relation $R$ is transitive if $a \mathrel{R} b$ and $b \mathrel{R} c$ implies $a \mathrel{R} c$.

An equivalence relation $\equiv$ is a preorder that is also symmetric.

The equivalence class of the element $x$ is $[x]_\equiv$:

The set of all equivalence classes on $X$ under the relation $\equiv$ is the set $X/\equiv$.

A partial order is a preorder that is antisymmetric.

A partially ordered set or poset is a set $X$ equipped with a partial order $\sqsubseteq$, often described as the pair $(X,\sqsubseteq)$.

A binary relation $R$ is antisymmetric if $a \mathrel{R} b$ and $b \mathrel{R} a$ implies $a = b$.

In Haskell, we can define a partial order through type classes:

A total order $\leq$ is a binary relation that is total, transitive and antisymmetric.

A binary relation $R$ is total if for any two values $a$ and $b$, $a \mathrel{R} b$ or $b \mathrel{R} a$.

Totality implies reflexivity, which means that every total order is also a partial order.

A meet semilattice is a poset for which any two elements $a$ and $b$ have a greatest lower bound, denoted $a \sqcap b$.

The greatest lower bound of $a$ and $b$ is the largest element that is still less than both of them.

In a lattice, the greatest lower bound must be unique.

The greatest lower bound of $a$ and $b$ is also called the meet or infimum of $a$ and $b$.

The greatest lower bound has the following properties:

A join semilattice is a poset for which any two elements $a$ and $b$ have a least upper bound, denoted $a \sqcup b$.

The least upper bound of $a$ and $b$ is the smallest element that is still greater than both.

In a lattice, the least upper bound must be unique.

The least upper bound of $a$ and $b$ is also called the join or supremum of $a$ and $b$.

The least upper bound has the following properties:

If a poset is both a meet semilattice and a join semilattice, then the poset is also a lattice.

In Haskell, a lattice is a partial order with meet and join defined:

A lattice $(L,\sqsubseteq)$ is bounded if there exists a maximum element (top or $\top$) and a minimum element (bottom or $\bot$) in the set $L$.

For any element $x$ in the lattice, it must be the case that:

In Haskell, the type class for a bounded lattice defines a top and a bottom:

A lattice $(L,\sqsubseteq)$ is a complete lattice if every (possibly infinite) subset $S$ of $L$ has both a least upper bound ($\mathit{sup}(S)$) and a greatest lower bound ($\mathit{inf}(S)$).

Given posets $(X,\sqsubseteq_X)$ and $(Y,\sqsubseteq_Y)$, a function $f : X \to Y$ is monotonic or order-preserving if $x \mathrel{\sqsubseteq_X} x'$ implies $f(x) \mathrel{\sqsubseteq_Y} f(x')$.

To define continuous function, we first need to define member-wise function application across sets.

Given a function $f : X \to Y$, if $S \subseteq X$, then $f.S = \{ f(x) \mathrel{|} x \in S \}$.

Given lattices $(X,\sqsubseteq_X)$ and $(Y,\sqsubseteq_Y)$, a function $f : X \to Y$ is Scott-continuous if $S \subseteq X$ implies $f(\mathit{sup}(S)) = \mathit{sup}(f.S)$.

Given a function $f : X \to X$, $x$ is a fixed point of $f$ if $x = f(x)$.

With respect to a monotonic function $f : X \to X$ on a complete lattice $(X,\sqsubseteq)$, we can divide the set $X$ into regions:

It is useful to distinguish the least and greatest fixed points:

The following properties hold for these regions:

Given a monotonic function $f : L \to L$ on a lattice $(L,\sqsubseteq)$, the Kleene chain starting at the point $x \in L$ is the set $K(x)$:

If $x \in \mathit{Asc}(f)$, then there will be an ascending order to the chain $K(x)$, since $f^i(x') \sqsubseteq f^{i+1}(x')$ for any $x' \in \mathit{Asc}(f)$.

In Haskell, an infinite list represents the Kleene chain starting at bottom:

If $(L,\sqsubseteq)$ is a complete lattice 

 and the function $f : L \to L$ is continuous, 

 then $\mathit{lfp}(f) = \mathit{sup}(K(\bot))$.

Moreover, for a lattice of finite height, there exists a natural $n$ such that: \[ \mathit{lfp}(f) = f^n(\bot)\text. \]

This fact leads to a simple algorithm for computing fixed points.

The function looks for the first element in a sequence to repeat its neighbor:

So, the least fixed point function looks for a stable point in the Kleene sequence:

There are several natural liftings for posets and lattices across the foundational discrete data structures: flat sets, power sets, Cartesian products, sums, sequences and functions.

Given a set $S$, the pointed poset $S_\bot$ contains a bottom:

And, the pointed poset $S^\top$ contains a top:

If $(S,\sqsubseteq)$ is a poset, then the order is extended under pointing, so that for the lattice $(S^\top_\bot,\sqsubseteq')$:

Given a set $S$, we can lift $S$ into a flat lattice $(L,\sqsubseteq)$:

Given a collection of posets $(X_1,\sqsubseteq_1),\ldots,(X_n,\sqsubseteq_n)$ we can naturally lift the partial order into the poset $(X_1 + \cdots + X_n, \sqsubseteq)$:

If the posets are lattices, then the resulting poset is not a lattice by default.

To make it into a lattice, it must pointed.

Given lattices $(L_1,\sqsubseteq_1)$ and $(L_2,\sqsubseteq_2)$, the natural component-wise Cartesian product lattice is $(L_1 \times L_2, \sqsubseteq)$:

Given a poset $(L,\sqsubseteq)$ the natural sequence poset is $(L^*,\sqsubseteq^*)$:

\[ \langle x_1, \ldots, x_n \rangle \mathrel{\sqsubseteq^*} \langle x_1', \ldots, x_n' \rangle \text { iff } x_i \sqsubseteq x_i' \text{ for all } i \text{ such that } 0 \leq i \leq n \text. \]

As with sums, sequences must be pointed to become lattices. That is, there is no sequence which is greater (or lesser) than all other sequences because sequences of different lengths are always incomparable.

Given a set $S$, the subsets of $S$ form a lattice under inclusion: $(\mathcal{P}(S),\subseteq)$.

Given a partial order $(X,\sqsubseteq)$, we can define the preordered set $(\mathcal{P}(X), \sqsubseteq')$:

\[ S \mathrel{\sqsubseteq'} S' \text{ iff for each } x \in S, \text{ there exists } x' \in S' \text{ such that } x \sqsubseteq x' \text. \]

Why is this not a partial order itself?

Consider sets over the natural numbers with the natural total order. Under this regime, $\{1,2,3\} \mathrel{\sqsubseteq'} \{3\}$ and $\{3\} \mathrel{\sqsubseteq'} \{1,2,3\}$, yet $\{1,2,3\} 

eq \{3\}$, which violates antisymmetry.

Of course, it is possible to lift a preorder into a partial order over equivalences classes.

Alternatively, sets can be canonicalized, so that only that each equivalence class is represented by a single distinguished member.

If a preorder is not also a partial order, it is possible to lift a partial order to equivalence classes of the preorder.

Given a preordered set $(X,\leq)$, the natural partial order over equivalence classes is the poset $(X/{\equiv},\sqsubseteq)$, where $a \equiv b$ iff $a \leq b$ and $b \leq a$:

Given a lattice $(Y,\sqsubseteq)$ and a set $X$, the natural point-wise lattice is the lattice $(X \to Y, \sqsubseteq')$:

\[ f \mathrel{\sqsubseteq'} g \text{ iff } f(x) \sqsubseteq g(x) \text{ for every } x \in \mathit{dom}(f) \text, \]

This post scratches the surface of order theory, and it leaves out even some applications in computer science.

The two biggest omissions are reserved for future posts: the ordinals and the Scott domain theory.

The ordinals extend the natural numbers into a transfinite arithmetic and provide a powerful structure for well-ordering.

That well-ordered structure is a powerful mechanism for reasoning about program termination.

Scott domain theory gives a meaningful interpretation to the infinitely recursive domain equations that arise in denotational semantics.

If you'd like to learn Haskell, I recommend Learn You a Haskell for Great Good!: A Beginner's Guide :

And, for using Haskell, I recommend Real World Haskell :|||

