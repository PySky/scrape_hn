MelodyScript is a melody-oriented DSL for describing melodies, which can be optionally annotated with chords.

Melody Scripter parses a MelodyScript file into a Python Song object model, which can be used to generate a Midi file.

Here is "Yankee Doodle" in MelodyScript:

In MelodyScript, a "melody" consists of a sequence of notes on the standard Western musical scale, together with bar lines (which must match the specified time signature) and chords, with optional bass notes where different from the chord root note.

The Song object model can generate a Midi file for the melody, for example: yankee_doodle.song.mid. You can listen to an audio version of that midi file (rendered using fluidsynth) at http://whatismusic.info/melody_scripter/.

Currently Midi output is the only functionality provided by the Song object model, but the object model would also provide a convenient representation of melody information for the purposes of scientific analysis.

MelodyScript is line-oriented. There are two types of lines:

A command line starts with a command (after the initial character).

The command is followed by a character, and then one or more comma-separated arguments.

Currently there are five commands, which are , three 'track' commands: , and , and .

The and commands take arguments which are property settings, consisting in each case of a key and a value, specified as key = value.

Currently all property settings can be executed only prior to any song items, but in future they may be allowed during the song (or additional commands may be defined which are valid within the song).

Available property settings for the command are:

The and values both determine corresponding values when a Midi file is generated. "Ticks" are the unit of time in the song, and every note or rest length must be a whole number of ticks – if not, an error occurs.

The is the standard time signature used to describe a bar, when a numerator that specifies the number of beats per bar, and a denominator that specifies the length of one beat as a function of a whole note. (To keep things simple, the value must be defined so that one crotchet contains a whole number of ticks.)

If the contents of a bar do not have the correct total length, it's an error. (It's OK to have partial bars at the start and end of the song.)

The value is only relevant to the command, and it determines how many "subticks" there are in each tick. ("Groove" is defined in terms of sub-tick displacements.)

The value raises or lowers all the note values when generating the Midi file. (An error will occur if transposition causes a note to go out of the valid range of 0 to 127.)

The three tracks, melody, chord and bass, correspond to three Midi tracks generated in the Midi output file. Each track has its own settings:

The and settings define the Midi settings for each track. Midi instrument numbers range from 0 to 127, and the actual sounds depend on the SoundFont used to play the Midi song, although there is a standard GM set of Midi instruments definitions (where the default of 0 corresponds to Acoustic Grand Piano).

Currently MelodyScript does not have any provision for per-note volume (velocity) specification. In practice there is no easy way to determine appropriate volume values, for example when typing in from sheet music. For playback it is recommended to choose suitable instrument sounds that work well with constant volume (for example see choices made in the sample song files in this project).

The setting determines which Midi octave the first melody note belongs to, and for the chord and bass tracks, it determines the octave of all root notes and bass notes respectively. (Melody note octave values are determined relatively, as will be described in the Song Items section next.)

Although octave values are allowed from -1 to 10, not all Midi notes in the 10th octave are allowed, and an error will occur if a note occurs with a value greater than 127.

A command is specified by one or more numerical "sub-tick" displacements.

The number of values given in a command must divide evenly into the number of ticks in the bar.

For example, a command might specify where there are 4 beats per bar and 2 ticks per beat. The 4 groove values are applied to the 8 tick values per bar by repeating them twice, ie 0 2 1 2 0 2 1 2. Each value determines how many sub-ticks are added to the time of each corresponding tick in each bar.

The value in the command specifies the length of a sub-tick. So if there are 10 subticks per tick, then a groove value of 2 corresponds to a displacement of 2/10 of tick.

There are six types of song item that can be parsed:

All song items are represented by tokens that don't contain any whitespace, and song items in a line must be separated from each other by whitespace.

The components of a note are, in order:

Except for the very first note, MelodyScript does not provide for each note to specify its octave. Instead, pitch values are specified relative to the previous note. If no "up" or "down" markers are specified, the rule is to always choose the closest possibility. If this choice is ambiguous, eg when going from to or vice versa, then an error occurs.

If one up or one down is specified, then the next note should be the first note matching the given note letter, above or below the previous note, respectively. If more than one up or down marker is given, then go an extra octave up or down for each extra marker.

So, for example, followed by means go up to the next E, and followed by also means go up to the next E. Whereas means go up 9 notes to the E above that, means go down to the first E below, and means go to the E below that one.

A continuation is where one note is represented by the joining of two or more note items in the melody script. Because bar lines have to occur in the right place, notes that cross bar lines have to be represented using continuations. There may also be some note lengths that cannot be represented using the Duration format specified above, so they have to be constructed from multiple notes joined together.

In other situations, the use of continuations is optional.

There are two ways to specify that one note is to be continued by a second note:

It is possible for more than two notes to form a continuation – the required joinings need to be indicated in each case. This would be necessary, for example, to specify a note that filled more than two bars.

A Rest consists of the letter followed by a duration specification. The duration specification for rests is very similar to that for notes, but there is no default duration, and at least one part of the duration specification must be given. If only qualifiers are given, then they are applied to a value of 1. So, for example, is a valid rest, representing half a crotchet, ie a quaver.

Chords are specified by enclosing their contents in and . Currently there are two formats:

In each case, chords may contain an optional bass note specifier, to specify a bass note different from the root note. This is given as a character, followed by an upper-case letter and optional sharp or flat. So, for example, represents A sharp minor with an F sharp bass.

Bar Lines are represented by . Bar lines are used to check that the total lengths of notes and rests in each bar have the correct values. They also reset the default note duration to 1 crotchet. Bar lines do not have any direct effect on Midi output.

A Cut is represented by . Cut means "cut out all previous song items". A Cut is useful when editing, when you want to play part of the song without starting all the way from the beginning. (There would not normally be any reason to include a Cut in a completed song.)

The method of takes one argument which is the name of a MelodyScript file, and compiles it into a Midi file, using the name of the input file with appended. This Python module is also made available as a console script song2midi when MelodyScripter is installed into a Python environment.

The method of generates the same Midi file as and, after generating the Midi file, plays it using the command, if that command is available. cvlc is the command line version of VLC, as installed on an Linux system, and it only plays Midi files if the vlc-plugin-fluidsynth VLC plugin is installed. This module is also available as the play_song console script.

An alternative playback option on Linux is timidity, however even with the option, on my system, the sound quality is poor at the beginning of the song.

To install the latest stable version of Melody Scripter into a Python environment, execute:|||

melody_scripter - Parser and compiler for MelodyScript, a DSL for writing melodies with chords.