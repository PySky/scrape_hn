At one point in time in your journey as developer you won't have the pleasure of delegating deployment to your DevOps team. If you have your own app or blog you might find yourself googling how to effectively deploy an app to VPS or a server in general.

I was in that pickle not so long ago when I decided to run my own blog and host some pet projects. I wanted to deploy my app to server without worrying much about the process and typing too many shell commands. I ended up with two possibilities:

Both have pros and cons. Since the local approach is rather simple and well documented on google, I will only cover the remote approach which I believe is in the end, the best way to deploy the app.

One of top results for this approach is the one from Digital Ocean How To Set Up Automatic Deployment with Git with a VPS. I will admit that is rather convenient to use git to redeploy apps since is ubiquitous. But the tutorial referenced was lengthy and personally I did not like it since it had too many steps thus making a lot of room for error to happen.

But this led me into a another world which was the idea of hooks. I then discovered open source tool called Webhook. It is well documented and has well defined API, and most importantly it is utilizing Unix philosophy: it is doing just one thing. Webhook is basically a server-app that will trigger some action upon receiving a HTTP request. Thats it.

I logged onto my server and downloaded the webhook binary:

This will make the binary accessible in shell. Of course, if you are using a different system architecture, make sure you download the right binary. There is also a long way of setting up webhook and that is building it from source. But if you are no-golang guy like me, binary will do just fine.

We will make a folder in home directory called hooks and enter it:

In this folder we will create a webhook configuration file called . The file will contain definition for hooks.

Most of this JSON formatted code is self-explanatory. is a property that tells webhook the directory that will be used when its executing the script.

The redeploy script could look as simple as this:

For purposes of this tutorial I will assume that you have a git configured project on server and that your nginx is properly pointing to dist folder. The folder structure of could look something like this:

And last, but not least, we have to run webhook!

This will start a HTTP server on (which is configurable). When you hit it will run the redeploy script!

And thats it. In contrast to git approach for redeploying (which is also using hooks), this is much cleaner.

Now, if all this was too much of a hassle there is a short version. There is a webhook based tool called Hookdoo. It is basically doing the same thing as webhook but with even less configuration. The idea is that you do not need to install any software on your server. The server is added to hookdoo, and in return it can execute stuff on your server via SSH connection.

Currently it is in beta stage, and you will have to request an invite. Head over to hookdoo and get yourself invited. If you got in, and signed up, you will be presented with the following window:

I am currently on trial and I will be using Micro plan, which offers one server and one hook. This is perfect for testing out the app.

Go to tab and click button. On this screen we will add a ssh connection to our server.

The fields are pretty much self-explanatory. The Authentication method can be with password or with a private SSH key. This is up to you to decide how will this tool connect to your server and execute hooks. You can add a separate account on your server just for hookdoo to connect, or create a separate SSH key-pair, its all up to you.

When you finished adding your server to hookdoo, you should try and test the connection. If the connection is successful, go to tab and click .

Add a meaningful name to it, and then add the script code. In our case it was something along the line of

You will also have to assign the hook to the server you created, so it knows on which server to execute the script code. After that, finish by clicking submit and you created your first hook!

By clicking the , you will copy the path to the endpoint, which when executed will in turn execute the Script Code associated with that hook.

No matter which one of these method you choose, it will be much more simpler to setup than the git method suggested by the Digital Ocean article. I myself am a hassle-free guy so I am using hookdoo. Also, having this kind of atomization of tasks reduces room for error. I think having a separate tool just for deploying apps remotely will certainly save you a few headaches.

Now this tool is very versatile, and you can make it do all kinds of stuff. Deploying and redeploying apps remotely is just something most of us with pet projects will need.|||

