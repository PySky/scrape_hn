Another week another article, glad to be back to publish one article a week, this is the sixth episode and as promised we will talk about one of the most used features of Erlang, the implementation and list comprehensions.

Now is also a great opportunity to let me know what you’re thinking about the series on Twitter and check the latest episodes:

Episode I - Elixir, Pipe Operator and Pattern Matching

Episode II - Actor Model, Modules and functions

Episode III - Maps, Functions + Pattern Matching = ❤️

Episode IV - Elixir Types, Data Structures and Underscore

Episode V - Concurrency, Processes and Recursion

You can sign up to our mailing list bellow, by doing it, you will get notified about the next articles earlier then other folks, but I’ll also send you cool information about talks and projects that you can check, or things we can work together.

We have already talked about lists in the past articles, mainly on the Episode IV (Elixir Types, Data Structures and Underscore), by now you may have realized that list are one of the main types in Elixir (and also in Erlang), because of that, there is a bunch o optimizations and tools that were created to support it.

Having a good support for lists is a common trait of functional languages because its tools enable you to achieve recursion easier, even without specific loop functions, as we already discussed on the last Episode V (Concurrency, Processes and Recursion).

was already present on Erlang, it enables you to split a list by taking away its first element and putting the rest of the list into a new list. Let’s start by checking some examples of how works:

It may no seem but the head and tail implementation enables you to do awesome stuff, we checked some examples on the last episode, and will have event better ones on the next, but before jumping into practical examples let's check more about list and its capabilities.



List comprehension is an old concept that is also present on Erlang, it can be used to construct lists (normally based on other lists) in a very natural, easy way, like a mathematician is used to do. It’s another common trait of functional languages because it enables you to loop through lists, filtering and mapping its elements.

Elixir brings a syntactic sugar for comprehensions, the syntax ,  you can do most of common tasks using it, let’s check some examples of how it works:

You can also put together with pattern matching, by now you probably realized you can use pattern matching with almost anything on Elixir, by doing it we'll be able you to filter the elements from the list (or other Enumerable).

This can be really useful when working with tuples (we talked about it on Episode IV) and multiple comprehensions. Let’s check how it works when using a list of tuples and pattern matching:

Another great and really useful feature that comes with the implementation is the option, it enables you to have the end result from the comprehension into another type that is not a list, like a map (we talked about maps on Episode III), here is a quick examples of how it works:

I know it looks good enough already but gets even better, also enables you to pass as many generators and filters as you need, check it out:

Yay! Episode VI of Elixir with a Rubyist! I was hoping to get into the module into this episode but I thought it would be better to wait for the next one taking into account we had so much to check on lists.

This is a series of short bar-like conversations around Elixir, it’s aimed to help developers that are trying to understand and wrap their heads around it.

I hope you have liked it so far, if you do, please let me know on the comments bellow and over Twitter.

On the next episode we will finally get into the module and understand how exchange information between processes.|||

[Head | Tail] &amp;amp;  List ComprehensionAnother week another article, glad to be back to publish one article a week, this is the sixth episo...