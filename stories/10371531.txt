The BSD underpinnings of OS X have led to Apple using POSIX security as one of the "moats" surrounding the proverbial security castle. Briefly, this means that OS X uses a BSD/Unix-like file system layout and permission structure. Central to this is the concept of "root," an all-powerful account with effectively limitless access to the file system. The root account on a Unix-like system can have many names, but it always has the user ID (UID) of "0," and the account with UID 0 is granted special privileges by the operating system kernel. The operating system uses the root account, for example, as the context under which privileged processes or applications are launched.

OS X has always had a root account with a UID of 0, and it’s still there in El Cap:

Mac users who have gone exploring in the bowels of the operating system—or who have needed to do some command line trickery to solve weird problems—have probably run into situations where they needed to use root-level privileges in one way or another. It’s pretty rare that you actually have to log on interactively as root (and the root account itself is disabled by default on OS X), and usually it’s far more convenient to temporarily give your account root privileges as needed. By default, this kind of "privilege escalation" is available to any local accounts on your Mac that are classified as administrators. You most often run into such a request for escalation when your Mac pops up a dialog box asking for your password when you’re installing new software or trying to delete something out of the Applications directory. Command line fans can also execute commands with root privilege by prefacing them with the command, which stands for "super user do."

Root—or an account operating with root privilege—can do just about anything. That can be equal parts useful and dangerous. The root account's effectively unlimited ability to execute commands means that an attacker with root privilege can do just about anything to a computer. El Capitan’s "System Integrity Protection" feature is an attempt to limit the damage an attacker can do by limiting what root itself can do.

System Integrity Protection does this by severing the automatic kernel-level blessing given to root’s commands. The end result is that in El Cap, root is no longer an account with effectively unlimited access to either the file system or to memory and running processes. SIP places kernel-level checks on root’s privilege that can (in theory, at least, until proven otherwise by an intrepid security researcher) only be bypassed by the kernel itself. SIP’s intention is to keep the operating system’s state—both on disk and in memory at runtime—as it was installed by Apple.

This is a pretty big change from how Unix-like operating systems are "supposed" to work, though it’s not without precedent (Ars IT Editor Sean Gallagher told us that SIP sounds a bit like Trusted Solaris, and this Quora thread has some details on the history of similar "rootless" privilege escalation schemes). Rather than adding yet another superuser account, SIP provides the concept of an additional file system and process flag, and file system objects and in-memory processes so flagged cannot be altered by processes not signed with Apple’s own code signing key.

There’s more, too—the file system protections are only the start. SIP consists of four major features:

Each of these four points has a bunch of different caveats. But first, let’s get two obvious questions out of the way: yes, you can disable SIP if you want to—you have to boot into the OS X Recovery partition to do so, but it’s not difficult.

But should you disable SIP? For something like 95 percent of El Cap users, the answer is an emphatic no. There are almost no downsides to SIP for most users. Developers will probably want to toggle it off on their development computers if they’re building complex applications, but most folks should just leave it alone—even the "power users" among us who like to tweak and fiddle.

The file and directory protections are the part of SIP that users are most likely to actually encounter. To start with, SIP drops an impenetrable curtain around the following four locations:

Any attempts to write to those locations will be denied, even when using escalated privilege:

SIP prevents more than just writes, too. On a system with SIP active, you can't even mount other devices over SIP-protected paths, thus shutting off a potential way to do malicious (or at least creative!) things:

When upgrading from previous versions of OS X to El Cap, any and all non-Apple files found to be residing in those directories will be picked up and moved to —which will almost certainly render whatever application or piece of hardware that depended on those files nonfunctional.

SIP file relocation from protected areas during upgrade isn't a remote eventuality, either. Some developers are careless with where they place files, particularly when it comes to third-party drivers. It’s conceivable that if you’ve got a crufty OS X install with a lot of third-party hardware hanging off your Mac, this particular aspect of SIP is going to affect your upgrade to El Cap. More than one Ars author has been bitten by third-party drivers being relocated during the upgrade.

Instead of allowing developers to put files wherever they want, El Cap offers four canonical safe locations for applications, support files, and drivers:

The local or system library directories are the preferred stand-in for , and is the preferred stand-in for , , and . However, Apple strongly recommends that developers use for everything if possible, since that keeps all of an app’s files in a single location for ease of uninstallation.

At least for now, SIP only applies to the root/boot volumes of the current operating system installation—so, for example, adding a second OS X installation on your Mac and booting into it would give you the ability to make whatever file-level changes you want to the first OS X installation. This sounds like a significant security oversight, but the obvious response to that criticism is that if a potential attacker has enough access to your Mac to be able to install a second operating system on it, you’ve got problems a lot bigger than SIP can help you with.

Even though SIP only applies to the root and boot volumes, it is a persistent, system-wide feature. So if you have two El Cap installs on one Mac, for example, whichever one you boot into will have SIP active if SIP is enabled. To accomplish this cross-OS persistence, SIP’s settings are kept not on the storage volume itself but rather in NVRAM, so they remain in force between reboots and even between disk swaps.|||

Apple brings refinement and under-the-hood changes to Yosemite's new design.