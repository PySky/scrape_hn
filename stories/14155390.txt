String interpolation is one of my favorite language features. The resulting string is much easier to visualize than with manual concatenation. It’s also straightforward to implement. I thought it would be a nice addition to my Lisp.

Both symbols and lists are supported. It would be possible to support the other types of expressions as well, but they are already evaluated and printed literally.

To append strings, a new primitive function is required. turns all it’s arguments into strings, and concatenates them. differs slightly from show: it doesn’t surround strings with quotes.

Strings are parsed into their parts, where a part is either an interpolated expression or a string literal. The resulting list is wrapped in a call to . To keep complexity manageable, I decided against string escaping.

Because string interpolation expands into an ordinary function call, no new evaluation rules were required. Translating syntax into regular Lisp forms at the parsing stage really helps contain the scope of this complexity.|||

String interpolation is one of my favorite language features. The resulting string is much easier to visualize than with manual concatenation. It's also straightforward to implement. I thought it would be a nice addition to my Lisp....