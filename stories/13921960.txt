Product management is a discipline that continues to be hard to describe and define. There are particular approaches for doing product management "the right way," which was part of my motivation for writing App Savvy. At the same time, a portion of this role simply comes from experience. That may even be truer for being a product manager of apps, which as of this writing is a position still less than a decade old.

Successful product managers come from various educational backgrounds and career paths. Their skills can skew from being more creative to more technical. Although it is more common today to want to be a "product person," often people stumble into product-related positions rather than actively pursue them.

Through the years, we have heavily invested in the product team at Savvy Apps. Documentation and process is an important part of our culture. We believe the more process we have, the more creative we can be. Although perhaps counterintuitive, by not having to focus on the repetitive, standard parts of creating a new app or feature, we can focus on the aspects that make the app or feature special.

The goal for every app product manager at Savvy is to have a flawless release for each new app or new app feature. A flawless release does not mean that there will be no bugs, no feedback, or no issues. It simply means that the release went the way we wanted or expected it to go.

From my perspective, the industry as a whole should strive for the same. As I wrote before though, the resources for product managers who are doing product management for apps continue to lag behind other disciplines. In light of that and what drives us at Savvy, we're presenting these 39 ways for better app product management. I've divided them into several sections, to help you more easily grab what might be most relevant for you.

Have an understanding of how your app or app feature is going to differentiate itself. Blue Ocean Strategy (BOS) provides tools like a "strategy canvas" (seen right) to identify what it describes as an uncontested market space. We've mentioned the BOS framework in the past. I cover BOS extensively in App Savvy.

Using your BOS analysis, list out the must-have, nice-to-have, and someday features for your app. A v1.0 app should largely stay focused on the must-have features to keep you on track.

Depending on the features of the app, get the right team members involved. Beyond the features itself, that can be driven by their platform expertise and passion.

4. Do an initial briefing on what the app or feature is.

The start of a new app or feature should be a conversation with all team members. Agenda topics to cover include background materials, a review of must-have features, and scheduling.

5. Keep in mind your app philosophy.

Don't just be tactical. Consider the purpose of the app, who will use it, and what makes a great app. This is especially important during the initial app briefing, but should be common across all conversations.

Begin user research, ideation, and evaluating your core value propositions. An app discovery kickstart either further solidifies your BOS analysis or shows its deficiencies and gaps.

7. Wireframe and design the app or app feature.

The results of your discovery process allow you to further prioritize features. User experience and visual design team members then have a clear focus during wireframes and high-fidelity design.

Take the high-fidelity designs and put them in to an interactive app prototype tool like Marvel. Use that to help create your development estimates. All tasks should be ticketed and estimated to project the overall timeline.

Sanity check that your development estimates are in line with past comparable work. Use your lessons learned from past experiences to ensure projections are as accurate as possible.

Cutting your scope upfront is one of a number of ways of to build your app or feature faster. If scheduling is not approached properly, you'll most definitely miss your target deadline.

11. Ensure you have all the right tools.

Provision all your tools. It's helpful to have separate tools for project or product management tasks like Trello versus development tasks such as Pivotal Tracker.

Your tools should first be populated with the typical tasks involved. For example, the graphic to the left shows how we document some of our baseline tasks in Trello. These tasks can range from operational (e.g., provisioning a tool Zeplin) to marketing (e.g., outline your launch strategy).

Don't leave the hardest tasks to the end. Do some development spikes early on for the most challenging items. That approach will reduce unknowns and the risk of missing deadlines.

14. Set up at least a weekly status meeting.

Throughout the week you'll talk with your team through your toolset. It's important though to have at least one set time each week to get face time with each other. That ensures everyone is clear on priorities, upcoming work, and k

Agree to and then follow a standard branching model. Usually that will involve feature branches, regular commits, and merging back to a master branch.

16. Build momentum as quickly as possible.

There's nothing worse than a new app or feature that feels stalled out of the gate. Prioritize the backlog to focus on tasks that demonstrate progress and get wins early.

Continuous integration helps catch issues farther upstream. It can identify commits that break a build. A CI process can also cut various types of builds for distribution.

Usually you can start distributing builds after 2-4 weeks of work. Commit to at least weekly builds through the main course of development. More frequent builds will be useful later on.

19. Capture feedback and triage after each build.

Use a tool like Instabug to capture feedback after each build. Integrate that with your development tool and triage items into bugs, feature ideas, and comparable items.

20. Continue to ensure all items in backlog have estimates.

Never leave a development task in the backlog itself unless it has an estimate. Otherwise the projected completion date will not be accurate as new tasks are added.

21. Keep track of your development velocity.

Pay attention to how fast your team is moving through tasks (velocity), which tasks are the most difficult (estimates), and how much progress varies (volatility).

Team members can get overwhelmed by all the work that needs to be done. Provide clarity on immediate priorities, but continue to highlight the larger path to the finish line.

23. Look at the roadmap at least once a month.

An app roadmap is a living document. It needs regular updating. Continue to add new ideas to it. Review it at a minimum once a month individually, as the product manager, and collectively, as a team.

When an app is ready for larger testing or submission, you'll want to get it out immediately. The further in advance you prepare your beta or app store listing itself, the better.

Marketing needs to occur well before an app launch (we have a whole book on that). This approach ensures you'll achieve your initial marketing goals. It will also help with testing.

Start testing your app internally, with those building it. Then expand your testing group to include friends and family, colleagues, stakeholders, and eventually external testers.

Many issues can be discovered even with a basic QA plan. Your QA considerations will range based on what kind of app it is, if it's an update or new app, and should account for various user flows.

28. Bring others in to audit and cross-check work.

Have UX and visual design team members audit the app. This allows them to ensure their vision was implemented. When available, ask those with fresh eyes to cross-check the work as well.

Just when you think you covered everything, you probably didn't. Use a checklist during the final app store submission. You will likely find a handful of issues.

30. Don't be surprised when the app launches.

The goal of all of these processes is to minimize the risk of being surprised when the app launches. Ideally you know what the issues are or have instincts on what they might be.

Keep tuned to your support inbox, social media, app store reviews, and comparable channels at launch. Find common patterns and issues, and use that information to prioritize releases.

You can drastically reduce support request loads, one-star reviews, and criticisms on social media by getting a bug-fixing update out within 2-3 days of a major app store release.

Beyond email and social media, Apple and Google now provide ways to speak to your users. Interact with them, show them you're listening, and be prompt in your responses.

34. Update documentation for better self service.

Another way to reduce your app support burdens is to constantly update your knowledge base or other user-focused documentation. Products like HelpScout make it easy to edit or add new entries.

Whether it's app store reviews, server performance, crashes, or something else, you need proactive diagnostic tools to keep ahead of potential problems. Use solutions like Appbot, appFigures, New Relic, or Crashlytics respectively.

Hopefully you and your team defined your key app performance indicators ahead of going to the app stores. Now it's time to be use that data to inform your next updates. If you don't have those in place though, add app analytics immediately.

As discussed during the feature or app development, the roadmap should be updated at least monthly. Upvote ideas or other feedback each time, so you know the items being requested the most.

Team members who were never involved with a feature or the app as a whole can provide fresh eyes. Ask them to review or otherwise look at and test new features and updates. Industry peers may be willing to help as well.

The most successful teams ship 1-4 app updates per month. Not all of these are feature releases. A mix of feature and point updates on bugs, polish, and comparable items make a healthy balance for your app.

The industry has changed considerably for those of us who built apps back in 2008. There are more resources, especially from Apple and Google, more sophisticated tools, more standardized processes, and many more people building apps. Despite all of those advancements, much of our knowledge in the app product management space continues to be locked up in our heads or inside our organizations.

It is my hope that some of our own considerations for flawless app releases will encourage others to share their own tips. As we've done over the last number of years, we'll continue to share our insights here. We encourage you to let us know what you find helpful or where you may be stuck by tweeting us, commenting on LinkedIn / Facebook, or by contacting us directly.|||

Product management is a discipline that continues to be hard to describe and define. There are particular approaches for doing product management "the right way