The last two jobs that I have had I have experienced numerous interviews where I am phone screening and performing face to face interviews with candidates. These candidates are anything between a brand new graduate right on the job market to engineers with 20+ years of experience. I have read the articles and I have come to move away from the old way of thinking that says experience on the job relates to how good you are. It is just not true anymore with all of the libraries, frameworks, SDKs, devices, archi... . If you are still doing COBOL and only COBOL are you worth anything? Yes. Someone is looking for your skills.

If I ask a candidate "How do you store a list of integer values?" (don't judge, this is the first question I ask) most of them respond with a common answer - List (note: I interview for C# and Java positions). Not that this is a wrong answer, but is it the best answer? I have only had one, count it one, candidate out of 100+ give me a very thorough answer that hit all the points you want any candidate to know if you are lucky. If I had my choice between arrays and lists to store integer values, then you have to start asking questions. Can you sacrifice direct control of the array and hand it off to a list? Do you have a finite number of integer values that need to be stored? Is there any reason for optimization? In most cases the right answer is List, but from a computer science foundation the answer is array. The next question is "What if I only wanted the unique numbers from the list of integers?", survey says! The top answer - "Iterate through the list and check to see if it already exists." Whomp! Whomp! I have only been in this industry for 8 years now, and I have 10+ years experienced engineers that don't know the common definition for a set/hash table and how it works from a high level. I am not sure where the void is? Did you just look at blog sites on how to use syntactic sugar to create websites and then call yourself a web application developer on your resume? I am really lost on this. The weird part is that they know the answer for the map question more times than not. A map uses the concept of set as an internal data structure!

No need to explain. You just don't care enough. In the Army we call that an oxygen thief.

Ok, so not everyone can keep up with everything. So you do what you can.

Self explanatory. You went to the Ruby on Rails bootcamp to learn how to be a web developer and now you want $120k+ in salary for spending $5k-$7k on an 8 week course. I can see the debate here if you are applying yourself to learn the intricacies of what is going on under the hood. I might have gone the bootcamp route myself if I had the same passion I do now that I didn't back in college. I can self reflect and say that I had no idea what I was doing in most of my classes and somehow just made it work so that I graduated. The optimism is that I would have failed out of college more than likely had I pursued any other major.

Are curriculums lacking to teach data structures and algorithms properly? I can't imagine that is true. My university had a course specifically for each of those subjects. These are must knows, right?

Where I currently reside there is an inflation in what software engineers should earn in salary for their job position and performance. If you don't know the difference between an array, set and map, or you cannot answer basic questions around that concept, then you are a no to hiring. If you can somewhat answer them, but then you tell me you want $130k in salary, then you are an absolute hell no to hiring. Your experience of 20+ years doesn't mean crap to me if you cannot answer collegiate level questions. If you are the next startup co-founder about to make millions, and you can't answer these basic questions, then you are hacking it to the top.

If you have made it this far, then I can tell you that I am not the best software engineer out there. I failed miserably on a Palantir interview 4 years ago, which led me to be better about what I am doing and learn where my voids are. I failed on several technical interviews since then, and it help me refocus again about what my next steps are and it is also embarrassing so it reinvigorates my passion for this stuff. I say all this because I think people need to do technical interviews in order to find their weaknesses. If someone doesn't want to hire you, then find out why and figure out a pathway that fills that void that was discovered. Furthermore, I would gladly hire a high school candidate that can prove he knows what he is doing and pay him the salary that comes with that knowledge. Yes, there will always be years of experience taken into account because that's how business works. If a high school graduate can create an awesome web application and architect third party services to boot, then he is getting paid, but I don't expect him to be a tech/team lead. There is still a business understanding that most young candidates don't know the ins and outs about. This business understanding is where you move from being tech savvy to a business enabler. Can I rely on you to have the best interest of the company in mind when you say no to new features or delay the product timeline for unforeseen blockers.|||

