More than 3.1 million developers read our announcement post of Next.js . More than 110 contributors have submitted patches, examples or improved our documentation. Over 10,000 developers have starred us on GitHub . Today, we are proud to introduce Next 2.0 to the world. What follows is a quick summary of every new feature and improvement we have made. 

 Next.js is a very slim yet powerful framework. Place React components in a directory and running , and you'll get automatic code splitting, routing, hot code reloading and universal (server-side and client-side) rendering.

It's easy because it's one command for development ( ), and two others ( and ) for a production-ready app. It's simple because it composes really well. It plays well with the rest of the React and JavaScript (npm) ecosystems.

 It's also very small . Check out the README : the entire framework's documentation is a 5 minute read. NEW! Want to learn step-by-step, by example? Check out the Learn Next.js tutorial! 

 When we launched Next.js, there was no way to do dynamic routing or load your custom server code. We did this because we believe in shipping early and often. Now, you can run to boot up your own custom server and take full control of the routing and rendering pipeline. This enables powerful features like fancy URLs or custom caching schemes . 

 To start a project, you now need to bring in and two extra deps: and . This has tremendous benefits, at the tiny cost of two extra parameters in the initial `install` to set up your project: You can pin React to the version that you know works well on your project You can update React independently of us. e.g: no waiting for a Next.js release after React gets updated You can experiment with alternative implementations of the React API. We have examples for Inferno and Preact ! 

 Our mission is to make Next.js as familiar as possible to developers on the Web Platform. To that end, is now deprecated in favor of , a Babel transformation that gives us scoped (isolated) full CSS support. This is what a component with CSS that's local, conflict-free, server-rendered and injected once per instance looks like: The styles for only apply to the JSX tags defined statically within the scope You can read more about on its GitHub repository. 

 We implemented the attribute for the component. export default () => ( <div> <Link href="/next-page" prefetch >Go to the next page</Link> </div> ) And just like that, you get the performance of a "SPA", without the initial download and expensive bootup penalty of big bundles. Combined with server rendering, this typically means extraordinary performance with very little effort. 

 We think a better "Hello World" app than TodoMVC is actually… Hacker News! Our implementation, Next News , is fully server-rendered, queries the data over Firebase and updates in realtime as new votes come in. Check out the demo at next-news.now.sh . Navigating around Next News is snappy! To show off our ability to both partially or fully server render, while having the freedom to execute arbitrary codepaths on the client (upon ), notice that we show a "Loading…" message when loading an item on the client, but not when we server-render. This makes us a less strict clone , but it's for a good cause. We also went as far as replicating the style-less HN login page. Each top-level component (page) in Next.js defines the entirety of the document . There's no notion of global layouts or configuration, only composition via React's component system, which gives you great flexibility. 

 We're very thankful to our community for having submitted so many examples of backends (Express, HAPI, Koa…), styling systems (cxs, glamor, styled-components…), testing systems (jest), type systems (TypeScript and Flow), data fetching (Apollo) and many others.|||

Next.js 2.0 comes packed with performance improvements and extensibility features