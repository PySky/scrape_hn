Ifrit is a compiler from SQL to NoSQL for data aggregation. NoSQL databases are great at modelling structured, unstructured and polymorphic data and usually offer powerful map-reduce based API when it comes to data aggregation. However, it is truly challenging to leverage those API in a web service.

Ifrit is available as a Node.js module as well as a PureScript module. The JavaScript documentation is accessible on github pages. A documentation for PureScript is published on pursuit.

Different scenarios are available on the repository in the folder. Here's a summary of all examples:

Ifrit builds an Abstract Syntax Tree (AST) which represents only syntactycally correct requests. Then, it generates a request corresponding to a specific driver. So far, MongoDB is the only target driver available.

Ifrit acts on a single collection at a time and does not support joins. Therefore, a schema is required in order to verify the request (semantically and security wise). Schemas are defined as JSON objects in a declarative syntaxe.

Ifrit supports the following primitive types: , , and . Arrays and objects can be declared by nesting primitive types in JSON arrays or objects .

Ifrit can only see what's defined in a schema. The compilation will fail if the request tries to use or select a field not present in the schema. This can be used to control the scope of what elements are accessible via the query.

can't be use with . Ifrit can't from other collections, the can only be used to defined derived tables, i.e, define a multi-level pipeline of map / reduce operations. Aggregation functions can be applied to numbers when used with or directly to array of numbers when apply without. Ifrit also supports nested notation for array of objects (e.g. ). When no alias is specified, the property of the output schema is named after the selector. (with MongoDB, in names are replaced with ).|||

purescript-ifrit - An SQL -> NoSQL compiler for data aggregation