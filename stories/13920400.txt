This is an introduction to concurrent programming with examples in Go. The text covers

Before you start, you need to know how to write basic Go programs. If you are already familiar with a language such as C/C++, Java, or Python, A Tour of Go will give you all the background you need. You may also want to take a look at either Go for C++ programmers or Go for Java programmers.

Go permits starting a new thread of execution, a goroutine, using the statement. It runs a function in a different, newly created, goroutine. All goroutines in a single program share the same address space.

Goroutines are lightweight, costing little more than the allocation of stack space. The stacks start small and grow by allocating and freeing heap storage as required. Internally goroutines are multiplexed onto multiple operating system threads. If one goroutine blocks an OS thread, for example waiting for input, other goroutines in this thread will migrate so that they may continue running. You do not have to worry about these details.

The following program will print . It might print "Hello from another goroutine" , depending on which of the two goroutines finish first.

The next program will, most likely, print both and "Hello from another goroutine" . They might be printed in any order. Yet another possibility is that the second goroutine is extremely slow and doesn’t print its message before the program ends.

Here is a somewhat more realistic example, where we define a function that uses concurrency to postpone an event.

This is how you might use the function.

The program will, most likely, print the following three lines, in the given order and with a five second break in between each line.

In general it’s not possible to arrange for threads to wait for each other by sleeping. In the next section we’ll introduce one of Go’s mechanisms for synchronization, channels, and then we’ll demonstrate how to use a channel to make one goroutine wait for another.

A channel is a Go language construct that provides a mechanism for two goroutines to synchronize execution and communicate by passing a value of a specified element type. The operator specifies the channel direction, send or receive. If no direction is given, the channel is bi-directional.

Channels are a reference type and are allocated with make.

To send a value on a channel, use as a binary operator. To receive a value on a channel, use it as a unary operator.

If the channel is unbuffered, the sender blocks until the receiver has received the value. If the channel has a buffer, the sender blocks only until the value has been copied to the buffer; if the buffer is full, this means waiting until some receiver has retrieved a value. Receivers block until there is data to receive.

The function records that no more values will be sent on a channel. After calling , and after any previously sent values have been received, receive operations will return a zero value without blocking. A multi-valued receive operation additionally returns a boolean indicating whether the value was delivered by a send operation.

A statement with a clause reads successive values sent on a channel until the channel is closed.

In the next example we let the function return a channel, which is used to broadcast a message when the text has been published.

Notice that we use a channel of empty structs: . This clearly indicates that the channel will only be used for signalling, not for passing data.

This is how you might use the function.

The program will print the following three lines in the given order. The final line is printed immediately after the news is out.

The main program starts like before: it prints the first line and then waits for five seconds. At this point the goroutine started by the function will print the breaking news and then exit leaving the main goroutine waiting.

The program will not be able to make any progress beyond this point. This condition is known as a deadlock.

Go has good support for deadlock detection at runtime. In a situation where no goroutine is able to make progress, a Go program will often provide a detailed error message. Here is the output from our broken program:

In most cases it’s easy to figure out what caused a deadlock in a Go program and then it’s just a matter of fixing the bug.

A deadlock may sound bad, but the truly disastrous errors that come with concurrent programming are data races. They are quite common and can be very hard to debug.

This function has a data race and it’s behavior is undefined. It may, for example, print the number 1. Try to figure out how that can happen – one possible explanation comes after the code.

The two goroutines, and , participate in a race and there is no way to know in which order the operations will take place. The following is one out of many possible outcomes.

The name ”data race” is somewhat misleading. Not only is the ordering of operations undefined; there are no guarantees whatsoever. Both compilers and hardware frequently turn code upside-down and inside-out to achieve better performance. If you look at a thread in mid-action, you might see pretty much anything:

The only way to avoid data races is to synchronize access to all mutable data that is shared between threads. There are several ways to achieve this. In Go, you would normally use a channel or a lock. (Lower-lever mechanisms are available in the and packages, but are not discussed in this text.)

The preferred way to handle concurrent data access in Go is to use a channel to pass the actual data from one goroutine to the next. The motto is: ”Don’t communicate by sharing memory; share memory by communicating.”

In this code the channel does double duty. It passes the data from one goroutine to another and it acts as a point of synchronization: the sending goroutine will wait for the other goroutine to receive the data and the receiving goroutine will wait for the other goroutine to send the data.

The Go memory model – the conditions under which reads of a variable in one goroutine can be guaranteed to observe values produced by writes to the same variable in a different goroutine – is quite complicated, but as long as you share all mutable data between goroutines through channels you are safe from data races.

Sometimes it’s more convenient to synchronize data access by explicit locking instead of using channels. The Go standard library offers a mutual exclusion lock, sync.Mutex, for this purpose.

For this type of locking to work, it’s crucial that all accesses to the shared data, both reads and writes, are performed only when a goroutine holds the lock. One mistake by a single goroutine is enough to break the program and introduce a data race.

Because of this you should consider designing a custom data structure with a clean API and make sure that all the synchronization is done internally. In this example we build a safe and easy-to-use concurrent data structure, , that stores a single integer. Any number of goroutines can safely access this number through the and methods.

Races can sometimes be hard to detect. This function has a data race and when I executed the program it printed . Try it out, you may well get a different result. (The is part of Go’s standard library; it waits for a collection of goroutines to finish.)

A plausible explanation for the output is that the goroutine that executes  managed to do this five times before any of the other goroutines executed their print statements. The fact that the updated value of  was visible to the other goroutines is purely coincidental.

A simple solution is to use a local variable and pass the number as a parameter when starting the goroutine.

This code is correct and the program prints an expected result, such as . Recall that the order of execution between goroutines is unspecified and may vary.

It’s also possible to avoid this data race while still using a closure, but then we must take care to use a unique variable for each goroutine.

In general, it’s not possible to automatically detect all data races, but Go (starting with version 1.1) has a powerful data race detector.

The tool is simple to use: just add the flag to the command. Running the program above with the detector turned on gives the following clear and informative output.

The tool found a data race consisting of a write to a variable on line 20 in one goroutine, followed by an unsynchronized read from the same variable on line 22 in another goroutine.

Note that the race detector only finds data races that actually happen during execution.

The select statement is the final tool in Go’s concurrency toolkit. It chooses which of a set of possible communications will proceed. If any of the communications can proceed, one of them is randomly chosen and the corresponding statements are executed. Otherwise, if there is no default case, the statement blocks until one of the communications can complete.

Here is a toy example showing how the select statement can be used to implement a random number generator.

Somewhat more realistically, here is how a select statement could be used to set a time limit on an operation. The code will either print the news or the time-out message, depending on which of the two receive statements that can proceed first.

The function is part of Go’s standard library; it waits for a specified time to elapse and then sends the current time on the returned channel.

Take the time to study this example carefully. When you understand it fully, you will have a thorough grasp of how concurrency works in Go.

The programs demonstrates how a channel can be used for both sending and receiving by any number of goroutines. It also shows how the select statement can be used to choose one out of several communications.

One application of concurrency is to divide a large computation into work units that can be scheduled for simultaneous computation on separate CPUs.

Distributing computations onto several CPUs is more of an art than a science. Here are some rules of thumb.

The following example shows how to divide a costly computation and distribute it on all available CPUs. This is the code we want to optimize.

The idea is simple: identify work units of suitable size and then run each work unit in a separate goroutine. Here is a concurrent version of .

When the work units have been defined, it’s often best to leave the scheduling to the runtime and the operating system. However, with Go 1.* you may need to tell the runtime how many goroutines you want executing code simultaneously.|||

An introduction to concurrent programming with examples in Go.