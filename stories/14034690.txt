clojure is hard to learn. very hard. Forget about fan boy things you've heard. This essay tells you why.

clojure is quite a beast. I've seen nothing like it. Perl, python, ruby, they are similar, introduced no new concepts, really. Of lisps i know, 10 years of emacs lisp and some scheme/racket lisp, clojure is rather quite different from them, and introduced lots of clojure's own concepts, such as transducer, and clojure's metadata, clojure's “protocol”, clojure's refs and transactions, atoms, agents.

i also coded a lisp language the Wolfram Language intensively for 7 years (1992 to ~1999), and recently read golang 〔►see Golang Tutorial〕

but Clojure, in comparison, is somewhat just opaque.

after some introspection, it's because:

• it's got lisp stuff, like parens, and macros, and “reader”. If you haven't lisp'd before, the last 2 are hard. 〔►see Can Lisp Macro Change Lisp Syntax?〕

• clojure's got transducer, clojure's odd concept of metadata, clojure's own concept of “protocol”, clojure's refs and transactions, atoms, agents. (i don't think any lang before clojure had them, at least not java, perl, python, ruby, php, JavaScript, nor Wolfram Language. Haskell, Ocaml, got their own things, but it feels like clojure's stuff is the weird inventitive ones.)

• that's not enough. Clojure's got abusive with syntax.

And, clojure function names tend to be abbreviated. For example, function composition is just . (and you have: { , , , , , , … } )

Now, this is really the worst part.

• clojure the language is heavily intermixed with Java's concepts and practices. You can't understand clojure well unless you understand java well, and java, is fairly complex.

For example, clojure refers itself as hosted language. And, for the Java Virtual Machine implementation, clojure doesn't have its own regex 〔►see Clojure: regex〕 , nor math lib, nor much of string functions. User is supposed to use Java ones via Clojure. 〔►see Clojure: Call Java Method〕

This dependency aspect of Clojure can also be seen in Clojure docs, where inline function doc usually directly explain or refer to Java language concepts.

To understand what it means, you have to know the Java language's feature of Interface, and you have to know that Iterable is a interface which the Collection interface is extended from, and the Collection interface is effectively a list-like “datatype” in Java.

Now look at the function :

The there, is a Java Interface. It is purely a Clojure implementation detail, but such implementation detail is widely used as documentation in Clojure the language.

In case you don't know, Java interface is a way to specify what methods and fields a class can have. You define a interface as you do writing a method or class. Then, when you define a class, you can declare that your class C implement interface X Y or Z that you defined previously. When a programer knows that a class C implements a interface T, he can be sure that the C has all the methods of T.

You can also see Java dependence in Rich Hickey's Language References essays, where, Hickey talks glibly in terms of Java, as if everyone had 100 years of experience coding Enterprise Java.

let's look at Riche Hickey's reference essay. For example, see http://clojure.org/reference/data_structures.

Here's a bigger example, see http://clojure.org/reference/sequences. Read this, together with the collection essay. Nobody understands them.

to understand the above, you need to:

To understand the above paragraph, you need to:

When seq is used on objects that , the resulting sequence is still , and will represent a single pass across the data. Because that pass might happen , the pass might see changes that happen after seq has been called. Also, if the is subject to , then so too is the resulting seq. When seq is used on , changes to the underlying array will be reflected in the seq - you must copy the source array to get full immutability. That said, there is still a lot of utility to using seq on Iterables and arrays since seqs support . Robust programs should not mutate arrays or Iterables that have seqs on them.

To understand the above paragraph, you need to:

in any other lang, such as {perl, python, ruby, lisp, JavaScript, php}, even java, you have basically 3 types of data structures as builtin language datatypes. ① linked list type, ② array/vector/tuple type, ③ a key/value pairs type aka dictionary, hash table. Each with some algorithmic performance properties, and with other limitations such as if items can be added/removed, whether item can be modified, whether element must have same type, whether ordered, etc. But in clojure, it seems way more complicated, and it's hard to pin down concretely. You start with “abstractions”, of which Hickey says is the main dish, then you have concrete types underneath, such that a operation may do different things to the same interface thing (e.g. adding a element to a sequence may add to front or end depending what's the actual type), then you have java's technical concept of interface (good luck if you are expert of {C, perl, python, ruby, php, lisp, Wolfram Language, APL}, and have no idea what Java's tech concept of Interface is), and you have Java tech detail stuff like iterable or iterator… looks like basically you have 2 abstract types, collection (which hickey unhelpfully like to abbrev to “coll”) and sequence (“seq”). Each has a few concrete implementations. And, yet, seems any coll is also a seq, because due to if the thing has a method implementing ISeq interface. (you see? here's Hickey's terse incomprehensible+java talk start to show) and Hickey's reference doc is fluidly ample with these jargons, and dropping in lisp's cons and haskell's lazy list concepts like gangsta rap.

y'know? it's strange. In ocaml 〔►see Xah OCaml Tutorial〕 or haskell, they are also known as difficult, but, stuff there are typically math based, or, from strong tradition of functional programing practices in academia. But am not sure that can be said of clojure.

clojure's background…, it's basically Hickey's personal cookie, from a background of practical coding of enterprise software, with perhaps mostly Java.

PS from reading Rich Hickey's Language References essays (and watching his video presentations), although clojure seems dense and has lots of its own inventive concepts, and Rich's writing has its own particular style. But i think Hickey's concepts and his language is a solid one. This is in sharp contrast to some other language inventors, such as Larry Wall of Perl and Guido of Python, who are sputtering ignorant trivial personal opinion, and in case of Larry Wall, selling snake oil as humor. (disclaimer: all opinion only)

For clojure coder who don't know Java, see also: Java Tutorial: Collection, Map.

i had a revelation yesterday, on why clojure doc is intertwined with Java. In fact, it's highly advantageous for clojure's growth.|||

