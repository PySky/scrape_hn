A video I watched recently on logic programming, A Vision for Relational Programming in miniKanren, by William Byrd gives some interesting examples of relational programming using miniKanren.

The video demonstrates how a relational interpreter can be used not just to evaluate expressions but to also generate valid expressions given a result. Other examples of relational programming would be the Prolog examples in my Shen Prolog post where relational functions like can be used to enumerate all members of a list, as well as the traditional finding a member in a list.

I like to use the Mozart Programming System for exploring logic programming and this post goes through converting some examples in Mozart/Oz. Mozart is an implementation of the Oz programming language. The book "Concepts, Techniques, and Models of Computer Programming" is a good textbook for learning the different programming models that Mozart enables, including the relational model. For the examples here I'm using Mozart 1.3.x. It's an old language and implementation but I like to experiment with languages that are a bit different to mainstream languages.

The Prolog examples following can be tested in the online SWI Prolog implementation, Swish.

The following function in Prolog has multiple values that be used as an argument:

Using backtracking it's possible to enumerate all valid arguments:

The function can be used to return all values in a list:

Backtracking in Mozart/Oz is not the default. Mozart provides the statement to enable backtracking. A statement contains a sequence of clauses separated by where a 'choice point' is created for each group of clauses. Each clause is tried in turned - if a particular clause fails then execution backtracks to a previous choice point and is resumed until one succeeds or all fails. The equivalent implementation of in Mozart is:

Prolog uses an automatic depth first search to find solutions. Mozart doesn't do automatic search - programs involving choice points must be run in a search engine that can implement any form of search required. A default search engine is provided that does depth first search. Here we create a search object and enumerate all the valid results manually:

The Mozart syntax can look a little strange at first but it's not too difficult to understand once it's learnt. instantiates an object. Search.object is the class of the object being created. is a record that is being passed to the constructor of . The is the function we created previously. The remaining statements call the method on the object. takes as an argument a variable that receives the result of the call. The use of tells Mozart to pass a temporary variable to receive the result, and return that result as the result of the call. This result is passed to which displays the result in the GUI browser. Results are returned in single element lists and when there are no more results, is returned.

There is a library function to return all possible solutions in a list, Search.all:

The ability to interactively drive the search enables writing programs that control the search process. The Explorer is a Mozart tool that uses this ability to show an interactive graph of the search space of a program. It can be run to show a graph of all solutions in with:

In Prolog a function to test membership of a list can be written as:

This states that is a member of the list if is the head of the list (the first element), or if it is a member of the tail of the list.

Thanks to Prolog's backtracking you can also use this function to enumerate all values in the list:

In Swish you need to click 'Next' to get each result. You can return all results as a list with :

This is what the non-backtrackable member function looks like in Mozart:

A backtrackable version of this code uses instead of to create choice points in each clause:

Here is used instead of . A procedure doesn't return a value. It is expected to bind values to arguments to return a result. In this case either or will be bound depending on what is passed as an argument. Given the call then the first clause of succeeds - the head of the list is equal to . With the call then will be successively bound to each element of the list depending on what order the search engine used to evaluate it uses. will enumerate all possible lists containing :

The difference here compared to our search over is that an anonymous procedure is passed to the search engine. was aleady a single argument procedure so it didn't require a wrapper. The anonymous procedure takes a single argument which is expected to be bound to the result of a single iteration. In the first example no result is bound, just the fact that the call succeeds is enough. In the second, is bound to the first argument to resulting in a list of all valid first arguments. In the third, is bound to the second argument to resulting in a list of all valid lists that contain the element . This is infinite so we only iterate the first few solutions.

The miniKanren video referenced earlier, A Vision for Relational Programming in miniKanren, has an example of a simple language syntax checker implemented in the relational style. The equivalent Mozart implementation is:

A is either an atom, a record containing an argument and body, or application of two expressions (here represented as a list). A can be tested to see if it is valid with:

A result of indicates that it succeded ( would be a failure). Thanks to the magic of relational programming it's possible to enumerate all valid terms:

As a final example, the following program implements a factorial function that can compute the factorial of a number, or the number given its factorial:

This uses a few more Mozart features but is essentially a search through the choice points in a statement. In this case it also uses Finate Domain Constraints. This allows telling Mozart what the range of a particular integer value can be, provides constraints upon that value and the search process will attempt to find a solution that results in the integer containing a single value. The syntax constrains the variable to be from zero to five. is a constant for an implementation defined maximum upper bound. Operators ending in impose constraints on values that can be backtracked during search. There's a limitation to this approach in that the finite domain constraint has an implementation defined maximum upper value and the search will fail if it hits this value which unfortunately limits the practicality of a reverse factorial.

Mozart/Oz has a lot of other interesting functionality. Distributed objects, GUI programming, Concurrency, amongst others. It's a fun tool to experiment with and Concepts, Techniques, and Models of Computer Programming is an excellent read.

Unfortunately development of Mozart has slowed from its heyday. A reimplementation of Mozart, called Mozart 2 is being worked on that uses LLVM for the code generator and replaces the internal constraint programming system with the Gecode toolkit. Development seems to have stalled recently and it lacks many of the features that already exist in older Mozart versions. Hopefully it'll pick up steam again.

For this reason I continue to use Mozart 1.3.x. There is a 1.4.x version but it has some issues that make me avoid using it. The distributed layer was replaced with an implementation written in C++ which has some bugs that I've been unable to work around in projects where I used it. The distribution panel is broken due to the hooks it requires not being implemented by the new C++ layer. At some point Mozart 2 may be complete enough for me to move to that version. I make the occasional fixes to 1.3.x and 1.4.x to keep it building and running on Linux.

Even though Mozart seems to be in a holding pattern it's a great for exploring ideas and the list of papers is a good resource for learning about distributed programming, constraints and concurrency. Some interesting projects implemented in Mozart include:|||

