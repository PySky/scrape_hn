Drivetribe explained how it uses Flink to compute metrics

inside the product, such as impression counts, comment counts, “bump” counts (Drivetribe’s terminology for a “like”), and “bumps per day”.

It’s a common and broadly-applicable use case–counting and exposing end-user-facing metrics, keyed by ID–and so we’ll think through the case in the context of a stateful streaming architecture in Flink both with and without Queryable State.

In doing so, we’ll consider how Queryable State has the potential to provide even lower-latency access to results, and in some cases,

to eliminate the need for an external key-value store altogether.

For the purposes of this demo, the source generates the events itself.|||

