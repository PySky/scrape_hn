This project is an implementation of the JSON Schema Core Draft v4 specification. It uses the org.json API (created by Douglas Crockford) for representing JSON data.

Lets assume that you already know what JSON Schema is, and you want to utilize it in a Java application to validate JSON data. But - as you may have already discovered - there is also an other Java implementation of the JSON Schema specification. So here are some advices about which one to use:

Add the following to your :

If you are looking for a version which works on Java7, then you can use this artifact, kindly backported by Doctusoft:

Starting from version the validator collects every schema violations (instead of failing immediately on the first one). Each failure is denoted by a JSON pointer, pointing from the root of the document to the violating part. If more than one schema violations have been detected, then a will be thrown at the most common parent elements of the violations, and each separate violations can be obtained using the method.

To demonstrate the above concepts, lets see an example. Lets consider the following schema:

The following JSON document has only one violation against the schema (since "a" cannot be negative):

In this case the thrown will point to and it won't contain sub-exceptions:

Now - to illustrate the way how multiple violations are handled - lets consider the following JSON document, where both the "a" and "b" properties violate the above schema:

In this case the thrown will point to , and it has 2 sub-exceptions, pointing to and :

This will print the following output:

Since version it is possible to print the instances as JSON-formatted failure reports. The method returns a instance with the following keys:

Starting from version the library supports the keyword (which is an optional part of the specification), so you can use the following formats in the schemas:

The library also supports adding custom format validators. To use a custom validator basically you have to

Lets assume the task is to create a custom validator which accepts strings with an even number of characters.

The custom will look something like this:

To bind the to a value (for example ) you have to bind a validator instance to the keyword in the schema loader configuration:

rawSchema ( (inputStream)); schemaLoader builder() .schemaJson(rawSchema) rawSchema is the JSON representation of the schema utilizing the "evenlength" non-standard format .addFormatValidator( , ()) the EvenCharNumValidator gets bound to the "evenlength" keyword .build(); schema schemaLoader load() build(); the schema is created using the above created configuration schema validate(jsonDcoument); the document validation happens here

In a JSON Schema document it is possible to use relative URIs to refer previously defined types. Such references are expressed using the and keywords. While the specification describes resolution scope alteration and dereferencing in detail, it doesn't explain the expected behavior when the first occuring or is a relative URI.

In the case of this implementation it is possible to explicitly define an absolute URI serving as the base URI (resolution scope) using the appropriate builder method:|||

json-schema - JSON Schema validator for java, based on the org.json API