Learn about Ansible features and how Ansible fits with Chef and Puppet, and see some technical examples of configuration management and workflow automation.

Ansible is a general purpose automation tool that may be used for configuration management or workflow automation. Configuration management is an "infrastructure as code" practice that codifies things, e.g. what packages and versions should be installed on a system, or what daemons should be running. Workflow automation may be anything from provisioning cloud infrastructure to deploying software.

This article starts with a feature overview, a description of how Ansible fits with Chef or Puppet, and technical examples of configuration management and workflow automation. This article will give you a feel for what Ansible can do, and the high-level topics for further learning.

Ansible is written in Python and uses SSH to execute commands on different machines. Ansible is agentless which makes it much easier to start out with. All you need is SSH access and Python installed on the relevant machines. Ansible uses declarative YML "playbooks" to map a group of hosts (from "inventory") to well defined roles. Declaratives are used to instruct Ansible how to set up or change things, and Ansible makes the required changes. For example, you may run a "configure web server" playbook that installs Nginx and connects each machine to a load balancer.

The "inventory" is a static or dynamic (e.g. if you're using EC2) list of machines with associated tags and other metadata (e.g. what user to connect as or SSH port). Playbooks list "plays". A "play" declares machines to execute "tasks" on. Tasks use Ansible "modules" to do the invididual work. Ansible has modules to install packages, generate files, manage users, connect to cloud providers, and much more. There are literally hundreds of modules and new modules are added with every release. It's important you understand this hierarchy. Here's an example workflow represented as an Ansible peusdo playbook:

Notice how this playbook mixes different sets of machines and what should be done with them. We'll create real playbooks as we progress. You can check the official playbook introduction as well. Let's focus on how Ansible fits with Chef and Puppet.

Chef and Puppet are two other popular automation tools. All three may be used to solve similar problems and have similar feature sets. There are two major differences between Ansible and Chef/Puppet. Both Chef and Puppet are primarily agent based. Machines managed by Chef/Puppet run an agent. The agent checks back to the control machine to see what changes need to happen. This doesn't require SSH, but it does require infrastructure to run the puppet/chef server. Ansible's agentless model means that it's easy to start with and works for smaller inventories. However, that becomes a problem with hundreds of machines. In this case, ansible-pull is one of the options. Ansible also relies on SSH for connecting to machines, so distributing keys is another facet to consider.

Chef and Puppet both use a custom domain specific language to describe what to do. Chef actually uses pure Ruby code. Puppet created an entirely new DSL. If you already know YAML, then you're ready to start writing Ansible playbooks.

There are many more in-depth comparisions between these three tools. We won't spend more time talking about the differences. Here's a quick summary before we move on to actually using Ansible to get things done:

Ultimately, these three tools may be used to solve the same set of problems with different technical trade-offs. The best tool for your job depends on your requirements and team.

For this section, let's assume that "configuration management" refers to configuring state on existing machines. Common activities are:

Ansible can do all of this and more. Let's examine the first use case with an example playbook to install . Playbooks are YML files that list plays with their associated inventory and tasks. All playbooks start off the same way â€” they define the first play.

The apt manages apt packages. It can install, upgrade, and remove packages. Ansible commonly uses the argument to define the expected state. Common values are (to install in this case) or (to uninstall in this case). You can find all the allowed values in the apt module docs docs. The defines the apt package. Note that you can specify versions like for packages. The option will trigger an if the last refresh is older than the TTL. This is useful when you run playbooks on fresh machines. It's also a great way to avoid refreshing the cache multiple times in the same play/playbook.

This playbook uses and connection so we could run it without needing a remote machine. Save this file as then run it using .

Note the various and items. Ansible knows if an individual task is already as expected or something must be changed. We can re-run the playbook again to see what happens. This time everyting is simply .

Let's consider a case where we may have a non based systems. We'd like to reuse the same playbook but use a different module depending on the operating system. Ansible supports conditional execution. This works well when combined with Ansible's built in variables. Let's refactor this playbook to work against and distributions.

Note the new keys. These are python snippets that evaluate to boolean expressions. It also introduces variables generated by facts. Facts are information about remote systems ( ). Examples include the Linux kernel version, number of disks, partition information, amount of phyiscal memory, or Linux distribution. The is a fact variable. It's used corectly skip the tasks based on the Linux distribution.

Let's wrap up this section with links to relevant documentation and follow up material:

Remember the peusdo playbook from earlier where we describes creating EC2 infrastructure? Ansible can automate that as well. This falls into the "workflow automation" bucket. It's common that processes may mix creating or manipulating some infrastructure and doing some sort of configuration management. Let's consider other use cases. You may create an Ansible playbook that temporary removes a machine from a load balancer, pulls code with the module, runs a smoke test, then adds the machine back to the load balancer. You may also use Ansible to create compute infrastrucure in the cloud, configure DNS, then connect to those machines, and configure them to run your application. The common thread here is a mix of traditional configuration management and infrastructure manipulation. Ansible provides the best from both worlds through its large module library and flexbility.

Let's look at example that deploys changes to a Heroku application. The playbook creates a new Heroku application if required, finds its URL, pushes a new deploy via , then does a test HTTP request with the model. This could be done with a small Bash script but that would not scale up as nicely as an Ansible playbook. It's possible to extend this playbook, we can add a custom domain that would automatically add DNS records using Ansible's built in modules for providers like CloudFlare or AWS Route53.

You may find more examples in our previuous tutorials:

You may also like the list of cloud modules.

These tutorials cover using Ansible to automate a mix of infrastructre creation, provisioning, configuration management, and verification.

Using Ansible in the CI and deployment environment on Semaphore is straightforward. Just add a command to install Ansible: in your build or server configuration settings, or the script file that you are executing. After that, you can run or anything else that you need, and Semaphore will execute it.

We've covered two large Ansible use cases, but there is so much more. Let's highlight some important areas so you know what to look into next.

Ansible has a robust role system. Roles are self contained plays that may be applied to different machines. You may have a "web server", "mysql-replica", or "redis" role. Roles may declare dependencies and customize variables. This allows you to separate smaller sets of unique code and compose larger, more useful roles. Ansible Galaxy is a repository for using contributed roles. Odds are you may rely on some of these in your day-to-day work. You'll find roles to set up databases, web servers, and monitoring systems.

Ansible is also extremely customizable. It's easy to write your own Ansible modules. An Ansible module is simply an executable file that reads JSON from stdin and prints JSON to stdout. This means you may create your own modules in any language, be it Bash, Ruby, Python, Node.js, or Go. Here are some simple examples that wrap commands that do not have Ansible modules. We did not touch on Lookups yet. Lookups allow us to connect various systems to Ansible. Lookups are just another executable program so you can write them like modules. Here are some lookup examples.

We discussed how Ansible is agent-less. This works well for small setups but becomes problematic at a larger scale. There are few ways to overcome this problem, and ansible-pull is one of them. This command will poll a git repo, clone it, and execute playbooks. This is a good solution for auto-scaling cloud infrastructure which needs configuration after it's created. Ansible Tower is another approach. It's a full scale mission control system for Ansible installations. It's currently a paid product only, but rumour has it that it will be open sourced soon.

These getting started guides are geared towards specific use case, ands offer more than we could cover together. There are guides for all the common cloud providers, and a few specific use cases.

That's all. Good luck out there and happy shipping!|||

