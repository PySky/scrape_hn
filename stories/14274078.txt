Hey folks, I wonder how many of you have read all episodes so far, if you are one of them please shout out to me on twitter, I’d love to have some feedback :)

This is a series of short bar-like conversations around Elixir and its features, it aims to help you to wrap your head around it by using meaningful examples and putting it in the context of real world problems.

If you haven't yet, you probably should check the last episodes, I’ve been writing this in a logical sequence that makes it way easier to understand by gracefully increasing the complexity of the topics and examples:

Episode I - Elixir, Pipe Operator and Pattern Matching

Episode II - Actor Model, Modules and functions

Episode III - Maps, Functions + Pattern Matching = ❤️

Episode IV - Elixir Types, Data Structures and Underscore

Episode V - Concurrency, Processes and Recursion 

Episode VI - [Head | Tail] & List Comprehension

Together with each episode, I also fire up an email with the link for the new article, the code we used and some cool info around projects, conferences and things we can work together, so make sure you put your email bellow so you can be on top of it all!

We have talked a lot about processes on other episodes, not only how they work but also how they are a key component of Elixir, something it inherited from Erlang, and a core piece to extract the most out of the language capabilities.

On episode II (Actor Model, Modules and functions) we talked about Actor Model, a known architecture that was used on the implementation of Erlang VM, it enables processes to be totally isolated from each other, not sharing any context, and by doing so, it actually makes easier to share specific information between processes, but in a organized way, by exchanging messages.

Every process in Erlang (and therefore in Elixir as well) is considered an Actor, completely isolated from its pears, a single processes might be related to other processes, like Supervisors, or linked processes (we'll talk about that in a near future), but it does not share the same context and variables with other processes.

Every process also has what you could imagine as an empty mailbox, just waiting for messages, and you can program your processes to respond to those messages depending on their content. You can also make your process send messages to others by using an identifier,  a process ID, what we call PID (Process Identifier).

This alone can sound silly, but having this ability is a huge deal and enables you to do a lot of fun stuff you wouldn’t do in other non-functional languages like Ruby.

Let’s start by checking on how to send, receive and respond to messages on processes, doing this will involve some previous knowledge from past articles mostly episodes I, III and V.

As you can tell, sending and receiving messages is something really simple in Elixir, and that’s one of its major benefits, it makes super easy for you to take advantage of its main capabilities.

In this first example we send only a string, but keep in mind you can send any type of data, the most commonly used are   (you can check more about tuples on Episode IV).

Another thing that you might have noticed is that the block only handles one message, the next one on the list of messages. If you have multiple messages waiting, the receive block will only handle the next one, the one on the bottom of the list:

Okay, but how can we have a process constantly waiting for messages and handling it as it arrives? That’s where recursion comes into play, we talked about it on Episode V - Concurrency, Processes and Recursion, and this is an awesome use case for it.

Now we already know how to use recursion for creating a process always ready to receive messages, but what about multiple processes communicating with each other? Let's check bellow.

For this example we’ll build a  in-memory storage for gravatar images and its paths. Before diving into the code it’s important that you understand that functional languages do not have the usual structures for holding state, keep in mind there is no objects nor instances. Recursion is one of the ways you can support state, and that’s exactly what we need for this example.

We want to have an module with a function that returns the local path for a gravatar image for a given email, in order to achieve that we will need to perform the following actions:

P.S.1 - If you already know Elixir and Erlang you probably noticed there is some room for improvement, I could have used the module or even + to keep state. But for the sake of the simplicity of this examples it's more than enough, we will talk about the module next, and about a in the future.

Finally on Episode VII of Elixir with a Rubyist! Again I failed to get into the Task module, but I do now we have gone through all the knowledge necessary to understand and use it, so the next episode will be dedicated to it!

I’m really glad from all the feedback I got so far, but I’d love to hear it from you, so please let me know on the comments bellow and over Twitter.

If you don’t want to miss the next episodes and cool information around talks and even access to the code we use on the episodes you should subscribe to our mailing list by putting your email bellow.

On the next episode we will refactor our practical example using the module and understand how to use it.|||

Processes CommunicationHey folks, I wonder how many of you have read all episodes so far, if you are one of them please shout out to me on twitte...