Is a slogan I have adhered to since quite some time. There are counter arguments to this, especially in typed languages, where THEY say things like: Why to test Mutators and Accessors, or Getters and Setters? That might marginally be true for Java or Scala, but definitely untrue for the banana republic called Ruby. What will save your life in Ruby ecosystem are the Unit Tests, no matter how trivial the code might seem.

Unit testing demands we focus on one unit of code (usually a method) while stubbing/mocking out everything outside of it. The code should be able to stand on its own, else why would you modularize it? But it’s not always simple to achieve this.

Let’s take an example:

View Partials are an important pattern in Rails, boosting code reusability and modularity. One drawback they face is that unit testing them in isolation is not trivial. Let’s look at the following code:

Now because in the partial the variable is of type (I know it’s ruby, but still types exist underneath) it’s difficult to stub it. Although one can always write a test for the entire view so that partials are automatically covered, lately I have come to feel that partial unit testing should be separate. Imagine a page with multiple partials, it would make your test a huge pile of indiscernible code.

When I realized this for the first time, I was awe struck of the simplicity and ease of testing partials. It beautifully enabled me to confidently test my partials individually.|||

Is a slogan I have adhered to since quite some time. There are counter arguments to this, especially in typed languages, where THEY say things like: Why to test Mutators and Accessors, or Getters and…