Still, something has always been slightly missing from all of these approaches. I wanted to see this:

Still, with Promises there has always been one thing missing: cancelation. There are approaches out there of course. If you are an RxJS user, you may have read this post by Ben Lesh . If you haven’t read it, you need to go do that now. If you don’t know what Rx is, go here and read up about programming using event streams because it will blow your world wide open and you will see all new possibilities with things. We brought Rx into our stack at RedLock very early on and I regularly attend talks to learn more about it.

If you are an engineer using Promises, you know that despite the arguments against them, there are a lot of benefits in their use. I mention some of them here .

Promises in the front-end are an awesome, if contentious, technology. For most front-end engineers writing modern web UIs, they are something that we are used to working with every day.

Although this hits heavily on Promise Cancelation, this post is more about HOW it was accomplished rather than WHAT was accomplished (but resources for the WHAT are sufficiently linked). It’s about using higher-order functions/components to win big on Developer Experience.

This is what I see in Chrome when canceling a Promise. In Safari, you see a dash and no bytes transferred. Same effect.

What we found was that unsubscribing from an event stream in Rx did a very crucial thing: it meant nothing was “listening” to the data stream after the subscription was canceled. What it didn’t do: stop the browser from resolving the Promise.

Under the hood, we use Axios for promises. It’s proven to be an awesome library, with regular development as it moves toward v1.0. We found that the best way for us to implement it in a complex application was to abstract away the implementation details and give developers a simple method to use. All they have to do is pass it an http method, url, success callback, and any additional options (including an option for a custom error handler if they don’t want to use the error handler provides by default in the wrapped method).

This has been easy to understand for developers, and has been one of many things that aids our ability to develop new features quickly. Recently, we found it was time to upgrade to v0.15.3 and with that update came promise cancelation (as of 0.15.0, with some bug fixes on patch versions). The type of promise cancelation that gets the above view (canceled in the network tab). The benefits to such a feature depend on your particular use cases, and mileage may vary. For us, this is a game changer with regards to scalability (the way RxJS was as well).

We knew that we wanted promise cancelation, but we didn’t want developers adding a bunch of new code all over the place to do it. We wanted the integration to be seamless — almost magical.

So, what I did was write a decorator. Depending on how you use it, it’s either a decorator, or a higher-order function, or a higher-order component. Well, actually what I did was write a higher-order React component, and then implement it as a decorator (we do use decorators in ES7, for which you can find more info here).

An important note that should be obvious from the above paragraph: We use React in our front-end architecture.

Okay, moving on to the decorator. It’s called and its main purpose is to abstract away the implementation of promise cancellation in such a way that developers on our team don’t have to do anything extra, other than use the method they are already used to using. I won’t get into too many of the details because 1) if you use Axios, you can read up on what is involved in canceling promises using Axios and 2) if you do not use Axios, the details won’t help you.

At this point, it’s more about HOW this was implemented, not WHAT was implemented. This is about decorators and having an awesome Developer Experience (DX).

The decorator wraps things in such a way that it provides a prototype to the decorated React component, such that the only difference to the developer is they use instead. They pass arguments the same way they would have, but they never have to worry about the cancel token, or the cancel token source or anything else. Also, the decorator/higher-order component handles the cancelation at the proper time, leveraging componentWillUnmount from the React LifeCycle. It’s as simple to use as this:

For us, this was a huge win because it provides much needed functionality with minimal code changes and without requiring developers to do anything significantly different when implementing it themselves.

Of course, React components aren’t the only place we may have to cancel promises. We actually do use Redux Sagas in some places, and we wanted it there too. I wrote a function called for us that achieves this outside of React, but is used as a normal function. It returns an object that provides the developer with the and a method for use. This gave us the best of everything across the application.

One final note: This DOES work for multiple promises in the same React component :)

What are your thoughts on developer experience, higher-order functions, the debate around Promises and especially Promise Cancelation? I would love to hear from you!

Author’s note: This article uses the American English “canceled” and “cancelation”, etc. rather than the Queen’s English “cancelled”/”cancellation”, etc. Simple reason being, I’m from the US.

Lead UI Architect at RedLock. Check us out at www.redlock.io|||

Although this hits heavily on Promise Cancelation, this post is more about HOW it was accomplished rather than WHAT was accomplished (but resources for the WHAT are sufficiently linked). It’s about…