Maybe is a type that wraps optional values. It can either be a (has some value) or a (has no value).

It's defined like this:

In JavaScript, it is a better way of handling and . Instead of writing an if statement, ternary expression, or shorthand to check if a value is present you can just over it instead and assign the result of this expression or return it. You can also chain operations together, often leading to much cleaner code.

It's inspired by Haskell's Maybe, Swift's Optional and Scala's Option.

or if you want everything:

Use the function to create a from a value.

Use to transform the value inside the .

Force unwrap the value with if it is present. Warning: this will throw an Error if it is a (has no value).

Use the function to wrap a possibly empty value.

Use to provide a default value.

Use to provide a default already wrapped in a Maybe. This can be useful if you want to combine two or more Maybe's together.

Use if you need to return a in your closure instead of the value. For example, when you want to explicitly return in a particular case.

is a function like that takes a value. is a reference to .

Using is usually the best way to return a given a predicate. It returns only if there is a value and applying the predicate function to the 's value returns .

Use when you would otherwise use but can't or don't want to return a value. This is usually when you are causing a side effect. returns and so enforces it's the last in a chain. It runs only if there is a non empty value.

This library uses Flowtype so you can also import the type and use its definition:

Don't worry if you don't use Flowtype though as it gets stripped by Babel.

With Maybe (handles falsy values like and automatically).

With types already converted to 's.

Maybe is available under the MIT license. See LICENCE.|||

maybe - Maybe is a type that wraps optional values