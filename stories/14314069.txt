Parkinson's law of triviality is C. Northcote Parkinson's 1957 argument that members of an organisation give disproportionate weight to trivial issues.[1] He provides the example of a fictional committee whose job was to approve the plans for a nuclear power plant spending the majority of its time on discussions about relatively minor but easy-to-grasp issues, such as what materials to use for the staff bike shed, while neglecting the proposed design of the plant itself, which is far more important but also a far more difficult and complex task.

The law has been applied to software development and other activities.[2] The term bike-shed effect or bike-shedding was coined as a metaphor to illuminate the law of triviality; it was popularised in the Berkeley Software Distribution community by the Danish computer developer Poul-Henning Kamp in 1999[3] and has spread from there to the whole software industry.

The concept was first presented as a corollary of his broader "Parkinson's law" spoof of management. He dramatizes this "law of triviality" with the example of a committee's deliberations on an atomic reactor, contrasting it to deliberations on a bicycle shed. As he put it: "The time spent on any item of the agenda will be in inverse proportion to the sum [of money] involved." A reactor is so vastly expensive and complicated that an average person cannot understand it, so one assumes that those who work on it understand it. On the other hand, everyone can visualize a cheap, simple bicycle shed, so planning one can result in endless discussions because everyone involved wants to add a touch and show personal contribution.[4]

Problems arise after a suggestion of building something new for the community, like a bike shed, causes everyone involved to argue about the details. This is a metaphor indicating that it is not necessary to argue about every little feature based simply on the knowledge to do so. Some people have commented that the amount of noise generated by a change is inversely proportional to the complexity of the change.[3]

In the third chapter, "High Finance, or the Point of Vanishing Interest", Parkinson writes about a fictional finance committee meeting with a three-item agenda:[1] The first is the signing of a £10 million contract to build a reactor, the second a proposal to build a £350 bicycle shed for the clerical staff, and the third proposes £21 a year to supply refreshments for the Joint Welfare Committee.

There are several other principles, well known in specific problem domains, which express a similar sentiment.

A countermeasure is the duck technique in corporate programming: a programmer expects their corporate office to insist on at least one change on every presentation to show that they're participating, regardless of the benefits of that change. Consequently, the programmer intentionally adds an element they expect corporate to remove. Quoted from Jeff Atwood's blog, Coding Horror:[7]

This started as a piece of corporate lore at Interplay Entertainment. It was well known that producers (a game industry position roughly equivalent to project manager) had to make a change to everything that was done. The assumption was that subconsciously they felt that if they didn't, they weren't adding value. The artist working on the queen animations for Battle Chess was aware of this tendency, and came up with an innovative solution. He did the animations for the queen the way that he felt would be best, with one addition: he gave the queen a pet duck. He animated this duck through all of the queen's animations, had it flapping around the corners. He also took great care to make sure that it never overlapped the "actual" animation. Eventually, it came time for the producer to review the animation set for the queen. The producer sat down and watched all of the animations. When they were done, he turned to the artist and said, "That looks great. Just one thing: get rid of the duck."|||

