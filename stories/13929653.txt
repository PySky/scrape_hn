Who wants crazy-ass values in their database? You? I doubt it, you’re better than that. You run a tight ship.

If you hail from the land of Ruby on Rails web apps then you’ve probably written a few migrations in your time. Heck, maybe you’ve even added a constraint to a column or two. You don’t want values getting all up in your table and ruining everything, right?

But why did you add that constraint at the database-level, rather than just use a validation in your ActiveRecord model? After all, isn’t the database just a big dumb container for your models?

No. The database is actually your friend, you should leverage its power.

Data integrity is a good thing. Constraining the values allowed by your application at the database-level, rather than at the application-level, is a more robust way of ensuring your data stays sane.

If you consider your database to be the “single source of truth”, then you can’t rely on your application to enforce the validity of your data. There are myriad possibilities for your application can drop the ball on your data integrity: bugs in your application code, bugs in third-party libraries, concurrency bugs, custom SQL in your app code, migrations, etc.

Unfortunately, ActiveRecord doesn’t encourage (or even allow) you to use database integrity without resorting to hand-crafted SQL. Rein (pronounced “rain”) adds a handful of methods to your ActiveRecord migrations so that you can easily tame the data in your database.

Let’s have a look at constraining database values for this simple library application.

Here we have a table of authors:

We also have a table of books:

If you’re interested in this kind of thing then take a look at the Rein project on GitHub.|||

The life and times of Josh Bassett.