New Zealand and Wellington especially are not exactly big so when the program manager of C# language comes into town for a meetup it would be a shame to stay at home.

This Wednesday the amazing WelliDotNet meetup hosted Mads Torgersen; a guy responsible for the C# language design (and TypeScript and Visual Basic in the past); and he talked about the new features of C# 7.0 and where the next versions are heading.

Mads started with the results of Stack Overflow Developer Survey 2017 results where C# is 4th most used programming language.

And it also made it to the top 10 most loved programming languages.

He thinks the reasons behind that are

C# evolution is a balancing act as you want to

Mads started with minor features and talked briefly about new binary literals. And the _ separator.

One of the major features is the direct support of tuples — System.ValueTuple. So now you can write functions with multiple return values.

Also, you can write tuple literals like(0, 0);

You can optionally provide names for tuple items in method definitions, literals and everywhere else you use tuples.

These names are tracked only by the compiler; in runtime they are not used and only Item1 style is visible. In debugging the names are available but not if you use reflection.

Another feature is deconstruction of tuples with _ notation for unused variables — discards.

The deconstruction could be also used with your own types overriding the deconstructor.

Tuples are mutable but it is discouraged to mutate them — items are public fields which mitigates every downsides though. You get equality, hashcode computation and all the benefits of using structs out of the box.

Apart tuples you can write local functions — function inside a function. It could improve readability of your code while keeping it closed and nicely contained.

C# finally gets pattern matching in a slightly awkward syntax.

Note that you can use any condition expressions and it’s capable of extracting the value matched to the “local” variable. With that feature switch is now case sensitive.

And with that a few other smaller features. You can declare variable in the middle of expression.

And you can do ref returns and ref locals. Which is useful for low level development where you don’t want to allocate objects and want to avoid garbage collection.

New versions of C# are planned to be released on quarterly basis which sounds quite daring. The next proposals are just drafts and could be changed in the future.

This should be a release of minor convenience features that are not really related to each other, are small and self-contained.

Being able to define async Main function even if it is mostly for demonstration purposes.

and add discards to more places

This release will focus on more low level stuff without the need to work with pointers. There is a lot of game developers using C# with Unity and better performance could also be used in finance and other applications.

Those features could include ref readonly parameters and returns (the opposite of out parameter which needs to be assigned) — it says don’t modify me.

The extension methods are not ideal so redesign them and allow them to be used with refs and on structs.

Another feature could include readonly structs that don’t need to be copied and a new ref-like structures for abstraction over a chunk of memory.

This version should focus on nicer patterns and developer’s user experience. That could involve better recursive patterns, nicer syntax for pattern matching and tuple patterns.

Major release in which the C# team might introduce changes to CLR — that would be for the first time since the introduction of generics. All the features added since were mostly compiler tricks.

Big feature could be adding default implementation to interface members. One of the use cases would be making C# a great tool for working with mobile platforms (both Java and Objective-C supports this feature) and make Xamarin even more awesome.

And lastly a few improvements around async with async streams and disposables and adding foreach await to process data when coming and using await for safe application of disposable pattern.

C# could add records (similar to Ruby’s OpenStruct) for simple classes with default implementation of deconstruction, hash codes and equality.

Lastly, there might be a support for immutable objects.

So that’s it. The future for C# is pretty bright and the features are exciting. I’m quite happy about pattern matching introduction and deconstruction. And maybe in the future immutable objects with some nullable reference types. That’d be cool.

Again, big shoutout to WelliDotNet not just for the pizza but for the great event with the world class speaker.|||

New Zealand and Wellington especially are not exactly big so when the program manager of C# language comes into town for a meetup it would be a shame to stay at home. This Wednesday the amazing…