This is the first in a series of small articles / tutorials based around virtual memory. The goal is to learn some CS basics, but in a different and more practical way.

For this first piece, we’ll use to find and modify variables (in this example, an ASCII string) contained inside the virtual memory of a running process, and learn some cool things along the way.

All scripts and programs have been tested on the following system:

In order to fully understand this article, you need to know:

In computing, virtual memory is a memory management technique that is implemented using both hardware and software. It maps memory addresses used by a program, called virtual addresses, into physical addresses in computer memory. Main storage (as seen by a process or task) appears as a contiguous address space, or collection of contiguous segments. The operating system manages virtual address spaces and the assignment of real memory to virtual memory. Address translation hardware in the CPU, often referred to as a memory management unit or MMU, automatically translates virtual addresses to physical addresses. Software within the operating system may extend these capabilities to provide a virtual address space that can exceed the capacity of real memory and thus reference more memory than is physically present in the computer.

The primary benefits of virtual memory include freeing applications from having to manage a shared memory space, increased security due to memory isolation, and being able to conceptually use more memory than might be physically available, using the technique of paging.

You can read more about the virtual memory on Wikipedia.

In chapter 2, we’ll go into more details and do some fact checking on what lies inside the virtual memory and where. For now, here are some key points you should know before you read on:

In the high memory addresses you can find (this is a non exhaustive list, there’s much more to be found, but that’s not today’s topic):

In the low memory addresses you can find:

The heap is a portion of memory that is dynamically allocated (i.e. containing memory allocated using ).

Also, keep in mind that virtual memory is not the same as RAM.

Let’s start with this simple C program:

Take a moment to think before going further. How do you think creates a copy of the string “Holberton”? How can you confirm that?

has to create a new string, so it first has to reserve space for it. The function is probably using . A quick look at its man page can confirm:

Take a moment to think before going further. Based on what we said earlier about virtual memory, where do you think the duplicate string will be located? At a high or low memory address?

Probably in the lower addresses (in the heap). Let’s compile and run our small C program to test our hypothesis:

Our duplicated string is located at the address . Great. But is this a low or a high memory address?

The size of the virtual memory of a process depends on your system architecture. In this example I am using a 64-bit machine, so theoretically the size of each process’ virtual memory is 2^64 bytes. In theory, the highest memory address possible is (1.8446744e+19), and the lowest is .

is small compared to , so the duplicated string is probably located at a lower memory address. We will be able to confirm this when we will be looking at the filesystem).

If you list the contents of your directory, you will probably see a lot of files. We will focus on two of them:

Awesome! So, can we access and modify the entire virtual memory of any process?

This means that we can look at the file to locate the heap of a running process. If we can read from the heap, we can locate the string we want to modify. And if we can write to the heap, we can replace this string with whatever we want.

A process is an instance of a program, with a unique process ID. This process ID (PID) is used by many functions and system calls to interact with and manipulate processes.

We can use the program to get the PID of a running process ( ).

We now have everything we need to write a script or program that finds a string in the heap of a running process and then replaces it with another string (of the same length or shorter). We will work with the following simple program that infinitely loops and prints a “strduplicated” string.

Compiling and running the above source code should give you this output, and loop indefinitely until you kill the process.

If you would like, pause the reading now and try to write a script or program that finds a string in the heap of a running process before reading further.

The first thing we need to find is the PID of the process.

In the above example, the PID is 4618 (it will be different each time we run it, and it is probably a different number if you are trying this on your own computer). As a result, the and files we want to look at are located in the directory:

A quick in the directory should give you something like this:

As we have seen earlier, the file is a text file, so we can directly read it. The content of the file of our process looks like this:

Circling back to what we said earlier, we can see that the stack ( ) is located in high memory addresses and the heap ( ) in the lower memory addresses.

Using the file, we can find all the information we need to locate our string:

A quick look back to our (still running) program:

-> < < . This confirms that our string is located in the heap. More precisely, it is located at index of the heap. If we open the file (in this example ) and seek to the memory address , we can write to the heap of the running process, overwriting the “Holberton” string!

Let’s write a script or program that does just that. Choose your favorite language and let’s do it!

If you would like, stop reading now and try to write a script or program that finds a string in the heap of a running process, before reading further. The next paragraph will give away the source code of the answer!

We’ll be using Python 3 for writing the script, but you could write this in any language. Here is the code:

Note: You will need to run this script as root, otherwise you won’t be able to read or write to the file, even if you are the owner of the process.

Note that this address corresponds to the one we found manually:

If we go back to our program, it should now print “fun w vm!”

If you have questions or feedback don’t hesitate to ping us on Twitter at @holbertonschool or @julienbarbier42.

 Haters, please send your comments to .

As always, no-one is perfect (except Chuck of course), so don’t hesitate to contribute or send me your comments.

This repo contains the source code for all programs shown in this tutorial:

In the next piece we’ll do almost the same thing, but instead we’ll access the memory of a running Python 3 script. It won’t be that straightfoward. We’ll take this as an excuse to look at some Python 3 internals. If you are curious, try to do it yourself, and find out why the above script won’t work to modify a Python 3 ASCII string.

See you next time and Happy Hacking!

Many thanks to Kristine, Tim for English proof-reading & Guillaume for PEP8 proof-reading 🙂|||

