The positional and keyword arguments to the wrapped function must be hashable (i.e. Python's immutable built-in objects, not mutable containers). Also, notice that since objects which are instances of user-defined classes are hashable but all compare unequal (their hash value is their id), equal objects across different sessions will not yield identical keys.

You can add a default, pickle-based, persistent cache to your function - meaning it will last across different Python kernels calling the wrapped function - by decorating it with the decorator (notice the !).

The Cachier wrapper adds a function to each wrapped function. To reset the cache of the wrapped function simply call this method:

You can set any duration as the shelf life of cached return values of a function by providing a corresponding object to the parameter:

Now when a cached value matching the given arguments is found the time of its calculation is checked; if more than time has since passed, the function will be run again for the same arguments and the new value will be cached and returned.

This is useful for lengthy calculations that depend on a dynamic data source.

Sometimes you may want your function to trigger a calculation when it encounters a stale result, but still not wait on it if it's not that critical. In that case, you can set to to have your function trigger a recalculation in a separate thread, but return the currently cached stale value:

Further function calls made while the calculation is being performed will not trigger redundant calculations.

Cachier also accepts several keyword arguments in the calls of the function it wraps rather than in the decorator call, allowing you to modify its behaviour for a specific function call.

You can have ignore any existing cache for a specific function call by passing to the function call. The cache will neither be checked nor updated with the new return value.

You can have overwrite an existing cache entry - if one exists - for a specific function call by passing to the function call. The cache will not be checked but will be updated with the new return value.

You can have print out a detailed explanation of the logic of a specific call by passing to the function call. This can be useful if you are not sure why a certain function result is, or is not, returned.

The default core for Cachier is pickle based, meaning each function will store its cache is a separate pickle file in the directory. Naturally, this kind of cache is both machine-specific and user-specific.

You can slightly optimise pickle-based caching if you know your code will only be used in a single thread environment by setting:

This will prevent reading the cache file on each cache read, speeding things up a bit, while also nullifying inter-thread functionality (the code is still thread safe, but different threads will have different versions of the cache at times, and will sometime make unnecessary function calls).

You can set a MongoDB-based cache by assigning with a callable that returns a object with writing permissions:

This allows you to have a cross-machine, albeit slower, cache. This functionality requires that the installation of the python package.

Package author and current maintainer is Shay Palachy (shay.palachy@gmail.com); You are more than welcome to approach him for help. Contributions are very welcomed.

To run the tests, use:

This project is documented using the numpy docstring conventions, which were chosen as they are perhaps the most widely-spread conventions that are both supported by common tools such as Sphinx and result in human-readable docstrings (in my personal opinion, of course). When documenting code you add to this project, please follow these conventions.

Contributers (in chronological order of first commit):|||

cachier - Persistent, stale-free, local and cross-machine caching for Python functions.