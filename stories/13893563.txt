wttr.in â€” the right way to check the weather.

wttr.in is a console oriented weather forecast service, that supports various information representation methods like terminal oriented ANSI-sequences for console HTTP clients such as curl, httpie or wget; HTML for web browsers; or PNG for graphical viewers. wttr.in uses wego for visualization and various data sources for weather forecast information.

You can check it at wttr.in.

You can access the service from a shell or from a Web browser:

That is how the actual weather report for your location looks like (it is live!):

(it's not your location actually, becasue GitHub's CDN hides your real IP address with its own IP address, but it is still a live weather report in your language).

You can specify the location that you want to get the weather information for. If you omit the location name, you will get the report for your current location, based on your IP address.

You can use 3-letters airport codes if you want to get the weather information about some airports:

If you want to specify a location that is not a city/town's name, but a name of some geographical location (e.g. it can be a site in a city, a mountain name, a special location etc.) you should place before its name. That means the location name should be looked up before:

In this case there is a line below the weather forecast output describing the founded precise position:

You can also use IP-addresses (direct) or domain names (prefixed with @) as a location specificator:

To get detailed information online, you can access the /:help page:

By default the USCS units are used for the queries from the USA and the metric system for the rest of the world. You can override this behavior with the following options:

wttr.in supports three output formats at the moment:

The ANSI and HTML formats are selected basing on the User-Agent string. The PNG format can be forced by adding to the end of the query:

You can use all of the options with the PNG-format like in an URL, but you have to separate them with instead of and :

Special useful options for the PNG format:

Transparency is a useful feature when the weather PNGs are used to add weather data to the pictures:

wttr.in can be used not only to check the weather, but also for some other purposes:

To see the current Moon phase (uses pyphoon as its backend).

To see the Moon phase for the specified date (2016-12-25).

wttr.in supports multilingual locations names: they can be specified in any language in the world (it may be surprising, but many locations in the world do not have any English name at all).

The query string should be specified in Unicode (hex encoded or not). If it contains spaces they must be replaced with +:

The language used for the output (except the location name) does not depend on the input language and it is either English (by default) or the preferred language of the browser (if the query was issued from a browser) that is specified in the query headers ( ).

It can be set explicitly when using console clients by means of the appropriate command line options (for example: or ).

The preferred language can be forced using the option:

The third option is to choose the language using DNS name used in the query:

wttr.in is currently translated in more than 45 languages and the number of supported languages is constantly growing.

See /:translation to learn more about the translation process, to see the list of supported languages and contributors, or to know how you can help to translate wttr.in in your language.

To install you must have golang installed. After that:

If you want to get weather reports as PNG files, install also:

You can install most of them using .

If is used:

(pyte 0.6 is not yet released and it should be installed direct from the source code from its GitHub repository at the moment).

Also, you need to install the geoip2 database. You can use a free database GeoLite2, that can be downloaded from http://dev.maxmind.com/geoip/geoip2/geolite2/

To get the WorldWeatherOnline API key, you must register here:

After you have the key, configure :

The parameter in is ignored.

Configure the following environment variables specifing the path to the local installation, to the GeoLite database and to the installation. For example:

Configure the web server, that will be used to access the service (if you want to use a web frontend; it's recommended):|||

wttr.in - :partly_sunny: The right way to check the weather