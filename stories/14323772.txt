In this post you will learn how to quickly spin up a reproducible development environment with Docker to manage a number of Node.js microservices.

This post assumes prior knowledge of the following topics. Refer to the resources for more info:

By the end of this tutorial, you should be able to…

The end goal of this post is to organize the technologies from the above image into the following containers and services:

Start by cloning the base project and then checking out the first tag:

Before we add Docker, be sure to review the code so that you have a basic understanding of how everything works. Feel free to test these services as well…

Next, add a docker-compose.yml file to the project root. This file is used by Docker Compose to link multiple services together. With one command it will spin up all the containers we need and enable them to communicate with one another (as needed).

With that, let’s get each service going, making sure to test as we go…

We’ll start with the database since the API is dependent on it being up…

Here, we extend the official Postgres image by adding a SQL file to the “docker-entrypoint-initdb.d” directory in the container, which will execute on init.

This config will create a container called , from the Dockerfile found in “services/users/src/db”. (Directories are relative to the docker-compose.yml file.)

Once spun up, environment variables will be added and an exit code of will be sent after it’s successfully up and running. Postgres will be available on port on the host machine and on port for other services.

Take note of the version used - . This does not relate directly to the version of Docker Compose installed; instead, it specifies the file format that you want to use.

Once up, let’s run a quick sanity check. Enter the shell:

Then run to ensure that the proper environment variables are set. You can also check out the “docker-entrypoint-initdb.d” directory:

Turning to the API, add a Dockerfile to “services/users”, making sure to review the comments:

Then add the to the docker-compose.yml file:

Build the image and spin up the container:

Once up, create a new file in the project root called init_db.sh and add the Knex migrate and seed commands:

Then apply the migrations and add the seed:

In both cases you should see a of along with a , i.e. -

You should see:

Check the test specs for more info. That’s it! Let’s move on to the web service…

With our users service up and running, we can turn our attention to the client-side and spin up the React app inside a container to test authentication.

And update the docker-compose.yml file like so:

Build the image and fire up the container:

Open your browser and navigate to http://localhost:3007. You should see the login page:

Once logged in you should see:

Within services/web/src/App.jsx, let’s take a quick look at the AJAX request in the method:

Why do we use rather than the name of the container, ? This request is originating outside the container, on the host. Keep in mind, that if, this request was originating inside the container, we would need to use the container name rather than , since would refer back to the container itself in that situation.

Make sure you can log out and register as well.

Next, let’s spin up the movies service so that end users can save movies to a collection…

Set up for the movies service is nearly the same as the users service. Try this on your own to check your understanding:

The movies database image should take much less time to build than the users database. Why?

With the containers up, let’s test out the endpoints…

Start with opening the browser to http://localhost:3001/movies/ping. You should see ! Try http://localhost:3001/movies/user:

Since you need to be authenticated to access the other routes, let’s test them out by running the integration tests:

You should see:

Check the test specs for more info.

Turn to the docker-compose.yml file. Update the and keys for the :

Let’s test this out in the browser! Open http://localhost:3007/. Register a new user and then add some movies to the collection.

Be sure to view the collection as well:

Open services/movies/src/routes/_helpers.js and take note of the method:

Why does the uri point to and not ?

Start by checking out the Workflow section from Developing and Testing Microservices With Docker. Experiment with live reloading on a code change and debugging a running container with .

Run the logs - - and then make a change to one of the components that breaks compilation:

Continue to experiment with adding and updating the React app until you feel comfortable working with it inside the container.

Thus far we’ve only tested each individual microservice with unit and integration tests. Let’s turn our attention to functional, end-to-end tests to test the entire system. For this, we’ll use TestCafe.

You should see:

To simplify the test workflow, add a test.sh file to the project root:

Navigate to http://localhost:3003/docs and test it out:

Now you just need to incorporate support for JWT-based auth and add the remaining endpoints!

Grab the final code from the microservice-movies repo. Please add questions and/or comments below. There’s slides too! Check them out here, if interested.|||

This tutorial details how to quickly spin up a reproducible development environment with Docker to manage a number of Node.js microservices.