To bring you the latest from the web and tried-and-true hosting, recommended for designers and developers.

This article is part of a series created in partnership with SiteGround. Thank you for supporting the partners who make SitePoint possible.

67% of webpages now use custom fonts. However, popularity and widespread adoption didn’t come without some performance and user experience-related issues.

In this article, I’ll go through what’s not so good about the way web fonts are commonly used and loaded, as well as point you to well-tested workarounds and future standards-based solutions.

Users come to your website for content. Therefore, great typography is crucial on the web: readability, legibility and well-crafted typographic design are a must for brand recognition and the success of your message.

The best way to achieve beautiful typography is by loading custom web fonts — that is, font files that are not already installed on users’ devices.

Since browser support of the CSS rule has become widespread, using custom web fonts in websites has increased by leaps and bounds. However, fonts can have a heavy file size and loading extra resources on your website doesn’t come without some negative impact on performance.

Since file size can certainly be an issue, paying attention to how custom web fonts are loaded comes to the forefront.

The most common way of using a custom web font is to specify the fonts used inside a CSS declaration and leave the browser to its default behavior. This is not ideal. Since information about fonts is located in the CSS, by default browsers delay the loading of fonts until the CSS is parsed. That’s not all. As Zach Leatherman has made abundantly clear, to trigger a font download, a number of conditions must be met besides a valid declaration:

If all the points above are satisfied, the browser starts downloading the font. This means that the browser needs to have parsed not only the CSS code but also a website’s text content before it can trigger a font’s download. However, it’s just when the font starts loading that web users are likely to experience the dreaded Flash Of Invisible Text, or FOIT for short.

In other words, as soon as browsers start downloading a font, all text becomes invisible. So users look at a screen with no text for some time, which under sub-par network conditions can feel like forever. Furthermore, the way different browsers handle FOIT also varies:

Although having a sudden change in typeface when reading text on a website is not the best user experience, staring at a blank screen while the font is loading sounds much worse. Ideally, a working approach should overcome both FOUT and FOIT. However, although it’s an open issue, there is some consensus among a number of experts that FOUT is way better than FOIT.

Tackling the issues related to loading fonts involves working both on optimizing the file size and taking control of the default browser behavior so as to eliminate FOIT and minimizing the jarring impact of FOUT.

Let’s look closer into each task one at a time.

There are a few steps you can take to make sure your font files are not super heavy.

Don’t think that just because you can choose from tons of beautiful typefaces, you need to weigh down your website with a multitude of different fonts. The opposite is the case.

In most situations, a couple of judiciously paired typefaces can work wonders for your design and have a lighter impact on website performance.

There are four main font formats:

Although you could specify all of them in your declaration, you can get away with just two of them. Here’s how:

The first format you suggest to the browser is woff2, which gives you the advantage of extra compression. If your browser doesn’t support woff2, it just selects woff, which has good compression and enjoys support by the latest versions of all major browsers. Only Opera Mini lacks support for it, together with IE8 and older Android Mobile browsers. If you use a progressive enhancement approach to web development, you could simply let these older browsers fall back on a system font, e.g., Arial, Verdana, etc.

Fonts usually have different variants, e.g., italic, bold, etc. Each font variation adds weight to the file size, therefore try to avoid adding a font variation to your code if you are not going to use it on your website. Keep in mind that if you use an tag to add an icon, which is quite common, that is enough to get the browser to load the italic font variant (Slide 77 in Zack Leatherman’s Santa Clara Velocity talk of 2015). If that is the only instance of in your page, using a tag for the icon or setting the for the element to instead would spare the browser from having to download unnecessary resources.

Avoid loading all the characters, numbers and symbols your chosen font makes available. Instead, select just the character sets you actually use on your webpage.

You can learn everything about fonts subsetting in Slash Page Load Times With CSS Font Subsetting by Dudley Storey.

What follows offers a few alternatives available today to deal with FOIT. I’ve singled out the simplest approaches to implement among effective and recommended practices. However, you can learn about far more sophisticated ones in Zach Leatherman’s A Comprehensive Guide to Font Loading Strategies.

If you can’t stand the idea of your users staring at invisible text or at font-swapping shifts, the most simple option is to give up on custom fonts and rely solely on web-safe fonts.

These fonts are preinstalled on users’ devices, so the browser does not need to load them. Even when deciding to use custom fonts, web safe fonts are commonly added to the font stack as a fallback.

Giving up on the perfect custom font for your design is not an exciting approach, but it’s perfectly viable — especially if you consider this as a transitory stance until cutting edge solutions, which are already on the horizon, gain wide browser support.

Opting for this approach doesn’t require you to use . You just add your font stack to the CSS property. Here is how you could do this today:

You can read more about the modern font stack on The New System Font Stack? by Aderinokun.

One long-standing solution is the Web Font Loader, a JavaScript library developed by Google and Typekit, which works with fonts coming from multiple sources, e.g., Google Fonts, Typekit, your self-hosted font files, etc.

The Web Font Loader loads custom fonts as a background process while displaying fallback fonts to users, thereby avoiding FOIT. You can set a time limit of your choice within which the font must load. If the request exceeds this limit users will only see the text styled with a fallback font. Once the custom font is loaded, the script swaps the fallback font on the page with the custom font.

Here are two awesome tutorials to learn how to use the Web Font Loader:

The CSS Font Loading API is a standards-based way of loading and taking control of web fonts.

The overall recommended approach remains that of avoiding FOIT and managing FOUT as best as possible. This API can keep track of every stage of font loading. You can use this information to style text using web safe fonts while fonts are not available and style text using custom fonts once these are fully loaded.

At the time of writing, the latest versions of Chrome, Firefox, Safari and Opera support this API, while IE/Edge doesn’t offer support yet. However, you can use a small JavaScript library, the Font Face Observer, to polyfill the native CSS Font Loading API, or simply let non supporting browsers degrade gracefully to web-safe fonts.

For a short tutorial on how to use the CSS Font Loading API, head over to Getting started with CSS Font Loading by Manuel Matuzovic and have a look at his CodePen demo.

Since their first appearance, you’ve handled custom fonts using CSS and . It’s only fair to expect CSS to solve any issue related to downloading custom fonts. At present, only JavaScript-based solution are usable.

However, this won’t be so indefinitely. A smart CSS property is around the corner, , which is part of the CSS Font Rendering Controls Module Level 1.

Here’s what this property looks like in code:

Accepted values for this property are:

From these short descriptions, you can already see how and could be super useful.

Browser support for is non-existent at this time, but it can be enabled in Chrome (via the Experimental Web Platform features” flag) and Firefox (via the flag).

Although all the approaches outlined above make possible the elimination of FOIT, either by swapping in the custom font at a later time or by displaying just the fallback font, they can do little against FOUT.

Although FOUT makes text still available to users, it can very well be annoying, especially when the fallback font is wider and/or higher than the custom font it is temporarily replacing, which often causes a shift in the page content.

You can mitigate the jarring effect of the swap by adjusting the fallback font’s x-height and width so as to match the desired custom font’s x-height and width as closely as possible.

You can do this in a number of ways, but I find this little Font Style Matcher tool by Monica Dinculescu really helpful.

In this article I’ve outlined the issues of file size and Flash of Invisible Text related to using custom fonts on websites.

I’ve presented the latest approaches and pointed you to further resources where you can read more and learn how to implement those techniques in your projects.

Which font loading technique do you use in your work? Leave a comment to share.|||

Maria Antonietta Perna digs into performance issues when loading custom web fonts. She discusses file size and FOIT and shows some cutting-edge solutions.