wasm-init abstracts the WebAssembly setup and compile process and aims to dramatically simplify the development workflow. 





This package requires that you have Emscripten installed on your machine. You can get it like so:

The best way to install this module is via . 





At the heart of wasm-init is the wasm.config.js file, which takes Emscripten's compile process and breaks it down into configurable elements. To compile C++ to WASM with Emscripten, you need at bare minimum the following properties:

is the relative path to the emsdk directory, from your project folder. (In the above case, we would expect Emscripten to be located in the same parent-directory as the project.) 

 



These scripts make the module's functionality accessible. Be aware that will create several files and folders inside your project directory. This is your fastest route to a working project setup, however, you can also set up all the files manually, if you so desire. 

 



The best way to a custom setup is to start with just the wasm.config.js file (you can generate it with ), and enter the emcc_path, inputfiles, outputfile, and flags according to your needs. When you run , it will generate those files for you.

To compile, simply use , which will take your C++ code and output a JavaScript file with Emscripten bindings, as well as the sought after .wasm file. To take advantage of wasm-init's easy loading mechanism for WebAssembly modules, you will need the wrapper file loadWASM.js. The wasm module is from there returned by a promise. Making the module accessible to your application is as easy as the following:

When you want to export individual functions from C++ to WASM, you can do this with the exported_functions property in wasm.config.js:

It is required to prepend the C++ function names with an underscore!, 





 If you are on board with wasm-init's automation, the quickest road to success would be: (modify path accordingly). This will set Emscripten's file path in the wasm.config.js file automatically. This will also install and compile all necessary files, including a server.js, index.js and index.html file, that are already setup to include WASM in the browser. 

 (Executing will overwrite any files that may already be there, as does ! ).

If you now run your browser (either manually or with gulp), and go to localhost:3000, open up the console, and you should see the message from the C++ file printed. 





The following flags for are usable: 





- builds files according to instructions in wasm.config.js

Note, that this will install the gulp and browser-sync packages automatically. This will also generate a gulpfile.js file, which is already setup to work with the template code.

will delete the autogenerated files, except wasm.config.js .

will delete all autogenerated files. Please use it carefully!|||

wasm-init - Build tool and template generator for WebAssembly Projects