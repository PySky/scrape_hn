Remember your roles. Every pair has to find their own way of working together, but conventionally, one person types and attempts to implement the current feature (the driver), and the other thinks more strategically about the overall direction (the navigator). Switch roles frequently, at least every every 30–40 mins.

Be a good navigator. As the navigator, it’s your job to spot possible problems the driver hasn’t considered: Are any tests missing? Is there pre-existing code that does this? Do you have a simpler approach? You are also the guardian of quality. It takes courage to be strong and gently insist on quality when your pair, in a moment of weakness, wants to skip that test, or cut that corner.

Be fully engaged. Pairing is not easy: it takes effort and discipline. Both partners have a responsibility to commit fully to producing quality code. That means not slacking off and checking twitter or email, or browsing on your phone. Stay focused on the problem in hand.

Minimise unhelpful interruptions. Every interruption breaks your flow, and it takes time to recover. Turn off, move, burn or otherwise destroy anything that will take you out of this flow (email, alerts, flashing lights, sounds). If you worry about missing important messages, set a single, physical reminder (e.g. an egg timer) to stop to check them. Not all interruptions are bad, though — see Local vs Global speed below.

Agree on Coding Standards. Consistent styling makes it easy for anyone on the team easily dive in and work on any code. Don’t waste time and energy arguing over where to put curly braces. Agree on an explicit style guide that enshrines style and formatting decisions (e.g. ruby style guide), then get back to solving the problems that matter. Even better, hook-up automated style-checkers to your project (Hound CI by thoughtbot, Rubocop et al.)

Don’t rush. Think you need to be a rockstar developer, tapping maniacally at the keyboard in a cloud of dust, cranking out solutions in seconds? Most of us mere mortals would produce a pile of gibberish if we worked like that. Programming is not about how fast you can type, it’s about thinking through complex problems. Better to go slowly and do the right things, than rush ahead doing the wrong things. Practice makes permanent so cultivate good habits, and trust that speed will naturally come over time.

Think out loud. What idea are you considering? Why will one approach work better than another? Verbalising your thoughts not only lets your pair know what’s going on in your mind and gives them an opportunity to assist, but it actually helps you solve your own problems too (see Rubber Duck Debugging.)

Take regular breaks. Pairing is intense: exhilarating, but draining too. If you notice your energy flagging, suggest a break. You can stop for the latest hipster, artisanal coffee, a chat with the team, or simply a breath of fresh air — stand up and get a change of scene. Your mind will continue working on problems in the background, so you come back fresh with new insights.

Switch pairs frequently. Pairing helps to dissemimate knowledge throughout the team, whether that’s unique knowledge about the system (preventing bus factor problems) or deep-technical expertise. You can learn something from everyone: it’s incredibly insightful to see how someone else approaches a problem, the commands they use, even just their attitude. You won’t believe how many times you’ll have “I can’t believe I never knew about that” moments.

Write automated tests. Nothing builds confidence in your system like a suite of tests that check it works as it’s supposed to. When pairing, everyone has to be on board with writing tests. There’s been some controversy about how to go about it (and some healing). Test-first, test-after, or some other approach: you have to figure out what works for your team.

Try Ping-Pong Pairing. One person implements the test and the other then has to get it passing. Switch roles. Rinse and Repeat. This can be fun, and builds a nice rhythm to pairing.

Get plenty of sleep. Pair programming is learning on steroids. Sleep is the mechanism by which we digest and organize the flood of new information going into our brains. Too little and concentration, and decision-making suffer — not how you want to be programming. A former pairing partner used to dream he was an object being passed around the system.

Have fun. Pairing doesn’t have to be serious. It’s ok to lighten the mood with jokes or novel ways to gamify the process of programming. Your creativity and capacity for fun is the limit. Laughter and humour (especially if it’s related to the work you’re doing) have been shown to aid learning. Just make sure it’s not a work avoidance strategy.

Embrace diversity. Each of us has a unique, personal history. The more diverse our team, the more interesting perspectives we bring to bear on a problem. Enjoy people’s individuality. Celebrate their differences. This helps us overcome our innate biases.|||

That was 14th April 2008, my first ever experience of pair programming, and not coincidentally, my first day at New Bamboo (now part of thoughtbot). Since that day, almost 7 years ago, I’ve spent a…