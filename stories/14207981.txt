Does Go have `undefined behaviour` ? In reading about C/C++ and its compilers, a common complaint is the 

liberal use of the words `undefined behavior ` in the relevant 

specifications. The concept of undefined behavior is simultaneously 

reviled by those debugging C/C++ applications, and very important to 

optimizing compiler writers. Some references even claim that this term 

is overused in the current specifications, implying that the authors 

were somewhat lax in their job. 

 

The term `undefined behavior` or even `undefined` appears nowhere in 

the Go spec (either 1.0 or tip), which I interpret to be a good thing. 

 

My questions are: 

 

* does the lack of documented undefined behavior improve the safety of 

Go as a language (assuming a conforming compiler and runtime) ? 

 

* what trade offs, possibly in performance, or compiler speed or 

design, were necessary to avoid undefined behavior in Go programs ? 

 

Cheers 

 

Dave 



Re: [go-nuts] Does Go have `undefined behaviour` ? In the section, Order of evaluation there is an item that is undefined (not specified). When evaluating the operands of an expression, assignment, or return statement, all function calls, method calls, and communication operations are evaluated in lexical left-to-right order. For example, in the assignment the function calls and communication happen in the order  ,  ,  ,  ,  ,  , and  . However, the order of those events compared to the evaluation and indexing of   and the evaluation of   is not specified. a := 1 f := func() int { a = 2; return 3 } x := []int{a, f()} // x may be [1, 3] or [2, 3]: evaluation order between a and f() is not specified Floating-point operations within a single expression are evaluated according to the associativity of the operators. Explicit parentheses affect the evaluation by overriding the default associativity. In the expression   the addition   is performed before adding  . Also, I was justing reading a bug report today that showed that the temporal position of range checking is not defined [1]. [1] Apologies for html. Not at desk.

Re: [go-nuts] Does Go have `undefined behaviour` ? 

 I thought that was the idea. If people can predict the behavior, they

 will write code that assumes it. Maps deliberately randomise iteration

 order to enforce this concept. Good point. I suppose this highlights the need for a SortedMap and PrioritySelect in the standard library for people like me who want non-random behaviour :-)

 

 Good point. I suppose this highlights the need for a SortedMap and PrioritySelect in the standard library for people like me who want non-random behaviour :-)

Re: [go-nuts] Does Go have `undefined behaviour` ? On Wed, Jan 23, 2013 at 11:00 AM, Dave Cheney <da...@cheney.net> wrote: 

> In reading about C/C++ and its compilers, a common complaint is the 

> liberal use of the words `undefined behavior ` in the relevant 

> specifications. The concept of undefined behavior is simultaneously 

> reviled by those debugging C/C++ applications, and very important to 

> optimizing compiler writers. Some references even claim that this term 

> is overused in the current specifications, implying that the authors 

> were somewhat lax in their job. 

> 

> The term `undefined behavior` or even `undefined` appears nowhere in 

> the Go spec (either 1.0 or tip), which I interpret to be a good thing. 

> 

> My questions are: 

> 

> * does the lack of documented undefined behavior improve the safety of 

> Go as a language (assuming a conforming compiler and runtime) ? 

 

 Somewhat. Even though a C implementation can choose any behavior when 

it encounters a NULL dereference, one that causes demons to fly out of 

your nose instead of crashing would probably not be very widely used. 

Most of the places where go defines behavior that is undefined in C, 

it defines it to what you'd expect a reasonable C implementation to 

do. 

 

> 

> * what trade offs, possibly in performance, or compiler speed or 

> design, were necessary to avoid undefined behavior in Go programs ? 

 

 The biggest one is probably the range check on indexes. For index 

heavy programs, that can hurt performance quite a bit. 

 

> 

> Cheers 

> 

> Dave 

> 

> -- 

> 

> 

 Somewhat. Even though a C implementation can choose any behavior whenit encounters a NULL dereference, one that causes demons to fly out ofyour nose instead of crashing would probably not be very widely used.Most of the places where go defines behavior that is undefined in C,it defines it to what you'd expect a reasonable C implementation todo.The biggest one is probably the range check on indexes. For indexheavy programs, that can hurt performance quite a bit.> Cheers> Dave> --

Re: [go-nuts] Does Go have `undefined behaviour` ? On Wed, Jan 23, 2013 at 2:19 AM, Rémy Oudompheng 

<remyoud...@gmail.com> wrote: 

> The conversion of float64 to uint8 has undefined behaviour for values 

> outside (0, 255) and is a frequent source of annoyance. 

 

 In standardese "undefined behaviour" is a term of art.  It explicitly 

means that if the undefined part of the program is executed, anything 

at all may happen.  What that means in practice is that the compiler 

may transform a program that uses undefined behaviour into something 

completely unexpected and in fact unpredictable.  It's difficult to 

overemphasize how strange this can get.  For example, this function in 

C 

    int f(int x) { return 0x7ffffff0 < x && x + 32 < 0x7fffffff; } 

while seemingly meaningful, relies on the specific behaviour of signed 

overflow, which is undefined in C/C++.  GCC will compile this into a 

function that always returns 0.  For a more exotic example, while I 

don't have a complete function on hand, I've seen cases where "if (x) 

A; else B;" were compiled to execute neither A nor B when x was a C++ 

bool variable that held a value other than true or false.  That kind 

of thing seems impossible to non-compiler writers. 

 

Anyhow, all that is simply to say that the conversion of float64 to 

uint8 in Go is not undefined behaviour.  It is implementation defined 

behaviour, which is very different and much more controlled. 

Implementation defined behaviour means that the program always behaves 

normally, but the specific value that you get may differ in different 

implementations.  That is not the same as undefined behaviour where 

quite literally anything can happen. 

 

Go has much less undefined behaviour than C/C++.  That is a deliberate 

choice.  Pretty much all cases that are undefined in C/C++ are fully 

specified or implementation defined in Go.  However, Go does have 

undefined behaviour: if your program has a race condition, the 

behaviour is undefined.  If you have a race condition you can see 

inconsistent and seemingly impossible states in your program. 

 

Ian 

 

 

> 2013/1/23, Dave Cheney <da...@cheney.net>: 

>> In reading about C/C++ and its compilers, a common complaint is the 

>> liberal use of the words `undefined behavior ` in the relevant 

>> specifications. The concept of undefined behavior is simultaneously 

>> reviled by those debugging C/C++ applications, and very important to 

>> optimizing compiler writers. Some references even claim that this term 

>> is overused in the current specifications, implying that the authors 

>> were somewhat lax in their job. 

>> 

>> The term `undefined behavior` or even `undefined` appears nowhere in 

>> the Go spec (either 1.0 or tip), which I interpret to be a good thing. 

>> 

>> My questions are: 

>> 

>> * does the lack of documented undefined behavior improve the safety of 

>> Go as a language (assuming a conforming compiler and runtime) ? 

>> 

>> * what trade offs, possibly in performance, or compiler speed or 

>> design, were necessary to avoid undefined behavior in Go programs ? 

>> 

>> Cheers 

>> 

>> Dave 

>> 

>> -- 

>> 

>> 

>> 

> 

 > -- 

> 

> 

 In standardese "undefined behaviour" is a term of art.  It explicitlymeans that if the undefined part of the program is executed, anythingat all may happen.  What that means in practice is that the compilermay transform a program that uses undefined behaviour into somethingcompletely unexpected and in fact unpredictable.  It's difficult tooveremphasize how strange this can get.  For example, this function inint f(int x) { return 0x7ffffff0 < x && x + 32 < 0x7fffffff; }while seemingly meaningful, relies on the specific behaviour of signedoverflow, which is undefined in C/C++.  GCC will compile this into afunction that always returns 0.  For a more exotic example, while Idon't have a complete function on hand, I've seen cases where "if (x)A; else B;" were compiled to execute neither A nor B when x was a C++bool variable that held a value other than true or false.  That kindof thing seems impossible to non-compiler writers.Anyhow, all that is simply to say that the conversion of float64 touint8 in Go is not undefined behaviour.  It is implementation definedbehaviour, which is very different and much more controlled.Implementation defined behaviour means that the program always behavesnormally, but the specific value that you get may differ in differentimplementations.  That is not the same as undefined behaviour wherequite literally anything can happen.Go has much less undefined behaviour than C/C++.  That is a deliberatechoice.  Pretty much all cases that are undefined in C/C++ are fullyspecified or implementation defined in Go.  However, Go does haveundefined behaviour: if your program has a race condition, thebehaviour is undefined.  If you have a race condition you can seeinconsistent and seemingly impossible states in your program.Ian> --

Re: [go-nuts] Does Go have `undefined behaviour` ? On Wed, Jan 23, 2013 at 2:00 AM, Dave Cheney <da...@cheney.net> wrote: 

> 

> * what trade offs, possibly in performance, or compiler speed or 

> design, were necessary to avoid undefined behavior in Go programs ? 

 

 The ones that come to mind are: 

 

* Signed integers wrap on overflow, which reduces the scope of loop 

optimizations. 

 

* Out of bounds accesses on arrays panic in a controlled way, 

requiring explicit runtime checks. 

 

* Nil pointer references panic in a controlled way, requiring explicit 

nil pointer checks in some cases, such as when dereferencing a pointer 

to a very large struct. 

 

* Signed integer division of the minimum integer by -1 is well 

defined, requiring explicit checks on x86 to avoid a processor 

exception. 

 

* Shifts by large values are well defined, requiring runtime checks on 

the shift amount. 

 

Ian 

 The ones that come to mind are:* Signed integers wrap on overflow, which reduces the scope of loopoptimizations.* Out of bounds accesses on arrays panic in a controlled way,requiring explicit runtime checks.* Nil pointer references panic in a controlled way, requiring explicitnil pointer checks in some cases, such as when dereferencing a pointerto a very large struct.* Signed integer division of the minimum integer by -1 is welldefined, requiring explicit checks on x86 to avoid a processorexception.* Shifts by large values are well defined, requiring runtime checks onthe shift amount.Ian|||

