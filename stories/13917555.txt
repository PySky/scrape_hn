This is the editorial for the SitePoint Java Channel newsletter that we send out every other Friday. Subscribe here!

Earlier this week Brian Goetz, Java Language Architect at Oracle, officially announced Project Amber and I could not be more excited about it! It will continue what Java 8 began and make Java a much less verbose and even more fun language. Type inference, massively simplified data classes, pattern matching, ‚Ä¶ all of this has been bubbling up in recent months but it is great to see it put on official tracks.

I‚Äôm sure you can‚Äôt wait to see those improvements I promised, so let‚Äôs do that first. Once we‚Äôve explored them I will spend a few words on Project Amber and release date speculations.

(If you‚Äôre interested to see how these proposals and value types might play together, have a look at What Future Java Might Look Like).

Java has done type inference since Java 5 (for type witnesses in generic methods) and the mechanism was extended in Java 7 (diamond operator), 8 (lambda parameter types), and 9 (diamond on anonymous classes). Under Project Amber it is planned to be extended to type declarations of local (!) variables:

Here, the types of , , and are perfectly obvious. As a consequence the compiler can infer them, making it unnecessary for us to specify them.

Note that type inference is not dynamic typing ‚Äì it‚Äôs still strong typing just with less typing (Brian‚Äôs pun, presumably intended). The type information will still end up in the bytecode and IDEs will also be able to show them ‚Äì it‚Äôs just that we don‚Äôt have to write it out anymore.

For more information, have a look at JEP 286.

As it stands, enums can not be generic, meaning you can not give individual enum instances fields of specific types:

Project Amber considers to let enums have type parameters:

And the great thing is, the compiler will perform sharp type checking and know which generic types a specific enum instance has:

For more information, have a look at JEP 301.

Great name, eh? These are a couple of smaller improvements to lambda expressions and method references. The first is that the compiler will be better at picking the target for a lambda expression or method reference in situations where it has to pick one of several overloads:

It is weird that the compiler thinks this is ambiguous because to us it very much isn‚Äôt. When lambda leftovers are implemented, the compiler agrees.

Java 8 deprecated as variable name and disallowed it as a lambda parameter name. Java 9 will disallow using it as variable names as well so it is free to get a special meaning, namely to mark unused lambda parameters (yes, more than one in the same expression):

Finally, Project Amber explores the possibility to let lambda parameters shadow variables in the enclosing scope. This would make naming them a little easier because as it stands it can be a little onerous:

For more information, have a look at JEP 302.

We‚Äôve all created plenty of simple data holder classes that needed dozens of lines of code for fields, constructor, accessors, , , . While IDEs happily generate all of that, making typing it unnecessary even today, it is still code that needs to be understood (does the constructor do any validation?) and maintained (better not forget to add that new field to equals).

In an aggressive move to reduce boilerplate, the compiler might generate all of that stuff on the fly without us having to bend a finger!

We can get everything else I mentioned above for free and only need to actually implement what‚Äôs non-standard (maybe users have an ID that alone determines equality, so we‚Äôd want an according implementation). Getting rid of all that code would be a great boost for maintainability!

Java‚Äôs current statement is pretty weak. You can use it for primitives, enums and strings but that‚Äôs it. If you want to do anything more complex, you either resort to ‚Äì ‚Äì chains or, if you can‚Äôt get the Gang of Four book out of your head, the visitor pattern.

Project Amber explores what is commonly known as pattern matching. It works over all types, can have conditions that are more complex than equality checks, and is an expression, meaning it results in a value that can be assigned. Here‚Äôs an example Brian showed at Devoxx Belgium a few months ago:

Now that we know which features are currently being explored as part of Project Amber, it is time to take a closer look at the project itself. In the welcome mail it is described is an ‚Äúincubation ground for selected productivity-oriented Java language JEPs.‚Äù Loosely said, its scope is defined as whatever JEP the expert group finds interesting and aligns with the overall mission statement:

Read that mail to get links to JEPs, mailing lists, and the repo.

A natural question to have is, when will the project be shipped? When can you start writing that awesome code I keep promising? The most responsible answer is that nobody knows.

Leaving responsibility aside, we can speculate a little. Project Lambda, which brought lambda expressions and streams, took a little more than four years from inception in December 2009 to its debuting release in March 2014. Project Jigsaw, notorious for its delays, started a year earlier, in December 2008, and is only being shipped now, making it take almost nine years. Keep in mind, though, that Oracle bought Sun in 2010 and I can only assume that engineering efforts were adversely affected by the transition. Also, it seems to me that both projects are considerably more complex and monolithic than Amber (although both is hard to judge from the outside).

Project Amber is more of a roof for various changes that move the language into a common direction but might not have to be shipped at once to make sense. Under this assumption and guessing the project‚Äôs development time based on Lambda and Jigsaw, it seems plausible that some changes will make it into Java 10.

Before you ask: Nobody knows when 10 will be out! Again some speculation, back in 2012 Mark Reinhold, Chief Architect of the Java Platform Group, proposed a two-year release cycle that due to delays became more of a three-year cycle. Extrapolating the future from two data points (luckily I am not bound to scientific standards here), 2020 looks like a good guess.

Keep in mind, though, that Project Valhalla started in July 2014 and took on the massive undertaking to implement generic specialization and value types. It is not targeted for any release yet but it looks like it‚Äôs in the time frame to go into 10. If so, it could very well delay the release due to its complexity.

So bottom line is: Nobody knows. If I had to bet money I would put it on 2020. Fingers crossed.

Oh yeah, why is it called Project Amber? Because it‚Äôs shiny? Because it preserves dead things? I don‚Äôt know.

Instead of spending needless cycles thinking about it I opted to ask Brian himself but he was either very secretive or very open:

He made a proposal, though, that we come up with an explanation, so why not?

So here‚Äôs the deal: You leave a comment or tweet (don‚Äôt forget to mention me) with your explanation why it might be called Project Amber and I will let Brian and his team choose the one they like best (deadline: March 26th). To make this a real competition, the winner gets a copy of my upcoming book about the Java 9 module system.

So what do you think? Why Amber?

Thank you everybody for your participation. Your ideas:

‚Ä¶ Kwakeroni (hand-picked by Brian Goetz himself) with:

Congratulations! üòÄ On your great detective skills as well as the price. While the explanation is definitely intriguing, Brian has another one:

So now we know why the project revolutionizing Java is called Amber‚Ä¶.|||

Project Amber is the roof under which several productivity-oriented Java language JEPs like more type inference and pattern matching are developed.