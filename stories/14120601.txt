The short answer is that once you have some commits, you want to them, using the long form of : . To find out how to identify each of these, see the (very) long answer below. (Unfortunately, it got a bit out of hand and I do not have time to shorten it.)

The problem you have here is that in Git, branches don't have a "starting point"—at least, not in any useful way.

The first issue here is that, in Git, the word "branch" has at least two distinct meanings. Usually, when we talk loosely about "the branch", it's clear from context whether we mean the branch name—the thing that's a word like or or —or the thing that I call "branch ancestry" or "branch structure", or more informally, a "DAGlet".1 See also What exactly do we mean by "branch"?

In this particular case, unfortunately, you mean both of these, at the same time.

1The term DAG is short for Directed Acyclic Graph, which is what the commit graph is: a set of vertices or nodes, and directional (from child to parent) edges, such that there are no cycles through the directed edges from any node back to itself. To this I simply add the "-let" diminutive suffix. The resulting word has a happy resemblance to the word aglet, plus a certain assonance with the word "dagger", making it sound slightly dangerous: "Is this a DAGlet which I see before me?"

Whenever you need to grapple with these issues, it helps to draw a graph of what you have now, or at least some useful subset of what you have now. There are of course many ways to draw this (see that linked question for several options, including some bad ones :-) ), but in plain text in a StackOverflow answer, I generally draw them like this:

The round nodes represent commits, and the branch names and point to one specific tip commit on each branch.

In Git, every commit points back to its parent commit(s), and this is how Git forms branch structures. By "branch structures", I mean here particular subsets of the overall ancestry part of the graph, or what I call the DAGlets. The name points to the tip-most commit of the branch, and that commit points back (leftward) to another commit that is the previous commit on the branch, and that commit points leftward again, and so on.

When we need to talk about specific commits within this graph, we can use their actual names, which are the big ugly 40-character hashes that identify each Git object. Those are really clumsy though, so what I do here is replace the little round s with uppercase letters:

and now it's easy to say, e.g., that the name points to commit , and points to , and points to , which points back to more history that we don't really care about and hence just left as .

Now, it's perfectly obvious, to you and me, based on this graph drawing, that branch , whose tip commit is , starts at commit . But it's not obvious to Git—and if we draw the same graph a little differently, it may be less obvious to you and me too. For instance, look at this drawing:

Obviously branch has just the one commit and the main line is , right? But let's put some letters in:

and then move down a line:

and then look what happens if we move down to the main line, and realize that is and is ? Which branch is commit on after all?

Git's answer to this dilemma is that commits and are on both branches. The beginning of branch is way off to the left, in the part. But so is the beginning of branch . As far as Git is concerned, a branch "starts" at whatever root commit(s) it can find in the graph.

This is important to keep in mind in general. Git has no real concept of where a branch "started", so we wind up having to give it extra information. Sometimes that information is implied, and sometimes it is explicit. It's also important, in general, to remember that commits are often on many branches—so instead of specifying branches, we usually specify commits.

We just often use branch names to do this. But if we give Git just a branch name, and tell it to find all the ancestors of the tip commit of that branch, Git goes all the way back in history.

In your case, if you write the name and ask Git to select that commit and its ancestors, you get commits (which you wanted) and commit , and commit , and so on (which you didn't). The trick, then, is to somehow identify which commits you don't want, along with which commits you do.

With most Git commands, when we want to select some particular DAGlet, we use the two-dot syntax described in gitrevisions, such as . Most2 Git commands that work on multiple commits treat this as: "Select all commits starting from the tip of the branch, but then subtract from that set, the set of all commits starting from the tip of the branch." Look back at our graph drawing of and : this says "do take commits starting from and working backwards"—which gets us too many, since it includes commits and and earlier—"but exclude commits starting from and working backwards." It's that exclude part that gets us what we want.

Hence, writing is how we name commits , and have Git compute that automatically for us, without having to first sit down and draw out a big chunk of the graph.

2Two notable exceptions are , which is in its own section just below, and . The command treats as simply meaning , i.e., it effectively just ignores the two dots entirely. Note that this has a very different effect than set subtraction: in our case, simply diffs the tree for commit against the tree for commit , even though never has commit in the first set.

In other words, mathematically speaking, is normally , where the function includes the specified commit, i.e., is testing ≤ rather than just <. Note that does not include commit at all. The set subtraction operation simply ignores the presence of in the set . But when you feed this to , it does not ignore : it does not diff, say, against . While that might be a reasonable thing to do, instead steals the three-dot syntax to accomplish this.

The command is almost always used to move3 one of these DAGlet commit-subsets from one point in the graph to another. In fact, that's what rebase is, or was originally anyway, defined to do. (Now it has a fancy interactive rebase mode, which does this and a bunch more history editing operations. Mercurial has a similar command, , with a slightly better name, and much tighter default semantics.4)

Since we always (or almost always) want to move a DAGlet, builds in this subset selection for us. And, since we always (or almost always) want to move the DAGlet to come just after the tip of some other branch, defaults to choosing the target (or ) commit using a branch name, and then uses that same branch name in the syntax.5

3Technically, actually copies commits, rather than moving them. It has to, because commits are immutable, like all Git's internal objects. The true name, the SHA-1 hash, of a commit is a checksum of the bits making up the commit, so any time you change anything—including something as simple as the parent ID—you have to make a new, slightly-different, commit.

4In Mercurial, quite unlike Git, branches really do have starting points, and—more important for —commits record their phase: secret, draft, or published. History editing readily applies to secret or draft-phase commits, and not so much to published commits. This is true of Git as well, but since Git has no concept of commit phases, Git's rebase must use these other techniques.

5Technically the and arguments can just be raw commit IDs. Note that works just fine as a range selector, and you can rebase to place the new commits after commit . The only place that truly needs a branch name is for the name of the current branch, which it normally just reads from anyway. However, we usually want to use a name, so that's how I describe it all here.

That is, if we're currently on branch , and in this situation that we drew before:

we probably just want to move the chain onto the tip of , to get this:

Because this is what we usually want, will do this automatically if we just name the other branch. That is, we're on now:

and we want to rebase commits that are on branch and are not on , moving them to the tip of . We might express this as , but then we would have to type the word twice (such a dreadful fate). So instead, Git's infers this when we just type in:

The name becomes the left side of the two-dot DAGlet selector, and the name also becomes the target of the rebase; and Git then rebases onto . Git gets our branch's name, , by reading out the current branch name. In fact, it uses a shortcut, which is that when you need the current branch name, you can normally just write instead. So and mean the same thing, because is .

Git's calls this name the . That is, when we say , Git claims, in the documentation, that is the argument to . The rebase command then operates on commits in , copying them after whatever commit is in .

This is going to become a problem for us soon, but for now, just make note of it.

In case the other answer gets deleted, or becomes one of several other answers, I'll summarize it here as "use to move the branch label." The flaw in the other answer—and, perhaps more importantly, precisely when it's a problem—becomes obvious once we draw our graph DAGlets.

Let's take a look at what happens when you run . This asks Git to root around in the current graph for the given starting-point, and make the new branch label point to that specific commit. (I know I said above that branches don't have a starting point. This is still mostly true: we're giving the command a starting point now, but Git is about to set it and then, crucially, forget it.) Let's say that is another branch name, and let's draw a whole bunch of branches:

Since we have four branch names, we have four branch tips: four branch-tip commits, identified by the names through . We pick one and make a new branch name that points to the same commit as one of these four. I have arbitrarily picked here:

We now have five names, and five ... er, four? ... well, some tip commits. The tricky bit is that and both point to the same tip commit.

Git knows—because sets it—that we're now on . Specifically Git writes the name into . We can make our drawing a bit more accurate by adding this information:

At this point, the four commits that used to be only on branch are now on both and . And, by the same token, Git no longer knows that starts at the tip of . As far as Git is concerned, both and contain those four commits and all the earlier ones too, and both of them "start" way back in time somewhere.

Since we're on branch , if we make a new commit now, the new commit's parent will be the old tip commit, and Git will adjust the branch name to point to the new commit:

Note that none of the other labels moved: the four "old" branches stay put, only the current ( ) branch changes. It changes to accommodate the new commit we just made.

Note that Git continues to have no idea that branch "started" at . It's just the case, now, that contains one commit that does not, plus the four commits that they both contain, plus all those earlier commits.

Using lets us move a branch label. Let's say, for whatever mysterious reason, we don't want branch label to point where it does in our current drawing. Instead, we want it to point to the same commit as . We can use to change the place to which points, i.e., to move the label:

This makes Git "forget" or "abandon" those three commits that were only on before. That's probably a bad idea—why did we decide to do this strange thing?—so we probably want to put back.

Fortunately, "abandoned" commits are normally remembered in what Git calls reflogs. Reflogs use an extended syntax, . The selector part is usually either a number or date, such as or . Every time Git updates a branch name to point to some commit, it writes a reflog entry for that branch, with the pointed-to commit's ID, a time-stamp, and an optional message. Run to see these. The command wrote the new target as , bumping up all the old numbers, so now names the previous tip commit. So:

will put it back (and also renumber all the numbers again: each update replaces the old and makes it , and becomes , and so on).

Anyway, suppose that we do our while we're on , and fail to mention . That is, we start with:

and run . Then we get this:

If we meant to make point to commit , we can in fact do that right now, with . But let's say we make a new commit before realizing that we made start at the wrong point. Let's draw it in:

If we use now, we'll abandon—lose—the commit we just made. What we want instead is to rebase it, onto the commit that branch points-to.

What if, instead of using , we use ? Let's analyze this using—what else—our DAGlets. We start with the above drawing above, with the extended leg going out to , though in the end we get to ignore that leg, and with the section going to , most of which we also get to ignore. What we don't get to ignore is all that stuff in the middle, that we get by tracing the lines back.

The command, in this form, will use to pick commits to copy. So, starting with the whole DAGlet, let's mark (with ) all the commits that are on (or contained in) :

Now, let's un-mark (with ) all the commits that are on (or contained in) :

Whatever remains—all the commits—are the ones that will copy. That's way too many!

We need to get to copy just the one commit. What this means is that for the argument, we need to give the name .6 That way, Git will use to select the commits to copy, which will be just the one commit we need to copy.

But—alas!—now we have a big problem, because wants to copy the commit to a point right after the we just gave it. That is, it wants to copy the commits to just after . That's where the commits are now! (Well, the one commit is.) So this is no good at all!

Fortunately, has an escape hatch, specifically the argument. I mentioned this several times before, but now is when we need it. We want the copies to go right after , so that's what we will supply as the argument. Git's uses the by default, but if we give it an , it uses that instead. So:

OK, good, we're still on . (Note that works here too, and if you use one of those fancy shell prompt setup things, you can even get your current branch name to be in your prompt, so that you don't need to run as often.)

Now Git will select commits in , which is the right set of commits to copy, and copy them right after the tip of , which is the right place to copy them to. Once the copies are all done, Git will abandon the original commits7 and make the name point to the new, tip-most, copied commit.

Note that this works even if you have no new commits on the new branch. This is the one case where also works. When there are no commits, this carefully copies all zero of them :-) and then makes the name, , point to the same commit as . Hence is not always wrong; but is always right—albeit somewhat clumsy: you must identify both the and the points manually.

6Or, as we noted in an earlier footnote, we can give the ID of the commit to which the name points. Either way, we have to supply this as the argument.

7Except, of course, reflog entry will remember the old, now-abandoned, tip commit. Additional reflog entries for may remember yet more commits, and remembering the tip commit suffices to keep all its ancestors alive. The reflog entries eventually expire—after 30 days for some cases, and 90 for others, by default—but this gives you up to a month or so, by default, to recover from mistakes.|||

