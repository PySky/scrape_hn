The recent release of Dgraph is packed with new features and improvements. Many of them are related to strings - full text search (with support for 15 languages!) and regular expression matching have been added, and handling of string values in multiple languages was greatly improved. All of these changes make Dgraph an excellent tool for working with multilingual applications.

We’re working hard to keep the query language easy to use and clean. Dgraph, in v0.7.5, adopted and extended the language tag syntax from the RDF N-Quads standard. It is intuitive, well-known, and was partially supported in previous versions (during data loading).

Let’s start from the beginning - the data. Dgraph uses RDF N-Quads for data loading and backup. String literals in N-Quads may be followed by the sign and language tag, e.g. or . Multiple such literals may be used as a value for a single entity/attribute pair.

When querying for a predicate with multiple values, the user is able to use the notation known from RDF N-Quads. Many languages can be specified in a list of preference, e.g. denotes that preferred language is English, but if such a value is not present, a value in German should be returned.

Language can also be specified in functions, which is important especially for full text search.

The dataset used in all examples is the Freebase film data. As this post is string-oriented, queries are focused on movie titles in multiple languages, and no other information is retrieved. As we don’t have information about type of , we use filtering to select only the movie titles, and to limit the number of results a bit - .

The schema for field is very simple - it defines 3 types of indexes:

index is used for term matching with the and functions. Note that it was the only string index available in previous releases of Dgraph.

index uses matching with language specific stemming and stopwords. One thing worth noting is, that values indexed with are processed according to their’s language (if they are tagged). If values are untagged, English is used as a default language.

index is used for regular expression matching.

This may sound trivial, but it’s not. Searching for exact form of the word is not always satisfying for the user. For example, nouns can be singular or plural, verbs have grammatical tenses, etc., and the user may be interested in all values related to the word in any inflected or derived form.

The simple but powerful idea is to find a method, that can transform all the forms of a word to some common base. This process is called stemming. For many natural languages (including English) stemmers may be implemented using a set of well known grammatical rules. There are also languages (like Polish) where a dictionary based approach is required (i.e. inflected form -> stem mapping).

Only for languages with well known grammatical rules are stemmers are widely available.

Another problem with search are the words that are common, like , , or . In most cases, searching for them gives an enormous amount of results which are useless. Those words are called stop words. Again, stop words are language specific. The common method of handling those words is just to remove them from the search.

The following steps are applied to both data (while indexing), and the query pattern:

Since stop words contain inflected forms, they are removed before stemming.

There are two new functions that provide basic support for full text search:

Let’s query for , using the term matching function .

The query gives no results. It may be worth trying less strict match withfunction:

Query returns 59 results. This example shows that removing a stop word may help in some cases.

In context of NLP, English is quite easy - there are no diacritics, and inflection is rather simple. So let’s try similar query in German:

Again, the query doesn’t return any results.

Now let’s try the NLP-enabled version of this query:

It’s worth noting the inflected forms of - and . Also the is interesting - is the escaped Unicode value of grapheme . matched - the form is inflected, and grapheme equivalency is preserved. Like in the English example, the stop word ( ) is ignored.

In some cases, natural language processing can lead to surprising results. Let’s search for the answer to the famous question: To be, or not to be? :

The query gives no results, while the term matching query:

What happened? To be, or not to be? consists of stop words only. After FTS/NLP processing, there are no movies that match the query.

Regular expressions are extremely useful for creating sophisticated matchers.

For example, all titles starting with a word containing but not may be matched using following query:

There are 502 results in the test dataset.

Dgraph supports extensive, and useful methods of string matching.

Natural language processing, employed for full text search, may be the best choice for lookup based on users input. If more strict matching is required, term matching should give good results. And to get the most precise results of complicated text searches, regular expressions can be used.

Top image: The Splitting of the Dunes|||

