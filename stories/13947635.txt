The layout of this application is shown below

Almost all React application UIs consist of a composition of components. For example, a weather app consists of a component that displays a local name, a component that displays the current temperature, and a graph component that represents a five-day forecast. For this reason, it is a good idea to decompose the UI into component units before developing the React app.

We will revisit this data service later.

We do not use the Injectable decorator used in Angular2, so we will copy only the export part, just save it in src/services/BatteryService.js for now. Later, we will use import it in TeslaBattery container.

The data you can get from Tesla site is hard-coded and very large, so weâ€™ll use Toddâ€™s new version of the data to make it easier to use. link

Unpack assets.zip and place all images in the src/assets directory and place the downloaded favicon.ico in the source root.

All images required for this project can be downloaded from:

When you save the file, it will be automatically compiled and you can see the updated screen.

First up, change your App.js to this:

src/App.js is the entry point for our app.

First we need to set the entry point to start our Tesla app. Thankfully itâ€™s already created by create-react-app .

Now our src directory should look like this:

Before we start the project, we need to touch the project source structure. Just leave the files we need for the project and delete the rest. (Delete App.test.js, logo.svg)

If you see the screen below, the project has been successfully set up.

Create a new application through creat-react-app and open http://localhost:3000/ to check the generated application.

creat-react-app is a new tool open-sourced by Facebook for fast react application development, which allows you to easily start React applications without complex setups. You can easily install our project react-tesla-range-calculator and start the application right away with the following command:

The tools and versions I used during the implementation of this app:

Note that you may need some basic React knowledge to follow this tutorial. See the following resources:

ðŸ’» You can also check out the source code .

ðŸš€ Check out the live version before we get started.

This is the final GIF image of our application.

So this post will reuse some materials (data, images, and css style). We will focus on rebuilding it in React way .

In this tutorial, weâ€™ll build the React version of Todd Mottoâ€™s Building Teslaâ€™s battery range calculator with Angular 2 reactive forms .

In this series of articles, I will walk you through the process of building Teslaâ€™s battery range calculator with React.

We need to think about what state is required to be managed in our app. If you look at the final app GIF image at the top of this article, the state values â€‹â€‹are:

props is a JavaScript single object, in this case an empty object. This is because we did not pass props in the parent component TeslaBattery .

You can easily understand this by checking the component tree using React Developer Tools in Chrome.

React is composed of a component tree, which consists of a container for delivering data and state, and a component for passively receiving data and state from a container. The tool that delivers this state to the subcomponents is a single object, props .

In other words, you need to receive some data (in this case, wheelsize) from the parent component and render it properly, and there must be a communication method that can receive the data.

Wow! Itâ€™s nice but something is missing. The wheels are not shown. Letâ€™s look for the cause. According to the source code, TeslaCar should be passed to props and class name changed based on props.wheelsize .

Hereâ€™s what you should be seeing:

Next, we need to add this component to our container again. Import TeslaNotice component in TeslaBattery.js :

This gives us our animations and the component base for the car, which is displayed as background images.

Next, create a TeslaCar.css file in the src/components/TeslaCar directory and give it the following style. Since the code is long and omitted here, letâ€™s check the source code .

For each props attribute, React attempts to find it in the componentâ€™s propType object to determine whether (1) prop is expected (2) prop is the correct type. In this case, the TeslaCar component expects the props attribute wheelsize and specifies that it is a number type. If the wrong value is provided, a warning appears in the JavaScript console, which is useful for fixing potential bugs in early stage.

Here we specify propTypes using the React built-in typechecking. In development mode, React checks props passed to the component. (Only in development mode for performance reasons)

Create the src/components/TeslaCar directory, create a TeslaCar.js file in it, and inside your TeslaCar.js fileÂ :

Next up, create src/components/TeslaNotice directory, create TeslaNotice.css in it and add these styles to your TeslaNotice.css file:

Create the src/components/TeslaNotice directory, create a TeslaNotice.js file in it, and enter the following code:

The components to be created in the future will be configured in the TesalBattery container sequentially.

Create the src/containers directory, create a TeslaBattery.js file in it, and enter the following code:

lifecycle callbacks are useful when you want to render or update components, or to receive notifications at different stages of lifecycle .

By inheriting React.Component , TeslaBattery must have a render method, optionally it can initialize its state through the constructor , and implement other methods such as lifecycle callbacks.

In our app, the TeslaBattery component is responsible for creating and managing data and state as Container Component , passing it to other Presentational Components , performing a callback function and changing its state.

When you save all the modified files, they will be updated automatically and you should see the Tesla logo as follows:

Now that youâ€™ve created the Header component, letâ€™s use import in the entry point App.js .

Create a Header.css file in the src/components/Header directory and type the following style:

Create the src/components/Header directory, create a Header.js file in it, and enter the following code:

Letâ€™s create our first React component, Header . The Header component is simply a black bar with the Tesla logo and text.

What are the benefits of using these patterns?

This is a useful pattern that can be used when developing an application with React. It is easier to reuse by dividing components into two categories.

In the above mentioned component tree, we can see that it is classified as Container Component and Presentational Component .

The UI is represented by a component tree as follows.

If you save files, you can see that the rendered Tesla car and wheel animation work well on the updated screen. You can also see that props is passed well in the component tree.

In a word, this concept can be expressed by the following formula.

In render() , the code in the form const {a, b} = c is ES6 Object Destructuring . It takes the required value out of the object and makes a reference to it.

That is the single source of truth for our app. Now we will add the constructor method to the TeslaBattery container and set the initial value so that we can manage this state value and pass it to the subcomponent. The TeslaCar component accepts the wheelsize input through props and renders the Tesla car image and spins the wheels.

Now we are going to build the component. Create the directory, create a file in it, and enter the following code:

is also a that receives state, and it takes a list of arrays containing model values â€‹â€‹by and renders them.

First, letâ€™s consider how to transform a list in JavaScript. The following code uses the function to take a array and return a double value.

This code prints to the console.

Converting an array to a list in React is almost identical. Here we use the JavaScript function to iterate through the array.

For each iteration, it returns a element containing the and a element surrounding the tag containing .

Finally, it returns the array in the element.

Next, create a file in the directory and type the following style. Since the code is long and omitted here, letâ€™s check the source code

The task that this component performs is to iterate through the array and bind a particular class to an element based on . You can then replace the background image to display the Tesla model.

Then add following to use the component in .

We need to pass the array to , so letâ€™s set the value using weâ€™ve already implemented.

After the component is mounted via , it calls the function. When function that receives and the current state value as the input is executed, the object with the matching and values â€‹â€‹is returned, and the return value is passed through the and then state object is updated.

One caveat is that explicit binding in the constructor function is required to access in the class.

Additional styling is required for a nice layout here.

First open the file and delete all existing code and add the following:

Next, open the file and delete all existing code and add the following:

The work result screen so far is as follows.

Teslaâ€™s speed and external temperature controls should be reusable components, so Iâ€™ll make them a generic Counter component that allows for other metadata such as step, minimum, maximum, and title and units (mph / degrees).

Also, unlike the components we have created so far, we need an action to change the state value in response to user input (button click, checkbox selection, etc.). Letâ€™s look at how to handle events that occur in a subcomponent.

Create the directory as before, create a file in it, and enter the following code:

Letâ€™s think about what we want here. Each time you click and change the speed and temperature, you must update the state so that the value is reflected between the maximum and minimum values.

Since the component only needs to update its own state, passes the callback ( , ) to the each time it needs to update its state. You can use the event on a button to notify the event. The callback passed by calls and the app is updated.

We will implement a callback that will be passed by in a few moments.

Letâ€™s implement the style first. Create a file in the directory and specify the following styles. Since the code is long and omitted here, letâ€™s check the source code

Now, we will implement in and pass it to the component.

First, add to use the component in .

We also implement the callback functions and , and the internal function and bind it in the . Then pass the function to the component with .

An additional style is required for as soon as the component is added. Open the file and add the following:

Here, passed to is a constant value and is passed from which is a parent component of .

Open and pass the object to the component as follows:

Now, when you click Speed â€‹â€‹and Temperature, you can see that the changed values â€‹â€‹are updated and re-rendered in the state object through the .

What a single-page application can give us is a seamless user experience and smooth interaction.

In our app, car model values â€‹â€‹are updated without having to reload the entire page every time the user changes speed or temperature. Even if you need to connect to the server to get the data. To provide this user experience, you need to know which part of the you need to update when changes or interactions occur.

Each JavaScript framework uses a different strategy: uses , uses dirty checking, and uses Virtual DOM.

In React, the first time the componentâ€™s rendering method is called, it prints a model, rather than the actual element itself. The is a JavaScript data structure that represents the appearance of . React then takes this model and creates the actual element.

Then, whenever the componentâ€™s state changes (eg, is called), the rendering method of the component is called and a new is created, and this new is replaced with the previous . The result of this comparison is to show the actual changes and the will be â€˜patchedâ€™ with the changes and the screen will change.

We monitor the temperature and change the to when it is more than 20 degrees, and when it is below 20 degrees.

First create a directory , create a file in it, and enter the following code:

This component changes the style class according to the passed in, and changes the text according to .

passes callback( in this case) to , which is executed whenever the state needs to be updated. event can be used to notify the event. The passed by is called with to update its state and re-render.

Create a file in the directory and specify the following styles. Since the code is long and omitted here, letâ€™s check the source code.

Now we will implement in and pass it to the component.

First, add to use the component in . We implement callback function and bind it in . Then pass the callback function to the component as .

Now the state value changes according to the temperature change, and when the changed value is passed to the component, the style class and text are changed according to the value.

Finally, letâ€™s make the final component . As always, create a directory , create a file in it, and enter the following code.

Our implementation here is similar to the conversion of the array object to a list in the component. Repeat the array using the function.

For each iteration, it returns the elements containing . Finally, the list is built into the component and rendered.

In the element, the effect of wheel animation is shown by changing the class according to the transmitted wheel size.

Create a file in the directory and specify the following styles. Since the code is long and omitted here, letâ€™s check the source code.

Finally, implement in and pass it to the component.

Add to use the component in . We then implement callback function and bind it in . Then pass the callback function to the component as .

The result of the completion of the wheels animation is as follows.

Are we finally done? Even if the user changes several condition values, the difference value of the vehicle model does not change properly.

So far, weâ€™ve only updated a part of our appâ€™s status each time an event occurs.

Now letâ€™s change the state whenever the config state value changes.

Now we create a function that take the and the current state value as inputs and reflects the changed in the app state and pass it to as a callback.

By doing this, it is possible to update the object first in , which operates asynchronous method, and to render the changed on the screen based on this.

This completes all the puzzles. The complete code for TeslaBattery is:

If the build succeeds, the build folder will be created in our project directory and the following message will be displayed.

Now our build is ready to be deployed.

With tools like Surge, we can really easily deploy our built app.

is simple, single-command web publishing. It publishes HTML, CSS, and JS for free, without leaving the command line.

First, install the tool with and run the command in the directory.

If this is your first time running, you will need to enter your email and password to register a new account.

The deployment is finished in an instant.

In this post, we learned some points of creating React components and composing them to create a front-end app through rebuilding . If youâ€™ve followed along until now, then congratulations on getting a React app up and running.

In the next installment, weâ€™ll explore how to improve our state management with the library. In the meantime, if you have any comments, suggestions, or corrections, please feel free to post them in the comments section.

Thanks for your feedback in advance.|||

In this series of articles, I will walk you through the process of building Teslaâ€™s battery range calculator with React. In this tutorial, weâ€™ll build the React version of Todd Mottoâ€™s Building Teslaâ€¦