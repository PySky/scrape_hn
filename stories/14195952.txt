Starting from Docker 17.0.5+, you can create a single that can build multiple helper images with compilers, tools, and tests and use files from above images to produce the final Docker image.

Docker can build images by reading the instructions from a . A is a text file that contains a list of all the commands needed to build a new Docker image. The syntax of is pretty simple and the Docker team tries to keep it intact between Docker engine releases.

The core principle is very simple: .

This principle works just fine for basic use cases, where you just need to demonstrate Docker capabilities or put some “static” content into a Docker image.

Once you advance with Docker and would like to create secure and lean Docker images, a single is not enough.

People who insist on following the above principle find themselves with slow Docker builds, huge Docker images (several GB size images), slow deployment time and lots of CVE violations embedded into these images.

The basic idea behind Build Container pattern is simple:

An example of the Build Container pattern for typical Node.js application:

This flow assumes that you are using two or more  s and a shell script or flow tool to orchestrate all steps above.

I use a fork of Let’s Chat node.js application. Here is the link to our fork.

Docker 17.0.5 extends syntax to support new multi-stage build, by extending two commands: and .

The multi-stage build allows using multiple commands in the same Dockerfile. The last command produces the final Docker image, all other images are intermediate images (no final Docker image is produced, but all layers are cached).

The syntax also supports keyword. Use keyword to give the current image a logical name and reference to it later by this name.

To copy files from intermediate images use , where number starts from (but better to use logical name through keyword).

The below makes the Build Container pattern obsolete, allowing to achieve the same result with the single file.

The above creates 3 intermediate Docker images and single release Docker image (the final ).

In order to try Docker multi-stage build, you need to get Docker 17.0.5, which is going to be released in May and currently available on the beta channel.

So, you have two options:

Try mult-stage build. Add to every Docker command, or set environment variable.

With Docker multi-stage build feature, it’s possible to implement an advanced Docker image build pipeline using a single Dockerfile .

Kudos to Docker team for such a useful feature!

Hope, you find this post useful. I look forward to your comments and any questions you have.|||

With multi-sage Docker build, it's possible to create an effective build flow to assemble lean and secure Node.js image using single Dockerfile.