It's been exactly one year since the last breaking change to React. Our next major release, React 16, will include some exciting improvements, including a complete rewrite of React's internals. We take stability seriously, and are committed to bringing those improvements to all of our users with minimal effort.

To that end, today we're releasing React 15.5.0.

The biggest change is that we've extracted and into their own packages. Both are still accessible via the main object, but using either will log a one-time deprecation warning to the console when in development mode. This will enable future code size optimizations.

These warnings will not affect the behavior of your application. However, we realize they may cause some frustration, particularly if you use a testing framework that treats as a failure.

Adding new warnings is not something we do lightly. Warnings in React are not mere suggestions â€” they are integral to our strategy of keeping as many people as possible on the latest version of React. We never add warnings without providing an incremental path forward.

So while the warnings may cause frustration in the short-term, we believe prodding developers to migrate their codebases now prevents greater frustration in the future. Proactively fixing warnings ensures you are prepared for the next major release. If your app produces zero warnings in 15.5, it should continue to work in 16 without any changes.

For each of these new deprecations, we've provided a codemod to automatically migrate your code. They are available as part of the react-codemod project.

Prop types are a feature for runtime validation of props during development. We've extracted the built-in prop types to a separate package to reflect the fact that not everybody uses them.

In 15.5, instead of accessing from the main object, install the package and import them from there:

The codemod for this change performs this conversion automatically. Basic usage:

The , , and APIs will work exactly as before. The only change is that the built-in validators now live in a separate package.

You may also consider using Flow to statically type check your JavaScript code, including React components.

When React was initially released, there was no idiomatic way to create classes in JavaScript, so we provided our own: .

Later, classes were added to the language as part of ES2015, so we added the ability to create React components using JavaScript classes. Along with functional components, JavaScript classes are now the preferred way to create components in React.

For your existing components, we recommend that you migrate them to JavaScript classes. However, if you have components that rely on mixins, converting to classes may not be immediately feasible. If so, is available on npm as a drop-in replacement:

Your components will continue to work the same as they did before.

The codemod for this change attempts to convert a component to a JavaScript class, with a fallback to if necessary. It has converted thousands of components internally at Facebook.

We're discontinuing active maintenance of React Addons packages. In truth, most of these packages haven't been actively maintained in a long time. They will continue to work indefinitely, but we recommend migrating away as soon as you can to prevent future breakages.

We're also discontinuing support for the UMD build. It will be removed in React 16.

Currently, the React Test Utils live inside . As of 15.5, we're deprecating that package and moving them to instead:

This reflects the fact that what we call the Test Utils are really a set of APIs that wrap the DOM renderer.

The exception is shallow rendering, which is not DOM-specific. The shallow renderer has been moved to .

A special thank you to these folks for transferring ownership of npm package names:

We recommend using Yarn or npm for managing front-end dependencies. If you're new to package managers, the Yarn documentation is a good place to get started.

We recommend using a bundler like webpack or Browserify so you can write modular code and bundle it together into small packages to optimize load time.

Remember that by default, React runs extra checks and provides helpful warnings in development mode. When deploying your app, make sure to compile it in production mode.

In case you don't use a bundler, we also provide pre-built bundles in the npm packages which you can include as script tags on your page:

We've also published version of the , , and addons packages on npm and the package on bower.|||

