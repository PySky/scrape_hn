Android application development has come a long way, when I started app development 6 years ago; there weren’t any agreed upon practices/standards for developers to follow. The major flaw back then was the dependence on Activities and their lifecycles; apps at that time had major part of their code written in Activities, this was required because the code had to adhere to Activity’s lifecycle methods.

Several approaches were recommended by various architects who basically recommended moving out the code from Activities by separating responsibilities, various design patterns emerged namely MVC, MVVM and MVP.

We will talk about MVP in this article.

MVP provides us with ability to divide responsibilities of an app into different layers which follow SOLID principles, using this we break down our app into 3 layers Views, Presenters and Interactors.

Let’s look at the responsibilities of each layer.

To understand this architecture we will look at a sample application which does the following.

Now let us look at the code, at the heart of this architecture we have GetMovieInteractor.java

Pay attention to getMovieForTitle() method, here we first query to see if there is an existing Movie in the database with the title we are querying for, if so we return it from database otherwise we call the API which will return the data from server, then depending on whether the result was successful or a failure we will pass the result to the Presenter, every Interactor will extend BaseInteractor.java, this class will help us manage our Subscriptions and is also responsible for attaching listeners from Presenter so that the data can be sent back to the Presenter, please refer to the Github project which is linked at the end of this article to know more about BaseInteractor.

Then we have a GetMoviePresenter.java which will call the method getMovieForTitle() from GetMovieInteractor and depending on the result call respective methods in the View, our GetMoviePresenter implements Presenter contract, the methods overridden by these callbacks will be called from Interactor.

Note subscribeInteractor() method which is overridden from BasePresenter, here we attach the listener for this Presenter to the Interactor so that it can send back results to this class, when a call to getMovieForTitle() from GetMovieInteractor is made, depending on the result either onGetMovieSuccess(), onError() and other methods are called, here the data has to be processed and sent to the View for the user to see. A View which will be calling this Presenter will first have to call subscribeView method of the Presenter which will in-turn call subscribePresenter method of Interactor, similarly there is a unsubscribeView method which should be called when the View is being destroyed, to view this code please refer to the Github repo linked at the end of this article.

GetMovieContract.java is a container interface where we define callbacks and separate them based on responsibility, each interface will have a View contract (depending on the expected results from a Presenter), API contract(which API is being called) and Presenter contract (callbacks to be called in Presenter from Interactor).

Finally we have the View in our case a Fragment named GetMovieFragment.java which implements our View contract.

GetMovieFragment is responsible for displaying data to the user and thus deals with only Android specific code like initializing Views, setting data onto them, hiding or showing Views based on result etc, apart from this the View does not know anything about how the data is fetched or other implementation details, notice subscribeView and unsubcribeView methods, these will attach our listener to the Presenter so that it can callback these methods when it has the data.

Observe how we divided responsibilities between View, Presenter and Interactor, as a direct result of this our code looks more organized, is testable and can be easily debugged for errors as we know the responsibility of each layer.

This concludes the article, in the next article I will demonstrate how to write Unit tests for this app.

I hope that with this tutorial I was able to effectively explain about MVP architecture with an example, please let me know what you think of my implementation and give suggestions in the comments below.

The entire project can be found here on Github.|||

Android application development has come a long way, when I started app development 6 years ago; there weren’t any agreed upon practices/standards for developers to follow. The major flaw back then…