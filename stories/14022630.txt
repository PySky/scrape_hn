This document enumerates all the major changes that have been applied to the C++ working draft since the publication of C++14, up to the publication of the C++17 DIS (N4660). Major changes are those that were added in the form of a dedicated paper, excluding those papers that are large issue resolutions. No issue resolutions from either CWG or LWG issues lists (“defect reports”) are included.

These are features that may happen to you without your knowledge or consent.

These are features where you would know if you were using them.

The following papers were moved at committee meetings, but their contents are too specific to call out as separate features: N3922, N4089, N4258, N4261, N4268, N4277, N4285, P0017R1, P0031R0, P0033R1, P0074R0, P0136R1, P0250R3, P0270R3, P0283R2, P0296R2, P0418R2, P0503R0, P0509R1, P0513R0, P0516R0, P0517R0, P0558R1, P0599R1, P0607R0, P0612R0

The following papers contain issues that have been accepted as defect reports. CWG issues are handled by N4192, N4457, P0164R0, P0167R2, P0263R1, P0384R0, P0398R0, P0490R0, P0507R0, P0519R0, P0520R0, P0522R0, P0575R1, P0576R1, P0613R0, P0622R0. LWG issues are handled by N4245, N4366, N4383, N4525, P0165R0, P0165R1, P0165R2, P0165R2, P0165R3, P0165R4, P0304R1, P0397R0, P0610R0, P0625R0. Only specific issues may have been selected from each paper; the meeting minutes contain the details.

std::unordered_map<std::string, std::unique_ptr<Foo>> items; std::vector<std::unique_ptr<Foo>> standby; // If there is currently no item 'id', installs 'foo' as item 'id'. // Otherwise stores 'foo' for later use and puts it on standby. // Before C++17 void f(std::string id, std::unique_ptr<Foo> foo) {   auto it = items.find(id);   if (it == items.end()) {     auto p = items.emplace(std::move(id), std::move(foo));     p.first->second->launch();   } else {     standby.push_back(std::move(foo));     standby.back()->wait_for_notification();   }   // Notes:   // * Variable 'id' can no longer be used (moved-from); or...   // * ...would need to use parameter 'const string& id' and force copying.   // * Map lookup performed twice. Ordered map could use lower_bound + hint, but unordered map cannot.   // * (Cannot emplace unconditionally, because it might destroy *foo.) } // With C++17 void f(std::string_view id, std::unique_ptr<Foo> foo) {   if (auto [pos, inserted] = items.try_emplace(id, std::move(foo)); inserted) {     pos->second->launch();   } else {     standby.emplace_back(std::move(foo))->wait_for_notification();   } }

The next snippet illustrates the utility of on the example of a class template which delegates a free function call to a member function bound to a class instance, and the member function is part of the delegate type.

// Before C++17 template <typename T, int (T::* MF)(int, int)>   // two params: one type, one non-type struct Delegate { /* ... */ }; int n = (&obj)(10, 20); { /* ... */ };               // implement as before, but as partial specialization int n = (&obj)(10, 20);

The next snippet shows the utility of fold expressions in generic code.

// Call f(n) for all f in the pack. template <typename ...F> void ApplyAll(int n, const F&... f) {   } // Compute f(a, b) for each f in the pack and return the sum. template <typename ...F> int ApplyAndSum(int a, int b, const F&... f) {   }

The next snippet shows array support for shared pointers.

// would be wrong without the deleter|||

