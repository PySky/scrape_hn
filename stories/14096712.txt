This is something which comes up every so often when working on Rails projects with a branching git workflow.

The issue occurs when both and your branch contain migrations, leading to conflicts in the schema file - at least one conflict over the ‘version’ declared at the top of the file, and possibly other conflicts.

This ‘version’ number is a timestamp, and will correspond to the filename of the last migration which was added at the time that the schema was generated.

That’s the property that we need to preserve when rebasing:

The temptation is to manually resolve the conflicts by editing the schema.rb file. This risks getting into a state where the committed schema is different to the ‘schema that would be generated by migrating again’.

If that ever happens then at some point someone will run and get a different schema file. When this happens it’s hard to know what the correct way to resolve this is.

The robust approach is to rebuild the schema at each stage as follows:

Before rebasing, checkout (and pull!) develop and ensure that the database agrees with the version of the schema file on develop. You can do this with . Ideally you should see everything as ‘up’ if anything is ‘down’ then most likely you haven’t migrated everything on develop yet, so running should sort this out. if you see any lines like the following, this means that a migration which has been applied to your database doesn’t exist on develop and is presumably on one of the feature branches. Rails has no way of knowing how to rollback this migration, so you need to switch to whichever branch added that migration and rollback from there. You can now switch to your branch and rebase. At the first conflict, unstage the schema diff from your new branch: Discard the schema diff from your new branch: Check the resulting schema diff against the original diff on your branch (e.g. by looking at the commit on the pull request) - it should be identical …with one exception: if the migration you’re adding was created before any of the migrations on develop, then the in the schema file won’t change. This is expected: that should always relate to the most recently generated migration. That’s it! You can now continue your rebase.

To understand why the above approach works, the following insights might be useful:|||

This is the dev blog of Duncan Graeme MacDonald Stuart - a Technical Architect living in London. The focus is mostly Ruby on Rails with a little WordPress