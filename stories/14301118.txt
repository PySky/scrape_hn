In this article from the Design & Archi﻿﻿tecture Series, I am going to present to you how to speed up the tests' writing process through the usage of Visual Studio code snippets.

Code snippets are small blocks of reusable code that can be inserted in a code file using a context menu command or a combination of hotkeys. They typically contain commonly-used code blocks such as try-finally or if-else blocks, but they can be used to insert entire classes or methods.

In Visual Studio there are two kinds of code snippet: expansion snippets, which are added at a specified insertion point and may replace a snippet shortcut, and surround-with snippets, which are added around a selected block of code.

​For the test automation purposes we are going to use the first type- expansion ones.

If you type for and then press Tab- a new for statement will be created.

If you type prop and then press Tab- a new property will be generated.

One of the most tedious jobs for me personally is the creation of element maps. I refer to the elements' properties.

You need to change the type, the name, the localisation strategy and the locator. Also, this property doesn't have a setter, so you need to delete the default one. So I wanted to be able to generate these through a snippet for the different type of elements. For example, type ebutton, press Tab and generate automatically the button property for me so that I can change only the name and the locators.

1. Open Code Snippets Manager from Tools -> Code Snippets Manager or use Ctrl + K, Ctrl + B

3. Copy one of the snippets to a separate folder and change its name to anchorElement.snippet

Above you can find the full code for the anchor element code snippet. In the shortcut XML element place the desired short key for this code, in this case, it is eanchor. This means that once you type eanchor and press Tab, the following code will be generated.

The first placeholder that will be selected is the name of the property. Once you change it, you can press Tab. Then, the second placeholder will be chosen- the By locator's type, by default, it is set to Id, press again Tab and change the actual locator.

If you take a closer look at the snippet's XML, the code should be placed under the Code element, wrapped in the <![CDATA[ yourCodeGoesHere ]]>. As I told you, this is an expansion snippet so for SnippetType you set Expansion. You can set a description that will be displayed in the Code Snippet Manager and the Visual Studio code editor.

As I told you, we have three placeholders for this snippet- the name, the locator's method and the locator's string. You need to create Declarations section under the Snippet node. Then you need to create a literal for each placeholder. Each literal consists of three parts- id (the value that you use in the snippet's code), the default value (once the code is generated) and a tool tip that will be visible in Visual Studio on hover.

As you can see in the example, I declared three literals- name, locatorType and locator. After that, you can use them in the actual code of the snippet, wrapping the name in $ signs. For example $name$ will be replaced with the name literal's default value on code generation.

Open again the Code Snippets Manager and click Add button. Select the folder where your snippets are located.

Once the snippets are added, you can find them under the MySnippets folder and read their metadata.

Right-click on the code and choose Insert Code Snippet menu item.

If the shortcut you specified is for example eanchor and you type it. Then press Tab, the code will be generated.

I showed you how to create an element specific property but what if you want to point the type of the element yourself? It is simple I added a new literal for that.

Below you can find the code that will be generated through the shortcut anyelement + Tab.

The element's type is now placeholder too.

Another thing that we need to do often is to resolve (create pages) so we can create a snippet for this job too.

Here is the snippet for the generation of the above code.

I created snippets for all of the elements present in the current version of the Hybrid test framework. You can download all of them from the below form.|||

Learn how to create Visual Studio code snippets. Create element properties trough short keys. Free download a complete suite of test automation snippets.