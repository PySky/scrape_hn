GSL Lite is based on the Microsoft Guideline Support Library (GSL).

gsl-lite is a single-file header-only variant of Microsoft's implementation of the Guideline Support Library (GSL) adapted for C++98, C++03. It should also work when compiled as C++11, C++14.

The Guideline Support Library (GSL) contains functions and types that are suggested for use by the C++ Core Guidelines maintained by the Standard C++ Foundation. The library includes types like , , , and others.

gsl-lite recognizes when it is compiled for the CUDA platform and decorates functions (methods) with and . See also section API macro.

gsl-lite has no other dependencies than the C++ standard library.

gsl-lite is a single-file header-only library. Put in the include folder directly into the project source tree or somewhere reachable from your project.

-Dgsl_api=""

 Functions (methods) are decorated with . At default is defined empty for non-CUDA platforms and for the CUDA platform. Define this macro to specify your own function decoration.

-Dgsl_FEATURE_HAVE_IMPLICIT_MACRO=1

 Define this macro to 0 to omit the macro. Default is 1.

-Dgsl_FEATURE_HAVE_OWNER_MACRO=1

 At default macro is defined for all C++ versions. This may be useful to transition from a compiler that doesn't provide alias templates to one that does. Define this macro to 0 to omit the macro. Default is 1.

-Dgsl_FEATURE_EXPERIMENTAL_RETURN_GUARD=0

 Provide experimental types and and convenience functions and . Default is 0.

gsl-lite provides contract violation response control as suggested in proposal N4415.

-Dgsl_CONFIG_CONTRACT_LEVEL_ON

 Define this macro to include both and in the code. This is the default case.

-Dgsl_CONFIG_CONTRACT_LEVEL_OFF

 Define this macro to exclude both and from the code.

-Dgsl_CONFIG_CONTRACT_LEVEL_EXPECTS_ONLY

 Define this macro to include in the code and exclude from the code.

-Dgsl_CONFIG_CONTRACT_LEVEL_ENSURES_ONLY

 Define this macro to exclude from the code and include in the code.

-Dgsl_CONFIG_CONTRACT_VIOLATION_TERMINATES

 Define this macro to call on a GSL contract violation in , and . This is the default case.

-Dgsl_CONFIG_CONTRACT_VIOLATION_THROWS

 Define this macro to throw a std::runtime_exception-derived exception instead of calling on a GSL contract violation in , and throw a std::exception-derived exception on discarding information in .

-Dgsl_CONFIG_SPAN_INDEX_TYPE=size_t Define this macro to the type to use for indices in and . Microsoft's GSL uses . Default for gsl lite is .

-Dgsl_CONFIG_ALLOWS_NONSTRICT_SPAN_COMPARISON=1

 Define this macro to 0 to omit the ability to compare spans of different types, e.g. of different const-volatile-ness. To be able to compare a string_span with a cstring_span, non-strict span comparison must be available. Default is 1.

-Dgsl_CONFIG_ALLOWS_UNCONSTRAINED_SPAN_CONTAINER_CTOR=0

 Define this macro to 1 to add the unconstrained span constructor for containers for pre-C++11 compilers that cannot constrain the constructor. This constructor may prove too greedy and interfere with other constructors. Default is 0.

Note: an alternative is to use the constructor tagged : span<value_type> s(with_container, cont).

-Dgsl_CONFIG_CONFIRMS_COMPILATION_ERRORS=0

 Define this macro to 1 to experience the by-design compile-time errors of the GSL components in the test suite. Default is 0.

See also section GSL: Guideline support library of the C++ Core Guidelines [2].

The table below mentions the compiler versions gsl-lite is reported to work with.

To build the tests you need:

The lest test framework is included in the test folder.

The following steps assume that the GSL Lite source code has been cloned into a directory named .

All tests should pass, indicating your platform is supported and you are ready to use gsl-lite. See the table with supported types and functions.

[1] Standard C++ Foundation.

 [2] Standard C++ Foundation. C++ Core Guidelines.

 [3] Microsoft. Guideline Support Library (GSL).

 [4] Bjarne Stroustrup. Writing good C++14 (PDF) — Video. CppCon 2015.

 [5] Herb Sutter. Writing good C++14… By default (PDF) — Video. CppCon 2015.

 [6] Gabriel Dos Reis. Contracts for Dependable C++ (PDF) — Video. CppCon 2015.

 [7] Bjarne Stroustrup et al. A brief introduction to C++’s model for type- and resource-safety.

 [8] Herb Sutter and Neil MacIntosh. Lifetime Safety: Preventing Leaks and Dangling. 21 Sep 2015.

[11] Visual CPP Team. C++0x Core Language Features In VC10: The Table. Microsoft. 6 April 2010.

 [12] Visual CPP Team. C++11 Features in Visual C++ 11. Microsoft. 12 September 2011.

 [13] Joel Coehoorn. C++11 features in Visual Studio 2012. StackOverflow. 14 September 2011.

 [14] Stephan T. Lavavej. C++11/14 Features In Visual Studio 14 CTP3. Microsoft. 21 August 2014.

 [15] Stephan T. Lavavej. C++11/14/17 Features In VS 2015 RTM. Microsoft. 19 June 2015.

To obtain a subset of Boost only containing the smart pointers, use the bcp command like:

The smart pointers of Boost 1.51 can be used with VC6.|||

gsl-lite - A single-file header-only version of ISO C++ Guideline Support Library (GSL) for C++98, C++11 and later