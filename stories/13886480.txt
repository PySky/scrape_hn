A flexible tool for creating, organizing, and sharing visualizations of live, rich data. Supports Torch and Numpy.

Visdom aims to facilitate visualization of (remote) data with an emphasis on supporting scientific experimentation.

Broadcast visualizations of plots, images, and text for yourself and your collaborators.

Organize your visualization space programmatically or through the UI to create dashboards for live data, inspect results of experiments, or debug experimental code.

Visdom has a simple set of features that can be composed for various use-cases.

The UI begins as a blank slate -- you can populate it with plots, images, and text. These appear in panes that you can drag, drop, resize, and destroy. The panes live in and the state of is stored across sessions. You can download the content of panes -- including your plots in .

You can partition your visualization space with . By default, every user will have an env called . New envs can be created in the UI or programmatically. The state of envs is chronically saved.

You can access a specific env via url: . If your server is hosted, you can share this url so others can see your visualizations too.

Once you've created a few visualizations, state is maintained. The server automatically caches your visualizations -- if you reload the page, your visualizations reappear.

Start the server (probably in a or ) :

Visdom now can be accessed by going to in your browser, or your own host address if specified.

Some users have reported issues when connecting Lua clients to the Visdom server. A potential work-around may be to switch off IPv6:

For a quick introduction into the capabilities of , have a look at the directory, or read the details below.

We have wrapped several common plot types to make creating basic visualizations easily. These visualizations are powered by Plotly.

The following API is currently supported:

Note that the server API adheres to the Plotly convention of and objects, such that you can produce your own arbitrary visualizations:

This function draws an . It takes as input an tensor that contains the image.

The following are supported:

This function prints text in a box. You can use this to embed arbitrary HTML. It takes as input a string. No specific are currently supported.

This function plays a video. It takes as input the filename of the video or a -sized (in Lua) or a or a -sized (in Python) containing all the frames of the video as input. The function does not support any plot-specific .

The following are supported:

Note: Using input requires that ffmpeg is installed and working. Your ability to play video may depend on the browser you use: your browser has to support the Theano codec in an OGG container (Chrome supports this).

This function draws an SVG object. It takes as input a SVG string or the name of an SVG file . The function does not support any specific .

Further details on the wrapped plotting functions are given below.

The exact inputs into the plotting functions vary, although most of them take as input a tensor than contains the data and an (optional) tensor that contains optional data variables (such as labels or timestamps). All plotting functions take as input an optional that can be used to plot into a specific window; each plotting function also returns the of the window it plotted in. One can also specify the to which the visualization should be added.

This function draws a 2D or 3D scatter plot. It takes as input an or tensor that specifies the locations of the points in the scatter plot. An optional tensor containing discrete labels that range between and can be specified as well -- the labels will be reflected in the colors of the markers. The following are supported:

is a Tensor with Integer values. The tensor can be of size or or or .

This function draws a line plot. It takes as input an or tensor that specifies the values of the lines (that connect points) to plot. It also takes an optional tensor that specifies the corresponding x-axis values; can be an tensor (in which case all lines will share the same x-axis values) or have the same size as .

The following are supported:

This function allows updating of data for extant line or scatter plots.

It is up to the user to specify of an existing trace if they want to add to it, and a new if they want to add a trace to the plot. By default, if no legend is specified at time of first creation, the is the index of the line in the legend.

If no is specified, all traces should be updated. Trace update data that is all is ignored; this can be used for masking update.

The parameter determines if the update data should be appended to or replaces existing data.

There are no options because they are assumed to be inherited from the specified plot.

This function draws a stem plot. It takes as input an or tensor that specifies the values of the points in the time series. An optional or tensor containing timestamps can be specified as well; if is an tensor then all time series are assumed to have the same timestamps.

The following are supported:

This function draws a heatmap. It takes as input an tensor that specifies the value at each location in the heatmap.

The following are supported:

This function draws a regular, stacked, or grouped bar plot. It takes as input an or tensor that specifies the height of each of the bars. If contains columns, the values corresponding to each row are either stacked or grouped (depending on how is set). In addition to , an (optional) tensor can be specified that contains the corresponding x-axis values.

The following plot-specific are currently supported:

This function draws a histogram of the specified data. It takes as input an tensor that specifies the data of which to construct the histogram.

The following plot-specific are currently supported:

This function draws boxplots of the specified data. It takes as input an or an tensor that specifies the data values of which to construct the boxplots.

The following plot-specific are currently supported:

This function draws a surface plot. It takes as input an tensor that specifies the value at each location in the surface plot.

The following are supported:

This function draws a contour plot. It takes as input an tensor that specifies the value at each location in the contour plot.

The following are supported:

This function draws a quiver plot in which the direction and length of the arrows is determined by the tensors and . Two optional tensors and can be provided that specify the offsets of the arrows; by default, the arrows will be done on a regular grid.

The following are supported:

This function draws a mesh plot from a set of vertices defined in an or matrix , and polygons defined in an optional or matrix .

The following are supported:

The plotting functions take an optional table as input that can be used to change (generic or plot-specific) properties of the plots. All input arguments are specified in a single table; the input arguments are matches based on the keys they have in the input table.

The following are generic in the sense that they are the same for all visualizations (except and ):

The other options are visualization-specific, and are described in the documentation of the functions.

See guidelines for contributing here.

Visdom was inspired by tools like display and relies on Plotly as a plotting front-end.|||

visdom - A flexible tool for creating, organizing, and sharing visualizations of live, rich data. Supports Torch and Numpy.