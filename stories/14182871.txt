One thing stuck out to me reading this, and I was wondering if you’d be willing to elaborate on it further:

 “The trouble is, the economics of selling a service for less than $10/month are damn near prohibitive.”

 Would you mind explaining how you came to this conclusion? Thanks!

I’ll be honest, I pulled this number out of a hat. I’m pretty sure I’ve seen others put the cap a lot higher than that.

It comes from a combination of factors. For one thing, costs don’t scale linearly, for the same reason that sales taxes hit the poor harder than the rich.

Just as a for instance, many payment processors charge something like $0.35 plus a percentage for every transaction they handle. The percentage is the same no matter what you charge. When you’re taking in $100/mo, the $0.35 part is meaningless next to the percentage part. But when you’re dealing with $5 or $10 transactions, it’s actually a significant added cost overhead.

An even bigger factor is support costs. Resolving a customer’s problem is going to cost roughly the same amount in terms of person-hours regardless of what you sell your service for. When you’re down in the $10/mo realm, a single problematic customer can offset several customers-worth of annual revenue in terms of time spent helping them.

There’s also the fact that the lower the cost of your service, the more customers you have to find. Which means you have to aim for something more crowd-pleasing. Which is harder, and there’s going to be more competition.

If you can find 500 people for whom your niche product is worth $500/year, you have yourself a respectable income stream. To get the same income from $100/year, you have to manage to convince 2,500 people to part with money. Which realistically means you have to a) find a niche with at least 250,000 people in it; of which b) you will reach 25,000 with your marketing (which is not free), and if you are lucky c) convince 10% of those people that your thing is worth it.

You may think “I will develop a stable of small, cheap services”. Which is a real strategy that some people pursue, and some even succeed at. The problem here is the same problem we run into with multi-threaded code: even with multiple cores, CPU attention doesn’t scale linearly. Neither does human attention. Context-switching tends to eat a greater percentage of overhead with every context you add.

It’s not an insurmountable problem. But you had better be ready, willing, and able to delegate everything, or it will eat you alive.

You might also think “I just want a side income stream”, but this point of view comes with its own risks.|||

