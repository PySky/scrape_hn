A Kubernetes multi-node cluster for developer of Kubernetes and projects that extend Kubernetes. Based on kubeadm and DIND (Docker in Docker).

Supports both local workflows and workflows utilizing powerful remote machines/cloud instances for building Kubernetes, starting test clusters and running e2e tests.

If you're an application developer, you may be better off with Minikube because it's more mature and less dependent on the local environment, but if you're feeling adventurous you may give a try, too. In particular you can run in CI environment such as Travis without having issues with nested virtualization.

Docker 1.12+ is recommended. If you're not using one of the preconfigured scripts (see below) and not building from source, it's necessary to have executable in your path matching the version of k8s binaries you're using (i.e. for example don't try to use 1.6.x with 1.5.x).

supports k8s versions 1.4.x (tested with 1.4.9), 1.5.x (tested with 1.5.4) and 1.6.x (tested with 1.6.1). 1.6 branch currently has some stability issues because of pod termination taking too long so your mileage may vary.

As of now, running on Docker with storage driver is not supported.

The problems include inability to properly clean up DIND volumes due to a docker bug which is not really fixed and, more importantly, a kubelet problem. If you want to run on btrfs anyway, set environment variable to a non-empty value.

By default uses dockerized builds, so no Go installation is necessary even if you're building Kubernetes from source. If you want you can overridde this behavior by setting to a non-empty value in config.sh.

When building Kubernetes from source on Mac OS X, it should be possible to build locally, i.e. must work.

currently provides preconfigured scripts for Kubernetes 1.4, 1.5 and 1.6. This may be convenient for use with projects that extend or use Kubernetes. For example, you can start Kubernetes 1.6 like this:

Replace 1.6 with with 1.4 or 1.5 to use other Kubernetes versions. Important note: you need to do when you switch between Kubernetes versions (but no need to do this between rebuilds if you use like described below).

The first invocation can be slow because it needs to build the base image and Kubernetes binaries. Subsequent invocations are much faster.

You may edit to override default settings. See comments in the file for more info. In particular, you can specify CNI plugin to use via variable ( , , , ).

It's possible to build Kubernetes on a remote machine running Docker. kubeadm-dind-cluster can consume binaries directly from the build data container without copying them back to developer's machine. An example utilizing GCE instance is provided in gce-setup.sh. You may try running it using ( ) so that docker-machine shell environment is preserved, e.g.

The example is based on sample commands from build/README.md in Kubernetes source.

When using a remote machine, you need to use ssh port forwarding to forward and you choose.

is widely used for k8s development. It has a couple of serious issues though. First of all, it only supports single node clusters, which means that it's hard to use it to work on e.g. scheduler-related issues and e2e tests that require several nodes can't be run. Another problem is that it has little resemblance to real clusters.

There's also k8s vagrant provider, but it's quite slow. Besides, directory in k8s source is now considered deprecated.

Another widely suggested solution for development clusters is minikube, but currently it's not very well suited for development of Kubernetes itself. Besides, it's currently only supports single node, too, unless used with additional DIND layer like nkube.

kubernetes-dind-cluster is very nice & useful but uses a custom method of cluster setup (same as 2nd problem with local-up-cluster).

There's also sometimes a need to use a powerful remote machine or a cloud instance to build and test Kubernetes. Having Docker as the only requirement for such machine would be nice. Builds and unit tests are already covered by jbeda's work on dockerized builds, but being able to quickly start remote test clusters and run e2e tests is also important.

kubeadm-dind-cluster uses kubeadm to create a cluster consisting of docker containers instead of VMs. That's somewhat of a compromise but allows one to (re)start clusters quickly which is quite important when making changes to k8s source.

Moreover, some projects that extend Kubernetes such as Virtlet need a way to start kubernetes cluster quickly in CI environment without involving nested virtulization. Current kubeadm-dind-cluster version provides means to do this without the need to build Kubernetes locally.

At the moment, all non-serial e2e tests pass for clusters created by kubeadm-dind-cluster. tests currently have some issues. You may still try running them though:|||

kubeadm-dind-cluster - A Kubernetes multi-node test cluster based on kubeadm