In some cases, you may want to have a unique column other than a primary key id. E.g: email, passport number, national id, vat number, ...

 If you have some unique constraints on a table then you may hit some race condition problem in some edge cases. In this post, we will only cover this case base on Postgres, but I assume that the behavior is similar with other RDBMS: Mysql, Oracle, ...

To clarify the context, race condition problem doesn't apply to unique constraint for a column with a sequence for value like a SERIAL (also known as autoincrement ID). The reason is because sequences are non-transactional. You can easily test it by opening 2 and play with sequences. In other words, will never give you the same value, no matter of the transaction and the transaction isolation doesn't apply to it.

To illustrate our problem, we have a model called . This model is used to stored an URL and we don't want any duplicate of URLs in the table so we made this column unique.

The table is composed of 2 columns:

We want to be able to insert new link, but if we try to insert an existing URL then we want to retrieve the existing link of object. This operation is commonly referred as and it's a commonly used in Django.

 If we don't care about race condition then a first version of the code may look like this:

This code assumes that you have a transaction block created before calling the function . In the case of a web framework, often a transaction start and end with the request.

The code above have a problem because it doesn't handle the case when a Link object has been inserted in the DB between the time we look into the DB if it exists (step 2) and we create the record (step 4). It will be bad luck, but it happens! To write the code solving this problem, we need to understand how the SQL queries behave. Let's imagine that we have 2 transactions called and and the operations happens in the following order.

The example above tries to illustrate the race condition between 2 transactions. You can have differents type of concurrency problem base on type of query UPDATE, DELETE, or SELECT FOR UPDATE but the only way to get a conflict during INSERT is if you have a uniqueness constraint on a table. If two concurrent transactions try to insert rows having the same key value, then the second one will block until the first one finishes. If the first transaction commits, the second one must abort because of the uniqueness constraint; but if the first one aborts the second one can proceed.

To handle the race condition in this INSERT case we want the following SQL behavior:

In the example above, the race condition got handled and the code can continue as expected without having to rollback all the transaction!

This workflow can be translated into Python and SQLAlchemy:

This code has been written taking in consideration that the model has only one unique constraint. If you understand it then it will be easy for you to write your own version to handle your specific use case.

Some other people wrote about the similar topic like in this post. The post tries to provide a generic version of a function. I personally don't encourage this approach because of the difficulty in dealing with concurrency, the get/create pattern is not something a generic approach can eliminate; decisions will have to be made in how the SELECT or INSERT is to solve the problem is approached (see Mike Bayer comment).

It worth to mention that there is the useful SQLAlchemy's UniqueObject recipe, this recipe use the session to keep track of the unique key which helps in some context.

 I hope this post will help you to understand a bit more race condition even if it only discuss the simple case of INSERT with a unique constraint. With concurrency, different problem may require different understanding on how the database works: Locking, transaction isolation, etc|||

