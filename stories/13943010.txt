One of the reasons I love Kotlin is its expressiveness compared to Java. In Kotlin, you can implement much more logic with fewer characters, making Java look something like a "boilerplate language." It is particularly visible when dealing with RxJava which makes heavy use of single-method interfaces, which, in Java 7, are implemented using anonymous classes. (And conciseness isn't exactly the strength of those classes.)

To show the power of Kotlin, we start off with a small Java example: A fictitious GitHub client for accessing the data of a Git repository.

The tools and techniques presented in this article can be applied to any application using RxJava and Kotlin. Since I assume you know GitHub, this example uses a small API for accessing repositories on GitHub and implements the logic for retrieving the top contributor of a repository (that's the user with the most commits pushed to the repo).

Our example is quite straightforward:

has a single method which performs an asynchronous operation and returns its result via a RxJava .

Here's how our Java application can retrieve the top contributor for a single repository. Pull yourself together! If you can't read this, just skip to the next section and see how it reads in Kotlin.

Okay... it's not that bad. But also not easy to read. Let's look at how this method looks like after we translate it to Kotlin.

This Kotlin code uses the same its Java cousin used, however, the code that is required to use the API is reduced to a bare minimum. While the benefit of Kotlin should already be clearly visible, let's further enhance this using Kotlin's extension functions.

There are a bunch of common code patterns that developers need to use when working with RxJava. These patterns include:

These operations are repetitive, and their only purpose is to tame the asynchronous nature of RxJava. Using Kotlin's extension functions it is possible to extract these common patterns.

In our Kotlin example on line 3, we use the operator to transform the into a by calling on the result. Furthermore, in lines 4 and 5 we transform the into an and sort all emitted contributor objects by comparing their commit count. Using extension functions, we can entirely extract the present RxJava boilerplate logic from our function, making the code even more expressive.

The resulting method just became a bit more readable.

RxJava and Kotlin are definitely a perfect match when it comes to combining the power of reactive programming and the expressiveness of modern languages. The techniques shown in this article should serve as a nudge into the right direction for any developers striving to make their code more readable and, thus, more robust.

At PSPDFKit, we know the importance of keeping code readable, and thus make active use of these techniques. (For example in our PDF Viewer for Android which is written entirely in Kotlin.)|||

Tips and tricks how to write readable, consice, and beautiful code using the Kotlin language and RxJava.