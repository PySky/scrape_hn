A few months ago we wrote a blog post suggesting you may want to reconsider having an on-prem offering for your SaaS application. It received a fair amount of attention so we thought we’d write a follow up post focused on the security implications of going on-prem for SaaS vendors. We will use a representative SaaS security compliance questionnaire as a conservative framework for evaluating the requirements of delivering an on-prem offering with operational management provided by the vendor (i.e., “Private SaaS”).

A common reason for a purchaser/customer wanting an application on-premise is to have more control over their data security. However, this does not absolve the vendor (referred to in the second person in this article) of all security related responsibilities.

Of course, the primary advantage of offering your solution on-premise is that there are some customers that will simply refuse to use your multi-tenant SaaS, regardless of your security precautions. This is especially true if your application handles sensitive corporate data like code or trade secrets or if it touches end users’ sensitive, personally identifiable information like health records or financial data.

Thankfully, purchasers are also willing to pay more for the trouble of delivering the application on-premise.

However, just throwing the code over the fence and leaving the implementation details and operational burden on the customer will usually not lead to a good long term outcome. This is why we have been preaching a delivery model where the vendor delivers the application AND operational support, while the purchaser delivers the infrastructure (which could be their cloud account, colo or their own data center). There are a lot of high value prospects that will not or cannot use multi-tenant SaaS but also don’t want the burden of running a complex application.

We call this model Private SaaS. Since Private SaaS is a somewhat atypical offering, that requires the vendor to operationally manage the application, we will assume that the vendor has access to the purchaser’s infrastructure (at least the infrastructure running the application). This assumption puts us somewhere in the middle of the infosec compliance paradigm — between multi-tenant SaaS and installable software that the customer’s IT department runs. It also means a significant portion of a typical SaaS security compliance questionnaire is still applicable.

Enterprise companies that use SaaS have a framework for evaluating the risks of doing so. This framework is usually outlined in the form of a security questionnaire that is given to vendors. If you are a SaaS vendor of any appreciable size, you have probably seen these. They are usually just different enough, so as to maximize the time required to fill each individual one out.

The Vendor Security Alliance (“VSA”), which launched in 2016, is doing SaaS companies a great service by trying to consolidate all of these different questionnaires into one, agreed upon questionnaire. They have published this questionnaire which gives us the opportunity to use it to evaluate how one would deliver the security typically required for SaaS offerings, but on-premise.

In some cases, the responsibility shifts to the purchaser for things like perimeter network security. In most cases, the vendor and the purchaser must work together to make sure the offering is properly integrated into the purchaser’s existing security practices and tooling. This is especially true as more companies discount the value of perimeter security and adopt security approaches like Google’s Beyond Corp.

In this post, we will go through the VSA questionnaire and, where applicable, discuss how we address these questions through Telekube, our platform for delivering on-premise and multi-region applications.

In an initial step towards achieving some standardization of vendor security compliance regimes, the VSA published a questionnaire that software / SaaS purchasers can send to their vendors to assess the security risks of the service.

The questionnaire is broken out into seven main tabs (along with an introduction and definitions tab).

The Introduction Tab outlines the rationale, approach and some recommendations for how one should apply this questionnaire. The main points are here (paraphrased):

Now, let’s look at the substance of the questionnaire (excerpts quoted below).

As the title implies, these are general questions to frame the rest of the questionnaire.

This section leads with the important question, “where is it running?” Presumably, certain questions will apply or not apply based on your answer here but that is left up to the purchaser’s discretion.

We can assume answering the first question “deployed on premise” makes the remaining questions moot and left to the decision of the purchaser.

Besides just explaining what your service does, there is a specific question about your “tech stack”

Again this is to set context for the rest of the questionnaire and a purchaser will want to know about application level details like these no matter where it is deployed.

Presumably, even if you are going on-prem, having an application code review and penetration testing is helpful. However, if a company values its perimeter network security, perhaps its scope can be reduced.

The second questions asks you to present any third party audit reports and other documentation that keep the security consulting business booming.

There are various standard-setting organizations that have published “best practices” for information security (eg., ISO, IEC, ISACA) and there are auditing agencies that will certify that you comply with them (eg., large accounting firms like Accenture or Deloitte). Some vendors may be content that you self-certify to a published standard. Others may want a certification from a recognized auditor.

While not listed in the template here, there may be a purchaser that has other requests because they are subject to government regulation, like the Federal Information Security Management Act (FISMA), Sarbanes Oxley (SOX) or Health Insurance Portability and Accountability Act (HIPAA). For example, a common request from a purchaser that needs to be HIPAA compliant is that you sign a Business Associate Agreement (BAA).

Many of these standards require that you implement an Access Control Layer (ACL) that restricts access to certain types of data. Telekube was built with these standards in mind and uses Teleport (which can integrate with existing identity management services) to implement SSH level Role Based Access Control (RBAC) that also integrates with Kubernetes labels. This creates an automated way to restrict access based on the workload or data type even if they are ephemeral or dynamic across servers.

A data classification matrix is likely necessary regardless of deployment methodology. Access restrictions and minimum controls is dependent on the purchaser’s existing access / authentication / authorization practices. In many cases, you will have to work with them to integrate your application into this tooling.

For this reason, we integrate with the typical enterprise identity and AAA systems already in place. There are some good open source tools to help with this like Redhat’s Keycloak which provides a bridge from LDAP and CoreOS’ Dex for OpenID Connect integration.

Most purchasers will require encryption of sensitive data regardless of where it is located so you will need to show in detail when data is encrypted (both at rest and in transit) and when it is not.

There are a couple strategies you may consider for encrypting data at rest:

Many companies are adopting more modern security approaches like Google’s Beyond Corp, which reduces reliance on perimeter security. So data may need to be encrypted in transit between services, even on-prem. Telekube encrypts all data in transit, including Kubernetes API communications. In addition, we integrate with existing tools to manage secrets like Hashicorp’s Vault.

Here are a series of questions that try to assess the risk of unauthorized data access due to poor data management practices.

Given we are assuming that the vendor has access to the application, these questions are still pertinent. The most straightforward way to deal with this is to sandbox sensitive data and use RBAC so that only privileged users can access this data. If any data needs to leave the premises (which reduces the value of an on-prem solution) it should be anonymized. As to the implementation of RBAC, that leads to the next section.

Enterprise purchasers will already have internal guidelines and tools that address these questions. So the vendor must have answers about how they will integrate with these practices. We treat each on-premise deployment as a distributed virtual appliance that is sandboxed from the rest of the purchaser’s infrastructure. Then we integrate with the purchaser’s existing identity and authentication systems (usually SAML or OIDC).

Remote access to the application is controlled by Teleport, which enforces multi-factor authentication, short lived certificates, and access through a bastion that audits and records activity across the system. Of course, the purchaser could access their infrastructure through other means, but we recommend that they use Teleport, as well, for a unified access pattern.

Telekube integrates Teleport natively with Kubernetes RBAC so that operators can easily access dynamic workloads and also automate operational tasks and updates.

This question is partially addressed by restricting access through Teleport, which audits and records operational activity across the virtual appliance. In addition, Kubernetes aggregates all logs across the application. These logs can then be shipped to a secure log aggregator of the purchaser’s choosing.

Telekube also stores structured data for all operational and security events performed through its interfaces and publishes this history in its UI. This is useful for security audits, root cause analysis and general collaboration.

Presumably the data is not leaving the premise and so this question can be answered by the purchaser. If it is leaving the premises, then these need to be addressed by the vendor.

This is one of the issues that may preclude European customers from using a SaaS that stores data in the U.S. This deserves a separate blog post but the short version is that the E.U. is more stringent than the U.S. regarding data privacy. So frameworks get created and successfully challenged, leaving U.S. SaaS companies and their E.U. customers in a state of uncertainty over how they should be conducting business.

This is irrelevant if the application is on-prem and the customer can control where the data resides.

These are mostly operational requirements so they apply to the vendor regardless of where the application is deployed. Some vendors may downplay these requirements, but they address the vector that is the hardest to manage, humans. Many data breaches are due to social engineering or disgruntled employees so having these controls in place and enforcing them is essential.

If you are a vendor that doesn’t have these standards already in place, there is a new service, called Rippling that may help take care of many of the typical employee onboarding and offboarding tasks needed to comply with these questions.

Since the purchaser controls the infrastructure, they will likely take responsibility for network vulnerability management and making sure the infrastructure is properly patched.

The vendor and the purchaser will need to decide the line where the vendor is responsible for application vulnerabilities. We usually see the purchaser responsible up to the operating system and the vendor responsible above that. This means the vendor needs to have an automated way to deploy application patches and updates, ideally without downtime.

We rely on Kubernetes and its Rolling Update Replication Controller to implement this. Updates can be shipped through internet and applied by customers automatically or installed through physical devices (USB/DVD) for offline servers. In addition to that, we give vendors the ability to publish updates to the distribution center and then triggers alerts to all deployments that an update is available.

Restricting remote access through Teleport addresses some of these questions. Only company owned, locked down endpoints should be allowed to access company networks. There should also be a policy that all sensitive data remains on premise.

We aggregate system logs and operational activity across a deployment that can be shipped to the purchaser’s existing logging aggregation and monitoring services. Usually, we rely on those services for anomaly detection and alerting.

Many of these responsibilities will fall back to the purchaser. However, it is evident that some of this is relevant at the application layer and so the vendor needs to address this. For example, a distributed application will likely be using secrets that should be secure and the application should be sending logs to a secure log aggregation service.

We are big believers in uniformity across hosts. That’s why Telekube ships the entire stack and all dependencies (including a local Docker repository) in a single tarball to be deployed on top of the OS.

Some other Infosec precautions we focus on:

To reduce the friction during buying/procurement process, you may want to show that your application adheres to open implementations of some of these problems. This is why web have built Telekube on top of Kubernetes and SSH, specifically:

Similarly, you can choose the network back-end for Kubernetes which is best suited to the security requirements (like tenant traffic separation) of your enterprise customer.

Again, much of the infrastructure related responsibility falls back to the purchaser but the vendor will have responsibility for application layer security. Application monitoring and logging data needs to be stored locally and also shipped to a secure location of the purchaser’s choosing. As mentioned above, we leverage Kubernetes for aggregating logs, store them locally and provide an easy way to ship them to a separate service. We also include influxDB by default with every deployment to store time series data for monitoring. Integrations are also available with existing solutions the purchaser may be using for monitoring and alerting

For alerting, we rely on integrating with the purchasers existing systems. Most log aggregation services have detailed alerting logic that we’d be foolish to re-implement.

A proper SLA will be required for providing support response times, as well as incident notifications. The robustness of these SLAs can often be correlated to the price being paid for the application.

It’s pretty apparent that these are responsibilities that need to be addressed by the vendor, regardless of where the application is running. We leave this to the vendors existing tooling and operational procedures. We did write a previous post about keeping track of open source libraries which includes some tools for tracking third party libraries used in the code base.

The obvious conclusion is that properly answering this questionnaire is going to get expensive no matter how the application is delivered. But hey, that’s why enterprise buyers pay the big bucks.

One of the great innovations of SaaS is that it shifts the operational cost of running the application from the purchaser to the vendor. However, this also shifts all of the responsibility for making sure the service is secure. The trade off for using SaaS applications that store sensitive data then becomes — is the cost savings from not having to run the application worth the lack of control over the data security. Security questionnaires attempt to assess this trade off.

For the SaaS vendor, these additional security costs are now borne by them, just like the infrastructure and operational costs. There has been a lot of innovation in helping SaaS companies become more efficient in running their multi-tenant offerings. We are working to lower the cost of running distributed applications on-premise to address situations where it just becomes too expensive or too risky for the purchaser to use the application delivered as a multi-tenant SaaS.|||

A few months ago we wrote a blog post suggesting you may want to reconsider having an on-prem offering for your SaaS application. It received a fair amount of attention so we thought we’d write a…