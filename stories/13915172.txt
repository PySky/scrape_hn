An assumption in my previous blog posts was the ability to execute arbitrary assembly code in kernel context. While it is possible to obtain this from a write-what-where vulnerability condition and often from a pool overflow, it does require both a kernel read/write primitive and a KASLR bypass to some kernel driver. If we limit ourselves to using the read/write primitive to perform a data only attack, we can omit the KASLR bypass. This blog post describes how each of the three methods can be converted to a data only attack instead of an actual shellcode.

The token stealing shellcode was explained in the first blog post and begins by fetching the address of the KTHREAD from the GS register. Here we run into a problem, since we are not able to read this using a read primitive. Luckily we may find it from the tagWnd object, Windows 10 is not released with the symbols for tagWnd, but ReactOS has the structures for 32 bit Windows XP, so we can hopefully translate ourselves. The tagWND object has the follow beginning structure:|||

This blog post is an addendum to the three blog posts about Windows kernel 
shellcode I posted based on the techniques by Cesar Cerrudo. You can find 
the previous blog posts here, here and here.

An assumption in my previous blog posts was the ability to execute 
arbitrary assembly code in kernel context. While it is possible to obtain 
this from a write-what-where vulnerability condition and often from a pool 
overflow, it does require both a kernel read/write primitive and a KASLR 
bypass to some kernel driver. If we limit ourselves to using the read/write 
primitive to perform a data only attack, we can omit the KASLR bypass. This 
blog post describes how each of the three methods can be converted to a 
data only attack instead of an actual shellcode.