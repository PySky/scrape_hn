The following is continuation of my recent Packet encryption in multiplayer games – part 1 article.

In this article I’m going to present sample implementation of the encryption helper that might be used to establish secure connection (using Diffi-Helman algorithm) and then securely send and receive messages (using Blowfish algorithm). All based on OpenSSL implementation. Below is how you’re supposed to use the code.

Step 1

 First off, let’s declare some buffer and initialize OpenSSL library.

Note: We’re going to test sending messages of both 8-byte aligned and non-8-byte aligned sizes below. This is particularly interesting due to Blowfish algorithm operating on chunks of 8 bytes.

Step 2

 Next initialize encryption helper for Alice and Bob (why Alice and Bob?). If used for multiplayer game, Alice would only be created on one machine whereas Bob would only be created on another machine. It’s up to user to decide who is Alice and who is Bob but in order to get things working with this library it is necessary that one of them is Alice and the other one is Bob.

Note: the ‘check’ is similar to an assertion macro; the difference is that it evaluates expression regardless of whether assertions are enabled or not.

Step 3

 We’re now going to generate “exchange data” on Alice side. This “exchange data” contains Alice’s public key as well as 2 parameters, P and G, as needed by Diffi-Helman algorithm. Once message is successfully sent (from Alice to Bob), we can mark it as sent.

// Alice generates exchange data and sends it to Bob

Step 4

 Once Bob receives “exchange data” from Alice and verifies its correctness, he can then generate his own “exchange data” (containing Bob’s public key) and send it to Alice. Once sent, Bob marks message as sent.

// Bob receives exchange data and sends another exchange data to Alice

Step 5

 Once Alice receives “exchange data” from Bob, the communication starts. We’re now ready to send and receive messages between Alice and Bob.

Step 6

 Below Bob sends test message to Alice, Alice receives it and verifies that the message is correct.

Step 7

 And now communication going the other way – Alice sends message to Bob.

Step 8

 When done, deinitialize encryption helpers for both Alice and Bob.

Get the source code from here EncryptionHelper.cpp and here EncryptionHelper.h and have fun!

Note: The code has only been tested on windows. Obviously, you’ll need to download OpenSSL library to compile it.|||

The following is continuation of my recent Packet encryption in multiplayer games - part 1 article. In this article I'm going to present sample implementation of the encryption helper that might be used to establish secure connection (using Diffi-Helman algorithm) and then securely send and receive messages (using Blowfish algorithm). All based on OpenSSL implementation.…