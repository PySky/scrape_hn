The typical “Hello, World” is written as follows.

Blink supports values of familiar types like , , and . Additionally, there is a special type to express the absence of value (similar to in Java) and all types in Blink inherit from a supertype .

A comment in Blink starts with . Anything from the symbol to the end of line will be ignored by the Blink interpreter.

Omitting the type of the variable. Blink supports type inference meaning that if a variable is initialized at its declaration then its type can be omitted and Blink will infer the correct type of the variable based on its value. The previous example could have been written like this:

Declaring multiple variables at once. To declare multiple variables, separate them with commas  in the declaration part of the expression.

Each variable can access all the variables declared before it in its initialization expression. So something like the following is perfectly possible.

The above will print

Omitting the curly braces. A final note on the expression is that if the body is made of only one expression, the curly braces can be omitted. The first example could be written more succinctly as follows.

Like in most programming languages, conditions are expressed using an expression.

The condition must evaluate to a value of type . The block can be omitted if needed and the curly braces can be omitted for the or block if the block is made of only one expression.

A expression is used to execute one or more expressions as long as a condition holds true.

Again, the curly braces can be omitted if the body of the is made of only one expression.

Functions are defined using the keyword.

Function parameters in Blink are separated by commas  and enclosed in parenthesis . Each parameter is defined by its name followed by a colon  , followed by its type .

Return type. The return type is defined by adding a colon  followed by the type of the value returned by the function after the parameter list. If the function does not return a value, the return type must be .

However, as a syntactic sugar, if a function does not declare any return type, Blink will automatically assume that the return type is . So the previous example could be written as follows.

Function body. After the return type, comes the equal operator and then the body of the function enclosed in curly braces. There is no return keyword in Blink, the value of the last expression in the body of the function is the value returned by the function.

If the body is made of only one expression, the curly braces can be omitted. Our first example could be rewritten like this:

Classes are defined using the keyword.

This defines a simple (albeit useless) class . Objects of the class can now be created using the keyword.

Properties. A class can have one or more properties declared with the keyword.

A property can be optionally initialized at its declaration. If a property is initialized, the initialization expression will be evaluated when the object is being created.

Properties in Blink are private. They can not be made public. Getters and setters (which are just functions) can be created to access properties outside of the class.

Functions. A class can have functions (or if you prefer).

In the example above, we have a getter and a setter for the property . A more idiomatic way to write those functions would be to omit the curly braces because there is only one expression in the body of each of those functions.

Functions are public by default in Blink. However, it’s possible to make a function private by adding the modifier before the keyword.

Constructor. A class in Blink has one and only one constructor. By default, a class in Blink has a default constructor which takes no parameter. An explicit custom constructor can be defined by adding a list of parameters enclosed in parenthesis to the name of the class.

The constructor parameters automatically act as properties of the class and can be accessed from the body of all the functions in the class or from the initialization expression of any additional property.

The above will print

Inheritance. Inheritance in Blink is expressed with the keyword.

If the class being inherited (the superclass) has an explicit constructor, the inheriting class must honor the superclass’s constructor by passing the arguments necessary to create an object of the superclass.

Overriding functions. The modifier is used to override a function in the superclass.

In the above example, we’re overriding the available in the class. All classes inherit from in Blink.

Just like it’s possible to use arithmetic operators , , or to perform operations between 2 or more s, Blink allows us to define the behavior of the binary operators , , , , and unary operators   and  for our own classes.

A binary operator is defined by adding a function which name is the symbol of the operator to define. For example, let’s define a operator for a class (representing rational numbers like ).

Given two variables and of type , we can now write . Blink automatically converts the expression to the function call .

A unary operator is defined by adding a function which name starts with followed by the symbol of the operator being defined.

In the example above, we’re defining the behavior of the unary   operator on our class . Given a variable of type , we can write . Blink converts the expression to the function call .

Operator overloading is also supported in Blink, meaning that it is possible to define multiple operators, for example, as long as the parameters list of each operator function is different.

For instance, for our class, we may want to add 2 s together but also want to add a and an . Operator overloading allows us to do just that.

With the above example and given 2 variables and of type , we can write expressions like , or .

Everything in Blink is an object. Even primitives like s or s are actually objects. And an arithmetic expression like is, in fact, the function call . This is a neat feature that enables us, among others things, to define operators for our own types in Blink.

To conclude our tour of Blink, it is worth noting that unlike other programming languages like Java or JavaScript, there is no statement in Blink, only expressions (and definitions like function or property definitions). The difference between an expression and a statement is that an expression always evaluates to a value while a statement just performs some action.

For example in JavaScript, the statement executes a certain block of code if a condition is or . In Blink, is an expression and evaluates to a value.

That means, in Blink, it’s perfectly valid to write

will be equal to if or will be equal to if not.

This concludes our quick tour of Blink. As you can see, Blink has the necessary concepts to express almost any program, is simple enough to tackle writing an interpreter for it in a relatively small amount of time and has some interesting features like its usage of objects and expressions.

If you’re ready to jump in, head over to the first article which will give a high level overview of compilers and interpreters.|||

As someone who writes code, you undoubtedly do so using one or multiple programming languages. You probably enjoy writing code in some programming languages because of their elegance, expressive…