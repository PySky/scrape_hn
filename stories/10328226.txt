Bogosort can be described as follows:

This is far too efficient.

Bogobogosort specifies how one should check if the list of numbers is sorted. It does it recursively, because as anyone who knows anything at all about computer science knows, recursion is always good and cool. To check if the list is sorted, use the following procedure:

Bogobogosort was implemented in C++ and timing runs made for sorting n numbers, averaged over 20 trials:

Let B(n) be the time complexity of bogobogosort on an input of size n. From the original analysis of bogosort we expect to try n! times before the random shuffle sorts the list. So, Making a copy of the list is O(n) (assuming the size of the numbers is bounded). To randomize, you can drop all the numbers on the floor. Dropping them is O(1), and it takes O(n) to pick them up and put them back in the computer (assuming you only have O(1) many hands). To check if the original list is sorted we need to bogobogosort the first n-1 elements of the copy, and then see if the last element of the copy is at least as large as the n-1st. If the nth element of the copy isn't maximal we need to randomize the copy again. And, finally, when we have managed to sort the copy, we need to compare it to the original list. So, since the chance that the last element is maximal is at least 1/n, we have: giving Comparing the two n-element lists is O(n), so we have B(n) â‰¤ n!*(O(n) + (n*(B(n-1) + O(1) + O(n)) + O(n)) + O(n))

 = n!*(O(n) + n*(B(n-1) + O(n)))

 = n!*(n*(B(n-1) + O(1) + O(n))

 = n!*(n*(B(n-1) + n*O(1))) using O(n) = n*O(1) and O(1) + O(n) = O(n). Expanding B(n-1) recursively we get Now, the constant O(1) is the same for all terms above, and the nth term bounds the first n-1 terms. So, replacing with the last term throughout, we get by folding the square terms and the leading n into the smaller factorials, and absorbing a 2 into the constant. So where k is any fixed number and we have absorbed factorials less than (k+1)! into the constant. Noting that we could bound each (n-j)! by n! we can simplify the bound to B(n) = O(n!n-k), for any fixed k. Now O(n!n-k) is much better than your guess of O(n!n!), making bogobogosort even more attractive.|||

