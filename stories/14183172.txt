# Videos mentioned:



ðŸ”— Declarative programming: https://www.youtube.com/watch?v=yGh0b...

ðŸ”— Reduce basics: https://www.youtube.com/watch?v=Wl98e...

ðŸ”— Currying: https://www.youtube.com/watch?v=iZLP4...



# Hot spots in the video:

04:23 Expressive 

11:23 Declarative 

15:41 Complexity 

18:06 Social cost 

21:32 Loss of tools 



ðŸ”— mpj on Twitter

https://twitter.com/mpjme



ðŸ”—The camera I use

http://amzn.to/2kwlpAD



ðŸ”— The microphone and sound recorder I use

http://amzn.to/2kwli8e

http://amzn.to/2lcVSfd



ðŸ”— The lights I use

http://amzn.to/2ld8jrX



# Partial script



Today Iâ€™m going to compare templating languages, like Handlebars, to generating DOM with JavaScript, like React does. There are two main arguments for using templating languages - that they are expressive and declarative.



But there are also three big costs of using template languages, complexity, social cost, and loss of tools. 



Five years ago or so, the industry standard way of rendering DOM was to use a template language to glue your business logic together with your HTML. Then a few years ago React arrived on the scene, and did away with templating languages completely, and instead just using a JavaScript in place of the templating language. The native JavaScript approach is gaining a lot of traction, but a lot of developers still hold template languages in high regard, and are not convinced that the native JavaScript approach is a step forward. 



In this video, Iâ€™m not going to talk about some cost and benefits of template languages. Some feel that templates language vs. native JavaScript is just a matter of taste - I donâ€™t agree with that. I totally recognize that computer science isnâ€™t physics and there isnâ€™t a clear-cut right or wrong, but there are benefits and costs that we can and should reason about. 



The two big benefits of templates are that they are expressive and declarative.



Expressive. Templating languages are very expressive, because unlike JavaScript, templating languages are designed just for expressing HTML. 



Declarative. Templating languages are designed to encourage declarative interfaces. By the way, if youâ€™re not sure what declarative programming is you can watch [this video] first and this video is going to make a lot more sense.



But, all technologies have both benefits and costs, and to add a templating language youâ€™re paying with added complexity, social cost, and loss of tools. 



Complexity. Template languages also add complexity, because they introduce an entire little language engine to your stack.



Social cost. Anyone working with your codebase now has to learn this extra little language in addition to JavaScript.



Loss of tools. If youâ€™re using a templating language, youâ€™re throwing away all the power of JavaScript, not just the power of the language itself, but also libraries written in it, and tooling like editors and linters.|||

# Videos mentioned: ðŸ”— Declarative programming: https://www.youtube.com/watch?v=yGh0bjzj4IQ ðŸ”— Reduce basics: https://www.youtube.com/watch?v=Wl98eZpkp-c ðŸ”— Cur...