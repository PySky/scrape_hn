JavaScript has a quite fascinating history. Brendan Eich created on his own the first language prototype in just ten days. Its implementation was highly influenced by the concepts of first-class functions from Scheme and prototypes from Self. Initially it was developed under the name Mocha, but released as LiveScript. The latter name didn’t last long either. Java was so hot back in 1995, that Netscape decided to take marketing move and rename their new language to JavaScript. This decision has greatly influenced the way JavaScript has been perceived for many years. Outward similarities to Java promoted imperative, object-oriented style among developers using it. Ideas borrowed from Scheme have always enabled using functional programming styles as well. However it was never the case until it started to get momentum a few month ago.

A few weeks ago I was working on one of my side projects. At some point I had to randomize the order of items in an array. To my surprise, it turned out there is no existing method baked into JavaScript language ready to use right away. I made a quick research and I figured out that the best approach would be to use the modern version of the Fisher–Yates algorithm:

When you search npm repository for the phrase array shuffle you will discover that all top matches are implemented in JavaScript with the imperative style similar to:

I asked myself, how would this code look like if it was written using declarative style. In this post I’m going to explain how the function presented above can be transformed to functional programming world step by step. All refactorings are accompanied with the corresponding FP paradigms.

Functional programming is not a new concept. The idea of building software around functions has been around for decades. Aforementioned Scheme language is dialect of another programming language Lisp, which was originally specified in 1958.

I started with something really simple and extracted a general-purpose function out of  expression which returns the number of items in the array.

Newly introduced function uses an arrow function expression and doesn’t change the code too much.

Functions can be used in JavaScript the same way as you use variables. They can be assigned to variables or passed around as param just like any other type.

I noticed that there are 2 lines of code where a similar operation is performed. I introduced new function which returns the nth element of the given list.

I not only assigned function to  variable, but I also constructed this expression in a way where it returns another function. That’s why it needs to be called twice to return the final result.

The term comes from mathematics. Higher-order functions allow us to create different form of abstractions such as functions creating new functions, functions modifying other functions or even functions that can control flow of the program.

I already used a higher-order function above.   creates another function.

Next, I turned my attention to the line where   gets updated. I wrote   function to put it in place of expression. It returns a new list with the given element prepended to another list.

This is another higher-order function, which behaves in a similar way to what I presented before.

Closures make it possible for the inner function to reference to a variable from the outer function. This access is persisted, even after the parent function has closed.

I implemented aforementioned   and   functions in a way where they use closure to remember variables. It might not be obviously visible from the code presented before. That’s why I want to show more examples which should better explain how it works.

Currying is a method where function with multiple arguments is transformed into a chain of one-argument functions. It combines two aforementioned techniques: higher-order functions and closures.

I would like to relate   and   utilities again. They represent also multi-argument functions which are expressed in a curried form.

The next line of code that caught my eye was one where randomly picked element gets replaced with the last element in the range. I declared curried function   which returns a new copy of the list with the item at the provided index replaced with the given value.

I partially applied function’s arguments twice to increase readability of this code. First, I declared   method which remembers the index where update operation is going to be performed. Next, I introduced   which stores the last value in the current range of the scratch array. Finally, I updated the line to replace   variable with the result of   call with   as its last param passed.

Purity is also known as referential transparency and it means that a function call can be replaced with its corresponding return value without changing the behaviour of the program. A pure function also doesn’t depend on or modify variables outside of its scope.

All functions introduced so far:  , , and are pure. In case of  method I had to use special strategy to avoid the side causes. I copied first a direct input list to protect its value against mutation via reference.

I didn’t like the fact that we keep the size of   array on all while loop iteration when each time the last element becomes utterly unnecessary. It definitely makes it harder to understand how array shuffle algorithm works. I decided to write   utility which returns all but the last element of the given list.

This function is also pure. I used Array’s   which does not change the array which invokes it. I purposely avoided using   which is a similar method, but it mutates the array that calls it. I added   call after the line where a randomly picked item got replaced with the last element. I hope it made it clear that on every iteration the number of processed items shrinks.

JavaScript methods like or are impure by design. Behind the scenes, they use global variables to decide if they should change output on each invocation. Another example of impure functions are those having any form of side effects like network connections, filesystem operations or user mouse and keyboard events.

I identified the chunk of code which contains   and therefore it can’t be refactored to be pure. I extracted function to separate the impure part from the rest of code. I decided to make this utility work with a list instead of   to align its signature with other functions.

It was possible thanks to the previously introduced change that added step where   call keeps   variable and the length of   list in sync.

An immutable value can never be modified after it has been created. In JavaScript, numbers and strings are immutable by design, but it doesn’t apply to object or arrays. In the latter case, immutability can be enforced by making sure that a new copy is always created whenever change is required. I have already presented an example of this technique when  or   functions were introduced.

As I shared above that general tactic is getting rid of mutable variables. There are three of them here. It started with   variable which can be inlined after I introduced   transformation. It turned out that I can move computation which decrements   value to the new function called  .

It was safe to eradicate   variable completely once its decrementation got replaced with   call.

I reached the point where I covered most of the fundamentals of functional programming. It seems like a good moment to wrap up this post. So far, I have introduced a bunch of small and simple functions to learn all paradigms. On the one hand it admittedly increased number of lines of code, but on the other hand our code better describes what computation should be performed to achieve desired result.

In Part 2 of the series, I’m going to continue this refactoring journey. I want to take a deeper dive and discuss more advanced topics like recursion and function composition. Finally I plan to glue everything together using point-free style. In the meantime you can check my GitHub repository where I documented all my explorations with atomic commits (spoiler alert: it contains final version of declarative implementation, although achieved with a slightly different refactorings).|||

JavaScript has a quite fascinating history. Brendan Eich created on his own the first language prototype in just ten days. Its implementation was highly influenced by the concepts of first-class functions from Scheme and prototypes from Self. Initially it was developed under the name Mocha, but released as LiveScript. The latter name didn't last long either. Java was so hot back in 1995, that Netscape decided to take…