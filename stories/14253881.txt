A couple of weeks ago, our product manager announced what we’ll be focusing on the next couple of sprints: Emails. We want to make the automatically generated emails better. They will be responsive and have a more complex layout.

What does a web developer do when faced with such a task?

That’s right. You assign the story to a colleague and take 2 weeks off.

But maybe there is a way. Maybe emails can be a bit less painful to work with. At Séntisis we already used React to make PDF generation easier.

The same approach can be used with emails. We need to follow two steps only: coding the actual email HTML/CSS with React components and generate them in NodeJS.

The basic idea is to take advantage of the server-side rendering abilities of React to get a compiled HTML file ready to be sent to the user.

I’ve created an example project. You can use it to bootstrap your own emails. All the code in this article is extracted from the project. Check it out on GitHub.

Although nowadays more and more email clients support including styles in the , to ensure the maximum compatibility, it’s recommended to use inline styles. We can do this directly with React.

You must always keep in mind that the email will only be rendered on the server. You won’t have access to the DOM.

Maybe the most annoying part of creating emails is writing all those nested tables.

To make our code cleaner (and thus more maintainable), we can create a component to help us out with that:

Note: This is a simplified version of the one used in the example repository

This allows us to avoid writing a full table every time, hiding the complexity of the table layout from us:

Good news: all email clients which support media queries (now Gmail too) also support styles included in the . Just recently Gmail added support too. This is great as we can’t write media queries with inline styles.

To make our heading smaller on mobile devices, we can just add a class to the element:

And then import a stylesheet in :

It’s important we include the stylesheet in and not directly in : CSS import is only available trough Webpack during development.

We’ll use a different strategy to include it in the compiled email. Everything inside is only seen by Webpack.

Before even considering to generate the email, we need to transpile the React files with Babel. If we try to require the component file straight away we’ll get errors. We need to get rid of JSX and ES6 imports first!

At Séntisis we build the emails as a separate git repository. We are then installing it as a module dependency with npm. I recommend this approach as it allows us to run the transpilation with the npm install hook.

Supposing we’re in a project that was created with , we can just modify the as follows:

The folder contains simply two files:

The creation of the final email is pretty straightforward:

There are no big libraries or complex snippets of code. We are just taking advantage or the amazing static rendering capabilities of React, combined with a bit of out-of-the-box thinking.

For us, it’s working well. We are now able to put more logic in the email templates, simplifying the backend code. The layouts are also significantly more maintainable, by hiding the maze of tables behind React components.|||

Maybe emails can be a bit less painful to work with.