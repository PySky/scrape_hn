Of course, its authors decided to create a custom cache system inside the framework, but it’s not as fast as it is supposed to be. In one of our project, the e-commerce shop developed with Chilid Agency for fastidious UK client, the application could only handle several requests per second in the beginning, which is not a satisfying result when you know more details about the expected website traffic – a few hundred users at once.

Basing on our previous experience, we decided to use Varnish as the main caching system. We chose it because the lion’s share of the website consists of static content. Well… almost everything except for the user’s basket, checkout, accounts and products availability.

Varnish is an http server accelerator which should work as the first layer and proxy (reverse proxy cache to be precise) between end-users and Apache/nginx server. That means that Varnish handles every request at the http port 80 and decides if it should be delivered from a saved cache or from Apache. When Varnish is unable to find any result in the resources, it calls Apache itself and returns the request to the cache and to the user.

Kris Wallsmith, during his presentation on SymfonyCon, said that when you can see users’ requests and not Varnish in Apache then there has to be something wrong with your configuration. At this point it may seem that Varnish caches only full pages. But, it works integrally with ESI and that feature allows you to use special HTML tags inside your code where you declare blocks which should be cached. As the result, you can cache only selected areas on your site without caching the rest. But be careful, each ESI tag is treated by Varnish as a new request to Apache, so they should have different expiration times.

We did wide research to avoid implementing a connection between Magento and Varnish. And I must admit that it was challenging to find a proper plugin. But finally we’ve found it: Turpentine. From the get-go this module looked reliable and accurate for us.

Installation is quite simple, but configuration brings a lot of problems – the plugin needs to be installed and enabled in the Magento administration panel and only then we are able to configure.

First of all, there is no proper naming and when we saw the backend host in the Magento plugin configuration and in the Varnish config file in the server, we thought that they were the same thing…but no, they weren’t. It is the http port where Varnish is working and handling requests. In our case, in the Magento plugin configuration we have to indicate the port 80 as the backend host option and then it equals to Varnish’s configuration in /etc/default/varnish file, where -a option determines a listened port:

The next step is changing the Apache port from 80 to 81, because two different services can’t listen to the same port. In our case we edited /etc/apache/ports.cfg file and changed two lines:

Afterwards, we had to reconfigure our virtual hosts in the same way. After restarting both services our server should start the cooperation with Varnish, and only Varnish will be able to call a request to Apache.

In the default configuration /etc/varnish/default.vcl file seems to be uncomplicated and you may think that it needs only a port change. Well, you’re just as wrong as we were. You need to download the vcl file from Magento Cache Management (you can find this page in System tab in menu) and download the proper file.

After file swapping and restarting Varnish, its cache needs to be enabled on the same page in administration panel.

And that’s it – now almost full content is cached. The caching system skips requests with POST data sent and called from https protocol. If you don’t want to cache some of the boxes, you can define them in the Magento XML configuration. Please find more details in the official plugin’s documentation.

With the default Magento cache, the application handled about 60 requests per second during ab test, and after enabling Varnish that value increased to 950 requests! The end user can feel the difference too – Firebug reports that the main page is loading about 1.7 seconds without Varnish, and 134 ms with it.

The Varnish cache seems to be a good solution for caching pages where most content is static or can be synchronized at intervals. It cuts the loading time and increases performance about ten times without overloading the server’s resources.

Text comes from 2014. Back then I was working on Varnish 2.|||

Magento has become a really huge, heavy, and slow tool. How to speed up this engine?