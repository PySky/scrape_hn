This started out as a check on some performance problems which were fixed for the latest version of JOE (version 4.3), but is interesting in its own right as a comparison between some text editors.

(*) Windows: yes if the editor allows multiple views of the same buffer on the screen at the same time.

ne uses the syntax highligher code from Joe.

Micro is written in Go.

RSS is amount of physical memory used in KiB. If the editor starts multiple processes, all are included.

Older versions of JOE had trouble with JSON and XML files. The issue was that the context display (the part of the status line which shows the name of the current code function you're in) used a bad algorithm.

Visual Studio Code jumps to the end of the file quickly, but then takes many seconds for the highlighting to complete.

Note that time is total accumulated CPU time of all processes started by the editor. I skip the "exit the editor" part for editors which are indirectly launched (sublime, atom, code, notepad++). For these the CPU time is determined from "ps" or "top -p" after the operation is complete, but while the editor is still running. For editors which are directly launched, I prefix the shell command with "time".

Time used to load test.xml, split window, jump to end of file in other window, insert '<!--' at beginning (so that highlighting of the entire file changes and appears in the window at the end of file) and then exit.

I could not figure out how to have two views on the same buffer in Micro, NE, mcedit or gedit, so instead I inserted the '<!--' and then jumped to the end of the buffer.

Micro did not recolor the when I inserted '<!--'. It wants to recolor only if the final '-->' exists. In fact Micro did not recolor when I put the '-->' at the end of the file either. Perhaps it gives up recoloring when the file is too large. In any case, I notice that Micro is very slow when you insert characters at the end of the test.xml file.

Jedit did not recolor the other window until after I switched to it and moved the cursor around a little.

Jed is not in this test because it can not highlight XML.

Atom does not seem to highlight large XML files until you "split down" to open a second windows onto the file.

Notepad++ was very slow when I had multiple views open of the same large XML file.

Time used to load test.xml, and then execute 100,000 replacements (of "thing" with "thang"), and then exit.

mg has a memory leak in its search and replace code.

Time used to load test.xml, and then replace the regular expression "100|200" with "EXACT".

In emacs, I used replace-regexp. It's interesting that this is faster than query replace.

JOE, ED and NVI swap large files to disk, so this test is no problem for them. JOE's RSS is 65756 KiB when the huge file is loaded. NVI's is 2088!

MCedit loads the file quickly into its simple gap buffer. However, the gap is locked to the cursor and distant cursor motions are slow since all of the intervening text has to be copied. Even so, for quick file viewing it's impressive. MCedit's RSS is 3 GB when the file is loaded.

I'm amazed that Sublime Text is also able to load a 3 GB file. When loaded, Sublime's RSS is 1384944 KiB. Sublime is nicer than JOE in that it shows a progress bar while the huge file is loading.

Gedit shows the beginning of the file and a progress bar while the file is loading.

This was slow in older versions of JOE.

I could not quickly figure out how to reformat a paragraph in the other editors.

(*) Micro does not have a paragraph reformat capability, but I notice that it takes 65 seconds to load longlines.txt.|||

Contribute to joes-sandbox development by creating an account on GitHub.