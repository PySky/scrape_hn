By default, the service stores sessions in redis, and transports sessions to clients in cookies. However, these are easily customizeable. For instance, the storage interface only implements three methods:

Benchmarks require a redis-server running. Set the environment variable, otherwise the benchmarks look for ":6379".

By default, the service stores sessions in redis, and transports hashed sessionIDs to clients in cookies. However, these are easily customizeable through the creation of custom structs that implement the interface.

The general flow of the session service is as follows:

Session is the struct that is used to store session data. The JSON field allows you to set any custom information you'd like. See the example

IssueUserSession grants a new user session, writes that session info to the store and writes the session on the http.ResponseWriter.

This method should be called when a user logs in, for example.

ClearUserSession is used to remove the user session from the store and clear the cookies on the ResponseWriter.

This method should be called when a user logs out, for example.

GetUserSession returns a user session from the hashed sessionID included in the request. This method only returns valid sessions. Therefore, sessions that have expired or that fail signature verification will return a nil pointer.

ExtendUserSession extends the ExpiresAt of a session by the Options.ExpirationDuration

Note that this function must be called, manually! Extension of user session expiry's does not happen automatically!

Tests are broken down into three categories: unit, integration and e2e. Integration and e2e tests require a connection to a redis server. The connection address can be set in the environment variable. The default is ":6379".

To run only tests from one of the categories:

To run only unit and integration tests:

The following example is a demonstration of using the session service along with a CSRF code to check for authentication. The CSRF code is stored in the user.Session JSON field.

main ( ) SessionJSON is used for marshalling and unmarshalling custom session json information. We're using it as an opportunity to tie csrf strings to sessions to prevent csrf attacks { } *sessions. = http. ( (w http. , r *http. ) { , () err != { log. ( , err) http. (w, , http. ) } { CSRF: csrf, } , json. (myJSON) err != { log. ( , err) http. (w, , http. ) } , sesh. ( , (JSONBytes[:]), w) err != { log. ( , err) http. (w, , http. ) } log. ( , userSession) note: we set the csrf in a cookie, but look for it in request headers http. { Name: , Value: csrf, Expires: userSession. , Path: , HttpOnly: , Secure: , note: can't use secure cookies in development } http. (w, &csrfCookie) w. (http. ) }) = http. ( (w http. , r *http. ) { , sesh. (r) err != { log. ( , err) http. (w, , http. ) } userSession == { http. (w, , http. ) } log. ( , userSession. . ()) {} json. ([] (userSession. ), &myJSON); err != { log. ( , err) http. (w, err. (), http. ) } log. ( , myJSON) note: we set the csrf in a cookie, but look for it in request headers r. . ( ) csrf != myJSON. { log. ( ) http. (w, , http. ) } note that session expiry's need to be manually extended err = sesh. (userSession, r, w); err != { log. ( , err) http. (w, , http. ) } log. ( , userSession. . ()) need to extend the csrf cookie, too http. { Name: , Value: csrf, Expires: userSession. , Path: , HttpOnly: , Secure: , note: can't use secure cookies in development } http. (w, &csrfCookie) w. (http. ) }) = http. ( (w http. , r *http. ) { , sesh. (r) err != { log. ( , err) http. (w, , http. ) } userSession == { http. (w, , http. ) } log. ( , userSession) {} json. ([] (userSession. ), &myJSON); err != { log. ( , err) http. (w, , http. ) } log. ( , myJSON) note: we set the csrf in a cookie, but look for it in request headers r. . ( ) csrf != myJSON. { log. ( ) http. (w, , http. ) } err = sesh. (userSession, w); err != { log. ( , err) http. (w, , http. ) } need to clear the csrf cookie, too time. (). (- * time. ) http. { Name: , Value: , Expires: aLongTimeAgo, Path: , HttpOnly: , Secure: , note: can't use secure cookies in development } http. (w, &csrfCookie) w. (http. ) }) () { store. (store. {}) , auth. (auth. { Key: [] ( ), }) err != { log. (err) } transport. (transport. { HTTPOnly: , Secure: , note: can't use secure cookies in development! }) sesh = sessions. (seshStore, seshAuth, seshTransport, sessions. {}) http. ( , issueSession) http. ( , requiresSession) http. ( , clearSession) log. ( ) log. (http. ( , )) } () ( , ) { ([] , ) , io. (rand. , b); err != { , err } base64. . (b), }|||

A dead simple, highly performant, highly customizable sessions service for go http servers.