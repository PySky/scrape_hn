and that just work

The argument is either a single path given as a string or an array of such strings.

On success, the promise resolves to an array of strings which holds the paths of all directories that were created. If no directories were created, resolves to an empty array.

On error, rejects with an object of the form , where is the error and is an array (possibly empty) of all directories that were created before the error occurred.

The following example makes use of async/await, but and can be used if preferred:

{ } ( ) () { { * dirs will be an array of the directories which were created. * That means the value will be one of the following, depending * on which directories already existed * (Note: The ordering within the array is not guaranteed) ( ) Same as above, but takes into account all three strings ([ , , ]) } ({err, dirs}) { * dirs is just like dirs above, and contains the directories which * were created before the error occurred } }

The argument is either a single path given as a string or an array of such strings.

On success, the promise resolves to an array of strings which holds the paths of all directories that were deleted. If no directories were deleted, resolves to an empty array.

On error, rejects with an object of the form , where is the error and is an array (possibly empty) of all directories that were deleted before the error occurred.

The following example makes use of async/await, but and can be used if preferred:

{ } ( ) () { { * dirs will either be the singleton array ['just/one/dir'] if the * directory was deleted, or an empty array if the directory ( ) * Same as above, but takes into account all three strings. * Thus, dirs2 may have from 0 to 3 elements * (Note: The ordering within the array is not guaranteed) ([ , , ]) } ({err, dirs}) { * dirs is just like dirs above, and contains the directories which * were deleted before the error occurred } }

It's not nice to litter a user's filesystem with unnecessary directories when your program crashes, fails to complete, or is aborted. Fortunately, Commandir makes it super easy for your program to clean up after itself!

For clarity, the error catching in this example has been omitted. But in almost all use cases (including this one), you should be catching errors.|||

commandir - :open_file_folder: Effortless mkdir and rmdir for Node.js