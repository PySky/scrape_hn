The purpose of this document is to describe the reasoning behind the inclusion of the keyword in standard C++, and explain where, when, and how it can and can't be used.

Note: This page is correct (AFAIK) for C++98/03. The rules have been loosened in C++11.

There is a use of that is entirely distinct from the main focus of this discussion. I will present it first because it is easy. It seems to me that someone said "hey, since we're adding anyway, why not make it do this" and people said "that's a good idea."

Most older C++ books, when discussing templates, use syntax such as the following:

I know when I was starting to learn templates, at first I was a little thrown by the fact that was prefaced by , and yet it was possible to instantiate that template with primitive types such as . The confusion was very short-lived, but the use of in that context never seemed to fit entirely right. Fortunately for my sensibilities, it is also possible to use :

This means exactly the same thing as the previous instance. The and keywords can be used interchangeably to state that a template parameter is a type variable (as opposed to a non-type template parameter).

I personally like to use in this context because I think it's ever-so-slightly clearer. And maybe not so much "clearer" as just conceptually nicer. (I think that good names for things are very important.) Some C++ programmers share my view, and use for templates. (However, later we will see how it's possible that this decision can hurt readibility.) Some programmers make a distinction between templates that are fully generic (such as the STL containers) and more special purpose ones that can only take certain classes, and use for the former category and for the latter. Others use exclusively. This is just a style choice.

However, while I use in real code, I will stick to in this document to reduce confusion with the other use of .

This discussion I think follows fairly closely appendix B from the book C++ Template Metaprogramming: Concepts, Tools, and Techniques from Boost and Beyond by David Abrahams and Aleksey Gurtovoy, though I don't have it in front of me now. If there are any deficiencies in my discussion of the issues, that book contains the clearest description of them that I've seen.

There are two key concepts needed to understand the description of , and they are qualified and dependent names.

A qualified name is one that specifies a scope. For instance, in the following C++ program, the references to and are qualified names:

In both cases, the use of and began with .

Had I decided to bring and into scope with a declaration or directive*, and used just " " by itself, they would have been unqualified names, because they would lack the .

Note, however, that if I had brought them into scope with but still used , it remains a qualified name. The qualified-ness of a name has nothing to do with what scope it's used in, what names are visible at that point of the program etc.; it is solely a statement about the name that was used to reference the entity in question. (Also note that there's nothing special about , or indeed about namespaces at all. is a nested name as well.)

A dependent name is a name that depends on a template parameter. Suppose we have the following declaration (not legal C++):

The types of the first three declarations are known at the time of the template declaration. However, the types of the second set of three declarations are not known until the point of instantiation, because they depend on the template parameter .

The names , , and are called dependent names, and the types they name are dependent types. The names used in the first three declarations are called non-dependent names, at the types are non-dependent types.

The final complication in what's considered dependent is that typedefs transfer the quality of being dependent. For instance:

is still considered a dependent name despite the type variable from the template declaration not appearing.

Note: If you're know some advanced type theory, note that C++'s notion of a dependent name has almost nothing to do with type theorists' dependent types.

Note that while there is a notion of a dependent type, there is not a notion of a qualified type. A type can be unqualified in one instance, and qualified the next; the qualification is a property of a particular naming of a type, not of the type itself. (Indeed, when a type is first defined, it is always unqualified.)

However, it will be useful to refer to a qualified type; what I mean by this is a qualified name that refers to a type. I will switch back to the more precise wording when I talk about the rules of .

So now we can consider the following example:

What did the programmer intend this bit of code to do? Probably, what the programmer intended was for there to be a class that defined a nested type called :

and for to be called with an instantiation of being that type:

In that case, then line 3 would be a declaration of a variable called that would be a pointer to an object of type (in the case of , , making a double-indirection pointer to an int). So far so good.

However, what the programmer didn't expect is for someone else to come up and declare the following class:

and call instantiated with it:

In this case, line 3 becomes a statement that evaluates an expression which is the product of two things: a variable called (which may be undeclared or may be a name of a global) and the static variable .

Uh oh! The same series of tokens can be parsed in two entirely different ways, and there's no way to disambiguate them until instantiation. C++ frowns on this situation. Rather than delaying interpretation of the tokens until instantiation, they change the languge:

Before a qualified dependent type, you need

To be legal, assuming the programmer intended line 3 as a declaration, they would have to write

Without , there is a C++ parsing rule that says that qualified dependent names should be parsed as non-types even if it leads to a syntax error. Thus if there was a variable called in scope, the example would be legal; it would just be interpreted as multiplication. Then when the programmer instantiated with , there would be an error because you can't multiply something by a type.

states that the name that follows should be treated as a type. Otherwise, names are interpreted to refer to non-types.

This rule even holds if it doesn't make sense even if it doesn't make sense to refer to a non-type. For instance, suppose we were to do something more typical and declare an iterator instead of a pointer to an iterator:

Even in this case, is required, and omitting it will cause compile error. As another example, typedefs also require use:

Here, in excruciating detail, are the rules for the use of . Unfortunately, due to something which is hopefully not-contagious apparently affecting the standards committee, they are pretty complicated.

Again, these rules are for standard C++98/03. C++11 loosens the restrictions. I will update this page after I figure out what they are.|||

