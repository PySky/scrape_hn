Finding a reasonably-priced apartment in the Bay Area can be a stressful job. After factoring in the pressure of an expiring lease, making a poor decision can be even easier. One approach to weeding out the influx of duplicated, spammy, and unwanted postings is to use a bot and a set of filters. Such a bot could crawl various apartment listing sites, match all listings against your filters, and report to you in whichever format you prefer: email, HipChat, IRC, RSS, etc. Such a bot may look something like this.

Arguably the most well-known apartment finding bot was created and documented by Vik Paruchuri here. It takes a very similar approach to what I’ve done, but uses imperative Python and Slack. For those interested in researching such a both in Python, that’d be a great resource. For my research, a bot in Clojure would prove to be more fun to write.

Padwatch is an apartment finding bot written in Clojure, which is designed to work with Craigslist and Zillow. Both sources provide HTML content which follows specific patterns and is “scrapable” in an automated fashion. The key behind the logic for doing web scraping in Clojure is Enlive; it’s superb for performing queries on HTML data.

Let’s say the goal is to pull out some Craigslist apartment information. It would be possible to use the following to download and parse the HTML into a Clojure data structure:

From there, it’s possible to make queries on that data. By inspecting the HTML in a browser, it’s clear that each apartment listing is in a tag and has a class of . It’s possible then, with Enlive, to pull out all entities which match that pattern:

After that selection, is just a Clojure vector, where each element represents the contents of the matched entity. Now, the HTML of a given row contains something like this:

To pull out that data into our row data, it’s possible to do the following:

As is hopefully quite clear, with a number of pure, concise functions, it’s possible to extract a great deal of information about a given apartment listing. The benefit of having these functions be individual and pure is that they’re both composable and easy to debug/reason about. That is, a function like has the simple task of selecting some data and transforming some other data before returning it. The reader of the function doesn’t need to worry about global state, which may be mutated, affecting the result of the function. The reader also needn’t worry about thread safety, since these pure functions are using Clojure’s persistent, immutable data structures. This is the benefit of functional programming with Clojure.

By combining those functions together, in a reduction, it’s straightforward to build up a model of a given listing.

For easy IRC access in Clojure, it’s likely you’ll turn to the late Raynes’ irclj. The API is minimal and can be wrapped with just a few lines.

From there, reporting listings as they come in should be no problem. To make the output more terse, some URL shortening can specific formatting could be applied.

Padwatch also takes advantage of a few other free services, to improve the reported data. Among them, WalkScore is notable for having a simple API. After signing up and getting a free API key, one can make a limited number of requests per day. Since most Craigslist apartment listings contain the geo tag of the apartment, that information can be sent to Walkscore in order to get accurate information regarding the proximity of shops, transit, and landmarks.

Some listings, however, don’t contain any sort of positional information, aside from the street address. To work around that, Padwatch uses the free Census Geocoding service in order to turn street addresses into latitude & longitude pairs. That information can then be sent into WalkScore to get accurate results.

Since Padwatch is written in Clojure, using its idioms, configuration is done in a declarative EDN file. Fortunately, EDN’s format is just Clojure data, so, since Clojure is homoiconic, it reads just like Clojure code.

The structure of the config map sets up some ranges and limits for prices, walkscores, bed/bathrooms, etc. There’s also a map of sources, to provide source-specific configuration. Sources include Craigslist, Zillow, Walkscore, and Census Geocoding. Here’s an example :

Craigslist, Zillow, and likely most other apartment listing websites have listed, in their terms of service (to which you agree by using their service), that scraping their data with bots is not permitted. You need to know this.

To me, this was a perfect use case for Clojure: data in, data out. Lots of pure transformations, querying of deep data structures, and the occasional side effect (writing to the db to minimize duplicates, reporting listings to IRC). If you’re interested in learning more about Clojure, I recommend, first and foremost, you read through Brave Clojure.|||

I'm a systems-level functional programmer who's passionate about writing the safest code possible.