Redis (REmote DIctionary Server) is an immensely popular in memory key-value store which also provides for optional durability, partitioning, replication and a host of other features.  It is the most popular key-value database currently and is known for it’s simplicity, low memory footprint and having a low learning curve. Redis is also referred to as a data structure server it has support for atomic operations on data structures like hashes, lists, sets, sorted sets, bitmaps and hyperloglogs. In this post we will look at the set data type provided by Redis along with it’s usage and real life use cases.

Redis Sets are unordered collection of Strings (String is the basic Redis value which can contain almost anything) that provides constant time addition, removal and membership checks. Redis also supports reasonably fast union, intersection, subtraction operations between sets. As expected, it does not allow repeated values.

Here are some examples of Redis sets in action from the . In the example below key represents a set of all users registered on a website, represents active users and represents inactive users (users who haven’t visited the site for a while).

Other important set commands are SUNION (set union), SPOP (randomly remove an element), SREM (remove one or more elements). The complete list of set related Redis commands can be found here.

Redis internally stores Sets as dictionaries. Dictionaries in Redis are implemented as hash tables that use the hash function MurmurHash2 and grow via incremental resizing. Hash collisions are handled by chaining. Sets have a special encoding for small sets when all members of a set are in radix 10 in the range # of 64 bit signed integers called IntSets. This is essentially a sorted array of integers. Searches within the array are performed through binary search. Obviously, this implementation is efficient for very small sets. The size up to which this encoding is used is governed by config parameter. Default value is 512. A good description of internal data structures used by Redis can be found here.

A very small list of possible applications of Redis Sets:

Let’s pick up a real life example and explore set related use cases further.

Let’s say you are the owner for a very large online book store that lists millions of titles. Your primary database is MongoDB and it performs fairly well for most of your use cases with the correct use of indexing, sharding etc. Here’s a partial DB document schema for the collections:

You also record transactions in a collection called which may look like:

Obviously, this is a highly simplified example which makes broad assumptions. Our intent is to show a Redis set example in a (near) real-world scenario.

 Ok so now, you, as the store manager, want a Visual Profiler tool to analyze the relationships and customer behavior across categories for e.g. What is the most popular category, Do people looking at or buying Science Fiction also look at Non Fiction etc. You want to be able to do this in real-time i.e. the profiler’s UI will tick boxes, buttons that can let you change parameters and view results (almost) immediately.

Doing such operations on MongoDB will entail doing rather involved queries to join various categories, tags and other data that you might care about. With a working set that doesn’t fit in memory these wouldn’t the fastest operations. For e.g. Finding all books sold today that were Fiction but not Science Fiction will involve querying the collection for today’s transactions. Then iterating over the SKUs for collecting their categories and then doing $in/$nin operations.

Let’s see how would be handle this by bringing Redis into the mix. At the end of each day, daily scheduled jobs can run over these MongoDB collections to create Redis sets. The kind of sets you want to create will depend on the kind of filters you want to support on your front end. For e.g. Say we want to support category related queries we will want to create sets like:

The cat:sku:* sets will contain SKUs of books sold/viewed today in that category. Similarly, cat:cid:* will contain the CID of customers who bought/sold books in that category. A sample of queries we can answer with these sets are:

This itself gives us very powerful querying capabilities. Let’s add more sets! Say, we create additional sets based on book ratings. For e.g.

Equipped with these sets, you are now quickly find out things like:

Now let’s say you want to send a discount coupon to all the customers who bought an Astrology book today with a rating of 2 or below (as an apology for the bad experience of having to read that book!) you can export that list if s out and sent it to your email application. Similarly, you could create sets for other things you may wish to expose as filters in your Visual Profiler like tags, price ranges etc.

The advantages of using Redis sets are obvious here. The in-memory store will lead to really fast access so that the front-end feels snappy. Additionally, Redis set operations are either constant time or linear.

In this post, we introduced with examples one of the most useful Redis data structures: Sets. Here are the rest of our posts in the Redis data structures series

 Redis hashes

 Redis bitmaps

 Redis Sets

 Redis Sorted Sets|||

Redis Sets are unordered collection of Strings that provides constant time addition, removal and membership checks.