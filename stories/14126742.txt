CoffeeScript 2 aims to output as much idiomatic ES2015+ syntax as possible with as few breaking changes from CoffeeScript 1.x as possible. Some breaking changes, unfortunately, were unavoidable.

Per the ES2015 spec regarding function default parameters and destructuring default values , default values are only applied when a value is missing or undefined . In CoffeeScript 1.x, the default value would be applied in those cases but also if the value was null .

Bound generator functions, a.k.a. generator arrow functions, aren’t allowed in ECMAScript . You can write function* or => , but not both. Therefore, CoffeeScript code like this:

ES2015 classes and their methods have some restrictions beyond those on regular functions.

Or if you know that the parent function doesn’t require arguments, just call super() :

Due to the switch to ES2015 super , this is no longer supported. The above case could be refactored to:

In CoffeeScript 1.x it is possible to use super in more than just class methods, such as in manually prototype-assigned functions:

Due to the hoisting required to compile to ES2015 classes, dynamic keys in class methods can’t use values from the executable class body unless the methods are assigned in prototype style.

Code blocks interspersed with lists may need to be refactored. In general, code blocks should be separated by a blank line between documentation, and should maintain a consistent indentation level—so an indentation of one tab (or whatever you consider to be a tab stop, like 2 spaces or 4 spaces) should be treated as your code’s “left margin,” with all code in the file relative to that column.

The CoffeeScript 1.x implementation of Literate CoffeeScript relies on indentation to tell apart code blocks from documentation, and as such it can get confused by Markdown features that also use indentation like lists. In CoffeeScript 2 this has been refactored to now use Markdown-It to detect Markdown sections rather than just looking at indentation. The only significant difference is that now if you want to include a code block in documentation, as opposed to the compiler recognizing that code block as code, it must have at least one line fully unindented. Wrapping it in HTML tags is no longer sufficient.

Fixes for block comment formatting, compilation, implicit calls against control structures, implicit invocation of a try/catch block, variadic arguments leaking from local scope, line numbers in syntax errors following heregexes, property access on parenthesized number literals, bound class methods and super with reserved names, a REPL overhaul, consecutive compiled semicolons, block comments in implicitly called objects, and a Chrome bug.

Bugfix release for classes with external constructor functions, see issue #1182.

When running via the executable, and friends now report instead of . Better compatibility with Node.js 0.4.x module lookup changes. The output in the REPL is now colorized, like Node’s is. Giving your concatenated CoffeeScripts a name when using is now mandatory. Fix for lexing compound division as a regex accidentally. All tags should now execute in the order they’re included. Fixed an issue with extended subclasses using external constructor functions. Fixed an edge-case infinite loop in . Fixed exponential slowdown with long chains of function calls. Globals no longer leak into the CoffeeScript REPL. Splatted parameters are declared local to the function.

Fixed a lexer bug with Unicode identifiers. Updated REPL for compatibility with Node.js 0.3.7. Fixed requiring relative paths in the REPL. Trailing and are now optimized away. Stopped requiring the core Node.js module for back-compatibility with Node.js 0.2.5. Fixed a case where a conditional would cause fallthrough in a statement. Optimized empty objects in destructuring assignment.

CoffeeScript loops no longer try to preserve block scope when functions are being generated within the loop body. Instead, you can use the keyword to create a convenient closure wrapper. Added a flag for passing through options directly to the executable. Better behavior around the use of pure statements within expressions. Fixed inclusive slicing through , for all browsers, and splicing with arbitrary expressions as endpoints.

The REPL now properly formats stacktraces, and stays alive through asynchronous exceptions. Using now prints timestamps as files are compiled. Fixed some accidentally-leaking variables within plucked closure-loops. Constructors now maintain their declaration location within a class body. Dynamic object keys were removed. Nested classes are now supported. Fixes execution context for naked splatted functions. Bugfix for inversion of chained comparisons. Chained class instantiation now works properly with splats.

0.9.5 should be considered the first release candidate for CoffeeScript 1.0. There have been a large number of internal changes since the previous release, many contributed from satyr’s Coco dialect of CoffeeScript. Heregexes (extended regexes) were added. Functions can now have default arguments. Class bodies are now executable code. Improved syntax errors for invalid CoffeeScript. now works like , and cannot be assigned a new value. There was a precedence change with respect to single-line comprehensions: used to parse as by default … it now parses as .

CoffeeScript now uses appropriately-named temporary variables, and recycles their references after use. Added support for Node.js 0.3. Loading CoffeeScript in the browser now adds just a single object to global scope. Fixes for implicit object and block comment edge cases.

CoffeeScript statements now compile into JS statements — they previously compiled into chains for JavaScript 1.3 compatibility. Soaking a function invocation is now supported. Users of the RubyMine editor should now be able to use mode.

Specifying the start and end of a range literal is now optional, eg. . You can now say . Fixed important bugs with nested significant and non-significant indentation (Issue #637). Added a flag that allows you to hook into the command. Added a custom file for our preferred JavaScriptLint setup. Sped up Jison grammar compilation time by flattening rules for operations. Block comments can now be used with JavaScript-minifier-friendly syntax. Added JavaScript’s compound assignment bitwise operators. Bugfixes to implicit object literals with leading number and string keys, as the subject of implicit calls, and as part of compound assignment.

Bugfix release for 0.9.1. Greatly improves the handling of mixed implicit objects, implicit function calls, and implicit indentation. String and regex interpolation is now strictly (Ruby style). The compiler now takes a flag, which specifies scripts to run before compilation.

The CoffeeScript 0.9 series is considered to be a release candidate for 1.0; let’s give her a shakedown cruise. 0.9.0 introduces a massive backwards-incompatible change: Assignment now uses , and object literals use , as in JavaScript. This allows us to have implicit object literals, and YAML-style object definitions. Half assignments are removed, in favor of , , and friends. Interpolation now uses a hash mark instead of the dollar sign — because dollar signs may be part of a valid JS identifier. Downwards range comprehensions are now safe again, and are optimized to straight for loops when created with integer endpoints. A fast, unguarded form of object comprehension was added: for all key, value of object . Mentioning the keyword with no arguments now forwards all arguments passed to the function, as in Ruby. If you extend class from parent class , if has an method defined, it will be called, passing in — this enables static inheritance, among other things. Cleaner output for functions bound with the fat arrow. can now be used in parameter lists, with the parameter being automatically set as a property on the object — useful in constructors and setter functions. Constructor functions can now take splats.

Quick bugfix (right after 0.7.1) for a problem that prevented command-line options from being parsed in some circumstances.

Block-style comments are now passed through and printed as JavaScript block comments – making them useful for licenses and copyright headers. Better support for running coffee scripts standalone via hashbangs. Improved syntax errors for tokens that are not in the grammar.

Official CoffeeScript variable style is now camelCase, as in JavaScript. Reserved words are now allowed as object keys, and will be quoted for you. Range comprehensions now generate cleaner code, but you have to specify if you’d like to iterate downward. Reporting of syntax errors is greatly improved from the previous release. Running with no arguments now launches the REPL, with Readline support. The bind operator has been removed from CoffeeScript. The keyword was added, which is equivalent to a loop. Comprehensions that contain closures will now close over their variables, like the semantics of a . You can now use bound function in class definitions (bound to the instance). For consistency, is now an array presence check, and is an object-key check. Comments are no longer passed through to the generated JavaScript.

The command will now preserve directory structure when compiling a directory full of scripts. Fixed two omissions that were preventing the CoffeeScript compiler from running live within Internet Explorer. There’s now a syntax for block comments, similar in spirit to CoffeeScript’s heredocs. ECMA Harmony DRY-style pattern matching is now supported, where the name of the property is the same as the name of the value: . Pattern matching is now allowed within comprehension variables. is now allowed in block form. loops were added, as the inverse of loops. statements are now allowed without switch object clauses. Compatible with Node.js v0.1.95.

Upgraded CoffeeScript for compatibility with the new Node.js v0.1.90 series.

Trailing commas are now allowed, a-la Python. Static properties may be assigned directly within class definitions, using notation.

Interpolation can now be used within regular expressions and heredocs, as well as strings. Added the bind operator. Allowing assignment to half-expressions instead of special -style operators. The arguments object is no longer automatically converted into an array. After requiring , Node.js can now directly load files, thanks to registerExtension. Multiple splats can now be used in function calls, arrays, and pattern matching.

String interpolation, contributed by Stan Angeloff. Since has been the default since 0.5.3, updating and to run by default, pass as well if you’d like to print the result.

Bugfix that corrects the Node.js global constants and . Tweaks for more flexible parsing of nested function literals and improperly-indented comments. Updates for the latest Node.js API.

CoffeeScript now has a syntax for defining classes. Many of the core components (Nodes, Lexer, Rewriter, Scope, Optparse) are using them. Cakefiles can use to define options for tasks. is now the default flag for the command, use to save JavaScripts. Bugfix for an ambiguity between RegExp literals and chained divisions.

Added a compressed version of the compiler for inclusion in web pages as . It’ll automatically run any script tags with type for you. Added a option to the command, for piped-in compiles.

Improvements to null soaking with the existential operator, including soaks on indexed properties. Added conditions to loops, so you can use them as filters with , in the same manner as comprehensions.

CoffeeScript 0.5.0 is a major release, While there are no language changes, the Ruby compiler has been removed in favor of a self-hosting compiler written in pure CoffeeScript.

is now a shorthand for . Switched the default JavaScript engine from Narwhal to Node.js. Pass the flag if you’d like to continue using it.

CoffeeScript 0.3 includes major syntax changes: The function symbol was changed to , and the bound function symbol is now . Parameter lists in function definitions must now be wrapped in parentheses. Added property soaking, with the operator. Made parentheses optional, when invoking functions with arguments. Removed the obsolete block literal syntax.

Added Python-style chained comparisons, the conditional existence operator , and some examples from Beautiful Code. Bugfixes relating to statement-to-expression conversion, arguments-to-array conversion, and the TextMate syntax highlighter.

The conditions in switch statements can now take multiple values at once — If any of them are true, the case will run. Added the long arrow , which defines and immediately binds a function to . While loops can now be used as expressions, in the same way that comprehensions can. Splats can be used within pattern matches to soak up the rest of an array.

Added ECMAScript Harmony style destructuring assignment, for dealing with extracting values from nested arrays and objects. Added indentation-sensitive heredocs for nicely formatted strings or chunks of code.

Axed the unsatisfactory keyword, replacing it with for object comprehensions. They now look like: for prop, value of object .

When performing a comprehension over an object, use , instead of , which helps us generate smaller, more efficient code at compile time. Added as a shorthand for saying The “splat” symbol has been changed from a prefix asterisk , to a postfix ellipsis Added JavaScript’s operator, empty statements, and empty loops. Constructor functions that start with capital letters now include a safety check to make sure that the new instance of the object is returned. The keyword now functions identically to in Google’s Closure Library.

Arguments objects are now converted into real arrays when referenced.

Major release. Significant whitespace. Better statement-to-expression conversion. Splats. Splice literals. Object comprehensions. Blocks. The existential operator. Many thanks to all the folks who posted issues, with special thanks to Liam O’Connor-Davis for whitespace and expression help.

Bugfix for running and from outside of the CoffeeScript directory. Bugfix for nested function/if-statements.

Array slice literals and array comprehensions can now both take Ruby-style ranges to specify the start and end. JavaScript variable declaration is now pushed up to the top of the scope, making all assignment statements into expressions. You can use to escape newlines. The command is now called .

The official CoffeeScript extension is now instead of , which properly belongs to C#. Due to popular demand, you can now also use to assign. Unlike JavaScript, can also be used within object literals, interchangeably with . Made a grammatical fix for chained function calls like . Inheritance and super no longer use , so they should be IE-compatible now.

The command now includes , which launches an interactive CoffeeScript session, and , which directly compiles and executes a script. Both options depend on a working installation of Narwhal. The keyword has been replaced by , which goes together a little smoother with . Quoted strings are now allowed as identifiers within object literals: eg. . All assignment operators now use a colon: , , , etc.

Fixed a bug with calling through more than one level of inheritance, with the re-addition of the keyword. Added experimental Narwhal support (as a Tusk package), contributed by Tom Robinson, including bin/cs as a CoffeeScript REPL and interpreter. New option to suppress the safety function wrapper.|||

