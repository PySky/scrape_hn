I eventually stumbled upon a way to keep track of technical debt in source code that is both straightforward and already built-in most tools : simple comments !

Some time ago, we tried to add annotations in our source code. Unfortunately, after a few month, we came to the logical conclusion that it was too complex to be effective :

After a bit of discussion with my colleagues, we decided to replace all these annotations with simple comments.

When the refactoring to do seems fairly obvious (but also premature) we’ll use a straightforward message. Next time a pairs gets to work on this part of the code, they get the silent opinion of their peers to help them decide what to do about this piece of the code. Other times, the code might be smelly, yet without us knowing what to do about it yet, in this case, we agreed to use //TODO SMELL (example) responsibilities are not clear in this class which is still a comment, but not a clear call to action.

When I started my current side project, I naturally started to use them. They display nicely in CodeClimate.

The great thing about comments is that, as a very old programming trick, they are already supported out of the box by most tools IntelliJ, SonarQube, Rails, CodeClimate and I guess many others. Only one day after I refactored to comments, a team mate fixed one that had appeared in his IDE’s TODO tab !

Some tools, IDEs in particular, tend to assume that you should fix all your before you commit anything. That’s not exactly how we are using them to track lasting technical debt. So that’s one thing you need to keep in mind.

Tools like Sonar on the other hand, assign a fixed remediation cost to any you have in the code, which is usually not the case at all !

As you might guess, this is pretty easy. Just start adding comments in your code …

It is worth first validating the practice with your colleagues though. There are many ways to do that, depending on your team’s work habits :

Don’t wait for unanimity to start the practice, majority is enough ! Make sure that people who voted the other way will follow the team practice in the end though. Remember that whatever the answer, discussing team practices is good.

Once all the team agreed on using (or not) comments, mention the practice in your team’s coding conventions or working agreements (which I strongly recommend to have written somewhere). If you don’t have any yet, create some !

Most tools will handle out of the box.

Some tools might require small tweaks to improve the experience :

comments are a good starting point to track technical debt. Once you start using them, there are a few things you can do :

First, remember to fix some regularly. Very old comments are technical debt of their own ! Using code quality dashboards like SonarQube or CodeClimate help to continuously improve your code.

If your tools allow it, you might consider setting up a simpler instead of or whatever other special comment that might be useful in your context.

Finally, there is a lean continuous improvement practice which consists of logging problems as they occur. Doing this could help your team to decide which technical debt hotspots are the most important to fix. When appropriate, link the problems with the comments. After a few weeks of this, walking through all the problems during a retrospective should shed light on what parts of the code are causing the most troubles.

Thanks a lot for your comments ! People have suggested a ton of great improvements over my basic setup :|||

How to use simple TODO comments in code to track technical debt