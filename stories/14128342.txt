DISCLAIMER: This is a tool created for internal use by Ninjadev, and is open sourced to share ideas with and get feedback from the community. You are free to use it, according to the License, but we will not necessarily provide support and may at any time add, change or remove features as we require for our productions.

nin is Ninjadev's internal demo tool. It is a tool for easing development of browser-based WebGL demos. Core features include:

The backend component is written in node.js, and keeps track of and recompiles changed files. The frontend is created using React, and communicates with the backend over websockets.

To install nin simply run the command . This projects requires node version or newer. You can install node from packaging here or download zipped source from this page and verify signatures with the guide here;

You will also need installed for project generation to work. New project created with nin get a default .eslintrc suitable for WebGL demos with THREE.js.

Running will create the specified directory and initialize a new nin project inside. Running inside the newly created project will make it accessible on http://localhost:8000.

nin creates a manifest file called . You should fill out this file with the title of your demo, the authors, a description, song metadata, and even a google analytics tracking code to collect statistics. The metadata is then used to generate html meta-tags in the head of the demo, as well as in the metadata segment of the file. The png metadata can be viewed with a command such as on linux.

Create a new node by clicking in the frontend menu. The node will be placed in and added to the graph in . You must connect the node yourself to the output node. This is done by setting to as in the example below, where is the id of the node you want to connect to the display.

Create a shader by clicking in the frontend menu. It will be placed in the folder . To get livereload on shader change, you shader must be specified in the options object of your node in , the shader generator will do this for you. If needed, you can access the shader through the global object, by writing .

The command will create a single file that contains all the code and resources of your demo. Base64 and PNG compression magic is used to achieve this. It will at the same time output a file without PNG compression, , which will be slightly larger, but compatible with a wider range of devices (especially smartphones). For faster compiles, pass the flag . This will only concatenate js files, without any minifying.

Many of nin's settings can be overriden by placing a .ninrc file in your home directory. Currently, keyboard shortcuts is the only behavior which can be changed in the .ninrc. The list of canonical names for keybindings can be found in nin/frontend/app/scripts/directives/menubar.js.

An example .ninrc looks like the following:

Each frame will take up to around 4MB on disk, and the finished .mp4 will be on the order of 1GB when rendered, so make sure you have enough disk space. Expect to render maybe a frame or two per second.

You will need to have node, yarn and webpack installed. Yarn installation guide is available here. If you already have npm installed you can bootstrap to yarn by running . Install webpack by running .

Running in the nin folder will build and compile the entire project. Running will add nin to your node binaries path, making it available globally.

First, run inside your project. If you wish to develop on the frontend, running inside makes webpack rebuild the frontend on file change. You only need to rerun if you change files in either or .

The frontend part of this project uses ESLint for linting. See the file in the frontend part of this project.

The demo itself and our own uses the Google Closure Linter, please see this link for installation information. Use the flag.

To publish nin type the command . To be able to publish you need access to the user on npm whose password will be given through secure channels.|||

nin is ninjatool