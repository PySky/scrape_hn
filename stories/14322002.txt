is a tool for hunting the dead and errant code haunting your test suite. It picks up where static analysis tools like rubocop-rspec leave off by analyzing your test suite as it runs.

This project is still a bit of a work in progress. In particular, is still experimental and may leave behind awkward whitespace or otherwise misbehave. YMMV.

It can sometimes be difficult to determine where and if test setup is used--especially if it exists across multiple files. Since probes your test suite while it runs, it can reliably detect a number of common mistakes.

.describe subject { } let( ) { } shared_examples it is useless since it is not included expect( ).to eql( ) shared_examples let( ) { } it expect(subject).to eql(baz) context subject { } let( ) { } include_examples

I have some other ideas in mind as well, but haven't evaluated how feasible they are yet.

currently supports Ruby 2.3 and 2.4. I may add 2.2 support in the future.

will invoke your test suite and check for various offenses. It runs with by default. If you need to pass custom arguments to rspec, you can use the flag and pass a quoted string of rspec arguments, as shown below:

If you want to automatically delete dead code that finds, simply use the flag.

You should generally run your entire test suite with . inserts probes in all of your specs and helpers as they are 'd and then waits to observe them being used. If, for example, your spec helper requires all your shared examples but you only run a subset of your tests (which don't happen to use all of the aforementioned shared examples), it may appear to like some of those shared examples are unused when they are not. I may consider trying to handle for some of these cases in the future, but for now just run your whole test suite or else you'll have to sift through some false positives.

Please try out on your codebase--I'd love general feedback and bug reports. If you find something weird or eats your dog along with your homework, open an issue!

Also, if you have an idea for something you think might be able to reasonably detect, feel free to propose it in an issue as well.|||

rspectre - Exorcise the apparitions haunting your tests.