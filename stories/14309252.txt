If you‚Äôre like me, you know barely any JavaScript at all, no React to speak of,

 and have never deployed anything to Netlify before.

You are a Rubyist or something else taking that deep breath, getting ready to

 hunker down and finally learn the jays for good.

You found out about Gatsby because you searched for ‚ÄúReact‚Äù and ‚Äústatic site generator‚Äù and that‚Äôs what came up.

If you‚Äôre gonna learn JS anyway, what better playground than your own blog,

 right? Plus, React seems like a safe bet.

You may also have heard that the sites Gatsby generates are super (blazing!) fast.

And, like me, you might have based the final decision on the frivolous fact that

 the default blog starter has pretty typography.

That‚Äôs how I got here anyway.

Since I just finished putting this blog up, I figured it‚Äôd be good to share with you how you can do it yourself before this knowledge is obsolete.

So here goes.

If you've read the docs or checked out other tutorials, you might be tempted to start with .

Two reasons we're not using here:

Gatsby's executable picks which Gatsby version to use from the current directory's package.json. So just using the 1.0 branch from the starter repository is enough. You can upgrade to the latest executable by running , but it's not necessary.

I'll save you the n00bdive of trying to make sense of as if it were the development version of the regular gatsby cli. It's not! it's a tool for developing on Gatsby itself, so for now, don't go there.

Let's get a first look at our soon-to-be-public website.

Go to http://0.0.0.0:8000 and you can see it running on your machine. Edit anything, save it, and you can see the change in your browser immediately. Sweet!

We want to keep the original gatsby-starter-blog repository as a remote so that it'll be easier to merge new updates into our blog.

But since we're going to make changes (like writing posts) and push them to our own GitHub repository, it makes sense to call our repo and, the original, .

Let's get our new origin set up.

We don't want to commit so:

Now start a new repository at https://github.com/new. Let's assume you'll call it .

Don't check the "Initialize this repository with a README" checkbox.

Follow the ‚Äú‚Ä¶or push an existing repository from the command line‚Äù instructions.

Now if you type you'll see two remotes: , which points to your repository, and , which points to the official blog starter repo.

Using GitHub Pages is so common you don't even have to put up a disclaimer saying you have no affiliation. It's a standard.

Netlify is new, so just to be clear: I have no affiliation with Netlify and I don't get anything out of talking about them.

So why did I choose them over the standard? My main reasons were:

I was sold by #1 right out of the gate, but #2 grew on me as I saw it at work.

That means you can just push a change to one of your pages and it re-renders and deploys your site automatically.

You don't need a local copy of your repository, you don't need to run any commands, you can edit and create new posts all from GitHub's web interface.

On your phone, even.

For Gatsby though, you'd need to generate the static site locally from a copy of your repository (plus all dependencies), then manually push it to gh-pages to see it live.

Netlify has built-in support for Gatsby just like gh-pages has for Jekyll.

So you get the same flexibility and can work on your website from any device.

That also means non-developers can help out with content via tools like Prose.io or any git-based headless CMS.

Netlify has a (obviously biased, but useful nonetheless) detailed comparison between themselves and GitHub Pages in case you want to check out specific features.

This is a one time thing you'll need to do to set up your website on Netlify and hook it up to your GitHub repo.

After this, you don't need to run any command to deploy. Just commit & push, and Netlify does the rest.

First we install their command-line interface:

Then kick off the process with:

That will take you to the web browser to authorize the netlify cli. Authorize it, close the web page and go back to the terminal.

Here's how you fill out the rest of it:

It says ‚Äúsuccess‚Äù and gives you a link. But... it‚Äôs still 404.

Don‚Äôt panic! Just wait about a minute, come back, and it will be working.

Now you don‚Äôt want to keep the ugly auto-generated URL, so update the name like this:

And voil√°, your new blog is live at !!!

You want to keep your site under subdomain.netlify.com? We're done. (That could even buy you some street cred, who knows.)

If though you're the vain kind and don't want no one's name on your URL but your own, I've got you!

Just a few more knobs to turn.

I know naked domains are all the coolness these days. (Naked like , without the )

But unless you have a DNS provider that supports ALIAS records (most don't), you don't want to do that.

Why? Because you'd lose that magic CDN speed, which is one of the main reasons to use static websites in the first place.

By setting an A record pointing at one specific IP address, you make sure your requests are served only from that one server, not from the nearest CDN host.

The alternative is to have a CNAME and redirect the naked URL to it.

First set up a CNAME record pointing to

It will say ‚ÄúSite updated:‚Äù and give you the URL.

For the latter you just have to wait until the new DNS record propagates.

This could take hours. So let's take care of the former while we wait.

Go to the Netlify admin ui and click ‚ÄúEnable HTTPS‚Äù for your new site.

Check the ‚Äúforce TLS connections‚Äù checkbox so traffic to HTTP will be redirected to HTTPS.

Aaaand done! Now it's just a matter of time until you can visit your URL and see your site in all its glory üôå

You might have noticed that if you go to , it still works.

So you have two URLs serving the same content.

I'm no SEO expert and I have no idea if you can be penalized for that or not.

But it bothered me to have these two apparent sources of truth.

So here's how you tell Netlify to redirect the URL to your custom domain:

The makes sure git adds the file despite being in . Other files are going to keep being ignored as usual.

Now commit and push, wait a minute for the deploy, and all set! üòÖ

Originally published at hsribei.com by Helder S Ribeiro, a developer, teacher, and emojineur from Brazil. You should follow him on Twitter.|||

From the dev.to() community. Sharing ideas that makes us all better developers.