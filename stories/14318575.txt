The most important feature of Java 9 is the Java Platform Module System (JPMS). There are other interesting features like improvements to the Process API and new tools likeJSshell. Over the past couple of years, I wasn't paying much attention to the other "smaller" changes until I attended this interesting speech at Devoxx France. Now that JDK 9 has been announced as Feature Complete earlier this year, this post compiles all those features that are interesting enough for a wide range of developers, and provides detail on each of them. Of course, not everything is mentioned below (you can look at the complete feature set here, which is currently frozen). If you think there is some feature that I missed and are worth describing on this list, please leave a comment.

Among the API changes is the introduction of the interface, which makes common operations on native processes much easier.

Before Java 9, there was no standard solution to get the native ID of the current process. One could use as follows:

Starting in Java 9, we can use the method of the current :

Prior to the introduction of , checking if a process was alive could be done by running a command such as and parsing its output to see if the process is listed. Another workaround relies on the method of the class, which throws an if the process has not yet terminated.

Starting Java 9, we can use the method:

Similarly, if we wanted to retrieve basic information about a certain process, there is no built-in solution. One could parse a command result or rely on a third-party library to do it. In Java 9, we can retrieve a instance, which contains this information:

Another convenient feature in the new process API is the ability to run code upon process termination. This can be done using the method in either a or a , which returns a .

A few other methods further make it easier to navigate process trees:

Note: It is important to keep in mind that the operating system can restrict some of these APIs, and for the above three methods, those processes are created and terminate asynchronously. There is no guarantee that a process in the stream is alive or that no other processes may have been created since the inception of the snapshot.

Five items in this JEP introduce small changes to the language.

This annotation was introduced in Java 7 to allow a programmer to signal to the compiler that a variable arity method performs safe operations on its varargs parameter. A bit of context about the annotation: Due to the type-unsafe nature of mixing generic types with array creation, and because varargs are translated into arrays behind the scenes, the compiler generates a warning for varargs methods that use such generic types, as well as warning in all method invocations where there is a generic array creation.

As an example, the following method causes a compiler warning:

To make the compiler ignore this (although it would be the wrong thing to do in this case), we can annotate the method with .

So what changed in Java 9? Before Java 9, could be applied to either static or final methods. In Java 9, the annotation can also be used on private methods.

Now it is possible to use the statement on a resource without declaring a local variable for it, as long as the variable referencing the resource is final or effectively final.

For reasons related to the compiler's type inference implementation, diamond operators were not allowed when instantiating anonymous classes in Java 7. With this change, as long as the compiler can infer the type argument of the anonymous class, we can use the operator:

In Java 8, Java compilers started to issue a warning on using an underscore as an identifier and an error when used in lambdas. With Java 9, an error is thrown in all cases underscores are used:

When default methods were being added to interfaces in Java 8, private methods were being considered as well. But it was later postponed. Now with Java 9, interfaces can have private methods (static and instance) to allow non-abstract methods to share code:

The Doclet API, which allowed client applications to customize the output of Javadocs, underwent a re-design as defined in JEP 221. The goal was to make use of the Language Model API introduced in Java 6 as a standard of representing program elements, as well as the DocTree API to represent documentation elements in the source code and get rid of using the old language model that was part of the old Doclet API. The outcome is a migration of the old API from the com.sun.javadoc package to a new jdk.javadoc.doclet package.

Also, the standard doclet that the Javadoc tool uses by default to generate HTML documentation has been adapted to use the new API.

JShell is a REPL (Read-Eval-Print-Loop) tool that allows snippets of code to be run without having to place them in classes. It is similar to what exists in other JVM-based languages such as Groovy or Scala. One of the motivations behind JShell was that "the number one reason schools cite for moving away from Java as a teaching language is that other languages have a REPL and have far lower bars to an initial program". Meh... a bit debatable maybe. But a more convincing rationale would be to facilitate quick prototyping of new code without having to compile and run and without having to open an IDE.

In addition to the command line tool, JShell comes with an API to allow other tools to integrate JShell's functionality.

Some rules such as ending statements with semi-colons and checked exceptions are relaxed. You can even declare variables of some type that you define after declaring the variable. The class path and module path can also be changed during the session, or when starting JShell the first time (using and ).

Throughout the past 20+ years, the versioning of Java releases was inconsistent and sometimes confusing. The first two major releases were JDK 1.0 and JDK 1.1. From 1.2 till 1.5, the platform was referred to as J2SE (for the Standard Edition). Starting in 1.5, the versioning changed to become Java 5, then Java 6, and so on. However, when you run with an installed Java 8, the output still shows 1.8 instead of 8. The current versioning scheme for releases, introduced after Oracle acquired Sun, goes as follows:

Starting Java 9, the versioning will be consistent with semantic versioning, and version numbers have the format where:

The version string will be the version number with some other information such as early-access release identifier or the build number:

For comparison, the versioning for JDK 9 using both the existing and upcoming schemes is shown in the below table:

The new versioning scheme is fully documented in the class and version information can be accessed from it:

Have you noticed anything new in the content of Javadoc pages for Java 9 API so far? Look at the top right of the main frame. That's right, there is now a search box that you can use to search for classes, methods, etc. It's hard to believe it took them so long to implement it. The pages are also in HTML5 by default instead of HTML 4.

The searching is done locally, and the things that can be searched are:

The following JVM diagnosis commands were added:

Here is a sample test that sends a command to print the string table using the utility:

Starting Java 9, keystores are created using the PKCS12 format instead of JKS because it offers stronger cryptographic algorithms. This change is backward compatible, so applications accessing existing keystores continue to work.

One of the most interesting features introduced in Java 9 is the multi-release Jar (MRJAR), which allows bundling code targeting multiple Java releases within the same Jar file. By setting in the MANIFEST.MF file, the file becomes a multi-release JAR and the Java runtime will pick the appropriate versions of classes depending on the current major version running. The structure of such a file is illustrated as follows:

A multi-release JAR file allows projects to maintain different versions of their code targeting different Java platforms, while being able to distribute the code as one JAR, with a single version (e.g. Maven artifact version). This relaxes the common restriction of writing backward compatible code, and allows developers to benefit from a new language and API changes incrementally as they add new code.

This feature naturally requires modifications to some APIs used to process JAR files, such as and . Also, many JDK tools have been adapted to be aware of the new format, such as , , and .

As an example, the command can be used to create a multi-release JAR containing two versions of the same class compiled for both Java 8 and Java 9, albeit with a warning telling that the classes are identical:

This creates an MRJAR named MR.jar with the following contents:

Let us now create a class called Main that prints the URL of the SampleClass, and add it for the Java 9 version:

If we compile this class and re-run the JAR command, we get an error:

It turns out that the tool prevents adding public classes to versioned entries if they are not added to the base entries as well. This is done so that the MRJAR exposes the same public API for the different Java versions. Note that at runtime, this rule is not required. It may be only applied by tools like . In this particular case, the purpose of is to run sample code, so we can simply add a copy in the base entry. If the class were part of a newer implementation that we only need for Java 9, it could be made non-public.

To add Main to the root entry, we first need to compile it to target a pre-Java 9 release. This can be done using the new option of (see JEP 247 – Compile for Older Platform Versions):

Running the Main class shows that the SampleClass gets loaded from the versioned directory:

The hprof JVM native agent was removed. Before Java 9, it could be used to dump the heap or profile the CPU. The reason it was removed is the existence of better alternatives. For example, jmap can do the heap dump, while JVisualVM can be used to profile running applications.

To demonstrate the impact of removing this agent, we can run a Java program with the hprof agent enabled (i.e. using the option ) on Java 8 and then on Java 9 (which is added on my system path):

In all cases, this agent was not an official part of the JDK and it was rarely used by existing applications.

The tool, which could be used to browse a heap dump in a web browser was removed, since better alternatives exist. The tool was marked experimental and subject to removal in previous releases.

Before Java 9, we used to apply to tell it to use the selected language specification and to generate a certain version of bytecode. However, this can still lead to runtime issues as the compiler will link compiled classes to platform APIs of the current version of the JDK (unless you override the boot classpath). In Java 9, these options are replaced with one simple option to be able to compile for an older version.

JDK 9 makes this possible by maintaining some signature data about APIs from old releases, specifically under .

Prior to Java 9, the default garbage collector was typically the Parallel GC on server VMs and the Serial GC on client ones. On Java 9, server VMs will use G1 as the default, which was introduced in Java 7. G1 is a parallel and low-pause garbage collector that works especially well for multi-core machines with big heap sizes. For an overview of the G1 collector, see http://www.oracle.com/technetwork/tutorials/tutorials-1876574.html. In addition to this feature, the Concurrent Mark Sweep (CMS) collector was deprecated.

A new interface is added with a base implementation that can encapsulate several image variants with different sizes. This interface can be used to select the best image variant given certain width and height values.

An internal optimization is applied to the class to reduce memory consumption. The idea is that most String objects contain characters that do not need 2 bytes to represent. The change consists of replacing the internal character array with a byte array, plus an extra byte that denotes the encoding of the byte array: either Latin-1 which takes up 1 byte, or UTF-16, which takes up 2 bytes. The class will determine which encoding based on the content to be stored.

This is expected to reduce the size of heap memory in existing applications that rely heavily on strings, and should also reduce time spent on garbage collection. This change is internal and does not affect the external API of and its related classes such as or .

To disable compacting strings, the option can be passed to VM.

Prior to Java 9, access to the thread stack frames was limited to an internal class . Specifically the method . Some libraries rely on this method, which is deprecated. An alternative standard API is now provided in JDK 9 via the class, and is designed to be efficient by allowing lazy access to the stack frames. Some applications may use this API to traverse the execution stack and filter on classes. Two methods are of interest in this class:

This class is thread-safe, so multiple threads can use the same instance to walk their stacks.

For example, the following prints all stack frames of the current thread:

The following prints the current caller class. Note that in this case, the needs to be created with the option , so that instances are retained in the objects. Otherwise, an exception would occur.

A couple of other options allow stack traces to include implementation and/or reflection frames. This may be useful for debugging purposes. For instance, the first example includes some reflection to invoke , but the reflection methods were not shown in the output. We can add the option to the instance upon creation so that the frames for the reflective methods are printed as well:

Note that line numbers for some reflection methods may not be available so may return negative values.

Types whose packages start with  (and some starting with com.sun.) are internal to the Java platform. The Java development team has long discouraged their use since they are not supported and vary from implementation to another. Now, most of these classes have been encapsulated in modules that don't export them for code outside the JDK. This means that existing code that relies on them will break; however this decision was based on the analysis that these APIs are very rarely, or either they have official replacements that exist prior to JDK 9. Exceptionally, the following internal APIs remained exported and placed in a separate module, and for those have supported replacements in JDK 9 they have been deprecated and may be encapsulated or removed in JDK 10:

These APIs have been exported to public use because they are heavily used by some libraries, notably . They are used to perform intrinsic JVM operations that are otherwise impossible to achieve.

A standard set of interfaces corresponding to the reactive-streams specification have been introduced nested under the class. These interfaces define a publish-subscribe mechanism that allows asynchronous flow-controlled communication between producers and consumers of data streams.

Using this model of communication, the subscriber is more in control of the flow of data so that the rate of messages can be handled more efficiently. There is one additional utility class that can be used by item generators that want to publish their data. This class implements the and interfaces and can be closed to complete sending its items.

The interfaces , and have been enriched for factory methods for immutable collections:

The returned collections are instances of nested types defined under . This class is package-private so it cannot used to check if the collection is immutable. This is left as an implementation detail of your application.

Apart from collections, new methods were added to . The first two are normally intended to be used when the stream is ordered:

This method returns, for an ordered stream, a stream that consists of the longest prefix of elements that match the give predicate. The returned stream consists of the prefix of elements matching the predicate in that order. If the original stream is unordered, the order of elements is nondeterministic; the implementation is free to return any subset of elements that matches the predicate. However, if it happens that all elements match the predicate then the returned stream will consist of the same sequence of elements of the original (in the same order). If no element matches the predicate, an empty stream is returned.

An example that returns the first 5 integers of an ordered infinite stream:

Example with an unordered stream:

Note that if we run this last example, it may return any other result that excludes 5.

This method does the opposite. It returns, for an ordered stream, a stream consisting of the elements remaining after dropping the longest prefix of elements matching the predicate. If the original stream is unordered, the behavior is indeterministic; the implementation is free to drop any subset of elements matching the predicate and return the remaining elements in the stream.

Example using an ordered stream:

Example using an ordered stream:



Note that if we run this last example, it may return some other stream that contains 5.

This method returns an ordered stream that applies iteratively the predicate starting on an initial value, until the predicate returns a false with the subsequent increment specified by the . It is conceptually similar to the traditional for loop:

This method returns the given element if not null; otherwise an empty stream.

Three new methods were added to Optional:

If a value is present, it performs the given action with the value. Otherwise, it performs the given empty-based action.

If a value is present, it returns an describing the value. Otherwise, it returns an produced by the supplying function.

If a value is present, it returns a sequential containing only that value. Otherwise, it returns an empty .

The following elements have been added to the @Deprecated annotation to provide more information about the deprecation status:

1. If true, the deprecated API is intended to be removed in a future JDK release.

2. which indicated since which release this API has been deprecated.

As part of this JEP, some existing API elements have been planned for deprecation, such as legacy collections (e.g. and ); some deprecated elements have been marked as for removal such as and .

Furthermore, a new utility has been added in the JDK tools to scan a JAR file or a set of classes for usage of deprecated code. Note that it only scans for deprecated code from the standard libraries.

This feature introduces a new method in called , which allows application code to provide a hint to the JVM that it running in a spin-loop, meaning it is busy waiting for some event to occur. The JVM can benefit from this hint to execute some intrinsic code that leverages hardware platform specific instructions. For example, x86 processors can execute a PAUSE instruction to indicate spin-wait, which can improve performance.

Note that the method does nothing. It is simply marked as an intrinsic candidate (using the annotation) to indicate to the JVM that it can replace it with native code optimized for the target platform. The method is just a hint, so the JVM is free to simply do nothing. A typical scenario where this method may be used is illustrated in the docs:

Due to the decreasing support of Java plug-ins by web browsers, the Applet API is deprecated. However, there is no intention to remove it in the next major release, so there is no in the .

And those are the interesting bits! Of course, most people are looking forward to Project Jigsaw, but Java 9 will expand far beyond modules. Again, if I missed anything that you are excited about, please let me know in the comments.|||

Java 9 will bring modules to Java, but there are also updates planned for the platform API, JDK tools, and the JVM. Dive into the high points aside from Jigsaw.