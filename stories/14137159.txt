For couple last days, I worked on gifty to catch up a little bit. My primal task was to introduce JWT authentication to my microservices hosted by Nancy. That‚Äôs the topic for next post but today, I‚Äôll describe the proper steps to fully integrate Nancy with Autofac and ASP.NET Core since it‚Äôs not that obvious (at least wasn‚Äôt for me) and took me way to much time to finally do it. So, I hope that this one will help you one way or another.

At the beginning, I‚Äôd like to mention one thing since probably some of you don‚Äôt know it. By default, Nancy is integrated with dependency injection container called TinyIoC. So, if you‚Äôre not familiar with Autofac, there‚Äôs no need to do all this configuration I‚Äôm going to describe in the below paragraphs. You can easily start and play with it for a while and then decide whether it suits you or not. I wanted to use another container simply because I know Autofac, I don‚Äôt know TinyIoC and I heard that for more complex solutions it‚Äôs just not enough library. Ok, let‚Äôs move forward.

One thing, that I really like about Nancy is the fact that it has dedicated packages for different IoC container integrations. Therefore, the first step is to install the following one:

Before discussing the code there should be a short explanation of what is actually a bootstrapper. I really like the definition given on the GitHub by Nancy team:

So, in a nutshell, this class is responsible for the whole application config when it starts up but not only. Bootstrapper also manages IoC container and provides ‚Äûhooks‚Äù to some events that might happen during our app is running like on request error, before request etc. We‚Äôll discuss them more in the post dedicated to mentioned JWT authentication. Today, we‚Äôll stick to configuration only. All right, as you see above our custom bootstrapper derives from AutofacNancyBootstrapper class which provides many virtual methods for different tasks but one that should interest us is called ConfigureApplicationContainer which takes Autofac‚Äôs ILifitimeScope as a parameter. This is the place when we can register our dependencies inside the application. That‚Äôs cool but hang on. If you‚Äôre familiar with Autofac you know that registration is done by ContainerBuilder. ILiftimeScope provides methods for resolving existing dependencies so, what should we do? It turns out that Nancy package we‚Äôve just installed provides extension method for ILifetimeScope called Update. The signature looks as follows:

Ok, for some purposes the above solution is enough. I mean, you can register whatever you want and then use it. But in my project, I wanted also to have an ability to resolve dependencies registered by ASP.NET Core IoC container. The first example that comes up to my mind is registering settings which I described in one of my previous posts. How can we deal with that? Well, we should somehow take all of the dependencies from the one container and rewrite them into another. But the problem is that default ASP.NET Core container and Autofac are not compatible. They use different classes/interfaces for the entire process. Fortunately, there‚Äôs a package made by Autofac team which is going to help us a lot:

This one provides extension method on ContainerBuilder called Populate which takes IServiceCollection as a parameter and do exactly what we need ‚Äì register them inside the Autofac. Let‚Äôs modify our bootstrapper a little bit:

All right, the last problem to overcome is delivering need services to the bootstrapper. The default adding Nancy to the OWIN pipeline looks as follows:

Now, our microservices are kicked off by Nancy but also has all we needed to move forward üòâ If you want to see more of the gifty code, I encourage you to visit its GitHub which finally contains something more than just auto generated code üòÄ New post about JWT will come up probably in next two days, so stay tuned and come here from time to time üòâ|||

