Realm Node.js was released on November 16th. Its powerful features are now available server side with Node.js. In order to demonstrate how to use Realm, let’s build a simple blog.

This tutorial assumes you already use macOS or Linux environment to use the shell environment, and that Node.js and are installed. Instructions on how to install these see can be viewed here.

The entry is specified as the project’s directory name automatically. Because it is the beginning of the project, I changed its version from to . All other entries are set to default values.

We will use Express to handle the web requests, Realm Node.js for the database, Embedded JavaScript (EJS) to process its templates, and body-parser to parse queries which are passed from the form.

Install nodemon so that the server will restart whenever you modify the code.

In order to run the server using nodemon, you can use the command. But, because this is cumbersome we will make a short form command to run.

Run the test server by using .

First, let’s register the code to handle requests for .

When the server retrieves the GET requests from the path and the port , it returns . You can see this at in your web browser.

Let’s implement the write feature. In order to make a write form, create the file :

Add the following code to handle a request with the path .

When the server gets the request, it returns the content of the file .

You’ll see this at in your browser.

When you submit a written blog post, the server gets a request with the path . Append body-parser in your to see the object coming through with the request:

You can write anything on and see the following output for that request:

In , the first property is the name of the model. We specified it as . There are three entries in : , , and .

The schema you created should be passed to the constructor of a Realm instance. The property is the name of the database, and the is an array of schemas for various models, including the model. We only use one here as .

If you use multiple schemas, they should be added sequentially in the array.

To provide the write feature, modify the handler for the path as follows:

Call and then call to write the object.

A file allows for a simple feedback on the UI to display the write success:

Create the file in the directory to display posts:

This is a template displaying a series of blog posts from the array sequentially. The modified handler allows you to pass the array to the template.

In order to use Embedded Javascript(EJS) template engine, we use the method . Blogs usually display the most recent post first, so the second parameter of the method is set as .

Update everything, and then click to write your first post, and you should see the following screen.

For the complete example, please check out the code here.|||

Realm's powerful features are available for the server side with Node.js now. Let's build a blog.