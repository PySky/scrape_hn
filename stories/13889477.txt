Now we are ready to write a parser which parses simple expressions made from these components. Here is the data type for these expressions.

It’s so simple that it is almost useless at the moment.

Here are all our component parsers with lexeme , and with the SimpleExpr constructors:

There doesn’t seem to be a unique obviously correct place to put the lexeme call in the var parser:

Here is an alternative, with the call to lexeme in a different place, but gives effectively the same function.

In the parens parser, we can reuse the numE parser like this:

Here is the add parser using numE also.

It tries the first parser, and it if fails (without consuming any input), it tries the second parser. More about the 'consuming input' concept later.

is just wrapper around . You can choose which one to use based on which is more readable in each particular case.

It works well for some of the parsers. One problem is that the and parsers don’t parse general expressions as the components, but just . Another problem is that the doesn’t work at all: the parser parses the first number, and the parser is never tried. This is an example of not trying the second parser if the first parser succeeds, even if a later alternative would consume more input or successfully parse the whole input.

Now everything seems to work fine. The function is very powerful and easy to use, and can be used where in a more traditional parsing approach you would have to use left factoring or something else.

The function implements backtracking. When this is used with , it means that if the first parser fails, it will undo the consumed input and carry on with the next option, instead of failing completely. This works even if the is nested deeply within the first parser given to .

has its downsides (some of which we will see later), and I usually try to minimise its use or eliminate it completely. I found I often got into a complete mess when I used too much when writing parsers for something a little tricky like SQL, and that although doing some left-factoring appeared at first to be tedious and appeared to make the code less readable, I eventually decided that for me it made the code more readable since what was happening was more transparent.

Now we are going to fix this parser to parse arbitrarily nested expressions. In a way, the method used will roughly mean we are left factoring the and common prefix.

Here is a parameterized parens parser where we supply the nested expression parser as an argument. This is used here to try to make the code easier to follow and avoid rewriting this parser out again and again in full.

-- then see if it is followed by an '+ expr' suffix -- this function takes an expression, and parses a -- it recursively calls itself via the maybeAddSuffix function -- this is the wrapper for addSuffix, which adapts it so that if -- addSuffix fails, it returns just the original expression

The parser here now just parses the operator itself, i.e. '+' (and not the second expression like our simpleExpr7 parser). The return from the function is a function which accepts two elements and combines them using the appropriate operator representation. In this case, the represenation is the constructor.

You can look at the source http://hackage.haskell.org/package/parsec-3.1.3/docs/src/Text-Parsec-Combinator.html#chainl1 and see if you can understand how it works. If you can’t work it out, you could come back to it later when you have more experience writing parsing code.|||

