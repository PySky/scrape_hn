How to DRY out your RSpec Tests using Shared Examples

When I refactored a project a few weeks ago, I spent most of my time writing specs. After writing several similar test cases for some APIs, I started to wonder whether I might be able to get rid of a lot of this duplication.

So I threw myself into reading up on the best practices for DRYing up tests (Don’t Repeat Yourself). And that’s how I came to know of and .

In my case, I ended up using shared examples. And here’s what I’ve learned so far from applying these.

When you have multiple specs that describe similar behavior, it might be better to extract redundant examples into and use them in multiple specs.

Suppose you have two models User and Post, and a user can have many posts. Users should be able to view list of users and posts. Creating an index action in the users and posts controllers will serve this purpose.

First, write specs for your index action for the users controller. It will have the responsibility of fetching users and rendering them with proper layout. Then write enough code to make tests pass.

Typically, the index action of any controller fetches and aggregates data from few resources as required. It also adds pagination, searching, sorting, filtering and scoping.

Finally, all these data are presented to views via HTML, JSON, or XML using APIs. To simplify my example, the index actions of controllers will just fetch data, then show them via views.

The same goes for the index action in the posts controller:

RSpec tests written for both users and posts controller are very similar. In both controllers we have:

Let’s DRY the specs for our index action by using .

I like to place shared examples inside the specs/support/shared_examples directory so that all -related files are loaded automatically.

You can read about other commonly used conventions for locating your here: shared examples documentation

Your index action should respond with 200 success code (OK) and render your index template.

Apart from your blocks — and before and after your hooks — you can add blocks, context, and describe blocks, which can also be defined inside .

I personally prefer to keep shared examples simple and concise, and don’t add contexts and let blocks. The block also accepts parameters, which I’ll cover below.

Adding to your users and posts controller specs includes “index examples” to your tests.

You can also use or instead of in this case. and are actually aliases, and work in same manner, so they can be used interchangeably. But and are different.

As stated in the official documentation:

So when you face situation where parameterized examples contain methods that conflict with other methods in same context, you can replace with method. This will create a nested context and avoid this kind of situations.

Check out the following line in your users controller specs, and posts controller specs:

Now your controller specs can be re-factored further by passing parameters to shared example as below:

Now, make following changes to your users and posts controller specs:

Now controller specs look clean, less redundant and more importantly, DRY. Furthermore, these index examples can serve as basic structures for designing the index action of other controllers.

By moving common examples into a separate file, you can eliminate duplication and improve the consistency of your controller actions throughout your application. This is very useful in case of designing APIs, as you can use the existing structure of RSpec tests to design tests and create APIs that adhere to your common response structure.

Mostly, when I work with APIs, I use to provide me with a common structure to design similar APIs.

Feel free to share how you DRY up your specs by using .|||

When I refactored a project a few weeks ago, I spent most of my time writing specs. After writing several similar test cases for some APIs, I started to wonder whether I might be able to get rid of a…