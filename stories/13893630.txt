Who already knows me, most likely knows my good old post entitled: The DOM Is NOT Slow, Your Abstraction Is.

Beside my little 2015 rant against over bloated libraries, capable of doing a lot but not always capable to deliver performance where it‚Äôs most needed, I‚Äôve tried to demonstrate in those days that with some little code, absolutely rushed and quite possibly unmaintainable, it was possible to target only exact things we wanted to, things being either attributes, classes, and text content per each cell.

The result did actually perform better than anything else I could try.

Not everyone would write code like that, and in all fairness I guess they also shouldn‚Äôt, and part of the reasons Virtual DOM was born in the first place were still not properly addressed using that messed up code.

A quick summary of issues, borrowed from the virtual-dom repository:

I think so far we all agree. Targeting manually text nodes, attributes, inline styles to change or listeners isn‚Äôt what we like the most about the Web.

The usage of has also made part of the history of the Web:

It‚Äôs not surprising that most blazoned and modern JS frameworks tried to escape from that burden, with or without , and virtual-dom project is no exception.

Following a summary of what it does:

And that‚Äôs a hell of an achievement so, hat tip to Virtual DOM affectionados.

When something works and there‚Äôs a lot of hype around, most developers settle and celebrate, while few others observe, sometimes maybe just skeptically, and analyze the real-world result.

I let you guess which niche I belong to¬†‚Ä¶

Stating the obvious here, it doesn‚Äôt actually matter how much abstraction we put on top, we gonna update that view through the (in)famous, apparently slow and surely naughty, DOM API: no way to escape from that! üò±

On top of that, to use such abstraction we will inevitably end up with more and more dependencies that won‚Äôt hurt development but quite surely will hurt production results, and I‚Äôm talking about users.

It is indeed not by accident that alternative projects focused on code size and independent functionality came out, and yo-yo is just one of these children of the Virtual DOM era.

The part that didn‚Äôt convince me about yo-yo, is its performance: quite bad compared to other alternatives and for what I could test, a no-go for complex layouts on Mobile (and who knows me, also knows I am so crazy about Mobile performance that I even test on real devices¬†‚Ä¶ anyway¬†‚Ä¶).

Back to the topic: we have a slow path, which is boring, messy, and a manual tracking of the DOM as solution that ain‚Äôt gonna happen any time soon. On the other hand, we want the simplicity of to update such view, which is one of the yo-yo achievements through template literals.

Close enough, but not quite there yet. How about we use template literals, and we completely drop the whole Virtual DOM bit targeting directly affected nodes, through similar usage simplicity?

Already starred by 8 developers without me even mentioning it on Twitter, hyperHTML is my latest creation that fits in less than 1.5KB ‚Äúminzipped‚Äù, it delivers performance comparable to the manual mess I‚Äôve written in 2015, and its source code targets every browser new and old.

The tick time? Only the text will change its value. The article? Only its parts will get updated when needed.

‚Ä¶ and in case you are wondering how can it be possible that it targets old browsers, being based on template literals, I can assure you Babel here will do a great job to bring such functionality in a proper standard way.

It‚Äôs nothing more than a function, that works bound with DOM nodes and fragments as context. You bind your target node once, or even more if you don‚Äôt care, and you render the same template literals over and over simply passing new data.

I‚Äôm also open for suggestions and use cases I haven‚Äôt thought about yet so please let me know what you think about , thank you! ‚ô•Ô∏è|||

Who already knows me, most likely knows my good old post entitled: The DOM Is NOT Slow, Your Abstraction Is. Beside my little 2015 rant against over bloated libraries, capable of doing a lot but not‚Ä¶