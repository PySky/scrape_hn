We decided to search and fix potential vulnerabilities in various projects. You can call this as you wish — some kind of help to open source projects; a method of promotion or testing of the analyzer. Another way to see it as a way to attract attention to the reliability and quality of the code. In fact, the way to name these posts does not really matter — we just like doing it. This is our little hobby. So, let us have a look at our findings in the code of various projects this week — we had some time to make fixes and suggest looking at them.

PVS-Studio is a tool that detects a large number of types of vulnerabilities and errors in the code. It performs static analysis and points to code fragments that are likely to contain errors. The best effect is achieved when the static analysis is performed regularly. Ideologically, the analyzer warnings are similar to the compiler warnings. However, unlike compilers, PVS-Studio can perform deeper and more versatile code analysis. This enables it to detect errors, even in compilers: GCC; LLVM 1, 2, 3; Roslyn.

The tool supports the analysis of C, C++ and C#; works under Windows and Linux. The analyzer can be integrated as a Visual Studio plug-in.

We suggest the following materials for further investigation of the tool:

In this section we show those defects that fall under the CWE classification and are potential vulnerabilities in their core. Of course, not all weaknesses are really threatening for a project, but we wanted to show that our tool is able to detect them.

V768 The enumeration constant ‘S_MOVRELS_B64’ is used as a variable of a Boolean-type. gcnhazardrecognizer.cpp 75

V573 Uninitialized variable ‘BytesToDrop’ was used. The variable was used to initialize itself. typerecordmapping.cpp 73

V517 The use of ‘if (A) {…} else if (A) {…}’ pattern was detected. There is a probability of logical error presence. Check lines: 416, 418. iteratorpastendchecker.cpp 416

V595 The ‘m->component’ pointer was utilized before it was verified against nullptr. Check lines: 399, 407. genmodes.c 399

V625 Consider inspecting the ‘for’ operator. Initial and final values of the iterator are the same. sese.c 201

V501 There are identical sub-expressions ‘!strcmp(a->v.val_vms_delta.lbl1, b->v.val_vms_delta.lbl1)’ to the left and to the right of the ‘&&’ operator. dwarf2out.c 1434

V640 The code’s operational logic does not correspond with its formatting. The second statement will always be executed. It is possible that curly brackets are missing. asan.c 2582

8. FreeBSD. CWE-467: (Use of sizeof() on a Pointer Type)

V512 A call of the ‘memset’ function will lead to underflow of the buffer ‘plog’. nat64lsn.c 218

V517 The use of ‘if (A) {…} else if (A) {…}’ pattern was detected. There is a probability of logical error presence. Check lines: 102, 109. dtrace_debug.c 102

V547 Expression ‘cdb[0] != 0x28 || cdb[0] != 0x2A’ is always true. Probably the ‘&&’ operator should be used here. mfi_tbolt.c 1110

V560 A part of conditional expression is always true: 0x2002. sampirsp.c 7224

V560 A part of conditional expression is always true: 0x7dac. t4_main.c 8001

V595 The ‘mc’ pointer was utilized before it was verified against nullptr. Check lines: 2954, 2955. mly.c 2954

16. FreeBSD. CWE-563 (Assignment to Variable without Use (‘Unused Variable’))

V519 The ‘vf->flags’ variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 5992, 5994. if_ix.c 5994

17. FreeBSD. CWE-563 (Assignment to Variable without Use (‘Unused Variable’))

V519 The ‘pmuctrl’ variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 2025, 2026. bhnd_pmu_subr.c 2026

V779 Unreachable code detected. It is possible that an error is present. if_wi_pci.c 258

V779 Unreachable code detected. It is possible that an error is present. mpr.c 1329

V590 Consider inspecting this expression. The expression is excessive or contains a misprint. genmatch.c 3829

V501 There are identical sub-expressions ‘RA.getSubReg() != 0’ to the left and to the right of the ‘||’ operator. hexagonearlyifconv.cpp 485

We suggest downloading PVS-Studio analyzer and trying to check your project:

To remove the restrictions of a demo version, you can contact us and we will provide a temporary license key for you.

For a quick introduction to the analyzer, you can use the tools, tracking the runs of the compiler and collect all the necessary information for the analysis. See the description of the utilities CLMonitoring and pvs-studio-analyzer. If you are working with a classic type of project in Visual Studio, everything is much simpler: you should just choose in PVS-Studio menu a command “Check Solution”.|||

We decided to search and fix potential vulnerabilities in various projects. You can call this as you wish — some kind of help to open source projects; a method of promotion or testing of the analyzer…