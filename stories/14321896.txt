VueJS is a snazzy new frontend Javascript Framework that helps build reactive User Interfaces. I have been following VueJS since its beta and have recently been using it extensively for my projects.

I use VueJS with Rails on Rails. So far this was done by writing the Vue components as individual partials and then include them in the UI as shown below. VueJS would compile the components and inject them as necessary at the client side.

This approach works when you don’t have many components and don’t have components being composed of other components themselves. That is where things start to get messy.

The VueJS community recommends use of webpack to create and manage large scale Vue projects. This requires a nodejs runtime and the ability to inject transpiled and minified JS into the view. So how do I connect webpack with Rails?

Add the webpacker gem to your Gemfile as: 

 and run .

If you get an error like /usr/bin/env: ‘ruby2.2’: No such file or directory

Here is typically in if you use rvm.

to install a webpack compatible vuejs project in the folder. This also creates a file in the rails root directory as well as a folder containing the webpack configuration for the VueJS project. The configuration works out of the box and you don’t really need to make any changes here.

Next, add in your view to include the file from .

And we are done!

To deploy, do nothing! Webpacker hooks up a new task to , which gets run whenever you run . The and helper method will automatically insert the correct HTML tag for compiled pack.|||

