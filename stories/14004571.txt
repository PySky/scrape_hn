One of the goals we outlined for the transition to React and TypeScript was ‚Äúa well-documented, component-based design system.‚Äù We‚Äôve made strides towards this goal and have built a solid foundation to continue enhancing components. There were many pieces that we needed to figure out to start our transition from a visually scattered user interface to a more consolidated and consistent experience.

As we brought on more designers last summer, one of the challenges they kept running into was learning about our design elements. We didn‚Äôt have a style guide that explained our typography, color palettes, formatting, and other visual styles, so we repeatedly heard the same questions from our new hires. ‚ÄúWhat fonts are used?‚Äù ‚ÄúHow do we decide which button colors to apply?‚Äù ‚ÄúHow much padding are different elements supposed to have?‚Äù

Originally built with Bootstrap, the application had a consistent feel. However, problems started to arise once our designers broke away from Bootstrap, and creating custom styles for new pages. Our engineering team implemented these new designs, many times with one-off classes and inconsistent visual styles.

A few examples of the various container styles and fonts

As we‚Äôve discussed in previous blog posts, the front end technology at Handshake has been transitioning from Knockout and Coffeescript towards React, Redux and TypeScript. Around this same time our design team tripled in size, from a lone designer to 3 designers all needing to produce cohesive design work. After a few chats it became apparent that now was the time to get both teams onboard with a new standardized set of components.

As the engineering team focused on moving forward with React, the design team started compiling current styles that were used and selecting ones to move forward with. While we could have started from scratch and rebuilt our entire design system from the ground up, it made sense to maintain some of existing styles while switching over to React without fragmenting the design.

As we started building out our common components we started to notice how quickly we could implement new features. By having a shared and standardized language between the design and engineering teams we no longer had to worry about creating a new button or text style for a one-off mock from the design team. As a team, we decide on design conventions to implement, we discuss when to re-use a component we currently have implemented and when to implement new pieces - resulting in a more consistent visual style across pages and projects. As we continue to grow and develop our component library we will be able to easily tweak these visual styles across all areas.

After deciding to move forward with common components there were some obstacles we faced.

As mentioned above, one of the challenges we faced as an engineering team was documenting and sharing new common components. The problem with written documentation is that it‚Äôs difficult to visualize the components. We came across Storybook which offers a great mix of both visual and written documentation. It‚Äôs also great for developing new common components and trying different scenarios. Visual edge cases can be easily tested and documented.

An example of Storybook documentation for our component

On the design team, we‚Äôve being working on fleshing out a sketch template file that has symbols that correspond to each component. By combining some really nifty uses of symbol overrides like those mentioned in Hacking the Button in Sketch and A Better Way to Make Buttons in Sketch , we‚Äôve been able to simplify our processes and match components in our new mocks almost 1-1 with the components built out by the engineering team.

An example of Sketch symbols for our component

In the process of migrating to React and developing our component library, we were having issues isolating components - especially common components that should be building blocks and and completely decoupled from all other components. We landed on moving our file structure to a ‚Äúpod‚Äù based structure. Each component is its own self-contained ‚Äúpod‚Äù or directory. For example, our component is a directory in the common components directory. Within the component, we have which is the actual React component, along with which contains all styles for the component (which we‚Äôll describe more in depth below with CSS Modules). Lastly, we have a nested directory which contains all of our test cases for the component.

An example of the pod structure used in our common component directory

This has some other small wins. For example, when searching for a file whether it be a spec, the component itself or the stylesheets you can quickly search the avatar directory for all related files. The avatar is a unique case because it has a few very specific sub components that can be passed as children, , , and which are all nicely encapsulated within the avatar component. Also by naming our components we can still have clean import paths like

At the very beginning of our React and Typescript transition, we were relying on the Asset Pipeline to compile and deliver our React code along with the rest of our assets. This posed several concerns.

CSS Modules remedied these problems. As seen above, our component‚Äôs styles are now defined alongside the component definitions in . We were able to rapidly work on both React components and their related styles with absolutely zero concern for styles ‚Äúleaking‚Äù elsewhere in the application. We can use simple, meaningful classnames, such as without the concern of accidentally applying a style to every button or having verbose classnames such as .

Another unintentional upside is code deletion. Even with some advanced tooling, it can be difficult to determine if CSS is truly no longer used, but with CSS Modules you‚Äôre guaranteed it‚Äôs only affecting this individual component so you can comfortably remove styles (üî•).

One of the design team‚Äôs early concerns about standardizing these components and picking a ‚Äúbest‚Äù option was sacrificing experience for consistency. As a designer, it‚Äôs nice to be able to explore new ideas without being constrained by current assumptions made by previous design decisions.

This problem was solved with the following strategies.

All of these processes and tools have been crucial in facilitating our adoption of common components. In addition, the teamwork from the design team‚Äôs inception to the engineering team‚Äôs implementation has been the largest contributor to our success moving towards a common, efficient and consistent experience. We think it‚Äôs critical to have both design and engineering on board, and share visible progress across the teams.

We‚Äôve accomplished a lot in just a few months, but we still have a long journey ahead of us. When you work on this with your team, don‚Äôt worry about getting it right immediately. By just getting started we‚Äôve discovered a lot about what we want to get out of common components and have already noticed improvements across our design and engineering teams.

If you‚Äôre interested in being a part of a team that recognizes the importance of creating a strong visual language through a component-based design system we encourage you to apply for our Software Engineer, Product Designer, or many other positions open across the company. Apply if you‚Äôre excited about changing the job finding experience for college students across the country!|||

One of the goals we outlined for the transition to React and TypeScript was ‚Äúa
well-documented, component-based design system.‚Äù We‚Äôve made strides towards
this goal and have built a solid foundation to continue enhancing components.

There were many pieces that we needed to figure out to start ou...