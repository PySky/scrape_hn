Monet is a library designed to bring great power to your JavaScript programming. It is a tool bag that assists Functional Programming by providing a rich set of Monads and other useful functions.

This library is inspired by those that have come before, especially the FunctionalJava and Scalaz projects.

While functional programming may be alien to you, this library is a simple way to introduce monads and pure functional programming into your daily practises.

The source is available at: http://github.com/cwmyers/monet.js.

Simply download and add to your html pages or we also support bower. You can also include which contains extra functions on the for creating monads.

As you know JavaScript isn’t a strongly typed language. This kinda sucks. Types are a great help when it comes to functional programming as it makes the code more comprehensible and prevents a range of errors from being introduced.

Knowing the types of your functions and data is also important when writing documentation (such as this one), so we will invent some type annotations to make things more clear. We will only do this in the function definition and not in the concrete examples.

JavaScript doesn’t have generic types but it’s useful to know about them when dealing with Monads. For instance the monad is a type that requires another type, such as a string or integer or some other type before it can be constructed. So you would have a List of Strings or a List of Integers or generically a List of s where is a type you will supply. Now of course this is JavaScript and you can do as you please even though it doesn’t make sense. But to make things clearer (hopefully) we will attempt to do show generics or type parameters thusly:

Which means a of s. Though of course you will have to keep track of the types yourself.

And functions on a Monadic type that has been constructed with

For functions that take other functions as parameters (which are called Higher order functions) we will use an abbreviated way to represent that function using a pseudo type lambda:

means that function takes two parameters that are both functions themselves. is a function that takes a type and returns a type and is a function that takes a type and returns a type . The function will return a type .

Some functions (or lambdas) do not take a parameter, and some do not return anything. Will express this as:

Everything that is a monad in will implement the following functions. The specific monads will be discussed in detail below.

The inner and outer monads are the same type.

Performs a combination of both monads and takes the left one.

Performs a combination of both monads and takes the right one.

The type is the most common way of representing nothingness (or the type) with making the possibilities of issues disappear.

is effectively abstract and has two concrete subtypes: (also ) and (also ).

or more simply with the pimped method on Object.

takes a function (A -> B) and applies that function to the value inside the and returns another .

takes a function that takes a value and returns an . The value to the function will be supplied from the you are binding on.

on a value will return and will return on a .

on a value will return and will return on a .

will ‘reduce’ the to its value. But warning! It will throw an error if you attempt to do this on a none. Use instead.

Will return the containing value inside the or return the supplied value.

Returns the Maybe if it is a Some otherwise returns the supplied Maybe.

The function implements the Applicative Functor pattern. It takes as a parameter another type which contains a function, and then applies that function to the value contained in the calling .

It may seem odd to want to apply a function to a monad that exists inside another monad, but this is particular useful for when you have a curried function being applied across many monads.

Here is an example for creating a string out of the result of a couple of s. We use which is a pimped method on Function so we can partially apply.

For further reading see this excellent article.

Very similiar to the filtering of a list, on will filter out any elements that do not meet the predicate.

Converts a Maybe to an Either

Converts to a list, returns an Empty list on None.

Either (or the disjunct union) is a type that can either hold a value of type or a value of type but never at the same time. Typically it is used to represent computations that can fail with an error. Think of it as a better way to handle exceptions. We think of an as having two sides, the success is held on the right and the failure on the left. This is a right biased either which means that and ( ) will operate on the right side of the either.

or with the pimped methods on object:

This will apply the supplied function over the right side of the either, if one exists, otherwise it returns the untouched.

This will perform a monadic bind over the right side of the either, otherwise it will do nothing.

This takes an either that has a function on the right side of the either and then applies it to the right side of itself. This implements the applicative functor pattern.

The catamorphism for either. If the either is the right function will be executed with the right value and the value of the function returned. Otherwise the function will be called with the left value.

Returns true if this Either is right, false otherwise.

Returns true if this Either is left, false otherwise.

Returns the value in the right side, otherwise throws an exception.

Returns the value in the left side, otherwise throws an exception.

Validation is not quite a monad as it doesn’t quite follow the monad rules, even though it has the monad methods. It that can hold either a success value or a failure value (i.e. an error message or some other failure object) and has methods for accumulating errors. We will represent a Validation like this: where represents the error type and represents the success type.

or with pimped methods on an object

takes a function (A -> B) and applies that function to the value inside the side of the and returns another .

takes a function that takes a value and returns a . The value to the function will be supplied from the you are binding on.

Will return if this is a successful validation, otherwise.

Will return if this is a failed validation, otherwise.

Will return the successful value.

Will return the failed value, usually an error message.

Implements the applicative functor pattern. will apply a function over the validation from within the supplied validation. If any of the validations are s then the function will collect the errors.

The catamorphism for validation. If the validation is the success function will be executed with the success value and the value of the function returned. Otherwise the function will be called with the failure value.

An immutable list is a list that has a head element and a tail. A tail is another list. The empty list is represented by the constructor. An immutable list is also known as a “cons” list. Whenever an element is added to the list a new list is created which is essentially a new head with a pointer to the existing list.

The easiest way to create a list is with the pimped method on Array, available in monet-pimp.js.

which is equivalent to:

As you can see from the second example each List object contains a head element and the tail is just another list element.

will prepend the element to the front of the list and return a new list. The existing list remains unchanged.

is also available as a pimped method on :

Maps the supplied function over the list.

Maps the supplied function over the list and then flattens the returned list. The supplied function must return a new list.

Returns the head of the list.

Returns the optional head of the list.

will filter out any elements that do not meet the predicate function.

takes an initial value and a function and will ‘reduce’ the list to a single value. The supplied function takes an accumulator as its first value and the current element in the list as its second argument. The returned value from the function will be pass into the accumulator on the subsequent pass.

For example, say you wanted to add up a list of integers, your initial value would be and your function would return the sum of the accumulator and the passed in element.

Performs a fold right across the list. Similar to except the supplied function is first applied to the right most side of the list.

Will append the second list to the current list. Both list must be of the same type.

Will a list of monads. The signature above is slightly hard to represent, but this function will sequence a list of any type of monad, but you will need to supply the name of the monad you are sequencing.

Or you can use the convenience methods like or below. Note that since Validation is not a true monad it will not work as expected for this method; use instead.

Takes a list of s and turns it into a . If the list contains at least one value then a will be returned, otherwise a will be returned with a list of all the values.

This is the same as calling:

This will sequence a of s stopping on the first that it finds. It will return either a of the values or the first value it encounters.

Note: Unlike it does not accumulate the (or “failing”) values, but rather stops execution and returns the first .

Takes a list of s and turns it into a . It will collect all the values into a list on the side of the validation or it accumulates the errors on the side, if there are any failures.

Much like the immutable list, a Non Empty List can never be empty. It implements the pattern. It has a guaranteed head (total) and a guaranteed (total) tail.

Trying to create an empty will throw an exception.

Returns the head of the NonEmptyList. Also known as or this is part of the comonad pattern.

Returns the tail of the .

Returns all the tails of the . Also known as this is part of the comonad pattern. A list is considered a tail of itself.

Maps a function over the tails of the . Also known as this is part of the comonad pattern.

takes an initial value and a function and will ‘reduce’ the list to a single value. The supplied function takes an accumulator as its first value and the current element in the list as its second argument. The returned value from the function will be pass into the accumulator on the subsequent pass.

For example, say you wanted to add up a non empty list of integers, your initial value would be and your function would return the sum of the accumulator and the passed in element.

Performs a fold right across the non empty list. Similar to except the supplied function is first applied to the right most side of the list.

Reduces a of type down to a single .

Returns an optional . If the supplied is empty the result will be a , otherwise a wrapped in a (or ).

The monad is for isolating effects to maintain referential transparency in your software. Essentially you create a description of your effects of which is performed as the last action in your programme. The IO is lazy and will not be evaluated until the (alias ) method is called.

The constructor for the monad. It is a purely functional wrapper around the supplied effect and enables referential transparency in your software.

Perform a monadic bind (flatMap) over the effect. It takes a function that returns an . This will happen lazily and will not evaluate the effect.

Performs a map over the result of the effect. This will happen lazily and will not evaluate the effect.

Evaluates the effect inside the monad. This can only be run once in your programme and at the very end.

Wraps a supplied function in an . Assumes no arguments will be supplied to the function.

Returns a function that will return an when one parameter is supplied.

Say we have a function to read from the DOM and a function to write to the DOM. This example uses jQuery.

On their own both functions would have a side effect because they violate referential transparency. The function is dependent on an ever changing DOM and thus subsequent calls to it would not produce the same result. The function obviously mutates the DOM and so it too is not referentially transparent, as each time it is called, an effect occurs.

We can modify this functions so that instead of performing these side-effects they will just return an with the yet-to-be-executed function inside it.

You can call until you are blue in the face but all it will do is return an with a function inside.

We can now call and to chain this two effects together. Say we wanted to read from a covert all the text to uppercase and then write back to that .

So what is the type of ? Well it is the type. And that means at this stage, nothing has been executed yet. The DOM has not been read from, the text has not been mapped and the DOM has not been updated. What we have is a referentially transparent description of our programme.

In other pure functional languages such as Haskell we would simply return this type back to the runtime, but in JavaScript we have to manage this ourselves. So now let’s run our effect.

Now our DOM should be updated with the text converted to upper case.

It becomes much clearer which functions deal with IO and which functions simply deal with data. and return an effect but simply converts a supplied string to upper case. This pattern is what you will often find in your software, having an effect when you start (i.e. reading from a data source, network etc), performing transformations on the results of that effect and finally having an effect at the end (such as writing result to a database, disk, or DOM).

The monad is a wonderful solution to inject dependencies into your functions. There are plenty of great resources to get your teeth into the monad such as these great talks.

The monad provides a way to “weave” your configuration throughout your programme.

Say you had this function which requires configuration:

Calling this function from other functions that don’t need the dependency is kind of awkward.

One quick win would be to the function, and make partially apply the function and let the caller of supply the printer.

This is better, but what if wants to perform some sort of operation on the result of ? It would have to apply the final parameter (i.e. the ) before would execute.

This where the monad comes in. We could rewrite thusly:

To sweeten up the syntax a little we can also write:

So now, when a name is supplied to the monad is returned and being a monad it supports all the monadic goodness.

We can now get access to the result of through a .

The top level of our programme would co-ordinate the injecting of the dependency by calling on the resulting

Maps the supplied function over the .

Applies the function inside the supplied to the value in the outer . Applicative Functor pattern.

Executes the function wrapped in the with the supplied .

The monad is a monad that is able to separate instructions from their interpreter. There are many applications for this monad, and one of them is for implementing Trampolines, (which is a way to make recursion constant stack for languages that don’t support tail call elimination, like JavaScript!).

Please see Ken Scambler’s excellent talk and example project to get an in-depth understanding of this very useful monad.

The monad has two constructors, and , which represents the continuation of a calculation and the completion of one, respectively.

As you may see, wraps a value A, where as , wraps a containing another .

Performs a map across the value inside the functor.

Evalutates a single layer in the computation, returning either a suspension or a result.

Runs the computation to the end, returning the final result, using the supplied functor to extract the next from the suspension.

This function only makes sense for Tampolined computations where the supplied functor is a Function. This will run the computation to the end returning the result .

This method on function will curry that function so that it can be partially applied. This implementation is quite flexible and allows a method to be applied in the following ways:

Written and maintained by Chris Myers @cwmyers and Jakub Strojewski @ulfryk. Follow Monet.js at @monetjs.|||

Monadic library for functional programming in JavaScript.