When updates happen, React virtual DOM can determine the changes by diffing the original DOM with the re-computed one. React does wonders by maintaining a virtual DOM representation to avoid expensive DOM operations.

The maintenance of that virtual DOM can also be expensive. Imagine a very large, complicated render tree. If you update the props of any node, React needs to recompute the render tree from that node all the way down to the leaves, where it finally does its virtual DOM comparisons.

Fortunately, React provides a mechanism for avoiding this, namely

shouldComponetUpdate( ) — return false from this method, and the component’s entire subtree does not bother re-rendering. We just need to figure out how/when to return false.

The simplest way to take advantage of this is to keep your render methods pure — your component should render only based on state and props.

Most of the time, you can use instead of writing your own . By default it does a shallow comparison like

If no changes in props/state are detected, it doesn’t re-render.

Bind the function in render method is not good way because, a bind call or arrow function in a JSX prop will create a new function on every single render.

Instead of bind a function in render method we can bind the function in constructor because of that only single function is created.

React has great developer warnings and error checking, but these are only intended for development. If we take a look at React’s source code, we will see a lot of checks. This is running extra code that is not needed by the end user, calling this is extremely slow.

For production environments, we can replace all instances of with or we can use envify node- module. envify will replace your environment variable checks with ordinary strings only the variables we use will be included.

After running it through envify with set to

By running this through a good minifier (e.g. uglify), the above code would be stripped out completely.

UglifyJs will remove unreachable code and warn about it, apart from that it can perform various small optimizations like shorten variable names, join consecutive var declarations and if-else statements etc

Just keep in mind that we don’t want to do this in development because it will remove all those helpful developer warnings.

So many times we use the index of an item as its key when they render in a list.

a key is the only thing React uses to identify DOM elements. What happens if you push an item to the list or remove something in the middle? If the key is same as before React assumes that the DOM element represents the same component as before. But that is no longer true.

e.g. the first item in the todo list is completed and the second one is not. Then the second todo would have key set to ‘0’ and React would think that the first todo changed, looses the track of identity. If the key was set to id it would just remove the first todo from the DOM.

React is notoriously bad at rendering large collections as the reconciler has to evaluate the components produced by a collection on each collection change. It is therefore recommended to have components that just map over a collection and render it, and render nothing else:

In the above listing React will unnecessarily need to reconcile all TodoView components when the changes. They won't re-render, but the reconcile process is expensive in itself.

While React’s speed is usually pretty good, it’s quite common to find areas of your app which are slow, especially when we try to input data or scroll. Re-rendering a component also causes React to check every child component to see if it should re-render, so if you have a list with hundreds of items then this can cause a lot of slowdown.

By using React-addons-perf tool we can measure how much time our component will take to render or update. This tool will show you which components in your app are being recalculated unnecessarily and which gives you a good starting point to speeding things up.

And then we can import it in our App.js:

There are four Perf functions that we care about:|||

When updates happen, React virtual DOM can determine the changes by diffing the original DOM with the re-computed one. React does wonders by maintaining a virtual DOM representation to avoid…