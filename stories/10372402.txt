The identity function looks like this in Rust:

returns the same value that is passed in:

Beyond the obvious, it does some curious and fun things!

You can test this blog post’s code in the Rust Playground.

No magic, it’s just that you can specify with an explicit type which identity function you are calling. If the expression can coerce to that type, then it compiles.

Let’s say we have a simple recursive datastructure:

And we want to walk it, with a mutable reference, through a loop.

Looks good? Rustc disagrees! (compile in the playground)

It turns out Rust’s mutable references do something interesting, and most of the time it’s very useful: when they are passed, they reborrow the local variable rather than move it. The explicit equivalent of the reborrow would be .

tells a mutable reference to move instead of reborrow! This way it compiles:

This is a point where Rust could improve by learning to infer whether to reborrow or move mutable references. Until then, we have .

returns just the same thing as you pass in. Except it’s now an rvalue, and implicitly mutable.

This is no violation of Rust philosophy. Using on locals is simple and pragmatic, and mutability radiates from the owner. If your value is now a temporary, it’s not owned by an immutable binding anymore (or any other variable binding).

If you thought that was cryptic, here’s one better. The secret syntax is just and its companion , and it allows you to manipulate move semantics just the same way does:

If you actually use this, I think is actually a pretty good name ( is taken, it’s a keyword). Save the for obfuscation contests.

It’s February 2017 and this is hilarious:

Calling , since it’s a passing a shared reference, inserts a annotation for the pointer , which might otherwise not have been there! As soon as llvm’s metadata propagation improves, it might even have actual use.|||

