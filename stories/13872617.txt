In this blog post I present Communicating Sequential Processes (CSP) and how they can be used as an alternative to async generators. In the process, we will also take a look at the ECMAScript proposal that async generators are a part of: “asynchronous iteration”

Let’s start by refreshing our knowledge of asynchronous iteration. It consists of three parts:

The next sections take a look at each of these parts. Afterwards, I’ll explain CSP and how it is an alternative to #3.

Synchronous iteration is supported by many languages. What all approaches have in common is that you need two things:

However, they differ in the specifics. For example:

For JavaScript, the idea was to use a single method without an exception, much like Swift does. However, unlike Swift, TC39 wanted to avoid bugs caused by end-of-iteration values being stored in collections. That’s why in JavaScript, the iterator method always returns . For values, is . After the last value, is . You could say that the end-of-sequence value is truly metadata and kept out of band.

In async iteration, the objects are delivered via Promises. That does make everything even more complex, but the added complexity is necessary to fully support asynchronicity. Moreover, since Promises are a standard mechanism, async functions help when working with async iteration.

The loop looks as follows. It is based on the async iteration protocol and can be used inside async functions and async generators:

As of ES2017, we already have the following invokable entities in JavaScript:

Async generators would add to this already long list:

The core idea of async generators is:

It would be nice if we didn’t need to introduce yet another callable entity to JavaScript. In the next section, I present Communicating Sequential Processes, which can be implemented via just a library in ES2017 and are an alternative to async generators.

CSP are a pattern for concurrent programming that involves two key abstractions:

For this blog post, I’m using the CSP library async-csp by @dvlsg:

In this section, I’ll compare async generators with CSP and you’ll see that they are quite similar.

The GitHub repository contains code that processes a file asynchronously in the following steps:

Async generators. You can’t directly feed asynchronous input from legacy sources into async generators. You need a data structure that is asynchronously iterable. is such a data structure that I implemented as a simple utility class. The following function starts asynchronous processing by reading a file, feeding its contents to an and returning that queue:

The queue is created in line A. Input is added to it in line B. Errors are added like normal queue elements (line C), but are thrown when they are taken out of the queue. Once the stream ends, the queue is closed (line D).

CSP. augments the library’s with error handling. Similarly to the previous code, starts asynchronous processing:

This piece of code works almost the same as the previous one. Note the special method in line A.

In this post, we are skipping the relatively complex and advancing to , which is a good demonstration of a function that takes asynchronous input, transforms it and produces asynchronous output.

Async generators receive input via and produce output via :

You can see that is really useful, but you need to have an async iterable.

CSP. The CSP version of receives its input via one channel and produces its output via another channel:

We’ll see later how functions that have the signature

can be composed to produce a single channel. For now, it is enough to see that a function with such a signature is easy to understand and that you only need things that ES2017 already has (async functions, Promises) plus library code.

I opted against using for andd . Whether or not that works depends on the Channel implementation one is using.

Async generators. Since each of the functions that are involved produce and possibly consume async iterables, simple function application is enough to connect them. The result is an asynchronous iterable (line A) whose contents can be logged via .

CSP. The custom tool function (line A) connects a channel (created via ) with functions that have two channels as parameters (input and output). The result is yet another channel whose contents can be logged via .

I hope that the example showed that CSP are an interesting alternative to async generators. I’ve drawn a few more conclusions from working with both CSP and async generators:|||

In this blog post I present Communicating Sequential Processes (CSP) and how they can be used as an alternative to async generators. In the process, we will also take a look at the ECMAScript proposal that async generators are a part of: “asynchronous iteration”