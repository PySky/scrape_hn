Ok, I just had a mini panic attack about a big feature I totally glossed over on Crowdnote. I thought it was going to delay me onboarding users until next week, but I think my resolution will actually allow me to get it to them sooner.

Before I get into it, let me explain the current situation.

I'm currently working full-time as a lone founder to build Crowdnote, a web platform for crowd-sourcing music categorization for activities. More simply, it's a website for finding music for ballroom dancing (at least to start). Anyone can log in and add their own categorizations to the database and browse those that exist, hence the crowd-sourcing aspect. But what if somebody malicious comes along and wants to muck up the database with trash categorizations with spam and fake accounts? In order to prevent that from happening, Crowdnote will need to implement some kind of reputation system for users on the site.

The reputation system will be the standard metric for all users to measure each other's trustworthiness within the site. It will also function as a reward system, incentivising users to add more categorizations to the database. When browsing categorizations, a user's name and reputation will always be attached to it, helping the community recognize users who contribute the most quality material. When the project goes public, reputation will go from being a simple measurement into a gatekeeping mechanism for actions on the site, including upvoting, downvoting, editing songs, publicizing playlists, etc. It will become the backbone of the site's integrity, and I confess that I have absolutely no idea how to implement it. Nor do I have enough data to fully understand its role on the site.

Therefore, the short-term solution is simple: I'm just not going to do it.

I didn't realize how easy that solution was until I began writing this article, but it's obvious now that I've analyzed it. The feature is an answer to a problem I don't currently have. Nobody is trying to use Crowdnote maliciously; in fact, nobody who I don't meet in-person is going to have access to the site. I'll be gate-keeping myself by physically visiting dance studios and recruiting people right then and there. When Crowdnote first opens to beta users, privileges won't even a thing; all users are trusted, and therefore can do every action.

When I was planning the project, the reputation system was simply part of how the community would work. I see it on Stack Overflow and Reddit, and it didn't occur to me that I could get away without it. It really comes down to this: will users miss it if it's not there? At this stage, the answer is definitely not, and I'll trust them to tell me if I'm wrong about that.

On the production side of things, there are some very positive effects of leaving out this feature in the beginning. Obviously, I'll have less to build; I'm already tracking votes in the database, so I can retroactively generate the reputation each user should have later on.

Additionally, I'll have less to sell to users in the beginning, which sounds like a weaker pitch, but the product will also be simpler and easier to understand. People won't be distracted with their meaningless reputation points, and they'll be more focused towards giving me feedback on features that actually matter, like sorting results and adding new songs/categorizations.

Besides, even if I wanted to build it, I don't really know what it entails yet. Its implementation seems to fulfill its purpose on sites like Stack Overflow, but that doesn't mean I can apply their rules and mechanics directly to Crowdnote's system. For instance, I don't know how how much reputation per privilege is appropriate to give users in a non-QA format, and it'll only become clearer to me as I compare the use of this platform to other successful communities. I'll have time to collect data to inform its implementation later on.

As a quick recap of my progress today, I got the voting mechanism hooked up on the front-end. Users can cast their vote on a categorization freely within 5 minutes of their first vote, after which their vote will be locked. And since the whole song comes back in the response, the user's reputation changes as a result, even though I just decided in this article that I would remove that feature.

Tomorrow, I'll build out the form components for the search page, including things like "filter" and "sorting". I think I'm going to strip out the "show x more categories" links on songs for now and do all I can to make this acceptable for onboarding users by the end of the week.|||

