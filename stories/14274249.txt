This Computer Language Is Feeding Hacker Values into Young Minds At 10, Scratch is a popular tool to teach kids programming. But its real glory is how it imparts lessons in sharing, logic, and hackerism.

Last year, I went to Nigeria with Mark Zuckerberg. One of the first stops on the trip was a program that taught kids how to code. When Zuckerberg entered the room, many of the young students had a hard time pulling themselves away from their projects, even to gawk at one of the world’s richest men. Facebook’s founder instead came to them. “What are you making?” he’d ask. And they would proudly say, “A game!” or whatever it was, and begin showing him how it works. Zuckerberg would stop them. “Show me the code!” he’d say, because, well, he’s Zuckerberg, and any occasion is ripe for an ad hoc programming review. And that’s when the kid would click on a menu that toggled from the game to the LEGO-like building blocks of a Scratch program.

This happened several times, with kids ranging from ages 8 to 15. In every instance, the maker of a cool project could clearly show this famous visitor how he or she had methodically implemented a plan. Zuckerberg was clearly impressed. As we headed up the stairs to leave the building, Zuckerberg called out to me, “Scratch! Have you heard of this?”

Oh, yes I had. Though it was not yet released to the world when Zuckerberg left Harvard to launch his quirky little startup, Scratch (developed just a couple of T stops away) is quickly becoming the world’s most popular computer language for kids taking their first bite of programming. Last year, over 120 million people came to its site, and many of them built and shared projects, at a rate of a million a month. “It’s the gateway drug for Silicon Valley engineering,” says Fred Wilson of Union Square Ventures, a Scratch supporter.

But I also knew that Scratch, celebrating its 10th anniversary this month, was something more than training wheels. A product of the MIT Media Lab, Scratch is steeped in a complicated set of traditions—everything from educational philosophy to open source activism and the pursuit of artificial life. The underpinnings of this tool subtly, and sometimes not so subtly, convey a set of values through its use. So while those kids in Nigeria were hopping onto a stepping stone to a computer science career, they were also absorbing a very specific and in some ways quirky set of values that could be called hackerish, in the classic sense. These values include reverence of logic, an unshakeable belief in the power of collaboration, and a celebration of the psychic and tangible rewards of being a maker.

Scratch’s supporters, which include a number of funding programs, a cadre of passionate adherents in the education world, and an entire foundation devoted to its distribution, might disagree with my conclusions. But as I looked into Scratch’s success in its first decade, I found that the coolest part of the story was not how it effectively prepares kids for “real” coding (though that’s pretty cool). What really impressed me was how it taught kids to think like hackers.

Mitchel Resnick came to MIT to be close to Seymour Papert, a legendary figure whose treatises on computer science and education virtually established the way people think about that combination. “I really believed in his mission and his dream,” says Resnick. “Computers should not be used just to deliver information, but to empower kids to express themselves and engage with powerful ideas.”

One of Papert’s most noted contributions was Logo, a simple computer language for kids. Though Resnick loved the language — he introduced a variation of it in his PhD thesis — eventually he came to bemoan its limitations. “Logo hadn’t kept up with the times,” says Resnick, who by the 1990s was heading a group at MIT’s Media Lab charmingly dubbed the Lifelong Kindergarten Group. One of his projects was establishing a series of after-school “Computer Clubhouses” in low-income communities, a program eventually funded by Intel. “We saw that lots of kids wanted to create their own interactive stories, games, and animations, but there weren’t good tools to do it,” he says. So in 2003, he and his team wrote a National Science Foundation request that proposed a beginner’s programming system that improved on Logo in three ways:

Like the hacker culture that sprang from MIT decades earlier, Scratch reflected the mindset of the small community that built it. They designed their values into it. “We were doggedly idealistic,” says Karen Brennan, who joined the team soon after launch, and now, as an associate professor at Harvard, studies Scratch and helps teachers integrate it into their curriculums. The open-source mentality was built deep into Scratch, which has always been free to anyone. And anything made with Scratch is automatically part of the Creative Commons.

You can even sense this creation’s leanings by the name the team bestowed on it. In part, the name Scratch refers to empowering kids to build projects “from scratch,” as opposed to a “paint-by-numbers” method that doesn’t imbue the same pride of creation. But the grad student who first suggested the name was giving a nod to the noise that a deejay makes when dragging the needle on an LP — relevant to Scratch because it allows kids to “remix” the work of others by giving them access to the code written by their peers, and encouraging them to integrate the pieces they like into their own projects.

May 2007 was the official launch of Scratch. Coincidentally, that week a BBC reporter had been hanging out at the Media Lab, and mentioned it in the story. The influx of people checking out the new language crashed the server. “Since the report ran in England, it was like four o’clock in the morning, and we had to run to the lab to fix the server,” Resnick recalls.

Starting from the Computer Clubhouses, Scratch began to take off. Though endless commercial firms tried to push their products into schools, or to guilt-trip parents into buying their software, Scratch gathered a global audience of millions by word of mouth. (More than half of its users are overseas, and its commands are translated into more than 50 languages.)

But the difference between Scratch and commercial software went much deeper. Scratch was always a mission. Resnick has a story that shows the difference. He once spoke at a conference, following a presentation from an executive of a commercial educational software firm based in Europe. The exec boasted that his software was developing an immersive online world based on Warriors, a set of children’s books set in a world populated by clans of wild cats. He outlined how his software would let kids “consume these narrative missions” — essentially taking a first-person view of a story provided by his firm’s storytellers.

Resnick zeroed in on the word consume, which was the antithesis of what he wanted Scratchers to do. To him, Scratch was not about passively submitting, but creating — and creating yourself in the process. As the speaker droned on, Resnick typed “warrior cats” on the Scratch site search box and found hundreds of projects based on the series. One was a detailed character generator that allowed others to build personalized warrior cats. Another was an amazingly intricate game where players could control a warrior cat, fight rivals with a number of different techniques, and identify a medicinal plant in the environment for healing potential. Over 1,500 fellow Scratchers had played the game and left over 100 comments.

Resnick quickly downloaded the images and put the projects into his talk, the better to distinguish what made Scratch different from the commercial world. “In one case, children are interacting with digital technologies, participating in someone else’s story.” he said. “In the other case, children are creating with digital technologies, telling their own stories.”

Ten years into the experiment, Scratch is booming like never before. In 2013, the Media Lab team built Scratch 2.0, which increased sharing by allowing Scratchers to see and copy the code of any project online instantly—previously, they’d had to download the source. The improvements have dramatically increased usage. The next version, under development now, will probably kick off a bigger rise, as for the first time it will be much easier to create Scratch projects on mobile devices — the way much of the world accesses the internet. Scratch 3.0 will also allow kids to incorporate all sorts of exotic digital devices, such as 3D printers, into their programs.

Meanwhile, Scratch, which to date has not methodically been baked into K-12 programs, is finally becoming a formal part of a tech literacy curriculum. Resnick’s former student Karen Brennan has written a guide for schools, and she says that New York City is on track to have Scratch in every public elementary school within two years.

Scratch itself will always be free. The 20 people who work on it at MIT are supported by a number of funders, including an organization called the Scratch Foundation, co-founded by Resnick and David Siegel, who heads the hedge fund Two Sigma. (Siegel came to the cause via his son, an avid Scratcher.) The community hosts “Scratch Day” events throughout the world, many of which will be held this month. (Check out if there’s one near you.)

Though a broader dissemination of Scratch can’t help but boost computer literacy, I’m more interested in the way it spreads two ideas in particular: self-identify and openness.

Harvard’s Brennan, who has studied the effect of Scratch on kids who love it, explains that as they build projects, Scratchers develop a stronger self-image, as well as a broader view of the way technology interacts with their everyday existence. “This wasn’t originally on our radar,” she says, “but we saw that as kids talked about how much the work meant to them, they were seeing themselves as capable in new ways. Girls in particular too often see themselves not as computer people. But it’s hard to say that someone isn’t the kind of person who makes things with code — if they are actually making things with code!”

The other implicit lesson of Scratch is the value of sharing and collaboration. As Resnick described how collaboration on Scratch works, I recalled a phenomenon I had once written about regarding the early days of computer culture at MIT, and its implicit advocacy of a radical sharing that has miraculously spread and joyfully persisted to this day. In the late 1950s and early 1960, the very first hackers stored their programs on paper tapes, stored in drawers in cabinets alongside the room-sized machines. Anyone was free to pick up the tape, feed it into the computer, study the code, and make changes and improvements—and then punch out another tape and leave it for the next person.

From the start, Scratch offered a similar radical openness. But it wasn’t easy for kids to accept that in the beginning. “If you think learning to code is hard, try learning how to share,” says Resnick. One kid was so bent out of shape by having her creation “remixed” that she gave a TEDx talk about it!

“Kids were understandably a bit ruffled,” says Brennan. “The Scratch culture ran counter to all the other messaging they were getting in school, about being graded on individual effort. Taking from others’ work and building on it was very different.” The solution was a design intervention that made sharing more fun and productive, like explicitly building in aspects for credit and attribution.

“We put a lot of energy into trying to create a culture that helps kids adapt these values,” says Resnick. “Having a sense of openness and being a good citizen in an online community is definitely part of what kids are getting from this.”

Of course, Scratch does nurture future programmers. During a Scratch Foundation event earlier this year, I met Joseph Tenezaca, a young student at the South Bronx Early College Academy Charter School, who proudly showed off his Scratch product. “My goal,” he told me, “is to become a computer scientist.” If he makes it to Harvard, he will find that during the first week of its introductory computer science course, students use Scratch to get a sense of the fundamentals of programming — and to make it fun and easy for them to build something right away. “The dropout rate for the course went down substantially after they started to use Scratch for the first week,” says Resnick. “Particularly the dropout rate for women. The reasoning is that people saw right away that they could do something meaningful and interesting.”

I hope that many kids who discover coding through Scratch — particularly those from groups who have traditionally not felt welcome in computer science — find fantastic careers in the field. But just as important is that a much bigger number of Scratchers will internalize its core values of collaboration, openness, and the importance of being not only a consumer, but also a maker. And someone who thinks like a hacker, in the best way.

The world needs a lot more Scratchers. Fortunately, that’s going to happen.|||

At 10, Scratch is a popular tool to teach kids programming. But its real glory is how it imparts lessons in sharing, logic, and hackerism.