In the previous article we showed you how to create pure CSS modal pop-ups utilising a trick with the CSS selector :target. 

 

 In this article we will look at a pure CSS technique for controlling CSS style changes with input elements. By utilising input elements we can trigger multiple style changes using only HTML and CSS; we will use these techniques to control the direction and movement of a spaceship through a parallax animated starfield. 

 

 Click for a demo of the project we will be recreating

We are going to recreate the example shown in the demo above, and will start by creating a basic HTML markup linked to a stylesheet; that will contain the CSS styles that are going to be applied throughout the article:

Next, we will recreate the gradient background:

Create a div element with id wrap that will act as a container for the project:

The positioning of this element may seem a bit unusual; however, the combination of absolute positioning and translating centres the element vertically and horizontally inside its parent. 



 We will use this technique several times throughout the tutorial, so I will now explain how it works:

At this point you should have a gradient background and a container with a yellow border, as shown in the example displayed the below:

Next we will create the starfield. 

 The demo contains three starfields, each one containing stars of differing sizes: small, medium and large. 

 

 Let’s start by creating three div elements, one for each of the starfields. 

 Apply the class starfield to each div, this class will contain the styles shared between the three starfields. We will also add the classes small, medium and large, to provide the styles that are unique to the each starfield based on its size.

Next apply the shared styles for the starfields:

Now we need to create some stars for inside of our starfield. 

 Create a div element with the class starfield__stars as a child of each of the three starfield div elements:

Now we will use a trick with box-shadow to create our stars. 

 Using the CSS preprocessor SASS (Syntactically Awesome Style Sheets) we can quickly create several randomly generated numbers for our box-shadow values. 

 

 For those not familiar with SASS, or those who do not wish to use SASS, I will also provide a raw CSS version as an alternative.

We will start by creating a function called create-stars with the variable parameter n:

This function creates a variable called value that contains a string value with two random pixel values, each with a maximum value of 600 (the width and height of our starfield__stars elements), and the hex code for the colour white. 

 An example of the string value output of the variable value would be: ‘453px 12px #FFF’. 

 

 The function will then perform a for loop from 2 to n, appending more random value strings to the value variable. With n being the number of stars we want to generate, we will define this as an argument when we call our function. 

 

 At the end of the functions for loop, the function returns the variable: value.

Next, we will create 3 more variables: stars-small, stars-medium and stars-large.

The value of stars-small will be the output of our function create-stars looped 100 times, since we have attributed the argument of 100 to the function. We provide smaller arguments of 40 and 15 for stars-medium and stars-large as we want more small stars than medium and large. These values can be adjusted to suit your personal preference. 

 

 Next, we will apply these variables to our starfield__stars elements box-shadow property, like so:

You can use the following styles to create the stars created as shown above using SASS:

As you can see it is technically possible to achieve this effect without using SASS, since SASS compiles to Raw CSS, but it would take an extremely long time to create 155 random values for each star. 

 

 You should now have something that looks like the example below (obviously your stars may differ in position due to random generation):

Before we begin to animate the starfields, we are going to reposition the stars. Change the top property of the starfields__stars class from 0 to -600px, this will position the stars 600px above the container.

Next, we will define the animation keyframes that we will use to animate the position of the stars:

The position of the stars is currently 600px above the container, by translating the stars on the Y axis by 1200px we move them to 600px below the container. As discussed earlier, we will also apply the 3D transform translateZ to the transform in our animation to accelerate performance on older mobile devices. 

 

 Add the animation to the starfield__stars elements:

By providing different timings to the animations, we can change the speed of the stars movement. 

 We have declared 20s to the small stars, 30s to the medium stars and 50s to the large stars; this is the duration the animation will take to go from 0% to 100% keyframes. The smaller the number, the faster the stars will move. 

 

 Feel free to adjust the timings of the stars to your own personal preference. 

 

 Linear determines the animation effect, and will transition the animation equally throughout. 

 Infinite informs the animation to loop an infinite amount of times, without this value the animation would end after one cycle.

We now have a looping animation, but there are gaps in the animation when the stars are outside of the container. This problem is easily resolved by adding three secondary starfield__stars elements trailing behind each of the original starfield__stars elements. 

 

 Add an extra div element with the class starfield__stars as a child of each starfield element:

Next, we are going to edit our CSS so that the animations only target the original starfield__stars element of each starfield element. 

 

 Add the selector :nth-child(1) as shown below:

Now the animation will only target the original starfield__stars elements. 

 

 Add the following styles:

These styles will target each of the new, secondary starfield__stars elements. 

 We have added a delay timing to the end of our animations; delay determines when the animation will first start. The animations above will start after 10s, 15s and 25s delays, which is specifically half of the duration of the animations. This will result in a constant flow of stars with no gap in between the animations, as these secondary starfields will begin transitioning directly behind the original starfields. 

 

 Note that if you have used different timings to the ones above you will need to make the delay exactly half of your custom timings, in order for the transition to work correctly.

Click here to download the SVG of the starship in the demo for FREE! 

 

 Create a div with the class starship containing an img element pointing to the location of the starship SVG file:

We have positioned the starship element between the small starfield and the medium starfield, this will cause the small stars to pass under the ship, and the medium and large stars to pass over the ship. 

 You can adapt this to suit your own preference by changing the positioning of the element in the markup. 

 

 Apply the following styles to the starship class:

You should now have something that looks like the below example:

Now we will create a control panel that will control the direction of our spaceship. To achieve this, we are going to use HTML input elements to control CSS style changes on click. 

 

 Create four input elements before the div element with the id wrap:

We use radio type inputs as we only want one input to be selectable at a time, we can achieve this by declaring the same value for the name property on each input element. The value of the id property on each input element corresponds with the direction the spaceship will be travelling in. 

 

 Next, let’s create the buttons that will trigger these input elements, by utilising HTML input labels. When you click a label for a checkbox or radio type input, it will also trigger clicking the input itself. The advantage of this is that we can position the labels anywhere in the markup, while keeping the input elements at the top of the markup. 

 

 It is important that the input elements remain at the top of the markup, as the CSS selectors that we will be using later on cannot target elements that come before the input elements; this is due to the cascading nature of CSS. 

 

 Add the following label elements as children of the div element with id wrap, make sure to add the label elements after the last starfield element in the mark up, so the labels will appear above the starfields:

The property for links the label to the corresponding input with the same id value as the for value. We add the class shipcontrol for the shared styles across each label, and the classes forward, right, backward, left for the individual styles for each label. 

 

 Next, we will add the shared styles for our labels with the shipcontrol class:

You should be familiar with most of these properties by now. The box-shadow creates a blue glow effect around the element; we have also added a transition property for the border-color, as we will be creating a hover effect that changes the colour of the border to white. 



 At this point all of the labels are stacked on top of each other, so we will add styles for each label to position them around the spaceship:

Now, we are going to change the border-color of the selected directions label; we will also add an on hover effect that similarly changes the border-color, letting us know which direction is selected. 

 

 Add the following styles:

There are several selectors used above, which I will now go through to eliminate any possible confusion. 

 Starting with first selector #forward:checked ~ #wrap .shipcontrol.forward. 

 :checked, this means that this style will be applied if the input with the id forward is checked. 

 #forward:checked ~ #wrap tells the selector to select all elements with the id wrap that are preceded with an checked element with the id forward. 

 Therefore, the full line: #forward:checked ~ #wrap .shipcontrol.forward targets all child elements of wrap with both classes shipcontrol and forward; as long as the element with the id wrap is preceded by an element with the id forward that is checked. 

 

 We replicate this part of code for the remaining directions in the next three lines, on the final line we create a selector that targets all the elements with the shipcontrol class that are being hovered. 

 

 The border-color should now change on click and hover of each of your labels, as shown below:

Next, we are going to add a directional arrow to each label, to allow us to easily identify each label and its direction. 

 We will create the directional arrows with only CSS, by using a trick that allows you to create triangles using the CSS border property. 

 

 To do this, start by adding a div element with the class arrow as a child of each label:

It is really that simple to create a triangle in CSS. This works by making the top, left and right borders transparent, and leaves you with only the bottom border visible; when the element is of 0 width this creates the effect of having a three sided shape. 

 

 The illustration below shows a visual example of how this works; I have applied colours to the left and right borders to demonstrate how the shape is created:

The width of the triangle can be modified by adjusting the size of the left and right borders, and the height of the triangle can be modified by adjusting the size of the bottom border. 

 

 Next, we add the translate transformation to centre the arrow elements, and a rotate transformation to the right, bottom and left arrow elements so that they point in the correct direction:

Lastly, to finish off the ship controls we will apply a colour change to the arrows when their direction is selected or hovered. We do this using the method used previously for the labels:

Your ship control panel should now be complete, as displayed below:

Now that we have a control panel for our ship, we just need to add some styles to allow us to change the direction of the ships navigation when we click on the controls. 

 

 Add the following styles:

When clicked, the controls will now rotate the starship and starfields in the selected direction. 

 Add a transition to smooth out the effect:

Instead of linear this time we use a transition with the value cubic-bezier, this will make the ship look like it is slowing down as it comes to the end of the rotation. 

 There is a great tool at http://www.cubic-bezier.com that allows you to experiment with different cubic-bezier values to create the perfect animation.

We can control the input elements with the labels and therefore have no use for the actual inputs, so let’s hide them. 

 Apply the following styles:

These queries will apply a fluid width and height for devices with a smaller display than the element with id wrap, making our animation responsive for small screen devices.

In this article we demonstrateed how to use input elements and the :checked selector to control CSS changes. You can utilise this same technique to achieve different effects with various projects; some possible uses include: drop down menus, modal pop-ups, changing font size and much more. 

 

 As always, I would love to see what you have created using these techniques, so please post a link below; and if you require any further help to understand any of the CSS techniques I have covered in this article, please feel free to ask in the comments.|||

In this article we will look at a pure CSS technique for controlling CSS style changes with input elements. By utilising input elements we can trigger multiple style changes using only HTML and CSS; we will use these techniques to control the direction and movement of a spaceship through a parallax animated starfield...