In March of 2016, Joe Lencioni and I started porting over 6,117 lines of Ruby code to JavaScript for our project Import-JS. Roughly two months later we published v0.7.0, with 6,195 lines of JavaScript covering the same functionality as the old Ruby gem.

There were a few reasons why we wanted to do the conversion, all listed in the original github issue:

It was never about Ruby being bad in any way, nor about a need to “be down with the kids.” We mainly just wanted to make the tool easier to install and adopt for JavaScript developers. Import-JS started out as a vim plugin written in Ruby, because it was the only vim-supported scripting language that I felt comfortable in. But the project evolved to also support other editors (plus the command-line) which made the importance of being in Ruby fade over time. At the same time, both Joe and I shifted most of our professional coding over to JavaScript as well.

I made a few attempts at automatically converting a few files, using tools like Opal, ruby2js, and RubyJS to mention a few. But I was never happy with the quality of the resulting code, plus I realized that reviewing the output would take roughly as long as doing the conversion manually. So that’s what I did. Line by line, method by method. Of course, once I saw a pattern that kept repeating often enough, I added a macro for it. In the end I had a good toolbelt of macros to help me out:

All of these macros had their issues, so I still had to manually edit the result. It’s important to understand that while a one-to-one mapping exists, it doesn’t always give us the end result that we want.

If you’re a vim user like me and are interested in learning more about creating macros, here’s a quick rundown on how to record and play back typed keys.

When we were working on the conversion project, Import-JS was still heavily dependent on regular expressions to do most of the parsing. We used to have expressions that looked like this:

This might look daunting to look at, but compare that to the plain JavaScript version that we ended up having to convert to:

The built-in support for multiline string matching through RegExps in JavaScript is not up to par with Ruby. There’s no built in matching (matching whitespace over line-breaks). And there is no way of naming groups (notice in the Ruby version how we use to name the group matching the first quote). In JavaScript, we have to remember the index for all the groups.

Luckily, there is a different way. The xregexp npm module brings roughly the same syntax as what Ruby has:

Xregexp compiles to native , so we’re not trading execution speed for expressiveness. There’s a small compilation cost to pay as part of initializing the expression, but that was negligible to us. We did find an annoying performance bug related to whitespace that was quickly fixed, but apart from that we were quite happy with how powerful xregexp is.

While both Ruby and JavaScript can be viewed as object-oriented/functional hybrids, they both have their preferred style. Most Ruby projects (including Import-JS) I’ve come across take an object oriented approach, while JavaScript favors functional programming. We did move in the direction of functional programming, but there are still pieces of Import-JS that take a legacy object-oriented approach. We have a plan of breaking these classes up into functional modules instead, but it’s not the top priority right now.

After switching to JavaScript, a different world of opportunities opened up. We could replace the manual regexp-parsing with babylon. By publishing the tool as an npm module, we made Import-JS easier to install and adopt for JavaScript developers. And we made writing an Atom plugin a lot simpler.

After finishing up the Import-JS conversion, we quickly started converting Happo, another one of our open source projects previously written in Ruby. And a few weeks ago, I started my third larger conversion, this time bringing over a Rails application to Node and Express.|||

In March of 2016, Joe Lencioni and I started porting over 6,117 lines of Ruby code to JavaScript for our project Import-JS. Roughly two months later we published v0.7.0, with 6,195 lines of…