I made a URL shortener for Hacker News. The project itself is pretty simple, but the tech stack behind it is pretty interesting. I built it with no code at all, and despite that made it super fast, maintainable, and secure.

I’m pretty obsessed with the idea of how to simplify building applications. This is the sort of thing that led to me building CircleCI, and I discuss it all the time in my podcast. Right now, building applications has insane complexity.

As an example, let’s take the first version of hkrn.ws that I built. I was in Vegas at New Years, and burnt out from being in Vegas at New Years. So I wrote a thing. It took a few hours total, including buying the domain name, a ton of procrastination, and learning enough Ruby on Rails to do it.

It’s very simple. It turns URLs like hkrn.ws/12303075 into ones like https://news.ycombinator.com/item?id=12303075.

I knocked it up quickly in Rails, using some super simple routes that I’m not even going to post here, and deployed it to Heroku. Unfortunately, there were all sorts of problems.

That’s a lot of work. Maintenance ain’t free. How could I avoid this?

I rebuilt the entire thing in about 20 minutes using Cloudflare Page Rules. Page Rules allow you do a few specific things, including 302 redirects, for pages matching a pattern.

Cloudflare is a CDN, so there needs to be a site under it, right? Nope — if your rules cover every possible page, then it won’t ever hit the site behind it (though I had to give Cloudflare a fake IP address to even get into the UI, so this is maybe not a use case they envisioned).

The new version of hkrn.ws had no code, and was entirely made up of 11 redirect rules that implemented the following:

This is what it looks like in the Cloudflare UI:

Hacker News ids are all integers, so I needed to match that. In regex, that would be \d+, but as Cloudflare supports globs, not regex, I needed to fake that. Instead, I added a rule starting with each of 1–9. If you combine them, the regex would be [1–9].*

And that was it. No deploying, no hosting, no git push, no bundle install, no emacs, no capistrano, no docker, no nothing.

How well does it solve the problems I had with the first version I wrote?

99% of the requests were served in 30ms or less!! Crazy!! It does 2500 requests/sec!! Not the highest ever, but I didn’t write any code to make this work, so it’s pretty awesome.

So it’s possible to use Cloudflare is you’re building tiny apps that only use redirections. How would you do something bigger?

All in all, to bring this from “hobby project” to “thing I feel comfortable inflicting on the world”, would have required finding a fast and cheap host, keeping up to date on security, figuring out how to autoscale it, and maybe even rewriting it in a fast language like Go or Rust or C.

This is the frustrating part of building modern applications. Something simple is easy. Something simple that’s actually usable on the modern internet is not.

When we build applications today, we spread the code for that application over many machines and often many services. Function calls are no longer simple manipulation of the call stack, but instead involve http,

json, retry logic, load balancing, autoscaling, backoff, quality of

service, a status page, monitoring, analytics, rate limits, etc. This means the accidental complexity from making a simple function call is insane!

The solution, of course, is a complete change in how we build web/distributed applications. I want a tool or a language that allows me to write distributed systems with the ease with which I currently write single-threaded application.

I refer to this high level way of building apps as “Sculpting applications”. This is a toy example, but there are a few tools in the space and I plan on writing more about this. Please contact me (@paulbiggar) if you’re interested!|||

I made a URL shortener for Hacker News. The project itself is pretty simple, but the tech stack behind it is pretty interesting. I built it with no code at all, and despite that made it super fast…