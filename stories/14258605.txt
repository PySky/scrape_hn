This article's intention is to provide a easy-to-follow project-based process on how to create a RESTful API using the Flask framework.

A bit of context – I've written a bunch of articles on Django-driven RESTful APIs. Though a great resource for Django enthusiasts, not everyone wants to code in Django. Besides, it's always good to acquaint yourself with other frameworks.

Learning Flask is easier and faster. It's super easy to setup and get things running. Unlike Django (which is heavier), you'll never have functionality lying around that you aren't using.

Typical of all our web apps, we'll use the TDD approach. It's really simple. Here's how we do Test Driven Development:

We're going to develop an API for a bucketlist. A bucketlist is a list of all the goals you want to achieve, dreams you want to fulfill and life experiences you desire to experience before you die (or hit the bucket). The API shall therefore have the ability to:

First, we'll create our application directory. On the terminal, create an empty directory called bucketlist with . Then, into the directory. Create an isolated virtual environment:

Install Autoenv globally using Here's why – Autoenv helps us to set commands that will run every time we into our directory. It reads the file and executes for us whatever is in there.

Create a file and add the following:

The first line activates our virtual environment that we just created. Line 2, 3 and 4 export our variables. We'll integrate these variables as we progress through the development process.

Run the following to update and refresh your .bashrc:

You will see something like this on your terminal

Sometimes might not work if you have zsh installed. A good workaround would be to simply source the file and we are set.

Conversely, if you don't want to automate things for the long run, you don't have to use . A simple export directly from the terminal would do.

Inside our virtual environment, we'll create a bunch of files to lay out our app directory stucture. Here's what it should look like:

After doing this, install Flask using pip.

Flask needs some sought of configuration to be available before the app starts. Since environments (development, production or testing) require specific settings to be configured, we'll have to set environment-specific things such as a , and in our configurations file.

If you haven't already, create a directory and call it instance. Inside this directory, create a file called config.py and also init.py. Inside our config file, we'll add the following code:

The class contains the general settings that we want all environments to have by default. Other environment classes inherit from it and can be used to set settings that are only unique to them. Additionally, the dictionary is used to export the 4 environments we've specified. It's convenient to have it so that we can import the config under its name tag in future.

The tools we need for our database to be up and running are:

We might have used a easy-to-setup database such as SQLite. But since we want to learn something new, powerful and awesome, we'll go with PostgreSQL.

SQLAlchemy is our Object Relational Mapper (ORM). Why should we use an ORM, you ask? An ORM converts the raw SQL data (called querysets) into data we can understand called objects in a process called and vice versa (deserialization). Instead of painstakingly writing complex raw SQL queries, why not use a tested tool developed just for this purpose?

Let's install the requirements as follows:

Ensure you have installed PostgresSQL in your computer and it's server is running locally on

Createdb is a wrapper around the SQL command . We created

We've used two databases so that we do not interfere with the integrity of our main database when running our tests.

It's time to right some code! Since we are creating an API, we'll install Flask-API extension.

Flask API is an implementation of the same web browsable APIs that Django REST framework provides. It'll helps us implement our own browsable API.

In our empty file, we'll add the following:

The function wraps the creation of a new Flask object, and returns it after it's loaded up with configuration settings using and connected to the DB using .

We've also disabled track modifications for SQLAlchemy because it'll be deprecated in future due to it's significant performance overhead. For debugging enthusiasts, you can set it to for now.

Now, we need to define an entry point to start our app. Let's edit the file.

Now we can run the application on our terminal to see if it works:

We can also run it using . We should see something like this:

It's time to create our bucketlist model. A model is a representation of a table in a database. Add the following inside the empty file:

Here's what we've done in the file:

Migrations is a way of propagating changes we make to our models (like adding a field, deleting a model, etc.) into your database schema. Now that we've a defined model in place, we need to tell the database to create the relevant schema.

Flask-Migrate uses Alembic to autogenerate migrations for us. It will serve this purpose.

A migration script will conveniently help us make and apply migrations everytime we edit our models. It's good practice to separate migration tasks and not mix them with the code in our app.

That said, we'll create a new file called manage.py.

Our directory structure should now look like this:

Add the following code to :

The class keeps track of all the commands and handles how they are called from the command line. The MigrateCommand contains a set of migration commands. We've also imported the models so that the script can find the models to be migrated. The manager also adds the migration commands and enforces that they start with .

We will run migrations initialization, using the command as follows:

You'll notice a newly created folder called migrations. This holds the setup necessary for running migrations. Inside of “migrations” is a folder called “versions”, which will contain the migration scripts as they are created.

Next, we'll run the actual migrations using the command:

You’ll also notice that in your versions folder there is a migration file. This file is auto-generated by Alembic based on the model.

Finally, we’ll apply the migrations to the database using the command:

Our DB is now updated with our table. If you jump into the prompt, here's a screenshot on how you can confirm if the table exists:

Inside our tests directory, let's create tests. Creating tests that fail is the first step of TD.(Failing is good). These tests will help guide us in creating our functionality. It might seem daunting at first to write tests but it's really easy once you get practicing.

On the parent directory, create a test file called . This file will contain the following:

A bit of testing explanation. Inside the we make a POST request using a test client to the url. The return value is obtained and its status code is asserted to be equal to a status code of . If it's equal to 201, the test assertion is true, making the test pass. Finally, it checks whether the returned response contains the name of the bucketlist we just created. This is done using If the assertion evaluates to true, the test passes.

Now we'll run the test as follows:

All the tests must fail. Now don't be scared. This is good because we have no functionality to make the test pass. Now's the time to create the API functionality that will make our tests pass.

Our API is supposed to handle four HTTP requests

Let's get this done straight away. Inside our file, we'll edit it as follows:

We've also added an import immediately inside the method so that we get access to the Bucketlist model while preventing the horror of circular imports. Flask provides an decorator on top of the new function which enforces us to only accepts GET and POST requests. Our function first checks the type of request it receives. If it's a , it creates a bucketlist by extracting the from the request and saves it using the method we defined in our model. It consequently returns the newly created bucketlist as a JSON object. If it's a request, it gets all the bucketlists from the bucketlists table and returns a list of bucketlists as JSON objects. If there's no bucketlist on our table, it will return an empty JSON object .

Now let's see if our new and functionality makes our tests pass.

Run the tests as follows:

2 out of 5 tests should pass. We've now handled the GET and POST requests successfully.

At this moment, our API can only create and get all the bucketlists. It cannot get a single bucketlist using its bucketlist ID. Also, it can neither edit a bucketlist nor delete it from the DB. To complete it, we'd want to add these functionalities.

On our file, let's edit as follows:

We've now defined a new function which uses a decorator that enforces it to only handle Http requests. We query the db to filter using an id of the given bucketlist we want to access. If there's no bucketlist, it and returns a status. The second if-elif-else code blocks handle deleting, updating or getting a bucketlist respectively.

Now, we expect all the tests to pass. Let's run them and see if all of them actually pass.

We should now see all the test passing.

Fire up Postman. Key in and send a POST request with a name as the payload. We should get a response like this:

We can play around with Curl as well to see it working from our terminal:

We've covered quite a lot on how to create a test-driven RESTful API using Flask. We learnt about configuring our Flask environment, hooking up the models, making and applying migrations to the DB, creating unit tests and making tests pass by refactoring our code.

In Part 2 of this Series, we'll learn how to enforce user authentication and authorization on our API with a continued focus on unit testing.|||

