This program is Copyright © 2001 by Alex Fink.

This program is supplied without representation or warranty of any kind. The author and The Museum of HP Calculators therefore assume no responsibility and shall have no liability, consequential or otherwise, of any kind arising from the use of this program material or any part thereof.

A Turing machine is a very simple theoretical type of computer; however, anything which any modern computer can compute, a Turing machine with a sufficient number of states will also be able to.  The machine moves around on an infinite tape containing a string of symbols; in this program the standard binary bits (0 and 1) are used.  The Turing machine's "program" is a sort of table of rules.  Depending on the "state" the machine is in, which in this program is a whole number from 1 to 23, and the tape symbol that it is on, it can write a new symbol in its current position (or write the same symbol in order to not change it), move either left or right on its tape, and switch to another state.  There is a special state, "halt", which stops the operation of the machine.  The machine starts operating in state #1.  A sample rule might look like this:

"If in state #17: 

             on top of a 0 on the tape:  write a 1 on the tape, move left, and go to state #6; 

             on top of a 1 on the tape:  write a 0 on the tape, move right, and halt."

The first thing that must be input to the program is the number of states that the machine uses, denoted by n.  Press A to input this value.  The program will then display "1.00"; this is a prompt to enter the rule for state #1.  After entering this rule, press B, and the machine will display "2.00", which is a prompt to enter the rule for state #2.  Continue entering rules and pressing B, until the last rule has been entered and a display of "0.00" appears.  Then start to enter the numbers initially on the tape from right to left; press C after each one of these, or f C if the machine is to start positioned on the symbol just entered.  Finally, press D to start the machine.

A rule must be input to the program in "sswm.sswm" format.  The "ss" is the state number to go to; it can be from 01 to 23, or 00 for halt.  It is important that leading 0s on the state numbers be entered.  The "w" is the symbol to write on the tape, which is either 0 or 1; and the "m" is the direction to move, 0 for left and 1 for right.  If the machine reads a 0 from the tape, it will use the left half of the rule, and if it reads a 1 it will use the right half.  Thus, if inputting the sample rule above, one would type "0610.0001".

The program will display the machine's current state with a number like "2.abcdefghi  xx".  The digits a through i are the part of the tape nearest the machine, and e is the symbol which the tape is actually on.  xx is the state number that the machine is currently in.  All of these input and output formats should become much clearer with the example below.

Optionally, the program allows a printout of the input entered and a record of the machine's operation.  This option is selected by pressing E until "1.00" appears in the display.

No checking is done to determine if rules entered are valid.  If an invalid value for n is entered or an invalid state number is found while running, a flashing display will result which can be cleared by pressing R/S.

By default, the Turing machine's tape is full of 0s.  This program can store up to log2(10^10), or approximately 33, consecutive symbols on its tape; all symbols on either side of this block will appear as 0s.

All data storage registers are used.

Here is a set of rules for a simple 6-state Turing Machine which, when started on the leftmost end of a block of "1"s on a tape that otherwise contains only "0"s, will make a new block of "1"s double the length of the original one, destroying the original in the process.

If in state #1: 

             on top of a 0 on the tape:  write a 0 on the tape, move right, and halt; 

             on top of a 1 on the tape:  write a 0 on the tape, move right, and go to state 2. 

 If in state #2: 

             on top of a 0 on the tape:  write a 0 on the tape, move right, and go to state 3; 

             on top of a 1 on the tape:  write a 1 on the tape, move right, and go to state 2. 

 If in state #3: 

             on top of a 0 on the tape:  write a 1 on the tape, move right, and go to state 4; 

             on top of a 1 on the tape:  write a 1 on the tape, move right, and go to state 3. 

 If in state #4: 

             on top of a 0 on the tape:  write a 1 on the tape, move left, and go to state 5; 

             on top of a 1 on the tape:  write a 1 on the tape, move right, and go to state 4. 

 If in state #5: 

             on top of a 0 on the tape:  write a 0 on the tape, move left, and go to state 6; 

             on top of a 1 on the tape:  write a 1 on the tape, move left, and go to state 5. 

 If in state #6: 

             on top of a 0 on the tape:  write a 0 on the tape, move right, and go to state 1; 

             on top of a 1 on the tape:  write a 1 on the tape, move left, and go to state 6.

Input this set of rules to the program and run it on a tape containing "...0000000011100000000...".



 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 016   GSB 5    Check whether number of states is valid. 

 

 

 

 

 

 

 

 

 

 

 

 

 

 030   ISZ I    Display number of next state, or 0 if finished. 

 

 

 

 

 

 

 

 

 

 

 

 

 043   LBL C    Determine whether start bit has been entered. 

 

 

 

 

 048   ST+ 0    Add next bit to tape if start bit has not been entered. 

 

 

 

 

 

 

 

 

 

 

 059   LBL 1    Add next bit to tape if start bit has been entered. 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 095   6        Repeat for each bit within 4 of current position. 

 

 

 

 

 

 

 

 

 

 

 

 

 108   RCL I    Choose exponent of 10 corresponding to current state. 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 165   X!=0?    Check whether next state is valid. 

 

 

 

 169   LBL 5    Ensure that X is from 1 to 23. 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 



Go back to the software library

 Go back to the main exhibit hall

|||

