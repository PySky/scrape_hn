In Bytecoin Wallet 1.0.8 release Bytecoin team have introduced the very first implementation of ABISprotocol created by Odinn. ABISprotocol proposes a micro-donation feature that allows for partially donating user's mining revenue or a portion of a transaction to charity. Please make sure to read the blog post written by Odinn himself, 'A Greater Giving Potential: Introducing Micro-Donations in Bytecoin', to find out more about the idea behind ABISprotocol.

Today's blog post is dedicated to the technical side of the implementation and will mainly cover the percentage of a transaction part of the update. During the setup process you can set maximum percentage of a transaction to be donated. On average, donation will be lower than the specified percentage. Why? Let's have a look into the how the donation part of the transaction is being constructed first.

Usual Bytecoin transaction construction process, in simplified terms, can be described as follows:

In order to implement transaction micro-donations we have adjusted step #4. Instead of sending the change back to the user's address, wallet combines outputs in such a way so that they would be as close to the specified percentage of transaction as possible.

This process can be best described with an example:

First, user declares that he would like to donate 2% of each transaction to charity. He then sends a 10500 BCN transaction to his friend.

Wallet starts to build a transaction; it looks for the outputs that would add up for 10500 BCN and finds 2 closest ones - 10000 BCN and 1000 BCN. Two transfers will be included into this transaction:

Please note, that these outputs are mixed inside this transaction, so an observer would not be able to distinguish the exact amount being transferred from the change.

Let the first transfer consist of 10000 and 500 outputs while the second one would consist of 400, 90, 9, 0.9, 0.09. The latter outputs are intended for a change, but since the user would like to donate 2% of transaction, wallet starts to form a new transfer from the change outputs to make a donation. 2% of 10500 BCN is 210 BCN and the wallet has 499.99 BCN at its disposal. Wallet will try to send an amount as close to the 210 BCN as possible, using provided outputs. In this case, wallet will be able to send only 99.99 BCN as a donation and the rest of the change will be sent back to the user's address.

Every time the user sends a transaction such process will take place. Every time the wallet will try to combine change outputs so they would form a sum as close to the 2% as possible. If there are no change outputs below 2% threshold no donation will be made.

One might wonder why we used change instead of creating a separate set of outputs. The reason behind it that each set of outputs for a transfer may contain only one output of each power. For example, due to the protocol rules a single set of outputs can't have outputs for 300 BCN and 200 BCN, thus these outputs are sent to different recipients.

Ordinary Bytecoin transaction consists of two sets of outputs: transfer and change. The appearance of the third set of outputs could reveal another recipient or a donation. Knowing for sure that the donation can't be more than 10% of the transaction one can try to assume which output is the transfer, which is the change and which is the donation.

Therefore, it would be much simpler to find out the actual amount of the transaction which can potentially lead to privacy decrease. That is why we've decided to use the same set of outputs as change, concealing an extra recipient within the change outputs.

Every Bytecoin Wallet user will be able to see how much he donated from a particular transaction and to whom. This information is available only to user that sent a transaction and not to the whole network. Due to this fact, if a user would like to 'Reset' his wallet, he won't be able to separate donation transfers from the usual ones.

Please feel free to ask us questions regarding the micro-donations implementations in Bytecoin in the comment section below.|||

Today's blog post is dedicated to the technical side of the implementation and will mainly cover the percentage of a transaction part of the update. During the setup proc