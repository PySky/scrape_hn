I have a ton of little programs I use on a day-to-day basis just to make my life easier. I figured it would be fun to share them so other people could either copy them or be inspired to make there own. I have blogged about some of these tools before and will link to the appropriate full posts when applicable.

Note that these are in somewhat arbitrary order such that the things are grouped near related items. There are even more that I left out which you can see at github.

The following four tools, taken together, allow me to select a unicode character by name, which then gets placed in my copy buffer, and then I can paste it. It may sound silly but it’s pretty handy for certain characters. I’d like to get working at some point to bolster this but this works better for less commonly typed characters. I use this a handful of times a day.

An honorary member of the tools above is , which copies to my copy buffer. I should figure out how to merge it into something above.

Show dmenu, to select program to run (eg .) I use this a few times a day.

Show dmenu of vim sessions to resume. (More details here and to a lesser extent here.) I use this a few times a day.

Prompts the user to make a partial screen selection with the mouse, and then runs OCR on the screenshot and places the results in the copy buffer. For best results make text of size 16 or higher. It is absurd that I have no post for this. Used maybe once a month but I get really stoked every time.

Randomly show a different background from the directory, every 25 minutes. I sorta think this is stupid and want to stop using it, but every time I go to delete it I can’t bring myself to.

This tool fixes the annoying problem of websites blocking paste. It simply types out whatever is in the clipboard. Lifesaver.

An xclip wrapper that uses a less bizarre default selection buffer.

The following four tools are custom URI handlers. I wrote all about these a while back. I use these fairly often with my personal reference system.

And the following two exists almost solely to support the , though I could see writing some program to make a CLI fogbugz handler.

Runs my choice of file manager. For some reason I periodically forget the completely arbitrary string: . Used maybe once a week when I forget that string.

Print the of the passed container. Read all about this here and to a lesser extent here. I rarely use this but when I do it’s really handly. prints the root pids of the passed container and was written to support and mentioned in the inital blog post.

Run the obscurely named w.pl container. I could and maybe should write a whole blog post about this. The short version is that this exists solely so that awesomewm won’t block on the network when showing my weather widgets. Runs automatically when I start my X session.

Reimplementation of . Leaves out and other OS cruft, wraps output files in a directory if no root directory was created. Another tool that probably deserves it’s own post.

Wraps tar to encourage me to not use muscle memory for longer command flags.

Like but using . Not in the habit of using this yet.

Splits most recent commit into a separate commit per file. I used this when I had to manually clean up a boatload of git history.

Remove whitespace only changes from the current checkout. This is from back when I had hooks to automatically fix whitespace on save.

I have written too much about these already.

Complicated; read about it here.

List and view emails directly via IMAP. for more details. Has bugs because python.

Creates resized copies of all passed filenames to and initiates a new email containing them via mutt. I used to use this a lot when sharing baby pictures with my family. Now I just text them the pictures.

An attempt at generically trimming emails for brief responses to very long emails. Currently unused and very flakey.

Silly filter that removes all non-ASCII characters, and replaces a couple UTF-8 characters with ascii versions.

I used to use to dim my laptop’s screen, but it has a weird delay caused by dbus or something, so I wrote , which is way less generic but is instant and simple.

This silly thing goes in my prompt and prints the unicode character that represents the clock face for the current time. Simply to remind me that time is fleeting and not to waste it.

My personal, digital, wall of clocks. Used a few times a week.

The actual inspiration for this post. I have been using Athena a lot lately and the output is CSV, but I don’t have great commandline tools for CSV. This simply converts the CSV to JSON using the first line as the keys.

Tool to assist in iterating over chunks of a diff in vim.

Like , but better; works with directories too. Strangely preëxists my knowledge that actually used to work with directories.

Filter that reads lines prefixed with tabs and newline separated links; writes title of page prefixed with tabs and link prefixed with tabs. Used fairly often with my personal filing system.

Create persistent functions by actually writing scripts. Example usage:

I can’t believe I don’t use this more.

Awesome tool to ensure I have dotfiles wherever I go. Read about it here. Used multiple times a day.

Firefox wrapper that reads from standard in instead of requiring a filename. Used fairly often.

Graphs time series data by parsing CSV from standard in.

Creates time series data (likely used with the above ) by counting lines and grouping them by a given date format.

Watches a list of directories defined in the json document in the file in the first argument, and restarts the service by sending , , and telling the supervisor to start the service. I have a version of this at work that is more generically useful. I sorta wanna rewrite it in Go since a tool like this feels weird and bloated in Perl.

Gets a password from your netrc file. (Login is optional.)

Creates a temporary file containing the contents of the copy buffer, allows the user to edit it with gvim, and the submits the contents to a pastebin via nopaste. Rarely used; not sure why.

Pass a module name (eg ) and shows it in vim. To browse as if you were in a web browser, press over other modules (like ) and to go back press . I use this fairly often. I really like it.

Strips formatting from any text in the copy buffer. Not used that often.

Handy terminal based timer especially for The Pomodoro Technique. Allows pausing, resuming, and aborting the timer entirely. If a is running and the is installed, will will slowly decrease light from bright red to black, ending with 5 green blinks.

Prints the screen resolution. I used to use this when I used to connect to windows. Still handy sometimes.

Runs passed perl script, with the leading tokens being loaded and aliased as , , , etc.

Compile and render an mkit to STDOUT. Takes path of mkit and JSONY doc as the data. I don’t use this since we don’t (yet?) use mkit at my current job.

Almost none of the code for work runs on my actual laptop, but I like to make it feel local, so I have a bunch of little wrapper scripts for commonly run commands to run inside of my sandbox. More importantly is , which runs a command (as in ) inside of my sandbox as my user with lots of env vars set. Closely related is , which runs the command over ssh instead of execing directly, so that the command has access to my .

This post is already too long, but I absolutely have to mention The Unix Programming Environment . My friend and coworker Mark Jason Dominus gave me his copy and it has been great. I wish that they made books like this nowadays. It’s a solid survey of Unix tech and a surprising amount of it still applies, thirty four years later.

Even ignoring the specifics, the viewpoint of improving your environment instead of living with the pain of what the vendor shipped you is something that resonates deeply with me (which is hopefully obvious at this point.) I might write a whole post about this book at some point, but even if I don’t consider this post a spiritual followup of that book.

I hope some of the tools above inspire you to make your own tools or soften the edges of some of the things you use on a daily basis.|||

I have a ton of little programs I use on a day-to-day basis just to make my life
easier.  I figured it would be fun to share them so other people could either
copy them or be inspired to make there own.  I have blogged about some of
these tools before and will link to the appropriate full posts when applicable.