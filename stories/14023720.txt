I have developed which is a fast Promise library. It is inspired by . The library is not only a benchmark exercise but a production-ready library that implements the Promise A+ standard, and does so faster than .

Before explaining it, I would like to give basic information about Promises. A Promise can have three states: , and . Once the state goes to another state from , the state cannot change again.

Besides, Promises must always resolve asynchronously, this is one of the most important things.

When I develop libraries, I always follow these three principles.

Following this principle helps avoiding unnecessary memory allocations. For example,

When is called, the function is always created. It is one of unnecessary memory allocations. The code is rewritten to follow next example.

Next is another extra example of memory allocation.

In this case, is the only required variable. , and are unnecessary. The code is rewritten as below,

There is not a big difference between the examples, but if instances or functions are created in the function, it would make big difference.

For example, when creating APIs, it is necessary to check the request parameters.

When implementing APIs, it is preferable to check the arguments in inner functions because the function might be called from other functions. However, when implementing libraries, the function doesn’t need to check the arguments. Before executing inner functions, the arguments are already checked, so it isn’t necessary to check them again in inner functions.

I would like to explain this concept with examples.

If you open library code, you will see parameters. But the is not so important. 

 has roughly two states: or not. The big difference in handling is between the two states.

When is called, a child instance is created. At that time, is not called yet, so the parent’s state is . When the state is , the child instance is linked to the parent instance as a child. After that, is called asynchronously by . And then, is called with the result.

When state is , a child instance is linked to parent instance. After is called, is called. It is very simple.

When is called, the parent’s state is already not . In this case, if is called without anything, the function is executed synchronously. For that reason, the library needs to call an asynchronous function. Before calling the function, is set to a and this function is called. The is on Node.js. And then calls all queued functions asynchronously.

When a state is not , is set to a , and then queued functions are executed by asynchronous functions.

You might be wondering why is set to a . This is the smartest idea in .

I would like to explain it with this example.

If a is not used, an asynchronous function is called three times. But if a is used, the function executes all queued functions at once.

I’m not sure if the gives a big benefit or not. But I think why is fast is because of simplicity.

I have just followed these important principles,

If you follow them, you will be able to make good libraries. I made a benchmark to check performance between and . The benchmark result is here.

has very simple implementation, therefore it is faster than . If you are interested in , I would like you to contribute to it.

The most important part is dependency. 

In , every promise instance has to be an instance of . When the instance is checked, function is called. But only checks if the instance is made by the current class or not. So if many versions are used, will be slowed down.

The key to avoiding losing performance is to have same dependency. has dependency, therefore every instance is extended by same class. will keep high performance.

I would like to show the benchmark example.

As you can see, different dependencies have same sub-dependencies. When is used, the is shared.

was using same versions, and used child instances of different versions. never slows down even if the versions are mixed.

If you follow the three important principles, you will make a fast library. 

Also has many functions inspired by and . If you still use callback style, I would like to encourage you using . 

If I contribute to and communities, I would be happy as a contributor.|||

I have developed Aigle which is a fast Promise library. It is inspired byBluebird. The library is not only a benchmark exercise but a production-ready library that implements the Promise A+ standard…