Wrapping a function in a ‘def-macro’ is a common Clojure pattern. This practice serves two purposes: providing a nicer syntax for definitions, and controlling evaluation order. Although simple to understand, this pattern is somewhat repetitive. Introducing: a higher-order macro that relieves this pain.

The example above uses httpkit’s function to define a macro. With , it can be written as follows.

Implementation was a little tricky, because I had to keep track of two different compile-time execution contexts: defining a macro, and using that macro to define something.

Both normal and macro (eval-after) evaluation are supported, to accomodate for the two most common usecases.

This macro solved a common annoyance for me. I hope you find it as useful as I do, and encourage you to replace some boilerplate with it.|||

Wrapping a function in a 'def-macro' is a common Clojure pattern. This practice serves two purposes: providing a nicer syntax for definitions, and controlling evaluation order. Although simple to understand, this pattern is somewhat repetitive. Introducin...