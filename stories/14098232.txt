You can install with :

Called on each node of the tree.

By default will return the property of a node.

Four operations are available. Note that depending on the traversal order, some operations have no effects.

Notifies that the current node has been removed, children won't be visited.

Because has no idea about the intrinsic structure of your tree, you have to remove the node yourself. only notifies the traversal code that the structure of the tree has changed.

Notifies that the current node has been replaced, the new node's children will be visited instead.

Because has no idea about the intrinsic structure of your tree, you have to replace the node yourself. notifies the traversal code that the structure of the tree has changed.

Get the parent of the current node.

Get the depth of the current node. The depth is the number of ancestors the current node has.

Get the level of current node. The level is the number of ancestors+1 the current node has.

Get the index of the current node.

is built to be super fast and traverse potentially huge trees. It's possible because it implements its own stack and queue for traversal algorithms and makes sure the code is optimizable by the VM.

If you do need real good performance please consider reading this checklist first.

Your main objective is to keep the traversal code optimized and avoid de-optimizations and bailouts. To do so, your nodes should have the same hidden class and your code stay monomorphic.|||

tree-crawl - :leaves: Agnostic tree traversal library.