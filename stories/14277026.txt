In the world of solution architecture, where we as solution architects are developing configurations to meet specific customer needs, we often consider a great deal of interesting scenarios. One of such scenario my team at EnterpriseDB® (EDB™) encountered recently bears exploring further with this blog.

For a business critical application, transaction durability is crucial. Therefore, we helped one customer recently to design an architecture for near zero data loss.

One of our customers wanted to use two synchronous replication mechanisms within the same data center with a high-speed network between the master and standby for data transfer. Also, the database administrator  wanted to have read consistency from the replicas.

In Postgres 9.6, we have synchronous_commit = remote_apply, which helps in getting read-balancing consistency.

In addition to these requirements, the customer wanted to layer another capability into architecture; where if one of his synchronous standby replicas is down, then write transactions should not be stopped/hung. Transactions on the master should go into a “waiting state” if the synchronous replication is down.

EDB Postgres™ Advanced Server 9.6 comes with all building blocks out of the box to include this kind of logic to handle the scenario.

To achieve this capability in EDB Postgres, the following steps can be used:

1  Create the pg_background extension. The following is a link which you can use to compile pg_background module:

[root@ca420ebfb299 pg_background]# make install

 /bin/mkdir -p '/usr/edb/as9.6/lib'

 /bin/mkdir -p '/usr/edb/as9.6/share/extension'

 /bin/mkdir -p '/usr/edb/as9.6/share/extension'

 /bin/install -c -m 755  pg_background.so '/usr/edb/as9.6/lib/pg_background.so'

 /bin/install -c -m 644 .//pg_background.control '/usr/edb/as9.6/share/extension/'

 /bin/install -c -m 644 .//pg_background--1.0.sql  '/usr/edb/as9.6/share/extension/'

 [root@ca420ebfb299 pg_background]# psql

 psql.bin (9.6.2.7)

 Type "help" for help.

2.  Create the dbms_scheduler and pgagent extension in EDB Postgres as shown below:

3.  Now, you can create the procedure which can do following:

For more information on the UTL_SMTP package in EDB Postgres, click here.

synchronous_standby_names = 1(standby1, standby2,) The above setting will cover the scenario, where write should be stopped or should be in hanging state in case all standbys are down.

Note: If you are using synchronous standby with replication slots, it’s recommended to have the same name for synchronous standbys and replication slots.

4.  The following is a link procedure which covers all points mentioned in step 3.

5.  After creating the procedure, the user can schedule a job as given below:

'synchronous_to_asynchrnous',

       'STORED_PROCEDURE',

       '"public"."transition_sync_async"',

       3,true,  

      'Job which can transition synchronous to asynchronous'); 



DBMS_SCHEDULER.create_job (

    job_name       => 'job_synchronous_to_asynchrnous',

    program_name    => 'synchronous_to_asynchrnous',

    schedule_name   => 'every_minute',

    comments        => 'Job which can transition synchronous to asynchronous');

Following is a snapshot of manual execution of job:

For more information on the DBMS_SCHEDULER package in EDB Postgres, click here.|||

In the world of solution architecture, where we as solution architects are developing configurations to meet specific customer needs, we often consider a great deal of interesting scenarios. One of such scenario my team at EnterpriseDB® (EDB™) encountered recently bears exploring further with this blog.