StackParam is a utility that gives method parameters to Java 8 stack traces. It is written in Rust and built to be fairly unobtrusive.

It adds the parameter information to stack trace outputs and can be used to programmatically obtain method parameters (including "this" for non-static methods) up the stack.

StackParam is a shared library loaded as a JVMTI agent (see Installation to get it). For example, say the following Java class is at :

Compile with which will create the file. Now run via Java while specifying the shared library path:

The file name might be on Windows, on Linux, etc. The output is:

Compiling with the option passed to gives debug information to StackParam so the parameter names are accurate. The output for the same code as above compiled with debug info is:

Note that StackParam works with all exception stack trace uses and even provides a mechanism to programmatically obtain method parameters up the call stack.

if you are using 64-bit Windows or Linux, the easiest way is to download the latest stackparam.dll or libstackparam.so from the releases area. For Mac or other architectures, I don't have a precompiled shared lib but it should be easy to build. See Manually Building.

This should work with OpenJDK/Oracle 8. It might also work on OpenJDK/Oracle 7 if manually compiled as the injection points are similar, but this is untested. This will not yet work with OpenJDK/Oracle <= 6 or OpenJDK/Oracle 9. It will also not work on other JREs whose runtimes are not based on the OpenJDK stdlib.

It simply didn't suit my needs to support other JVMs (yet), but it would be fairly trivial to implement if enough people want it.

I doubt Android would be as straightforward. This seems to imply there is no JVMTI interface. If that was in place, the class there would need the specifically targeted injections to support our needs which is no big deal.

This library is written in Rust and compiles a Java class at build time. Therefore the prerequisites are a recent installation of Rust and a JDK 8 installation with on the .

Once the prerequisites are installed, the tests can be run via :

This does several things internally including running Gradle (automatically downloaded if not present) to build a Java class and running Gradle again to do some Java-side tests.

If the tests succeed, build can be done via as well:

Once built, the shared library is in where might be on Windows, on Linux, etc.

Once the agent is loaded, it automatically injects strings into stack traces.

While JVMTI has a few approaches to deploying an agent, this agent needs to be deployed via command line because it needs to hook into the very earliest part of the JVM load. This is easily done via the path parameter of the command, e.g.:

Instead of for the exact path, could be used to just give the library name. Assuming the is on the in Windows or is in the shared library location (e.g. an overridden ) in Linux, you can run:

Note, although untested, this library can likely be placed in the JRE's folder to get the same effect.

This library uses Rust's env_logger which lets the logging be controlled by the environment variable. The binary name is , so setting to shows info logs, shows debug logs, and just shows all logs. The logs are emitted to the standard error stream.

In addition to just showing parameters, the class is automatically injected. This class provides the following method:

* Returns the stack params of the given thread for the given depth. It is * Each returned sub array (representing a single depth) has params * including "this" as the first param for non-static methods. Each param * takes 3 values in the array: the string name, the string JVM type * signature, and the actual object. All primitives are boxed. * In cases where the param cannot be obtained (i.e. non-"this" for native * methods), the string "<unknown>" becomes the value regardless of the * @param thread The thread to get params for * @param maxDepth The maximum depth to go to * @return Array where each value represents params for a frame. Each param * takes 3 spots in the sub-array for name, type, and value. * @throws RuntimeException Any internal error we were not prepared for [][] loadStackParams( thread, maxDepth);

Since this is automatically injected, it can easily be accessed via reflection. The problem with accessing via reflection is there are a few stack frames between the caller and the reflected method that is called on which makes the params less predictably navigable.

Instead, you can either add the above contents in a class in your source code or you can add a dependency to the library JAR to your build file via . Even though it is included, the file/JAR will never be directly used because the actual class is injected early at VM startup.

Once in place, you can do neat things like grab the caller, e.g.:

While this kind of programming/validation in general is very bad and not portable, it demonstrates usage of the library. Also, it is very high performing.

There is also a method on the class which takes the given set of triplets and appends it (after a space) to the given and returns it. It is mostly a helper for the library, but can be used by others.

I wouldn't, but I took care to silently fail and fall back to original JVM functionality in most cases. There are a few possible burdensome performance issues:

There are also a couple of security concerns:

StackParam takes a series of steps to do what it does. In no particular order, they are:

While it looks like a good bit of reverse engineering and a bit brittle, it's not that bad. Failures are handled gracefully for the most part. And it is not that difficult to add conditionals and do different bytecode manipulation based on what is seen (e.g. for different Java versions or different JVMs).

The entire bytecode manipulation library was taken from https://github.com/xea/rust-jvmti with many thanks. I also looked at that repo quite a bit when I was getting started and took the initial JVMTI definitions from there.

Also, this project uses the JNI definitions from https://github.com/sfackler/rust-jni-sys.|||

stackparam - JVM agent to add method parameters to Java stack traces