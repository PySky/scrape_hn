is a Kubernetes-native serverless framework. It is currently under active development, the most up-to-date version is . If you experience any problems during this growing phase please file an issue and we will get back to you as quickly as we can.

There are other solutions, like fission from Platform9, funktion from Fabric8. There is also an incubating project at the ASF: OpenWhisk. We believe however, that Kubeless is the most Kubernetes native of all.

Kubeless stands out as we use a ThirdPartyResource to be able to create functions as custom resources. We then run an in-cluster controller that watches these custom resources and launches runtimes on-demand. These runtimes, dynamically inject the functions and make them available over HTTP or via a PubSub mechanism.

For PubSub we use Kafka. Currently we start Kafka and Zookeeper in a non-persistent setup. With you can create topics, and publish events that get consumed by the runtime and your even triggered functions.

Download from the release page. Then launch the controller. It will ask you if you are OK to do it. It will create a kubeless namespace and a function ThirdPartyResource. You will see a kubeless controller and a kafka controller running.

Note We provide flag for specifying the kafka version will be installed and in case you are willing to install your customized Kubeless controller. Without the flags, we will install the newest release of . Check for more detail.

You are now ready to create functions. Then you can use the CLI to create a function. Functions have two possible types:

You create it with:

You will see the function custom resource created:

You can then call the function with:

Or you can curl directly, for example (using minikube):

Messages need to be JSON messages. A function can be as simple as:

You create it the same way than an HTTP function except that you specify a .

You can delete and list functions:

You can create, list and delete PubSub topics:

See the examples directory for a list of various examples. Minio, SLACK, Twitter etc ...

You can build kubeless for multiple platforms with:

This is still currently a POC, feel free to land a hand. We need to implement the following high level features:|||

kubeless - Kubernetes Native Serverless Framework