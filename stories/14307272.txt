SQL is a must, if you want to be a Data Analyst or a Data Scientist. I have worked with many online businesses in the last few years – from 5 people startups up to 5000+ employees multinational companies and haven’t seen a single company who would not use SQL for Data Analysis (and for many more things) in some way.

SQL is simple and easy-to-understand. Thus not just engineers, developers or data analysts/scientists can use it, but anyone who is willing to invest a few days into learning and practicing it.

I have created this SQL series to be the most practical and most hands-on SQL tutorial for aspiring Data Analysts and Data Scientists. It will start from the very beginning, so if you have never touched coding/programming/querying, that won’t be an issue!

Note: as this is gonna be a practical tutorial, I encourage you to do the coding part with me. If you do so, you will need a data server to practice. So I recommend to go through this article first: https://data36.com/data-coding-101-install-python-sql-r-bash/

SQL stands for “Structured Query Language”.

 But I like to describe it as “Excel on steroids” too. Here’s the very same data set in Excel and in SQL:

As you can see, SQL and Excel are quite similar. Both of them present data in a 2-dimensional table format with rows and columns. Both are very structured, very transparent.

However there are differences as well. There are 2 major things that you should know as a beginner in SQL:

For the first look this can feel like a hassle. But believe me, once you’ve understood the basics of SQL, you will find it clearer and more efficient than Excel. Mentioning only two advantages: joining tables is much easier in SQL than it is in Excel. Also automating and reusing your stuff will become more convenient with SQL too.

When you will use SQL for data analysis, you will use it (most probably) for simple tasks: aggregate things, join data sets, use simple statistical and mathematical methods. But you will be able to do these more efficiently and on much bigger data sets, than you did it before.

If you have done my previous bash tutorials or if you have attended some of my live webinars, you might ask: is SQL better or worse, than Python, R or bash?

 The answer is… well, there is no categorical answer for this question!

Once you will start to apply these languages on real life data projects, you will see that Python and R are good in some things and SQL is good in other things. The main differences will be syntax, “features” and performance… But I really don’t want to go into that topic right now, because:

a) I promised a practical tutorial and that topic is a bit more theoretical (even philosophical)

c) at this level, you don’t have to worry about performance at all – and when you will, most probably a senior data scientist or a data engineer will help you out.

Note: If you are really curious though, I gave an ~1 hour presentation here comparing Python, R, SQL and bash.

But now, let’s jump on the practical part!

Note: if you have your own SQL environment already, you can skip further to STEP 2 – Get some data!

First, please go through this article. It’s a step by step tutorial about how to set up your own Data Server and install bash, Python, R and SQL on it.

Note: in my “SQL for Data Analysis” articles I’ll use postgreSQL! There are other types of SQL languages (eg. another well-known open source one is mySQL). The good news is that all SQL languages are very similar – if you learn postgreSQL, it will be a matter of hours (or even minutes) to adapt to another one. I picked postgreSQL, because it’s very popular (lots of the online businesses are using it) and at the same time it’s claimed as the most advanced open source SQL language.

If you went through the above linked article, please double-check, if you have these 3 things:

If something is missing, please read the article again: Install bash, Python, R and SQL! (LINK)

Note: As an SQL query tool I prefer SQL Workbench over pgadmin4, but this is kind of question of taste. In my SQL for data analysis tutorials I’ll use SQL Workbench (my next tutorial will be about how to install it on your computer), but feel free to use pgadmin4. It won’t make any difference!

Great times! You will write your first SQL query in a minute! First access your SQL database from the command line! You have done this once, we will just repeat the same process:

Again! If something is missing or not working, please re-read this article: Install bash, Python, R and SQL!

In this tutorial, we will use a really small data set, called zoo.

 You can download it from here in raw .tsv format and you can just play around with it in Excel. Or in bash/command line, if you have already done bash tutorials.

1) Create a table, where we can load our data into. In my further tutorials I’ll explain exactly, what’s going on here, but for now, you can just simply copy-paste this few lines into your terminal:

2) Double check if the table was created:



Weee! We have our new data table: zoo!



3) Load the data!

 Again: I’ll explain this later, but now, just simply copy-paste this SQL query:

If everything is fine, you should get this message back:



It’s time to learn the most essential SQL statement. This is:

You will use SELECT every time, when you will read, filter, transform, aggregate or do whatever with your data. Also 90% of the things I’ll show you in these tutorials will be somehow the modification of this one single query. For a start let’s SELECT everything from our zoo data table.

I’ve got my full table back in a nice and readable format. (If you want to quit from this view, please hit Q on your keyboard.)



 I guess it doesn’t even need an explanation – as the syntax itself is really close to English language – but just in case:

 is the main statement and it tells SQL that we want to read something from our data table.

 usually refers to “everything” – in this case it means, that we would like to select every column.

 tells SQL, that we are gonna specify the table where we want to read our data from.

 is the name of the table. You can replace this with any other table name, if you have more tables.

 this is an SQL specific syntax. Every query should be closed by a semicolon. If you accidentally miss it, SQL will expect you to continue your query and won’t return anything on your screen.

You will use this syntax a lot from now on.

You can replace the * character with actual column names. Try this query:



Exactly, what you have expected: you got the columns “animal” and “water_need” on your screen, but not the “uniq_id” anymore.

 This way you can SELECT any columns. You just have to specify the name of the columns separated with commas.

You can do something like this too:



You would see the same column multiple times… But as it makes no sense, I’d recommend just simply not doing it. 🙂

Right now we are working with a data table of 22 rows. In the next episode of this “SQL for Data Analysis” series we will use a 7M+ rows data file instead. That’s a big change and in that case it will be more than reasonable not to print all your data on your screen every time, but take a small sample of the first few lines instead. To do this, use the LIMIT clause – which is a small “extension” on the top of your previously introduced “base-query”:

This will print the first 10 lines only. (Remember how was it done in bash? It was the command.)

Of course you can decide, how much lines you want to print and specify it right after LIMIT!

You can select specific rows based on values with the clause. Eg.:

–» this is the “base-query”

 –» this tells to SQL that you want to filter to something

 –» animal is the name of the column where you are looking for the given value. And elephant is the value itself. In SQL you have to add the column, where you are looking for your value.

 –» Never forget the semicolon!

In the very next episode of the SQL for Data Analysis series I’ll go into details, how to get the most out of WHERE! For now it’s enough if you know: that’s for filter to rows.

This is an introductory article, so this first assignment will be a pretty easy one as well:

 Select the first 3 zebras from the zoo table!

 The solution will be more or less the summary of this article!

 .

 .

 .

 Ready?

 Here’s my solution:



Later on, I’ll show you some best practices and how to keep your SQL queries clean and efficient, but in this first article let me emphasize 2 things only:

Note that conventionally most people use SQL Keywords as caps (SELECT, WHERE, LIMIT, etc…). It helps a lot to read your code.

Quite a nice first step to learn and use SQL for data analysis! Congrats! Now you can write your first very basic SQL queries… but this is just the beginning! Let’s continue with the next episode and learn, how you can use the WHERE clause to filter stuff from your data sets as a pro.

If you don’t want to miss the next episode – and also would like to get info about my upcoming webinars, subscribe to my weekly Newsletter!|||

SQL is a must, if you want to be a Data Analyst or a Data Scientist. This is the first episode of SQL for Data Analysis, where I'll show you the basics!