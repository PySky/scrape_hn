Time to test Symfony 4… or at least let’s test the experience of developing Symfony 4 projects with Symfony 3.3. Keep in mind that all the tools are in preview mode. Features might evolve over time. I’m waiting for your feedback! The first stable version of Symfony Flex will not be released before Symfony 4 at the end of November 2017. It gives the community plenty of time to discuss the changes I have described in this series of blog posts.

Also note that Symfony Flex currently works with Symfony 3.3 only (to be released at the end of May 2017). To make it easier to work with Symfony Flex before 3.3 is released, the key in of the has been set to . Be warned. Always require dependencies with explicit versions to avoid getting the branch of your favorite libraries.

The first step is to create a project. Currently, this needs to be done via . We might release a tool to bootstrap a project faster.

is the only currently available version and uses the yet-to-be-released Symfony 3.3. Versions like , , , or will be available later on (but not before the release of Symfony 4.0 of course).

The command downloads the Symfony skeleton which consists of just one file.

Then, it extracts the file into the directory and automatically runs . is the first package to be installed so that it can hook into the Composer process. When Composer installs (or updates) other dependencies, Symfony Flex looks for an associated recipe on the Symfony Flex server, and executes it. You can see Symfony Flex in action via the logs it adds to the Composer output.

When finished, you should see a “What’s next?” section that explains the possible next steps, like running to start the PHP built-in web server. Before going further, go to the project's directory: .

is one of the tasks added to the local , as described in the recipe.

Note that some commands were automatically installed and run at the end of the process:

Again, those scripts were added to the project’s file as defined by the recipe. The second script did not run because the console tool (available via ) is not installed by default (we will see how to "fix" this issue later on).

Now is a good time to initialize Git:

Using works well as Symfony took care of creating a "good"  file.

Remember that the skeleton only has one file, . Check the directory now; some more files have been created. Those files were added by Symfony Flex based on the installed packages, as described in recipes.

Let’s examine the directory structure now. Most files has been added because of the dependency.

The comments allows Symfony Flex to “manage” this section. This is useful when those variables needs to be removed when the package is removed. If you remove the comments, Symfony Flex will not be able to automatically manage these variables anymore. Have a look at  for a similar example.

If you’re curious, check , the new web front controller.

The most interesting files are under . The main entry points are the empty and files; this is where you can add services, parameters, and routes for your project. A default configuration has been installed as well for under . Feel free to tweak installed configuration files or add more for your own needs.

Last, but not least, is now registered in :

Even if a bundle does not have a recipe, Symfony detects Composer packages with the type and automatically enable them for all environments. This avoids the creation of recipes when registration is just a matter of enabling the bundle.

The directory is where you can store your PHP classes. Under the namespace as registered in . Note that this is where was also installed as .

Now, it is time to install some new dependencies via Composer. Let’s start by adding a more powerful web server for your project:

Note: is a shortcut for (the Composer CLI supports any shortcut that is not ambiguous; use to remove a Package).

is an alias for , and is an alias for . That works because Symfony Flex knows how to convert those aliases into full package names: is equivalent to , which is equivalent to . The prefix is always optional. Try or . is too cumbersome, so use or just .

For Symfony dependencies, Symfony Flex also recognizes a few more versions than the usual Composer ones, mainly , , , and (they don't all work yet though).

After executing , notice how the command automatically ran. The file has also been added to your project.

Aliases work when removing dependency as well:

… which also removes the binary (for fun, try this: ).

Remember I wrote about the developer experience when installing a Symfony bundle? Let’s go wild and install something really “complex” like an admin generator based on Doctrine. How many steps to make it work? It might be fewer than you expect, and definitely more fun.

Besides installing the admin generator bundle, it also installs all its transitive dependencies and auto-configures them all: , , , and .

is a "generic" word. This is why I wrote about Symfony Flex recipes being opinionated. There can only be one package aliased to . is another generic word that is currently aliased to the Doctrine ORM.

Run the PHP built-in web-server via or and go to . You should get an error as no Doctrine entities exist yet. Let's create one in :

Run the following commands to initialize the database:

Finally, add the entity to the list of entities managed by the admin generator ( ):

Try again. If everything worked well, you should be able to manage products.

Instead of installing an admin generator, have a look at this small screencast where I’m using the alias to bootstrap an API project quickly and easily:

Here are some nice aliases you can try:

As is not required anymore, you get more fine-grained dependencies, but it might be cumbersome to install each Symfony component one by one. To ease the pain, I'm experimenting with a new concept: "packs". A pack is nothing more than a regular Git repository registered on Composer that contains a that references a set of related packages. As an example, I have created a pack that can be installed via . Have a look at the ORM pack or the API pack. Imagine a that references nothing in but is associated with a recipe that installs a set of default files under like favicons, a , and so on. Nice? Imagine the same for Travis, Blackfire, or Docker. Or a pack that installs the exact same dependencies as the current Symfony Standard Edition? Your imagination is the limit. Compose your applications with on-the-shelf packages, packs, and their associated recipes.

Symfony Flex enables distribution composition instead of inheritance. The new way is easier, more flexible, and more powerful at the same time.

The first version of the Symfony Flex server is quite simple, but over time, more features will be implemented.

Now, it is probably time for you to write some code. What about some controllers and templates? Hold on. Even if you can do what you are used to, Symfony 3.3 and Symfony 4.0 proposes a much smoother experience that you might like better. This is a great topic for my next post about Symfony 4.

Remember that the recipes repositories at https://github.com/symfony/recipes and https://github.com/symfony/recipes-contrib are also public now. Feel free to look around. And keep in mind that what you see is experimental. Current choices might change.|||

Time to test Symfony 4… or at least let’s test the experience of developing Symfony 4 projects with Symfony 3.3. Keep in mind that all the tools are in preview mode. Features might evolve over time…