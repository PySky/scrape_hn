A lot of us have been taught that to be able to define a recursive procedure, the recursive invocation must “use” the name of the recursive procedure. The Y combinator , however, lets you perform recursion, without referring to the named identifier.

The Y combinator has been both a source of inspiration and frustration for many. It evokes a eureka-like sensation once you get past the wall, but it also renders us scratching our heads when it just doesn’t make sense to traverse the labyrinth. This post aims to bring my own approach on how to derive the Y combinator. It may not be the most elegant way, but it may work for you.

In the code examples in this post, the symbol denotes the prompt symbol for your Scheme implementation.

Let’s start by defining a procedure named that computes the summation of a positive integer, down to zero. In the following snippet, the recursive call happens when is applied in the else part of the condition.

You have have observed that I have defined using an explicit . You’ll see shortly, why.

Let’s break that procedure further, into more elementary components, and you’ll apply it, using currying.

The extra was needed because you needed to have a way to abstract the recursive procedure. In this case, you used the identifier to bind to the recursive procedure, which is , itself. The weird-looking is needed, because you have to perform the same procedure invocation method used initially: .

You’re now going to exploit that property, to use a “nameless” approach—not using the identifier.

Take note, that at this point, you’re no longer using the name, to refer the the definition, except for later.

Next, you need to move the part outside, to isolate the general (Y combinator), from the specific ( ) code.

During the procedure application, the identifier will be bound to , and the identifier will be bound to .

Next, you’re going to isolate the Y combinator, from the procedure.

You replace the -specific definition with . This requires you, again, to create an enveloping . Since is bound to the computing procedure, you no longer need to repeat it.

Finally, you will explicitly create a separate procedure definition for the Y combinator itself, and the procedure.

When the key concepts are understood, it becomes easy to grasp the seemingly daunting ideas. I hope this post has been useful in making you understand the Y combinator, currying, and procedure application.|||

A journal about computing, human predilections, and random krakaboom.