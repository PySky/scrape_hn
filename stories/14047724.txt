is a great tool but sometimes it helps to have a practice repo to test with.

This repo contains a small amount of code and specs. Our specs are passing, but it turns out there's a bug. is an executable script that makes a walk s, and it is crashing. We know it worked before, so we've got a regression on our hands.

There are over 200 commits in this repo, both our own work, and other people's. All we know is that the code used to work, and now doesn't. We could spend time reading the code and tracing through the issue...or we can use to find the commit where the bug showed up, and see the code (and commit) that caused it. It's like but instead of tracing down a line of code, you can trace actual functionality.

The gist is that you find a SHA where the code is good, and one where it is bad. Git will find a commit around the middle and check it out, giving you the opportunity to decide if it is good or not. If it's good, we go forward in time to find the bug. If it's bad, we go farther back in time to look for another good commit. We'll zig and zag back and forth through the code until we hit the first commit where the behavior shows up.

For this demo, let's just search every commit since the beginning of time. In reality, you can almost always use good judgement to find a SHA that's closer to before the bug showed up.

and you get

Now git knows that which commits we want to search between. It's going to do some math, and check out a commit around the middle.

At this point, we're somewhere in the middle. We don't know if the bug is present here or not.

OK, so that works. Let's tell git that this commit is good. (If it didn't work, we'd run )

We're now on a new commit, checked out somewhere between this new commit and . Are we at the bug yet?

Nope. Let's tell git that it's good again.

This keeps going. You run a test and decide if the code is what you want or not. If it's not, you run

This commit contains the bug.

Well, there's some information about the first commit where the bug showed up.

Now we're in the bad commit, as if we had checked it out ourselves. Git is basically just leaving the repo at the commit that failed the test.

Let's take a look at the code that introduced the problem:

Seriously, Taco is always hungry. He just isn't interested in you unless you are about to feed him. We probably need to change the walker so that they know how to deal with Taco.

Now that you're done, run to go back to the repo where you started.

So here's the thing about . The important thing is that you have some way of deciding if the code is "good" or "bad". Sometimes you might just be reading a piece of code, other times you might have an automated test like a spec file or an executable.

You might be wondering "well, if I have a script, can't I use some code to automatically tell git if a command is good or not?" Git has you covered:

This will make git run on each checkout. If the command runs properly (and returns an exit code of ), the commit is treated as good. If it errors (exit code of anything except ), the commit is treated as bad.

Run it, and in about 2 seconds, a lot of text will scroll by, ending in:

Nice. Run to get out of mode and go back to the normal repo.|||

bisection - A practice repo for working with `git bisect`