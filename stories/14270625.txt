OpenPose is a library for real-time multi-person keypoint detection and multi-threading written in C++ using OpenCV and Caffe*, authored by Gines Hidalgo, Zhe Cao, Tomas Simon, Shih-En Wei, Hanbyul Joo and Yaser Sheikh.

OpenPose represents the first real-time system to jointly detect human body, hand and facial keypoints (in total 130 keypoints) on single images. In addition, the system computational performance on body keypoint estimation is invariant to the number of detected people in the image.

OpenPose is freely available for free non-commercial use, and may be redistributed under these conditions. Please, see the license for further details. Contact us for commercial purposes.

The pose estimation work is based on the C++ code from the ECCV 2016 demo, "Realtime Multiperson Pose Estimation", Zhe Cao, Tomas Simon, Shih-En Wei, Yaser Sheikh. The full project repo includes Matlab and Python version, as well as training code.

You can find the installation, reinstallation and uninstallation steps on: doc/installation.md.

Most users cases should not need to dive deep into the library, they might just be able to use the Demo or the simple OpenPose Wrapper. So you can most probably skip the library details in OpenPose Library.

Your case if you just want to process a folder of images or video or webcam and display or save the pose results.

Forget about the OpenPose library details and just read the doc/demo_overview.md 1-page section.

Your case if you want to read a specific format of image source and/or add a specific post-processing function and/or implement your own display/saving.

(Almost) forget about the library, just take a look to the tutorial on examples/tutorial_wrapper/.

Note: you should not need to modify OpenPose source code or examples, so that you can directly upgrade the OpenPose library anytime in the future without changing your code. You might create your custom code on examples/user_code/ and compile it by using in the OpenPose folder.

Your case if you want to change internal functions and/or extend its functionality. First, take a look at the Demo and OpenPose Wrapper. Second, read the 2 following subsections: OpenPose Overview and Extending Functionality.

You can generate the documentation by running the following command. The documentation will be generated in . You can simply open it with double click (your default browser should automatically display it).

There are 2 alternatives to save the (x,y,score) body part locations. The flag uses the OpenCV cv::FileStorage default formats (JSON, XML and YML). However, the JSON format is only available after OpenCV 3.0. Hence, saves the people pose data using a custom JSON writer. For the latter, each JSON file has a array of objects, where each object has an array containing the body part locations and detection confidence formatted as . The coordinates and can be normalized to the range [0,1], [-1,1], [0, source size], [0, output size], etc., depending on the flag . In addition, is the confidence in the range [0,1].

The body part order of the COCO (18 body parts) and MPI (15 body parts) keypoints is described in in include/openpose/pose/poseParameters.hpp. E.g., for COCO:

For the heat maps storing format, instead of individually saving each of the 67 heatmaps (18 body parts + background + 2 x 19 PAFs) individually, the library concatenates them into a huge (width x #heat maps) x (height) matrix, i.e. it concats the heat maps by columns. E.g., columns [0, individual heat map width] contains the first heat map, columns [individual heat map width + 1, 2 * individual heat map width] contains the second heat map, etc. Note that some image viewers are not able to display the resulting images due to the size. However, Chrome and Firefox are able to properly open them.

The saving order is body parts + background + PAFs. Any of them can be disabled with program flags. If background is disabled, then the final image will be body parts + PAFs. The body parts and background follow the order of or , while the PAFs follow the order specified on POSE_BODY_PART_PAIRS in . E.g., for COCO:

Where each index is the key value corresponding to each body part in , e.g., 0 for "Neck", 1 for "RShoulder", etc.

We use standard formats (JSON, XML, PNG, JPG, ...) to save our results, so there will be lots of frameworks to read them later, but you might also directly use our functions in include/openpose/filestream.hpp. In particular, (for JSON, XML and YML files) and (for image formats such as PNG or JPG) to load the data into cv::Mat format.

We only modified some Caffe compilation flags and minor details. You can use use your own Caffe distribution, these are the files we added and modified:

Initial library running time benchmark on OpenPose Benchmark. You can comment in that document with your graphics card model and running time for that model, and we will add your results to the benchmark!

Our library is open source for research purposes, and we want to continuously improve it! So please, let us know if...

Just comment on GibHub or make a pull request and we will answer as soon as possible! Send us an email if you use the library to make a cool demo or YouTube video!

Please cite the papers in your publications if it helps your research:|||

openpose - OpenPose: A Real-Time Multi-Person Keypoint Detection And Multi-Threading C++ Library