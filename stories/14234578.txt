Memcached is an open source, memory based, distributed caching system. It can be considered as an in-memory key-value store. Memcached is widely used in modern cloud-native applications for caching database calls. Memcached when used as a request cache, helps in reducing the database load for cloud applications and improves the latency of queries. It is also used to cache frequent API calls and web service requests in microservices applications. Memcached helps in improving the application performance by optimizing disk I/O (reducing the load on the database tier) and CPU usage (caching values which are expensive to compute).

In this post, we will provide a brief overview of Memcached, summarize common problems, and explain the Netsil Application Operations Center (AOC) approach for monitoring Memcached without any code changes to the application.

Memcached uses a client/server model with communication occurring over TCP or UDP. Memcached stores data in memory and is not a persistent data store. Memcached uses the Least Recently Used (LRU) cache update scheme and the items which are not referred for a long time are removed from the cache.

The Memcached protocol supports two types of data:

Memcached has three types of commands:

Some of the common problems with Memcached include:

Memcached primarily uses TCP for transport. After establishing a connection with the server, the client sends commands (such as get a value, set a value, etc.) to the server, and reads the responses from the server. While existing solutions for monitoring Memcached require instrumenting the client/server code, Netsil AOC monitors Memcached by capturing the client-server interactions over the wire in real-time, in a non-intrusive manner. Netsil AOC can auto-discover the Memcached requests sent by a client to a server. Figure 2, shows an automatically discovered service topology map in the Netsil AOC with Memcached service detected by the analysis of client and server interactions.

The golden signals of monitoring for Memcached are the same as for REST (i.e., latency, traffic, errors, and saturation) as described in our earlier post. Netsil has the capability to observe and analyze latency, traffic and errors for Memcached services.

Figure 3, shows the Memcached health snapshot in Netsil AOC. We can view how the key performance indicators (KPIs) for a Memcached service vary over time; so that any anomalies in the Memcache performance can be easily detected. Netsil AOC also allows you to slice and dice these metrics based on the client command type, lookup status, server error strings, etc. The Memcached dashboards also allow users to interactively change the time span for which the metrics are displayed.

The Netsil AOC has the ability to observe and analyze Memcached services used in modern cloud-native applications. Netsil has the ability to capture real-time Memcached client-server interactions and doesn’t require any code changes to monitor the health and performance of Memcached services.

We welcome your comments on this post and also encourage you to try the Netsil AOC at https://netsil.com|||

Memcached is crucial component of modern cloud native applications. We provide detailed overview of Netsil AOC’s approach for monitoring health and performance of Memcached without any code changes.