{ , , } ( ) { ( ) { (data) . ({ title {type , unique }, if only type constrain, use this syntax for short publish , created {type , default }, copies { type . , (v v ) } price }) } default collection name is lower-cased class name, set it explicitly using below method () { } } DB eats the same argument as native's MongoClient.connect ( ) all CURD operation will use the same db instance . (db) no created field supplied in argument, a default new Date will be used, this will throw error if any field not satisfying schema defination book ({title , publish ( , , ), copies , price }) . () . ( { . ( )}) . ( { . ( )})

Constructed with a mongo connect string and option, it's a wrapper upon native driver's MongoClient. Once a instance is constructed, you can get native driver's db instance via . The point is getDB returns a thunker which delays the evaluation of a paramless async function and cache the result(thanks to thunky module), that's to say for a specific db instande, it'll establish connection to db server only once, and the afterwards calling just reuse the same connection.

You can use constructor in two ways:

both ways support constructing with no argument and add data field latter

{ ( ) { (data) . ({name }) } } { ( , ) { (db, data) . ({name }) } } new instance with argument, setDB else where yourdoc1 ({name }); . (db); laterly newed instance after yourdoc2 don't need db anymore since you've set it yourdoc2 (db, {name }) new instance without argument and setDB else where yourdoc1_1 (); . (db); yourdoc2_1 (); . (db); add data via setter, every data field is a setter/getter descriptor of your instance . .

{ ( ) { (data) . ({ name {type , required }, born , nationality [ ], married }) } } { ( ) { (data) . ({ title {type , required }, author , publish , created {type , default ()}, price , copies {type Int, (v v )}, recommedation {type , unique , sparse }, for Array, you can use Array, [], or [INNER_TYPE] as type constrain keywords [ ], soldout , }) } () { } } author ({ name , born ( , , ), nationality [ ], married }) default value of created field will be added automatically since it's not supplied book ({ title , author author, publish ( , , ), price , copies , recommedation { reviewer , comment }, keywords [ , ], soldout })

all following class methods accept the same argument as corresponding native function, all result is returned in a promise

{ ( ) { (data) . ({name }) } } { ( , ) { (db, data) . ({name }) } } yourdoc1 ({name }); . (db); yourdoc2 (db, {name }) yourdoc1_1 (); . (db); yourdoc2_1 (); . (db); . .|||

mongo-mongo - A ES6 class based MongoDB ODM