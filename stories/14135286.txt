frontloadConnect is the bridge between the library, and the Component you want to load data into.

Let’s go through the frontload and options parameters.

A function which is called with the Component props, and returns a Promise which must resolve when all the required data-loading is complete.

The full power and flexibility of the Promise API is therefore available to encapsulate the asynchronosity of the data-loading behaviour into a single returned Promise — that means a single request is fine, but equally if multiple requests are required they can just be chained with  (if order matters) or parallelised with (if they are independent).

The options object provides three configurations that specify when exactly the frontload function should fire on both client and server. If any particular configuration is left undefined, it takes its default value. Likewise, if the entire options object is left undefined, all three configurations take their default values.

When , the Component’s frontload function will run on every server render. In the example, this ensures the component server renders with the expected profile, rather than the ‘loading..’ placeholder.

When , the Component’s frontload function will not run on server render. In the example, the component would be server rendered with the ‘loading..’ placeholder, since no profile is loaded.

Importantly, when this is it also turns off the feature that prevents the component from loading data on mount after a server render. Assuming the option to load data on mount (discussed below) is set, the frontload function will fire on first mount after server render, since react-frontload knows that the data was not loaded on the server and the ‘loading..’ placeholder has to be replaced with the loaded in profile.

Note: if you need to turn off server rendering for an entire application, instead of setting this configuration true on every individual component, noServerRender can instead be set as a prop on the application’s Frontload provider like this:

This options toggles whether or not the frontload function should fire when the Component mounts on the client. Again, this only skips when the Component was server rendered immediately before hand— see above for more details.

The default is and 99% of the time this is what it should be. After all, in almost all cases you want to load the data and render it when the Component is first displayed. It is provided as an option to accommodate edge cases, however.

Very similar to , this options toggles whether or not the frontload function should fire when the Component’s props update on the client.

The default is and again, for a well designed application component tree with proper restriction of unnecessary updates when props do not change (via ) it is likely that this is fine.

For edge cases, or to remove the need to change component trees that trigger spurious updates where this is infeasible, it can be set to .

Note that there is a common case where some but not all props should trigger the frontload function. In our example, we’d always want to fire it when updates, but what if there was another prop, , that could also update but which would not require the profile to be reloaded.

I thought about making this configurable via another options field, for example by providing prop names that should trigger the frontload function to fire when they update. But I realised that this strayed into DSL territory, with all the loss of power and maintainability issues that brings, and in fact there is already a mechanism for dealing with this with the full power of JS — recall that the frontload function itself receives the Component props. Therefore, we can make any arbitrarily complex decisions about whether to actually fire any expensive requests on Component update in the frontload function itself.

The frontloadServerRender function can be thought of as a decoration of your existing React server render logic, which you have to encapsulate in a which outputs server-rendered React markup. Usually, will be a simple wrapper over a call.

The output of frontloadServerRender is the same markup that renderFunction produces, which can be returned in the response to the client in the usual way. It is nothing more than a proxy for this function, and exists only to ‘inject’ the plumbing code required to do synchronous loading of all the frontload functions in the application prior to final rendering.|||

In the most straightforward use case, you have a view component which displays some dynamic data for some URL, which contains the parameters required to load the data from your API. Everything up to…