A few months ago weâ€™ve been playing with domainless about:blank pages on Edge. Essentially, a powerful about:blank document was capable of accessing every domain without restrictions. It was recently patched asÂ CVE-2017-0002Â so it does not work anymore.Â The same thing happens with the ActiveXObject/htmlFile (from now on, htmlFile) which wasÂ patchedÂ last week asÂ CVE-2017-0154.

If you havenâ€™t read those two methods to achieve UXSS/SOP bypass, please do it now because whatâ€™s coming assumes that we are familiar with them. Thanks bug hunter!

Our goal today is toÂ port our original Edge bug to Internet Explorer, which should be an easy task considering that Microsoft halfheartedly patches IE. Â Take a look at the current state of both bugs:

In the original bug, we were using a data: uri to create the domainless blank, how can we achieve the same on IE? Well, htmlFile comes to the rescue again, because the patch does not allow us to set an arbitrary domain anymore, but we can still set a it to blank, or, domainless.

ToÂ create a domainless htmlFile we first need a destroyed document, in other words, a document that does not exist anymore. And how can we create something out of nothing? Thatâ€™s more of a question forÂ Neil deGrasse Tyson, but Iâ€™ll do my best to reply! ðŸ™‚

The idea is simple in reality. We just need to make sure that things happen in the correct order.

Steps 2 and 3 are really important here. Skipping step 2 will prevent us to save a usable reference.Â Skipping step 3 will allow IE to destroy the object.

Bug hunter, weâ€™ve seen this blocking-thread idea in the pastÂ (check at the very bottom of that post) which can be used to create a vast amount of vulnerabilities. The blocking thread technique that we will use below is a very visible, bold alert. This way we wonâ€™t be feeding real attackers, or at least they will have to find a solution by themselves to make this PoC completely invisible.Â Take a look at the code below.

while the blocking alert remains there.

Have you realized that we used a setTimeout to execute the blocking alert? Thatâ€™s because we still need to continue doing things, and if we do the alert directly on the iframe, it will block the UI and not execute whatâ€™s coming below. Our goal now is to destroy the contents of the iframeRemember that the alert is what prevents IE from destroying the ActiveXObject.

Now we will destroy the document of the iframe and create the domainless htmlFile. If document.open is unfamiliar to you, for this PoC you can think of it as if it were a document.write.

Excellent! At this point we have now aÂ our domainless htmlFile. All we need to do now is load an iframe with the URL that we want to access, and bingo! The exact details on how to do this are described in the original adventures in a domainless world post. But essentially, we are loading any site with iframes and changing any of them to an about:blank (which belongs to the iframe domain).Â Then, we can freely access this blank (bypassing the SOP) from our domainless htmlFile.

Want to see this in action? This one works straight out of the box on IE10 and IE11, but with a little tweak it should work also from IE6 to IE11Â . We wonâ€™t tweak it here but if you are curious,Â let me know.

Bug hunter, let me remind you that theÂ htmlFile still hasÂ tons of things to discover. I believe itâ€™s worth spending a rainy afternoon researching on it!

In my opinion, the best way to patch all htmlFile related bugs is by completely disabling its instantiation from iexplore.exe. Unfortunately I donâ€™t have the big picture and I imagine thereâ€™s a good reason to keep it alive, but honestly, I donâ€™t know how in the world developers will patch it. There are too many things that are beyond IE awareness once this object is instantiated.|||

