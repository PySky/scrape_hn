If you're upgrading an existing application, it's a great idea to have good test coverage before going in. You should also first upgrade to Rails 5.0 in case you haven't and make sure your application still runs as expected before attempting an update to Rails 5.1. A list of things to watch out for when upgrading is available in the Upgrading Ruby on Rails guide.

Rails 5.1 allows managing JavaScript dependencies from NPM via Yarn. This will make it easy to use libraries like React, VueJS or any other library from NPM world. The Yarn support is integrated with the asset pipeline so that all dependencies will work seamlessly with the Rails 5.1 app.

Rails apps can integrate with Webpack, a JavaScript asset bundler, more easily using the new Webpacker gem. Use the flag when generating new applications to enable Webpack integration.

This is fully compatible with the asset pipeline, which you can continue to use for images, fonts, sounds, and other assets. You can even have some JavaScript code managed by the asset pipeline, and other code processed via Webpack. All of this is managed by Yarn, which is enabled by default.

jQuery was required by default in earlier versions of Rails to provide features like , and other parts of Rails' Unobtrusive JavaScript offerings. It is no longer required, as the UJS has been rewritten to use plain, vanilla JavaScript. This code now ships inside of Action View as .

You can still use jQuery if needed, but it is no longer required by default.

Rails 5.1 has baked-in support for writing Capybara tests, in the form of System tests. You no longer need to worry about configuring Capybara and database cleaning strategies for such tests. Rails 5.1 provides a wrapper for running tests in Chrome with additional features such as failure screenshots.

Rails now allows management of application secrets in a secure way, inspired by the sekrets gem.

Run to setup a new encrypted secrets file. This will also generate a master key, which must be stored outside of the repository. The secrets themselves can then be safely checked into the revision control system, in an encrypted form.

Secrets will be decrypted in production, using a key stored either in the environment variable, or in a key file.

Allows specifying common parameters used for all methods in a mailer class in order to share instance variables, headers and other common setup.

Rails 5.1 adds two new methods, and , to the routing DSL. The method allows customizing polymorphic mapping of models.

This will generate the singular URL instead of the usual .

The method allows creation of custom URL helpers.

The return value of the block must be a valid argument for the method. So, you can pass a valid string URL, Hash, Array, an Active Model instance, or an Active Model class.

Before Rails 5.1, there were two interfaces for handling HTML forms: for model instances and for custom URLs.

Rails 5.1 combines both of these interfaces with , and can generate form tags based on URLs, scopes or models.

Using a model infers both the URL and scope:

An existing model makes an update form and fills out field values:

The following changes may require immediate action upon upgrade.

Transactional tests now wrap all Active Record connections in database transactions.

When a test spawns additional threads, and those threads obtain database connections, those connections are now handled specially:

The threads will share a single connection, which is inside the managed transaction. This ensures all threads see the database in the same state, ignoring the outermost transaction. Previously, such additional connections were unable to see the fixture rows, for example.

When a thread enters a nested transaction, it will temporarily obtain exclusive use of the connection, to maintain isolation.

If your tests currently rely on obtaining a separate, outside-of-transaction, connection in a spawned thread, you'll need to switch to more explicit connection management.

If your tests spawn threads and those threads interact while also using explicit database transactions, this change may introduce a deadlock.

The easy way to opt out of this new behavior is to disable transactional tests on any test cases it affects.

Please refer to the Changelog for detailed changes.

Please refer to the Changelog for detailed changes.

Please refer to the Changelog for detailed changes.

Please refer to the Changelog for detailed changes.

Please refer to the Changelog for detailed changes.

Please refer to the Changelog for detailed changes.

Please refer to the Changelog for detailed changes.

Please refer to the Changelog for detailed changes.

Please refer to the Changelog for detailed changes.

See the full list of contributors to Rails for the many people who spent many hours making Rails, the stable and robust framework it is. Kudos to all of them.

You're encouraged to help improve the quality of this guide.

Please contribute if you see any typos or factual errors. To get started, you can read our documentation contributions section.

You may also find incomplete content, or stuff that is not up to date. Please do add any missing documentation for master. Make sure to check Edge Guides first to verify if the issues are already fixed or not on the master branch. Check the Ruby on Rails Guides Guidelines for style and conventions.

If for whatever reason you spot something to fix but cannot patch it yourself, please open an issue.

And last but not least, any kind of discussion regarding Ruby on Rails documentation is very welcome in the rubyonrails-docs mailing list.|||

