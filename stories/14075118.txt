Go Figure prints beautiful ASCII art from text. It supports FIGlet files, and most of its features.

This package was inspired by the Ruby gem artii, but built from scratch and with a different feature set.

There are two ways to create a Figure, with the method and the method .

Each constructor takes three arguments: the text, font, and strict mode. The difference between the two methods is the font. The method signature are:

requires only the name of the font, and attempts to locate the font file on your machine.

If passed an empty string for the font name, a default is provided. That is, these are both valid--

Please note that font names are case sensitive.

Because of the separation between the executable (binary) Go creates and the source code, this lookup sometimes fails (glaces at Windows).

Therefore, accepts the font file directly. Provide the absolute path to the flf. You can point to the file the comes with this project or you can store the file anywhere you'd like and use that location.

The font files are available in the fonts folder and on figlet.org.

Here are two examples--

Strict mode dictates how to handle characters outside of standard ASCII. When set to true, a non-ASCII character (outside character codes 32-127) will cause the program to panic. When set to false, these characters are replaced with a question mark ('?'). Examples of each--

The most basic, and common, method is func Print. A figure responds to Print(), and will write the output to the terminal. There is no return value.

But if you're feeling adventurous, explore the methods below.

A figure responds to the func Blink, taking three arguments. is the total time the banner will display, in milliseconds. is the length of time the text will blink on (also in ms). is the length of time the text will blink off (ms). For an even blink, set to -1 (same as setting to the value of ). There is no return value.

A figure responds to the func Scroll, taking three arguments. is the total time the banner will display, in milliseconds. is the length of time the text will not move (also in ms). Therefore, the lower the stillness the faster the scroll speed. can be either "right" or "left" (case insensitive). The direction will be left if an invalid option (e.g. "foo") is passed. There is no return value.

A figure responds to the func Dance, taking two arguments. is the total time the banner will display, in milliseconds. is the length of time between dance moves (also in ms). Therefore, the lower the freeze the faster the dancing. There is no return value.

Unlike the above methods that operate on a figure value, func Write is a function that takes two arguments. is a value that implements all the methods in the io.Writer interface. is the figure that will be written.

This method would be useful, for example, to add a nifty banner to a web page--

If you want to do something outside of the created methods, you can grab the internal slice. This gives you a good start to build anything with the ASCII art, if manually.

A figure responds to the func Slicify, and will return the slice of strings.

figure.NewFigure("Keep Your Eyes On Me", "rectangles", true).Print()

figure.NewFigure("I mean, I could...", "basic", true).Scroll(10000, 200, "right")

figure.NewFigure("But why would I want to?", "basic", true).Scroll(10000, 200, "left")

figure.NewFigure("It's been waiting for you", "larry3d", true).Dance(10000, 500)

Because this project is small, we can dispense with formality. Submit a pull request, open an issue, request a change. All good!

GitHub stars are helpful. Most importantly, they help with discoverability. Projects with more stars are displayed higher in search results when people are looking for packages. Also--they make contributors feel good :)

If you are feeling especially generous, give a shout to @cmmn_nighthawk.|||

go-figure - Prints ASCII art from text.