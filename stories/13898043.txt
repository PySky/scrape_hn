Un pocket cube peut avoir 3 674 180 positions différentes. Pour une base de données NoSQL, ce nombre n’est même pas impressionnant.

Neo4j est une base de données de graphe NoSQL. Dans cet outil on pourait modéliser les cubes, et les relier entre eux via les mouvements.

Et comme ce logiciel est capable de trouver le plus court chemin entre deux noeuds, pourrait-il nous donner la solution pour résoudre le cube en un minimum de coups d’après une position donnée ?

La réponse est oui, et en quelques millisecondes.

Tout d’abord, il faut écrire le code pour pouvoir manipuler un cube. Voici une façon de le représenter :

La position d’un cube est décrite par un tableau de 24 éléments :

Toutefois, cette représentation a un inconvénient : imaginez un pocket cube résolu face à vous. Sa position vaut . Tournez-le d’1/4 de tour dans l’espace et vous obtiendrez par exemple . Hors, il s’agit du même cube ! On peut touner 4 fois le cube dans un sens, sur les 6 faces et on obtient 24 notations qui désignent pourtant le même cube…

Pour réduire ce nombre à un, je trie les 24 positions par ordre numérique : . Le premier élément est utilisé comme identifiant (ID).

L’identifiant du cube résolu est : .

On doit ensuite coder, entre autres, les méthodes suivantes :

Les lettres signifient : Front, Back, Up, Down, Left, Right dans le sens des aiguilles d’une montre, et “i” pour le sens inverse.

Dans le programme, cela consiste simplement à échanger les éléments du tableau. Par exemple, un mouvement U (Up), va faire tourner les éléments 0 à 3 et décaler les éléments 4 à 11 (cf. la représentation du cube en haut de page).

Ou comment générer les 3 674 180 identifiants décrivant tous les états possibles d’un pocket cube, ainsi que les liens entre eux.

Voilà le travail en cours :

Après plusieurs heures, j’obtiens deux beaux fichiers CSV de 110 et 585 Mo :

pour les noeuds :

pour les relations entre eux :

Vous aurez remarqué que j’ai prévu l’entête pour l’import dans Neo4j.

On supprime la base existante :

On se place dans le dossier où se trouvent nos fichiers CSV :

Import des CSV dans Neo4j :

NB : il faut ensuite redémarrer Neo4j : .

Cela consiste à trouver le plus court chemin entre deux noeuds. A l’aide d’une interface graphique on fait saisir les 6 faces du cube à un utilisateur. On génère l’identifiant de sa position, par exemple . On requête Neo4j, en cherchant le chemin le plus court jusqu’au cube résolu dont l’identifiant est :

On obtient en 0.08 secondes :

Remarque : Un lien non dirigé suffirait entre deux cubes, car on veut matérialiser le passage de l’un à l’autre via un mouvement. La direction n’a ici aucune importance car il y a réciprocité. Dans Neo4j il n’y a que des liens dirigés.

Il n’est pas possible d’associer le nom du coup au lien [MOVE] car on a simplifié 24 notations de positions en 1.

Par conséquent, pour trouver le nom du coup à jouer entre deux noeuds (F, B, D, Di, L…), on procède de la façon suivante : On part de la position donnée, on joue les 12 coups possibles, et on regarde si l’identifiant de la nouvelle position correspond à celui du noeud suivant.

J’ai automatisé des séries de tests. Le cube est résolu au plus en 14 coups !

Vous trouverez sur ce site : le solveur en ligne du pocket cube en français, et le solveur en ligne du pocket cube en anglais.|||

Un pocket cube peut avoir 3 674 180 positions différentes. Pour une base de données NoSQL, ce nombre n’est même pas impressionnant. Neo4j est une base de...