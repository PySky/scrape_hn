In using jwt, the information in the token, is the only thing required to authenticate a user. so our main here is to validate the information in the token and convert jwt to IPrincipal object. Iprincipal object, according to , simply means the functionality of a principal object, what then is a principal object, A principal object represents the security context of the user on whose behalf the code is running, including that user's identity ( ) and any roles to which they belong.

To make this JWT authentication to work, we must utilize a message handler, a message handler is simply a class that receives an HTTP request and returns an HTTP response. Instead of implementing our own message handler, we are going to be using an existing nugget package, JWTAuthForWepAPI.

The information structure in JWT token it’s as follows

1.Header: JSON format which is encoded as a base64

2. Claims: JSON format which is encoded as a base64.

3. Signature: Created and signed based on Header and Claims which is   encoded  as a base64.

ClaimsPrincipal based on incoming token and assigned it to the current thread. This will make the authentication to operate at the level of HTTP message rather than controller and actions.

To generate the needed token you can use System.IdentityModel.Tokens.Jwt from MS or  HMACSHA256 with SymmetricKey or may be any other provider that you desire.

The next steps is to add codes that configure the associated messagehandler. A message handler is simply a class that receives an HTTP request and returns an HTTP response.

At this point our service can accept json web token, signed with a particular symmetric key.

The code listed below will create a valid jwt that will be available  for authentication.

Because the jwt based handler was configured and added to the ASP.NET WEB API message handler collection , it can now accept JWT authentication.|||

