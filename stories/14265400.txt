I’m going to introduce , a command line tool for generating strings. I’ll first show some examples, then talk a bit about the performance and finally about the implementation (for the Haskell friendly reader).

This short introduction was motivated by a recent post on reddit where the author was looking for something similar (though packaged as a library).

In its essence, does the opposite of what does. You pass a definition string and it will find all the matches in the input you provide it. You pass a definition string and it will generate an output based on that string:

The most basic usage would be to use as an clone:

Though will go further, and allow you to define the output strings in various ways. For instance, you might want either or . You can use the sum operator as in the following snippet:

Both and will appear, but not together. To go back to the first example, let’s simply drop so we can better see the parallel between and :

There is an equivalent product operator if you need both and :

In this example you could have simply run to get the same result, but sometimes the operator can come in handy (see for instance the fold operator in the readme’s examples). Let’s see another important construct, namely the grouping operator . Say you want either and or and :

There are more examples in the readme showcasing things like repetition, sourcing files and , character ranges, and more.

As much as possible tries to only use constant memory. The heap should never grow as long as you stick to “pure” string generations, even if you perform products of infinite lists of words. However the situation is different with “unpure” string generation, for instance when sourcing words from . will do its best to keep the memory usage low. The following for instance will zip with itself:

The zip operator will zip two outputs together, and the group will be replaced by the content read from . The example above will still run in constant space, because realizes that it can discard a line from as soon as it was printed. The situation is different with products:

Here must keep the entirety of the group to the right of the product operator , because it will be repeated for each element produced by the group to the left of the operator. The reason is that cannot tell to simply “rewind” and start again from the beginning of the input. However, consider the slightly different example:

This command produces the exact same output, but reads directly. In this case will prefer reading the file from disk over and over again rather than keeping it in memory. This is something you should keep in mind if your operation has to perform many disk reads and that your hard-drive is slow. If the live data is not too big consider threading it through first (I might add an option to enable the behavior when reading from a file).

For most operations should outperform commands composed from several different programs and shell built-ins. The reason is that runs in a single process (which avoids context switches and inter-process communication), and that is optimized for specific kinds of commands. For instance on my machine printing the character to a million times takes over three seconds with while it only takes half a second with :

The code is spread across two tiny modules and is basically a thin wrapper around the excellent library. The first module, , is dedicated to parsing the commands. The only exported function is :

From a command input by the user will try to extract a , which is a tree-like data-structure defined in the second module, . The role of is that of an AST:

The meat of is in the function, also defined in . This turns a parsed into a :

If you look through the code you will see that doesn’t do anything fancy, it just leverages the capabilities.

I hope you enjoyed this quick introduction to and that, one day, it might help you do your job faster (like for instance recovering a forgotten password). Please read the section of the README, there’s a lot you can do to help the development and improve , the anti-grep.|||

