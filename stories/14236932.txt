The Cookie header format is specified in RFC 6265, section 4.2.1:

The individual cookies are clearly delimited by semi-colons, but it is not specified what servers should do when receiving invalid strings between semi-colons.

This repo started as part of a discussion for a Pull Request to the Rust http library, Rust. Pull Request #1159 was created in order to change its behaviour from:

The latter follows Postel's law, the Robustness principle": "Be conservative in what you send, be liberal in what you accept". Cookies are often injected, therefore added to an existing header in most cases, by intermediary apps servers, security appliances, network devices, proxies, Load Balnacers etc... between the User-Agent and the server. Bugs in any one of these intermediates could inject an invalid cookie. The former behaviour leads to the entire Cookie header to be discarded.

The goal of this survey is to list the behaviours of how well-known Web Application Servers and libraries when receiving a Cookie header containing a mixture of valie and invalid coookies.

Thanks to all the contributors, regardless of how small the contribution, this effort requires skills in different programing languages and with different libraries, which can only be achieved with a large number of contributors.

Provide a minimalist example of code, as small as possible, using your favourite library which:

Send a request with an invalid cookie between two valid cookies, and one request with only valid cookies but terminated with a semi-colon:

Use a checkmark ✓/✗ if ending a cookie with a semi-colon is accepted.

Use "discarded", "set as name" or "set as value" to report what is done with invalid cookies.

Please make sure you "ORDER BY language, library;" when adding rows to this table.

It seems that in the early days of the web it was acceptable to use a single cookie without a name. I found one article and a few references in online forums to this behaviour:

Interestingly enough recent versions of both Chromium and Firefox supports this behaviour:

Observe that the Cookie header is now "Cookie: Look_ma_no_name; BeenThere=1". This probably explains Django's behaviour in setting strings with no equal sign as value. This is interesting from a historical persepective, but given all the security issues due to cookies, it is probably better to simply discard cookies with no equal sign, and probably why the major frameworks are doing so (express, ring).|||

Invalid_cookies_in_Cookie_header - Survey of what most common web apps servers do when receiving invalid cookies in the "Cookie" header