I’m going to assume most people reading this post don’t care how this was made. For the few of you that do care I’m happy to share details.

Again, all source code is available on GitHub. It’s a single 1300 line file shared under a permissive license.

This project is built on the mountainous shoulders of Google’s Maps API.

The key component is the Distance Matrix API. I provide twenty five origin/destination pairs at a time and Google tells me how long it takes to get there. With just that query you can imagine 95% of this project.

To perform searches using correct time of day I have to account for time zones. Google has, of course, the Time Zone API to do the heavy lifting.

I perform searches with latitude, longitude coordinates. The returned result is a fixed up street address. The problem is that fix-up might move outside the hexagon. This is a bigger issue in the country side than in cities.

The returned address could be verified by converting back into a latitude, longitude via Google’s Geocoding API. Unfortunately that can only be done one address at a time; Which is both slow and pricey. I think Google should include the latitude, longitude of the address in Distance Matrix results.

The only clever thing I do is for testing water. And it’s not even my idea! Eric Kerr, a gentleman and scholar, shared his idea.

The idea is to build a Google static map image that uses styling to draw the water green. Then you can test if a single pixel is green or not.

I take it a step further and turn both water and highways green. Here is what that looks like for downtown Seattle.

I found that highways screwed up my commute results. No one is trying to commute to the middle of the freeway! It takes time to take an exit and push through traffic lights.

If a sampled pixel is green then I sample up to four diagonal points inside the hexagon. The first to pass the test is used. If all four fail then that hexagon is skipped. This does produce a few “holes” which looks bad. There is room for improvement.

I build the hexagon grid manually. It produces better results than rectangles.

Line drawing is mostly a matter of managing UI state. The line itself is just a list of points with a minimum distance between them. Google provides a way to draw polygons on maps.

To test if a point is in a concave polygon you cast a ray from the point in any direction. If it intersects with an even number of polygon edges then the point is outside. If it intersects an odd number of edges then it’s inside. My code does not handle rays that intersect parallel segments. Nor does it properly count rays which intersect vertices.

I built a test map to visualize travel times of 4, 8, 12, and 16 hours. It mostly works. The hexagons become misaligned. I blame Mercator projection. A different rendering approach needs to be adopted for this to work well.

If you look at the Paris map there are a few weird red spots. Those are near train tracks. They should get filtered out like water and highways. But they don’t. I think Google may have incorrect markup?|||

Visualize commute times based on travel mode and traffic