Several weeks ago, I created a Babel plugin for runtime type-checking in JavaScript. After testing it on my own projects I applied it to React’s source code and got some interesting results. In this article, I will go step by step through my experiment.

Every math or comparison operation with different types in JavaScript is potentially unsafe. You can get silent unexpected result because values are converted by tricky rules. For example, but if you accidentally add you will get . To avoid such errors you can use Flow, TypeScript or check operand types in runtime. I will apply the last approach to the React source code.

The plugin called Runtyper wraps every operation into a function that performs some additional type checking:

The plugin guess types by code itself with no manual annotations needed. That allows to apply such checking to any existing project with minimal effort. Let’s try it on React.

To get React’s source code I cloned its repo from GitHub and installed all of the dependencies:

and included it to scripts/jest/preprocessor.js with following config:

I allowed some rules because the default configuration of plugin is very strict. For example, allows concatenation of  . It is widely used in React code and will noise results.

Also I disabled a few lines in DOMProperty.js and Transaction.js. React executes these lines many times and their warnings overfill the output. In results section I will cover what is happening there.

React uses Jest for self-testing. I ran all tests and piped output to for later analysis:

When tests finished I found 33 unique places with type-mismatch operations. I published the full log here for everybody’s access. Below I will analyze 5 most interesting cases.

This line detects props of component that did not change. As props in React can be of any type, it looks like nothing wrong with it.

Concatenation of will return string that looks like a bug. But when I inspected the test code I found that this is intentional check for . React cares of developers and shows warning if some style calculates to  .

First good point is that runtime analysis warned it also. If similar concatenation happens in your code you will instantly know about it.

And the second point: what if style property calculates to  ? For example, . Currently, React does not warn about it and tries to render:

Browsers ignore this css but warning would be helpful.

This function compares two React elements. And makes decision should component be updated or not. Internally it compares elements with  . Frankly speaking, I can’t qualify this. Because the difference between and element is not clear for me. Documentation says: any of is ignored and not rendered. It seems like should be enough to flag that element does not exist.

This line generates string of component tree path for testing purpose. Here it will return that looks incorrect. I wondered why this does not break tests? I saw closely into the source code. Function compares expected and actual trees but does not check . That means I can change this line in test code from to and test will continue to pass. It is not big impact for React users because module is not exported. But needs to put attention on it as some React tests are irrelevant.

That is line I disabled before running tests. React calls it during initialization in every pre-test setup. The code ensures that only one of three boolean values is . The solution is elegant: just check that sum is less or equal . For me this is esthetic question — maybe explicit conversion to number will look better:|||

Several weeks ago, I created a Babel plugin for runtime type-checking in JavaScript. After testing it on my own projects I applied it to React’s source code and got some interesting results. In this…