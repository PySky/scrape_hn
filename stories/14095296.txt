Last article we warmed up with the small programming problems and math related to Fibonacci numbers. To know how fast of a algorithm is, we use Big-O notation. See what is it!

Let f(n) and g(n) be functions from positive integers to positive reals. We say f = O(g) (which means that “f grows no faster than g”) if there is a constant c > 0 such that f(n) ≤ c . g(n).

When we deal with Big-O notation, we usually meet Logarithms. Here is the rules for working with logarithms:

Let solve a small problem to warm up our brain!

Problem: Show that for any real constants a and b, where b > 0,

Bonus: Assignment from MIT for Big-O is so good [3].

Greedy algorithm is making local optimal choice first. Every stage, just make greedy choice and pray that you will find global answer. It’s greedy.

- Prove that it is a safe move. (aka prove that you’re safely greedy).

- What is the largest number that consists of digits 3, 9, 5, 9, 7, 1? Use all digits.

In solve this problem by greedy algorithm, we do step by step:

- Prove that it is a safe move: List contains only digit(no number is larger than 10) and largest number is beginning with valid largest digit(not zero). So, choosing the maximum number is a safe move.

- Reduce to a subproblem: We choose maximum digit ( 9 ) and we remove it out of list. The left list contains [ 3, 5, 9, 7, 1 ]. We have smaller size of list at each step.

- Solve the subproblem: We have a list again, just choose maximum and keep doing until the list is empty. You will get the answer.

Fractional Knapsack problem is well-known problem in Computer Science. We can use greedy strategy to implement Knapsack problem(the easy version):

Input: Weights w1, w2, …, wn and values v1, v2, ….vn of n items; Capacity W. Find the maximum total value of fractional of items that fit into a bag of capacity W.( the easy version, means we can divide wi into many units of weight)

Example: We have 3 kind of packages: $20 of value with weight 4kg, $18 of value with weight 3kg, $14 of value with weight 2kg. We can only carry 7kg. So, how do we choose to maximum the values we carry?

The clearly answer is to choose 2kg of $14, 3kg of $18 and 2kg of $20, so we can carry $14 + $18 + $20/2 = $42 of value.

Note: 2kg and 3kg had largest values $14/2 and $18/3 per unit.

To solve this problem using greedy strategy. We do it step by step.

- Make a greedy choice: Choose many as possible items with maximum value per unit of weight.

So we choose A first, B then C.

- Prove that it is a safe move: we divide any item i into wi smaller item, each item has vi/wi weight per unit. we have w0 + w1 + …+ w2 number of unit item. Because it’s unit, so we just choose as much as unit has maximum value as possible.

- Reduce problem to subproblem: After we choose a greedy choice wi has value vi, we remove it out of list, so we have n-1 items with n-1 values corresponding.

- Solve the subproblem: Keep choosing maximum value per unit until the capacity W is full. (you can divide the last one in smaller weight to fit the capacity W)

The running-time of Knapsack is O(n²).

The goal in this problem is to find the minimum number of coins needed to change the input value (an integer) into coins with denominations 1, 5 and 10.

Output format: Output the minimum number of coins with denominations 1, 5, 10 that changes m.

Greedy choice is to choose many as possible number of largest coins.

A thief finds much more loot than his bag can fit. Help him to find the most valuable combination of items assuming that any fraction of a loot item can be put into his bag.

The goal of this code problem is to implement an algorithm for the factional knapsack problem.

Input Format: The first line of the input contains the number n of items and the capacity W of a knapsack. The next n lines define the values and weights of the items. The i-th line contains integers vi and wi the value and the weight of i-th item, respectively.

Output Format: Output the maximal value of fractions of items that fit into the knapsack. The absolute value of the difference between the answer of your program and the optimal value should be at most 10 3. To ensure this, output your answer with at least four digits after the decimal point (otherwise your answer, while being computed correctly, can turn out to be wrong because of rounding issues).

Explanation:

 To achieve the value 180, we take the first item and the third item into the bag.

We have pseudocode above, we can easy to implement Factional Knapsack.

The key points here are selecting max index from value/weight. Add that value to result and clean that value in original list.

You have n ads to place on a popular Internet page. For each ad, you know how much is the advertiser willing to pay for one click on this ad. You have set up n slots on your page and estimated the expected number of clicks per day for each slot. Now, your goal is to distribute the ads among the slots to maximize the total revenue.

Given two sequences a1, a2,…, an (ai is the profit per click of the i-th ad) and b1,b2,…,bn (bi is the average number of clicks per day of the i-th slot), we need to partition them into n pairs (ai,bj) such that the sum of their products is maximized.

Input Format: The first line contains an integer n, the second one contains a sequence of integers a1,a2,…,an, the third one contains a sequence of integers b1,b2,…,bn.

Output Format: Output the maximum value of ∑ai*ci (1 ≤ i ≤ n) where c1, c2, . . . , cn is a permutation of b1, b2,…, bn.

The greedy choice is choosing highest profit per click for the slot with highest number of clicks per day. To prove it is a safe choice, please read the assignment details[2].

So, we just choose the highest ai and bj, compute: result += ai . bj.

You are responsible for collecting signatures from all tenants of a certain build- ing. For each tenant, you know a period of time when he or she is at home. You would like to collect all signatures by visiting the building as few times as possible.

The mathematical model for this problem is the following. You are given a set of segments on a line and your goal is to mark as few points on a line as possible so that each segment contains at least one marked point.

Given a set of n segments {[a0, b0], [a1, b1], . . . , [an-1, bn-1]} with integer coordinates on a line, find the minimum number m of points such that each segment contains at least one point. That is, find a set of integers X of the minimum size such that for any segment [ai,bi] there is a point x ∈ X such that ai ≤ x ≤ bi.

Input Format: The first line of the input contains the number n of segments. Each of the following n lines contains two integers ai and bi (separated by a space) defining the coordinates of endpoints of the i-th segment.

Output Format: Output the minimum number m of points on the first line and the integer coordinates of m points (separated by spaces) on the second line. You can output the points in any order. If there are many such sets of points, you can output any set. (It is not difficult to see that there always exist a set of points of the minimum size such that all the coordinates of the points are integers.)

Explanation:

 In this sample, we have three segments: [1,3],[2,5],[3,6] (of length 2,3,3 respectively). All of them contain the point with coordinate 3: 1 ≤3 ≤3, 2 ≤3 ≤5, 3 ≤ 3 ≤ 6.

Explanation:

The second and the third segments contain the point with coordinate 3 while the first and the fourth segments contain the point with coordinate 6. All the four segments cannot be covered by a single point, since the segments [1, 3] and [5, 6] are disjoint.

The greedy choice is selecting the minimum right endpoint. Then remove all segments that contains that endpoint. Keep choosing minimum right endpoint and removing segments.

You are organizing a funny competition for children. As a prize fund you have n candies. You would like to use these candies for top k places in a competition with a natural restriction that a higher place gets a larger number of candies. To make as many children happy as possible, you are going to find the largest value of k for which it is possible.

The goal of this problem is to represent a given positive integer n as a sum of as many pairwise distinct positive integers as possible. That is, to find the maximum k such that n can be written as a1+a2+···+ak where a1,…,ak are positive integers and ai != aj for all 1 ≤i<j≤k.

Output Format: In the first line, output the maximum number k such that n can be represented as a sum of k pairwise distinct positive integers. In the second line, output k pairwise distinct positive integers that sum up to n (if there are many such representations, output any of them).

The greedy choice is choosing smallest number from 1, 2, …Sum them as S. If your smallest number is larger than (input_number— S)/ 2. You found the last number. Why? please take a look at assignment details[2].

As the last question of a successful interview, your boss gives you a few pieces of paper with numbers on it and asks you to compose a largest number from these numbers. The resulting number is going to be your salary, so you are very much interested in maximizing this number. How can you do this?

In the lectures, we considered the following algorithm for composing the largest number out of the given single-digit numbers.

Unfortunately, this algorithm works only in case the input consists of single-digit numbers. For example, for an input consisting of two integers 23 and 3 (23 is not a single-digit number!) it returns 233, while the largest number is in fact 323. In other words, using the largest number from the input as the first number is not a safe move.

Your goal in this problem is to tweak the above algorithm so that it works not only for single-digit numbers, but for arbitrary positive integers.

Compose the largest number out of a set of integers.

Input Format: The first line of the input contains an integer n. The second line contains integers a1, a2,…, an.

Output Format: Output the largest number that can be composed out of a1, a2, . . . , an.

Explanation:

 Note that in this case the above algorithm also returns an incorrect answer 212.

This problem has many edge cases. Base on the pseudocode above, the main point is checking “digit ≥ maxDigit” in the right way. Because it’s not only digit anymore, you have to make sure that 12 and 2 => 221, 22 and 225 => 22522….To do that, the strategy of comparing two number is:|||

Last article we warmed up with the small programming problems and math related to Fibonacci numbers. To know how fast of a algorithm is, we use Big-O notation. See what is it! Let f(n) and g(n) be…