This blog post shows how you can leave the job of maintaining object / relations to a database, effectively giving you time to pick from your backlog instead of adding :)

Without any direct support for relations, youâ€™re stuck with the logic and maintenance of objects / relations in your application layer.

Compared to a traditional relational database (SQL), a document oriented (NoSQL) database has poor or non-existent support for relations between objects (data schema). A NoSQL datastore persists and retrieves documents (often in JSON format) and any relationships between your documents is something you must implement yourself.

As a context for this blog post, we'll create a simplified data schema for an issue tracking application.

An issue tracking application typically lets customers reports issues, and someone in the organization is selected as a responsible contact for the follow-up and ultimately resolving the reported issue.

The illustration below shows the three main objects of our application.

This simplified model has two explicit relations from the issues object:

The model also has two implicit relations:

Our simple data model reveals that there are four object/relations that must be maintained in our issue tracking application.

With the example above in mind, lets go ahead and show how we can create data consistency and flexibility by using relations in our JSON documents.

Just as in a traditional relational database we'll start by creating one collection (table) for each of our main objects.

In restdb.io development mode, we add the three collections by cliking on the "Add Collection" button. The screen shot below shows the result:

For this example we'll also add some random data using the random data generator.

After running the random data generator on each collection, our database now has these populated data collections.

Adding relations to objects are done with a REST API call.

In this example we'll use the PUT verb to add a relation to a customer and a responsible on a specific issue. We do this by providing the ObjectID's for the particular customer and responsible documents:

After validation the document, the database will produce a result for the modified issue document with an embedded copy of the customer and the responsible documents:

Note that a relation is always represented as an array of objects.

For each reference to an object (i.e. relation), the database will keep track of any changes in the original document.

On a change in the original document, e.g. the customer name, the database will also update all copies of that instance. Hence keeping data consistency and enabling fast atomic queries.

The examples above has shown how issues can have embedded copies (relations) of both customers and responsibles. This is great for speed and consistency.

But how do we find the (implicit) issues that belongs to a specific customer, or which issues a specific responsible person has?

Well, since the database keeps track of all relations, it can also tell us where a specific document is used in a relation.

The example queries below shows how you can track the implicit references to a document by using a special query parameter - .

By using this parameter in a query, the database will return the full graph for all other documents that has a relation to the document in the query. E.g. Find all issues for the customer :

Result is a full graph of the issues for this customer.

Find all issues for a specific responsible. The same format is returned here.

Objects and relation are a crucial part of any application. By letting the database do the job of maintaining this logic, you will save yourself a ton of work.

At the same time you will keep the speed and flexibility of a document database, combined with the consistency and integrity of a relational database.|||

object relations in a nosql database