The function transforms values from a group of rows into a list of values that are delimited by a configurable separator. is typically used to denormalize rows into a string of comma-separated values (CSV) or other comparable formats suitable for human reading.

does not apply any escaping: it is not generally possible to tell whether an occurrence of the separator in the result is an actual separator, or just part of a value. The safe use of for electronic data interfaces is therefore limited to cases in which an unambiguous separator can be selected, e.g. when aggregating numbers, dates, or strings that are known to not contain the separator.

When implementing electronic data interfaces, arrays and document types (JSON, XML) are advantageous as they offer type safety, or at least proper escaping.

is an ordered set function, which require the clause to specify an order. The minimal syntax is:

The must not contain window functions, aggregate functions or subqueries. The standard only allows character literals in —i.e. no expression and no bind parameter. Bind parameters are nevertheless well supported in practice.

removes values before aggregation like most other aggregate functions. If no value remains, the result of is . If needed, can be used to replace values before aggregation.

The return type of is either or with an implementation defined length limit. In practice, it is a type.

accepts the optional clause to define the behavior if the result exceeds the length limit of the return type:

The default is . In this case, the standard requires an exception with SQLSTATE 22001 to be raised —in practice, this requirement is not fulfilled.

The clause prevents the overflow by only concatenating as many values as the result type can accommodate. Furthermore, the clause allows one to specify how the result is terminated:

The optional defaults to three periods ( ) and will be added as last element if truncation happens.

If is specified and truncation happens, the number of omitted values is put in brackets and appended to the result.

The SQL standard does not require a warning to be issued on truncation. To know whether the result is complete or not, users can parse the result or compare the actual length of the result to the calculated length for a result containing all values.

The function accepts the optional set quantifiers and :

If neither is specified, is default. If is specified, duplicate values are removed before aggregation. Note that the elimination of duplicates is subject to the collation in effect.

can be implemented manually by removing duplicates before aggregation—e.g. in a subquery. This works for databases not supporting in , and also allows to keep a particular occurrence if duplicates exist.

The following example demonstrates this approach. The columns and represent the and keys respectively. The example uses to keep the first occurrence in case one value appears multiple times.

can be combined with the and clauses:

The effect of the clause is to remove rows before aggregation. can be used for the same effect.

The clause must not contain an clause because the mandatory clause must contain an clause anyway. It is not possible to narrow the window frame: the set of aggregated rows is always the full partition.

was introduced with SQL:2016 as optional feature T625. Even though is not yet widely supported, most databases offer similar functionality using a proprietary syntax.

If the query does not strictly require the return of a delimited string, arrays can be used to return an array of values. An array can be constructed using the aggregate function or via a subquery.

In the second form, <query> can contain and to remove duplicates and limit the array length.

Neither of the two approaches performs an implicit : the array elements have the same type as . That means that the retrieving application can fetch the values in a type-safe manner and apply formatting if required.

The type-safe nature of arrays allows them to also carry values in an unambiguous way. does therefore not remove values like other aggregate functions do (including ).

The clause can be used to remove values before aggregation with . If the clause removes all rows, returns —not an empty array.

The subquery syntax allows removing values in the clause of the and returns an empty array if the subquery doesn't return any rows.

If the order of elements is irrelevant, multisets and can also be used to pass a type-safe list to an application.

Similar to , the SQL standard defines aggregate functions that return JSON or XML fragments: i.e. and . The main benefit compared to is that they apply the respective escape rules.

The following special case can be implemented using only and intermediate SQL-92:

Note the and that has to be the exact same expression in both cases.

The following example uses as key, as and as :

This particular implementation uses the “loose index scan” technique as explained on the PostgreSQL Wiki. The performance will remain at a rather low level even with an index on . The behavior is a side effect of this technique.

The correct handling of in is an important special case: although is generally ignored in aggregations, a group that consists of values only must still be present in the result. This means that must not be removed if there is no value in the group. The implementation above uses in the non-recursive expression to get this behavior.

A more generic implementation that supports semantics and arbitrary clauses is possible using and window functions. Aaron Bertrand's post “Grouped Concatenation in SQL Server” presents an example of this approach.

In both cases, arbitrary behavior can be implemented.

The only useful extension that is commonly available is the support of bind parameters and constant expressions in .

The standard neither allows omitting the nor omitting the clause. Yet some databases treat them as optional and apply implementation defined defaults or expose undefined behavior if is omitted.

There are two widely available proprietary alternatives to : and . Even though some databases use the same proprietary function name, they still use a different syntax.

The good news is that the proprietary functions have the same default semantic as : they filter values before aggregation but don't remove duplicates ( semantics).

PostgreSQL's supports and follows the syntax to specify an order:

PostgreSQL also offers a proprietary function to turn arrays into delimited strings: .

SQL Server's doesn't support and uses the clause to specify an order:

Aaron Bertrand's post “Grouped Concatenation in SQL Server” demonstrates many other ways to implement in older SQL Server releases—including the approach.

MySQL's supports and expects the clause before the optional separator (default: comma):

MySQL's truncates the result if it exceeds a configurable maximum length and doesn't honor element boundaries when doing so. In other words, it might truncate in the middle of an element.

Some databases support user-defined aggregate functions: MySQL (only in C/C++), Oracle Database (also ), PostgreSQL, SQL Server (using CLR).|||

LISTAGG is the new SQL standard version of GROUP_CONCAT or STRING_AGG. LISTAGG supports DISTINCT and provides an ON OVERFLOW clause to control the behavior when exceeding the maximum string length.