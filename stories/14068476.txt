You’ve probably heard of functional programming before. If you read a few programming articles, you’re bound to see it mentioned here and there. What is functional programming anyways? What’s the hype about?

Functional programming is a programming style. It’s a way of writing and thinking about code. This is a good definition, but it doesn’t really tell us what functional code looks like. Let’s start with an example. (JavaScript)

This is a pretty simple toy example. It takes a list of strings and converts it into a pretty bullet point list. The strings are capitalized and prefixed with numbers.

If you’re new to JavaScript, this code might look daunting to you. To understand it, you’ll need to know about and arrow functions.

One thing that you should notice about this code is that it doesn’t modify any variables or values. Once a variable is created, it’s assigned a value and then never changed again. Each variable is a copy of another variable with some changes applied to it.

Now that we have some functional code, let’s compare it to some procedural code. Procedural programming is also a programming style. It’s what most developers are taught when they start programming. Let’s look at an example. (JavaScript again)

This code does the same thing as our functional code example. The difference is only in programming style.

If you pay attention to how variables are used in this example, you’ll notice that we create variables and then change them throughout our code. This is the opposite of what we did in our functional example.

When we write procedural code, we think of variables as places to store data. Our code runs step by step and modifies this data. Eventually, when a chunk of code (usually a function) is done, our data is left in a desired state.

Functional programming takes a different approach. It borrows from mathematics. We think of variables as definitions. Variables are not a place to store data but rather a transformation of some other values.

We don’t say that is a space in memory holding the numeric value , but rather that is the sum of and . This is subtle but it’s very important.

Like in mathematics, once we define something, we can’t redefine it. This means that our variables never change. We can apply a similar reasoning to functions. The code inside functions can not change variables. This means that if we call a function multiple times with the same input, it will always return the same output.

This is what we call pure functions. These functions take their input and transform it into some output. In fact, we can think of them as rules that map input values into output values.

That’s all well and good, but why would someone want to write code this way? The short answer is that it makes it easier for you to think about your code.

First, any code written in a functional style will always behave the same way given the same input. This allows you to write an use functions that you can trust and that have predictable behaviour.

Second, it allows you not to worry about the state of your program at any point in time. With functional programming, you know that when you define something, no one is going to redefine it under your nose.

Third, it makes your code easier to test. Generally speaking, it’s much easier to test a function that takes some input and returns a transformed version of it. You don’t have to setup any kind of complex state and check that it was modified in the way you expect.

Finally, it makes asynchronous code trivial. The hard part of writing parallel code is when you have more than one task accessing and modifying shared resources at the same time. Since you’re never changing state, you don’t have to deal with that complexity. Your code will work whether it’s run in 1 or 200 processes.

I’m not saying that everyone should go and convert their entire codebase to a functional style. What I’m saying is that functional programming is a tool that can help you as a developer and that you should start playing with it.

The beauty of functional programming is that it can be applied to any codebase in parts. You can start by writing a few pure function. Over time, you will add more and more functional code to your codebase where it makes sense.

I will leave you with a word of caution. Learning functional programming is not easy. When you’ve spent all of your career thinking in a procedural way it’s hard to change. While this is a difficult journey, it’s definitely worth it. You will learn to better think about code.|||

You’ve probably heard of functional programming before. If you read a few programming articles, you’re bound to see it mentioned here and there. What is functional programming anyways? What’s the hype about?