Google Cloud Container Builder was announced last month and I have been using it ever since. It has a few features that I really love that have gone unhighlighted. I wrote a testimony on Hacker News when it came out, so I am going to elaborate on that here. Here’s a short list of the cool features:

If you distribute your apps as containers, you don’t need to host a Jenkins instance or a third-party CI service to build/push your images. Cloud Container Builder not only does this, it can run arbitrary build steps to deploy your application, too.

If your source repository or directory has a (?), Container Builder can build it —period. You have two options to use this feature: Either go to Google Cloud Console and use the UI to import your repository or just build on the cloud with (?) command-line tool.

So instead of your most favorite command:

packages your source directory and builds on cloud by executing the following steps:

If you don’t understand what I just said, it means that you do not need Docker on your machine to build and push Docker images. Here’s how it looks like:

I host all my stuff on GitHub private repositories, including my blog. It took me less than 60 seconds to set up a build for a GitHub repository I have. Google Cloud Console has a GitHub integration, so importing your repos is super easy. You just authorize the app to access your repos, then choose your repo to build.

If your repo has a , you don’t need to write a  or sort of thing.

A single doesn’t always get you what you need. Sometimes you need to execute multiple steps to build your image; I suspect this is why a lot people still use Jenkins.

Cloud Builder addresses this problem elegantly, by providing an option to customize build steps and environments.

Here is what you need to know:

This is exactly like Jenkins build pipelines where your artifacts are stashed/unstashed from one step of the pipeline to another.

To illustrate this better, assume you have an example application:

then Container Builder automatically pushes the tagged image to GCR. You can see all sorts of examples of this in the cloud-builders repository.

But before I finish this section, two more cool things:

You need to understand that Google has a ton of compute and network power and does not mind allocating that to stuff like Container Builder. The machines running your builds on Container Builder are really fast in terms of CPU, I/O and network.

As you can read in my CircleCI vs Container Builder testimony, I have seen my 3m30s build to come down to 1m10s (that’s 3x faster) when I switched to Container Builder.

Here are some reasons why the Google Container Builder is faster:

That said, currently you get 2 hours of build time for free and additional build minutes are subject to charge. I expect most small projects to be happy with the free tier.

I am heavily inspired by Container Builder’s simple build mode. It works out of the box if you just build with Dockerfiles. Yet, if you want to customize, it provides a clean and modular way to do that as well. I already use it to build and deploy my applications and publish my blog.

Definitely check Cloud Container Builder out and read the docs if you are interested.|||

Google Cloud Container Builder was announced last month and I have been using it ever since. It has a few features that I really love that have gone unhighlighted. I wrote a testimony on Hacker News…