If you’ve worked on a large development project, you’ve spent a great deal of time trying to choose semantic names for CSS properties and SASS variables.

Until CSS preprocessors came along, variables did not exist in CSS. There were only hex codes like and . They’d be scattered throughout your single, sprawling CSS file. When you wanted to switch everything from white to black, you’d find and replace with . Simple enough.

With variables, it gets more complicated.

Should I call it ? Or ? Or ? Should I store it in a variable? Would a SASS map be more appropriate?

So many questions when all you needed to do before was type .

Color management has always been a pain point because:

I’m giving you permission to choose variable names that work for YOU, the developer. Variable names that provide YOU with useful and memorable information.

I’m giving you permission to name your color variables like Crayola does crayons: in a human-readable format.

Do YOU know what mac-and-cheese yellow looks like? I sure do!

This is how I store colors in SASS variables:

You’re not going to forget . You just won’t.

Best of all, you can use for the page background or the link color or as the fill color for that noodle-shaped SVG you crafted. Your variable name isn’t tied to any specific context.

You could pull out a box of crayons and go to town. Or you could use Name that color. This nifty web app will help you choose memorable color names based on the hex values you provide.

Colors inevitably change over time. And the fix is simple! Open your favorite text editor and use find and replace like the good ‘ol days.

There is one way The Crayola Method can fail: when a color changes and you fail to find and replace the variable name.

When a hex value changes significantly, you MUST update the variable name.

I have tried every color naming scheme known to man.

I started with an approach similar to The Crayola method.

But the system broke down when I started to expand the palate:

Instead of choosing descriptive, memorable names, I was lazy and appended or . No good.

When you have a variable named , your system is broken.

Next, I had the bright idea to start using SASS maps, resulting in the same problems with even more unnecessary abstraction.

Next, I switched courses entirely, choosing colors based on context and importance.

This was great until I wanted to use the link color as a background.

I abandoned the SASS map. And the context.

Next, I tried an abstract approach, using only numbering.

This actually worked really well! That is, until came around.

How was anyone (especially a remote collaborator) supposed to know that was indeed mac-and-cheese yellow?

I eventually came full circle, using simple variables and descriptive names.

I’ve used this approach on several projects and it has yet to fail me. I love it! I hope you do too.

Throughout my color-naming struggles, my approach has been shaped by many great internet minds. In fact, many of the ideas in this post have been written about previously. I just wanted to share my personal experience and spread the good word about this approach.

This post was inspired by:|||

Cory Etzkorn is a designer and developer living in Brooklyn, New York