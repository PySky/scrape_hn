It is just another template render engine so why should one choose TRender? TRender was originally created for SiriDB which needed a fast and simple template engine.

The easiest way is to use PyPI:

TRender uses a template as input. This template can be a string or filename. Some options like and are only available when using a filename and template path. When initializing an instance of TRender it will compile the given template. Usually this will happen only once for each template. The TRender instance can then be rendered with a dictionary (we call this a namespace and we actually create a 'Namespace' instance from the given dictionary). TRender is optimized to render a compiled template very fast.

When using a filename we also need to specify a path, like:

Note that should be the root path for your templates. Assume we have the following path structure:

Then it is best to initialize TRender like so the engine will be able to find when used inside your template.

Both and are only available when using a template file, not with a simple string.

Variable in a template are prefixed with an and optionally can be closed with an exclamation mark. A variable can only include alphabetic characters, digits and underscores. (And a , but this has a special meaning to select nested variable). If you want to use a as a symbol in the template, add as an escape character.

Comments should start with or a followed by a .

Conditionals are very simple in TRender. We evaluate a simple value or allow a function for more complex conditionals. We start with followed by an optional finally an optional and close with . If a conditional is not available in the namespace it will evaluate as .

Complex example (actually it's not really complex...)

We use loops and the loop should always close with .

Since an example explains more than words:

Sometimes you want to define a block and re-use this block several times. As a name convention I like to write blocks using CamelCase.

Macros are like blocks, except that they will be compiled only once using the namespace where the macro is defined. For example if we had used a in the example above, we would get two empty items since was not avaible when defining the macro. As a name convention I like to write macros using UPPERCASE_CHARACTERS.

Including files is only possible when using a template file as source. Includes happen at compile time so they have no extra costs during rendering.

Extend can be used to extend a template. This is ofter useful when we want to use a template but start rendering another specific template. It's only possible to use extend when using a template file as source.

TRender can used together with the web server by using simple decorators for loading and rendering templates.

trender.aiohttp_template setup_template_loader trender.aiohttp_template template The 'template' decorator can be used to load a template. we assume in this example that you have the following template: and you want to render this using the namespace: ( ) ( ): { : } This will setup the template loader. Make sure you run this only once, setup_template_loader( )|||

trender - Template Render Engine