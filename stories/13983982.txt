Magenta is a project from the Google Brain team that asks: Can we use machine learning to create compelling art and music? If so, how? If not, why not? We’ll use TensorFlow, and we’ll release our models and tools in open source on this GitHub. We’ll also post demos, tutorial blog postings, and technical papers. If you’d like to keep up on Magenta as it grows, you can read our blog and or join our discussion group.

Magenta maintains a pip package for easy installation. We recommend using Anaconda to install it, but it can work in any standard Python 2.7 environment. These instructions will assume you are using Anaconda.

Note that there are additional instructions below if you want to enable GPU support.

If you are running Mac OS X or Ubuntu, you can try using our automated installation script. Just paste the following command into your terminal.

After the script completes, open a new terminal window so the environment variable changes take effect.

The Magenta libraries are now available for use within Python programs and Jupyter notebooks, and the Magenta scripts are installed in your path!

Note that you will need to run to use Magenta every time you open a new terminal window.

If the automated script fails for any reason, or you'd prefer to install by hand, do the following steps.

First, download the Python 2.7 Miniconda installer (you can skip this step if you already have any variant of conda installed).

Next, create and activate a Magenta conda environment using Python 2.7 with Jupyter notebook support:

The Magenta libraries are now available for use within Python programs and Jupyter notebooks, and the Magenta scripts are installed in your path!

Note that you will need to run to use Magenta every time you open a new terminal window.

If you have a GPU installed and you want Magenta to use it, there are some additional steps to take after you've installed the pip package (using either the automated install or the manual install above).

First, make sure your system meets the requirements to run tensorflow with GPU support.

Next, activate your environment and install the pip package:

Magenta should now have access to your GPU.

Another way to try out Magenta is to use our Docker container. First, install Docker. Next, run this command:

This will start a shell in a directory with all Magenta components compiled, installed, and ready to run. It will also map port 6006 of the host machine to the container so you can view TensorBoard servers that run within the container.

This also maps the directory on the host machine to within the Docker session. Windows users can change to a path such as , and Mac and Linux users can use a path relative to their home folder such as . WARNING: only data saved in will persist across Docker sessions.

The Docker image also includes several pre-trained models in . For example, to generate some MIDI files using the Lookback Melody RNN, run this command:

NOTE: Verify that the path matches the path you mapped as your shared folder when running the command. This example command presupposes that you are using as your shared folder from the example command above.

One downside to the Docker container is that it is isolated from the host. If you want to listen to a generated MIDI file, you'll need to copy it to the host machine. Similarly, because our MIDI instrument interface requires access to the host MIDI port, it will not work within the Docker container. You'll need to use the full Development Environment.

You may find at some point after installation that we have released a new version of Magenta and your Docker image is out of date. To update the image to the latest version, run:

Note: Our Docker image is also available at .

You can now create your own melodies with TensorFlow using one of the various configurations of our Melody RNN model; a recurrent neural network for predicting melodies.

After you've trained one of the models above, you can use our MIDI interface to play with it interactively.

If you want to develop on Magenta, you'll need to set up the full Development Environment.

The installation has three components. You are going to need Bazel to build packages, TensorFlow to run models, and an up-to-date version of this repository.

Next, install Bazel. We require the latest version, currently 0.4.5.

You will also need to install some required python dependencies. We recommend using a conda environment and installing with pip:

Finally, install TensorFlow. To see what version of TensorFlow the code currently requires, check the dependency listed in setup.py.

Also, verify that your environment uses Python 2.7. We do aim to support Python 3 eventually, but it is currently experimental.

After that's done, run the tests with this command:

To build and install the pip package from source, follow the pip build instructions. You can also use our build script.

If you want to build and run commands with Bazel, you'll need to run the package that the build step generates. There are two ways to do this. The first option is to look at the output of the build command to find the path to the generated file. For example, if you want to build the melody_rnn_generate script:

The other option is to use the command, which combines the two steps above. Note that if you use , you'll need to add an extra before the command line arguments to differentiate between Bazel arguments and arguments to the command.|||

magenta - Magenta: Music and Art Generation with Machine Intelligence