Egor is an experienced software developer working with JavaScript, PHP, Java, Unity technilogies. He is happy to share his expertise with all the industry peers.

Our team was looking for a very simple Java Web framework for one of our projects, and we found the next combination of tools very fascinating:

They work together pretty well, and there is a plenty of articles on the Internet covering this topic, so it is easy to get things started. But none of these articles explains how to scope your code in a single HTTP request. By design, servlet is always a singleton. Guice refuses to register servlets as request-scoped objects, so, the whole point of request-scoped object instantiation is being lost. Due to this issue, we’ve almost decided to abandon an idea of using low-level servlets and switch to Jersey framework, which wasn’t very attractive for us as well, for different reasons. But a deeper look to Guice API has saved my day.

Just to clear things out, we’ve defined a dream class of HTTP resource that we wanted to work with and that we wanted to inherit other resources from.

Granularity is the key. One Resource instance is created and called to process a single request regardless of HTTP method. The resource is request scoped.

We’re going to use this InvalidRequestResource as a default resource for all requests which don’t match any routes.

Now we need to somehow make this work. Here’s a universal class of servlet that allows you to register such request-scoped resources in your Guice module with ease.

In this snippet Guice magic happens: it turns out that Guice Injector registers itself as an injectable singleton object! To be honest, I was very surprised (in a good way) when I realized that it works this way. And even more wonderful: you don’t need to have an appropriate binding in the injector to instantiate objects of arbitrary class. Guice is quite smart, man! As a result, we were able to use the injector to instantiate request-scoped resources and process them inside the servlet.

So, ScopedServlet’s constructor takes two arguments: a resource class to process GET requests, and a resource class to process POST requests. To make this work, we must use instance bindings.

Here one more Guice magic happens: it turns out that dependency injection is applied to instance bindings as well! You are not obligated to construct all objects via injector.getInstance method to make injections happen. In fact, a special injector.injectMembers method is exposed for you to deal with this problem. Guice is quite well-thought, man!

I hope that this article covers request-scoped resources definition problem good enough. To complete this example, see Full Example Code Showing How to Use Guice and Jetty or other related articles.

Maybe you still have some thoughts or questions left? If so, feel free to share in the comment box.|||

Request-scoped resources with Guice and Servlet