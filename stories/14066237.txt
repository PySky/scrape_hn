Terraform is an increasingly popular infrastructure-as-code tool for teams that manage cloud environments spanning many service providers. New users are often drawn to Terraform’s ability to quickly provision compute instances and similar resources from infrastructure providers, but Terraform can also manage platform-as-a-service and software-as-a-service resources.

What Datadog calls integrations, Terraform calls providers; Terraform’s Heroku provider, for example, is all the code within Terraform that interacts with Heroku. This article introduces the Datadog provider, which can manage your timeboards, alerts, users, and scheduled downtime. We’ll use it to set up and edit a Datadog alert, and we’ll see how to create an AWS EC2 instance and an associated Datadog alert rule with a single command. But first, a brief pitch for Terraform. If you’re already a user or are already convinced to try Terraform, feel free to skip past the next few sections.

Maybe you’re the type who feels a twinge of guilt when you’ve spent too much time fumbling around in your favorite cloud provider’s web console. You’re keen on automating your environment as much as possible, and you’re familiar with Datadog’s API libraries, like datadogpy and its CLI counterpart, .

If you have only a small cloud footprint, rarely provision new services, or you’re a one-person team, interacting with our API from ad hoc scripts and shell one-liners may be as much automation as you need. Or, if you’re already using the Datadog libraries alongside those of other cloud providers to develop in-house tooling that fits neatly into your team’s workflow, great! We won’t try to convince you to ditch your own tooling. But if you’re a growing team without a well-established workflow, or your scale has outgrown your existing tooling, Terraform is worth a look.

Its design principles will be familiar to users of configuration management tools like Puppet. You’ll model your environment with declarative templates. Repeated application of the templates is idempotent (i.e. a template calling for three DNS records will not, when applied twice, create six records). And of course, though Terraform doesn’t require it, you will collaborate with teammates on your templates using a version control system like Git. Once you have adopted it, you should use Terraform—and only Terraform—to manage your entire cloud environment. Any scaling up, down, or out should start with a pull request and team review. No more tribal knowledge or out-of-date runbooks. It’s infrastructure as code.

If you’re on a Mac and use Homebrew, a quick will get you started. If you don’t use Homebrew, or you want to ensure you get the latest version and a stable build, download the Terraform package for your system directly from HashiCorp and follow their instructions to complete the install.

Like most Go programs, Terraform is delightfully easy to install; all of its third-party dependencies are built into the executable. The Datadog provider has been built in since it was introduced in version 0.6.12 (released in early 2016).

Before writing your first Datadog resource, make sure Terraform is installed:

Let’s create a simple monitor resource to set an alert condition in Datadog. We’ll start with a bare resource and fill in the minimum requirements soon thereafter.

In any directory, create a file with the following contents:

Resource types always follow the pattern . In this case, the type is . The resource name is up to us, and we’ve chosen . Resource names only serve to uniquely identify the resource within Terraform templates; we’ll give the monitor its Datadog name in a moment.

You can enter your Datadog credentials via CLI, but obviously you won’t want to do this every time you run Terraform. Cancel this by entering blank credentials or by interrupting Terraform (Ctrl-C), and let’s provide credentials a better way.

There are two options: set them within a provider block, or in shell environment variables. You should never set secrets directly in a provider block since they would get checked into source control, but there’s another way. HashiCorp recommends using a provider block which—for credentials and other secrets—references variables you’ve added in a separate, source-control-exempt file, . We won’t get into using input variables here, so let’s just set credentials in the Datadog provider’s special environment variables:

See your Datadog account settings if you don’t know your API key, and create an application key at the same page if you don’t already have one.

Then, apply the template again:

The monitor resource requires four fields. If you’ve ever created a monitor via our API, this won’t be news to you.

Let’s fill in the minimum fields required to create a ‘metric alert’ type monitor. Edit as follows:

And apply the template once more:

Success! Terraform created the metric monitor and didn’t touch anything else. Every compares your template to the state of the same resources, if any, that Terraform knows it has managed previously. Since this is your first , Terraform couldn’t have modified any of your existing monitors (unless you had first imported them).

Terraform knows which resources fall within its purview by keeping its own copy of the state of the infrastructure it manages. Notice that your first created a new file . Terraform uses this file to know which resources in your templates map to which resources in reality. If you’ll be collaborating with teammates on your templates, you should store state in a remote backend rather than having each collaborator use his or her own local .

Check out the new monitor in Datadog:

If some of your hosts are busy right now (i.e. hovering above 60% system CPU usage), the new monitor may start flapping between OK and ALERT. You won’t get spammed with alerts, though, since we didn’t add a notification channel to the monitor’s message.

As mentioned earlier, Terraform operations are idempotent; if we immediately apply the same template, Terraform ought to read the attributes of the new monitor, see that they still match those specified in the template, and do nothing:

Now let’s add some optional fields to the monitor to illustrate how Terraform updates resources. It’s common to set tiered thresholds on metric monitors, so add some thresholds to the resource in a block-style field:

This time, let’s not be so quick to apply the change. We’re about to modify an existing resource, and that can be nerve-racking, especially in a production environment. Fortunately, Terraform allows you to plan changes and review them before making them live:

By now you’ve noticed that Terraform can be quite verbose in its output. Here, it warns us we’re not saving this plan with the parameter. We won’t get into the particulars of here, but if the no-guarantees disclaimer raises your eyebrow, read more about plans to understand how and why to use them.

Near the end of the output, we’re shown how Terraform will change the monitor if we run . It looks how we expect, so go ahead and apply the template to add the thresholds:

You’ll see the new thresholds in the monitor’s page in Datadog, of course, but let’s inspect the monitor with Terraform:

Here we see a full list of the monitor’s attributes, including those we didn’t set. They’ve been set to default values, but note that these defaults were applied by the Terraform provider, not by the Datadog API. For any optional fields missing from a resource declaration, Terraform inserts those fields—using its own defaults—into its request to the Datadog API, so be mindful that Terraform’s defaults may occasionally differ from the cloud providers’ defaults.

Before moving on to a more interesting example, let’s finish our tour of your first Terraform Datadog resource with the last CRUD operation, delete:

Any time you’re squeamish about destroying resources, first run .

Terraform’s value becomes especially obvious when you start to snap resources together, particularly those from different providers. You could have easily created the monitor in the previous section with dog, and you could further recruit awscli to provision the new resource below, but with Terraform, you can get it all done with one power tool.

Let’s create a alongside one of the most time-tested and popular resource types, . If you have an AWS account and don’t mind potentially spending a few cents, feel free to follow along. Otherwise, the example is still illuminating to read.

Wipe out the template from the previous section and start a new :

This time we are using a block, but to configure a region, not account credentials. You can provide AWS credentials in this block, too, or in environment variables as we did earlier for the Datadog provider. Terraform will examine the provider block and environment variables to find everything it needs to manage AWS resources. See the AWS provider reference to find the field names for credentials.

Our resource minimally provides an AMI ID and an instance size. Pick any AMI that’s available in your AWS account in us-west-2, preferably one that has the Datadog Agent pre-baked in. If you don’t have such an AMI handy, no problem, but if you’d like to actually test alerting for this instance later on, you’ll need to configure SSH access to it so you can install the Agent. See the reference for a full list of optional fields, including those related to SSH access ( and ).

Finally, although the above resembles the one from earlier, there’s a crucial difference here: it references an attribute from the . This is a powerful feature in Terraform. The attribute is called a computed attribute because AWS chose it for us. It’s an output of the instance resource, not an input, but once it’s known (i.e. once it’s been “computed”) it can become an input for any other resource. Since the references it, Terraform cannot create the monitor until the instance is done provisioning and its ID is known. Terraform implicitly orders the creation of all resources in your templates based on these resource-to-resource references (though you can also make resource ordering explicit by using the metaparameter with any resource). Resources that don’t depend on one another will be provisioned concurrently, each in its own Goroutine.

After you’ve set your AWS credentials, chosen an AMI, and optionally configured a security group and/or SSH key for the instance, apply the template:

Observe the instance’s ID within the and fields of the monitor. As intended, the monitor will only apply to this one host.

Before testing the new monitor, append an email address (e.g. “@you@example.com”) or other notification channel to the monitor’s field and apply again:

Finally, login to the instance and run any command that will fire up the CPU above 10% usage (e.g. while true; do lsof; done ). Brace yourself for an alert!

Don’t forget to clean up with a when you’re finished.

The previous examples, though simple, should give you an idea of what’s possible with Terraform. It’s capable of managing extremely large and complex infrastructure; it doesn’t matter how many instances, resource types, providers, or regions make up your environment. Datadog is an important piece of your environment, and now you can manage it alongside the rest of your cloud services with this increasingly adopted and thoughtfully designed devops tool.

The Datadog provider (and Terraform in general) is under very active development, but it doesn’t yet support everything the Datadog API exposes. If you’re a Gopher, we encourage you to contribute!

If you’re already a Datadog customer, you can start managing your alerts, timeboards, and more with Terraform today. Otherwise, you’re welcome to sign up for a free trial of Datadog.

Many thanks to Otto Jongerius for contributing the Datadog provider to Terraform, and to Seth Vargo from HashiCorp for providing feedback on a draft of this article.|||

You can manage your Datadog alerts, timeboards, and more with HashiCorp's Terraform.