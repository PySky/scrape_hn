The API Gateway provides an HTTPS endpoint that invokes a Lambda function when a request arrives.

The diagram was created with Cloudcraft - Visualize your cloud architecture like a pro.

As you can see, there is not much infrastructure to set up. To makes things even simpler, you will use the AWS Serverless Application Model (AWS SAM) to reduce the lines of your CloudFormation template to a minimum. All CloudFormation resource types that start with are transformed by SAM.

The serverless app infrastructure for the factorial app consists of two parts:

I will start with the Lambda function.

Create a file and describe the Lambda function that is invoked on requests.

Lambda dictates an interface that you have to follow. So far, the factorial app is based on and comes with its own web server. This is no longer needed. Instead, we can have a simpler entry point into the application. Create a file with the following content.

But how do you get notified if something goes wrong? Let’s add a parameter to the section to make the receiver configurable:

Alerts are triggered by a CloudWatch Alarm which can send an alert to an SNS topic. You can subscribe to this topic via an email address to receive the alerts. Let’s create an SNS topic and two alarms in the section:

Let’s recap what you implemented: A Lambda function that is connected to an API Gateway for requests. In the case of errors, you will receive an Email. All Lambda functions automatically save their logs in CloudWatch Logs.

Now, you can improve the API Gateway setup and add input validation.

An implicit API Gateway is created and configured automatically when using SAM. But if you want to validate the input on the API Gateway, you have to define the API Gateway explicitly to add the API specification in more details by using the open standard Swagger / OpenAPI Spec. Let’s do this in the section:

If you are familiar with Swagger / OpenApi Spec you will find nothing special besides the parameters which are API Gateway specific. You can also monitor the API Gateway. To do so, append the following section the section of your template:

You will now receive alerts via email if the API Gateway returns an HTTP status code. API Gateway can also save logs to CloudWatch Logs but SAM lacks support to enable logging at the moment.

Let’s add some outputs to the stack to make it easier to connect with the API Gateway later on.

Now you have a production ready Serverless infrastructure defined in CloudFormation with the help of SAM. It’s time to deploy the Serverless app.

The pipeline is based on the CI/CD Pipeline as Code part of this series. The pipeline so far stops when the application artifact (Zip file) is created. An acceptance test artifact is also created. What is missing?

This is how the pipeline looks from the beginning to the end:

In the EC2 and ECS examples, I used in the CodePipeline to create or update the CloudFormation stack. At this point, SAM works only if you use CloudFormation Change Sets. Therefore I have to switch from a single step to and in this example.

Copy the file to to get the starting point right. If you don’t have the file you can download it from https://github.com/widdix/aws-velocity.

The acceptance stage consists of a CloudFormation stack based on and the execution of the acceptance tests. To create the CloudFormation stack, you first have to provide a few parameters. Create a file with the following content:

Make sure to change the value of the parameter. Look at the and parameter value. This is the way of getting the artifact location in CodePipeline.

To run the acceptance tests, you need another CodeBuild project, add the following resources to the section of :

Now the CodeBuild project needs to be called in the pipeline, therefore change resource in the file to:

The acceptance stage is now ready.

The production stage is pretty simple, just one CloudFormation stack. Change the resource in the file to add a new stage that looks familiar to the acceptance stage:

Now the application is deployed to production with confidence and without disturbing the users. Try it and run the pipeline!

Let’s use my production-ready definition to summarize how each point is implemented:

If you now have the impression that deploying and running a Serverless app is easy you are right.

The AWS Velocity series is split into readable chunks. Subscribe to our RSS feed or newsletter to get notified when new articles become available.

You can find the source code on GitHub.|||

The API Gateway provides an HTTPS endpoint that invokes a Lambda function when a request arrives.

The diagram was created wi...