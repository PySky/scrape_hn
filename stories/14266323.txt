Over the past few months in the little spare time that I have, I've managed to submit a handful of pull requests to various .NET-related repositories (e.g. coreclr, corefx, docs, etc.) and incredibly, they were accepted.

Now, for some, this may not seem like a big deal. But it felt like a pretty big one to me so I thought I would take some time to elaborate on the process itself, share my experience, and hopefully dispel a few myths or misconceptions that you might have that may be holding you back from contributing to .NET as well.

Hopefully, you'll find that you don't need to be a genius or design a better sorting algorithm to make a meaningful contribution to .NET as a whole.

I'll openly admit that before browsing through the available dotnet repositories I was seriously intimidated, but without any real justified reasons. It seemed that I had built up quite a few myths surrounding the projects that were probably holding me back from contributing, such as:

These were just a few of the things that I had mentally told myself before embarking on this journey. What I quickly found out: none of these things were true.

Let's tackle each of them shall we?

All is the key word here.

There are a TON of 'up-for-grabs' issues available across all of the dotnet repositories. Some of these are serious challenges that require significant dedications of time, effort, talent, and thought. These feats aren't generally tackled alone, and undergo rounds of feedback and critique from both the .NET team and the community.

For each of those wizard-level problems, there are countless other housekeeping related ones that most developers could tackle. The best part about these, is that they usually only need a bit of elbow grease.

Let's take a glance on my first contribution to a .NET-related repository.

This wasn't an open issue, but one that I stumbled upon when reading through the docs one day. I noticed that several variables throughout the examples had the following format, which just looked odd:

This directly goes against the .NET Framework Coding Guidelines, which state that "the visibility modifier should always be the first modifier present". This meant I just needed to cull through the repository and find any other instances of this discrepancy and change the previous examples to :

I didn't have to invent a new algorithm, reduce any allocations, or anything. It's housekeeping, but it's something that needs to be done and does make a difference in the long run.

The entire process took place over a lunch break. I forked the repository, make the changes, submitted the PR, and it was merged all within a matter of hours. What a great feeling!

The low-hanging fruit is often the quickest to be picked, and GitHub issues are no exception.

A while back, it may have been tough to find an "easy" issue to get your feet wet before it was snatched up. This isn't really the case anymore as the .NET folks have created a simple way to find your first issue to work on: the 'easy' label.

If there's an issue that you want to work on, simply jump in and ask to be assigned to it, and then you can get started. The .NET team members are incredibly helpful at answering questions, and generally don't mind walking you through the process.

So if you want to contribute, consider going to one of the popular .NET-related repositories and searching for the following under the Issues area:

This will filter all of the available issues that are currently opened and designated as "beginner friendly" (i.e. they are both up for grabs and should be fairly easy):

The general rule of thumb has been to reserve many of these types of issues for first time contributors, so this is probably a great starting point if you want to dive in.

There are more and more added each day, but they do tend to go fast. So you may want to keep an eye out for something that piques your interest, and stake your claim when you get the chance.

If you have done anything related to open-source, you can probably skip this section as you already know what it feels like to have your code viewed by potentially hundreds of thousands of people a day.

If you don't, then you might be a little nervous. You might not be incredibly familiar with the process, the code base, or even things like git. Or you just might be afraid that people will judge and criticize your code to the point of embarrassment.

I know that's easy to say, but everyone that you will be working with throughout the process is there to help you (i.e. you are not going to be alone during this process).

Each of the major repositories has more documentation that you could imagine a wide range of topics such as:

In addition to these topics, the teams have been working hard on creating docs specifically tailored for new and first time contributors:

Overall, the documentation will vary depending on which repository you are in and they are probably better documented that most projects you may have worked on, so that should ease some of the tension.

Once you actually submit a PR, a team member will review your commits and provide any feedback, which I've found to be a fairly pleasant experience. You might have a few nits here and there with minor changes or the reviewer may offer alternative approaches or recommendations to solving the problem (this commonly occurs in areas involving performance).

In my personal experience, the team was always extremely quick to react, and I felt that we were always on the same page and working together as opposed to him simply critiquing my code.

Let's get this out of the way: some of these projects are huge, and likely way larger than most things that you have probably encountered before. As such, you are going to need to work with them a bit differently.

When I first forked projects like the coreclr and corefx, I will admit that they were a bit intimidating. Due to their sheer size and scale, they aren't terribly Visual Studio friendly, at least from a building and testing perspective. Thankfully, there is documentation available for how to go about building these tests within each of the repositories.

Basically, you'll need to become with running the available building and test scripts from the command line. After building the projects, you should be able to open them up and edit them using Visual Studio, but keep that command prompt open as you'll use it frequently.

Testing and debugging are also going to be done predominately from the command-line as Visual Studio's Test Explorer will melt if it tried to run all of these tests. Thankfully, there's extensive documentation for that as well.

Getting acclimated to this environment can probably be one of the largest learning curves in this entire process, but it's something that you'll only need to do once. Another thing worth noting is that due to the scale of these projects, building can be slow, so make sure you have something to do while you wait.

Hopefully, the dispelling of some of these myths have built your confidence up enough to consider making a contribution. If so, here's what you'll need to do:

My experiences with contributing to .NET have been nothing but stellar. It was great to have a chance to collaborate with members of the .NET team and the community towards improving the ecosystem, even in the smallest of ways. Simply knowing how a minor performance improvement that saves milliseconds here or there could save so much time on such a large scale is really rewarding.

I know that this experience certainly struck a chord with me, and in the weeks following my initial merged pull request, I've probably rattled off 10+ additional ones, and I look forward to contributing more in the future.

I hope that this post helped ease your mind if you thought that you wouldn't have anything to contribute, or that it would simply be beyond your skill-set or talent. There's something out there for everyone, so go out there and get that First-Time Contributor badge and help make .NET a better place.|||

