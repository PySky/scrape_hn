Blue Jay is a web toolkit for Go. It’s a collection of command-line tools and a web blueprint that allows you to easily structure your web application. There is no rigid framework to which you have to conform and the tools are easy to start using.

There are a few components:

Blueprint is a web application with a built-in web server and MySQL integration. The application has a public home page, authenticated home page, login page, register page, about page, and a simple notepad to demonstrate GET, POST, PATCH, and DELETE operations.

The entrypoint for the web app is blueprint.go which uses the boot package to load the application settings, create the session store, connect to the database, set up the views, load the routes, attach the middleware, and then start the web server.

The front end is built using Bootstrap with a few small changes to fonts and spacing. The flash messages are customized so they show up at the bottom right corner of the screen. All of the error and warning messages should display to the user or in the console. Informational messages are displayed to the user via flash messages that disappear after 4 seconds.

Blueprint also works well with npm and Gulp. A Gulp script is included that automates the compiling of SASS, concatenation of JavaScript, generation of favicons, and copying of static assets like Bootstrap and jQuery (which are managed by npm) to the asset/static folder.

Jay is a command-line tool that pairs nicely with Blueprint. It has find/replace functionality to make code refactoring is a little easier. It performs database migration to easily update your database when sharing code between teams. Jay provides template-based code generation that allows you to build files like controllers, models, middleware, or even multiple views. All templates (*.gen files) are parsed using the text/template package from the Go standard library and all generation instructions (*.json files) allow you to specify which variables to pass via Jay as well as in which folder to create the templates. You can also build collections of templates to generate more than one file set which is great when you want to scaffold out a component with CRUD (create, read, update, and delete).

There are also more detailed guides available by operating system:

After 300 stars on GitHub, I realized people really liked the boilerplate Model-View-Controller (MVC) web application in Go called gowebapp so I rewrote it with better documentation.

Go is a blast to code in and it’s great being part of a helpful community. Blue Jay provides a quickstart for developers with a lean web skeleton called Blueprint that demonstrates how to structure a web application with sample code.

One of the things you’ll notice while using Blueprint is how to abstract out external packages to make it easy to swap out components. Ultimately, you should be able to write code once and use it in all of your other projects. The lib folder is a great place for all these packages with very few dependencies.

You’ll also notice certain packages need to be thread-safe when building web applications. An example is the github.com/core/view package which provides thread-safe template caching.

The other reason for Blue Jay is the command-line tool, jay, which provides an easy way to find/replace in a project when refactoring, migrate your database forwards or backwards, and generate a file or sets or files using the Go html/template package. Code generation can help you build faster and more efficiently with less mistakes.

One of the big draws to Go is the rich standard library. The standard library includes a web server, web-safe templating, and many other tools necessary to build a web application. Any features missing from the standard library are written by other Go developers who are happy to contribute to the thriving community.

Go allows you to write code that compiles to the majority of the architectures we use today so all your code is pretty much portable. Go excels when you want to write command line apps instead of just scripts, but that’s not the only niche. The designers of Go wanted to build a language that solved problems between the Google development teams. It’s a modern language that allows you to easily multi-thread your applications. It’s a “get stuff done” language.

All feedback is welcome. Let me know if you have any suggestions, questions, or criticisms. If something is not idiomatic to Go, please let me know know so we can make it better.|||

Blue Jay is a toolkit written in Go for the web.