Dependently typed programming is becoming all the rage these days. Advocates are talking about all the neat stuff you can do by putting more and more information into the type system. It’s true! Type level programming gives you interesting new tools for designing software. You can guarantee safety properties, and in some cases, even gain performance optimizations through the use of these types.

I’m not going to try and sell you on these benefits – presumably you’ve read about something like the dependently typed neural networks, or about Idris’s encoding of network protocols in the type system. If you’re not convinced, then this isn’t the right article for you. If you are interested, and have some familiarity with Haskell, Elm, F#, or another ML-family language, then this article will be right up your alley.

So let’s talk about some basic types. I’m going to stick with the real basic types here: no primitives, just stuff we can define in one line in Haskell.

This code block defines two new types: and . The type has one constructor, called . Since there’s only one constructor for this type, and it takes no parameters, there is only one value of this type. We call it because there’s only one value.

is a type that has two constructors: and . These don’t take any parameters either, so they’re kind of like constants.

What does it mean to be a type? A type is a way of classifying things. Things – that’s a vague word. What do I mean by ‘things’?

Well, for these simple types above, we’ve already seen all their possible values – we can say that and are members of the type . Furthermore, , , and are not members of the type .

These types are kind of boring. Let’s look at another type:

This introduces a type with a single constructor that takes two arguments: one of which is an and the other is a . Values of this type look like:

looks a lot like a function. In fact, if we ask GHCi about it’s type, we get this back:

is a function accepting an and a and finally yeilding a value of type .

So we can construct values, and values have types. Can we construct types? And if so, what do they have?

Let’s hold onto our intuition about functions and values. A function with the type is saying:

Now, let’s lift that intuition into the type level. A value constructor accepts a value and yields a value. So a type constructor accepts a type and yields a type. Haskell’s type variables allow us to express this.

Here, we declare a type , with two data constructors: , which accepts a value of type , and , which does not accept any values at all. Let’s ask GHCi about the type of and !

So has that function type – and it looks like, whatever type of value we give it, it becomes a of that type. , however, can conjure up whatever type it wants, without needing a value at all. Let’s play with that a bit:

Woah – we get a type error when trying to compare with . That makes sense – only works on values that have the same type. But then, wait, why does not complain when compared with and ?

The reason is that really means:

So I’m seeing that we’re passing types to , in much the same way that we pass values to . Let’s ask GHCi about the type of !

Well, it turns out that types don’t have types (kind of, sort of). Types have kinds. We can ask GHCi about the kind of types with the command:

What is doing there? Well, is the kind of types which have values. Check this out:

So has the kind , which means:

Maybe you’ve heard about higher kinded polymorphism before. Let’s write a data type that demonstrates that this means:

Haskell’s kind inference is awfully kind on the fingers – since we use applied to , Haskell just knows that must have the kind . If we ask GHCi about the kind of , we get back:

So is a type that accepts a type of kind , and a type of kind , and returns a type of kind . In plain, verbose English, this reads as:

reminds me of regular expressions – “match anything.” Indeed, matches any type that has values, or even types that are only inhabited by the infinite loop:

We don’t provide any ways to construct a void value, yet it still has kind .

In the same way that you can productively program at the value level with dynamic types, you can productively program at the type level with dynamic kinds. And is basically that!

Let’s encode our first type level numbers. We’ll start with the Peano natural numbers, where numbers are inductively defined as either or the of some natural number.

But this is pretty unsatisfying. After all, there’s nothing that stops us from saying , which doesn’t make any sense. I’m pretty sold on the benefits of types for clarifying thinking and preventing errors, so abandoning the safety of types when I program my types just seems silly. In order to get that safety back, we need to introduce more kinds than merely . For this, we have to level up our GHC.

The extension allows us to promote data constructors into type constructors, which also promotes their type constructors into kind constructors. To promote something up a level, we prefix the name with an apostrophe, or tick: .

In plain Haskell, this definition introduces a new type with two value constructors, and (which takes a value of type ). With the extension, this also defines some extra new tidbits. We get a new kind , which exists in a separate namespace. And we get two new types: a type constant , which has the kind , and a type constructor , which accepts a type of kind . Let’s ask GHCi about our new buddies:

You might think: that looks familiar! And it should. After all, the types look very much the same!

Where it can be ambiguous, the is used to disambiguate. Otherwise, Haskell can infer which you mean.

It’s important to note that there are no values of type . The only kind that can have types that can have values is .

We’ve gained the ability to construct some pretty basic types and kinds. In order to actually use them, though, we need a bit more power.

You may be wondering, “What does GADT stand for?” Richard Eisenberg will tell you that they’re Generalized Algebraic Data Types, but that the terminology isn’t helpful, so just think of them as Gadts.

GADTs are a tool we can use to provide extra type information by matching on constructors. They use a slightly different syntax than normal Haskell data types. Let’s check out some simpler types that we’ll write with this syntax:

The GADT syntax lists the constructors line-by-line, and instead of providing the fields of the constructor, we provide the type signature of the constructor. This is an interesting change – I just wrote out . That suggests, to me, that I can make these whatever type I want.

This declaration creates a new type , which has the kind . It has two constructors: , which has the type , and , which has the type .

Since the constructors carry information about the resulting type, we get bonus information about the type when we pattern match on the constructors! Check this signature out:

Something really interesting is happening here! When we match on , we know that . That tilde is a symbol for type equality, and introduces a constraint that GHC needs to solve to type check the code. For this branch, we know that , so we can return an value.

We now have enough power in our toolbox to implement everyone’s favorite example of dependent types: length indexed vectors!

Length indexed vectors allow us to put the length of a list into the type system, which allows us to statically forbid out-of-bounds errors. We have a way to promote numbers into the type level using , and we have a way to provide bonus type information using . Let’s combine these two powers for this task.

I’ll split this definition up into multiple blocks, so I can walk through it easily.

We’re defining a type with kind . The first type parameter is the length index. The second type parameter is the type of values contained in the vector. Note that, in order to compile something with a kind signature, we need…

Thinking about types often requires us to think in a logical manner. We often need to consider things inductively when constructing them, and recursively when destructing them. What is the base case for a vector? It’s the empty vector, with a length of .

A value constructed by can have any type , but the length is always constrained to be .

The inductive case is adding another value to a vector. One more value means one more length.

The constructor takes two values: one of type , and another of type . We don’t know how long the provided is – it can be any such that is a ural number. We do know that the resulting vector is the essor of that umber, though.

So here’s the fully annotated and explicit definition:

Fortunately, Haskell can infer these things for us! Whether you use the above explicit definition or the below implicit definition is a matter of taste, aesthetics, style, and documentation.

Let’s now write a instance for these length indexed vectors. It’s pretty painless:

That type parameter is totally arbitrary, so we don’t have to worry about it too much.

As a nice exercise, let’s write . But wait, what is going to be? It needs to represent the addition of these two natural numbers. Addition is a function. And we don’t have type functions, right? Well, we do, but we have to upgrade our GHC again.

For some reason, functions that operate on types are called type families. There are two ways to write a type family: open, where anyone can add new cases, and closed, where all the cases are defined at once. We’ll mostly be dealing with closed type families here.

So let’s figure out how to add two ural numbers, at the type level. For starters, let’s figure out how to add at at the value level first.

This is the standard Haskell function definitions we all know and love. We can pattern match on values, write clauses with helpers, etc.

We’re working with an inductive definition of numbers, so we’ll need to use recursion get our answer. We need a base case, and then the inductive case. So lets start basic: if we add 0 to any number, then the answer is that number.

Well, we know we want to get to , so we want to somehow shrink our problem a bit. We’ll have to shift that from the left term to the right term. Then we can recurse on the addition.

If you imagine a natural number as a stack of plates, we can visualize the addition of two natural numbers as taking one plate off the top of the first stack, and putting it on top of the second. Eventually, we’ll use all of the plates – this leaves us with plates, and our final single stack of plates is the answer.

Alright, let’s promote this to the type level.

The first line of a type family definition is the signature:

This introduces a new type function which accepts two parameters. We can now define the individual cases. We can pattern match on type constructors, just like we can pattern match on value constructors. So we’ll write the case:

Next, we recurse on the inductive case:

Ahh, except now GHC is going to give us an error.

GHC is extremely scared of undecidability, and won’t do anything that it can’t easily figure out on it’s own. is an extension which allows you to say:

So now we get to add:

to our file. The type family definition compiles fine now. How can we test it out?

Where we used to inspect the kind of types, we can use to evaluate these types as far as GHC can. This snippet illustrates the difference:

The first line just tells us that the result of ing two ural numbers is itself a ural number. The second line shows the actual result of evaluating the type level function. Cool! So now we can finally finish writing .

Let’s start with some bad attempts, to see what the types buy us:

The error is kinda big and scary at first. Let’s dig into it a bit.

GHC is telling us that it can’t infer that (which is the length of the second parameter vector) is equal to . It knows that (the length of the first parameter) is because we’ve pattern matched on . So, what values can we return? Let’s replace the definition we have thus far with , reload in GHCi, and inspect some types:

We need to construct a value , and we have been given a value . BUT – we don’t know what is! So we have no way to spoof this or fake it. We have to return our input. So our first case is simply:

Like with addition of natural numbers, we’ll need to have the inductive case. Since we have the base case on our first parameter, we’ll want to try shrinking our first parameter in the recursive call.

So let’s try another bad implementation:

This doesn’t really do what we want, which we can verify in the REPL:

The answer should be . However, our Vector type only encodes the length of the vector in the type. The sequence is not considered. Anything that isn’t lifted into the type system doesn’t get any correctness guarantees.

And let’s reload in GHCi to test it out!

Oh no! A type error! GHC can’t figure out that is the same as . We can kinda see what went wrong if we lay the , and definitions next to each other:

In ’s inductive case, we are building up a bunch of s. In ’s recursive case, we’re tearing down the left hand side, such that the exterior is another . And in s recursive case, we’re building up the right hand side. Let’s trace how this error happens, and supply some type annotations as well:

Here, we know that has the type , and has the type . We need to produce a result of type in order for the type to line up right. We use . has a length value that is the essor of the result of , which should have the value , so the length there is . Unfortunately, our result type needs to be .

We know these values are equivalent. Unfortuantely, GHC cannot prove this, so it throws up it’s hands. Two definitions, which are provably equivalent, are structurally different, and this causes the types and proofs to fail. This is a HUGE gotcha in type level programming – the implementation details matter, a lot, and they leak, hard. We can fix this by using a slightly different definition of :

This definition has a similar structure of recursion – we pull the s out, which allows us to match the way that adds on top.

This new definition compiles and works fine.

Agreed, which is why I’ll defer the interested reader to this much better tutorial on length indexed vectors in Haskell. Instead, let’s look at some other more interesting and practical examples of type level programming.

Heterogenous lists are kind of like tuples, but they’re defined inductively. We keep a type level list of the contents of the heterogenous list, which let us operate safely on them.

To use ordinary Haskell lists at the type level, we need another extension:

which allows us to use operators at the type level.

The constructor has an empty list of values, which makes sense, because it doesn’t have any values! The construction operator takes a value of type , an that already has a list of types that it contains, and returns an where the first element in the type level list is followed by .

Let’s see what a value for this looks like:

So now we know that we have a , , and contained in this , and their respective indexes. What if we want to that?

Hmm. We’ll need to write a instance for . How should we approach this? Let’s try something dumb first. We’ll ignore all the contents!

Ahah! this compiles, and it even works!

Unfortunately, it’s not very useful. Can we do better? We can!

First, we’ll define the base case – showing an empty HList!

This causes a compile error, requiring that we enable yet another language extension:

If you’re doing this in another file than the type family above, you’ll also get an error about . It turns out that enabling implies for some reason. So let’s throw that one on too, for good measure:

This compiles, and we can finally and it works out. Now, we must recurse!

The principle of induction states that:

We’ve covered that base case. We’ll assume that we can handle the smaller cases, and demonstrate how to handle a slightly large case:

Write an instance for . It’ll be similar to the instance, but require a bit more stuff.

There are a few variants on extensible records in Haskell. Here’s a tiny implementation that requires yet more extensions:

This generalizes definitions for type variables, which allows for non-value type variables to have kind polymorphism. Type applications allow us to explicitly pass types as arguments using an symbol.

First, we must define the type of our fields, and then our record:

The parameter is going to be a type with the kind . is defined in , so we need that import to do the fun stuff.

We’ll construct a value using the syntax, so a record will look like:

So, this type checks fine! Cool. But it does not Show, so we need to define a instance.

Those string record fields only exist at the type level – but we can use the class to bring them back down to the type level using .

And, when we recurse, we need a tiny bit more information. Let’s start with the instance head first, so we know what variables we need:

OK, so we have a type, which has the kind , an , and . So now we pattern match on that bad boy:

OK, so we need to the value. Easy. Which means we need a constraint tacked onto our instance:

Next up, we need the key as a string. Which means we need to use , which takes a and returns the associated with the provided that is a .

At this point, you’re probably going to get an error like . This is because Haskell’s type variables have a very limited scope by default. When you write:

Haskell interprets each type signature as it’s own scope for the type variables. This means that the and variables in the helper function are different type variables, and a more precise way to write it would be:

If we want for type variables to have a scope similar to other variables, we need another extension:

Finally, we need to show the rest of the stuff!

This gives us a rather satisfying instance, now:

Write an Aeson instance for this type which converts into a JSON object.

Bonus points: Write an Aeson instance for the type.|||

Dependently typed programming is becoming all the rage these days.Advocates are talking about all the neat stuff you can do by putting more and more informat...