This document provides a not necessarily comprehensive list of security measures to be implemented when developing a Ruby on Rails application. It is designed to serve as a quick reference and minimize vulnerabilities caused by developer forgetfulness. It does not replace developer training on secure coding principles and how they can be applied.

Describing how each security vulnerability works is outside the scope of this document. Links to external resources containing further information are provided in the corresponding sections of the checklist. Please apply only the suggestions you thoroughly understand.

Please keep in mind that security is a moving target. New vulnerabilities and attack vectors are discovered every day. We suggest you try to keep up to date, for instance, by subscribing to security mailing lists related to the software and libraries you are using.

This checklist is meant to be a community-driven resource. Your contributions are welcome!

Disclaimer: This document does not cover all possible security vulnerabilities. The authors do not take any legal responsibility for the accuracy or completeness of the information herein.

This document focuses on Rails 4 and 5. Vulnerabilities that were present in earlier versions and fixed in Rails 4 are not included.

Injection attacks are #1 at the OWASP Top10.

Broken Authentication and Session Management are #2 at the OWASP Top 10.

Broken Authentication and Session Management are #2 at the OWASP Top 10.

XSS is #3 at the OWASP Top 10.

We may implement password strength validation in Devise by adding the following code to the model.

Add the following to

Add the following to controllers that do not require authorization. You may create a concern for DRY purposes.

Think of a blog-like news site where users with role have access to specific news categories, and users have access to all categories. The and the models have an HMT relationship. When creating a blog post, there is a select box for choosing a category. We want editors only to see their associated categories in the select box, but admins must see all categories. We could populate that select box with . However, we would have to associate all admin users with all categories (and update these associations every time a new category is created). A better approach is to use Pundit Scopes to determine which categories are visible to each user role and use the method when populating the select box.

Developers may forget to add one or more parameters that contain sensitive data to . Whitelists are usually safer than blacklists as they do not generate security vulnerabilities in case of developer forgetfulness. The following code converts into a whitelist.

Contributions are welcome. If you would like to correct an error or add new items to the checklist, feel free to create an issue and/or a PR. If you are interested in contributing regularly, drop me a line at the above e-mail to become a collaborator.|||

zen-rails-security-checklist - Checklist of security precautions for Ruby on Rails applications.