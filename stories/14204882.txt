This blog post turned from something exploratory into an NPM library. If you’d like to jump to the code on Github, click here. Otherwise, keep reading to see how the sausage was made.

The easy answer is, of course:

We see this naive heuristic reflected in this Yahoo answer, and this Math.SE post. But it can’t possibly be that easy. And it’s not. If we forget about country codes, a North American (± a few countries) phone number is broken up into three parts:

 $$\begin{array}{ccc}

 \underset{\text{Area code}}{\underbrace{ABC}} & \underset{\text{Exchange code}}{\underbrace{XYZ}} & \underset{\text{Station code}}{\underbrace{NNNN}}\end{array}$$

An area code \(ABC\) follows the following ruleset:

 $$\begin{array}{c}

 \begin{array}{cc}

 A=\{2\cdots9\} & AB

eq37\\

 B=\{0\cdots8\} & AB

eq96\\

 C=\{0\cdots9\} & BC

eq11\\

 & \vdots

 \end{array}\end{array}$$

As you can imagine, there are many more exceptions. Luckily, we can download a CSV from the NANPA (North American Numbering Plan Administration) and we can sort it by and . Essentially, these are the numbers that regular folks and businesses can get. All in all, according to NANPA, we are left with 417 area codes.

Compared to the area code, The exchange code \(XYZ\) follows a (slightly) simpler ruleset:

And finally, we have \(NNNN\) where \(N\) can be any digit, but, yet again, there are some exceptions:

Most sources list the possible numbers (\(XYZ–NNNN\)) in any valid area code to be:

But Wikipedia and everyone else is wrong. If we take into account the last two special cases of \(555–NNNN\), we are left with:

Finally, multiplying by the number of valid assignable area codes, we get:

 $$7,919,898\times 417 = 3, 302, 597, 466$$

And that was supposed to be my post. That’s it!

Huge number, some neat math, and hey, I even showed that Wikipedia was wrong. After I wrote this blog post, I started searching around to see exactly how phone validation libraries validate phone numbers. Obviously, phone validation is a pretty big deal. It may sting when a cute girl gives you a fake number after a night out, but it really sucks if you miss out on a lead when running a business. So who does it right? Granted, even though validation of North American phones is a bit complicated, it’s nothing an intermediate programmer couldn’t write in a couple of days.

Everyone seemed to point to what seems to be the de facto best library for phone number validation: Google’s libphonenumber. Surely, they must do it right. I even found an online tool where you can test phone numbers via libphonenumber. But, to my surprise, they get many wrong.

For example, the following phone numbers should not validate:

— but they do!

So I thought “Eyyy I bet I could write something up real quick…”

And fonz.js was born: an accurate phone validation library for Node.js that tries its best to abide by NANPA standards. International support is more complicated (and Google expertly supports it — although I’m not sure of its accuracy), but it’s a start!|||

