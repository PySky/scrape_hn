This sounds like a promise so many tried to tackle. A promise that comes from the limitations of one of the most brilliant pieces of software ever created.

The “electronic” spreadsheet was pioneered in the early 60's at Berkeley by Richard Mattessich with a “Budget Computer Program” on a mainframe, using the antiquated Fortran IV programming language (Spreadsheet: Its First Computerization). This program, and the research papers coming with, laid up the foundation to the first commercial spreadsheet software Visicalc.

In 1978, Dan Bricklin, an HBS student, created the first prototype of “an electronic blackboard and electronic chalk in a classroom.”. This version being quite limited, Bricklin recruited his friend Bob Frankston from MIT to improve the program. Later on, they will be joined by Daniel Fylstra, also an MIT/HBS graduate, but more “marketing oriented” (Visicalc : Information from its creators ).

Visicalc introduced realtime interactivity to spreadsheets, with instant recalculation based on formulas stored in the cells referencing other cells. And more importantly, ran on personal computers, and no more on mainframes or timeframe machines.

These two fundamentals changes made the spreadsheet the tool that allowed the personal computer revolution to take off. As Jean-Louis Gassée put it in his book The Third Apple :

And to quote Steve Jobs:

VisiCalc took off, successfully marketed by VisiCorp (led by Fylstra), while the development was handled by Software Arts (led by Bricklin and Frankston) .

The history then is quite known. Because at the time computer programs were considered as mathematical algorithm, patenting VisiCalc was problematic, the market was wide open.

In 1983, Software Arts and VisiCorp entered in a legal battle that distracted the two companies from what was happening around them.

Mitch Kapor founded Lotus and developed 1–2–3, released in 1983 for the IBM PC platform. It was the PC killer app, to counter Apple’s killer app, VisiCalc. “They’re looking for 1–2–3. Boy, are they looking for 1–2–3!” InfoWorld wrote.

1–2–3 was the software that transformed the revolution introduced by VisiCalc into a business. It was the single piece of software that installed a computer on every executive desk in the 80's ( and in the mean time, the decline of PA and secretary jobs ). It was easier to use than VisiCalc, and had charting, plotting and database features.

The same year, Microsoft introduced Excel on the Macintosh platform. Starting with the Mac, Excel had the advantage of the graphical user interface. But was fighting in a smaller market.

The first PC version of Excel happened in 1987, running on Windows 2.0. But it had to wait 1989 and Windows 3.0 to start being a major product, with no competition on Windows until 1992.

As Windows became ubiquitous in companies, so did Excel and MS Office.

The spreadsheet history is intimately linked to the raise of personal computing, and our beloved desktop computers. This is the history of pre-internet computing.

And despite the fact that Microsoft’s most brilliant developers are part of the Excel team, the DNA of spreadsheets software is intimately non connected.

Spreadsheets allowed the computer era. With their power and their flexibility, they became the ubiquitous tool to analyse, compute, manage numbers and data.

Excel is used by approximately 750 millions people worldwide.

It means that 750 millions people worldwide are sharing billions of Excel spreadsheets by email, updating them by copy paste, resending them.

According to infotron.nl, spreadsheets in companies have a life expectancy of 5 years, being used in average by 13 different users.

The programmers among you will immediately understand the inherent risks of this model.

If you add into the mix ( as demonstrated by R. Panko, What we know about spreadsheet errors ) the discrepancy between the level of expertise in Excel and the familiarity with Excel, users feel way more comfortable with Excel than they should be. And contrary to software development, there is no best practice, no Excel curriculum.

Also, according to Panko, more than 80% of firms rely on spreadsheets for reporting, budgeting, planning and others. Upon surveying spreadsheets, here is what was found:

Another problem with a file based system like Excel is the easy distribution of confidential information.

In the end what you have is an adhoc system that is :

- Central to most companies

- Highly flexible

- Extremely powerful

- Used by untrained people

- Thus highly error prone

- Distributed without control

This is the most basic usage. Aggregating, filtering, reformating a few thousand records, often exported from an IT system.

Excel is obviously not the best tool for it: its CSV support is always problematic. Its data reformatting tools are improving but far from ideal. Querying is limited.

But in fact few tools have the versatility that Excel has to tackle this problem.

To clean and reformat Data, tools like OpenRefine are complex to operate.

To analyse, software like Tableau are expensive and needs a database connection or an Excel file as input (oh, irony).

And to have advanced queries, or handle bigger quantity of data, nothing beats a database (like at least the sister app of Excel, Access).

In the end, because people know Excel, people use Excel. And .xlsx has become a standard data exchange file format.

Collecting historical data, forecasting, running What-if analysis, and taking decisions. This is one of the key use of spreadsheets, and often where spreadsheets are enormous beasts of calculations.

These spreadsheets, by their complexity, are deeply error prone. They need data updating from multiple sources, are filled with thousands of complex formulas.

Many horror stories you can see at the European Spreadsheet Risk Interest Group:

The familiarity with Excel, the lack of data synchronization and the complexity of auditing leads to costly mistakes.

This is maybe the most crucial albeit the most mundane use. This is what Excel is used for every day, the repetitive tasks that could be automated.

Examples of these use cases go from sales commission computation, pricing calculation, payroll, stocks, pricing, and so on.

These spreadsheets are not the most complex ones, but rely heavily on data updates and are highly manual.

They also are widely distributed.

These two factors make them the most vulnerable in day to day operations. An other example of horror story:

The central source of problem, as stated before, is the overconfidence of users with Excel. As spreadsheets are the everyday tool of the trade in modern companies, people are just too comfortable and not aware enough of mistakes.

This leads to the evangelization effort of some, mainly researchers, like Felienne Hermans, who are fighting to put in place software development best practice in place for spreadsheets : testing, auditing, documenting, and so on.

One of the most notable inputs of Felienne is to show that spreadsheets are not about data, but about computation and logic.

But most of the human interactions with the spreadsheets are data updating processes, especially for the workflow spreadsheet usage.

The more human are involved with spreadsheets, the more errors will appear.

The most radical solutions have been to kill Excel. Companies like Anaplan are working towards that. But they address only one kind of use of Excel (the analytics / planning). They are also new tools to learn, new way of working. They are not the lingua franca of business as is Excel. But they make sense : in front of the mass of data today’s companies are facing, no desktop software have the processing power to handle it.

If we put aside the database kind of use also (because of it being more about data exchange), we are now left with only one use : the workflow.

To solve Excel problems, as we start to guess, we need these three things :

- Making sure formulas are correct, and that they do not change. If they change, they need to be rechecked.

- Making sure the data are correct by removing human intervention in updating the data.

- Making sure that the distribution of the spreadsheet is controlled.

Excel already has some features for that. By tracing precedents and dependents, we can see what flows the data follow.

But these features are just a beginning.

As with software development, we must ensure :

- That the formulas are simple enough to be readable and auditable (style guide)

- We need to be able to have a global view of the spreadsheet and its dependencies (audit)

- We need to understand how a spreadsheet works (documentation)

- We need to track changes when the formulas change (version control).

Again, Felienne work has been quite interesting in this area, especially with Infotron. The auditing features seem quite powerful.

Another initiative is Spreadgit, that focuses on the version control of the flow.

Of course, Excel already integrates with data. With an ODBC connector. If you have a direct access to the database of the company. Which you haven’t.

There are connectors for softwares, like Salesforce, that usually are little add ons to Excel.

This already allows the update of the information locally, which is quite a big win.

But, by being add ons, it locks the spreadsheet furthermore locally. For my spreadsheet to be useful, I need all the people I work with to install this add-on.

And sometimes, there is just no add-on. Or I don’t have the access rights to the system I want.

But, anyway, we need direct connection between spreadsheets and data.

If we focus on the workflow usage, what are they?

Let’s say I want to calculate my software price for a client. I would go to my CRM to check my clients data, and copy paste some key figures into my Excel (how long has he been client, how much did he spend in the last 3 years by example, the size of his company). Then I will input on my Excel how many licenses of my products my client needs, the number of seats, and I will get a final price.

In the end, this spreadsheet is a function. I send the values x,y,z to my function, and I get a result back.

Now let’s imagine my salesforce could write data in my spreadsheet exactly in the cells I was pasting the data before, then trigger a recalculation of the spreadsheet and read the result from the according cell.

It would be great.

All my team could use it. No need for manual update of the data.

If my pricing scheme changes, I could just update the spreadsheet. Then the “system” would tell me the difference since last version, so I can make sure that there is no breaking change. That’s version control.

And imagine this systems works with REST Apis, so it connects with quite anything. Your E-commerce site that computes complex pricing à la jet.com . Your accounting software and your payroll for sales commissions. Your SAP for landed cost calculation. And so on.

By doing that, we don’t let users anymore tweak spreadsheets, as they are treated as code. A code that runs within the IT system of the company, cleanly separated from data, respecting IT best practices.

This model ensures :

- The correctness of formulas on updates

- The correctness of data

- The controlled distribution

Used with an auditing system, it would automate and solve most of Excel problems.

This system is now live. It’s called CalcFusion, and its goal is solving spreadsheet integration.|||

This sounds like a promise so many tried to tackle. A promise that comes from the limitations of one of the most brilliant pieces of software ever created. The “electronic” spreadsheet was pioneered…