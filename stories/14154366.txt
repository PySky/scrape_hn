Toolkit for , the browser API for making HTTP requests. Makes it practical and convenient to use.

Small (â‰ˆ250 LOC) and has no dependencies. Compatible with IE9+.

Most HTTP libraries make the same mistakes did:

JavaScript forces callbacks for asynchonous actions. This alone is bad enough. Multiple callbacks for one action borders on masochism. It causes people to invent "finally"-style callbacks just to hack around the fact they have branched prematurely. lets you have a single callback (see ). One continuation is better than many; it's never too late to branch!

Other libraries spread request results over multiple arguments (body, xhr etc.). bundles it all into a single value (see Result), which is convenient for further API adaptations. Adding a Promise-based or generator-based API becomes trivial.

Many libraries make another big mistake: losing a reference to the underlying object, hiding it behind callbacks or a promise. keeps you in control by never hiding the xhr object.

Finally, respects your laziness. It prepares an xhr object, adding a single, convenient method that starts the request. But it lets you "pull the trigger". Convenient for building advanced network utilities with queueing, deduplication etc.

is fundamentally broken because it gives you a promise instead of a reference to the HTTP task, hiding a rich, manageable reference behind ephemeral callbacks. As a result, it lacks such vital features as:

It has only one real advantage over : streaming the response instead of buffering it all in memory, but this is irrelevant for most uses, and will probably get bolted on some day.

This is a CommonJS-style package. It assumes you're using a package-oriented build system such as Webpack or browserify.

Highest-level API in this library. Takes configuration params and returns a fully prepared object, modified with additional properties and methods, listed below.

Note: the returned request is inert. You must call to attach the final callback(s) and to begin. Convenient for building lazy APIs.

Builds on and other utils.

Parsed version of the params passed to the constructor.

Adds to and returns the same instance. May be used multiple times, attaching several funs.

When the request ends for any reason, each callback attached via is called with one argument: the Result created with .

Note: there's no "success" or "failure" callbacks. You can branch based on the HTTP , the the request was stopped, or the shorthand which means and between 200 and 299.

Begins the request. Has no effect if it's already running. Returns the same instance.

Basis for . Takes params and a callback, and returns the instance, modified as described above.

is attached via . No other activity is scheduled, and it's up to to parse the result (default: ) and flush the attached via (default: ).

Useful when you need precise control over parsing the result or flushing the callbacks.

The configuration dict passed to must have the following structure.

This value is formed when the request ends and is passed to each callback.

automatically encodes and decodes some common formats, depending on method, request headers, and response headers.

If the method is read-only (GET, HEAD or OPTIONS) and the body is a plain dict, it's automatically formdata-encoded and appended to the URL as "search" after .

If the method is not read-only:

If the response headers specify a content type known to , such as JSON, or , it's automatically parsed into the corresponding data structure. Otherwise it's returned as a string.

Pay attention to your headers. You may want to write a tiny wrapper to add default headers to all your requests.

Internal utils used to implement and . Convenient if you want to assemble a slightly different version:

Parses , ensuring they're well-formed, and assigns them to as . The resulting params are used in other utils, and included as part of the eventual result.

Attaches to all four "final" methods of the xhr object: , , , . One and only one of them will eventually be called when the request is done. will receive an event telling it what happened.

is attached as-is, without automatic response parsing or forming a . This is useful if you have your own ideas what to do with the response.

Combines , , . See below. assigns this as the method.

Must be called after . Opens the request using the .

Must be called after . Sends the headers, previously included as part of .

Must be called after . Sends the body, previously encoded as part of .

assigns this as the method.

Aborts the request if is an object. Has no effect otherwise. Safe to use on non-xhr values such as . Returns .

Calls every function previously attached via , passing as and as the only argument. Useful with .

Takes an event passed to any event listener and parses it into a Result. Used inside . Use it when assembling your own custom version of .

Write your own adapter for a promise API:

Branch into if you want:|||

xhttp - Toolkit for XMLHttpRequest