Today we’ll be going through how to build a basic CRUD server-side application using Python and Flask, geared toward JavaScript developers versed in Node and Express. Similar to Express, Flask is a simple, yet powerful micro-framework for Python, perfect for RESTful APIs.

By the end of this tutorial, you should be able to…

Before we start, ensure that you have Python v3.6.1 installed.

Along with Python, we also need pip to install third-party packages from the Python Package Index (aka PyPI), the Python equivalent of npm. Fortunately, this comes pre-installed with all Python versions >= 3.4.

Next up, we’ll create an isolated virtual environment for installing Python packages specific to our individual project. It’s standard practice to set up a virtual environment for each project, otherwise there can be compatibility issues with different dependencies.

Next, we need to activate it:

You should now see in your prompt, indicating that the virtual environment is activated.

Now we can install Flask:

Now is a great time to add a .gitignore:

Finally, let’s add a main app file, which will handle routing and run our application, along with a file to setup our database schema:

For this tutorial, we will be using SQLite3 since it’s part of the Python standard library, requires little (if any) configuration, and is powerful enough for small to mid-size applications (e.g., the majority of web apps).

Start by creating a new database file in your project root:

You should see a file path to your database file, which is empty at the moment and ready for us to create a schema and data to. To create a schema, add the following code to models.py:

This will drop the songs table if it exists and put a new one in place with the schema we’ve defined here. If you have any issues with your database later on, or if you just want to start fresh, you can always run this script to recreate the database. Back in the terminal, exit SQLite and then run the script to create our table:

Let’s check if that actually worked:

Great! So, now that our database is set up correctly, we can move on to setting up our app’s route handlers. For this post, we won’t be going into database migrations but if you ever want to change the schema, you can use Flask-Migrate.

Let’s start with an overview of the routes, following RESTful principles:

But first, before creating any routes, add the following code to app.py:

Here we imported along with the main Flask application object, , which creates an instance of Flask in our application. The Flask application object acts as the central object, which we can use as a way of calling our view functions, adding our URL rules, template configuration and much more. With that instance we can run the application using the method. We also set the debug flag to so that the server live reloads when code changes and provides an interactive debugger when an exception is thrown.

Finally, it’s important to note that any imports must go at the top of our app.py file. These must come before anything else in order to be used later on in our file.

We imported , which handles, well, HTTP requests (no surprises there). Let’s look at each method, staring with a POST:

The first thing we need to do is add data to our database. Once we’ve done this, we can start building and testing the rest of our database/CRUD functions.

We can write a single function to handle this. Let’s place all helper functions underneath the routes, to keep things nicely separated:

Now we can just use this function in our route handler, passing the correct arguments from an incoming POST request:

So, we grabbed the values from the incoming form request, then called the function to add that song to the database, and, finally, returned the appropriate JSON response.

Make sure to add to the imports in order to send a JSON response back:

Ready to test? Start the server in one terminal window:

Now, in another window use CURL to send a POST request:

If all went well, you should see the follwing response, indicating that the song was added to the database:

Just to be on the safe side, let’s double-check that. Kill the server, then open a SQLite session from within your project directory:

Now run the following SQL query:

You should see:

Okay. We have officially added our first song! Add a couple more before moving on to reading data (GET). Don’t forget to run the Flask server before running the CURL commands!

We’ll start with our GET all route, e.g. - . We need to connect to the database, execute the appropriate SQL query, and then return all of the songs from that query:

Next up, we have to change our route handler to now call this function and then send back JSON:

Did you notice that we’re using the module? This is also from the Python standard library, which allows us to convert the ‘list’-like format of data we get back from SQLite3 into a JSON object. Just don’t forget to import it:

To test, we can simply navigate to http://127.0.0.1:5000/api/songs in the browser to check if all our songs are there.

You should see something like:

Now that we can GET all songs, let’s build a function to GET just a single song. This function will take a parameter of , create a connection to our database, find that song with a SQL query, and then return that song with JSON:

We can update our route with a as a parameter, and send back the single song:

If you now point your browser to http://127.0.0.1:5000/api/song/2 you should see the JSON object for our song with an id of in the database:

If you try to put in an id that we don’t have in the database currently, you will just get displayed on the page instead of a JSON object.

We can CREATE a song, READ all songs, and READ a single song. Only two more routes to go…

A major function that we’re missing is the ability to edit data that’s already present in our database. We do this using a PUT request by taking incoming data with an id passed through the URL, finding the object in our database with that particular id, and then updating it.

Let’s start with an edit function, which takes in the song id, artist, title, and rating as arguments:

Now we can edit our route to pass in the data from the PUT request:

So if we test this route out with CURL:

We should see:

We can (err, should) make sure that edit is reflected in the database:

We can edit songs at will!

The last thing we have left to do is our DELETE route. We need to be able to remove data from our database. Let’s first add in a song we can then delete using CURL in the terminal:

Make sure it’s in our database:

We need to build a delete function:

And now let’s add in our delete route:

And finally, go back into our database and really make sure it’s gone:

Boom! So we now have all of our routes doing exactly what we want them to do. We can add songs, get the songs back (all, or just a single song), edit a song, and remove a song. That’s some quality CRUD right there.

Grab the code from the flask-songs-api repo. Cheers!|||

Let's build a RESTful API with Python and Flask.