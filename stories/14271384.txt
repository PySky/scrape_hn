The hardest part was to bring the cable from the rear of the car to the dashboard. I had to remove a dozen plastic covers to cleanly route it along existing cables. But after a few hours it was cleanly installed, with a single video cable coming from the dashboard!

I found a camera online made exactly for my car. It replaces the cover of one of my plate lights. It’s powered by 12V, so I just had to hook it to the reversing light, so it would only turn on when I’m actually reversing. The outputted analog video was already mirrored and even had an overlay to guide me when parking.

But this meant that I would lose all the displayed information. The time, current radio station, outside temperature, etc…

I wanted to have the most OEM-like solution, so I decided to replace the stock monochrome display by a color LCD screen.

You can find aftermarket backup cameras online that you can put above your license plate, and they make them for many car models. However, you need to find a way to display it somewhere on the dashboard.

I always wanted a backup camera on my car. Unfortunately, my Peugeot 207 is more than 10 years old, and backup cameras weren’t common back then. Instead of buying a new car, I decided to build one myself!

While Peugeot sells the navigation system screen in spare parts, it costs more than 300€, and it seemed to have some kind of proprietary interface, so I had to find another way. I found a website which sells the screen enclosure without the screen for much cheaper. Then I could buy a 7" LCD screen off Amazon to put inside:

There is no way I could fit a big enough screen instead of the stock display. Fortunately, the Peugeot 207 is also available with a GPS navigation system which has a 7" color LCD screen instead of the one I have.

The screen has multiple inputs: HDMI, VGA and analog video. There is even a specific pin on the board to automatically switch to the analog video input, which is perfect for a backup camera. This will allow me to display the car’s informations via HDMI or VGA, and switch to the backup camera video feed when I switch to reverse gear. Next step: retrieving the car’s informations.

This is where the Arduino comes in. But how can I connect an Arduino to my car? The obvious candidate would be to use the OBD-II port. In Europe, car manufactured after 2004 are required to include it. It’s a standard port used to perform diagnostics and retrieve various informations about the car (like the battery voltage, oil temperature, …).

Sadly, it doesn’t return data about the current tuned FM station, or the trip computer’s informations (distance travelled, fuel estimate), at least not on my car.

After some digging, it turns out that every piece of electronic of my car is connected to a CAN bus. The CAN bus is present in most car nowadays because it allows to have much less cables than before. It requires only two cables and every node connected on it can talk to each other. Nodes send and receives frames with a numeric ID and up to 8 bytes of data.

As I expected, there is not much information online about my car’s CAN bus. The content of each frame is not publicly documented and probably unique to each brand of car, since this is not standardized like the OBD-II protocol. Luckily, I found the website of a university teacher who taught a course on CAN buses, and the students did practical work on… a Peugeot 207! This is perfect, as I could find valuable information in this PDF (in French).

It did not contain information on the frames I needed, but I learned that my car actually has 3 different CAN buses:

The bus I’m interested in is the first one, where the radio and the old display are connected.

I found an unused connector on the back of my radio unit. Apparently, its purpose is to connect an optional CD changer. But a quick search revealed that the connector has 2 pins exposing the “confort” bus. So I wired the Arduino to the radio using a CAN bus shield. And to my delight, I started receiving CAN frames!

At first, I tried printing every frame I could read on the bus. But I couldn’t make sense of anything because there was too much data being sent at the same time. It turns out, each node broadcast its status a few times every second, even if it didn’t change since the last time. So I made a Python script to have a better visualization of the frames:

The frames are ordered by ID. Being able to see bytes changing in real-time made it much easier to decode the frames:

However, some data was more difficult to find:

There is some data I still miss, such as the oil temperature (I have no gauge displaying it, so it’s almost impossible to reverse-engineer!)

Once I gathered all the informations I needed to replace my old display, I had to find a way to display it on the color LCD screen. The Arduino is not powerful enough to drive a 7" color screen, so I needed to find another way.

I’m an iOS developer, so I figured: why not use an iOS device? This is probably less cost-efficient than using a Raspberry Pi but it had a few advantages over it. Being a mobile device, it’s optimized for low power consumption, which will avoid draining my car’s battery too fast. It has Wi-Fi and Bluetooth built-in (the Pi 3 was not released yet when I began working on this project). It can also temporarily run on battery when the car is starting (the 12V power to all nonessential elements during ignition).

These problems could still have been solved with a Raspberry Pi, by adding dongles and a battery. But iOS devices already contains everything needed, in a small form factor. I was also more familiar with iOS development, and UIKit is notoriously great to build nice user interfaces!

So I went on Leboncoin (basically France’s Craigslist) and bought an old iPod Touch with a broken screen for around 20€. I did not care about the screen since I’d use it exclusively through the HDMI output.

But how could I make an iPod Touch and an Arduino talk to each other? Little known fact: the Dock connector on iOS devices has a serial interface! However, it wasn’t easy to make my own serial cable. I did not have a male connector with all the necessary pins. So I decided to solder wires directly on the iPod’s logic board:|||

I always wanted a backup camera on my car. Unfortunately, my Peugeot 207 is more than 10 years old, and backup cameras weren’t common back then. Instead of buying a new car, I decided to build one…