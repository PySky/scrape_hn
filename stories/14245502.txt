RxDB is made so that you can use exactly the same code at

We optimized, double-checked and made boilerplates so you can directly start to use RxDB with frameworks like

Leader-Election Imagine your website needs to get a piece of data from the server once every minute. To accomplish this task you create a websocket or pull-interval. If your user now opens the site in 5 tabs parallel, it will run the interval or create the socket 5 times. This is a waste of resources which can be solved by RxDB's LeaderElection. . () . (() { this will only run when the instance becomes leader. mySocket (); }); In this example the leader is marked with the crown â™›

Key-Compression Depending on which adapter and in which environment you use RxDB, client-side storage is limited in some way or the other. To save disc-space, RxDB has an internal schema-based key-compression to minimize the size of saved documents. when you save an object with big keys . ({ firstName lastName stupidLongKey }); RxDB will internally transform it to { } so instead of 46 chars, the compressed-version has only 28 the compression works internally, so you can of course still access values via the original key.names . ( . );

QueryChangeDetection Similar to Meteors oplog-observe-driver, RxDB has a QueryChangeDetection to optimize observed or reused queries. This makes sure that when you update/insert/remove documents, the query does not have to re-run over the whole database but the new results will be calculated from the events. This creates a huge performance-gain with zero cost. The QueryChangeDetection works internally and is currently in beta (disabled by default). Imagine you have a very big collection with many user-documents. At your page you want to display a toplist with users which have the most and are currently logged in. You create a query and subscribe to it. As you may detect, the query can take very long time to run, because you have thousands of users in the collection. When a user now loggs of, the whole query will re-run over the database which takes again very long. But not with the QueryChangeDetection enabled. Now, when one user loggs of, it will calculate the new results from the current results plus the RxChangeEvent. This often can be done in-memory without making IO-requests to the storage-engine. The QueryChangeDetection not only works on subscribed queries, but also when you do multiple 's on the same query.

All major evergreen browsers and IE11 are supported. Tests automatically run against Firefox and Chrome, and manually in a VirtualBox for IE11 and Edge.

As RxDB heavily relies on PouchDB, see their browser support for more information. Also do keep in mind that different browsers have different storage limits, especially on mobile devices.

Get started now by reading the docs or exploring the example-projects.

Check out how you can contribute to this project.

A big Thank you to every patreon-supporter and every contributor of this project.|||

rxdb - :computer: :iphone: Client-Side Database for Browsers, NodeJS, electron, cordova, react-native and every other javascript-runtime :heavy_exclamation_mark: