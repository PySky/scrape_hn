It is highly recommended that you at least briefly skim through the chapters Integration and Usage before starting.

The quickest way to get started is to download ProgramOptions.hxx as well as one of the samples and go from there.

The default choice. Using ProgramOptions.hxx incorrectly or failing to meet a function's preconditions will throw an exception which will, by default, terminate the program and display a useful message, explaining where exactly things went wrong. If you don't want the program to be terminated, you may provide your own and blocks to deal with s.

Using this sample is only recommended if you are already somewhat familiar with ProgramOptions.hxx. Incorrect programs will crash without any messages unless your STL implementation does so when ions fail.

ProgramOptions.hxx adheres to the following rules:

1 Note that (with only a single hyphen) would be interpreted as the option with the argument .

ProgramOptions.hxx is very easy to integrate. After downloading the header file, all that it takes is a simple:

Don't forget to compile with C++11 enabled, i.e. with .

Using ProgramOptions.hxx is straightforward; we'll explain it by means of examples. All examples shown here and more can be found in the directory, all of which are well-documented.

The following snippet is the complete source code for a simple program expecting an integer optimization level.

Let's expand on the previous code. We want it to assume a certain value for the option even if the user sets none. This can be achieved through the method. After parsing, the method tells us whether the option was actually set by the user or fell back on the default value.

Furthermore, we want to implement the option to let the user specify include paths. Paths should not be converted to any arithmetic type so we simply set the type to .

By calling the method we're telling the library to store all values, not just the last one. The number of arguments can be retrieved by calling the or the method. The individual values may be read by means of the iterators returned by and . Bear in mind that these iterators point to instances of s, so you still need to refer to the member . One way of avoiding this is to directly use the iterators provided by and . These random-access iterators behave as if they pointed to instances of s. For more information, refer to Example 4.

# # ( argc, ** argv ) { po::parser parser; parser[ ] . ( ) . ( po::u32 ) . ( ); if --optimization is not explicitly specified, assume 0 parser[ ] . ( ) . ( po::string ) . (); allows multiple arguments for the same option ( argc, argv ); && O = parser[ ]; .was_set() reports whether the option was specified by the user or relied on the predefined fallback value. std::cout << << ( O. () ? : ) << << O. (). << ; && I = parser[ ]; .size() and .count() return the number of given arguments. Without .multi(), their return value is always <= 1. std::cout << << I. () << ; Here, the non-template .begin() / .end() methods were used. Their value type is po::value, which is not a value in itself but contains the desired values as members, i.e. i.string. ( && i : I ) std::cout << << i. << ; }

Up until now, we were missing the infamous command. While ProgramOptions.hxx will take over the tedious work of neatly formatting and displaying the options, it doesn't add a command automatically. That's up to us and so is adding an apt description for every available option. We may do so by use of the method.

But how do we accomplish printing the options whenever there's a command? This is where callbacks come into play. Callbacks are functions that we supply to ProgramOptions.hxx to call. After we handed them over, we don't need to worry about invoking them as that's entirely ProgramOptions.hxx' job. In the code below, we pass a lambda whose sole purpose is to print the options. Whenever the corresponding option occurs ( in this case), the callback is invoked.

The unnamed parameter is used to process non-option arguments. Consider the command line: Here, unlike , and do not belong to an option and neither do they start with a hyphen. They are non-option arguments but they are important nevertheless. In ProgramOptions.hxx, you treat the unnamed parameter like any other option. They only differ in their default settings.

Note that, in order to pass arguments starting with a hyphen to the unnamed parameter, you'll have to pass first, signifying that all further arguments are non-option arguments and that they should be passed right to the unnamed parameter without attempting to interpret them.

# # ( argc, ** argv ) { po::parser parser; parser[ ] . ( ) . ( ) . ( po::u32 ) . ( ); parser[ ] . ( ) . ( ) . ( po::string ) . (); parser[ ] . ( ) . ( ) . ( [ & ]{ std::cout << parser << ; } ); callbacks get invoked when the option occurs parser[ ] the unnamed parameter is used for non-option arguments, i.e. gcc a.c b.c . ( [ & ]( std::string & x ){ std::cout << << x << ; } ); as .get_type() == po::string, the callback may take a std::string parsing returns false if at least one error has occurred ( ! ( argc, argv ) ) { std::cerr << ; - ; } we don't want to print anything else if the help screen has been displayed ( parser[ ]. () ) ; std::cout << << parser[ ]. () << ; && O = parser[ ]; std::cout << << ( O. () ? : ) << << O. (). << ; && I = parser[ ]; std::cout << << I. () << ; ( && i : I ) std::cout << << i. << ; }

How the help screen appears:

In this example, we will employ already known mechanics but lay the focus on their versatility.

This small table helps clarifying the defaults for the different kinds of options.

All flags have to be d before including ProgramOptions.hxx. Different translation units may include ProgramOptions.hxx using different flags.

Suppresses all communication via . Without this flag, ProgramOptions.hxx notifies the user in case of warnings or errors occurring while parsing. For instance, if an option requires an argument of type and it couldn't be parsed or wasn't provided at all, ProgramOptions.hxx would print a warning that the option must have an argument and that it hence was ignored.

Disables all exceptions and thus allows compilation with . However, incorrect use of the library and unmet preconditions entail via . This flag is implied by .

This flag must not vary across different translation units in order to not violate C++' one definition rule (ODR).

Disables all runtime checks and all exceptions. Incorrect use of the library and unmet preconditions will lead to undefined behaviour. Implies .

This flag must not vary across different translation units in order to not violate C++' one definition rule (ODR).

Disables colored output. On Windows, ProgramOptions.hxx uses the WinAPI (i.e. ) to achieve colored console output whereas it uses ANSI escape codes anywhere else.

This flag must not vary across different translation units in order to not violate C++' one definition rule (ODR).

ProgramOptions.hxx is licensed under the MIT License. See the enclosed LICENSE.txt for more information.|||

ProgramOptions.hxx - Single-header program options parsing library for C++11