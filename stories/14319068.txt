HTTPie (pronounced aitch-tee-tee-pie) is a command line HTTP client. Its goal is to make CLI interaction with web services as human-friendly as possible. It provides a simple command that allows for sending arbitrary HTTP requests using a simple and natural syntax, and displays colorized output. HTTPie can be used for testing, debugging, and generally interacting with HTTP servers.

On macOS, HTTPie can be installed via Homebrew (recommended):

A MacPorts port is also available:

Most Linux distributions provide a package that can be installed using the system package manager, for example:

A universal installation method (that works on Windows, Mac OS X, Linux, …, and always provides the latest version) is to use pip:

Although Python 2.6 and 2.7 are supported as well, it is recommended to install HTTPie against the latest Python 3.x whenever possible. That will ensure that some of the newer HTTP features, such as SNI (Server Name Indication), work out of the box. Python 3 is the default for Homebrew installations starting with version 0.9.4. To see which version HTTPie uses, run .

You can also instead of the latest the latest unreleased development version directly from the branch on GitHub. It is a work-in-progress of a future stable release so the experience might be not as smooth.

On macOS you can install it with Homebrew:

Verify that now we have the current development version identifier with the suffix, for example:

See the request that is being sent using one of the output options:

Use Github API to post a comment on an issue with authentication:

Download a file and save it via redirected output:

Use named sessions to make certain aspects or the communication persistent between requests to the same host:

The name of the HTTP method comes right before the URL argument:

Which looks similar to the actual that is sent:

When the argument is omitted from the command, HTTPie defaults to either (with no request data) or (with request data).

The only information HTTPie needs to perform a request is a URL. The default scheme is, somewhat unsurprisingly, , and can be omitted from the argument – works just fine.

If you find yourself manually constructing URLs with querystring parameters on the terminal, you may appreciate the syntax for appending URL parameters. With that, you don't have to worry about escaping the separators for your shell. Also, special characters in parameter values, will also automatically escaped (HTTPie otherwise expects the URL to be already escaped). To search for on Google Images you could use this command:

Additionally, curl-like shorthand for localhost is supported. This means that, for example would expand to If the port is omitted, then port 80 is assumed.

You can use the option to create shortcuts for other protocols than HTTP:

There are a few different request item types that provide a convenient mechanism for specifying HTTP headers, simple JSON and form data, files, and URL parameters.

They are key/value pairs specified after the URL. All have in common that they become part of the actual request that is sent and that their type is distinguished only by the separator used: , , , , , , and . The ones with an expect a file path as value.

Note that data fields aren't the only way to specify request data: Redirected input is a mechanism for passing arbitrary data request request.

You can use to escape characters that shouldn't be used as separators (or parts thereof). For instance, will become a data key/value pair ( and ) instead of a URL parameter.

Often it is necessary to quote the values, e.g. .

If any of the field names or headers starts with a minus (e.g., ), you need to place all such items after the special token to prevent confusion with :

JSON is the lingua franca of modern web services and it is also the implicit content type HTTPie by default uses.

If your command includes some data request items, they are serialized as a JSON object by default. HTTPie also automatically sets the following headers, both of which can be overwritten:

You can use to explicitly set to regardless of whether you are sending data (it's a shortcut for setting the header via the usual header notation: ). Additionally, HTTPie will try to detect JSON responses even when the is incorrectly or unknown.

Non-string fields use the separator, which allows you to embed raw JSON into the resulting object. Text and raw JSON files can also be embedded into fields using and :

Please note that with this syntax the command gets unwieldy when sending complex data. In that case it's always better to use redirected input:

Submitting forms is very similar to sending JSON requests. Often the only difference is in adding the option, which ensures that data fields are serialized as, and is set to, . It is possible to make form data the implicit content type instead of JSON via the config file.

If one or more file fields is present, the serialization and content type is :

The request above is the same as if the following HTML form were submitted:

Note that is used to simulate a file upload form field, whereas just embeds the file content as a regular text field value.

To set custom headers you can use the notation:

There are a couple of default headers that HTTPie sets:

Any of those—except for —can be overwritten and some of them unset.

To unset a previously specified header (such a one of the default headers), use :

To send a header with an empty value, use :

The currently supported authentication schemes are Basic and Digest (see auth plugins for more). There are two flags that control authentication:

Authorization information from your file is honored as well:

Additional authentication mechanism can be installed as plugins. They can be found on the Python Package Index. Here's a few picks:

By default, HTTP redirects are not followed and only the first response is shown:

To instruct HTTPie to follow the header of responses and show the final response instead, use the option:

If you additionally wish to see the intermediary requests/responses, then use the option as well:

To change the default limit of maximum redirects, use the option:

You can specify proxies to be used through the argument for each protocol (which is included in the value in case of redirects across protocols):

You can also configure proxies by environment variables and , and the underlying Requests library will pick them up as well. If you want to disable proxies configured through the environment variables for certain hosts, you can specify them in .

Homebrew-installed HTTPie comes with SOCKS proxy support out of the box. To enable SOCKS proxy support for non-Homebrew installations, you'll need to install manually using :

Usage is the same as for other types of proxies:

To skip the host's SSL certificate verification, you can pass (default is ):

You can also use to set a custom CA bundle path:

To use a client side certificate for the SSL communication, you can pass the path of the cert file with :

If the private key is not contained in the cert file you may pass the path of the key file with :

Use the to specify the desired protocol version to use. This will default to SSL v2.3 which will negotiate the highest protocol that both the server and your installation of OpenSSL support. The available protocols are , , , , . (The actually available set of protocols may vary depending on your OpenSSL installation.)

If you use HTTPie with Python version lower than 2.7.9 (can be verified with ) and need to talk to servers that use SNI (Server Name Indication) you need to install some additional dependencies:

You can use the following command to test SNI support:

By default, HTTPie only outputs the final response and the whole response message is printed (headers as well as the body). You can control what should be printed via several options:

can often be useful for debugging the request and generating documentation examples:

All the other output options are under the hood just shortcuts for the more powerful . It accepts a string of characters each of which represents a specific part of the HTTP exchange:

To see all the HTTP communication, i.e. the final request/response as well as any possible intermediary requests/responses, use the option. The intermediary HTTP communication include followed redirects (with ), the first unauthorized request when HTTP digest authentication is used ( ), etc.

The intermediary requests/response are by default formatted according to (and its shortcuts described above). If you'd like to change that, use the option. It takes the same arguments as but applies to the intermediary requests only.

As an optimization, the response body is downloaded from the server only if it's part of the output. This is similar to performing a request, except that it applies to any HTTP method you use.

Let's say that there is an API that returns the whole resource when it is updated, but you are only interested in the response headers to see the status code after an update:

Since we are only printing the HTTP headers here, the connection to the server is closed as soon as all the response headers have been received. Therefore, bandwidth and time isn't wasted downloading the body which you don't care about. The response headers are downloaded always, even if they are not part of the output

The universal method for passing request data is through redirected (standard input)—piping. Such data is buffered and then with no further processing used as the request body. There are multiple useful ways to use piping:

Or the output of another program:

You can use for simple data:

You can even pipe web services together using HTTPie:

You can use to enter multiline data on the terminal:

On OS X, you can send the contents of the clipboard with :

Passing data through cannot be combined with data fields specified on the command line:

To prevent HTTPie from reading data you can use the option.

An alternative to redirected is specifying a filename (as ) whose content is used as if it came from .

It has the advantage that the header is automatically set to the appropriate value based on the filename extension. For example, the following request sends the verbatim contents of that XML file with :

HTTPie does several things by default in order to make its terminal output easy to read.

Syntax highlighting is applied to HTTP headers and bodies (where it makes sense). You can choose your preferred color scheme via the option if you don't like the default one (see for the possible values).

Also, the following formatting is applied:

One of these options can be used to control output processing:

Binary data is suppressed for terminal output, which makes it safe to perform requests to URLs that send back binary data. Binary data is suppressed also in redirected, but prettified output. The connection is closed as soon as we know that the response body is binary,

You will nearly instantly see something like this:

HTTPie uses a different set of defaults for redirected output than for terminal output. The differences being:

The reason is to make piping HTTPie's output to another programs and downloading files work with no extra flags. Most of the time, only the raw response body is of an interest when the output is redirected.

Download an image of Octocat, resize it using ImageMagick, upload it elsewhere:

Force colorizing and formatting, and show both the request and the response in pager:

You can create a shortcut for invoking HTTPie with colorized and paged output by adding the following to your :

HTTPie features a download mode in which it acts similarly to .

When enabled using the flag, response headers are printed to the terminal ( ), and a progress bar is shown while the response body is being saved to a file.

If not provided via , the output filename will be determined from (if available), or from the URL and . If the guessed filename already exists, HTTPie adds a unique suffix to it.

You can also redirect the response body to another program while the response headers and progress are still shown in the terminal:

If is specified, you can resume a partial download using the option. This only works with servers that support requests and responses. If the server doesn't support that, the whole file will simply be downloaded:

Responses are downloaded and printed in chunks which allows for streaming and large file downloads without using too much memory. However, when colors and formatting is applied, the whole response is buffered and only then processed at once.

You can use the flag to make two things happen:

By default, every request HTTPie makes is completely independent of any previous ones to the same host.

However, HTTPie also supports persistent sessions via the option. In a session, custom headers—except for the ones starting with or —, authorization, and cookies (manually specified or sent by the server) persist between requests to the same host.

All session data, including credentials, cookie data, and custom headers are stored in plain text. That means session files can also be created and edited manually in a text editor—they are regular JSON.

You can create one or more named session per host. For example, this is how you can create a new session named for :

From now on, you can refer to the session by its name. When you choose to use the session again, any the previously used authorization and HTTP headers will automatically be set:

To create or reuse a different session, simple specify a different name:

Named sessions' data is stored in JSON files in the directory ( on Windows).

Instead of a name, you can also directly specify a path to a session file. This allows for sessions to be re-used across multiple hosts:

To use an existing session file without updating it from the request/response exchange once it is created, specify the session name via instead.

The default location of the configuration file is (or on Windows). The config directory location can be changed by setting the environment variable. To view the exact location run .

The JSON file contains an object with the following keys:

An (by default empty) of default options that should be applied to every invocation of HTTPie.

For instance, you can use this option to change the default style and output options: Another useful default option could be to make HTTPie always use sessions (one named will automatically be used). Or you could change the implicit request content type from JSON to form by adding to the list.

HTTPie automatically stores some of its metadata here. Please do not change.

Default options from the config file, or specified any other way, can be unset for a particular invocation via arguments passed on the command line (e.g., or ).

When using HTTPie from shell scripts, it can be handy to set the flag. It instructs HTTPie to exit with an error if the HTTP status is one of , , or . The exit status will be (unless is set), , or , respectively.

The default behaviour of automatically reading is typically not desirable during non-interactive invocations. You most likely want use the option to disable it.

It is a common gotcha that without this option HTTPie seemingly hangs. What happens is that when HTTPie is invoked for example from a cron job, is not connected to a terminal. Therefore, rules for redirected input apply, i.e., HTTPie starts to read it expecting that the request body will be passed through. And since there's no data nor , it will be stuck. So unless you're piping some data to HTTPie, this flag should be used in scripts.

Also, it's might be good to override the default second to something that suits you.

The syntax of the command arguments closely corresponds to the actual HTTP requests sent over the wire. It has the advantage that it's easy to remember and read. It is often possible to translate an HTTP request to an HTTPie argument list just by inlining the request elements. For example, compare this HTTP request:

with the HTTPie command that sends it:

Notice that both the order of elements and the syntax is very similar, and that only a small portion of the command is used to control HTTPie and doesn't directly correspond to any part of the request (here it's only asking HTTPie to send a form request).

The two modes, (default for terminal) and (default for redirected output), allow for both user-friendly interactive use and usage from scripts, where HTTPie serves as a generic HTTP client.

As HTTPie is still under heavy development, the existing command line syntax and some of the may change slightly before HTTPie reaches its final version . All changes are recorded in the change log.

Please use the following support channels:

Under the hood, HTTPie uses these two amazing libraries:

HTTPie plays exceptionally well with the following tools:

Jakub Roztocil (@jakubroztocil) created HTTPie and these fine people have contributed.|||

Modern command line HTTP client – user-friendly curl alternative with intuitive UI, JSON support, syntax highlighting, wget-like downloads, extensions, etc.  https://httpie.org