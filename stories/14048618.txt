As a software developer, especially one with little experience, it’s very easy to get confused about what you should do and what you shouldn’t do.

There are tons of articles, written by way more experienced developers telling you which software development practice is an absolute taboo and which isn’t.

Some will tell you that TDD is the holy grail of software development and if you don’t write tests before you actually start writing the functionality of your application, you can’t possibly be a good developer.

What people fail to mention is that a lot of practices (including not writing tests) are only beneficial in certain situations. I’ll try to illustrate this with some examples;

Anyway, back to writing tests. I always felt like writing tests was a waste of time. I used to think “How can it make sense to write code that checks if your other code is working? That’s more potentially buggy code right there”.

And I used to feel bad sometimes, because I didn’t get it. Why did all the ninjas I admired feel like writing tests was the one true path to code Valhalla?

Well, in the end, as usual, the answer to the questions; “Should you write tests?”, “How should you write tests?”, “What should you test?” are very nuanced and dependent on exact use case.

Sometime last year I met Kent Beck and I asked him pretty much those questions. Kent told me that in the end, nobody pays for tests, they’re only necessary where you deem it so to give you a certain level of confidence about certain bits of code. And that there’ll always be a trade off between time and number of tests.

What does all that mean?

Bottomline, there are no definite answers. It depends on you and the situation(s) surrounding each project and any time t.

In the end, what we need to realize is that nobody pays for tests, they’re not the final product, they’re a means to an end.

Now I write tests when I feel like I should not as a rule — which is honestly A LOT more these days, but that’s because my inner software checklist has changed over time, my process has evolved and etc.

So go out there, and make software that works, however best you know how to.|||

As a software developer, especially one with little experience, it’s very easy to get confused about what you should do and what you shouldn’t do. There are tons of articles, written by way more…