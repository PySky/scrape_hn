Here is the minimal markup you need to put in your pages:

As you can see, you just have to include the pocketgrid.css (or pocketgrid.min.css) file in the tag of your page

 and don't forget to set the viewport meta tag to manage media queries correctly on mobile.

That's all you need to work with PocketGrid!

Instead of creating grids with rows and columns, PocketGrid introduces a more flexible concept with blocks and block groups.

 Block groups are similar to rows, and blocks are similar to columns.

 The main difference is that a block group can represent several rows (thanks to the "automatic rows" feature that we will see later), allowing much more flexibility than traditional grids.

The basic rules with PocketGrid are:

Creating rows and columns: the classical way... ) and columns (using ).

 Here you can see a demo with a grid containing 3 rows with various column sizes (the source code is just after the demo):

 All the examples displayed in a "Demo" frame are real examples displayed in an iframe (no fake image).

 You can open each example alone in a new tab clicking on the "Open in a new tab" orange button at the top right side of the frame below. Like most CSS grid systems, PocketGrid can create rows (using) and columns (using).Here you can see a demo with a grid containing 3 rows with various column sizes (the source code is just after the demo):

Creating rows and columns: the COOL way! Thanks to PocketGrid, we can take advantage of the "automatic rows" feature!

 Thus, instead of creating a block-group for each row, we can create just 1 block-group containing all our blocks!

 Then, according to the width of blocks, blocks will automatically go to a new line when a row is full: automatic rows" feature more flexible: In the HTML, you just define blocks in a block-group, no matter if they are on the same row or not. In the CSS, you set the block widths, and according to the block widths, the blocks will be displayed on the same row (or not). It's compatible with Media Queries: you can set different widths for each block according to the device (smartphone, tablet, desktop, TV...)

 For example, blocks could be stacked on mobile, side by side on desktop, and an hybrid version on tablets: it's just CSS configuration!

 That's what makes PocketGrid so flexible and powerful! To sum up what makes the "" feature more flexible: different heights, the "automatic rows" layout could seem broken, but it's not: this problem and its solution will be explained later ( If your blocks have, the "automatic rows" layout could seem broken, but it's not: this problem and its solution will be explained later ( see "Automatic rows in real life!" ).

Usually, a mobile layout consists of blocks (header, navigation, main content, links, footer...) vertically stacked.

 This kind of layout is very simple with PocketGrid: you just have to put all your blocks in a block-group, without any CSS configuration (because the default width of blocks is 100%, and blocks automatically go to a new row after 100%, so blocks are stacked by default): /* Nothing in the CSS! */



 For example, we want to have this behaviour:

 All blocks are stacked on mobile The navigation and main blocks are side by side on tablet (width > 768px) The navigation, main and links blocks are side by side on desktop (width > 960px) Resize your browser and see the layout changes in the preview below: You should click on the "Open in a new tab" orange button to play with this example more easily. Now let's make this example responsive!For example, we want to have this behaviour:Resize your browser and see the layout changes in the preview below:



 We will change the number of columns of our grid according to the device width.

 Keeping our previous nested grids example, we will display the nested items in 2 columns on mobile, 4 columns on tablet and 5 columns on desktop!

 Resize your browser and see the layout changes in the preview below. You should click on the "Open in a new tab" orange button to play with this example more easily. Now we are going to do something impossible to do with most CSS grid systems! (such as Twitter Bootstrap)We will change the number of columns of our grid according to the device width.Keeping our previous nested grids example, we will display the nested items in 2 columns on mobile, 4 columns on tablet and 5 columns on desktop!Resize your browser and see the layout changes in the preview below. .nav { } .main { } .item { } /* Tablet version: items are displayed in 4 columns (25% each) */ { .item { } } /* Desktop version: items are displayed in 5 columns (20% each) */ { .item { } }

You can add offsets to blocks (to simulate empty columns for example).

 To do so, you just have to set the margin-left or margin-right properties of a block to the size of one or more columns.

 For example, here the "Left offset" block has a left offset of 1 column ( ) and the "Right offset" block has a left offset of 2 column ( ) .b1, .b2, .b3, .b4, .b5, .b6, .b7, .b8, .b9, .b10, .b11, .b12 { } /* Left just give the margin-left the size you want ! , you have to put "!important" also. */ .b3 { !important; } /* Right just give the margin-right the size you want ! */ .b11 { !important; } /* Some styles for better readability */ .b3 .box { } .b11 .box { }



 PocketGrid can manage horizontal and vertical gutters.

 To use gutters, you have 2 options:

 Option 1: paddings all around the blocks Gutters refer to the space between blocks.PocketGrid can manage horizontal and vertical gutters.To use gutters, you have 2 options: This first option is quite intuitive: to make gutters, we apply padding all around blocks:

 (to illustrate it, you can see the padding of the first and last blocks in red below) For example, if we want an vertical gutter of 2px, and a horizontal gutter of 6px: (note that block-group margins are negative values) To set gutters, just add these styles:For example, if we want an vertical gutter of 2px, and a horizontal gutter of 6px:(note that block-group margins arevalues) Advantage of this option: it's intuitive and it's easy to make a mouseover effect on blocks for example.

 Drawback of this option: because of the bottom and right paddings, it could display scrollbars when the grid is 100% of the page width. Option 2: paddings only on left and top sides This second option consists of putting paddings only to the left and top sides of blocks to avoid the scrollbars problem of option 1:

 (to illustrate it, you can see the padding of the first and last blocks in red below, and compare it to option 1) For example, if we want an vertical gutter of 2px, and a horizontal gutter of 6px: (note that margins and paddings have been multiplied by 2 in comparison to option 1,

because they are only on left and top sides) To set gutters, just add these styles:For example, if we want an vertical gutter of 2px, and a horizontal gutter of 6px:(note that margins and paddings have been multiplied by 2 in comparison to option 1,because they are only on left and top sides) Advantage of this option: avoids the scrollbars issue.

 Drawback of this option: you cannot put a background or a border on these blocks, because it would not be centered. Which option is better? It depends! ;)

 Option 1 (paddings all around the blocks) can be more appropriate if you want to put backgrounds directly on blocks (because paddings are equally spread around blocks).

 Option 2 (top and left paddings) is more appropriate for global site layout if your layout is 100% page width (to avoid scrollbars). Try playing with both, and see which one feels better for you.

 You could even mix these 2 options! With PocketGrid, you are free!

 To go further with gutters, you can see these 2 examples:

 Mixing option 1 and option 2 gutter types: use the best of both worlds! Responsive gutters! (yes, with PocketGrid, even gutters can be responsive!)



 However, when blocks have different heights, the "automatic rows" layout could seem broken (but of course, it's not!)

 To make it clearer, let's see how PocketGrid works internally:

 

 For layout positioning, PocketGrid uses has a " " property.

 By default, float elements are displayed side by side, and with PocketGrid's "automatic rows" feature, when there is not enough space in the row to display all elements, the next elements go to a new line (like words in a text):

 Nevertheless, if elements do not have the same height, the design can be broken.

 Here, block 2 has a greater height:

 It's a classical problem with floats: the line break is blocked by the bigger blocks (here block 2).

 A simple (but poor) solution could be to use a "block-group" for each row (like Twitter Bootstrap does, with its "row" class), but this solution would loose the "automatic rows" benefits: A better solution (keeping the "automatic rows") is to put " " on blocks that should be on a real new row (here: block 5): This solution is better because it does not impact the HTML (CSS-only), it's compatible with Media Queries (you could apply line breaks on different blocks according to the device) and you can use the "automatic rows" feature. " on each block that should be on a real new row, we can use the pseudo selector to force the clear every 4 blocks: If we had more than 1 big block (or if we didn't know the height of the blocks), instead of manually setting "" on each block that should be on a real new row, and , you can see For a complete responsive example usingand, you can see this example The " " solution is not compatible with IE6 and IE7.

 For these browsers, you should force the blocks to have the same height, or you should use a "block-group" for each row. In previous examples, all blocks had the same height. But in real life, with real content, they could have different heights.However, when blocks have different heights, the "automatic rows" layout could seem broken (but of course, it's not!)To make it clearer, let's see how PocketGrid works internally:For layout positioning, PocketGrid uses floats (like most CSS grids): eachhas a "" property.By default, float elements are displayed side by side, and with PocketGrid's "automatic rows" feature, when there is not enough space in the row to display all elements, the next elements go to a new line (like words in a text):Nevertheless, if elements do not have the same height, the design can be broken.Here, block 2 has a greater height:

Let's see some examples to clarify it.|||

