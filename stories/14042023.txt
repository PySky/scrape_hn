Crail is a fast multi-tiered distributed storage system designed from ground up for high-performance network and storage hardware. It marks the backbone of the Crail I/O architecture, which is described in more detail on www.crail.io. The unique features of Crail include:

Crail is implemented in Java offering a Java API which integrates directly with the Java off-heap memory. Crail is designed for performance critical temporary data within a scope of a rack or two.

Building the source requires Apache Maven and Java version 8 or higher. To build Crail execute the following steps:

Note: later, when deploying Crail, make sure libdisni.so is part of your LD_LIBRARY_PATH. The easiest way to make it work is to copy libdisni.so into crail-1.0/lib

To configure Crail use crail-site.conf.template as a basis and modify it to match your environment.

There are a general file system properties and specific properties for the different storage tiers. A typical configuration for the general file system section may look as follows:

In this configuration the namenode is configured to run using port 9060 on host 'namenode', which must be a valid host in the cluster. The cachepath property needs to point to a directory that is used by the file system to allocate memory for the client cache. Up to cachelimit size, all the memory that is used by Crail will be allocated via mmap from this location. Ideally, the directory specified in cachepath points to a hugetlbfs mountpoint. Aside from the general properties, each storage tier needs to be configured separately.

For the RDMA/DRAM tier we need to specify the interface that should be used by the storage nodes.

The datapath property specifies a path from which the storage nodes will allocate blocks of memory via mmap. Again, that path best points to a hugetlbfs mountpoint.

You want to specify how much DRAM each datanode should donate into the file system pool using the property. DRAM is allocated in chunks of , which needs to be a multiple of .

Crail supports optimized local operations via memcpy (instead of RDMA) in case a given file operation is backed by a local storage node. The indexpath specifies where Crail will store the necessary metadata that make these optimizations possible. Important: the indexpath must NOT point to a hugetlbfs mountpoint because index files will be updated which not possible in hugetlbfs.

For the NVMf storage tier we need to configure the server IP that is used when listening for new connections. We also need to configure the PCI address of the flash device we want to use, as well as the huge page mount point to be used for allocating memory.

For all deployments, make sure you define CRAIL_HOME on each machine to point to the top level Crail directory.

The simplest way to run Crail is to start it manually on just a handful nodes. You will need to start the Crail namenode, plus at least one datanode. To start the namenode execute the following command on the host that is configured to be the namenode:

To start a datanode run the following command on a host in the cluster (ideally this is a different physical machine than the one running the namenode):

Now you should have a small deployment up with just one datanode. In this case the datanode is of type RDMA/DRAM, which is the default datnode. If you want to start a different storage tier you can do so by passing a specific datanode class as follows:

This would start the shared storage datanode. Note that configuration in crail-site.conf needs to have the specific properties set of this type of datanode, in order for this to work. Also, in order for the storage tier to become visible to clients, it has to be enlisted in the list of datanode types as follows:

Similarly, Crail can be stopped by using

For this to work include the list of machines to start datanodes in conf/slaves. You can start multiple datanode of different types on the same host as follows:

In this example, we are configuring a Crail cluster with 2 physical hosts but 3 datanodes and two different storage tiers.

Crail provides an contains an HDFS adaptor, thus, you can interact with Crail using the HDFS shell:

Crail, however, does not implement the full HDFS shell functionality. The basic commands to copy file to/from Crail, or to move and delete files, will work.

For the Crail shell to work properly, the HDFS configuration in crail-1.0/conf/core-site.xml needs to be configured accordingly:

Note that the Crail HDFS interface currently cannot provide the full performance of Crail due to limitations of the HDFS API. In particular, the HDFS API only support heap-based arrays which requires a data copy. Moreover, HDFS operations are synchronous preventing efficient pipelining of operations. Instead, applications that seek the best performance should use the Crail interface directly, as shown next.

The best way to program against Crail is to use Maven. Make sure you have the Crail dependency specified in your application pom.xml file:

Then, create a Crail file system instance as follows:

Make sure the crail-1.0/conf directory is part of the classpath.

The simplest way to create a file in Crail is as follows:

Aside from the actual filename, the 'createFile()' takes as input to the storage and location affinity which are preferences about the storage tier and physical location that this file should created in. Crail tries to satisfy these preferences later when the file is written. In the example we do not request any particular storage or location affinity.

This 'createFile()' command is non-blocking, calling 'get()' on the returning future object awaits the completion of the call. At that time, the file has been created, but its directory entry may not be visible. Therefore, the file may not yet show up in a file enumeration of the given parent directory. Calling 'syncDir()' waits to for the directory entry to be completed. Both the 'get()' and the 'syncDir()' can be deffered to a later time at which they may become non-blocking operations as well.

Once the file is created, a file stream can be obtained for writing:

Here, we create a buffered stream so that we can pass heap byte arrays as well. We could also create a non-buffered stream using

In both cases, we pass a write hint (1024 in the example) that indicates to Crail how much data we are intending to write. This allows Crail to optimize metadatanode lookups. Crail never prefetches data, but it may fetch the metadata of the very next operation concurrently with the current data operation if the write hint allows to do so.

Once the stream has been obtained, there exist various ways to write a file. The code snippet below shows the use of the asynchronous interface:

Reading files works very similar to writing. There exist various examples in com.ibm.crail.tools.CrailBenchmark.

Crail ships with the RDMA/DRAM storage tier. Currently there are two additional storage tiers available in separate repos:

Crail provides a set of benchmark tools to measure the performance. Type

to get an overview of the available benchmarks. For instance, to benchmark the sequential write performance, type

This will create a file of size 100G, written sequentially in a sequence of 1MB operations.

This command issues 102400 read operations of 1MB each.

The tool also contains benchmarks to read files randomly, or to measure the performance of opening files, etc.

Crail is used by Spark-IO, a high-performance shuffle engine for Spark. Crail-Terasort is a fast sorting benchmark for Spark based on Crail.

PRs are always welcome. Please fork, and make necessary modifications you propose, and let us know.

If you have questions or suggestions, feel free to post at:|||

crail - A Fast Multi-tiered Distributed User-level Storage System