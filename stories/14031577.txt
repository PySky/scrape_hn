It would be no exaggeration to say that Caddy, an up-and-coming HTTP/2 server written in Go that's been gaining a lot of traction, is outright witchcraft. Out of the box, it just works. With HTTPS. With very little configuration.

In a previous post, I wrote that this blog is running on Ghost + PM2 + nginx. I have to admit, I have become somewhat complacent and in the past have relied heavily on Ansible roles to set a web server up for me. To set up this blog, I decided to roll up my sleeves and do it the old-fashioned way: manual package installs and conf files. And surprise, surprise: getting nginx to work perfectly with Ghost took more than the 5 minutes I expected.

To demonstrate just how neat Caddy is, let's compare my nginx file with the :

The nginx conf file. 25 lines (+1 blank space before EOF), explicit directive to redirect to , server directives to attach the LetsEncrypt cert files to the SSL server, location directives to properly forward the client information and make HTTPS redirect work without making Ghost stuck in a redirect loop.

The is four freaking lines. And it does everything that the nginx conf file it preceded does: HTTP to HTTPS redirect, SSL, and proxying. The directive on line 4 basically takes care of all the directives in the nginx conf.

The whole process of installing Caddy, writing the Caddyfile, and swapping nginx out for it took me a little under 5 minutes. In a nutshell, here are the steps I took:

After step 5, Caddy prompted me to enter my email for the LetsEncrypt cert. In the background, it took care of signing me up for LE, verifying my domain ownership, and downloading and attaching my cert files. Then I visited and it just worked (and it redirected me to a fully functional HTTPS to boot.

Sure, seasoned devops guys won't sweat configuring nginx like I did. And to be fair, installing your own SSL cert with LetsEncrypt/Certbot is a pretty straightforward process. But, the fact that Caddy does all this for minimal effort is frankly astonishing, and when Caddy hits the distro package managers ( , , , , etc.) it's gonna get even easier.

Addendum: The good folks over at Hacker News have been kind enough to point out that a verbose config is almost always better than a seemingly magical configuration. And I absolutely agree. However, I argue that anyone looking at the who understands Caddy just as much as they do nginx would agree that the file is clear and self-explanatory:

This tells Caddy to automatically serve the site on both HTTP (port 80) and HTTPS (port 443) because I didn't explicitly define a port to bind to, ie .

Equivalent to nginx's proxy pass. This tells Caddy to proxy requests for the root path to the Ghost backend listening at .

A Caddy preset directive which is basically a shorthand for the following:

...which is exactly the same things you would define explicitly in a typical nginx config.

And Line 4, of course, is the closing bracket.

@tyinq pointed out that it might not have been the best idea to pit Caddy against nginx, and after getting a very short downtime with Node/Ghost being unable the traffic spike (and no caching middleware in my Caddy binary, d'oh!) I can see where the other sentiments are coming from.

I've since put the whole site behind CloudFlare for good measure. :)|||

