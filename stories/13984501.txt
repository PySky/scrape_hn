State containers are a must for medium to large-sized React applications. The basic idea is to keep the state abstracted from your components and manage it somewhere else. Using a state container like Redux or MobX allows you to share a global centralised state across all your components.

This article is not a tutorial per se but a list of takeaways, pros and cons of each library and the impact on an existing React application.

Redux is a state container manager loosely based on the Flux architecture. In Redux you have actions creators and reducers. Actions creators are the first step towards updating the state, for example: “saveSettings”, o “insertRow”. Each action creator will call a reducer, which receives data and updates the state. To wrap up, actions is where your logic should be (ajax calls, computations, etc), and reducers are very simple pure functions that update the state. Once the state is updated, the view will be rendered by React.

The beauty of this (and any other state container) is that your state is global, which you can then inject to any of your components, even deep descendants.

MobX is also a state container manager like Redux. However, MobX doesn’t enforce any convention on you. You can use Flux if you want, or just reactive coding. It’s really up to you and your team. MobX also introduces new concepts to the arena, like observables, observers and actions. Observables are basically the properties of your state object. Observers are your React components that “monitor” the state changes (they watch for changes in the observables) and finally, Actions, are the ones that trigger a change in the observables. Very straightforward. MobX is a “reactive” state container.

If you want to learn more about reactive programming, you must have a look at this article in CSS-Tricks.

What has been said in several articles is still valid after all. If you plan to have your app exposed to a large team, say, 10 or more developers, you may need to go with Redux. This will lead to less error prone code and enforce a convention on your team.On the other hand, if you code is to be maintained by just you, or a handful or proficient coders, MobX is the answer. You will most certainly end up with cleaner code and get to do some actual coding very quickly. MobX however, can scale very well if you apply the Flux methodology to your existing code.

On the other hand, if you code is to be maintained by just you, or a handful or proficient coders, MobX is the answer. You will most certainly end up with cleaner code and get to do some actual coding very quickly. MobX however, can scale very well if you apply the Flux methodology to your existing code.

I personally, had more fun working with MobX than I did with React. The fact that I had to install another library to work with a RESTful API really put me off and on top of that, having my refs be rendered useless was the end of it. The level of overengineering I had to do to make it work was just too much to be justifiable.

As always, it all comes down to your personal preferences, team size and app size. There is a tool for everyone, it’s just a matter of using them in the correct environment.|||

After refactoring a medium-sized React application into Redux and MobX, these are the lessons, pros and cons of each state container manager.