In my most recent project ./code --poetry I created a code poem called irc.py that (as well as looking like an IRC chat itself) mimics IRC conversations when run. It looks something like this:

The output is randomized each time, but for a single instance, running the program looks something like this:

Essentially the program uses a simple Markov chain and a database of the IRC logs accumated from various IRC channels over the years to simulate the conversations. Now, reading that Wikipedia article, you would be forgiven for thinking that Markov chains are something limited to the realms of Mathematics graduates and PhDs - but actually Markov chains are pretty simple to implement in a language like Python, and can be coded up in just a few lines. Let us see what the Markov chain I implemented above looks like without all the poetry and decoration obfuscating it. But first, let us switch up the dataset a bit. Let us use this big database of poetry I collected a while back instead.

With the data downloaded, the first step is to read it in and separate it out into words. Newlines are important in poetry so for this data we'll use a regex to make sure we only split on spaces.

The essence of a Markov Chain is a transition function - a function which takes some previously generated words and produces the next one. To emulate this function we'll just use a lookup table. The input to the table will be the two previous words and the output will be a list of potential following words from which to choose from.

We can do this easily in Python using a - a dictionary which has a default value for missing entries. In our case we'll use an empty list default. We'll loop over all the words in our database in groups of three and append the third word to the list of potential outputs produced from the first two words.

We'll then pick some random starting location and find the three words located there:

Then all we need to do is print out our current word (followed by a space), update our previous word variables and , and choose a next word from the list found via our transition function.

That's it! Here is the whole thing.

You can adjust the value to produce shorter or longer poetry. Now you can produce some beautiful poetry like this!|||

Orange Duck's Website