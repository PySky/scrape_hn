RE:DOM is a tiny DOM library by Juha Lindstedt and contributors, which adds some useful helpers to create DOM elements and keeping them in sync with the data.

Because RE:DOM is so close to the metal and doesn't use virtual dom, it's actually faster and uses less memory than almost all virtual dom based libraries, including React.

It's also easy to create reusable components with RE:DOM.

Another great benefit is, that you can use just pure JavaScript, so no complicated templating languages to learn and hassle with.

Only if you use , or , you'll need at least IE9. All other features should work even in IE6. So for the most parts basically almost every browser out there is supported.

You can install RE:DOM from npm by calling:

You can also use the project generator, which will also install a file watcher and bundler. You can find it here.

RE:DOM also works on server side, by using NO:DOM.

You can install RE:DOM dev tools for Chrome

(alias: ) is a helper for with couple of differences.

The basic idea is to simply create elements with and mount them with , almost like you would do with plain JavaScript:

String and Number arguments (after the query) generate text nodes. You can also use the helper, which will return a reference to the text node:

You can use and as shortcuts for defining element IDs and class names. is the default tag name:

You can define styles with strings or objects:

You can also define children while creating elements:

Passing an array of children also works:

It's possible to add children conditionally, by using boolean:

You can add middleware by defining a function:

You can read more about components here, but here's how you attach them:

You can use or :

and only create HTML elements. If you want to create a SVG element, you must use :

Please use / / every time you need to mount/unmount elements inside a RE:DOM app. These functions will trigger lifecycle events, add references to components etc.

You can mount elements/components with . If you define the third parameter, it works like and otherwise it's like .

Mount will trigger the lifecycle event the first time you mount a child. If you mount the same child again to the same parent, gets called. If you mount it to another place, and get called. Read more about lifecycle events here.

If you need to remove elements/components, use . That will trigger the lifecycle event:

RE:DOM uses under the hood for lists. When you call , RE:DOM will add/reorder/remove elements/components automatically by reference:

For example, if you need to clear the document body, you can also use .

There's also a shortcut for replacing children with a single component / element: .

A helper for updating attributes and properties. It will auto-detect attributes and properties:

There's also a shortcut for updating the attribute:

It's really easy to create components with RE:DOM. Simply define a class or function, which returns an object with at least an property, and in case of list also the property:

You don't have to manually diff class names / properties / attributes except when dealing with URLs. If you change the of , or elements, the browser will reload the asset/website even if the value did not actually change. One way to work around this would be:

RE:DOM v2.0.0 supports true lifecycle events. Three events are defined: , and .

When you have dynamic data, it's not that easy to manually keep the elements and the data in sync. That's when the helper comes to rescue.

To use , just define a parent node and component:

When you call , the list will automatically:

Normally will update by index, so it only adds/removes the last item.

If you want to define a key, you can do that by adding a third parameter to the . With key, the list will automatically insert/reorder/remove elements by that key of each object in the list.

There's couple of ways to do a list component:

This works, but in case you need to access ( ) in , I recommend to use the following:

or the other way around:

Router is a component router, which will create/update/remove components based on the current route.

The example will:

CSS in RE:DOM is a lot like Stylus, but with objects:

You can use kebab-case as well if you like:

You can add multiple levels of hierarchy:

If you add parameter, only the first call will append to

When used like that, style won't get activated until the component is created the first time!

You can find more examples on RE:DOM website!

If you have any feedback about RE:DOM, you can join #redom at koodiklinikka.slack.com (get invitation by entering your email at koodiklinikka.fi) or raise an issue on Github.

RE:DOM is on Github, source is here. To start developing:

Pull requests are more than welcome!|||

