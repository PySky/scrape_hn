Fans of functional programming and/or strong typing certainly know : tuple with zero elements, type that only posses the single value . C# 7.0 now has it too, albeit with a slightly ugly name: .

C# has keyword and it’s not a good thing. It creates an artificial asymmetry between methods that return something and methods that do not return anything. From this decision follows the necessity to distinguish between and .

In Haskell, you have type and it’s what it looks like: the empty tuple. This type has the single value , so when you are returning it, you are not conveying any information. (Well, up to the fact that you are returning, but this distinction between and is not important for us now.) It’s a good replacement for a special keyword like , because it fits well into another concept (of tuples) anyway.

If we had in C#, we would not write , but – we would abolish completely. In a similar vein, we would be able to use like , i.e. as a non-existent .

We know that there are differences between and : the most important one being that the old is a reference type and the new is a value type.

Did you notice though that there is without generic arguments? is just a static shorthand for creation of generic tuples using its method, you can’t instantiate it.

This instantiable is in a very real sense. It’s inhabited by the single value, so , . Conceptually, it corresponds to Haskell’s type as “product of empty set of types”.

Unfortunately, the language does not accept syntax sugar for :

This has the same meaning though – and it compiles:

It’s kind of nice that in this way, even beginners see the difference between “value ” and “type ”. That makes problems in Haskell sometimes.

It arguably looks weird though, especially given already suspicious name for such a fundamental thing. It’s difficult to imagine an organization that decides to opt into this style just to make the codebase slightly more consistent and nice.

Nevertheless, -free style is from now on possible in C#. All it takes is to write an analyzer that forbids s and s.

Lukáš Lánský (e-mail)

Return to the list of posts|||

Fans of functional programming and/or strong typing certainly know unit.