We finally got into the number five! First of all, sorry for taking so long to publish this article, a bunch of things happened at once, I had some health issues plus some conferences I had to speak at, but I come with good news, the series is back, and I hope to keep the rate of 1 article a week from now on.

In this article we will talk about Concurrency, Processes and Recursion, it’s time to start taking some traction and put some of the stuff we saw on the lastest articles together.

If you like the series, please let me know on Twitter! And if you haven’t checked the other episodes yet you can do it following the links bellow:

Episode I - Elixir, Pipe Operator and Pattern Matching

Episode II - Actor Model, Modules and functions

Episode III - Maps, Functions + Pattern Matching = ❤️

Episode IV - Elixir Type, Data Structures and Underscore

Together with the articles I keep a mailing list, you can sign up by putting your email bellow. You’ll be notified every time a new article is released, I also try to put some cool stuff on the emails so you can check things like open source projects, conferences info, and eventual stuff we can work together!

We have discussed concurrency in the other articles already, how the Erlang VM enables you to take advantage of concurrency in such a graceful and powerful way, and that’s only possible thanks to the actor model and the way the VM handles the processes and its communications (for further info around Actor Model check episode II).

Processes started and executed on the Erlang VM are completely different from the usual processes you see on your operation system, it’s really lightweight, and the VM can run a bunch of them at the same time, thanks to the separation between all processes and the functional paradigm, that allow us to avoid race conditions and to actually have concurrent code safely.

Every time you run any elixir code, from executing a script to running a web application, a new process is started, and this process can also spawn other processes.

A process can be as little as a single function, but others can be really complex and even coordinate other processes, as the ones known as supervisors, we’ll talk about those in future articles.

Let’s start by checking some of the modules and functions that can create new processes, the easiest and simplest one is probably the function, a function from the Erlang standard library, let’s check how it works:

That’s cool, it doesn’t look so awesome yet, but trust me it gets way better once we start multiple processes, but to do it we'll need to dive into our next topic on this article, recursion, not only what it is but also how to implement recursion on Elixir by bringing pattern matching into the play (further info around patter matching on episode I and episode III).

Recursion can be tricky to understand when using functional languages. Because of immutability you don’t have the usual tools you are used to, like and , so in order to achieve recursion you need to bring other elements, like pattern matching.

We have already implemented functions with pattern matching in other episodes, but lets check how we could use it to achieve recursion and compare it with what we would expect to have in ruby.

Let’s suppose we want to loop through a list, printing its elements and then a finish message, pretty simple right? Let’s check it on ruby:

Now let’s check how we would tackle it within elixir, in a functional way, without tools like .

That’s awesome, by using the same core concepts we seen on last episodes we can easily achieve recursion, and do it in a graceful and clear way, by having different functions. This can make debugging so much easier and also feels really organized.

Now let’s go for the real deal, we want to adapt our initial example used to spawn a new processes, now we want it to support an infinite number of processes (as many as your computer can handle *hint: it’s a freaking lot).

Now that we know how to use recursion it shouldn’t be that hard, let’s check the result:

That’s awesome, now we already know how to spawn a new processes, and use recursion, this is a great case for when working with scripts, and it does takes advantage of some of the main Erlang and Elixir features.

This is episode V of Elixir with a Rubyist!!! I feel great about this series and really happy to be publishing it again! I’m looking forward for the next episodes, it feels we are starting to get into the fun stuff.

This is a series of short bar-like conversations around Elixir, it’s aimed to help developers that are trying to understand and wrap their heads around it.

On the next episodes we will finally get into the module, also discuss , and the fun stuff. If you liked please let me know on the comments bellow and over Twitter.|||

Concurrency, Processes and RecursionWe finally got into the number five! First of all, sorry for taking so long to publish th...