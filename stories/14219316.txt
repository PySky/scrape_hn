Designing the right file architecture is not straightforward in Machine Learning. After struggling on that question for a few projects of my owns, I started to discover simple patterns that cover most of the use cases I stumbled upon when reading code or coding my own stuff.

This article is about sharing those discoveries with you.

Think about what you will probably have to do when you will be doing ML (coding perspective):

That‚Äôs quite a lot and one can be easily lost in refactoring files and folders to make everything fit nicely, on top of that, there are probably other needs that I‚Äôm not even addressing in the list above so let‚Äôs try to find out some best practices.

This is the very basics. Of course, one might need to add other folders but somehow it seems to boil down to this basic set.

With a good README and other bash script as helpers, anyone coming to your repository can simply follow the ‚ÄúInstall‚Äù commands and ‚ÄúUsage‚Äù commands to start reproducing your work üëå

As i said, I ended up recognising patterns in the way models are engineered in TF. This leads me to design a very simple class which would be extended by all my future model.

I‚Äôm not a fan of class inheritance but I‚Äôm neitheir a fan of rewriting the same piece of code forever and clearly, when you do ML, models share many similarities needed by the framework you use.

So i tried to find an implementation avoiding the known banana problem of inheritance while letting one inherits as deep as it wants.

To be completely clear, consider this class as the top parent of future models, leading to the construction of your model in one line with one argument: the configuration.

For the sake of clarity, let me show you the commented file directly:

The __init__ script you can see on the folder structure does not have much to do with ML. Yet it is a simple way to make your code more accessible for yourself and others.

It adds a few lines of codes to make any model class directly accessible from the namespace : So you can type anywhere in your code: , whatever how deep is your model folder architecture.

Here is an example of a script achieving this task:

Nothing fancy, but I found it useful so I decided to add it to this post. üç∫

We have a global consistent folder structure, a nice basic class to build our models, a nice python script to load our class easily but designing the ‚Äúshell API‚Äù and especially its default value is of the same importance.

Because the main endpoint to interact with your work in ML is definitely the shell whatever tool you are using. The shell is the cornerstone of your experiments.

The last thing you want is having to change hardcoded value in your code to iterate over those experiments, so you need to have access to all the the Hyper-parameters directly from the shell. You also want to have access to all other parameters like the result directory or the stage (HP search/Training/inferring) etc.

Again for the sake of clarity, let me show you the commented file directly:

That‚Äôs it! Hope it will help newcomers in the field to bootstrap their own research and feel free to comment or ask questions.|||

Designing the right file architecture is not straightforward in Machine Learning. After struggling on that question for a few projects of my owns, I started to discover simple patterns that cover‚Ä¶