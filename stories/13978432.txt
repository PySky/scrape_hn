Well, let’s begin with explaining the title:

It’s basically an aggregation of an incoming payload, for the program’s convenience, with some basic casting and validation.

Why did I put objects in quotes then? Because in Elixir we actually don’t have objects themselves, we use modules and structs. And that’s why we will leverage them to mimic the Form Object pattern.

To start building form objects, you may want to get familiar with library. It’s required to use schemas with casting, and to not reinvent the wheel again. Make sure you have it in your dependencies:

introduces a concept called Embedded Schemas which is nothing more than embedding Elixir structs in schemas. 2.1 delivers even more convenient solution, from Form Objects perspective, which is Inline Embeds. It applies for both and .

I’ll explain the idea briefly here. Imagine you have the following payload, a set of params incoming to your API:

Note we have two top level attributes:

As we can see, object also contains some nested values:

Moreover, a single change is also quite complex:

OK, enough nesting. Once we know the general structure, we can model our schema. Let’s start from defining something like that:

I believe that everything is very self-explanatory, especially after what we’ve just discussed above. The form is defined, now it’s time to define logic for building the form from incoming params.

What is it exactly? Well, the documentation explains it pretty clearly:

As you can read, filtering and casting is something what we’ve already mentioned and it’s exactly what we need here.

When we continue reading the documentation:

Once again — it’s all about creating final schemas based on incoming parameters. This perfectly fits our needs.

We need to extend our module. Let’s firstly create function as an entry point accepting user input, and then a bunch of functions to build every embedded Schema we defined previously.

It seems we are done, right? We can call with any given params that come from a client.

We could finish here, however I suggest to do one more thing as a good practice. After calling we would have something like:

The thing is that we don’t want to have the knowledge about particular schemas leaking to our services. We would prefer to have a regular map here, instead of nested schemas.

To do that, we need to convert our changeset composition into a regular map. We could leverage for that but we want to be explicit about that and sure what attributes we want to take out. Let’s do that in the following way:

and then, extend our function like:

Thanks to that, the final result of creating a new is:

Which is exactly what we need to use in our application later on!

As you can see, with a few simple steps, we covered the topic of Form Objects in Elixir. You can leverage that pattern to create convenient structures to operate on in your applications.

I believe it’s a very useful approach to help you passing a handy structure across your services. Remember you can always use library and decode your form and probably a couple more solutions for that.

I encourage you to try especially this pattern in your code, specifically Phoenix apps, and let me know if you find it useful.|||

It’s basically an aggregation of an incoming payload, for the program’s convenience, with some basic casting and validation. Why did I put objects in quotes then? Because in Elixir we actually don’t…