A lightweight, object-oriented state machine implementation in Python. Compatible with Python 2.7+ and 3.0+.

... or clone the repo from GitHub and then:

They say a good example is worth 100 pages of API documentation, a million directives, or a thousand words.

Well, "they" probably lie... but here's an example anyway:

transitions Machine random ( ): Define some states. Most of the time, narcoleptic superheroes are just like everyone else. Except for... states [ , , , , ] ( , ): No anonymous superheroes on my watch! Every narcoleptic superhero gets a name. Any name at all. SleepyMan. SlumberGirl. You get the idea. .name name What have we accomplished today? .kittens_rescued .machine Machine( , NarcolepticSuperhero.states, ) Add some transitions. We could also define these using a static list of dictionaries, as we did with states above, and then pass the list to the Machine initializer as the transitions= argument. At some point, every superhero must rise and shine. .machine.add_transition( , , ) Superheroes need to keep in shape. .machine.add_transition( , , ) .machine.add_transition( , , ) Superheroes are always on call. ALWAYS. But they're not always .machine.add_transition( , , , ) When they get off work, they're all sweaty and disgusting. But before they do anything else, they have to meticulously log their latest escapades. Because the legal department says so. .machine.add_transition( , , , ) Sweat is a disorder that can be remedied with water. Unless you've had a particularly long day, in which case... bed time! .machine.add_transition( , , , [ ]) .machine.add_transition( , , ) Our NarcolepticSuperhero can fall asleep at pretty much any time. .machine.add_transition( , , ) ( ): .kittens_rescued ( ): random.random() ( ): ( )

There, now you've baked a state machine into . Let's take him/her/it out for a spin...

Getting a state machine up and running is pretty simple. Let's say you have the object (an instance of class ), and you want to manage its states:

You can initialize a (minimal) working state machine bound to like this:

I say “minimal”, because while this state machine is technically operational, it doesn't actually do anything. It starts in the state, but won't ever move into another state, because no transitions are defined... yet!

Notice the shiny new methods attached to the instance ( , , etc.). Each method triggers the corresponding transition. You don't have to explicitly define these methods anywhere; the name of each transition is bound to the model passed to the initializer (in this case, ). Additionally, there is a method called now attached to your model. This method lets you execute transitions by name in case dynamic triggering is required.

The soul of any good state machine (and of many bad ones, no doubt) is a set of states. Above, we defined the valid model states by passing a list of strings to the initializer. But internally, states are actually represented as objects.

You can initialize and modify States in a number of ways. Specifically, you can:

The following snippets illustrate several ways to achieve the same goal:

A can also be associated with a list of and callbacks, which are called whenever the state machine enters or leaves that state. You can specify callbacks during initialization, or add them later.

For convenience, whenever a new is added to a , the methods and are dynamically created on the Machine (not on the model!), which allow you to dynamically add new enter and exit callbacks later if you need them.

Note that callback will not fire when a Machine is first initialized. For example if you have an callback defined, and initialize the with , will not be fired until the next time you enter state . (If you need to make sure fires at initialization, you can simply create a dummy initial state and then explicitly call inside the method.)

In addition to passing in callbacks when initializing a , or adding them dynamically, it's also possible to define callbacks in the model class itself, which may increase code clarity. For example:

Now, any time transitions to state , the method defined in the class will fire.

You can always check the current state of the model by either:

And if you want to retrieve the actual object for the current state, you can do that through the instance's method.

Some of the above examples already illustrate the use of transitions in passing, but here we'll explore them in more detail.

As with states, each transition is represented internally as its own object – an instance of class . The quickest way to initialize a set of transitions is to pass a dictionary, or list of dictionaries, to the initializer. We already saw this above:

Defining transitions in dictionaries has the benefit of clarity, but can be cumbersome. If you're after brevity, you might choose to define transitions using lists. Just make sure that the elements in each list are in the same order as the positional arguments in the initialization (i.e., , , , etc.).

The following list-of-lists is functionally equivalent to the list-of-dictionaries above:

Alternatively, you can add transitions to a after initialization:

The argument defines the name of the new triggering method that gets attached to the base model. When this method is called, it will try to execute the transition:

By default, calling an invalid trigger will raise an exception:

This behavior is generally desirable, since it helps alert you to problems in your code. But in some cases, you might want to silently ignore invalid triggers. You can do this by setting (either on a state-by-state basis, or globally for all states):

If you need to know which transitions are valid from a certain state, you can use :

In addition to any transitions added explicitly, a method is created automatically whenever a state is added to a instance. This method transitions to the target state no matter which state the machine is currently in:

If you desire, you can disable this behavior by setting in the initializer.

A given trigger can be attached to multiple transitions, some of which can potentially begin or end in the same state. For example:

In this case, calling will set the model's state to if it's currently , and set it to otherwise. (Note that only the first matching transition will execute; thus, the transition defined in the last line above won't do anything.)

You can also make a trigger cause a transition from all states to a particular destination by using the wildcard:

Note that wildcard transitions will only apply to states that exist at the time of the add_transition() call. Calling a wildcard-based transition when the model is in a state added after the transition was defined will elicit an invalid transition message, and will not transition to the target state.

A reflexive trigger (trigger that has the same state as source and destination) can easily be added specifying as destination. This is handy if the same reflexive trigger should be added to multiple states. For example:

This will add reflexive transitions for all three states with as trigger and with executed after each trigger.

A common desire is for state transitions to follow a strict linear sequence. For instance, given states , you might want valid transitions for → , → , and → (but no other pairs).

To facilitate this behavior, Transitions provides an method in the class:

The default behaviour in Transitions is to process events instantly. This means events within an method will be processed before callbacks bound to are called.

The execution order of this example is

If queued processing is enabled, a transition will be finished before the next transition is triggered:

Important note: when processing events in a queue, the trigger call will always return , since there is no way to determine at queuing time whether a transition involving queued calls will ultimately complete successfully. This is true even when only a single event is processed.

Sometimes you only want a particular transition to execute if a specific condition occurs. You can do this by passing a method, or list of methods, in the argument:

In the above example, calling when the model is in state will transition to state if returns . Otherwise, it will transition to state if returns .

For convenience, there's also an argument that behaves exactly like conditions, but inverted:

In this case, the model would transition from solid to gas whenever fires, provided that both and return .

Note that condition-checking methods will passively receive optional arguments and/or data objects passed to triggering methods. For instance, the following call:

... would pass the optional kwarg to the check (possibly wrapped in an instance). For more on this, see the Passing data section below.

You can attach callbacks to transitions as well as states. Every transition has and attributes that contain a list of methods to call before and after the transition executes:

There is also a callback that is executed as soon as a transition starts, before any are checked or other callbacks are executed.

Note that will not be called unless the current state is a valid source for the named transition.

Default actions meant to be executed before or after every transition can be passed to during initialization with and respectively:

There are also two keywords for callbacks which should be executed independently a) of how many transitions are possible, b) if any transition succeeds and c) even if an error is raised during the execution of some other callback. Callbacks passed to with will be executed once before processing possible transitions (and their individual callbacks) takes place. Callbacks of will be executed regardless of the success of the processed transitions. Note that if an error occurred it will be attached to as and can be retrieved with .

Sometimes you need to pass the callback functions registered at machine initialization some data that reflects the model's current state. Transitions allows you to do this in two different ways.

First (the default), you can pass any positional or keyword arguments directly to the trigger methods (created when you call ):

You can pass any number of arguments you like to the trigger.

There is one important limitation to this approach: every callback function triggered by the state transition must be able to handle all of the arguments. This may cause problems if the callbacks each expect somewhat different data.

To get around this, Transitions supports an alternate method for sending data. If you set at initialization, all arguments to the triggers will be wrapped in an instance and passed on to every callback. (The object also maintains internal references to the source state, model, transition, machine, and trigger associated with the event, in case you need to access these for anything.)

In all of the examples so far, we've attached a new instance to a separate model ( , an instance of class ). While this separation keeps things tidy (because you don't have to monkey patch a whole bunch of new methods into the class), it can also get annoying, since it requires you to keep track of which methods are called on the state machine, and which ones are called on the model that the state machine is bound to (e.g., vs. ).

Fortunately, Transitions is flexible, and supports two other initialization patterns.

First, you can create a standalone state machine that doesn't require another model at all. Simply omit the model argument during initialization:

If you initialize the machine this way, you can then attach all triggering events (like , , etc.) and all callback functions directly to the instance.

This approach has the benefit of consolidating all of the state machine functionality in one place, but can feel a little bit unnatural if you think state logic should be contained within the model itself rather than in a separate controller.

An alternative (potentially better) approach is to have the model inherit from the class. Transitions is designed to support inheritance seamlessly. (just be sure to override class 's method!):

Here you get to consolidate all state machine functionality into your existing model, which often feels more natural way than sticking all of the functionality we want in a separate standalone instance.

A machine can handle multiple models which can be passed as a list like . In cases where you want to add models as well as the machine instance itself, you can pass the string placeholder during initialization like . You can also create a standalone machine, and register models dynamically via . Remember to call if machine is long-lasting and your models are temporary and should be garbage collected:

If you don't provide an initial state in the state machine constructor, you must provide one every time you add a model:

Transitions includes very rudimentary logging capabilities. A number of events – namely, state changes, transition triggers, and conditional checks – are logged as INFO-level events using the standard Python module. This means you can easily configure logging to standard output in a script:

Machines are picklable and can be stored and loaded with . For Python 3.3 and earlier is required.

Even though the core of transitions is kept lightweight, there are a variety of MixIns to extend its functionality. Currently supported are:

There are two mechanisms to retrieve a state machine instance with the desired features enabled. The first approach makes use of the convenience with the three parameters , and set to if the certain feature is required:

This approach targets experimental use since in this case the underlying classes do not have to be known. However, classes can also be directly imported from . The naming scheme is as follows:

To use a full featured state machine, one could write:

Transitions can generate basic state diagrams displaying all valid transitions between states. To use the graphing functionality, you'll need to have installed ( ). With enabled, a PyGraphviz object is generated during machine initialization and is constantly updated when the machine state changes:

This produces something like this:

Also, have a look at our example IPython/Jupyter notebooks for a more detailed example.

Transitions includes an extension module which allows to nest states. This allows to create contexts and to model cases where states are related to certain subtasks in the state machine. To create a nested state, either import from transitions or use a dictionary with the initialization arguments and . Optionally, can be used to define a sub state to transit to, when the nested state is entered.

A configuration making use of could look like this:

Some things that have to be considered when working with nested states: State names are concatenated with . Currently the separator is set to underscore ('_') and therefore behaves similar to the basic machine. This means a substate from state will be known by . A substate of will be referred to as and so on. When entering a substate, will be called for all parent states. The same is true for exiting substates. Third, nested states can overwrite transition behaviour of their parents. If a transition is not known to the current state it will be delegated to its parent.

In some cases underscore as a separator is not sufficient. For instance if state names consists of more than one word and a concatenated naming such as would be confusing. Setting the separator to something else than underscore changes some of the behaviour (auto_transition and setting callbacks). You can even use unicode characters if you use python 3:

Instead of auto transition is called as . If your substate starts with a digit, transitions adds a prefix 's' ('3' becomes 's3') to the auto transition to comply with the attribute naming scheme of python. If interactive completion is not required, can be called directly. Additionally, is replaced with .

To check whether the current state is a substate of a specific state supports the keyword :

Besides semantic order, nested states are very handy if you want to specify state machines for specific tasks and plan to reuse them. Be aware that this will embed the passed machine's states. This means if your states had been altered before, this change will be persistent.

Sometimes you want such an embedded state collection to 'return' which means after it is done it should exit and transit to one of your states. To achieve this behaviour you can remap state transitions. In the example above we would like the counter to return if the state was reached. This is done as follows:

If a reused state machine does not have a final state, you can of course add the transitions manually. If 'counter' had no 'done' state, we could just add to achieve the same behaviour.

In cases where event dispatching is done in threads, one can use either or where function access (!sic) is secured with reentrant locks. This does not save you from corrupting your machine by tinkering with member variables of your model or state machine.

Any python context manager can be passed in via the keyword argument:

Any contexts via will be shared between all models registered with the . Per-model contexts can be added as well:

It's important that any user-provided context managers are re-entrant since the state machine will call them multiple times, even in the context of a single trigger invocation.

For bug reports and other issues, please open an issue on GitHub.

For usage questions, post on Stack Overflow, making sure to tag your question with the and tags.

For any other questions, solicitations, or large unrestricted monetary gifts, email Tal Yarkoni.|||

transitions - A lightweight, object-oriented finite state machine implementation in Python