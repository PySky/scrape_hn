Animations make your mobile app stand out, look more interactive, and help you increase engagement. Slack would be just another chat app without so many eye candy details.

I’ll try to explain how to think about animations, show what are possibilities for animations in React Native, and expose some of my tricks on how to make them reusable all over the app across various components with a different type of interactions.

About a year ago, when we started making the first Shoutem extensions, our design team asked me if it’s possible to make the following animation. Make details screen in News extension with bounce zoom and parallax animations on a header image, and a color changing animation on the navigation bar.

I have immediately said “Yes, of course”, but I soon realized it isn’t going to be easy to implement.

First of all, when a designer gives you a prototype, try to look at the animations one by one. Animations in their essence are just presentations of each step of change between two states. Looking at it like this, we could examine each animation as a composition of changes between two different states of various properties, so thatany animation could be described as a change of:

There are also some other animations that could be described with transformation matrices (e.g. perspective), but they are essentially the composition of size, position, and rotation with a different point of gravity.

Having the previous definition in mind, we could break down our animations into two groups: Navigation bar and header animation.

2. Header animation: 

- title animates its opacity, from 0 when the scroll bounces to 1 when the scroll is about 0 and to the opacity of 0 when the scroll continues. 

- image grows when scroll bounces and has some parallax when scroll continues

If we consider that scroll bounce is just scrolling from a negative value, the image actually shrinks in size as the scroll is being changed from negative to 0, and then stays in the same scale ever after.

Parallax is just a compensation of scroll, so if the scroll is moving with speed x we should move slower or faster than that. On our prototype, the image is scrolling slower than content. To achieve the desired animation, we should translate through the y-axis with the negative shift.

So, now when we understand all animations, in theory, let’s see how we can achieve that with React Native.

Currently there are 3 types of animations available in React Native at the moment:

LayoutAnimation typically animates views to their new positions when the next layout happens. A common way to use this API is to call it before calling setState which causes layout change. This will give you nice and smooth animations on the native thread, but sometimes (in 10% cases) it will result with unexpected animations.

For example, if you want to create a fade in the animation of an element, the common way to do it with LayoutAnimation. Add the element to your layout after you configure layout animations for the next layout change, by calling `LayoutAnimation.easeInEaseOut()`. It will produce the fade in effect, but sometimes newly added element will just slide into its position. And that happens in a nondeterministic way.

The simplest workflow to work with Animated API is to create an Animated.Value. Hook it up to one or more style attributes of an animated component, and then drive updates either via animations, such as Animated.timing or by hooking into gestures like panning or scrolling via Animated.event.

Animated.Value can also bind to props other than style and can be interpolated as well. Animations could be driven by JS or native thread, depending on what style prop you want to interpolate. This API is what you will use to create most of the animations.

The navigation transition is the animations between app screens. It differs a lot from library to library. Some libraries, like native-navigation from AirbnbEng, supports shared element transitions.

Year ago, just before react-europe 2016, we created the first prototype of our extensions which we showed at our booth at the time. Visitors were impressed with animations in our demo app, but the code for our prototype News details screen looked like this:

This produced a screen which looked and worked as we wanted, but the code was not reusable. We needed to duplicate a lot of things if we wanted to have any similar screen to this one. The idea of extensions was to provide developers with an easy and reusable way of making nice apps. At the time being we were focused on releasing our UI Toolkit, but we haven’t come up with a solution for animations yet, and this amount of code wasn’t acceptable for us.

The first idea we implemented, to reduce the amount of boilerplate animation code, was to extract them in React components. With this approach, we could have a component for each basic animation and just compose them to create the complex one.

Besides creating React components that represent animations, we also had to determine how to setup the animated values that drive those animations. For example, animations from our example screen are usually controlled by a ScrollView. We wanted to allow users to easily connect their animations to any source they want to use.

Let’s think about animations for a moment. We said animation is a change of some state, and that change should be driven by something. In UI, animations are driven by time, force and user interaction. In this particular case, the animation is caused by user interaction of scrolling.

To support generic animation components we had to introduce the concept of an animation Driver. According to our documentation, animation Driver is:

In this case, we need to create animations driven by scrolling, so we need a ScrollDriver which should handle all scrolling related animation handling.

With all these we were able to create components for all basic animation types:

Take a look at these components and notice, that they always animate opacity or transform style property.

Finally, with these components our screen became more reusable and looked like this:

This solution has a lot less code and is easy for everyone to write or learn. We wanted to provide an even simpler way of doing these animations.

We wanted a way of reusing complex animations, not just pre-exported compositions of basic animations such as HeroHeader component. We wanted to reuse more complex animations that could animate any style prop and be changed over the theme. We also didn’t want to declare ScrollDrivers all over again on each ScrollView.

To solve this, we created connectAnimation, component that enables components reusage of multiple animations. Each connected component may have multiple animations defined through its style, and those animations can be activated by specifying their name through the animationName prop:

animationName is a name of animation function which is going to be used to create animated style. Hero animation on Image component then looks like this:

Each animation function is named as animationName + ”Animation” suffix to distinct animation functions when they are defined in style. Driver argument represents driver which will be used to drive animation and second argument is an object that holds layout and options.

layout is measured layout on each onLayout event of the component and has height, width, x, and y.

options represent an object that is passed as animatedOptions to the connected component. For example, if we wanted to pass maximum scale factor to hero animation we would do it like this:

and use it in function like this:

Having connectAnimation and all components connected ArticleDetailsScreen now becomes as it is today:

This solution didn’t only give us a simpler way of reusing animations but enabled us to customize each animation through style which could result with a whole different experience in different application themes. Now, to change the animation we should only customize its animation function. To see it in action and how did we do that in our themes, check out this repo:

You are now familiar with the power of React Native Animated API. You have seen what needs to be done to make an animation with it. You have seen the evolution of our code. But what is the real power of @shoutem/animation? Could you do anything with it? What needs to be done yet to have real superpowers?

As I have mentioned it before @shoutem/animation provides you with these animation drivers:

But real power is in higher order components:

If you take a look at this file, you will figure out how all our animated components are just a simple React Native View connected with connectAnimation.

Let’s see what else remains to be done. Maybe this will inspire you to contribute and submit a pull request to the repo :)

I think that we need more Driver types. That will enable more animation types. What first comes to my mind is:

Beside animations, I hope that this article showed you that sometimes:|||

Animations make your mobile app stand out, look more interactive, and help you increase engagement. Slack would be just another chat app without so many eye candy details. I’ll try to explain how to…