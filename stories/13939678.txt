Continuing my unending train of thoughts on static analysis of effects, in this post I’m going to talk about using to sort any collection. The typeclass is one of my favorites because it generalizes the idea of a collection so elegantly. I will show how to use to sort any such collection safely using a special applicative.

Update: Check out David Feuer’s fast implementation and /u/michaelt’s benchmark. It seems this techinque can be competitively fast!

Most meaningful collections are instances of . The idea is that a collection allows you to call an applicative function for each element, and the results will get put back together in a collection of the same shape. At first, this seems a little hard to sort a collection this way, because the function being called only gets access to one element at a time. But one of the defining characteristics of is the fact that it’s a subclass of , meaning you can always extract its contents into a list.

Given this, we can sort the contents of any collection by sorting the result of . This is fine, but it’s not quite there yet. We really wanted to sort in , not in . That is, we wanted the order of the elements in the original traversable structure to change, so that we can keep using that type instead of being forced to stick with lists.

Which brings us to the main characteristic that has over ; you can always put elements back. How we do this will start out a little ugly, but it will get better later on. We’ll start by using the monad for our applicative effect to pop elements off of a list and put them into place. This will be inherently unsafe, because we can’t be sure that the list we’re popping off of will have enough elements for the collection. But rest assured, the traversable laws have a roundabout way of dictating that the collection will always preserve its exact shape (and size) when you use .

The pattern we’re binding to is unsafe, but as long as the list is at least as long as the traversable, it will never fail. Meaning we can safely do this:

While we have the nice list structure, we can do whatever we want to it, as long as we don’t change the shape of the list itself. This means we can reorder the elements, as long as we don’t change the length. So great, we can now sort a list, vector, or whatever else using the same function.

But this is pretty unsatisfying. The use of a partial function is pretty gross. But there’s a really weird little applicative that we can use to fix this. It’s easiest to define using the free applicative, so I won’t be writing an applicative instance by hand here. And although I’ll import , I’ll only use and , meaning that this should work with any free applicative (this matters because the one I’m importing will be very inefficient).

As I said, this is a weird little applicative. is our main primitive here. Given a value of type , it can create an effect that yields in an applicative context that uses to relate to in some way. Basically, this applicative just lets you record s, and promises to turn each one into a later on. I called it because it’s basically the free applicative over if you could force to be monomorphic on . Now watch what happens when we traverse with this applicative.

You might recognize that type signature. Yep, it’s . This function extracts all the elements of a collection into this structure, then converts each into a using the supplied function, and finally accumulates all those results back into the collection using the pure functions that the free applicative kept hold of. This is important because it proves that we can record all the elements of a collection into this applicative statically, and safely reify them back into the traversable with . To see this more clearly, recall the basic free applicative definition.

Structurally, it’s just a linked list of where each element has a potentially different type for , meaning it’s sort of a heterogeneous list. The list is terminated by . Since the cons-ing part of the constructor uses a function type, we know that the value in will be a pure function with one argument for each preceding , unless of course there was no preceding . In the case of , that function will take one argument for every element of the collection.

When we apply this to , we know that we’re always pinning to the type, meaning the applicative becomes homogeneous. To clarify, here’s how it looks with specialized in:

Suddenly, there’s no existential types involved, and the “list” becomes monomorphic. The pure function stored in has one argument for each , except that the type of that argument is , meaning we have to convert to before we can call that function. What that function does is up to the code that’s calling and . Again, will put in place a function that takes each as an argument in order to rebuild the collection with s.

Abstractly, we’re kind of building an existentially defined, type level encoding of the length of a collection. But the point is, we now have this monomorphic structure that we can use to look at . Specifically, we can take this weird kind of linked list and sort it.

This reshuffles the elements of without changing the function at the end in any way. The order of values in the “list” has been sorted, but the function consuming those values is unchanged. This mismatch results in receiving elements in sorted order, rather than the original order.

Now, that was a really innefficient insertion sort, but I only meant for it to be a proof of concept. But the point of a free structure is that anything you can do to it once it’s built is something that can be replicated in a custom version during building. Meaning there’s probably some way to sort elements within instead of in some external function, but it’s probably not trivial. Here’s a start, but I’ve left a hole in the part that I didn’t care to try any harder to figure out.

The should take two already sorted programs and perform a sorted merge on them. If the were implemented to do this, it would run equivalent to mergesort when used with tree traversables (though I’m not sure on the asymptotics; you have to keep in mind that runs in linear time here). With lists, I think it would be an insertion sort. And this is actually interesting on its own; what sorting algorithm this would be depends on the traversable instance. I’d be interested to see different sorting algorithms implemented as different combinations of traversable instances and applicative instances. Then we could start mixing matching those instances to get potentially brand new sorting algorithms.

Anyway, I’ve got one more thing to show. I’ll switch back to using the free applicative, since I know that obeys the applicative laws and since I already have a working sort for that.

There’s another way to represent traversable things. The library has the type for representing explict variants of as lens-style combinators. In fact, the definition of unifies with the type of , so we can just plug that in in place of the type class constraint.

We can use this function to sort a structure over any traversals defined using the enormous world of lens combinators. For example, if you want to sort a list of lists as though it were one big concatenated list, without losing the nested list structure, you can just use .

The coolest thing about this is the class in . Basically, it’s the alternative to . It just gives us a for various types that can’t have instances. One nice thing this is used for is traversing all the values in a homogeneous tuple, using (of course this is defined for many arities).

If we go into GHCi:

So now we have type safe homogeneous tuple sorting for free. Pretty sweet.

This is yet another reason that applicatives and traversables are awesome. The use cases for the applicative don’t end here. You can use it to get a instance for any for example (though that definition put much more thought into optimization). Basically, if you ever need to retain monomorphic information in an applicative context, is the thing for the job.|||

Continuing my unending train of thoughts on static analysis ofeffects, in this post I’m going to talk about using Applicative tosort any collection. The Trav...