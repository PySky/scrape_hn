Declare your Azure Function triggers, inputs and outputs in code:

and then use servernet command line tool to generate Azure Functions release package:

that will copy your assembly with its dependencies and generate project.json that is ready to deploy:

Using Azure Functions CLI create a new Function App, and then generate a function from your binary:

Or generate functions for all types decorated with [AzureFunction] in the assembly:

Ready to run it? Follow these steps to configure you Function App as Visual Studio project. If you are going to test it locally be sure to setup connection strings in appsettings.json (you most likely will need to set IsEncrypted: false), but if you are not sure how, just start running the app locally, the console prompt will guide you.

Use [AzureFunction] attribute to let command line tool to autodetect functions to generate (see above), or to override parameters like Disabled and Name:

Azure Functions provides binding of your code to various events/triggers. What ServerNET provides is letting you to focus on your code and generate deployable Azure Functions package, including boilerplate like function.json with trigger/input/output bindings and release layout of the Azure Function. ServerNET also limits you to things that are supported by Azure Functions, e.g. according to Azure Function guidelines when you want to setup a webhook trigger you can't use methods property that you'd normally use for HTTP trigger. ServerNET provides strongly typed parameterization of your triggers, input and output parameters. What can't be enforced in design time (i.e. at compile time) is enforced at generation time (using ServerNET CLI), before you deploy to Azure, which means if there is any problem with your function definition you'll find out as soon as possible.

This library supports all the same trigger, input and output parameters as Azure Functions. Few exceptions are patterns that are bad practice, e.g. out HttpResponseMessage parameter. Pick entry method/function (currently only public static methods are supported) for your logic, decorate it with provided attributes and ServerNET CLI will generate deployable Azure Functions for you:

For complete documentation on how to use HTTP and WebHook parameters in Azure Functions see official documentaion. For complete example that uses HTTP request and response see HttpOutputFunction.

Decorate your entry method parameter with [HttpTrigger] attribute (sample). Below is the list of parameter types that can be used with [HttpTrigger] attribute:

Decorate your entry method parameter with [WebHookTrigger] attribute (sample). Works with the same parameter types as HTTP Trigger.

Decoreate your entry method (not parameter) with [HttpOutput] attribute (sample). Using out HttpResponseMessage parameter is bad practice, hence only return parameter is supported (including async option with Task<HttpResponseMessage>). Below is the list of parameter types that can be used with [HttpResponse] attribute:

For complete documentation on how to use Timer parameters in Azure Functions see official documentaion.

Decorate your entry method parameter with [TimerTrigger] attribute (sample). Below is the list of parameter types that can be used with [TimerTrigger] attribute:

For complete documentation on how to use Blob parameters in Azure Functions see official documentaion.

Decorate your entry method parameter with [BlobTrigger] attribute (sample). Below is the list of parameter types that can be used with [BlobTrigger] attribute:

Decorate your entry method parameter with [Blob] attribute (sample). Below is the list of parameter types that can be used with [Blob] attribute:

Decorate your entry method out parameter with [Blob] attribute (sample). Below is the list of parameter types that can be used with [Blob] attribute:

For complete documentation on how to use Queue parameters in Azure Functions see official documentaion.

Decorate your entry method parameter with [QueueTrigger] attribute (sample). Below is the list of parameter types that can be used with [QueueTrigger] attribute:

Decorate your entry method out parameter with [Queue] attribute (sample). Below is the list of parameter types that can be used with [Queue] attribute:

For complete documentation on how to use Table parameters in Azure Functions see official documentaion.

Decorate your entry method parameter with [Table] attribute (sample). Below is the list of parameter types that can be used with [Table] attribute:

Decorate your entry method parameter with [Table] attribute (sample). Below is the list of parameter types that can be used with [Table] attribute:|||

servernet - Azure Functions made easy