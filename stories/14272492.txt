It seems recently like Microsoft has been clawing it's way back to cool in the hearts and minds of developers (or, perhaps, there for the first time). With Windows 10, new initiatives like Bash on Windows(Γ), and interesting first-party hardware, it's forging into spaces thought surrendered to the likes of Apple and everyone's favorite, affable penguin. We at Containership are particularly interested in Windows for it's ability to run Docker containers atop the NT kernel. Those of us involved in the porting effort find ourselves in front of Windows boxes every day ( and not not necessarily hating it ). But the absence of one common GNU/Linux trope is leaving me a bit lost: the tiling window manager.(Δ)





Initial Efforts

There is some rudimentary tiling support built into Windows since 7, called Snap. Unfortunately, it lacks the ability to easily rearrange or resize windows from the keyboard. Not having to resort to the mouse in the handling of window arrangement is one of the primary benefits of the tiling paradigm.



I also tried an application called Bug.n that bills itself as, "a tiling window manager add-on for the Explorer shell of Microsoft Windows." This was reasonably workable but not without fault. I found that windows would often lose their state, floating instead of tiling. The shortcuts for moving and resizing would inexplicably, and frustratingly, fail. It also crashed a handful of times, requiring it to be relaunched. Ultimately, Bug.n feels like a kludge bolted onto the side, and stepping on the toes of, the native management going on in Windows.



Penultimately, I thought about running a VM inside of Windows. But, because we work with Docker, I was limited to one choice of virtualization technology: Hyper-V. I know from experience that Hyper-V is great in a server environment but tends to stumble a bit as a developer tool, having issues with resolution and rendering performance.



 

Eureka?

Finally it occurred to me; I could run Xmonad, my tiling window manager of choice, inside of a Docker container and pipe the output to an XServer running on Windows. Would that work? I set out to see.



First I pulled down clean ubuntu image:





and installed Xming, a popular Windows XServer, from Chocolately.



 



At this point, one needs to determine the IP addresses that will get assigned to the host box. This is easy enough to do. When installing Docker, a new virtual network adapter will be created called vEthernet (DockerNAT). This represents the virtual switch that Hyper-V uses for the MobyLinux VM on which containers actually execute. Running ipconfig from a DOS or Powershell prompt should show the IP address for this adapter. That's the address at which Docker containers will see the physical (Windows) host.

Now we need to find out the address assigned, not to the container or physical host, but to the Linux virtual host that runs the containers (it's like a onion). To do this I ran a new container with net=host enabled.



 



within that container run:



 



The output, after installing the pre-reqs, should look something like this:

The interface in question is called hvint0 - the inet address listed here is what you want.





All Together Now

So, at this point, I knew I had all the pieces. It's time to get to work. The first step is to find a file called X0.hosts that resides in the folder to which Xming was installed. By default, Xming only allows connections coming from localhost, but we need to add the IP of the MobyLinux VM. Append it to the bottom of this file, and save.

Xming installs two binaries, one starts a server that's configured with sane defaults to display each application in it's own floating Window. Obviously we want XMonad to handle the window positioning so this isn't want we want. Instead open the XLaunch binary installed by Xming. Select the "One Window" configuration, all the other options can be left at their defaults.

Now we need to run an appropriately configured Ubuntu container. Opening a prompt type



 docker run -it --env DISPLAY=[IP OF WINDOWS HOST AS SEEN FROM CONTAINER]:0.0 ubuntu 



Finally install Xmonad && run.



 



And…

It works. Somewhat. It's not the fastest thing in the world, but it's certainly usable. You'll probably also want to install Firefox and an xterm at the minimum. You can also mount a directory from your Windows filesystem into the new container so that you can edit a project using Xmonad and all your favorite Linux tooling. I'm not sure how far you could (or should) push this, but if nothing else, it's damn cool. And, in the end, isn't that why we're all here?

FOOTNOTES

Δ: 

In the early days of GUI programming, at Xerox, then Apple and Microsoft, there was some debate as to which was the more appropriate of two competing windowing paradigms. The stacked desktop paradigm is the one most of us know and use today. But many of the early experiments in GUIs (and indeed the shipping version of Windows 1.0) used an alterative model, known as the tiled desktop. If you haven't tried this yet, many developers find it to be a tremendous boon to their productivity. Although, like vi and the Trackpoint, inexplicably, some do not.



Γ:

The Windows Subsystem for Linux should be able to run XMonad using a similar strategy at some point. Currently, certain Linux system calls are unimplemented, and XMonad is (Haskell apps in general are) failing to run.|||

It seems recently like Microsoft has been clawing it's way back to cool in the hearts and minds of developers (or, perhaps, there for the first time). With Windows 10, new initiatives like Bash on…