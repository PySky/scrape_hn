Would you like to measure how long did user spend time in your app? Or maybe you wonder which of created solutions is optimaln for solving your problem? If you do, read that entry becouse I have written it for you!

Itâ€™s easy with StopWatch class! ðŸ™‚ You will find it in System.Diagnostics namespace.

Actions speak louder than words so letâ€™s write simple program both explaning and testing that method! Letâ€™s measure time of 3 seconds threat execution.

This is what you will see on your screen:

As you can see, our code executed in 3000 milliseconds, success! But are you sure? I would not think so. ðŸ™‚ And what does timer.Elapsed means? Let me explain.

Letâ€™s start by reading our measurement. Copy and put those lines at the end of code you have seen above:

This is what you will see on your screen:

Timer.ElaspedMilliseconds â€“ It will show you result of measurement in milliseconds(1000 milliseconds is one second, just checked ;)). Itâ€™s definatelly my favourite way of printing results and I use it in most cases.

Timer.Elapsed â€“ shows total time of measurement in hours, minutes, seconds and even lower values. Itâ€™s useful, but I do prefer Timer.Elapsed Milliseconds.

Timer.ElapsedTicks â€“ shows result of measurement in timer ticksâ€¦ Whatever it mean. Itâ€™s hard for me to say something more about that becouse every time I measure the same pice of code it gives me different results which donâ€™t say anything to me. I do recommend to test it becouse you never know when it will be useful.

Donâ€™t forget that Start() method RESTORE MEASUREMENT, not start it from zero! If you stop it with Stop() and run Start() again it will continue last maesurement. To Begin new measurement use Reset().

As you can see in code above, it will execute in about 4750 milliseconds(od eventually 4751). I begun with running timer and then stopping code to execute 3250 seconds threat. Then I Stop() timer and stopped code again, this time with 1000 milliseconds threat. Becouse I didnâ€™t put Reset() it begun adding time to my last measurement, not from zero. Donâ€™t forget about it becouse it took me time before I found out what was wrong.

But what about storing values of measurements in variables? In secounds for example. Of course you can try playing with dividing result from ElapsedMilliseconds by numbers or using Split() method to get expected value from Timer.Elapsed. But I have something better for you! Use TimeSpan class! Please take a look one the following code:

As you can see, I put result of measurement to data field od TimeSpan class and then I do declare int variable which hold result in seconds. Of course itâ€™s incomplete result but in the same way you cane put hours, minutes, seconds and miliseconds.

I hope I explained you how does StopWatch() class works. Itâ€™s hard to believe for me but back then I thought it was much way complicated.

 You can get similar results with using DataTime() class too. Using StopWatch() is much way easier and reduce Chance of mess in your code but I wonâ€™t kill you if you pick DataTime(). Donâ€™t forget to read about both of them in MSDN.|||

