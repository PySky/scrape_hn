This blog post is about a pattern (pun not intended) I've used in my code for a while, and haven't seen discussed explicitly. A prime example is when doing simplistic parsing using the functions in . (And yes, this is a contrived example, and using parsec or attoparsec would be far better.)

Full versions of the code below are available as a Github Gist, and embedded at the end of this post.

The example: consider a file format encoding one person per line, indicating the name, height (in centimeters), age (in years), and bank balance (in your favorite currency). I have no idea why anyone would have such a collection of information, but let's roll with it:

And we want to convert this into a list of values:

Using the and APIs, this isn't too terribly painful:

We start off with the original value of the line, , and continue to bite off pieces of it in the format we want. The progression is:

If we add to this a pretty straight-forward helper function and a function:

We get the output:

And if we corrupt the input (such as by replacing with ), we get the output:

This works, and the API is particularly convenient for grabbing part of an input and then parsing the rest. However, all of those case expressions really break up the flow, feel repetitive, and make it difficult to follow the logic in that code. Fortunately, we can clean this up with some s and partial pattern matches:

That's certainly easier to read! And our program works... assuming we have valid input. However, let's try running against our invalid input with :

We've introduced partiality into our function! Instead of being well behaved and returning a , our program now creates an impure exception that blows up in our face, definitely not what we wanted with a simple refactoring.

The problem here is that, when using , an incomplete pattern match turns into a partial value. GHC will essentially convert our:

What we really want is for that clause to turn into a value, like we were doing explicitly with our expressions above. Fortunately, we've got one more trick up our sleeve to do exactly that:

We've replaced our with the feature of -notation. In order to make things type-check, we needed to wrap the right hand side in a value (you could also use or , I was just trying to be explicit in the types). But we've still got an incomplete pattern on the left hand side, so why is this better?

When, within -notation, you have an incomplete pattern match, does something slightly different. Instead of using and creating an impure exception, it uses the function. While generally speaking there are no guarantees that is a total function, certain types - like - due guarantee totality, e.g.:

Voila! Exactly the behavior we wanted, and now we've achieved it without some bulky, repetitive s. My general advice around these techniques:

For completeness, you can also achieve this with more explicit conversion to a with the helper function:

While this works, personally I'm not as big a fan:

Hopefully you found this little trick useful. Definitely not earth shattering, but perhaps a fun addition to your arsenal. If you want to learn more, be sure to check out our Haskell Syllabus.

The four versions of the code mentioned in this post are all available as a Github Gist:|||

If you're in a do block, and you need a partial pattern match, should you use a let? This blog post explains why not. Recommended reading for Haskellers.