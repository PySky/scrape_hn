The type is a popular abstraction for defining values that may or may not exist. Many languages use it in place of nullable values. For example, it can be found in Haskell, Elm, Scala ( ), and Swift ( ). In this blog post, I try to explain the advantages of using a similar abstraction specifically as it applies to JavaScript.

Most of my work over the past 4 years has been based around JavaScript programs. I’ve lost count of the number of times I’ve seen bugs because of:

Many bugs appear because of human error, and these types of bugs fit into that category. I want to protect myself, and others, from repeating these mistakes. We’re only human after all.

In JavaScript, can be seen as an alternative to these bad parts of JavaScript—namely nullable values and boolean coercion. In practice, enforces constraints which mean we can eradicate these types of bugs from our programs.

Before looking at , let’s have a look at what these bugs look like in a world without .

Note: these examples use the type as it is defined in Folktale’s data.maybe.

JavaScript has nullable values ( and ) to express empty cases. For example:

could be —given any set of with this type, we can’t be certain what will evaluate to until runtime.

Nonetheless, JavaScript allows us to go ahead and use our variable as if it’s always safe to do so.

Assuming will never be , this code is fine, until all of a sudden this assumption breaks down.

This is a bug that can easily be written into a program, and unless we somehow remember to handle this edge case, we won’t discover the bug until it eventually manifests itself in some production code.

ProTip: In TypeScript with the option enabled, the compiler will force you to handle the case in this example:

JavaScript allows you to use nullable values in strings. This is nearly always a programming mistake, but you won’t even get a runtime error:

Likewise, JavaScript allows us to use a nullable value in calculations, in which case you will likely see unexpected s.

If we used a type, it wouldn’t be possible to write these bugs. This is because you’re forced to:

Let’s look at an example:

Using this abstraction, this whole class of bugs (unexpected / s) can be eradicated from our programs.

In JavaScript, we can use a value of any type in conditionals. JavaScript dynamically converts our value into a boolean on-the-go, a process known as coercion:

When referring to a value that will undergo boolean coercion, we call it truthy or falsy. In this example, is a truthy value, unless the array is empty, in which case it is falsy.

Assuming will never be , this code is fine, until (again) all of a sudden this assumption breaks down. If is , it will be coerced into a boolean as , so our function wrongly interprets this as “age does not exist”:

This is a bug that can easily be written into a program, and unless we somehow remember to handle this edge case, we won’t discover the bug until it eventually manifests itself in some production code.

To fix this, we must make our condition explicit, instead of relying on JavaScript’s boolean coercion:

This is correct, and in this example this would probably suffice. However, when we need to chain calculations, we sacrifice expressiveness for correctness:

Relying on JavaScript’s implicit boolean coercion, as we saw above, can be perfectly safe in some use cases, depending on the type and expected behaviour. For that reason it is possible to selectively rely on boolean coercion when we know it is safe to do so. However, this approach requires a lot of discipline and is prone to human error.

If we want to avoid boolean coercion bugs in our code without having to require discipline or extra verbosity, we can use a type.

We can think of as an abstraction over the condition checking “does this value exist” ( ), with an API for performing common operations to the inner value:

Finally, here is how our example code looks using :

With , we never have to write a condition to check if a value exists or not. Our code is more concise, and most importantly, we can no longer write boolean coercion errors into our program.

ProTip: If you’re a TypeScript user, tslint has a rule to disallow boolean coercion called .

Where JavaScript may return “nothing”, it will return or . In practice, this means you end up defining helper functions to handle the conversion to a . Of course, you then must remember to use these helper functions. (In languages with native types, this is usually the standard for most APIs.)

Choose your weapon from any of these libraries which provide decent implementations of the type (also called ). The differences are mostly insignificant. I would personally pick something that conforms to the Fantasy Land spec, as this will provide interoperability with other conforming implementations, and also with libraries which rely on the interfaces defined in this spec, such as Sanctuary and Ramda.

enforces constraints which make it impossible to write certain types of common bugs into our programs.

In JavaScript, there are many places we must handle nullable values, such as when accessing a value from an array with bracket notation or . However, it’s easy to forget to handle these null cases. By switching to APIs that return instead of nullable values, we are forced to handle all cases—when the value does and does not exist.

JavaScript’s boolean coercion is often thought as convenient, but it’s easy to forget about the nuances of this process. As we have seen, boolean coercion does much more than just check for existance, so in practice it is not safe to use non-boolean values as conditions. perfectly captures the idea of a value that may or may not exist, and by adopting this abstraction, we can no longer repeat this mistake.

There are most definitely more advantages and disadvantages to using a type in your JavaScript that I haven’t touched upon here. If you have any comments or thoughts, I would love to hear them. Get in touch on Twitter. :-)

Huge thanks to those who reviewed this article: Sébastien Cevey, David Rapson, and Tom Harding.|||

The Maybe type is a popular abstraction for defining values that may or may not exist. Why should you use it in JavaScript?