If we ever want to know how background job works, fastest way to find k smallest elements in an array, how merging tables in database works behind the sense, keep reading. Because in this article, we will discuss about priority queues and disjoint set. Both data structures are beautiful to solve these problems. In the end, we will solve these problems above. Happy reading!

Priority Queue is a Queue where each element is assigned a priority and elements com out in order by priority. Typical use case of priority queue is scheduling jobs. Each job has a priority and we process jobs in order of decreasing priority. While the current job is processed and new jobs may arrive.

Priority Queue is used in many algorithms:

You can implement priority with unsorted/sorted Array or List but each one has an trade off:

But by using binary heap, we can do Insert with O(logn) and ExtractMax with O(logn).

Binary heap has 2 types: binary min-heap and binary max-heap. In this article, we will discuss about binary max-heap. On the other side, binary min-heap has the same way of implementation.

Binary max-heap is a binary tree(each node has zero, one or two children) where the value of each node is at least the values of its children.

As you see, every children node has value not larger than the parent node. The root node has biggest value.

As you see, we attach new node 32 to node 7, and we bubble it to node 29.

We swap root node 42 and random leaf node 12 first, and remove node 42. The max-heap is violated now, we need to sift down node 12 as root down to children. At the final step, we have node 29 is root node.

Step 1: Make that value of node A becomes biggest(infinity). We will do SiftUp operation to make node A become a root node.

Step 2: We do ExtractMax operation that describes above.

We know how heap works, we need to find out the way to build a heap. To build a heap and keep a binary heap-tree shallows, we have to fill the new node from left to right on last level. It’s called complete binary tree. Formally:

A binary tree is complete if all its levels are filled except possibly the last one which is filled from left to right. So the height of a complete binary tree with n nodes is at most O(logn).

A complete binary tree has elements filled from left to right, so we can store the tree as an Array where

Because we store as an array, each operation we perform need to keep the tree completed.

Back to sorting problem, we observer that the root node of a max heap is the maximum value. What if we do ExtractMax() and put into another array, the result will be sorted decrease array. It’s fundamental of selection sort. It costs O(nlogn).

In the matter of fact, we can do better heap-sort algorithm that didn’t use any extra array, it’s in-place heap sort algorithm. Given an array

We represent this array A as a heap:

Now we need to repair all nodes to satisfy the property of max-heap. We can start repairing the nodes in all subtrees of depth 1(depth 0 is all the leaves). The node from depth 1 is from n/2 down to 1

We start from parent node 5, 4, 3, 2, 1([16, 2, 3, 1, 4]). Each step, we do SiftDown operation. Finally, we can have a max heap(f).

To sort a max heap, we just swap the node A[1] and A[size], remove A[size] and SiftDown(1).

Given an array A[1…n], and 1 ≤ k ≤ n. Output the last k elements of a sorted version of A.

With heap sort, we easily solve this problem:

The running time is: O(n+klogn). For the small number k = O(n/logn), the cost will be O(n). Really impressive.

Disjoint sets has many applications, one of them is determining the connected components of an undirected graph.

Disjoint set data structure maintains the collection of S1, S2, …, Sk of disjoint dynamic set. Each set we represent as a rooted tree.

We can store these set(rooted trees) by using an array which is the value A[i] is the parent of node i or node i if it is the root.

We have 2 rooted trees and we want to union these trees. Normally, we have 2 ways to do that:

The good one is the one with shorter of height. How do we know to choose the root node for union set?

To answer that question, we just need to use a rank as heigh to choose the final root. In other words, we just hang the shorter one under the root of a taller one. To avoid re-calculating the rank(height) each time to do union operation, we need to store height of each subtree in an array rank[1…n] where rank[i] is the height of the subtree whose root is i.

We change our implements of disjoint set operations:

Let visualize the process of building a disjoint set, and do union(2, 4), union(5, 2), union(3, 1), union(2, 3), union(2,6).

Each step, we need to choose lower rank tree and attach it to higher rank tree. We only increase rank of result when we have 2 trees with the same rank.

While building the tree, we can immediately realize that our tree will become higher, higher. Let see how to find element 6, we do travel to all parent node to get root node 5.

Notice that all node 6, 12, 3 has same root node 5, so it will be wonderful if we can transform all their parent node into direct parent node 5 likes this one:

You can see, we can compress the height and we can find element faster. You will be surprise to see that the implement of this heuristic so simple:

In this problem you will convert an array of integers into a heap. This is the crucial step of the sorting algorithm called HeapSort. It has guaranteed worst-case running time of 𝑂(𝑛 log 𝑛) as opposed to QuickSort’s average running time of 𝑂(𝑛 log 𝑛). QuickSort is usually used in practice, because typically it is faster, but HeapSort is used for external sort when you need to sort huge files that don’t t into memory of your computer.

Task. The first step of the HeapSort algorithm is to create a heap from the array you want to sort. By the way, did you know that algorithms based on Heaps are widely used for external sort, when you need to sort huge files that don’t t into memory of a computer?

Your task is to implement this first step and convert a given array of integers into a heap. You will do that by applying a certain number of swaps to the array. Swap is an operation which exchanges elements 𝑎𝑖 and 𝑎𝑗 of the array 𝑎 for some 𝑖 and 𝑗. You will need to convert the array into a heap using only 𝑂(𝑛) swaps, as was described in the lectures. Note that you will need to use a min-heap instead of a max-heap in this problem.

Input Format. The first line of the input contains single integer 𝑛. The next line contains 𝑛 space-separated integers 𝑎𝑖.

Output Format. The first line of the output should contain single integer 𝑚 — the total number of swaps. 𝑚 must satisfy conditions 0 ≤ 𝑚 ≤ 4𝑛. The next 𝑚 lines should contain the swap operations used to convert the array 𝑎 into a heap. Each swap is described by a pair of integers 𝑖,𝑗 — the 0-based indices of the elements to be swapped. After applying all the swaps in the specified order the array must become a heap, that is, for each 𝑖 where 0 ≤ 𝑖 ≤ 𝑛 − 1 the following conditions must be true:

Note that all the elements of the input array are distinct. Note that any sequence of swaps that has length at most 4𝑛 and after which your initial array becomes a correct heap will be graded as correct.

Change the BuildHeap algorithm from the lecture to account for min-heap instead of max-heap and for 0-based indexing.

While building a heap, we will do SiftDown operation from n/2-th down to 1-th node to repair a heap to satisfy min-heap property. Each time we swap nodes, we need to track it .

In this problem you will simulate a program that processes a list of jobs in parallel. Operating systems such as Linux, MacOS or Windows all have special programs in them called schedulers which do exactly this with the programs on your computer.

Task. You have a program which is parallelized and uses 𝑛 independent threads to process the given list of 𝑚 jobs. Threads take jobs in the order they are given in the input. If there is a free thread, it immediately takes the next job from the list. If a thread has started processing a job, it doesn’t interrupt or stop until it finishes processing the job. If several threads try to take jobs from the list simultaneously, the thread with smaller index takes the job. For each job you know exactly how long will it take any thread to process this job, and this time is the same for all the threads. You need to determine for each job which thread will process it and when will it start processing.

Input Format. The first line of the input contains integers 𝑛 and 𝑚.

The second line contains 𝑚 integers 𝑡𝑖 — the times in seconds it takes any thread to process 𝑖-th job. The times are given in the same order as they are in the list from which threads take jobs.

Output Format. Output exactly 𝑚 lines. 𝑖-th line (0-based index is used) should contain two space- separated integers — the 0-based index of the thread which will process the 𝑖-th job and the time in seconds when it will start processing that job.

Think about the sequence of events when one of the threads becomes free (at the start and later after completing some job). How to apply priority queue to simulate processing of these events in the required order? Remember to consider the case when several threads become free simultaneously.

Beware of integer over ow in this problem: use type long long in C++ and type long in Java wherever the regular type int can over ow given the restrictions in the problem statement.

The idea is we need a priority queue to keep workers. We compare 2 workers by its status and index. To choose the next worker, we just choose the root min-heap tree. To mark it working, we need to ChangePriority of root tree and repair tree.

In this problem, your goal is to simulate a sequence of merge operations with tables in a database.

Task. There are 𝑛 tables stored in some database. The tables are numbered from 1 to 𝑛. All tables share the same set of columns. Each table contains either several rows with real data or a symbolic link to another table. Initially, all tables contain data, and 𝑖-th table has 𝑟𝑖 rows. You need to perform 𝑚 of the following operations:

1. Consider table number 𝑑𝑒𝑠𝑡𝑖𝑛𝑎𝑡𝑖𝑜𝑛(𝑖). Traverse the path of symbolic links to get to the data. That is, while 𝑑𝑒𝑠𝑡𝑖𝑛𝑎𝑡𝑖𝑜𝑛(𝑖) contains a symbolic link instead of real data do 𝑑𝑒𝑠𝑡𝑖𝑛𝑎𝑡𝑖𝑜𝑛(𝑖) ← symlink(𝑑𝑒𝑠𝑡𝑖𝑛𝑎𝑡𝑖𝑜𝑛(𝑖))

2. Consider the table number 𝑠𝑜𝑢𝑟𝑐𝑒(𝑖) and traverse the path of symbolic links from it in the same manner as for 𝑑𝑒𝑠𝑡𝑖𝑛𝑎𝑡𝑖𝑜𝑛(𝑖).

3. Now, 𝑑𝑒𝑠𝑡𝑖𝑛𝑎𝑡𝑖𝑜𝑛𝑖 and 𝑠𝑜𝑢𝑟𝑐𝑒(𝑖) are the numbers of two tables with real data. If 𝑑𝑒𝑠𝑡𝑖𝑛𝑎𝑡𝑖𝑜𝑛(𝑖) != 𝑠𝑜𝑢𝑟𝑐𝑒(𝑖), copy all the rows from table 𝑠𝑜𝑢𝑟𝑐𝑒(𝑖) to table 𝑑𝑒𝑠𝑡𝑖𝑛𝑎𝑡𝑖𝑜𝑛(𝑖), then clear the table 𝑠𝑜𝑢𝑟𝑐𝑒(𝑖) and instead of real data put a symbolic link to 𝑑𝑒𝑠𝑡𝑖𝑛𝑎𝑡𝑖𝑜𝑛(𝑖) into it.

4. Print the maximum size among all 𝑛 tables (recall that size is the number of rows in the table). If the table contains only a symbolic link, its size is considered to be 0.

See examples and explanations for further clarifications.

Input Format. The first line of the input contains two integers 𝑛 and 𝑚 — the number of tables in the database and the number of merge queries to perform, respectively.

The second line of the input contains 𝑛 integers 𝑟𝑖 — the number of rows in the 𝑖-th table.

Then follow 𝑚 lines describing merge queries. Each of them contains two integers 𝑑𝑒𝑠𝑡𝑖𝑛𝑎𝑡𝑖𝑜𝑛(𝑖) and 𝑠𝑜𝑢𝑟𝑐𝑒(𝑖) — the numbers of the tables to merge.

Output Format. For each query print a line containing a single integer — the maximum of the sizes of all tables (in terms of the number of rows) after the corresponding operation.

In this sample, all the tables initially have exactly 1 row of data. Consider the merging operations:

1. All the data from the table 5 is copied to table number 3. Table 5 now contains only a symbolic link to table 3, while table 3 has 2 rows. 2 becomes the new maximum size.

2. 2 and 4 are merged in the same way as 3 and 5.

3. We are trying to merge 1 and 4, but 4 has a symbolic link pointing to 2, so we actually copy all the data from the table number 2 to the table number 1, clear the table number 2 and put a symbolic link to the table number 1 in it. Table 1 now has 3 rows of data, and 3 becomes the new maximum size.

4. Traversing the path of symbolic links from 4 we have 4→2→1, and the path from 5 is 5→3. So we are actually merging tables 3 and 1. We copy all the rows from the table number 1 into the table number 3, and now the table number 3 has 5 rows of data, which is the new maximum.

5. All tables now directly or indirectly point to table 3, so all other merges won’t change anything.

In this example tables have diferent sizes. Let us consider the operations:

1. Merging the table number 6 with itself doesn’t change anything, and the maximum size is 10 (table number 1).

2. After merging the table number 5 into the table number 6, the table number 5 is cleared and has size 0, while the table number 6 has size 6. Still, the maximum size is 10.

3. By merging the table number 4 into the table number 5, we actually merge the table number 4 into the table number 6 (table 5 now contains just a symbolic link to table 6), so the table number 4 is cleared and has size 0, while the table number 6 has size 6. Still, the maximum size is 10.

4. By merging the table number 3 into the table number 4, we actually merge the table number 3 into the table number 6 (table 4 now contains just a symbolic link to table 6), so the table number 3 is cleared and has size 0, while the table number 6 has size 11, which is the new maximum size.

Think how to use disjoint set union with path compression and union by rank heuristics to solve this problem. In particular, you should separate in your thinking the data structure that performs union/find operations from the merges of tables. If you’re asked to merge first table into second, but the rank of the second table is smaller than the rank of the first table, you can ignore the requested order while merging in the Disjoint Set Union data structure and join the node corresponding to the second table to the node corresponding to the first table instead in you Disjoint Set Union. However, you will need to store the number of the actual second table to which you were requested to merge the first table in the parent node of the corresponding Disjoint Set, and you will need an additional eld in the nodes of Disjoint Set Union to store it.

We use parent array to store disjoint set.

We use lines array to store maximum of root i.

We need to build disjoint set with raking and path compression heuristic.

See the chapter 6.4 in [CLRS] — Priority Queue

Also see this tutorial on Disjoint Sets data structures.

Also see this visualization of Disjoint Sets with and without Path Compression and Union by Rank heuristics.|||

If we ever want to know how background job works, fastest way to find k smallest elements in an array, how merging tables in database works behind the sense, keep reading. Because in this article, we…