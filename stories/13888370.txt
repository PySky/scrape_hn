mle is a small, flexible console text editor written in C.

You can run instead to build a static binary.

Run to start editing a new text file. Type to type, use directional keys to navigate, to search, for search-and-replace, to save, and to exit. Press for full help.

Run to edit an existing file. To edit multiple files try and use and to switch between them. Press to close a file. You can also specify to start the editor at a certain line number.

mle is customized via command line options. Run to view all cli options.

To set default options, make an rc file named (or ). The contents of the rc file are any number of cli options separated by newlines. Lines that begin with a semi-colon are interpretted as comments.

If is executable, mle executes it and interprets the resulting stdout as described above. For example, consider the following snippet from an executable PHP script:

This overrides the normal grep command with if exists in the current working directory.

mle is extensible via any program capable of standard I/O. A simple line-based request/response protocol enables user scripts to register commands and invoke internal editor functions in order to perform complex editing tasks. All messages are URL-encoded and end with a newline.

Example exchange between a user script (usx) and mle:

In the example above, the user script registers a command called at startup, and mle replies with success. Later, the end-user invokes the command, so mle sends a request to the user script. The user script receives the request and sends a sub-request invoking , to which mle replies with success. Finally the user script returns overall success for the command.

Currently, mle only accepts requests from user scripts while a request to the user script itself is pending. (In other words, mle enforces an "only do stuff if I ask you to" policy.) The exception to this is which can be invoked by user scripts at startup time.

For end-users, user scripts are loaded via the cli option. Commands registered by user scripts can be mapped to keys as normal via .

mle comes with a built-in text editing language called lel, inspired by the sam command language. lel commands can be entered manually at a prompt, or bound to any key via .

mle provides support for non-interactive editing which may be useful for using the editor as a regular command line tool. In headless mode, mle reads stdin into a buffer, applies a startup macro if specified, and then writes the buffer contents to stdout. For example:

If stdin is a pipe, mle goes into headless mode automatically. Headless mode can be explicitly enabled or disabled with the option.

The following programs will enable or enhance certain features of mle if they exist in .

Also check out eon, a fork of mle with some cool features.

mle makes extensive use of the following libraries.|||

mle - a small, flexible console text editor (C)