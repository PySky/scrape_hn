Wild Duck is a distributed IMAP server built with Node.js, MongoDB and Redis. Node.js runs the application, MongoDB is used as the mail store and Redis is used for ephemeral actions like publish/subscribe, locking and caching.

Here's a list of Email/IMAP servers that use database for storing email messages

Wild Duck more or less passes the ImapTest. Common errors that arise in the test are unknown labels (Wild Duck doesn't send unsolicited FLAGS updates) and NO for STORE (messages deleted in one session can not be updated in another).

Yes, it does. You can run the server and get a working IMAP server for mail store, SMTP server for pushing messages to the mail store and HTTP API server to create new users. All handled by Node.js, MongoDB and Redis, no additional dependencies needed. The IMAP server hosting уайлддак.орг uses a MongoDB replica set of 3 hosts.

Yes, historically it has been considered a bad practice to store emails in a database. And for a good reason. The data model of relational databases like MySQL does not work well with tree like structures (email mime tree) or large blobs (email source).

Notice the word "relational"? In fact document stores like MongoDB work very well with emails. Document store is great for storing tree-like structures and while GridFS is not as good as "real" object storage, it is good enough for storing the raw parts of the message. Additionally there's nothing too GridFS specific, so (at least in theory) it could be replaced with any object store.

You can see an example mail entry here. Lines 184-217 demonstrate a node that has its body missing as it was big enough to be moved to GridStore and not be included with the main entry.

Not yet exactly. Even though on some parts Wild Duck is already fast, there are still some important improvements that need to be done:

Whenever a message is received Wild Duck parses it into a tree-like structure based on the MIME tree and stores this tree to MongoDB. Larger attachments (anything above 50kB) are removed from the tree and stored separately in GridStore. If a message needs to be loaded then Wild Duck fetches the tree structure first, if needed loads attachments from GridStore and then compiles it back into the original RFC822 message. The result should be identical to the original messages unless the original message used unix newlines, these might be partially replaced with windows newlines.

Wild Duck tries to keep minimal state for sessions to be able to distribute sessions between different hosts. Whenever a mailbox is opened the entire message list is loaded as an array of UID values. The first UID in the array element points to the message #1 in IMAP, second one points to message #2 etc.

Actual update data (information about new and deleted messages, flag updates and such) is stored to a journal log and an update beacon is propagated through Redis pub/sub whenever something happens. If a session detects that there have been some changes in the current mailbox and it is possible to notify the user about it (eg. a NOOP call was made), journaled log is loaded from the database and applied to the UID array one action at a time. Once all journaled updates have applied then the result should match the latest state. If it is not possible to notify the user (eg a FETCH call was made), then journal log is not loaded and the user continues to see the old state.

Assuming you have MongoDB and Redis running somewhere.

You can either modify the default config file or alternatively generate an environment related config file that gets merged with the default values. Read about the config module here

To use the default config file, run the following

Or if you want to use environment related config file, eg from , run the following

See see below for details about creating new user accounts

Users, mailboxes and messages can be managed with HTTP requests against Wild Duck API

The response for successful operation should look like this:

After you have created an user you can use these credentials to log in to the IMAP server. To be able to receive mail for that user you need to register an email address.

Creates a new email address alias for an existing user. You can use internationalized email addresses like андрис@уайлддак.орг.

First added address becomes main by default

The response for successful operation should look like this:

After you have registered a new address then SMTP maildrop server starts accepting mail for it and store the messages to the users mailbox.

The response for successful operation should look like this:

Recalculates used storage for an user. Use this when it seems that quota counters for an user do not match with reality.

The response for successful operation should look like this:

Be aware though that this method is not atomic and should be done only if quota counters are way off.

The response for successful operation should look like this:

The response for successful operation should look like this:

Returns all mailbox names for the user

The response for successful operation should look like this:

The response for successful listing should look like this:

HTML content has embedded images linked with the following URL structure:

To fetch the actual attachment contents for this image, use the following url:

The response for successful operation should look like this:

Retrieves an attachment of the message

The response for successful operation should look like this:

This is a list of known differences from the IMAP specification. Listed differences are either intentional or are bugs that became features.

Any other differences are most probably real bugs and unintentional.

Wild Duck does not plan to be the most feature-rich IMAP client in the world. Most IMAP extensions are useless because there aren't too many clients that are able to benefit from these extensions. There are a few extensions though that would make sense to be added to Wild Duck

Create an email account and use your IMAP client to connect to it. To send mail to this account, run the example script:

This should "deliver" a new message to the INBOX of username@example.com by using the built-in SMTP maildrop interface. If your email client is connected then you should promptly see the new message.

Wild Duck Mail Agent is licensed under the European Union Public License 1.1.|||

wildduck - Distributed IMAP server built with Node.js, MongoDB and Redis (beta)