For the first issue of serverlessweekly I prepared a quite long introduction text. Links with information and news can be found at the end of this writing. Following newsletters probably won’t have such a long text at the beginning.

In 2016 serverless generated a lot of buzz. Look at google trends [01] where you see the term “serverless” gets searched with increased regularity starting in December 2015.

The reason for this might be AWS lambda and a talk about AWS Lambda at the re:Invent 2015 [02].

I guess as most of us, I first heard about serverless in the context of AWS lambda and I was a bit skeptical back then. A lot of small functions deployed independently without respecting what software engineers learned about cohesion. From building microservices I already experienced the benefits of deploying services independently but I also experienced the costs of this: More complexity when it comes to ensure everything plays together smoothly once the deploy button is pushed.

Of course API versioning can be used to mitigate this but API versioning isn’t a guarantee that everything will work, it’s just a tactic that needs to be implemented and tested. The complexity increases when the independently deployed components get smaller and hence more. Ending up in functions that are deployed independently might not be a good idea.

To make thinks worse, those functions are tightly coupled to the cloud provider’s technology stack. For example, AWS DynamoDB or AWS Kinesis. It’s like stored procedures I thought, welcome back in 1999.

But then I remembered that one of the core attributes of Cloud is that resources are shared to reduce idle time of servers. Virtualization is used to split up hardware servers into virtual machines so that different customer can share one server in a secure way. Containers have then been used to split up virtual machines so that a virtual machine can be used by different customer applications.

Multitenancy features of databases are used to share the same database service with other applications/customers. That’s also true for other application types. In fact, multitenancy is the core concept in Software as a Service otherwise it’s called “Application Service Provider”.

When you think of serverless as the next level of multitenancy it perfectly makes sense (at least for me) [03]. Your application now shares the application runtime with other applications. With this approach, it’s now possible to charge the customer based on the time his code is executed. If there is no traffic on your application, you don’t pay anything. Pay as you go at its best and also green IT.

In opposite of this, let’s have a look how applications are charged when using a PaaS layer where you pay per application instance which runs all the time. In case you are running a small microservice architecture consisting of 10 services each using 256MB RAM you have to pay for 2560 MB RAM usage. If you want to add redundant instances to make the system height available, it doubles. 4GB from which - in average - only a short percentage is required and from this short percentage the major part is used by the application runtime (e.g. the node.js server or the JVM).

By not thinking of AWS lambda (or more general Function as a Service) as a model how to develop software and instead of thinking of it as a model how to operate software more effective it becomes clear that writing independent functions with low cohesion and using vendor specific technologies is not the idea behind serverless.

Instead the application logic is organized in a way it can be executed on demand. Functions that operate on the same data structures can still be grouped into one application/service and managed in one one git repository. Using frameworks like the serverless framework make this very easy.

Let’s don’t focus our thoughts on AWS Lambda only. There is an article that has already been published in October 2015. It’s called “Why The Future Of Software And Apps Is Serverless” [04]. One quote in this article is:

“It’s no longer about building a “Web app.” It’s about building a distributed system of loosely coupled components in the cloud.”

“Developers could set up their own open source solutions, but that means they have to manage the servers and the queues and the loads. 



 Multiply this effort by the number services an app might consume (task processing, message queues, SMTP servers, payment services), hosted services quickly start to look like the future of computing.”

Regarding to this explanation serverless is not (only) about functions it’s about reusing services which probably have multi-tenancy capability and are managed by other people. SOA already promised that a decade ago and also the latest trend in software architecture: Microservices.

But there is another trend which is - like Functions as a Service - considered a central concept in serverless. It’s Backend as a Service and it minimizes the most wasteful task in software development: Programming. As an ambitious programmer, why do I say that. It’s best explained by this tweet (https://twitter.com/mmrichards/status/602949000690466816).



Best Regards and thank you for subscribing, 

Oliver Wolf





[03]

 Title: Serverless is the new multitenancy

 Author: Anshu Sharma (@anshublog)

 URL: https://techcrunch.com/2016/09/01/serverless-is-the-new-multitenancy/



[04]

 Title: Why The Future Of Software And Apps Is Serverless

 Author: Ken Fromm (@frommww)

 URL: http://readwrite.com/2012/10/15/why-the-future-of-software-and-apps-is-serverless/



Title: How Serverless Applications Will Change Your Business

 Author: Charles Babcock (@babcockcw)

 URL: http://www.informationweek.com/cloud/platform-as-a-service/how-serverless-applications-will-change-your-business/d/d-id/1324389



Title: Gone in 60 Milliseconds - Intrusion and Exfiltration in Server-less Architectures

 Speaker: Rich Jones​

 URL: https://media.ccc.de/v/33c3-7865-gone_in_60_milliseconds?utm_source=webopsweekly&utm_medium=email

|||

Serverlessweekly news issue #1 Give it 5 Minutes - My Road to Understand the Value of Serverless