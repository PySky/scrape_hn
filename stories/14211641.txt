We mentioned this in the last class, but if you’re going to be a programmer, you have to embrace basic laziness. Programmers don’t like to repeat themselves and always look for ways to write less code rather than more to get the same things done. In our last class we saw how using a for loop could reduce the amount of code we had to write to draw a flower. We used a loop to repeat drawing the “petals” of our flower so we didn’t have to write code for every one. Let’s learn about another tool we can put in our programmers toolbelt called functions.

Functions allow us to use the same set of Python statements over and over again, and even change what the Python code does without having to change the code. We’ve already used functions in the previous session in our turtle program. We used the function as part of a loop. The function is built into Python, but what does it do? It generates a range of numbers we can use inside a loop, as simple as that. Let’s start Idle, get into interactive mode and enter this at the Python command prompt: The function created something that will generate a count from to (that’s 10 numbers in total). Notice we told the function how big the range we wanted was by passing as the parameter of the function. Using this in a loop shows the values generated by : Create a for loop that’s going to assign the range of values generated one at a time to the variable . Then inside the loop we’re just printing the latest value of . You’ll notice that value of goes from to , not as you might expect. There are still ten values, but because Python is zero based (starts things at zero, unless told otherwise), the function goes from → . In our flower drawing turtle program we called like this: This generated a range of 36 values, from to . These two examples demonstrate we are changing what the function does based on the value we give to it. The value we give to the function is called a parameter, and the value of that parameter is used to change what the function does. In the examples above the parameter tells the function how many numbers to generate and gives back to our program a way to use them. We’ve also used functions when we were working with our turtle. For example when I changed the color of my turtle , with the function, like this: I was calling the function of the turtle variable , and passed it two parameters, and : The parameter changed the color of the turtle and the color it draws with. The parameter changed the color the turtle used when filling a shape. Okay, so it’s great Python provides a bunch of functions we can use to do different things, how do functions help me be lazy? Well, Python also lets us create our own functions and use them just like we would any built in function. In Idle let’s open our turtle program code from last class and try something out. Modify your program to look like this: Save and run our program and it should create our flower exactly as it did before. You’re probably thinking “what’s the big deal, it did exactly the same thing”, and you’d be right! Notice I renamed our turtle variable from to . Why did I do this? I’m getting ready to draw with two turtles at the same time (coming soon to a lesson near you!). Notice also the function I’ve defined, , has a in between the parenthesis. Even though my turtle variable is defined as , I’m using a variable called inside the function. The function is defined by beginning the program line with the Python keyword , followed by any word we’d like, parenthesis and finally a colon character ‘ ’. Just like the function, where I pass it a value of 36 so it generates 36 numbers, here I’m passing a parameter I’m calling , and it’s using it to draw with. Inside my loop notice I’m calling with my newly renamed variable. This is because the variable name passed to a function as a parameter has nothing to do with the variable name inside the function when it’s defined. Notice also that all the drawing code in the function is indented. Just like the loop this indicates these Python statements are part of the function definition for . When our program runs the loop calls our function 36 times, and each time it turns our turtle ( ) 10 degrees to the right.

We’re getting ready to draw multiple flowers with multiple turtles. To do that and have them look good on the screen we’ll learn some more turtle drawing functions. We can move our turtle without drawing a line by lifting our pen up. In this way we can move the turtle and no line will be drawn. To do this we use the turtle function. It looks like this: Once we’ve moved our turtle where we want it to be without drawing a line, we need to put the pen down again, and the turtle system provides this. We use the function. It looks like this: We can move our turtle to a specific position on the screen using the funciton. We pass x and y coordinates to the function to position our turtle. One thing to be aware of is the 0, 0 coordinates are where our turtle is created (center of the screen) when we did this . So the coordinates we pass to are relative to that starting position. The function looks like this to move our turtle up and to the right: Let’s update our program and move our turtle up and to the right a bit just to see how these new drawing functions work. Make your flower program look like this: Save and run your program and you should see your flower, but its offset up and to the right side of the screen by 150 pixels. Those are the offsets we passed as the first and second parameter to the function call.

We want to draw with multiple turtles, and our goal for this class is to create this image: So far our flower drawing program is working pretty well, but can we change it even more to draw two, or perhaps more, flowers at once? Sure we can, we’re programmers! In order to use two turtles we’ll have to create a second turtle. I’m going to call the second turtle just to stay consistent. Add this to your program right below where we created our first turtle : This creates a second turtle with a different variable name, drawing color and fill color. When we create a turtle it’s starting position is right in the center of the screen, so our second turtle starts out right in the middle of the screen. Let’s move it left and down so and don’t draw on top of each other. Add these lines for turtle under the same lines for : At this point our program should look like this: If save our program and run it our turtle screen looks like this: When you get your program running you’ll notice the second turtle didn’t draw a flower. Why not? Well, we didn’t tell it to draw anything, so it just waited around while the first turtle drew a flower. How do we get it to draw it’s own flower? We add it to the loop. Our updated program now looks like this: Just by adding two lines we got our second turtle to draw its own complete flower. This is a definite win for laziness. All we had to do was add a couple Python statements to draw a complete second flower! By setting things up and using a function we are able to build more and more interesting programs. In fact we could keep going and add more and more turtles to fill the screen with flowers and all we’d have to do is create more turtles and add statements to our loop. But this is starting to look like when we were adding flower petals to start with. Can we be even lazier and organize things differently to handle multiple turtles better? Yes of course, we can use something Python calls lists.

Lists are a way of grouping things together so we can work with them all at once. They’re a handy way of keeping things grouped together and giving that group a name. There’s nothing magical about this, we can create lists easily with Python. If we enter these statements in the interactive window: We created a variable we called containing the list . You can see the things in the list don’t have to be in order. Lists are created by surrounding a set of things separated by commas with the and characters at either end. We can use a list to organize our turtles. Let’s create a list of turtles like this in our program: This creates a variable called that is a list containing our two turtles. Now we can create a new loop that gets a turtle from our list one at a time and draws with it. We do this with these Python statements: We’re using a loop to get each turtle one at a time from our list, assigning it to the variable and calling and with that variable. If we put this inside our main loop, it will be called for each petal the main loop wants to draw. We can now add a third turtle easily by creating a new turtle and adding it to the list. Let’s do that in our updated, three turtle program. I’ve added comments to describe what’s going on: # Create our for loop for 36 petals of the flower # Create our for loop to draw a flower petal with # each turtle in the turtles list I created a third turtle called and just added to the list. Notice that our main loop didn’t change, as far as it’s concerned, it’s just looping 36 times. The inner loop is responsible for calling the function with each turtle variable, and then turning that turtle right 10 degrees. Here’s what the output of the program looks like:

Congratulations, you’re a multi-turtle genius now! You saw how to use Python lists to help us get multiple turtles drawing on the screen. We could keep adding turtles to our hearts content and the program would faithfully make each turtle draw our flower. This worked very well drawing the well controlled structure of the flower. But what if we want to draw something that’s randomly generated, something where the turtles draw something and we don’t know ahead of time what that will be? How can we use what we know already to help us do that? In the next class in this series you’ll teach our program how to make decisions and do things on its own:|||

In part two of this four-part Python introduction you’ll see how to write reusable “code building blocks” in your Python programs with functions.