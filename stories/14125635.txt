Dynamic programming is a very powerful algorithmic design technique to solve many exponential problems. In practice, dynamic programming likes recursive and “re-use”. So to solve problems with dynamic programming, we do it by 2 steps:

Let take a look at Change Money problem:

We have 3 types of coin: 6 cents , 5 cents and 1 cent. What is the minimum number of coins need to change 9 cents?

To solve this problem using Dynamic Programming, the first thing we have to do is finding right recurrences for this problem.

We can see that the minimum number of coins need to change 9 cents is the minimum of coins that we need to change 3(= 9–6) or 4(= 9–5) or 8(= 9–1). So we have recurrences:

We can use recursive technique to implement this problem but it will be very slow. Why slow? Take a look at recursive tree when we want to change 76 cents:

As we see in the visualized tree, to compute minimum number of changing 76 cents, we compute minimum of changing 70 cents, 71 cents, 75 cents, and so on…The computing of changing 70 repeated 3 times, with large changed money, we will repeat many sub-problems. It take much time. So, Dynamic Programming usually likes “memorized all result of sub-problems and re-use”. The idea is if we did compute changed 70 cents, we don’t need to compute again, we just return the computed result 70 cents.

The nice way to implement Dynamic Programming is we compute smaller sub-problems first, save results into a dp_array, continue util we get the result. For example, to solve changing 9 cents, we will compute minimum number of coins that we want to change for 0, 1, 2, 3, 4… first, save result into a dp_array, continue util we compute the 9 cents and we get the answer.

Let do it step by step:

Explain: At step that we compute 6 cents, it’s easy to find out that the dp_array = [0, 1, 2, 3, 4, 1, 1].

To compute changing 7 cents, follow the recurrences, we need to find minimum of (compute(6 = 7–1), compute(2 = 7–5), compute(1 = 7–6)).

We have dp_array is the cached results of computing smaller money, so we have compute(6) = 1, compute(2) = 2, compute(1) = 1. Minimum of these computing money is 1. We have 2 choices:

So, we need 2(= 1 + 1) coins to change 7 cents from 1, 5, 6 cents.

Keep doing that, we can build the final dp_array = [0, 1, 2, 3, 4, 1, 1, 2, 3, 4].

The answer to change 9 cents is dp_array[9] = 4 coins.

To summary, we will compute smaller sub-problems first, save results, at each step, we reuse sub-problem results from saved results. Do it until we get the answer.

Edit distance problem is a bit difficult to understand the problem and the idea to solve. But once you understand it, the problem seems to be very clear and easy to solve by Dynamic Programming.

You can see when you type something misspelling, the spell checker will raise warning by looking in dictionary for other words that are close by. What is standard of measurement? In the other words, how do we compute the distance between 2 strings?

The natural way of computing distance between 2 strings is extending, aligning to match up as many characters as possible. For example, two possible alignments of SNOWY and SUNNY [1]

We try to align SNOWY and SUNNY string to get as many matched characters as possible. The more matched characters, the closer of distance we have. If we call the “_” in “S_NOWY” is insert operator or delete operator(delete “U” from SUNNY) and “_” in “SUNN_Y” is the same, insert operator to SUNNY or delete operator(delete W in SNOWY) and the mismatch (O and N) is the mismatch operator. Then we can say that it costs 3 operators (insert or delete, mismatch) to transform SUNNY to SNOWY. These are “insert U”, “substitute O — N” and “delete W”.

Note: We will use insert operator for “_” in string above and delete operator for “_” in string below.

So, the distance of 2 strings is the minimum number of operators insert, delete and mismatch to transform string A to string B.

To compute Edit Distance of A and B, we need to find out the right recurrences. We have A[1…n], B[1…m] called string A has n characters, string B has m characters. We will find the relationship of subproblems: A[1…i], B[1…j]. We have 4 ways to align A[1…i], B[1…j].

To compute distance D(i, j) between A[1…i] and B[1…j], we need to compute D(i, j-1), D(i-1, j), D(i-1, j-1).

So, we will use 2-D dimensions array to save the computed distances D.

And clearly that the distance if D(0, j) = j and D(i, o) = i.

To compute D(1, 1), we just need to get value D(i, j-1), D(i-1, j), D(i-1, j-1) from this computed distances D, means D(1, 0), D(0, 1), D(0,0).

So on, we compute D(1, 2), D(1, 3)….,D(8, 7). We have the final computed distances D.

As we see, the distance of EDITING and DISTANCE is D(7, 8) = 5.

From that table, we can easy to get distance of EDIT AND DISTANCE is D(4, 8) = 6. Every sub-problems are computed, memorized to re-use. It’s Dynamic Programming.

Backtracking is a part of Dynamic Programming. We find out the answer of Edit Distance between EDITING and DISTANCE but how can we print out the alignment of the result like:

Backtracking is easy if we have the cached results — computed distances D.

We will go from D(7, 8)(the final result), to know how D(7, 8) is aligned from, we just check how do we calculate the value of D(7, 8) is from D(7, 7), D(6, 8) and D(6, 7). In this case, D(7, 8) = D(6, 7) + 1 which is mismatch operator. Keep do that, we find the final alignments.

We can general the way we backtracking results, to know D(i, j) is aligned, we need to check the value of insert operator - D(i, j-1) + 1, delete operator — D(i-1, j) + 1, mismatch operator — D(i-1, j-1) and match operator D(i-1, j-1). D(i, j) is one from these values.

In the last article about Big-O and Greedy algorithms, we discuss about Fractional Knapsack, which is the items can be divided. The discrete Knapsack problem is different, each item is either taken or not.

There are 2 types of Discrete Knapsack: with repetitions and without repetitions.

Input: We have n items with weights: w1, w2, …, wn and value v1, v2, …vn. And total capacity weight: W.

Output: The maximum value of items whose weight does not exceed W. Each item can be used any number of times.

To solve this problem with Dynamic Programming, we need to find out the recurrences(sub-problems) and design caching results.

As we can easily see that, to find maximum value of items W(w1 + w2 + …wi), we need to find maximum of (w2 + w3 + … + wi) + v1, (w1 +w3 + … + wi) + v2, ….., (w1+w2+…+w(i-1)) + wi. Formally,

That is our recurrences we need. So we compute the maximum of W = 1, W=2,….. until we have W = W. We just need an array W[0…W] to save the cached results.

The pseudocode for Knapsack with repetitions problem:

Input: We have n items with weights: w1, w2, …, wn and value v1, v2, …vn. And total capacity weight: W.

Output: The maximum value of items whose weight does not exceed W. Each item can be used at most once.

To find out the recurrences of this problem, we need to clarify the main point:

So, we need to compute the maximum value of (w = 1, 2,….W, i = 1), (w = 1, 2….W, i = 2), …. ( w= 1, 2, ….W, i = n) to get the result value(w, n). We need an 2-D dimensions array to store the cached results.

The pseudocode for Knapsack with repetitions problems.

We have 4 items with weight (w1, v1)= (6, 30), (w2, v2)= (3, 14), (w3, v3)= (4, 16), (w4, v4)= (2, 9).

By using that strategy, we can build the final table:

As we can see, the value[w=10, i=4] is 46. That value is calculated from

After we built the table has all values of result. We can use it backtracking to mark which item is used. Like above example, value(10, 4) = 46 is chosen from value(8, 2) + 9. So, we can mark item 4 is not used.

A good problem to solve by Dynamic Programming is Placing Parentheses problem.

Input: A sequence of digits d1, . . . , dn and a sequence of operations

Output: An order of applying these operations that maximizes the

value of the expression. d1 op1 d2 op2 ··· op(n−1) dn .

How to place parentheses in an expression 1 + 2 — 3 x 4 — 5 to maximize its value?

To find out the right recurrences of this problem. We assume that the last operation in an optimal parenthesizing of expression 5 − 8 + 7 × 4 − 8 + 9 is x.

So the goal is finding out the maximum of (5−8+7)×(4−8+9)

We can see the subproblems now, we have 2 sub-expression: s1, s2. To find maximum of s1 x s2, we will find max{ min(s1) x min(s2), min(s1) x max(s2), max(s1) x min(s2), max(s1) x max(s2) }. Base on that, we can compute the maximum of (5 − 8 + 7) × (4 − 8 + 9)

Generally, to find maximum of an subexpression E(i, j), we follow the recurrences:

M(i, j) is maximum of E(i, j), m(i, j) is minimum of E(i, j).

This means to compute M(i, j) we need to compute and cached the result M(i, k) and M(k+1, j) first. To do that, we will compute all subproblems in order of increasing (j — i). In the other word, we need compute (j-i)= 1 first, then (j-i)= 2……For example, For compute 5 − 8 + 7 × 4 − 8 + 9, we need to compute (5 − 8), (8 + 7), (7 x 4), (4 − 8), (8 + 9) subproblems first — Then compute (5 — 8 +7), (8+7 x 4), (7 x 4–8), (4–8+9) and so on….

Base on that strategy, we can build the table for expression: 5 − 8 + 7 × 4 − 8 + 9

It takes time to understand Dynamic Programming for each problem, but once you understand it and find out the right recurrences, the code will be easy to implement. Let’s exercise some problems to fully understand the Dynamic Programming.

You are given a primitive calculator that can perform the following three operations with the current number x: multiply x by 2, multiply x by 3, or add 1 to x. Your goal is given a positive integer n, find the minimum number of operations needed to obtain the number n starting from the number 1.

Task. Given an integer n, compute the minimum number of operations needed to obtain the number n starting from the number 1.

Output Format. In the first line, output the minimum number k of operations needed to get n from 1. In the second line output a sequence of intermediate numbers. That is, the second line should contain positive integers a0, a2,…, a(k-1) such that a0 =1, a(k-1) =n and for all 0≤i<k-1, ai+1 is equal to either ai + 1, 2 x ai, or 3 x ai. If there are many such sequences, output any one of them.

Explanation:

Here, we first multiply 1 by 2 two times and then add 1 ( ((1 x 2) x 2) + 1). Another possibility is to first multiply by 3 and then add 1 two times. Hence “1 3 4 5” is also a valid output in this case.

Explanation:

Again, another valid output in this case is “1 3 9 10 11 33 99 297 891 2673 8019 16038 16039 48117 96234”.

Your goal is to design and implement a dynamic programming solution for this problem. A natural subproblem in this case is the following: C(n) is the minimum number of operations required to obtain n from 1 (using the three primitive operations). How to express C(n) through C(n/3), C(n/2), C(n-1)?

First thing to do is finding out the recurrences of this problem. It’s easy to see that for n = 0, 2, 3. We just need 1 operation. n = 1 cost 0 operation.

For n = 4, we can represent 4 = 4/2 * 2 or 4 = (4–1) + 1.

which is C(4) = C(n/2) + 1 or C(4) = C(n-1) + 1. Because 4 is not divided by 3 so, we ignore C(n/3).

By this observe, we can generalize the recurrences for this problem:

We have the recurrence, we can easily implement it:

After we compute the minimum of operations, we need to backtracking to give the sequence of number. As we talk before, after we compute the minimum of operations, we have the cached result: result. It contains all number of operations we need to reach from 0, 1, 2, … n.

For example, for compute number n, we have an array of operations:

as you see, n = 10 => result[10] = 3. n = 5 => result[5] = 3.

To calculate result[10], we will base on the result[10/2] = 3, and result[10–1] = 2. We choose the smaller operations for the previous number. So we will choose 10 -1 = 9 for the previous number of 10 — ( 9 -> 10) with -1 operation.

Be careful with the number that can divide 2 and 3. So we will choose divide by 3 to get smaller number of next n = n/3

This problem is about implementing an algorithm for the knapsack without repetitions problem.

Task. In this problem, you are given a set of bars of gold and your goal is to take as much gold as possible into your bag. There is just one copy of each bar and for each bar you can either take it or not (hence you cannot take a fraction of a bar).

Input Format. The first line of the input contains the capacity W of a knapsack and the number n of bars of gold. The next line contains n integers w0 , w1 , . . . , w(n-1) defining the weights of the bars of gold.

Output Format. Output the maximum weight of gold that fits into a knapsack of capacity W .

Explanation:

Here, we have W = 10, 3 bars of gold: 1, 4, 8. The sum of the weights of the first and the last bar is equal to 9.

To solve this problem, it is enough to implement carefully the corresponding algorithm covered in the lectures.

We just implement the Knapsack without repetitions above. But we need to clarity that: the value of the bar of gold is the same to the weight of the bar of gold.

The edit distance between two strings is the minimum number of insertions, deletions, and mismatches in an alignment of two strings.

Task. The goal of this problem is to implement the algorithm for computing the edit distance between two strings.

Input Format. Each of the two lines of the input contains a string consisting of lower case latin letters.

Output Format. Output the edit distance between the given two strings.

To solve this problem, it is enough to implement carefully the corresponding algorithm covered in the lectures.

In this problem, your goal is to add parentheses to a given arithmetic expression to maximize its value.

Task. Find the maximum value of an arithmetic expression by specifying the order of applying its arithmetic operations using additional parentheses.

Input Format. The only line of the input contains a string s of length 2n + 1 for some n, with symbols s0, s1, . . . , s2n. Each symbol at an even position of s is a digit (that is, an integer from 0 to 9) while each symbol at an odd position is one of three operations from {+,-,*}.

Output Format. Output the maximum possible value of the given arithmetic expression among different orders of applying arithmetic operations.

To solve this problem, it is enough to implement carefully the corresponding algorithm covered in the lectures.

In this problem, your goal is to compute the length of a longest common subsequence of three sequences.

Task. Given three sequences A = (a1, a2,…, an), B = (b1, b2,…, bm), and C = (c1,c2,…,cl), find the length of their longest common subsequence.

Input Format. First line: n. Second line: a1, a2, . . . , an. Third line: m. Fourth line: b1, b2, . . . , bm. Fifth line: l. Sixth line: c1,c2,…,cl.

It might be easier to first design an algorithm finding a longest common subsequence of two (but not three) sequences. For this, review the algorithm for computing edit distance from the lectures.

The hardest job of this problem is to find out the recurrences. At each step, how do we find the relationship between D(x, y, z) from D(x-1, y, z), D(x, y-1, z) and D(x, y, z-1).

This is the last article in Course 1 — Algorithmic Toolbox series. We have 3 strategies to approach an problem: Greedy, Divide and Conquer, Dynamic Programming. We did discuss about Big-O and solve many problems with very large dataset and edges case. To pass the small tests are easy, but making it fast, efficient is not easy at all.

Thanks for your time to read. If you think it’s good, you can click ♡ to recommend my articles to your friends.

If you like this article, you may like:

Change problem: Section “An Introduction to Dynamic Programming: The Change Problem” of [CP]

Advance reading: Chapter 5 “How Do We Compare Biological Sequences” of [CP]|||

Dynamic programming is a very powerful algorithmic design technique to solve many exponential problems. In practice, dynamic programming likes recursive and “re-use”. So to solve problems with…