These Android Interview Questions have been designed carefully in such a way to achieve a good preparation for any Android interview. It is also a knowledge base for the most important concepts in Android development. Good luck in your Android job interview. Let's start! â˜º

Android is an open source mobile operating system developed by Google and based on the Linux kernel. Android is designed primarily for touchscreen devices (smartphones, tablets).

Android application package (APK) is the package file format used to distribute and install application software onto Android.

Dalvik is a register-based Virtual Machine (VM). Every Android app runs in its own process with its own instance of the Dalvik VM.

Note: Dalvik was entirely replaced by ART in Android 5.0 Lollipop.

ART (Android Runtime) is the new runtime environment for Android apps. ART improves the execution efficiency by using AOT (Ahead-of-Time) compilation.

An Android app runs in its own process and can use multiple threads. The thread that the app will be executed upon, most of the time, is called the "main thread" or the "UI thread".

Instant Run has the intention to increase the development speed of Android apps. Instead of rebuilding the whole app, Android is trying to patch the existing app on the Android device to reflect your changes.

Every Android app must have an AndroidManifest.xml file in its root directory. The AndroidManifest.xml file provides essential information about the application to the Android system, which the system must have before it can run any of the application's code.

It contains information about:

Android Debug Bridge (adb) is a command-line tool that lets you communicate with an Android device. It provides a variety of device actions, such as installing and debugging apps.

An Intent is basically a message that is passed between components like Activities or Services. It acts as a trigger to do something.

Intents are asynchronous and allow you to interact with components from the same application as well as with components from other applications. The primary pieces of information in an Intent are:

An implicit Intent does not name a specific component. It declares a general action to perform. The action specifies the thing that the app wants to do.

The system is looking for an appropriate component to start:

If an app wants to trigger a phone call, it only has to specify the corresponding action (ACTION_DIAL):

An explicit Intent specifies the component by the fully-qualified class name to start. This is the common case to start a component in the own app.

A sticky Intent is an Intent that has been sent as a sticky Broadcast, meaning the Intent stays around after the broadcast is complete.

The Android system uses sticky broadcasts to notify receivers that the battery level has been changed (ACTION_BATTERY_CHANGED).

When you call registerReceiver() for that action you will always get the latest Intent for that action. You do not have to wait for the next broadcast!

A PendingIntent wraps a regular Intent that specifies an action to take in the future. At the same time it acts as a token for foreign app components (e.g. AlarmManager, NotificationManager, AppWidgetManager). This token gives the foreign application the permission to execute the app internal Intent when a condition is met (e.g. AlarmManager triggers a PendingIntent at a specific time)

A service is an application component without user interface that can perform long running operations in the background (= the corresponding app does not have to be in the foreground).

Important: A Service runs in the main thread and does not create its own thread. It is important to create a new thread inside the Service instance for CPU-intensive or blocking operations.

There exist two important types of services:

A mixture of both types does also work!

The IntentService is a subclass of Service that uses a worker thread to handle all of the start requests. All tasks are executed sequentially on a separate worker thread. The IntentService cannot run tasks in parallel.

There is no need to spawn an extra thread and there is also no need to call stopSelf(). The IntentService stops itself automatically as soon as all tasks/start requests have been handled.

An IntentService is typically used for long running "fire and forget tasks".

AsyncTask is an abstract class that allows to run short operations in the background and publish results easily on the UI thread.

AsyncTask is a convenient way to perform short operations (a few seconds) from within an Activity or Fragment.

When using an Asynctask inside an Activity or Fragment, check if a running AsyncTask is canceled when the user leaves the Activity/Fragment. Implement AsyncTask inside an Activity or Fragment always as a static inner class and avoid references to the outer Activity/Fragment to avoid memory leaks.

JobScheduler is an abstract class that allows developers to create jobs that execute in the background when certain conditions are met. Typical conditions are:

Important: The job runs on the main thread. It is necessary to use another thread for longer tasks.

Typically it is used to perform an action on a different thread than your own.

It is also used to schedule messages and runnables to be executed at some point in the future.

In the most cases, you'll use a Handler in a background thread to perform some kind of action in the main thread. The Handler objects registers itself in the thread in which it is created and provides a communication channel to this thread.

A Content Provider is part of an Android application that manages access to a repository of data.

It is typically used to provide a way to share data with other apps.

You should consider the usage of a ContentProvider if you plan to share data with other apps.

SharedPreference is a simple mechanism to store data in Android. Data is stored in a collection of key-values in a file.

Anr is the acronym for "Application Not Responding." This is a dialog that the system displays if an app cannot respond to user input.

By using a worker thread for blocking I/O operations or other long running operations.

Android apps normally run entirely on a single thread (UI thread). If an app executes a long running operation on that thread and cannot response to an user input event (e.g. screen touch event) within 5 seconds, the system will show an ANR dialog.

An Activity represents the presentation layer in Android. It provides a screen with which a user can interact in order to do something.

An Android application usually consists of multiple Activities that are loosely bound to each other and can be switched in between during runtime of the application.

During this time the user can see the Activity. However, the Activity may not be in the foreground and interacting with the user.

The Activity is in front of all others Activities during this time. The user can interact with the Activity.

By calling finish() within the onCreate(Bundle) method, the system does not call any further lifecycle methods except onDestroy().

Important: Please notice the overlap in the Activity transition. Activity A is not completely stopped before Activity B is created.

In both cases the Activity instance is gone forever. The Activity is no longer needed.

Also a configuration change during runtime (such as screen orientation, keyboard availability, language,...) triggers an Activity re-creation: The current instance is destroyed (onDestroy() is called) and a new instance is created (onCreate() is called). It is important to store the Activity state during this re-creation process (via Bundle).

The Android system may destroy the process(!) containing your Activity to recover memory.

This happens if the Activity is in the Stopped state and hasn't been used in a long time, or if the current foreground Activity requires more memory. The system is storing the instance state in a Bundle object. The saved state is used to restore the previous state.

Important: Android is killing the whole process and not only the Activity instance.

The system calls the onSaveInstance() method and stores the instance state in a collection of key-value pairs.

Important: You always have to call the superclass implementation of onSaveInstanceState(). The default implementation saves the state of the view hierarchy. This requires that each view has an unique ID (android:id).

Either by using the Bundle instance that the system passes to onCreate(Bundle) or by implementing the onRestoreInstanceState(Bundle) method.

A fragment is a modular section of an Activity, which has its own lifecycle. It can be added or removed while an Activity is running and can also be reused in different activities.

To create a Fragment you have to subclass the Fragment class. You have to provide a public no-argument constructor, because Android will often re-instantiate a Fragment class when needed (-> state restore).

The main purpose of a Fragment is to support a more dynamic UI (tablets, smartphones) and also to make the reuse of UI components a lot easier.

A Fragment can also exist without its own UI as an invisible worker for the Activity.

A Fragment is closely tied to the Activity it is in. When the Activity is paused, so are all fragments in it; When the Activity is destroyed, so are all fragments in it.

A Fragment can be declared inside the Activity's layout file.

The Android system inserts the View object returned by the Fragment's onCreateView method directly in place of the <fragment> element.

Otherwise, a fragment can programmatically added at runtime. You can add, remove or replace a Fragment during runtime by using the APIs from FragmentTransaction.

"my_fragment_container" specifies a ViewGroup resource in which to place the Fragment.

Important: If you do not call addToBackStack() inside the FragmentTransaction that removes a Fragment, then that Fragment is destroyed when the transaction is committed and the user cannot navigate back to it.

However, if you call addToBackStack() when removing a Fragment, then the Fragment is stopped and will be resumed if the user goes back. The "removed" Fragment remains in created state and only its view is destroyed.

An Activity represents a full UI screen that acts standalone. An Activity can exist without any Fragment in it. A Fragment is always a part of an Activity and can't exist independently. An Activity can have one or more fragments.

The system calls the onSaveInstanceState() method and stores the instance state in a collection of key-value pairs.

Important: You always have to call the superclass implementation of onSaveInstanceState(). The default implementation saves the state of the view hierarchy. This requires that each view has an unique ID (android:id).

By restoring the instance state either in onCreate(), onCreateView() or onActivityCreated().

Important: setRetainInstance(true) does not work with fragments on the back stack. setRetainInstance(true) is especially useful for long running operations inside Fragments which do not care about configuration changes.

A ViewPager is a layout manager that allows users to flip left and right through pages (typically Fragments) of data.

FragmentPagerAdapter and FragmentStatePagerAdapter are two subclasses of ViewPager:

A task is a stack (LiFo: "Last in, First out") which contains a collection of activity instances (also known as back stack). The system can hold multiple tasks at the same time but only one task is in the foreground.

If the user starts an application which has not been used recently, then a new task is created and the main activity (e.g. Activity A) for that application opens. When Activity A starts Activity B, Activity A is stopped (Android retains the state of Activity A). If the user presses the Back button, Activity A resumes and the current Activity B gets destroyed (Android does not retain the state of Android B).

A launch mode defines how a new instance or the existing instance of an activity is associated with the current task.

The launch mode of an Activity supports four different modes:

As soon as the execution of onReceive() is finished, the system may kill the process at any time (and that will also kill the spawned thread)

Solution: A good way is to use a JobService instead of a thread. By doing so, the system knows that the process is still needed.

Background: Serialization is the process of converting an object instance into a series of bytes, so that the object can be easily saved to persistent storage or transmited across a communication channel (e.g. network).

RelativeLayout: Arranges view elements relative to parent or to other view elements.

Both layout components displays a list of scrollable items. The items are inserted by using an Adapter.

GridLayout is a ViewGroup that sets things up in a grid with rows and columns. It is like a TabletLayout but does also support columnSpan and rowSpan.

PNG is the overall preferred format in Android.

A nine-patch image is a scalable image resource that has 9 areas, called patches, that scale separately.

Android handles every image file as nine-patch image that has the "file extension" 9.png

The "res" folder contains various resource files:

Background: "fill_parent" is an older synonym for "match_parent". It is recommended to use match_parent instead of fill_parent.

An Adapter is a bridge between the model data and that dataâ€™s visual representation in the AdapterView.

Use the BaseAdapter class as the foundation to build your own Adapter implementation.

The ViewHolder design pattern can be used to increase the speed at which a ListView renders data.

The pattern avoids the repeated lookup of view resources. The number of times which the findViewById() method is invoked is drastically reduced, existing views do not have to be garbage collected and new views do not have to be inflated. The view references for every row are stored in a simple object for later reuse.

An Android library project allows the distribution of resources (e.g. layouts, themes) and manifest entries as well as Java Code (e.g. activites). It makes the process of creating multiple apps from the same code base easier.

The typical library project is distributed as AAR (Android archive file) file.

The Android Support Library is a library distributed by Google that contains backports as well as new widgets and classes.

The overall idea is to make as much as possible of the Android API available for as much as possible devices.

Background: Originally a single library, the Android Support Library evoled into a suite of libraries:

Important: Starting with Support Library version 24.2.0, the minimum supported API level has changed to API level 9 for all support library packages. The v# package notation does not longer indiciate the real minimum API support level. Example: support-v7 library requires a minimum API level of 9 and not 7.

The SDK Manager provides access to the support libraries (extras/Android Support).

The compileSdkVersion should be the same as the major version of the used Android Support library.

StrictMode helps to determine if certain unpleasant things happen inside your app during development phase. For example, it can warn (via logcat, dialog or crash) if you are doing too much things on the main application thread that might cause a janky user experience.

Important: Never use StrictMode in production code!

Scheduled alarms (via AlarmManager), jobs (via JobScheduler), and syncs (via SyncManager) will be ignored by default, except during occasional "idle maintenance windows".

The behavioral interview part is more about you and your history in software development.

Questions, Ideas, Problems? Let me know...|||

