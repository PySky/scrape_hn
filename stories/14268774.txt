This is the newest article from the Design & Architecture Series. In the first articles from the series, I showed you how to create a common interface for finding elements based on abstract classes. However, we can extend the idea even further. Here I am going to show you how to create extensions for the ElementFinder interface so that you can locate elements with less writing and with more complex locators.

Below you can find the basic implementation of the IElementFinder interface. You can locate web elements using the generic Find method through configuring it via By locator. However, I think that it requires too much writing for locating a single element. I will show you how to create Find methods that do not require By configuration and even contains more advanced locators.

The basic implementation of the By class includes just the most important locators such as find by ID, class, CSS, link text and tag name. Most of the time in my tests I use more complicated locators' strategies such as find by ID ending with, ID containing, XPath, XPath contains and so on. So I believe it is useful to have these at your disposal.

Most of the people may do not need to use the more advanced locators, so I put them in a dedicated child of the By class, named AdvancedBy. Of course, you need to add the new locators' strategies in the SearchType enum.

I decided that the best way to enhanceÂ the basic ElementFinder is to create extension methods for it. You can extend the idea even further and place the class with extension methods in a dedicated project so that only if someone needs them to add a reference. The Selenium.WebDriver.Support NuGet works in the same manner. We create an additional method for each new advanced localization strategy.

In order to be able to use the new advanced locators' methods you only need to add a using statement to their namespace. After that, you will be able to choose between them through the Visual Studio's IntelliSence.

There are no changes in the tests' bodies. All necessary changes need to be placed in the pages' element maps.|||

Build a Hybrid Test Automation Framework. Learn how to create an extendable element find logic without changing the core test automation framework.