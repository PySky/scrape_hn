This library is a full implementation of the GraphQL specification and aims to maintain external1 compliance with the specification.

It should be viewed as roughly analogous to the official reference JavaScript implementation. In other words, it is a backend-agnostic GraphQL query execution engine.

For more detailed documentation, read the manual.

A schema starts as an EDN file; the example below demonstrates several of the available options:

A schema alone describes what data is available to clients, but doesn't identify where the data comes from; that's the job of a field resolver, provided by the :resolve key inside files such as the :hero and :droid query.

The values here, :get-hero and :get-droid, are placeholders; the startup code of the application will use to attach the actual field resolver function.

A field resolver is just a function which is passed the application context, a map of arguments to values, and a resolved value from a parent field. The field resolver returns a value. If it's a scalar type, it should return a value that conforms to the defined type in the schema. If not, it's a type error.

The field resolver is totally responsible for obtaining the data from whatever external store you use: whether it is a database, a web service, or something else.

It's important to understand that every field has a field resolver, even if you don't define it. If you don't define one, Lacinia provides a default field resolver.

Here's what the field resolver might look like:

The field resolver can simply return the resolved value. Field resolvers that return multiple values return a seq of values.

After attaching resolvers, it is necessary to compile the schema; this step performs validations, provide defaults, and organizes the schema for efficient execution of queries.

This needs only be done once, in application startup code:

With the compiled application available, it can be used to execute requests; this typically occurs inside a Ring handler function:

Lacinia doesn't know about the web tier at all, it just knows about parsing and executing queries against a compiled schema. A companion library, pedestal-lacinia, is one way to expose your schema on the web.

User queries are provided as the body of a request with the content type application/graphql. It looks a lot like JSON.

The function returns EDN data that can be easily converted to JSON. The :data key contains the value requested for the query in the request.

This example request has no errors, and contained only a single query. GraphQL supports multiple queries in a single request. There may be errors executing the query, Lacinia will process as much as it can, and will report errors in the :errors key.

One of the benefits of GraphQL is that the client has the power to rename fields in the response:

Although this library is used in production at Walmart, it is still considered alpha software - subject to change. We expect to stabilize it in the near future.

To use this library with Clojure 1.9-alpha14, specify an exclusion like: .

More details are in the manual.

[1] External compliance means that the edges should perform the same as another GraphQL library, but the internal algorithms to achieve that result may be different and deviate from specification in order to work in a functional way. â†©|||

lacinia - GraphQL implementation in pure Clojure