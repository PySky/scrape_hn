

 I have participated in a TON of hackathons, especially since working at Facebook where they are held regularly and are a huge part of the culture. My roles have included coding, design, project management and every combination of the three.



 Based on my own observations and experience, here are a few ways that you (the non-technical but highly motivated entrepreneur) can participate in a hackathon:





Find a problem that you are passionate about solving or have expertise in and share your ideas with others in the hackathon’s group or event

There is definitely a “sexiness” factor that can help a lot in recruitment,

With a clear idea and decent presentation, you should have no problem recruiting people.

Everyone should be in agreement on the “non-negotiable” core feature set, as well as the “nice-to-haves”

There are usually a ton of bugs in the MVP that need to be carefully navigated to pull off a successful presentation.

You could improve your SQL skills, learn how to code in Python or learn how to design with Sketch.

the softer skills of managing and keeping the team focused are incredibly valuable,

Your first challenge/ opportunity to participate as a non-coder is pitching your idea to engineers.. Engage with anyone and everyone who takes an interest in your idea, and try to demonstrate your “product intuition” along with management skills.I’ve found that having a visual design as well as a detailed description makes your odds of getting the right people on your team about 1000x more likely. Also, responding quickly and thoughtfully to questions shows potential teammates you are serious and committed to the project.Here are some product pitches I made where I was successful in recruiting Facebook engineers to help me:The Facebook travel mode idea did not have a visual, but it addressed a hot-button issue that was getting a lot of attention in the news.as well as winning prizes in the end if you can actually pull it off.Every team needs someone to help them get organized. The project manager’s role is to make sure that the team understands the “people problem” they’re tackling, is aligned around the solution they’re building, and has clarity around what each team member is working on.Determining what skills your team will need and recruiting the right people is a major skill in and of itself. I once was late to a hackathon and didn’t have time to recruit people, so I ended up rolling my app solo. I don’t recommend doing that.You would be suprised how many very talented coders show up to a hackathon with no ideas of their own looking to join a team.Once you have a team (even if it’s just one other committed person), draft a shared doc that clearly defines the project and the problem it will solve. If you have seen features in other websites/ apps that are relevant to your app, start linking to those in the doc so you can point to specific examples of the functionality you have in mind. The doc serves as a roadmap the team can use when thinking through features.which you may be willing to sacrifice in your prototype. The roadmap can and will change throughout the hack, but your role is to make the team as efficient as possible and make sure everyone is aligned on changes.You create the lines of communication for your team, whether that’s a slack channel or Facebook group/ chat. It’s becoming much more common at hackathons for teams to work partially or entirely remote. A typical pattern is to have a flury of communication leading up to the hack, an in-person kickoff/ planning meeting where everyone gets their environment up and running, and then the team disperses to do the actual work.As the MVP nears completion, you start thinking through next steps and take the lead on drafting the presentation to share your project. You will work closely with the team on this.This too is an artform in and of itself.While the team is working away, you have an opportunity to work on a new skill you wouldn’t normally develop during your day-to-day.A great way to engage is to set up your environment the same as your engineers, download any necessary software/ libraries and make sure everything works as expected. Get on the github repo as a contributor, sync up with the team whenever there’s a significant progress, and watch your thing come to life!There is plenty of serious work for someone with no programming chops at all to do at a hackathon. In fact,and can make the difference between success and failure of a project.|||

