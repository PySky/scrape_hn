Erdos is a very light, modular and super easy to use modern Graph theoretic algorithms framework for . It contains graph algorithms that you can apply swiftly with one line of code and was primarily developed to back a worker manager tasks for various Java projects including one in Android.

Erdos was born because other frameworks in Java were very hard to get started with or just plain heavy (overhead wise) or just too opinionated. Erdos let the developer design it's own graph engines to optimise the runtime and comes with all of the graph algorithms you can expect.

Add Jitpack in your root build.gradle at the end of repositories:

Option 2: Simply fork or download the project, you can also download and create file yourself, with

Erdos is a framework to easily help you design graph algorithms with the correct abstractions and utilities. The builtin algorithms are:

graph_triangle (); v0 (); v1 (); v2 ( ); graph_triangle addVertex(v0); graph_triangle addVertex(v1); graph_triangle addVertex(v2); e_0 graph_triangle addEdge(v0, v1); graph_triangle addEdge(v1, v2); graph_triangle addEdge(v2, v3); graph_triangle print(); ( vertex graph_triangle) { out println(vertex toString()); } iterate the edges of the graph ( edge graph_triangle edges()) { out println(edge toString()); } removing a vertex in any of the following ways will remove it's connected edges as well, also removing any edge in similar fashion will update the graph :) graph_triangle removeVertex(v0); graph_triangle vertices() remove(v1); graph_triangle vertices() iterator() remove();

you can define your graph in terms of self loops, multi edges (per vertex) and a custom implementation of a graph engine.

every algorithm extends , which is generically typed for input graph and for output and must implement

for example, the algorithm for single source shortest path, followed by the algorithm for all pairs shortest paths.

this example shows the simplicity of the framework (hopefully ;)) where we apply 5 different algorithms sequentally

for major algorithms types, you can comfortably use the following algorithms factories

a bunch of helper utilities can be found in the package

contributions are most welcomed, please consult

homage to the great hungarian mathmatician who part of his research was rooted in combinatorial graph theory.

If you like it -> star or share it with others|||

Erdos - modular and modern graph theoretic framework in Java