IPython 6 feature a major improvement in the completion machinery which is now capable of completing non-executed code. It is also the first version of IPython to stop compatibility with Python 2, which is still supported on the bugfix only 5.x branch. Read below to have a non-exhaustive list of new features.

Make sure you have pip > 9.0 before upgrading. You should be able to update by using:

If your pip version is greater of equal to pip 9.0.1 you will automatically get the most recent version of IPython compatible with your system: on Python 2 you will get the latest IPython 5.x bugfix, while in Python 3 you will get the latest 6.x stable version.

The completer Completion API has seen an overhaul, and the new completer have plenty of improvement both from the end users of terminal IPython or for consumers of the API. This new API is capable of pulling completions from , thus allowing type inference on non-executed code. If is installed completion like the following are now becoming possible without code evaluation: That is to say, IPython is now capable of inferring that is a string, and will suggest completions like . The completion power of IPython will increase with new Jedi releases, and a number of bugs and more completions are already available on the development version of if you are curious. With the help of prompt toolkit, types of completions can be shown in the completer interface: The appearance of the completer is controlled by the option that will show the type differently depending on the value among , and The use of Jedi also fulfills a number of requests and fix a number of bugs like case-insensitive completion, completion after division operator: See PR #10182. Extra patches and updates will be needed to the package for this feature to be available to other clients like Jupyter Notebook, Lab, Nteract, Hydrogen... The use of Jedi is should be barely noticeable on recent enough machines, but can be slower on older ones. To tweak the performances, the amount of time given to Jedi to compute type inference can be adjusted with . The objects whose type were not inferred will be shown as . Jedi can also be completely deactivated by using the option. The old API is waiting deprecation and should be replaced replaced by in a near future. Feedback on the current state of the API and suggestions welcome.

One of the large challenges in IPython 6.0 has been the adoption of a pure Python 3 codebase, which leads us to great length to upstream patches in pip, pypi and warehouse to make sure Python 2 system still upgrade to the latest compatible Python version compatible. We remind our Python 2 users that IPython 5 is still compatible with Python 2.7, still maintained and get regular releases. Using pip 9+, upgrading IPython will automatically upgrade to the latest version compatible with your system. If you are on a system using an older version of pip on Python 2, pip may still install IPython 6.0 on your system, and IPython will refuse to start. You can fix this by upgrading pip, and reinstalling ipython, or forcing pip to install an earlier version: The ability to use only Python 3 on the code base of IPython brings a number of advantage. Most of the newly written code make use of optional function type annotation leading to clearer code and better documentation. The total size of the repository has also decreased by about 1500 lines (for the first time excluding the big split for 4.0). The decrease is potentially a bit more for the sour as some documents like this one are append only and are about 300 lines long. The removal as of Python2/Python3 shim layer has made the code quite clearer and more idiomatic in a number of location, and much friendlier to work with and understand. We hope to further embrace Python 3 capability in the next release cycle and introduce more of the Python 3 only idioms (yield from, kwarg only, general unpacking) in the code base of IPython, and see if we can take advantage of these as well to improve user experience with better error messages and hints.|||

