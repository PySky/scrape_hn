Headroom.js is a lightweight, high-performance JS widget (with no dependencies!) that allows you to react to the user's scroll. The header on this site is a living example, it slides out of view when scrolling down and slides back in when scrolling up.

Fixed headers are a popular approach for keeping the primary navigation in close proximity to the user. This can reduce the effort required for a user to quickly navigate a site, but they are not without problemsâ€¦

Large screens are usually landscape-oriented, meaning less vertical than horizontal space. A fixed header can therefore occupy a significant portion of the content area. Small screens are typically used in a portrait orientation. Whilst this results in more vertical space, because of the overall height of the screen a meaningfully-sized header can still be quite imposing.

Headroom.js allows you to bring elements into view when appropriate, and give focus to your content the rest of the time.

At it's most basic headroom.js simply adds and removes CSS classes from an element in response to a scroll event:

Relying on CSS classes affords headroom.js incredible flexibility. The choice of what to do when scrolling up or down is now entirely yours - anything you can do with CSS you can do in response to the user's scroll.

Using headroom.js is really simple. It has a pure JS API, plus an optional jQuery/Zepto plugin and AngularJS directive.

Include the script in your page, and then:

Include the and scripts in your page, and then:

The plugin also offers a data-* API if you prefer a declarative approach.

Include the and scripts in your page and require the module in your AngularJS application module. Then:

Headroom.js can also accept an options object to alter the way it behaves. You can see the default options by inspecting . The structure of an options object is as follows:

Recall that headroom.js works by adding and removing CSS classes in reaction to the user's scroll. This means you will need some CSS to achieve the effect you want. For example, you could hide the header on scroll down, and reveal it again on scroll up. The most basic CSS for this would be:

Whilst this is functional, it's a bit of a jarring effect. We could do better with some CSS transitions to smoothly move the header in and out of view:

Notice that we're transitioning the property. The reason to transition this is because transforms are much cheap to animate compared to , etc. Another benefit is that translation percentage values are relative to the dimensions of the element, whereas etc. percentage values are relative to the dimensions of the viewport. This means you don't need to know the height of the element in advance, will always slide the element entirely out of view.

The CSS above is enough to get you started, but feel free to try something entirely different. Let you imagination run wild. But not too wild, your users won't appreciate that.

Head over to the headroom.js playroom if you want see some example uses. There you can tweak all of headroom's options and try out various CSS effects in an interactive demo.

Headroom.js is dependent on the following browser APIs:

All of these APIs are capable of being polyfilled, so headroom.js can work with less-capable browsers if desired. Check the linked resources above to determine if you must polyfill to achieve your desired level of browser support.|||

Headroom.js is a lightweight, pure JS widget for hiding elements until needed. Give your pages some headroom