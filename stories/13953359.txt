Spring Boot Actuator provides auditing capabilities for publishing and listening to security related events in a Spring Boot application with Spring Security enabled. The default events are authentication success, authentication failure and access denied, but they can be extended with custom events.

By default endpoint is enabled so after starting the application (and logging in with username and password that is provided in application log) you can see the current security events:

The endpoint implementation uses to return all the registered audit events.

You can customize the endpoint with properties. For example, to change the path of audit events endpoint simply use property.

Security events are represented by value object in actuator. This object contains timestamp, username, event type and event data.

The easiest way to get notified about audit events is to subscribe to events via Springâ€™s :

The is synchronous, but if asynchronous behavior is desired you can annotate event listener method with and make sure that async is enabled (e.g. via ):

Alternatively, you can extend and override its method:

Note: No events will be stored in the event repository, hence endpoint will always return an empty array. To fix this you can either inject audit repository or extend directly from :

In the example below the application event publisher ( ) is used in order to publish a custom audit event with type . The new listener method listens only for those new events whereas the previous method ignores them (note this is just an example). Like any other events, the custom one will be stored using audit event repository.

The sample code for this article can be found in spring-boot-thymeleaf repository. By default, the security is disabled in both profiles. Enable it by changing the property in .|||

