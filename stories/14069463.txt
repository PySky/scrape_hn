We are releasing a 1.9.1 recovery build to update the 1.9 translations and address a handful of issues.

Welcome to the first 2017 release of Visual Studio Code. There are a number of significant updates in this version that we hope you will like, some of the key highlights include:

The release notes are arranged in the following sections related to VS Code focus areas. Here are some further updates:

We have added a Welcome page (Help > Welcome) with Quick links to help new users as well as a list of Recent folders and Help documentation links for fast navigation.

Check the Show welcome page on startup option to keep it handy. The Welcome page is only shown if there are no open files on startup.

If you are a new user, you will appreciate the Interface overview available from the Welcome page. It calls out the basic parts of the user interface with their keyboard shortcuts:

The Interactive Playground on the Welcome page introduces you in a step-by-step guide to some of our advanced code editing features with interactive examples:

Much of the Integrated Terminal frontend has been rewritten with performance in mind. In short, it should no longer lock up the application when processing large amounts of data and be about 5 times faster.

The library used to communicate with the terminal process on Windows has been upgraded which fixes many of the problems the terminal had on Windows such as arrow keys not functioning and the prompt line going out of sync. A special thanks to Ryan Prichard for his winpty library and for assisting with the upgrade.

The setting has changed from a simple / setting to accept the following options:

To reduce visual clutter, Zen mode now also hides the workbench Tabs. We have also introduced the following options to make it easier to fine tune the Zen mode experience:

There are two new ways to easily navigate results in the Search view.

The title bar of the horizontal panel now shows all the other available panels and thus makes it much easier to switch between panels.

Additional entries have been added to the context menu of Tabs that show files. You can copy the path of the file or reveal it in the native OS Explorer or the Explorer in the Side Bar.

We added a new setting that controls if the close button should show on the right (default), left or not be visible at all.

Note: The previous was removed in favor of this new option.

When VS Code is already running and you open a new file or folder, it decides whether to open in the last active window or a new window. The existing setting controls this for files and by default, a new window would be opened. With this release, we wanted to make this more configurable and also change the default behavior for opening files.

If configured to be , VS Code still makes the best guess about reusing a window based on the context of the open request. Change the settings to either or if you want always want the same behavior. For example, if you always want a new window when picking a file or folder from the File menu, set this to .

Note: There can still be cases where this setting is ignored (for example, when using the or command line option).

A new setting controls the size and positioning of new windows. By default, a new window will open in the center of the screen with small dimensions. If you change this setting to , the new window will get the same dimensions as the last active one. Setting it to or will always open new windows maximized or in full screen.

A new setting allows for more fine grained control over the top menu visibility on Windows and Linux. By , the menu will be visible and only hides when entering full screen. You can set it to to hide it. In the state, the menu will show up when you press the Alt key. If you turn the set the value to , the menu will remain hidden, even if you press Alt.

Note: If you configure the menu explicitly to be , it will also remain visible when you enter the full screen mode.

There are situations where you can end up with many dirty editors open (for example, you ran a search and replace operation without saving). Previously, when you wanted to close them all, you were asked to Save or Revert each editor one by one. Now, when you invoke the Close All Editors action (⌘K ⌘W (Windows, Linux Ctrl+K Ctrl+W)), you will see a combined prompt for all dirty files:

Thanks to an external PR, it is now possible to easily stop output from automatically scrolling by toggling the scroll lock in the Output panel title bar.

In this milestone, we continued on the improvements we did for Settings during last milestone.

Our users often work on many different file types and languages in one workspace and a frequent feature request was language specific settings (#1587). With this release, you can now customize your editor by language through language based settings.

To customize for any language, run the global command Preferences: Configure language specific settings... (id: ) from the Command Palette (⇧⌘P (Windows, Linux Ctrl+Shift+P)) which opens the language picker. Selecting the language you want, opens the Settings editor with the language entry where you can add applicable settings.

If you have a file open and you want to customize the editor for this file type, click on the Language Mode in the Status Bar to the bottom-right of the VS Code window. This opens the Language Mode picker with an option Configure 'language_name' language based settings.... Selecting this opens the Settings editor with the language entry where you can add applicable settings.

You can also configure language based settings by directly opening . You can scope them to the workspace by placing them in the Workspace settings just like other settings. If you have settings defined for a language in both user and workspace scopes, then they are merged by giving precedence to the ones defined in the workspace.

The following examples customize editor settings for language modes and .

You can use IntelliSense in Settings editor to help you find allowed language based settings. All editor settings and some non-editor settings are supported.

Note: The following settings are not currently supported but will be in the next release. Please refer to #19511 for more information.

You can now define different commands per task (#981). This allows running different commands for different tasks without writing your own shell script. A file using commands per task looks like this:

The first task start the TypeScript compiler in watch mode, the second one starts the . If a tasks specifies a local command to run the task name is not included into the command line ( is for these tasks). Since a local command can specify local arguments, there is no need for adding it by default. Note that the task specifies . The property is deprecated in favor of to support more scenarios in the future.

If a file specifies both global and task local commands, the task local commands win over the global command. There is no merging between a global and a task local command.

A task local command can be made OS specific as well. The syntax is the same as for global commands. Here an example that adds an OS specific argument to a command:

As with global commands, the and property of the OS specific section are merged into the task command.

We implemented a new task execution engine that uses the terminal instead of the output window. This brings some major advantages:

The support is disabled by default, but early adopters can opt in to give feedback on the new implementation. To do so add the property to the top of your file

Below a screen cast that first starts the tsc compiler in background (Using ⇧⌘B (Windows, Linux Ctrl+Shift+B)) and then executes the dir command in another terminal.

There is one thing we changed for executing tasks in the terminal: if the task is a shell command arguments to the shell command should best be part of the command itself. The reason for this is proper quoting. With the old runner, it was always complicated to quote shell commands correctly especially under Linux/Mac shells where different kind of quotes exist (pre character escaping, weak quoting and strong quoting). If arguments are provided, we add them to the command without performing any quoting rules.

Please note that this is still work in progress. Feedback and suggestions are welcome.

We have added a new setting to enable format on paste (#13945). Simply update your settings to include . Note that this works with existing formatters that support formatting a selection such as the TypeScript formatter or other formatters from the Marketplace.

Since our first version, VS Code has supported TextMate themes. There was, however one catch, we would leave it up to CSS to do token <-> theme rule matching. This was a great way to make progress at the time, but it also meant that TextMate themes were not rendered accurately in VS Code (for example, TextMate theme matching semantics are different than CSS class name matching semantics). The issues had been piling up and we decided it was time to improve our implementation (see issue #3008 for the rendering differences caused by this shortcut).

We have introduced a new widget to help inspect the scopes of a token and the matching theme rule. You can launch the widget with Developer Tools: Inspect TM Scopes from the Command Palette (⇧⌘P (Windows, Linux Ctrl+Shift+P)).

You can now bind your favorite snippets to key bindings. A sample that encloses a selection with single quotes looks like this:

Instead of defining a snippet with , you can also refer to a snippet using the -property, like

The new Go to Implementation and Peek Implementation commands allow you to quickly jump from an interface to its implementers, or from an abstract method to the method implementations. You can try out this feature by installing a nightly build of TypeScript 2.2 in your workspace: .

Using Toggle Word Wrap, Toggle Render Whitespace and Toggle Control Characters will now persist the toggled value to user settings.

The multi-cursor actions always changed their behavior based on the toggle values for "Match Case" and "Whole Words". However, this was not really obvious, especially when the Find widget is hidden. To make this more clear, triggering the following actions will now either highlight the toggles when the Find widget is visible, or briefly show the two options in the top right corner of the editor.

Here are the multi-cursor actions:

Moreover, the two options will briefly show in the top right corner of the editor also when toggling their value via Toggle Find case sensitive (⌥⌘C (Windows, Linux Alt+C)) or Toggle Find whole word (⌥⌘W (Windows, Linux Alt+W))

The semantics of in the find widget search string, when in regex mode, has now changed to always match the End-Of-Line sequence.

Whereas before, would always match the character, will now match the characters in files with line terminators (indicated in the Status Bar with LF) and will match the sequence in files with line terminators (indicated in the Status Bar with CRLF).

We polished our implementation of Indentation Rules, which Language extensions can leverage to determine the correct indentation level for a specific line. The indentation adjustments are usually triggered after users finish writing a line and press Enter.

In addition, we implemented an experimental command Reindent Lines and you can use it to adjust the indentation of the whole file if the indentation rules are properly set.

The TypeScript references CodeLens displays an inline count of reference for classes, interfaces, methods, properties, and exported objects:

You can enable the TypeScript references CodeLens by setting .

Click on the reference count to quickly browse a list of references:

VS Code now includes TypeScript 2.1.5, which includes a number of important bug fixes.

You can now more easily switch which version of TypeScript is being used in your workspace by opening a TypeScript or JavaScript file in the workspace and clicking on the TypeScript version number in the status bar:

A message box will appear asking you which version of TypeScript VS Code should use:

After switching TypeScript versions, reload the VS Code window to apply the change.

Due to a potential security issue, VS Code will no longer automatically load versions of TypeScript from a workspace setting. When a workspace with a workspace setting is loaded for the first time, we ask you if we should use the workspace version of TypeScript or VS Code's version.

VS Code can now synchronize the view of a Markdown editor and its preview (#6992). By default, the Markdown preview will automatically scroll to reveal the element at the selected line in the editor.

Also, when the Markdown preview is scrolled, the editor will scroll along with it:

Additionally, you can now double click an element in the Markdown preview to automatically open the editor at that line:

The new setting can be used to provide a location (absolute path or relative to workspace) where any or all of , and reside. Read more about how to customize Emmet using these files at Emmet Customization.

The existing settings and will override the values from the above json files.

Note: The file contents are cached. Therefore, you will need to reload the VS Code window the first time you add these files and every time you modify them.

The SCSS language support now also understands the SCSS map syntax (#1758).

The HTML formatter (based on the jsbeautifier) has been updated. New options are available:

The following options allows to disable of script and style validation:

The following options allows to disable the built-in PHP completion and hover supports:

Due to potential security risks, VS Code asks for confirmation of the workspace setting before executing the program the setting is pointing to.

If the path is set in user settings, no confirmation is necessary.

Extension Packs allow you to bundle separate extensions together so that they can be installed together. We have added support to create an Extension Pack using the Code Yeoman generator.

The generator creates an Extension Pack extension. Optionally, it can also seed the pack with the set of extensions you have currently installed in your Code instance. In this way you can easily create an Extension Pack with your favorite extensions, publish it to the market place, and share it with others.

As per popular user request, we no longer require a file to start debugging - simply pressing F5 will immediately start the debug session. This makes it possible to debug single files (in a so called 'no-folder-workspace' indicated by a purple colored Status Bar). A is still required for advanced debug configuration.

Thanks to a user PR we are now able to show variable values inline in the source while stepping through the code. This feature is still experimental, so it is disabled by default. To enable it set in your settings.

Depending on the active file, VS Code can now automatically choose a debug environment instead of explicitly asking the user. For example, if a user has a JavaScript file active in an editor and wants to setup his , a for JavaScript is automatically generated.

As per user request, it is now possible to have a "launch" object in your user settings that is shared across all the workspaces as a launch configuration.

It is now possible to add a new launch configuration by simply choosing that option in the debug dropdown:

We have added a context menu action in the callstack view that copies the callstack to the clipboard. This can be very handy when you need to report a callstack with an issue.

We've added a few launch configuration snippets to support some commonly used Node.js debugging scenarios. These snippets can be used through IntelliSense when editing the :

Here is the list of all snippets:

We've added some finishing touches to the 'Just My Code' feature introduced in the last milestone:

The following example skips all internal modules but :

For quite some time the VS Code node debugger supported a attribute on configurations. See here for details. With this release, we now support the attribute on configurations as well.

If this feature is enabled, VS Code restarts a debug session whenever it detects the termination of Node.js. This feature can be used in combination with the utility which restarts Node.js whenever it detects that JavaScript source has been modified.

This launch configuration (available as a snippet through IntelliSense) makes use of and the option:

Starting with this release, source map support is enabled by default, so it is no longer necessary to set to . However, it is still necessary to let the Node.js debugger know where the generated JavaScript lives by specifying the glob patterns. Source map support can be disabled by setting to .

In the debug adapter, calling with an object will now show an expandable object in the console, instead of a text preview.

There is a new method that allows you to insert a into an editor.

A can now have a -event which signals to the editor that lenses have changed and need to be refreshed.

can now have a list of commit characters. When a commit character is typed and while a completion is selected, the completion will be inserted as the character is being typed.

A new interface was added to support the new Go to Implementation feature. A maps a location in a text document to a list of implementations locations, for example going from an interface to classes that implement this interface or from an abstract method to a list of implementing methods.

Extensions that wish to support Go to Implementation can implement and register the provider using

A new overload was added to the method that allows to open an untitled document with optional language. For example you can call:

To create a text document with XML as language. If you leave out the language options, it will just create a text document with plain text language.

A new value was added to the enum. This reveals the range at the top of the viewport.

A new value was added to the enum.

We have a proposed API to show progress in different places of the editor, such as the Status Bar or a view. It is still in its early stages and we are looking for feedback. To try it out, do the following:

Note that proposed APIs are only available when developing an extension but not when an extension is published to the Marketplace.

We started large refactorings around source control in order to provide SCM functionality from different contributable providers. At the same time, all Git functionality is being ported over to an SCM provider.

The new behavior is available for you to try out with via the SCM: Enable Preview SCM command, which will replace the current Git functionality with the experimental one (run SCM: Disable Preview SCM to undo). Be aware that this is not feature complete nor without issues. You can track progress in #18615.

We've added the following (optional) sub-contribution points to the contribution point:

A new optional attribute has been added to the type. With this a debug adapter can provide a hint for how to render a source in the UI. A value of can be used to indicate that the source is not available or that it is skipped on stepping.

In settings, we allow you to specify some of the executables that VS Code uses to do its work. For example, you can choose which shell the Integrated Terminal should use. Until now, just like any other setting, you could define them either as user settings or workspace settings. For enhanced security, we no longer allow such settings to be defined at the workspace level.

Here is the complete list of settings we no longer support at the workspace level:

When you open a workspace and we find for the first time that the workspace defines any of these settings, VS Code will warn you and subsequently ignore the values.

The and setting created a similar security exposure which has been addressed separately.

The standard shortcuts to launch a new instance of an application from the Ubuntu Unity user interface now correctly open a new instance of VS Code (Win+Shift+<number>, Shift+click, middle click).

We added a new command, Report Performance Issues in the Command Palette, that makes it very easy to open a new GitHub issue with details about your environment and performance timings prefilled into the issue description (OS, CPUs, Memory, task timings). If you think that VS Code is starting slow on your system, please use this new command to tell us about it!

We have added a heuristic that reduces the time taken to paint a frame in the editor significantly in certain conditions (that occur more than 95% of the time).

If the font you are using is monospace (most of the programming fonts are monospace), if a certain line consists only of ASCII characters (most of the lines in source code stick to the ASCII range 32-126 or tabs), and if certain editor decorations (like the color boxes in CSS) are not present on a line, we can skip interrogating the browser about where the text has ended up painted and simply do the math in JavaScript.

This optimization saves us a forced browser layout and further decreases the time it takes us to paint a frame.

These are the closed bugs and these are the closed feature requests for the 1.9 update.

Our team maintains or contributes to a number of VS Code extensions. Most notably:

In addition, we released an early-stage PHP parser designed for IDE usage scenarios. This will help extension authors provide even better tooling support for PHP. The parser is written in PHP, and is built to be fast and memory-efficient, provide graceful error-handling, and produce fully-representative syntax trees (including comments/whitespace).

Last but certainly not least, a big Thank You! to the following folks that helped to make VS Code even better:|||

See what is new in the Visual Studio Code January 2017 Release (1.9)