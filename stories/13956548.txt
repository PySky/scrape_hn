When developing an SDK — and by SDK I mean an API implementation — you can leave for your users the task of integrating it with their apps. However, it’s a good idea to make it compatible with trendy frameworks out of the box.

In the PHP world, Laravel is becoming a very popular choice of framework. I want to share how you can make your SDK compatible with its Service Container.

For the sake of example, let’s imagine your API client class looks like this:

Maybe you have a different way to set up API configuration. Anyway, it’s a good idea to have them set through a method, and not directly via a config file or other env-depending method. Using a method will make it easy to pass the settings from user’s app to the SDK. Also, it makes the configuration process more abstract and easier to plug-in.

In the sample client above, we have to pass a username and password to create a new instance. It’s clear we need to get that from somewhere. When using the SDK directly, you may do the following:

Since our goal is to inject the API implementation into the app, it’s better to config that using the framework way. Laravel stores application settings in different files inside a config dir. We can create a file like those to store the API settings:

Even better than set plain values to that config array, it’s using env vars. Laravel is shipped with PHP dotenv. It allows each environment to have its own settings without any change in the application code. So, let’s change our config file a little bit:

The vars we’re using here have a very generic name. You should use a more specific name to avoid conflicts with other services. Something like , for an API called Dummy, for example.

We have to create a service provider to tell Laravel that our API client can be injected as a dependency into application classes and methods. Also, the service provider will be in charge to merge the API configuration into the application configs.

It will look like this:

In the method, we tell to Laravel which config files can be published to application’s config dir. So users of our API can overwrite those settings.

Within the method, the service provider binds the config and the API client instance into the service container.

To improve performance, we use the method to let the framework know what are the binds this service provider offers. This way, it will only try to resolve the bind when it’s actually needed.

After you added the SDK to the application, probably using Composer, you have to register its service provider. Open the  file of the app and add the service provider to the array:

Now you can inject the API client into the app classes, like controllers:

To set the API username and password, you have to publish the config file:

Then edit the file if needed. This file may have another name if you changed its name in the service provider, which you should do.

You also may want to create the env vars inside the application’s and files.

Making your API SDK compatible with Laravel is very simple and requires only one extra class. It worth adding that to reach more users and make their work easier.

P.S.: I’ve omitted some implementation details and stuff like namespaces in the samples above. You can find a complete functioning example in Github: https://github.com/straube/dummy-sdk.|||

When developing an SDK — and by SDK I mean an API implementation — you can leave for your users the task of integrating it with their apps. However, it's a good idea to make it compatible with trendy frameworks out of the box. In the PHP world, Laravel is becoming a very popular choice of framework.…