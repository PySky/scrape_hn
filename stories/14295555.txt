Go’s standard library ships with some powerful image manipulation capabilities in the , and packages. This tutorial will utilise them, along with the Machine Box Go SDK to detect faces in an image, and censor them — thus anonymising the image.

We’ll write a simple program that we can run on the command line, but the same code could be adjusted to create a web endpoint easily enough.

Facebox is Machine Box’s facial detection and recognition machine learning capability, which is neatly contained inside a Docker image that we can run locally, and deploy anywhere.

In a terminal, run Facebox locally by doing:

Facebox lets us teach it what people look like, so that it can automatically identify them in new photos, but we aren’t going to use the recognition capability today; instead we just want to know where the faces appear in the image.

In a terminal, get the SDK:

We are going to write a Go function that takes a source image, and a list of objects, and generates a new JPEG with each detected face removed.

We use the function to create a new image that matches the source image’s dimensions, and then draw the source image onto it using the function— this essentially creates a copy of the image.

We then iterate over each in the slice, and create the variable holding the rectangle coordinates of where the face appears, and the variable holding the position of the face.

The and types look like this:

The of a represents the position and size of the face within the source image.

gives us width and height, but the type wants x1, y1 — x2, y2; that’s why we do and in the above code.

We then use the function again to draw a black square ( gives us a solid black image from which to copy more pixels) onto the new image, essentially blacking out the face.

We finally return the new destination image.

In order for this function to be useful, we need a way to load the source image, and save the destination image to disk. We’ll add a simple function to do this.

The usage of our command line should be simple; we’ll pass the path to the source image as the only argument.

Add the following code to validate the argument, open the file, and defer closing it:

Next we will create a client that allows us to access the Facebox services:

returns a that provides a range of methods which are essentially making HTTP requests under the hood to the local Facebox Docker container we have running (see the documentation for the Facebox client for more information.)

To actually detect the faces, we just need to call the method:

The variable is a slice of objects, perfect for our function.

Next we need to actually decode the source image into an type that we can play with and manipulate in Go.

Since the method takes an and probably reads the entire file, we need to seek back to the start:

This ugly bit of code is just saying seek (go to) the first byte in the file (byte zero). indicates that we want to set the position of the reader to (as opposed to a relative seeking operation).

Next, we are going to decode the file bytes into an :

The function decodes the data from the file by automatically detecting the file format. To support various image formats, we have to import the appropriate package into the file.

Importing the package is enough, since the method inside the package will register itself with the function but in Go it’s an error to import a package and not use it. To avoid compiler errors, we have to use an underscore to indicate that we know what we’re doing, and that we still want to import the package — even though it looks like we aren’t using it.

Add the following imports to the top of the file:

Now we have the source image decoded, we can pass it into the function along with the slice:

Assuming all is well, we are going to encode the image to a new file on disk, this is the output file.

Add the final code to the main function:

Here we append the suffix to the filename, and create that file. Calling will write the image contents to that file as a JPEG. You could use if you’d rather write a PNG.

Notice that since we’re using the package now, we have to remove the underscore from the import statement that we added earlier.

Now we have everything finished, we can test our program. Find a photograph that contains some people, and run the program passing it in via the argument:

You should see some output similar to:

Look at the file that was generated, and notice that the faces have been censored.

With not much code (most of it was boilerplate loading/saving/encoding/decoding images etc.) we were able to write an image anonymisation command line tool using the Go standard library and Machine Box.|||

Go’s standard library ships with some powerful image manipulation capabilities in the image, image/* and draw packages. This tutorial will utilise them, along with the Machine Box Go SDK to detect…