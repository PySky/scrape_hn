Shipping a production-grade Go application is not the same as shipping a Go application. Remember, the big difference between your code and your code in production is all the ways it can fail; production-grade code is code that recognizes that difference, and prevents or plans for it.

So, how can you convert your Go to production-grade Go?

This article walks through five things to do to prime your code to run in production; the goal is for you to ship code that is robust, debuggable, and ready for the world.

Go applications in production will encounter errors and panics. This section discusses how to write code that returns and handles errors usefully; the next section discusses panics.

First off, write code that returns errors, rather than code that panics. Errors indicate abnormal state, whereas panics indicate unrecoverable conditions. Errors should be handled; panics should typically abort the program.

When you create or handle an , annotate it with useful context for debugging. Dave Cheney's errors package is well-suited for this, and there are others you can use as well .

Here's an example that uses the package for annotating errors:

The footnote discusses how to choose between handling an error or propagating it . For now, let's look at examples of how to do both in a useful manner with the package.

The power of the annotations is evident when debugging. Printing an annotated error, as in the code above, prints the original error, the wrapped message, and optionally, the stack trace leading up to the error:

A closing note on errors — handle errors once. In the example above, once has been printed, it should be considered handled. If needed, it can be returned to ‘s caller to indicate the other return value should not be consumed, but ideally, the caller would not reinspect the error.

This section discusses panics. Unlike errors, panics should not been handled by the program — they indicate unrecoverable conditions, and should abort the program. That said, it's incredibly useful to report panics that occur in production on a Slack channel or similar; remember, panics are bugs — serious bugs — and they should be easy to detect and debug too.

First, let's talk about what to do with panics and then, how to set it up.

An unchecked panic prints an error message and goroutine stack traces to , before the program exits with a non-zero status. The log alone is woefully insufficient to take timely action for production panics, so, log them to a service like Sentry that can notify you when panics occur . Alternatively, you can configure your application to post to a Slack channel directly, but know that this is the poor-person's approach to panic reporting, and if you can, you should use Sentry.

As to the how to report panics:

The above idea can be used to enable panic reporting for each request goroutine in an HTTP server application, too — introduce a panic reporting middleware. The middleware handler would before calling the next handler. Be sure use this middleware first in the middleware chain, so all panics are reported:

This section presents logging, which is also crucially important to gain insight into your application's behavior as it runs in production.

Structured logging is logging using contextual key-value pairs rather than free-form text. The stdlib's package only provides the latter, but you should use a third-party package that provides the former.

Before we go into why to should use structured — rather than unstructured — logging, here's an example of how you might use each and the difference in their outputs:

The unstructured log output is more human-readable, but using ad hoc strings results in inconsistently formatted logs that are difficult to filter, query or otherwise process. On the other hand, the structured log is less human-readable but the structured format means your logs are machine parsable and processable; you can easily use any of the plethora of powerful tools available (— like ELK —) to analyze your logs.

The notable third-party libraries for structured logging in Go are , used in the example above, and . They support a number of structured formats (JSON and others), and a number of other useful features that the stdlib package does not — like log levels and the ability to attach context to a set of log lines.

For example, with these packages, you could arrange for a request handler's logs to always include the , and fields:

Instrumentation enables you to answer questions about your application's behavior and performance, and monitor them over time. A complete instrumentation story includes collecting and analyzing both system and application metrics, but since the former requires no changes to your application, we're not going to cover it in this post. Instead, let's talk about application metrics in this section — namely, the metrics your application would expose.

The first question is what metrics should you collect?

This depends on the type of application, and the questions you want to be able to answer. For example, if you ran an HTTP service, the minimal set of questions would be: what percent of requests get an error response? What is the 99th percentile response time? To drill down further, you could collect these metrics per-endpoint and aggregate them usefully across endpoints. You could collect a ton of other information too. You want to know how many users are rate-limited at any given time, or how long a request to a remote service takes? Ship a metric for it!

The next question is how would you instrument your application to collect these metrics, and where would you send them?

There are a number of metrics systems like Datadog, Prometheus, and StatsD + Graphite that support storing, aggregating and graphing time series metric data. They conveniently provide Go client libraries that you would use in your application, to collect and send metrics, too . Keep in mind that picking between the systems should depend on your needs — how much you want to spend, whether you want to host the system yourself, the volume of data your applications will be sending, etc. — and the right system for you may change over time.

With respect to setting these systems up and using the Go client libraries, there is extensive documentation available online . Once you've decided on a system, getting started with it should be no problem!

That you should write tests for code that will run in production is a given. This section discusses how to up your testing game by writing more types of tests and more rigorous tests.

In the average Go project, tests takes the form of per-package unit tests that live within the package. So, for an package that has the files: and , there are corresponding files: and . For each function in the package file, there's likely a corresponding function or set of functions in the corresponding test file. While this is good practice, it's only the minimum and rarely sufficient for testing serious production code.

In addition to the two types of tests described above, end to end tests can be invaluable for a complex system. We will not discuss them here since they're typically run by separate systems, outside the application, and test the entire system as it runs in production, but the footnote contains links to information on them .

Let's move on to how to write more rigorous tests.

No section on testing is complete without stating that you should test early and test often. Configure your code review tool of choice to enforce both — the test suite should be run for each review, and a test coverage report included. Configure your CI tool to guarantee the latter too — the build process should run your test suite and fail if any test fails.

The set of five ways to prime code for production presented above is by no means exhaustive. On the other hand, it's the minimal set and assumes the more obvious and practiced good code habits like documentation and unit tests.

It will nonetheless prove to be an extremely useful set, so before you unleash your Go code into production, make a list, put it on a post-it, and post it on a wall you can see:

Shipping production-grade Go is really that simple.|||

Five must-haves for robust, debuggable production code.