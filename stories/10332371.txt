Last week I picked up a blink(1) at a conference, and had a lot of fun with it. It’s a pretty simple little device that can conjure up any color that can be described via RGB. Naturally, I decided to hook it up to IBM Watson’s Tone Analyzer in order to visualize the sentiment of my Slack channel in real time.

Don’t worry, after these pictures there will be a lot of code, and if you want to jump straight into it find it/fork it on github.

Whenever someone messages something angry, the blink(1) turns red:

…or when they say something happy it turns yellow:

…or when they say something sad it turns blue:

…and all shades in between.

Watson gives us values of 0 - 1 for the following nine sub-categories from the following three categories:

We’ll do our best to construct RGB values from these… more on that later.

Of course, this doesn’t have to be hooked up to Slack, but can be applied to any real time stream of text. It would be interesting to see a visualization in real time of a Twitter feed, or the comments on a blog, or maybe even the captions on a TV. And hey, if you have access to a good Speech to Text service (like this one from Watson), that could get pretty interesting too.

First we have all of our imports:

And then we define a few constants:

Once that’s taken care of, we initialize the blink(1):

The RGB value has to be set in order for the method (used later in *the code) to work. This is why we initialize it to (0,0,0).

And initialize Slack (or wherever we want to get our real time data from):

We now need to stream our data to Watson and then set the blink(1)’s color based on the response. That’s what is happening in , it passes the real time Slack text to our method (where the magic happens):

As you can see by my uncertainty in the comments, figuring out how to map Watson’s response to RGB values proved to be rather… difficult. With this current configuration, Taylor Swift’s “Blank Space” renders pink, Coldplay’s “The Scientist” renders blue, and Rage Against the Machine’s “Killing in the Name of” render’s red… which feels right.

This is definitely the place that could use the most improvement. Should we scale our RGB values up such that one is always at 255 so that the blink(1) is always bright? Should we not only have certain traits contribute to values but have lack of traits contribute to other values - i.e. lack of confidence contributing to blue? Should “analytical” really contribute to blue and should “conscientiousness” really contribute to yellow? Should we define more preset colors for certain results?

By the way, the method is just a wrapper around the methods from the module on npm:

I defined this in a separate file just to keep my main file cleaner… but that isn’t necessary.

To run the code yourself, you’ll need an IBM Bluemix and the Tone Analyzer service bound to a Node.js runtime.

I used bluebird’s awesome method when initializing the blink(1). This adds async methods for all methods that take a callback as the last argument. These async methods returns a promise instead of taking a callback.

For example, in the code above I made use of instead of the method defined in the npm module for blink1. These could be chained like this:

To run the app, you have to use babel (or perhaps Node v4 but I haven’t tried that yet):

And again, the codebase can be found here on github, if you want to run this yourself.|||

A fun little example combining a blink(1) with IBM Watson and Slack to visualize the sentiment of incoming messages in real time.