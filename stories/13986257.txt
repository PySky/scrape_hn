One of the more tedious design tasks is keeping your App Store promo images up-to-date. As you add localization support and new features, it can mean taking a few days of a designer's time to update these design assets.

Our iOS app is currently available in 6 languages. Recently, we improved our iPhone app’s downloading feature, and changed its name from “Your List” to “Bookmarks”. A minor change - a few strings and a tab bar icon - but it meant we needed to update lots of screenshots in the App Store!

If you’re an iOS designer, this is a major headache:

Either way, that’s probably a tedious few days' worth of somebody’s time - which is a hard expense to justify if you’re shipping every few weeks! The result: your App Store images are either out of date, or your team is spending too much effort on this task.

A couple of months ago, our mobile team spent time automating our screenshots for the App Store and the Play Store. Now, when we want to update our App Store screenshots, this task now takes about an hour instead of a week - and almost all of that time is waiting for automated tests to compile and run.

To pull this off, we used Fastlane’s tool, and a homegrown Sketch file. Let’s dig in!

UI testing in Xcode is awesome - the tests are quite easy to write (they can literally write themselves with a "record me" feature) When you run ‘em, your app flies through its paces in the simulator. Then, at the right moment, records a screenshot and files it away.

Let’s take a look at the UI test that takes a screenshot of our Bookmarks tab:

What's up with that last line, though?

is a little that handles telling when to take a picture, and what the image should be called. It looks like this:

The Snapfile is where you configure ’s run. Ours looks like this:

So, we’ve got UI tests written, and is able to grab screenshots at the right moment. The problem is - how do you get beautiful content in there?

One tricky thing about UI tests: you have a very limited ability to pass information into your iOS app. This is intentional - UI tests would be pretty weird if you could write code that directly manipulated views in your app! To send information into the running app, we use environment variables - which are basically just strings that the app can then read when it launches.

Remember the bit above with ? When the app is running, we check to see if the contains a given variable, like so:

We’ve also got structs that contain good-looking content for each locale. For example, this struct populates our app’s bookmark tab with the right content for each locale:

Now you’ve got great content in your screenshots for each locale - what do you want to do with them?

For Khan Academy’s app, we want to inset the phone in a device, and have some text above it, like so:

Fastlane offers a tool called that gets you pretty close - but we wanted more control over the layout and background color, so I created a Sketch File that nearly-automates this step.

I won’t go too in-depth into breaking down the Sketch file, but here’s a quick overview of how it’s built: - It uses a Sketch plugin called Sketch Replace Images, which updates image layers in the Sketch file to match similarly-named images in our output. - It uses Symbols and Shared Styles to keep the design consistent across all 180 screenshots. - We used the beautiful Devices sketch files from Facebook Design, and stripped out the shadows, textures, and colors to create our stylized white devices - then scaled them down and pixel-snapped the edges.

Our Sketch file has one-page-per-device, and looks like this:

Now, when we want to update our screenshots, we can type in a Terminal command, and wait about 30 minutes (Swift compilation is responsible for the vast majority of that time; our Android app only takes a few minutes to do this part). Then, we open our Sketch file, run the Sketch Replace Images plugin, and export our screens - that's it!|||

We're the engineers behind Khan Academy. We're building a free, world-class education for anyone, anywhere.