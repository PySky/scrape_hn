I was blown away when I recently heard MapD was going to make the source code for their GPU-powered database freely available on GitHub. MapD has always dominated the top of my benchmarks recap board but up until now if you wanted to use it you'd need to buy a commercial license or run MapD's AMI on AWS. Now anyone can compile their database from source and run it on any machine with as many GPUs as they'd like or take the compiled binaries and run them on any GPU-backed AWS, Google Cloud or Azure instance.

MapD can easily run workloads two orders of magnitude quicker than many other popular analytics engines I've worked with and it comes with a web-based charting and query interface so I suspect this news is going to cause an earthquake in the data world. Now that the cost barrier has been removed more developers can explore MapD and I expect its deployment numbers to grow like never before. Anyone running an Nvidia GPU on Linux can now compile, run and analyse the source code of the most advanced GPU-driven database I've worked with to date.

This should also be a big win for Nvidia as MapD uses their CUDA platform and GPU hardware to achieve its performance. That said, it is worth noting that although MapD relies on Nvidia GPUs for its performance, the software will function and run without a GPU present. On a GPU-less machine the Nvidia driver will complain that no devices were found and MapD will fallback to CPU mode. I haven't conducted any benchmarks using CPU mode so I can't comment on what sort of performance penalty there is but nonetheless MapD seems to function well and without issue.

In this blog post I'll walk through compiling and running MapD from source. As a heads up, if you're following along and you run into any issues please do head over to the MapD community forum to try and get your questions answered.

I'll start by enabling the source code repositories in apt's sources list. I'll then download and install version 8.0 of Nvidia's CUDA Toolkit. This toolkit installs, among other things, graphics card drivers and will replace any existing drivers currently installed. With the new drivers in place I'll reboot the system. Once the system is back up Nvidia's System Management Interface should display daignostics of your driver and GPU(s) installed. MapD uses Thrift to communicate between its clients and server. I'll install it from source as I know the 0.10.0 release of Thrift is known to work well with MapD. $ sudo apt build-dep thrift-compiler $ curl -O http://apache.claz.org/thrift/0.10.0/thrift-0.10.0.tar.gz $ tar xvf thrift-0.10.0.tar.gz $ thrift-0.10.0 $ ./configure --with-lua no --with-python no --with-php no --with-ruby no --prefix /usr/local/mapd-deps $ make -j nproc $ sudo make install $ Folly is a library of C++11 components published by Facebook and is also used by MapD throughout its source code. Below are the steps I ran to compile and build the library from source. Bison is one of the two libraries used by MapD for generating its SQL parser. Below are the steps I ran to compile and build the library from source. Below I'll make sure we're using the intended version of LLVM's binaries prior to MapD's compilation. I'll setup the executable and library path environment variables with the following script.

With MapD's binaries compiled I'll create a data folder, initialise it and then launch both MapD's database server and its Immerse web server. Keep in mind these services are binded to all network interfaces so make sure TCP ports 9090, 9091 and 9092 are firewalled off to systems you do not want accessing them. The Immerse web server should now be available on TCP port . There is a link to the SQL editor at the top of the Immerse UI. In there you can execute SQL against MapD. Keep in mind only the first SQL command in the query textbox will be executed so the the following three queries will need to each be run one at a time. If you're keen to interact with MapD from the command line the following will launch their CLI and connect to the MapD server using the default credentials and database. To learn more about setting up databases and users have a look at MapD's concise guide.|||

Benchmarks & Tips for Big Data, Hadoop, AWS, Google Cloud, Postgres, Spark, Python & More...