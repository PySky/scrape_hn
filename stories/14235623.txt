Rails is an incredible framework, but sometimes you don’t need all the bulk of the asset pipeline and a layout system. In Rails 5 you can now create an API-only Rails app, meaning you can build your front-end however you like. It’s no longer 100% omakase. Like using , for example. And for projects that don’t need CMS-like capabilities, that works pretty great straight away. even supports proxying API requests in development, so you can be running two servers locally without having to do any voodoo. Gosh, is great. Still, I’ve worked with ActiveAdmin on a few projects, and as an interface between you and the database, it’s pretty unmatched for ease of use. There are a host of customisation options, and it’s super easy for clients to use if you need a CMS. The issue is that removing the non-API bits of Rails breaks it. Not ideal. But never fear, all is not lost! With a couple of steps you can be running a Rails 5, API-only, serving your client on the front end, with full access to ActiveAdmin. We’re going to build it, then we’re going to deploy it to Heroku, and then we’re going to celebrate with a drink. Because we will have earned it. Given that theme, we’re going to build an app that shows us recipes for delicious drinks. It’s thematically appropriate! So, what are we going to use? Create React App

All the power of a highly-tuned Webpack config without the hassle. Rails in API-only mode

Just the best bits, leaving React to handle the UI. Seamless deployment on Heroku

Same-origin (so no CORS complications) with build steps to manage both Node and Ruby. And it’ll look something like this: Our app, List of Ingredients, which really does what it says on the tin. If you want to skip ahead to the finished repo, you can do so here:

https://github.com/superhighfives/list-of-ingredients And if you want to see it in action, you do that here:

https://list-of-ingredients.herokuapp.com/ Let’s get started, shall we?

There are a ton of great tutorials on getting Ruby and Rails set up in your local development environment. https://gorails.com/setup/ will work out your operating system, and will walk you through getting Rails 5.0.2 installed. If you’ve already got Rails 5, awesome. The best way to check that is to run in your terminal. If you see , we’re ready to roll. Note: At the time of writing the newest version of Rails, 5.1, doesn’t quite work with these steps. Best to stick with 5.0.1 for now. So, first up, start a new Rails app with the flag: Right. We are already part of the way to making a delicious cocktail. Maybe use this time to congratulate yourself, because you’re doing great. Once the install process has finished, you can fire up Rails: It’ll do some stuff, eventually telling you that it’s listening on . If you visit it, you should see something like this:

With a couple of small tweaks to Rails So, incredibly (and awesomely, which is not a word), you can still get ActiveAdmin working like a charm with this set up. Before you can install it, you just need to switch a couple of Rails classes and add some middleware that ActiveAdmin relies on. First, you’ll need to swap your from using the to using : As Carlos Ramirez mentions, this requirement is an unfortunate design decision from ActiveAdmin, as now any controllers we make that inherit from won’t take advantage of the slimmed down API version. There is a work around, though. Add a new to your : So you can get your controllers to inherit from , not . For example: From there we’ll need to ensure that the middleware has the stuff it needs for ActiveAdmin to function correctly. API mode strips out cookies and the flash, but we can 100% put them back. In your add these to the class: Your should look something like this: Do not confuse the flash with The Flash, who is likely heavily trademarked. I don’t have the kind of money I’d need laying around if he turns out to be litigious. I’m sure you do, moneybags. You should also move into the  group and add into the  group. Heroku doesn’t support sqlite, and you’ll need to swap those things around once you get to deploying your app. Why not do it now? Now, keen developers will be sharpening their pitchforks right now, because you should 100% run Postgres locally if you’re developing a Real Application, to ensure your local environment matches your production one. But for the purposes of this exercise, let’s just be roguish and tell no one. They’ll never know. Bundle and install everything, and then install ActiveAdmin: You should see something like the following: Once again you can fire up Rails: But this time hit . You should see something like this:

So. We need a front end. If you don’t have yet, install it globally with: And then, in the root of your app, generate it into the folder: It’ll take a bit. You probably have time for a cup of tea, if you’re feeling thirsty. Once it’s installed, jump in and fire it up: Right! You have a simple running. That is good. But we can do more than that. As I mentioned earlier, one of the best bits about working with and an API is that you can automatically proxy the API calls via the right port, without needing to swap anything between development and production. To do this, jump into your and add a proxy property, like so: Your file will look like this: (along with a bunch of fancy new language features and polyfills you should 100% check out) is included with , so our front end is ready to make calls to the API. But right now that would be pretty pointless—we’ll need some data to actually fetch. So, let’s get this cocktail party started. We’ll need two relations, the , and the that those drinks are made with. You’ll also potentially need a blender, but honestly, a margarita with a couple of ice cubes is still so delicious. Promise. Now, normally I’d say avoid scaffolding in Rails, because you end up with a ton of boilerplate code that you have to delete, but for the purposes of the exercise, let’s use it. And then delete it. Do what I say, not what I do and all that. Before that though, I should mention something. One downside to ActiveAdmin using , which reduces the boilerplate for Rails controllers, is that Rails then uses it when you scaffold anything in your app. That breaks stuff: is never a good start to the last line of output. Fortunately, this is a solvable problem. You just need to tell Rails to use the regular scaffolding process. You know, from when we were young and scrappy and people didn’t say JavaScript fatigue like having options is a bad thing. The Good Old Days. Just remind Rails which to use in your and we can be on our way: Your should look something like this, and everything should be right with the world again: An artist’s representation of me after spending hours trying to understand this particular error by typing every variation of it into StackOverflow. So, scaffolding. First, the model: Notice that the references the . This tells the model to the , which is part of the whole relative database association thing. See, my Relational Databases 101 comp-sci class was totally worth it. Unfortunately this won’t tell your model to of the model, so you’ll also need to add that to all by yourself: Then we can migrate and tell ActiveAdmin about our new friends: Now, Rails is a security conscious beast, so you’ll need to add some stuff to the two files ActiveAdmin will have generated, and . Specifically, you’ll need to permit ActiveAdmin to change your model, which when you think about it is pretty important. Without , you can never edit your delicious drink recipes. Not on my watch. In our routes, we’ll need to hook up the drinks resource. I like to scope my API calls to , so let’s do that: And you should be able to visit to see… *drumroll* Nothing. We should probably add some drinks. To save some time, here’s a that I prepared earlier, featuring a delicious negroni and a delicious margarita: Now, not everyone is super keen on alcoholic beverages, so feel free to swap the booze out for something a little more low key, like sparkling apple juice, which is hands down the best drink ever invented. You’ve already migrated, so it’s just a case of seeding the database: Now when you refresh you should see: So, we’re pretty much good to go on the database front. Let’s just massage our scaffolded controllers a little. First, let’s cut back the . We can make sure only returns the and of each drink, and we can make sure includes the and of each ingredient of the drink. Given how little data is being sent back, you could just grab everything from , but for the purposes of showing how this could work in the Real World, let’s do it this way. You’ll want to make sure your controllers are inheriting from , too. And let’s just get rid of 99% of , because it’s not going to be doing a lot: And now we have some fancy data to feed the client. Good for us! This is a big chunk of the setup, and you’re doing great. Let’s celebrate with some Adventure Time, and take this opportunity to think about how great that cocktail is going to be. Talk about earning it:|||

Blending a rock-solid API and CMS with the absolute best in front-end tooling, built as a single project and hosted seamlessly on Heroku. Rails is an incredible framework, but sometimes you don’t…