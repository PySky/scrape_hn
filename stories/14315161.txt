You might have run across dot products in math class. Or rather, you've been smacked across the face with the definition.

But what do you even use these things for? One common use is in games with 3D models.

Computers are fast. And they’ve gotten faster in the last couple of decades. If you’ve played video games over any length of time, you’ve seen games get improved graphics but still responsive enough for an immersive experience.

In reality, games take a lot of shortcuts to achieve their responsiveness on even the fastest computers. Why do the work if the players can’t tell the difference? As developers often quip, “the fastest code is the one that the computer never runs.”

So what can we save work on? One easy answer is to skip rendering what players can’t see.

In 3D games, all characters are made of triangles. No matter how complex they look, they're just a mesh of triangles. Even quadrilaterals are made of two triangles. If we strip the textures laid on top, you can see the mesh of triangles.

At any one time, the player can only see half the model—the half that's facing them. If that’s the case, we can skip rendering triangles the player can’t see. That reduces the work we have to do by about half, and makes our game more responsive.

But how do we tell whether the triangles are facing towards the player or not? Computers can only process numbers, and it's by using the dot product that we can get a numeric representation of whether a triangle is facing a player or not.

A vector is just a group of three numbers that represent direction, usually drawn as an arrow. Below, we show two vectors originating from the origin. We calculate the dot product as you drag the vectors around.

Try dragging the vectors, and see how it changes the dot product.

Notice the dot product is positive if the two vectors are pointing in the same direction, and negative if the vectors are pointing in opposite directions. And if they're perpendicular? The dot product is zero.

To represent the direction of the flat side of the triangle (the face), we use the vector that’s perpendicular to the face, called the normal vector.

We won't go over how to calculate the normal vector here, but if you're really interested, let me know here.

Now that we have the normal vector, we need one other thing besides the normal vector. We need a vector representing the direction the player is looking at. It starts from the player's eyes, and points in the direction they're looking at, as demonstrated by our fish player in a bowl.

Now we have both the view vector and the normal vector. How can we tell if a triangle is facing us?

We take dot product of the player's view vector with the normal vector of a face. If it is a positive number, the triangle is facing away from the player. If it is a negative number, the triangle is facing towards the player.

Try dragging the player (fish) around.

Notice the segments of the "I" model that are facing away from the player get culled, whereas, the segments facing towards the player gets rendered.

The same applies for a 3D model. If you do a little bit of work up front to cull out segments a player can't see, then it saves us a lot of work later on to render it.

Why does multiplying the corresponding pairwise coordinates of two vectors give you a number that tells you whether two vectors are facing towards or away from each other? For now, I assume most of you don't want to dive that deep yet. But for those of you that do, start with this video on linear transformations and then watch this video on duality of dot products

But if you do, let me know.

One simple game mechanic you can implement with a dot product is Boo Diddley from Super Mario Brothers or Weeping Angels from Doctor Who.

While the player faces the monster (Boo or the Weeping Angel), they freeze. When the player turns away from the monster, then it moves slowly towards the player, growing more menancing as it gets closer.

You'd simply take the dot product of the view vector of the player with the view vector of Boo. When should Boo move, when the dot product is positive or negative?

Because dot products are closely related to linear transformations, you'll find dot products hidden in other places in engineering, physics, and gaming. You'll find it in lighting in 3D modeling, neural networks in machine learning, convolution in signal processing, as well as mechanics in physics. If you have other examples, let me know.

In conclusion, one of the applications of a dot product is to determine whether two vectors are pointing in the same direction or not.|||

