I was recently asked in an interview about my opinion on how to be a great programmer. That‚Äôs an interesting question, and I think we can all be great programmers, regardless of our talent, if we follow a couple of rules that ‚Äì I believe ‚Äì should be common sense. In fact, these rules don‚Äôt all apply to programmers only, but to any professional.

Not everything in this list is meant to be taken entirely serious, some things are just my opinion and yours may vary, and not all descriptions of programmer personalities match real-world situations I may have encountered, so if in doubt, please do not take offense. I didn‚Äôt mean you üôÇ

Here they are:

There are essentially these types of programmers asking questions:

By now, it should be clear that a well prepared question (concise, simple, short, yet with enough details) will yield much better answers. If you know what exactly you want to learn with your question, chances are, you‚Äôll get exactly what you wanted.

In fact, mostly, it‚Äôs better to try to avoid asking questions. Perhaps you can figure it out yourself? Not always, of course. Many things, you simply cannot know and by asking a domain expert, you‚Äôll find the quickest and most efficient path to success. But often, trying something yourself has these benefits:

There was a very interesting article on reddit, recently about not leaving broken windows. The essence of the article is to never compromise on quality. To never become a slacker. To never leave ‚Ä¶ broken windows. Here‚Äôs a quote from the article

This isn‚Äôt about being a perfectionist, in fact. Sometimes, fixing broken windows can be postponed (and must be, of course). But often times, by allowing windows to break and stay broken, we‚Äôre introducing a situation where no one is happy. Not us the programmers, not our customers, not our users, not our project managers. This is an attitude thing and thus at the core of being professional. How did Benjamin Franklin say?

That‚Äôs true for everything. In this case, ‚Äúlow price‚Äù is the quick win we might get by implementing something in a sloppy way.

In an ideal world, everything in software is ‚Äúdeterministic‚Äù. We‚Äôd all be functional programmers, writing side-effect free, pure functions. Like . No matter how many times you execute the following:

‚Ä¶ the result is always the same, expected result. The universe and all it‚Äôs statefulness will have absolutely no impact on this computation. It‚Äôs deterministic.

We can do that, too in our own programs, not just in standard libraries. We can try to write side-effect free, deterministic modules for as often as possible. This isn‚Äôt really a matter of what technology we choose. Deterministic programming can be done in any language ‚Äì even if functional languages have more tools to prevent accidental side effects through more sophisticated type systems. But the example I‚Äôve shown is a Java example. Object orientation permits determinism. Heck, procedural languages like PL/SQL allow for determinism. It‚Äôs a requirement for a function to be deterministic, if it is to be used in an index:

So again, this is a matter of discipline. You could see a side-effectful procedure / method / ‚Äúfunction‚Äù as a ‚Äúbroken window‚Äù. Perhaps it was easier to maintain a side-effect, hoping that eventually, it can be removed. But that‚Äôs usually a lie. The price will be paid later, when non-determinism suddenly strikes. And it will.

That previous link is key. Murphy‚Äôs Law is something we programmers should observe all the time. Everything can break. And it will. Come on, as software engineers, we know it will break. Because our world is not deterministic, neither are the business requirements that we‚Äôre implementing. We can implement tip #4 (determinism) only until it is no longer possible. From then on, we‚Äôll inevitably enter the world of non-determinism (the ‚Äúreal world‚Äù), where stuff will go wrong. So, aim for it. Expect the unexpected. Train your inner pessimist to foresee all kinds of things.

How to write that pessimistic code in a concise manner is another story, of course. And how to distinguish from things that will fail (and need to be dealt with) from things that might fail (and don‚Äôt need to be dealt with), that takes some practice üôÇ

Everything you‚Äôve been taught is potentially wrong. Including (or probably: especially) when someone really popular says it. Here‚Äôs a nice quote:

Our profession is full of hypocrisy. We like to think of ourselves as mathematicians, where only the purest of ideas persist, and they‚Äôre necessarily correct.

That‚Äôs wrong. Our profession is built on top of mathematics, but unless you go into the funky world of category theory or relational algebra (and even then, I doubt everything is ‚Äúcorrect‚Äù), you‚Äôre in the pragmatic world of real-world business requirements. And that‚Äôs, quite frankly, very far from perfect. Let‚Äôs look at some of the most popular programming languages out there:

Do you really think that these languages resemble mathematics in the least bit? If so, let‚Äôs discuss segmentation faults, Java generics, or SQL three-valued logic. These languages are platforms built by pragmatists. There is some really cool theoretical background in all of them, but ultimately, they had to do the job.

The same is true for everything built on top of languages. Libraries. Frameworks. Heck, even architectures. Design patterns. Nothing is right or wrong. Everything is a tool that was designed for some context. Think of the tool in its context. Never think of the tool as a standalone raison d‚Äô√™tre. We‚Äôre not doing art for art‚Äôs sake.

So, say no to unquestioned:

All of these are nice tools given a certain context. They don‚Äôt always hold true. By staying curious and thinking out of the box, you‚Äôll be a better programmer and know when to use which one of these tools.

True. There are luminaries out there who outperform everyone.

But most programmers are simply ‚Äúgood‚Äù. Or they have the potential to be ‚Äúgood‚Äù. How to be a good programmer? By doing it. Great software wasn‚Äôt written in a day, and popular people aren‚Äôt the only heroes of our time. I‚Äôve met many great programmers no one knows about, because they lead private lives, solve private problems of small companies.

But great programmers all have one thing in common: They just do it. They practice. They work every day to get better and better.

Want to get better at SQL? Do it! Try to write a SQL statement with some new features in them, every day. Use window functions. Grouping sets. Recursion. Partitioned outer join. The MODEL and/or MATCH_RECOGNIZE clauses. It doesn‚Äôt have to ship to production every time, but the practice will be worth it.

There might be only very few ‚Äúgood‚Äù full stack developers out there. Most full stack developers will rather be mediocre at everything. Sure, a small team might need only a few of them and they can cover a lot of business logic to quickly bootstrap a piece of new software. But everything will be quite sloppy and ‚Äúkinda works‚Äù. Perhaps that‚Äôs good enough for the minimum viable product phase, but in the long run, there will be more complex problems that a full stack developer will not have the time to properly analyse (or foresee!).

Focus on one subject mostly, and get really good at that. A specialist will always be in demand as long as that specialist‚Äôs niche exists, and many niches will outlive us all (hello COBOL or SQL). So, do your career a favour and do something really good, rather than many things ‚Äújust ok‚Äù.

While you should mostly focus on one subject, you shouldn‚Äôt forget the other subjects completely. You may never be really really really good at all of SQL, scaling up, scaling out, low level performance, CSS (who‚Äôs good at that anyway!?), object orientation, requirements engineering, architecture, etc. all at once (see tip #8). It‚Äôs just not possible.

But you should at least understand the essence of each of these. You should understand when SQL is the right choice (and when it isn‚Äôt). When low level performance tuning is important (and when it isn‚Äôt). How CSS works in principle. The advantage of object orientation, FP, etc.

You should spend some time to play with these (and many more) concepts, technologies to better understand why they‚Äôre important. To know when to apply them, and then perhaps to find an expert to actually execute the work.

By playing around with new paradigms and technologies, you‚Äôll open up your mind to entirely different ways of thinking, and chances are, you‚Äôll be able to use that in your every day work in one way or another.

No one is able to handle huge complexity. Not in software, not in any other aspect of life. Complexity is the killer of good software and thus simplicity is the enabler. Easy to understand. Hard to implement. Simplicity is something that takes a lot of time and practice to recognise and produce. There are many rules you can follow, of course.

One of the simplest rules is to have methods/functions with only a few parameters. Let‚Äôs look at that. Surely, the aforementioned method qualifies. We can write and without reading any documentation, everyone will immediately understand what this does and why. The method does one thing and one thing only. There are no complicated context/settings/other arguments that can be passed to the method. There are no ‚Äúspecial cases‚Äù, nor any caveats.

Again, producing simplicity in a library is much easier than doing that in business logic. Can we achieve it? Perhaps. By practicing. By refactoring. But like great software, simplicity is not built in a day.

(Protip: Conway‚Äôs Law applies. It is utterly impossible to write good, simple software in an environment where the business is super complex. Either, you like complexity and ugly legacy, or you better get out of that business).|||

I was recently asked in an interview about my opinion on how to be a great programmer. That's an interesting question, and I think we can all be great programmers, regardless of our talent, if we follow a couple of rules that - I believe - should be common sense. In fact, these rules don't‚Ä¶