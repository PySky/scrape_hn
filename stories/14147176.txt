Traditionally, Asp.Net web applications deployed on Windows Server and IIS are not known for being cloud friendly. That is now a thing of the past, thanks to the open source cross platform .Net Core and SQL Server For Linux. When combined with Docker and a container management platform (such as Kontena), it is now possible to run high performance .Net services in the cloud with the same ease that Ruby, Python and Go developers are used to.

First things first, we need to install our development tools. For this tutorial we will be using a mix of text editor and the command line. For editing cross platform C# projects I highly recommend Microsoft's lightweight Visual Studio Code. For the command line I will be assuming a Bash shell. Bash is the default shell for the macOS terminal, and is now also available on Windows starting with Windows 10.

For .Net Core, this tutorial assumes you are using a minimum version of 1.0.4.

Finally, you need to install Docker. Docker runs natively on Linux, but there are integrated VM solutions available for macOS and Windows (Windows 10 or later only, older versions of Windows should use a VM).

From the terminal, we are going to create a new project directory and initialize a new C# project:

Next, let's restore our dependencies and run our API:

And finally, in a second terminal window, let's test out the API with :

One change you will also want to make is to register the service to run on hostnames other than . This is important later when we run our service inside of Docker. Open up and modify the startup code:

Now it's time to add a database. Thanks to Docker and SQL Server for Linux, it's super fast and easy to get this started. From the terminal, let's download and run a new instance of SQL Server as a Docker container.

That's all that's needed to have a SQL Server development database server up and running. Note that if you are running Docker for Windows or Docker for Mac you need to allocate at least 4GB of RAM to the VM or SQL Server will fail to run.

Next, let's add a new API controller to our application that interacts with the database. First we need to add to our file, which should look like this:

Next, we create a new . In our folder, create a file and edit as follows:

Next is the model class. In the folder, create a file , and create the Product model:

And finally, let's create a new API Controller. In the folder, create a file and add the following code:

This should be enough for us to provide a simple CRUD style REST interface over our new Product model. The final step needed is to register our new database context with the Asp.Net dependency injection framework, and fetch the SQL Server credentials. In the file , modify the method:

Note that we are pulling our SQL Server credentials from environment variables, defaulting to the values we used above for setting up our SQL Server container. In a production application you would probably use the more sophisticated Asp.Net core configuration framework and a SQL Server user other than "sa".

Time to test out our new API. In your terminal window, restore and start up the API again:

In another window, let's use to POST some data to our API:

If all goes well, you should see a 200 status response, and our new Product returned as JSON (with a proper database generated id).

Next, let's modify our data with a PUT and change the price:

Of course, we can also GET our data:

And finally we can DELETE it:

Now that we have our service, we need to get it in Docker. The first step is to create a new that tells Docker how to build our service. Create a file in the root folder called and add the following content:

Next, we need to compile and "publish" our application, and use the output to build a Docker image with the tag :

And finally, we can run our new container, linking it to our SQL Server container:

You should be able to access the API via the same as we did earlier.

In our next installment, we will show you how to take your new API and run the whole thing inside Docker. And then we will move those containers into the cloud with Kontena.

Accompanying source code for this tutorial can be found at https://github.com/kontena/dotnet-example.

Want to learn about real life use cases of Kontena, case studies, best practices, tips & tricks? Need some help with your project? Want to contribute to a project or help other people? Join Kontena Forum to discuss more about Kontena Platform, chat with other happy developers on our Slack discussion channel or meet people in person at one of our Meetup groups located all around the world. Check Kontena Community for more details.|||

