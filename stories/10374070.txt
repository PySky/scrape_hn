This project was inspired by the pie plugin architecture.

Like , it enables you to create an JSON-RPC plugin communication over standard in/standard out, however, it uses Docker containers as plugin providers.

stdin/out/error is still used for RPC; however, all of the communication occurs over the Docker API (via the API).

Currently, only plugin are supported (not consumers) and you must run Docker on a non-unix socket port.

Command example_plugin is an example of a very simple plugin. example_plugin provides two APIs that communicate via JSON-RPC. It is expected to be started by example_master. main ( ) () { log. ( ) pie. () p. ( , api{}); err != { log. ( , err) } p. ( , api2{}); err != { log. ( , err) } p. (jsonrpc. ) } api {} ( , * ) { log. ( got call for SayHi with name , name) *response = + name } api2 {} ( , * ) { log. ( got call for SayBye with name , name) *response = ; i < ; i++ { *response += + name } }

The example below will execute the 'Plugin.SayHi' method in the container!

See the ./example directory for an example of a plugin, and a caller that launches the plugin via Docker.

$ /src/github.com/jandre/dockerpc/example $ ./plugin make may need `sudo make` if you aren't in the docker user group. $ ../caller make $ ./caller 2015/10/12 08:15:01 [plugin log] 2015/10/12 12:09:23 got call SayHi with name 2015/10/12 08:15:01 Plugin.SayHi jen Returned: Hi jen 2015/10/12 08:15:01 [plugin log] 2015/10/12 12:09:23 got call SayHi with name 2015/10/12 08:15:01 Plugin.SayHi bob Returned: Hi bob 2015/10/12 08:15:01 2015/10/12 08:15:01 Error: rpc: can|||

dockerpc - RPC over Docker Containers as Plugins