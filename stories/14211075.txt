In my previous blog post I wrote how to build, boot and connect to an OpenSSH server with Docker's LinuxKit toolchain. We now take that to the next logical step which is to package an application with a secure, immutable OS to create an appliance.

An appliance is an application in a box that can be deployed to a hypervisor. In this case we get a bootable image that will work on the cloud, bare metal, our laptop or Docker itself. It can be deployed and booted up in seconds.

I suggest running through my LinuxKit OpenSSH tutorial (which takes 10 minutes) before proceeding. This will build the Moby and LinuxKit toolchain that is required for the tutorial.

Minio is an open-source object storage offering which has an API compatible with S3. This means you can take advantage of existing on-prem resources or just bring portability to your storage solutions.

Minio can also be used as a back-end to store Docker images in a registry.

If you'd like an introduction on how to deploy and use Minio, read my tutorial: Meet Minio

Minio already packages and maintains the server component through their Docker Hub account. We'll use the release for all the latest features.

If you've not seen Minio before, you can run an S3 server in Docker like this:

You can then use the Minio client utility or your normal S3 client libraries to read/write objects. A UI is also exposed on port 9000.

Login/authentication is done through a secret and access key printed to the console when the Minio assembly boots up. You can find the start-up logs like this:

Step one is building a YAML file for a base system. We'll start with the file from the LinuxKit repo and just add in the parts we need for Minio.

The LinuxKit format is a technical specification and it's very new - so as a community I'd say we're still getting used to how to read and edit it.

The following configuration sections are used in our example:

I added the following under the section:

If we follow the principle of least privileges then we need to give the minimum set of Kernel capabilities to the image. It turns out that Minio will run without any additional privileges, so to specify "none" leave out the section completely.

A good way to test for if a Docker container needs additional privileges is with the flag passed into :

Now we need to build an image (ISO etc), which will output the artifacts we need into the current folder.

This is the output you should see:

The easiest way to boot the image is with the tool (installed in the pre-requisites section). We will also assign a static IP address as we go along. We'll also need to pass an additional flag to create and mount a disk image so that the VM can keep persistent data for the S3 objects and buckets we create through the application.

Now when Minio server starts up it generates an access key and secret key, we need those for use with the client or our API.

We can then execute a couple of commands on the VM's console to find the access keys required.

On the VM shell, type in the following.

This can be used later with the Minio client.

The easiest way to connect to exposed services running on HyperKit/VPNKit (packaged with Docker for Mac) is to run a Docker container. We can then access the IP specified in part 3.

Now set up a remote S3 host called and create your first bucket:

In the command we bind mounted the Downloads folder. So why don't we use Minio's mirror capability to sync the downloads folder into the VM?

When the mirror is finished, download another file and you'll see it get synced up automatically because of the flag.

To pull down the data into another Docker container, to the folder:

It's extremely useful to be able to build and boot systems produced with LinuxKit on Docker for Mac, but in production you'd do something slightly different:

Since publishing I've managed to get a LinuxKit system booting on a vSphere cluster using the ISO image and a disk created through the administration UI. It also worked very well through VirtualBox:

The LinuxKit authors have provided examples for Google Cloud and Packet here: LinuxKit examples

I hope this post piqued your interest for LinuxKit. If you'd like to get involved with the project or start building your own bootable VMs then - head over to the Docker Slack community and join the discussion.|||

Follow this deep dive into packaging an application as an appliance using LinuxKit and the Moby CLI. Minio is an S3 server you can host yourself.