The difference is like day and night, both in regards to hardware and software. No valid comparison at all. When to use which The power usage of a Pi would be too much. Money is an issue (especially if you need several or many individual controllers in your project, each one performing very simple logic only). You want to get nitty and gritty and work on a much lower level for fun or for gaining knowledge. You need extreme simplicity and/or 100% defined real-time behaviour and zero chance that something out of your control kills your program. You do not need ethernet, difficult USB-host functionality (i.e., accessing hard drives; using it on the client side, e.g. as a HID device, is OK) and so on. Most of these can be fitted to an Arduino (verrry slooowly), but at a high cost in terms of RAM/EPROM and also functionality. As there is no preemptive multitasking, unblocking tasks gets quite complicated very quickly. You are OK with the simplistic Arduino development IDE, or with digging much deeper (i.e., building the programs yourself), and - if you are not going for a USB-upload device like the Pro Micro - a bought or self-made development kit/burner. In all other cases, a Pi is vastly more user friendly. The Pi is simply another (slow) computer. Don't get me wrong. I own a Pi and use it for several Linux services in my network. I also frequently program Arduinos (Pro Micros mostly). Both are great, I like them the same, but they have very different usage scenarios. On your question about difficulty - it is relative. The only time the Arduino got difficult for me were hard to debug timing issues, especially if combined with questionable electronics (i.e., EM interference, too long cables etc.). If you are firm in your language of choice (i.e., C for the Arduino IDE), then you should be able to hack any libraries you are employing. Still, it will always be more complex then a Pi, where you can for example use a scripting language of your choice for non-timing-critical things - those will always be more easy to develop and debug in.|||

