Sophia is a modern transactional key-value / row storage library. How does it differ from other storages?

Sophia is RAM-Disk hybrid storage. It is designed to provide best possible on-disk performance without degradation in time. It has guaranteed O(1) worst case complexity for read, write and range scan operations.

It adopts to expected write rate, total storage capacity and cache size. Memory requirements for common HDD and Flash drives can be seen Here. What is it good for?

For server environment, which requires lowest latency write and read, predictable behaviour, optimized storage schema and transaction guarantees. It can efficiently work with large volumes of ordered data, such as a time-series, analytics, events, logs, counters, metrics, full-text search, common key-value, etc. * Full ACID compliancy * MVCC engine * Optimistic, non-blocking concurrency with N-writers and M-readers * Pure Append-Only * Unique data storage architecture * Fast: O(1) worst for read, write and range scan operations * Multi-threaded compaction * Multi-databases support (sharing a single write-ahead log) * Multi-Statement and Single-Statement Transactions (cross-database) * Serialized Snapshot Isolation (SSI) * Optimized storage schema (numeric types has zero-cost storage) * Can be used to build Secondary Indexes * Upsert (fast write-only 'update or insert' operation) * Consistent Cursors * Prefix search * Automatic garbage-collection * Automatic key-expire * Hot Backup * Compression (no fixed-size blocks, no-holes, supported: lz4, zstd) * Direct IO support * Use mmap or pread access methods * Simple and easy to use (minimalistic API, FFI-friendly, amalgamated) * Implemented as small C library with zero dependencies * Carefully tested * Open Source Software, BSD|||

