TL;DR: Relay is an open source framework from Facebook for declarative data interaction with GraphQL. It fills the data fetching gap that existed with React + Flux applications and allows developers to request exactly the data they need for each component. In this tutorial, we see how to set up a basic Relay application and how to protect GraphQL with JWT authentication. You can check out the repo for the tutorial, as well as the Auth0 docs for an integration with express-jwt.

Facebook has just open sourced Relay, a JavaScript framework for data interaction. Using GraphQL, Relay makes it easier to get data to and from the server and also eases tight coupling between client-side components and the server. It allows developers to focus more on their actual applications and less on the details of moving data around.

Those familiar with Flux will know that it allows apps to have one-way data flow, which means that the data needs for each component are easy to reason about. However, Flux didn't provide a good way to interact with the server, so Relay can be thought of as the next evolution of Flux.

Often, crafting application data sources can come down to trade-offs between performance and duplication of code. To make sure all the data our application needs for a given component is ready at the same time, we could set up an endpoint to request everything. However, this will have impact performance. We could define a lot of custom endpoints that serve us only the data we need, but this would mean writing a lot of code and potentially making a lot of HTTP requests. In either case, if we were to change our components so they required more data, we would probably need to adjust the structure of the data coming from our server. Ultimately, this arrangement between client and server can be somewhat brittle.

To address these issues, Relay allows us to specify exactly the shape of the data that we want from the server for a given component. Because we can place our queries within our components, we can better reason about the data associations for each component.

Without Relay, components make requests to many different endpoints.

With Relay however, all requests are made to a single GraphQL endpoint through queries and fragments.

In this tutorial, we will take a cursory look at Relay and GraphQL by building a simple application that allows us to display programming conferences that a user is registered to attend. This tutorial will focus on the core concepts of Relay and will cover only data retrieval. We will see how to write data in the next article of this series.

Since Relay uses GraphQL, we need to expose a GraphQL server that serves data when requested. After setting up the database interaction, the first step is to define a schema for GraphQL to use. The schema can be thought of as where we register anything that we want to pull out of GraphQL. This includes declarations for our data types, queries, and mutations (changes to data). GraphQL enforces strong typing and provides methods for us to register types.

Relay lets us do composition with our React components in much the same way that we're used to. It provides a higher-order component known as a container, which is a wrapper around regular React components. Containers let us tell Relay about our React components' data needs. They are where we specify fragments to query on the server before passing them down to other components via .

A query looks a little bit like a JSON object, but with keys only and not values. GraphQL uses a query string to look for matches and serves them back to the client. When we build our schemas, we need to tell GraphQL about the fields associated with each query type we want. On those types, we can create relationships with other types. Once those are set up, we use to retrieve the root fields of the given type, or `fragment to retrieve the fields from whatever relationship we defined.

The best way to get started and follow along is to clone and install a prepared Relay package. We're basing this tutorial on Michael Hart's simple-relay-starter. This repo is a modification of Facebook's relay-starter-kit. It makes getting up and running with Relay easier because it requires less boilerplate on the backend.

Clone the repo and then run:

Relay needs a file to be built from the main schema, and running with will allow these changes to be picked up.

We won't set up a real database for this example, because we want to focus on Relay and its features. Instead, we'll set up a mock database that could easily be substituted for a real one.

First, let's set up the models for our data.

We'll also need to populate some arrays to hold some mocked out data.

Here we're using the models to create some users, frameworks, and conferences. The final step in the database will be to export methods that use this data.

When putting together the schema for GraphQL, we'll need to set up our node definitions; in other words, the object and type that should be associated with a given node based on a global ID. GraphQL tracks nodes based on a global ID, from which we can check the type.

Next, we'll need to define our user type. This is where we detail all of fields involved with the type, as well as the associations with other types.

We've now registered the and with and named and described them. The method checks whether objects used in the application are instances of those we defined in our mock database. We register root fields and relationships in , and in the case of , we define a relationship with .

On the key within the relationship, we use to refer to the conference type defined above. We've got an argument defined on called , which we will use later to find users by id from the front end. It is this argument that is passed into the method to pull out a listing of conferences for a given user.

Finally, we need to export the so that it can be used from the app.

We point the query to its type, , and tell it what database operation to perform on initialization in the function.

With the database and the schema done, we can now focus on building the components for the application. The app will show conferences that each user is attending, so we'll make a component that displays each in a card. We'll use Bootstrap for styling. Before that, we'll need a top-level component that will call on the conference card child component.

In this component, we map over the from the data that will be returned once everything has been set up. We're mapping the edges of a component called , which we're passing the edge information into. Now, let's make use of this data in the conference component.

In this component, we get the name and description of the nodes within each edge.

We need to wrap the higher-order Relay container around the component and export it.

The container allows us to define some which are useful for querying specific data when the app loads. In this case, we're saying that we want the first user. You'll recall that in the schema we received an argument call when we defined on the . This is that variable. The object on is a string that is parsed by GraphQL to execute the query. In it, we ask for the user's name and then the conferences that are attending. For the conferences, we get back the , and on nodes.

We also need to export the queries for the to use. This is called the route for the component, but as Facebook states, this name is a bit misleading and will likely change.

The query names here line up with the fragment names specified above.

As the last step, we'll specify our as the entry point for the browser to pick up. If you're following along in simple-relay-starter, this will be in .

The is passed the Relay container we specified as our component, as well as the set of queries for its route.

If everything is set up correctly, you should be able to see the app in the browser.

Auth0 issues JSON Web Tokens on every login for your users. This means that you can have a solid identity infrastructure, including Single Sign On, User Management, support for Social (Facebook, Github, Twitter, etc.), Enterprise (Active Directory, LDAP, SAML, etc.) and your own database of users with just a few lines of code. Auth0 is perfect for Single Page Applications and very easy to set up.

Auth0 provides an integration for Relay apps that makes it easy to implement authentication. Have a look at the docs page or open a support ticket with us to find out more.

Relay provides a network layer that allows us to modify the requests that go to the GraphQL endpoint on our server. With it, we can send custom headers with our requests, which is perfect for adding authentication. Let's see how we can protect the whole GraphQL endpoint with express-jwt middleware on the server. We'll authenticate against an Auth0 account, but setting up JWT authentication on your own server will work the same way.

First, we'll need to install express-jwt and some other helpers.

Next, we need to add in the authentication middleware on the server.

We're using a file to store our Auth0 credentials in this case, and then we're calling them when we set up the middleware. We then just need to pass this middleware into and our endpoint will be protected.

The file for Auth0 accounts typically looks like this:

Now from the client, we just need to retrieve and store a JWT in local storage. How you implement the request for the JWT is left to your discretion.

With the JWT in local storage, we can set up the network layer to send the JWT as a header one requests to the GraphQL endpoint.

With that, our data is protected and we have a way to access it with a JWT.

When it comes to data interaction, Relay takes care of details that developers would normally need to worry about on their own. Although quite a bit of boilerplate is needed, querying is more efficient and problematic common edge cases are handled out of the box. The ability to request only the data we require is beneficial, and having queries live right beside the components they serve helps us to reason about our app.

This first look at Relay showed only how to retrieve data from a server. In a future post, we'll cover how to do mutation with Relay.

Big thanks to Michael Hart for his simple-relay-starter repo.|||

Learn how to get started with a Relay app and how to protect the GraphQL endpoint with JWT authentication.