In this article, I’m going to share with you even more underutilized features of C# language (underutilized). If you missed the first publication you should check it- Top 15 Underutilized Features of .NET

After so many comments about the previous title of the article –  “Top 15 Hidden Features of C#”, I decided to change it to the current one. Thank you all for the suggestions. My initial intent was not to mislead you. The original idea about the article came up from a Stack Overflow discussion with a similar title, so I decided not to change it because people were already familiar with the topic. But for the sake of all past and future critics I am changing the title.

You could share your most preferred but not so well known parts of .NET in the comments. I will include them in the future next part of the series. Also, you can vote in the poll that can be found at the end of the article for your most favorite “underutilized/oft-forgotten/arcane/hidden” feature of C#.

1. dynamic Keyword

 2. ExpandoObject

 3. Nullable<T>.GetValueOrDefault Method

 4. ZipFile in .NET

 5. C# Preprocessor Directives

 6. StackAlloc

 7. Execute VB code via C#

 8. volatile  Keyword

 9. global::

 10. DebuggerDisplayAttribute

 11. DebuggerStepThroughAttribute

 12. Conditional

 13. using Directive VS 2015

 14. Flags Enum Attribute

 15. Dynamically Compile and Execute C# Code

The dynamic type enables the operations in which it occurs to bypass compile-time type checking. Instead, these operations are resolved at run-time.

Note: Type dynamic behaves like type object in most circumstances. However, operations that contain expressions of type dynamic are not resolved or type checked by the compiler. The compiler packages together information about the process, and that information is later used to evaluate the operation at run-time. As part of the process, variables of type dynamic are compiled into variables of type object. Therefore, type dynamic exists only at compile-time, not at run-time.

As you can see from the examples, you can assign variables from different types to a single dynamic object. You can check if a variable is of type dynamic using the ‘is’ operator. If a requested property is non-existing as on the last line of the example, a new RuntimeBinderException is thrown.

Represents an object whose members can be dynamically added and removed at run-time. This is one of my favorite underutilized features of .NET framework.

You can not only add properties to the expando objects, but you can also add methods and delegates. In the example, I have added new AsString method through a new Action.

Retrieves the value of the current Nullable<T> object, or the object’s default value. It is faster than ?? operator.

If you don’t specify a default value as a parameter to the method, the default value of the used type is going to be used.

You can use it to create a dictionary safe Get method (return the default value if the key is not present instead of throwing an exception).

Provides static methods for creating, extracting, and opening zip archives.

#warning lets you generate a level one warning from a specific location in your code.

#error allows you to make an error from a particular location in your program.

#line lets you modify the compiler’s line number and (optionally) the file name output for errors and warnings.

#region enables you to specify a block of code that you can expand or collapse when using the outlining feature of the Visual Studio Code Editor.

The stackalloc keyword is used in an unsafe code context to allocate a block of memory on the stack.

The following example calculates and displays the first 20 numbers in the Fibonacci sequence. Each number is the sum of the previous two numbers. In the code, a block of memory of sufficient size to contain 20 elements of type int is allocated on the stack, not the heap. The address of the block is stored in the pointer fib. This memory is not subject to garbage collection. Therefore, it does not have to be pinned (by using fixed). The lifetime of the memory block is limited to the life of the method that defines it. You cannot free the memory before the method returns.

The sole reason to use stackalloc is performance (either for computations or interop). By using stackalloc instead of a heap allocated array, you create less GC pressure (the GC needs to run less). You don’t need to pin the arrays down, it’s faster to allocate than a heap array.

For more information about the unsafe code, see Unsafe Code and Pointers (C# Programming Guide).

Generates and calls Office Visual Basic macros from a C# .NET Automation client.

I used it in the past to fetch and display data from Google Analytics in Excel.

The volatile keyword indicates that a field might be modified by multiple threads that are executing at the same time. Fields that are declared volatile are not subject to compiler optimizations that assume access by a single thread. This ensures that the most up-to-date value is present in the field at all times.

If the variable shouldPartyContinue is not marked as volatile, the program will never finish if it is executed in Release.

The ability to access a member of the global namespace is useful when the member might be hidden by another entity of the same name. This is one of my favored underutilized features of .NET.

Determines how a class or field is displayed in the debugger variable windows.

In the above example, the method DebuggerDisplay will be used to calculate the value that is going to be presented in the Debugger window.

Also, you can use different C# expressions directly in the attribute.

If the age property is larger than zero, the actual age is going to be displayed otherwise five is used.

Instructs the debugger to step through the code instead of stepping into the code.

It makes the execution of a method dependent on a preprocessing identifier. The Conditional attribute is an alias for ConditionalAttribute, and can be applied to a method or an attribute class.

In order the above code to be executed #define LIVE should be added at the beginning of the C# file.

You can access static members of a type without having to qualify the access to the type name.

First add the following using clauses.

A using-alias directive cannot have an open generic type on the right-hand side. For example, you cannot create a using alias for a List<T>, but you can create one for a List<int>.

Personally I believe that the last feature makes the code a little bit unreadable, so I suggest you to think twice before use it.

Flags enumerations are used for masking bit fields and doing bitwise comparisons. They are the correct design to use when multiple enumeration values can be specified at the same time.

It is also important to note that Flags does not automatically make the enum values powers of two. If you omit the numeric values, the enum will not work as one might expect in bitwise operations because by default the values start with 0 and increment.

When you retrieve the value, you are bitwise AND’ing the values.

Note: You cannot use the None enumerated constant in a bitwise AND operation to test for a flag because the result is always zero. However, you can perform a logical, not a bitwise, comparison between the numeric value and the None enumerated constant to determine whether any bits in the numeric value are set.

The CodeDOM provides types that represent many common types of source code elements. You can design a program that builds a source code model using CodeDOM elements to assemble an object graph. This object graph can be rendered as source code using a CodeDOM code generator for a supported programming language. The CodeDOM can also be used to compile source code into a binary assembly.

The .NET Compiler Platform (“Roslyn”) provides open-source C# and Visual Basic compilers with rich code analysis APIs. It enables building code analysis tools with the same APIs that are used by Visual Studio.

First you need to install the NuGet package Microsoft.CodeAnalysis.

You can find the whole source code and useful examples in the project’s official GitHub page.

To execute the generated code, you can use the following method.|||

List of my favorite underutilized features of .NET. Contains full explanation what they are doing illustrated by C# code examples.