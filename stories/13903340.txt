If you’ve not heard of Minio before, Minio is an object storage server that has a Amazon S3 compatible interface. I’ve previously deployed the standalone version to production, but I’ve never used the Distribted Minio functionality released in November 2016.

When Minio is in distributed mode, it lets you pool multiple drives across multiple nodes into a single object storage server. As drives are distributed across several nodes, distributed Minio can withstand multiple node failures and yet ensure full data protection.

With the recent release of Digital Ocean’s Block Storage and Load Balancer functionality, I thought I’d spend a few hours attempting to set up a Distribted Minio cluster backed by Digital Ocean Block Storage behind a Load Balancer.

The plan was to provision 4 Droplets, each running an instance of Minio, and attach a unique Block Storage Volume to each Droplet which was to used as persistent storage by Minio. Then create a Load Balancer to Round Robin the HTTP traffic across the Droplets.

I initially started to manually create the Droplets through Digitial Ocean’s Web UI, but then remembered that they have a CLI tool which I may be able to use. After a quick Google I found doctl which is a command line interface for the DigitalOcean API, it’s installable via Brew too which is super handy.

To use I needed a Digital Ocean API Key, which I created via their Web UI, and made sure I selected “read” and “write” scopes/permissions for it - I then installed and configured with the following commands:-

Once configured I confirmed that was working by running and it presented my Digital Ocean account information.

After an hour or two of provisioning and destroying Droplets, Volumes, and Load Balancers I ended up with the following script:-

The script creates 4 512mb Ubuntu 16.04.2 x64 Droplets (the minimum number of nodes required by Minio) in the region and performs the following actions on each Droplet:-

Once the Droplets are provisioned it then uses the tag and creates a Load Balancer that forwards HTTP traffic on port 80 to port 9000 on any Droplet with the tag.

Sadly I couldn’t figure out a way to configure the Heath Checks on the Load Balancer via so I did this via the Web UI. By default the Health Check is configured to perform a HTTP request to port 80 using a path of , I changed this to use port 9000 and set the path to .

Once the 4 nodes were provisioned I SSH’d into each and ran the following commands to install Minio and mount the assigned Volume:-

The disk name was different on each node, , , , and for example but the Volume mount point was the same on all the nodes.

Next up was running the Minio server on each node, on each node I ran the following command:-

It’s worth noting that you supply the Access Key and Secret Key in this case, when running in standalone server mode one is generated for you. The Access Key should be 5 to 20 characters in length, and the Secret Key should be 8 to 40 characters in length.

Once Minio was started I seen the following output whilst it waited for all the defined nodes to come online:-

Success! I visited the public IP Address on the Load Balancer and was greeted with the Minio login page when I could log in with the Access Key and Secret Key I used to start the cluster.

This was a fun little experiment, moving forward I’d like to replicate this set up in multiple regions and maybe just use DNS to Round Robin the requests as Digital Ocean only let you Load Balance to Droplets in the same region in which the Load Balancer was provisioned.|||

