This quickstart shows you how to easily install a Kubernetes cluster on machines running Ubuntu 16.04, CentOS 7 or HypriotOS v1.0.1+. The installation uses a tool called kubeadm which is part of Kubernetes. As of v1.6, kubeadm aims to create a secure cluster out of the box via mechanisms such as RBAC.

This process works with local VMs, physical servers and/or cloud servers. It is simple enough that you can easily integrate its use into your own automation (Terraform, Chef, Puppet, etc).

See the full kubeadm reference for information on all kubeadm command-line flags and for advice on automating kubeadm itself.

kubeadm assumes you have a set of machines (virtual or real) that are up and running. It is designed to be part of a large provisioning system - or just for easy manual provisioning. kubeadm is a great choice where you have your own infrastructure (e.g. bare metal), or where you have an existing orchestration system (e.g. Puppet) that you have to integrate with.

If you are not constrained, there are other higher-level tools built to give you complete clusters:

The experience for the command line is currently in beta and we are trying hard not to change command line flags and break that flow. Other parts of the experience are still under active development. Specifically, kubeadm relies on some features (bootstrap tokens, cluster signing), that are still considered alpha. The implementation may change as the tool evolves to support easy upgrades and high availability (HA). Any commands under (not documented here) are, of course, alpha.

Be sure to read the limitations. Specifically, configuring cloud providers is difficult. Upgrades are also not well documented or particularly easy.

You will install the following packages on all the machines:

Note: If you already have kubeadm installed, you should do a or to get the latest version of kubeadm. See the kubeadm release notes if you want to read about the different kubeadm releases

For each host in turn:

While this guide is correct for kubeadm 1.6, the previous version is still available but can be a bit tricky to install. See below for details.

The master is the machine where the “control plane” components run, including etcd (the cluster database) and the API server (which the kubectl CLI communicates with).

To initialize the master, pick one of the machines you previously installed kubeadm on, and run:

Note: this will autodetect the network interface to advertise the master on as the interface with the default gateway. If you want to use a different interface, specify argument to .

There are pod network implementations where the master also plays a role in allocating a set of network address space for each node. When using flannel as the pod network (described in step 3), specify . This is not required for any other networks besides Flannel.

Please refer to the kubeadm reference doc if you want to read more about the flags provides.

will first run a series of prechecks to ensure that the machine is ready to run Kubernetes. It will expose warnings and exit on errors. It will then download and install the cluster database and “control plane” components. This may take several minutes.

You can’t run twice without tearing down the cluster in between, see Tear Down.

The output should look like:

Make a record of the command that outputs. You will need this in a moment.

The token is used for mutual authentication between the master and the joining nodes. The token included here is secret, keep it safe — anyone with this token can add authenticated nodes to your cluster. These tokens can be listed, created and deleted with the command. See the reference guide.

All of these components run in pods started by kubelet and the following images are required and will be automatically pulled by kubelet if they are absent while is initializing your master:

By default, your cluster will not schedule pods on the master for security reasons. If you want to be able to schedule pods on the master, e.g. a single-machine Kubernetes cluster for development, run:

With output looking something like:

This will remove the taint from any nodes that have it, including the master node, meaning that the scheduler will then be able to schedule pods everywhere.

You must install a pod network add-on so that your pods can communicate with each other.

The network must be deployed before any applications. Also, kube-dns, a helper service, will not start up before a network is installed. kubeadm only supports CNI based networks (and does not support kubenet).

Several projects provide Kubernetes pod networks using CNI, some of which also support Network Policy. See the add-ons page for a complete list of available network add-ons.

New for Kubernetes 1.6: kubeadm 1.6 sets up a more secure cluster by default. As such it uses RBAC to grant limited privileges to workloads running on the cluster. This includes networking integrations. As such, ensure that you are using a network system that has been updated to run with 1.6 and RBAC.

You can install a pod network add-on with the following command:

Please refer to the specific add-on installation guide for exact details. You should only install one pod network per cluster.

If you are on another architecture than amd64, you should use the flannel or Weave Net overlay networks as described in the multi-platform section

NOTE: You can install only one pod network per cluster.

Once a pod network has been installed, you can confirm that it is working by checking that the kube-dns pod is Running in the output of . And once the kube-dns pod is up and running, you can continue by joining your nodes.

If your network is not working or kube-dns is not in the Running state, check out the troubleshooting section below.

The nodes are where your workloads (containers and pods, etc) run. To add new nodes to your cluster do the following for each machine:

The output should look something like:

A few seconds later, you should notice this node in the output from when run on the master.

In order to get a kubectl on some other computer (e.g. laptop) to talk to your cluster, you need to copy the kubeconfig file from your master to your workstation like this:

Note: If you are using GCE, instances, by default, disable ssh access for root. First log in to the machine, copy the file someplace that can be accessed and then use

If you want to connect to the API Server from outside the cluster you can use :

You can now access the API Server locally at

Now it is time to take your new cluster for a test drive. Sock Shop is a sample microservices application that shows how to run and connect a set of services on Kubernetes. To learn more about the sample microservices app, see the GitHub README.

Note that the Sock Shop demo only works on .

You can then find out the port that the NodePort feature of services allocated for the front-end service by running:

It takes several minutes to download and start all the containers, watch the output of to see when they’re all up and running.

Then go to the IP address of your cluster’s master node in your browser, and specify the given port. So for example, . In the example above, this was , but it may be a different port for you.

If there is a firewall, make sure it exposes this port to the internet before you try to access it.

To uninstall the socks shop, run on the master.

To undo what kubeadm did, you should first drain the node and make sure that the node is empty before shutting it down.

Talking to the master with the appropriate credentials, run:

Then, on the node being removed, reset all kubeadm installed state:

If you wish to start over simply run or with the appropriate arguments.

See the list of add-ons to explore other add-ons, including tools for logging, monitoring, network policy, visualization & control of your Kubernetes cluster.

kubeadm deb/rpm packages and binaries are built for amd64, arm64, armhfp, ppc64el, and s390x following the multi-platform proposal.

Currently, only the pod networks flannel and Weave Net work on multiple architectures. For Weave Net just use its standard install.

Replace with or depending on the platform you’re running on. Note that the Raspberry Pi 3 is in ARM 32-bit mode, so for RPi 3 you should set to , not .

Enabling specific cloud providers is a common request. This currently requires manual configuration and is therefore not yet fully supported. If you wish to do so, edit the kubeadm dropin for the kubelet service ( ) on all nodes, including the master. If your cloud provider requires any extra packages installed on host, for example for volume mounting/unmounting, install those packages.

Specify the flag to kubelet and set it to the cloud of your choice. If your cloudprovider requires a configuration file, create the file on every node. The exact format and content of that file depends on the requirements imposed by your cloud provider. If you use the file, you must append it to the kubelet arguments as follows:

Next, specify the cloud provider in the kubeadm config file. Create a file called with the following contents:

Lastly, run to bootstrap your cluster with the cloud provider.

This workflow is not yet fully supported, however we hope to make it extremely easy to spin up clusters with cloud providers in the future. (See this proposal for more information) The Kubelet Dynamic Settings feature may also help to fully automate this process in the future.

Please note: kubeadm is a work in progress and these limitations will be addressed in due course.

You may have trouble in the configuration if you see the following statuses. This example is for canal but there may be similar errors for other pod network systems.

The three statuses RunContainerError and CrashLoopBackOff and ContainerCreating are very common.

To help diagnose what happened, you can use the following command to check what is in the logs:

Do not use kubectl logs as they only work with Pods that have started. If you run:

You will got the following error:

The comand gives you more details about what went wrong.

The events should show something like this:

A web search on the error message may help narrow down the issue. Or communicate the errors you are seeing to the community/company that provides the pod network implementation you are using.

This section covers the previous version, kubeadm 1.5. It is still available but is a little tricky to get to. Also note that the command line options and other configuration parameters have changed.

As root, run the following. This is very similar to the regular instructions except for pinning the versions. Note that, due to some unfortunate version strings, kubeadm isn’t indexed in the repos and the packages must be downloaded and installed directly.

Finally, when running you must specify the flag:|||

Production-Grade Container Orchestration