In mid 2000s, HP Application Lifecycle Management (HP ALM) was the de facto tool for planning, tracking, and rolling out multiple releases across multiple projects. It basically acted as a central repository for everything from tracking releases along with defects, tests, and other project artifacts, to aligning geographically dispersed teams on business priorities and quality expectations. In other words, HP ALM used to be the “single source of truth” for organizations. However, over time, JIRA has emerged as the “single source of truth” for data that drives business decisions. So how exactly did we get here?

To understand that, let’s look back in history.

Over the past couple of years, HP has continued to make ALM available in different editions, primarily controlled through a licensing model. Examples include HP ALM Essentials Edition, HP ALM Performance Center Edition, and HP Quality Center Enterprise Edition, among others. And while HP was busy implementing these packaging and licensing changes, JIRA emerged as the vendor taking cost and complexity out of managing ALM systems with a business model radically different than HP’s.

The results have been staggering. In 13 years (primarily from 2003 to 2015) Atlassian has increased its customer base to 51,000. Similarly, around the same time Atlassian’s marketplace revenues hit over $120M in sales.

Fast forward to Q1 2017, Atlassian ended the quarter with 65,673 customers on active subscription and total revenues of $136.8 million. On the other hand, HP has been continuously struggling. Their software revenues during Q1 were $721 million, down 8% year over year.

Between mid 2000s to today, more and more organizations moved to JIRA for planning, tracking, and coordinating activities across teams. The single source of truth for enterprise-class teams thereby changed from HP ALM to JIRA.

Primary reasons for HP ALM losing market share to JIRA during this period include:

Take the following example: With collaboration features via HipChat, project planning capabilities via Confluence, along with solid support for continuous integration tools like Bamboo, teams could easily extend planning, tracking, and reporting capabilities of JIRA. This was unlike HP ALM where add-ons for project plans, collaboration, and documentation were built-in within the tool, resulting in high premiums.

During this period, the traditional purchasing power that sat with centralized departments like IT , or someone higher up in the organization, also flipped due to the the growing influence of end users, including developers.

At this time, JIRA is arguably the most popular tool used by development and QA teams to plan projects, capture, track, and resolve bugs and issues throughout the entire development cycle. At the same time, however, JIRA is not primarily aimed at test case management given limited reusable options at the test and test set level. As test definition, history, and execution are not separate in JIRA, the rework just increases if QA Managers are in the process of scaling their testing efforts.

Another downside is the inability to get execution status at the test step level, thereby limiting the visibility QA Managers have in step level progress.

You can learn more about these challenges and remedies in our recent webinar.

How to Overcome These Challenges:

For QA and development teams using JIRA, a comprehensive test case management strategy, while accounting for risk and planning for coverage, is critical to reduce costs incurred from unnecessary tests.

The QAComplete add-on for JIRA on the Atlassian Marketplace empowers application development and delivery (AD&D) teams to combine JIRA’s issue and bug tracking expertise with the flexible test case management capabilities of QAComplete, providing the best of both worlds. With the add-on, team members using JIRA can be kept up-to-speed on any testing activities taking place in QAComplete. Changes made are automatically reflected across user stories, tasks, bugs, or even custom issue types in JIRA. The add-on also provides real-time access to test steps, helping teams reproduce scenarios without switching context and jumping between separate tools.|||

