Imagine you could embed an image in a web page, scale that page to any size, and never lose image quality. Well, you can. Itâs totally possible, we just havenât been doing it as much as we should.

Images with fixed sizes such as JPG files, GIFs, and PNGs have their place on the Web, but their inherently static nature conflicts with the way the Web is going. As we move to responsive, flowing designs, the more irritating it gets to have to deal with images that are fundamentally not responsive. Itâs frustrating beyond belief when I realize that itâs becoming best practice to create and serve several different versions of each image on your site.

I realize that there are good, technical reasons for this. Itâll be a long time before anyone creates an infinitely scaling photograph, for example. However, photos are not the be-all and end-all of imagery. Vector graphics have come a very long way. Theyâre going a long way yet.

They can be more difficult to acquire, because not every web designer is an illustrator. Photos are plentiful and good stock imagery is easy to find. Vector graphics, on the other hand, are often of low quality, or perhaps you just canât find the right one. Hiring illustrators is expensive.

But as support for vector graphics grows online, so will their use. Itâs time for everyone to learn how to implement them on their websites, and use them creatively. Images as responsive as our websites are the future.

Alright, for the newbies among us, SVG stands for Scalable Vector Graphics. SVG files are rather simple things, in theory. Theyâre just text files with a bunch of XML inside. Every bit of visual information in an SVG file is defined by human-readable code, which is then calculated and rendered by your browser, graphics software, etc.

This means that although SVG files arenât as complex as, for example, a photograph formatted as a JPG, theyâre infinitely more flexible. They can be altered manually in a text editor. They can be altered by code, such as JavaScript and CSS. They can be compressed to almost ridiculously small sizes.

In other words, theyâre specifically designed to be used alongside other web technologies. Theyâre perfect for us.

In the late â90s, Macromedia and Microsoft (and other companies) introduced VML, and then Adobe (and other companies) presented PGML as possible solutions for vector images in websites to the W3C (and possibly as alternatives to the old PostScript format). The W3C said, âNo, weâre gonna do our own thing; but thanks for the ideas!â The result was the SVG Working Group.

In September 2001, SVG 1.0 became an official W3C recommendation, and the rest is history. Sort of. Internet Explorer lagged behind in adopting the SVG format, surprising no one. Since then, there have been updates geared toward mobile devices, and more with clarifications.

Even now, the SVG Working Group is creating SVG 2 which will include more integration integration with things like HTML5, CSS, and the WOFF font format.

The only version of Internet explorer you have to worry about right now is IE8. Thatâs it. Everyone else has more or less full SVG support. Yes, you may run into bugs on occasion, even in the âgoodâ browsers, but itâs still worth it. Not only will working around them keep your problem solving skills sharp, but the more we use this technology, the more browser developers will support it.

Check out caniuse.com for a more in-depth analysis of what works and what doesnât in which browsers.

Internet technology has gone way, way beyond the static websites we used to know. Itâs time for our images to catch up, plain and simple. When you have to make an icon, use SVG. When you have to use an illustration, go for SVG if you can. If you want an abstract, but still simple website background, use SVG.

Iâm not a fan of the retina screen technology, especially because I donât have one. Itâs not jealousy. Well, itâs not only jealousy. The simple fact is that Retina screens have gone and made serving up images that much more complicated. SVG, being infinitely scalable, can help to minimize the problem.

Users who are visually impaired generally browse the web with everything zoomed in a little. When regular images get zoomed in, they lose quality. SVG wonât do that, so why not take advantage of it to give the visually impaired a quality experience?

Technology is always changing. Whatâs here today could be gone in a while, but SVG will most likely be around for a while, yet. As long as the W3C sets the global industry standards, it seems that SVG will continue to be the de-facto standard for vector graphics in the browser. Use it now, and your websites will be set for a good, long time.

So youâre convinced. SVG is cool, itâs the future, itâs time to learn it. Luckily for everyone, this is the Internet. You just know that people have spent precious hours upon hours creating free training material for anyone who wants it. People who do that sort of thing are the people who make the Internet awesome.

Then, of course, we went and spent hours looking through the various tutorials to find the best ones out there. You can thank us later. For now, thereâs reading to be done!

Note: Keep in mind that SVG files are all XML code, so many of these tutorials are developer-focused or just have a lot of code in them. Weâve included both tutorials focused on the basics, and on specific, creative uses for SVG, so donât skip this part.

One of the many advantages to SVGâs open nature is that anyone can make software for it. There are no licensing restrictions or fees to pay, just an open standard for people to use. As you might expect, many developers have done exactly that.

Tools for creating and using the SVG format abound. They range from large software packages which include the option to export SVG as an afterthought, to vector drawing apps which use SVG as their primary format, and more.

A quick Google search for âSVG toolsâ returns âAbout 37,000,000 resultsâ, so you know thereâs a lot out there.

Where then, should you begin?

The big names in graphics creation all support SVG. Adobe Illustrator,Â Corel Draw,Â even various products from Xara â yes, Xara is still a thing â they can all import, edit, and save files in the format. (Illustrator has been known to put some odd things into SVG files, though, so you have to be careful with the export settings.)

If youâre not already using a vector graphics package, Inkscape is a fantastic place to start. Created in 2003 as a fork of another open source project called Sodipodi (which was based on yet a another OSS project), Inkscape has become the standard for free, cross-platform vector graphics software. Itâs not quite as feature-filled as Adobe Illustrator, but itâs more than enough for most vector projects.

Serif is a company that makes pretty good graphics creation and desktop publishing software. All of their main software offerings come with free âStarter Editionsâ, and their vector drawing app is no exception.

Donât let the âStarter Editionâ bit fool you, though. It might not have everything the pro version does, but it can get the job done in most cases. Unless youâre an illustrator by trade, this app can and will meet your needsâ¦ provided youâre on Windows. Sadly, itâs not cross-platform. Also, registration is required for the download.

Part of the Calligra office suite, which is primarily for Linux, Karbon is a fully-featured vector graphics editor. Itâs got all the basic tools, and a few things besides. Installation on Mac and Windows is difficult at present, though not impossible.

The name sounds like a software package from the 90s, I know, but itâs actually pretty new. In fact, itâs the successor to the old sK1 illustration app, which has been discontinued. PrintDesign is currently in the âpreviewâ stage, and has both Linux and Windows versions. Itâs not ready for production use yet, but itâs a project worth watching.

The nameâs a bit on-the-nose, perhaps, but the software is more than capable. SVG-editâs based entirely on web technologies, specifically HTML5, JavaScript and CSS. This means that thereâs no server-side functionality. Whatâs more, itâs Open Source, meaning you can download it, put it on your own server, or even just use it from the desktop.

Itâs got a feature list long enough to make many a desktop app jealous, and runs faster than most of them, so give it a whirl.

Janvas is the only web-based app on this list that isnât strictly free. Thereâs a thirty-day trial period, after which a subscription costs 26 Euros per year. If none of the other web-based SVG editors make you happy, though, you might actually consider it.

The drawing tools are advanced and familiar enough, every variable is editable in the side-bar, and you can save your documents to Google Drive. You can create templates, collaborate on drawing documents, and even include CSS and JS files made to interact with the graphics.

All in all, itâs a solid offering.

Small. Sleek. Simple. Mondrian is yet another open source offering, and itâs a lot smaller than most. It doesnât even have a text toolâ¦ but it does simple drawings very well. You can open files from the hard drive or a URL, grab embed code for your website, or just save your drawing as SVG or PNG. It may not be as advanced as other apps, but it just feels nice to use, and the pen tool feels natural.

Draw SVG is another web-based SVG editor with all of the features you should ever need. Itâs strongest point seems to be the sheer speed with which it loads and draws things. Sadly, however, the user interface is seriously flawed. Still, itâs there and it works, should you ever need it.

Developers rejoice! We have some links here for you too. After all, SVG isnât just another graphics format. Itâs code. Itâs code that can be linked to, or embedded. It can be interacted with and changed on the fly. With math!

Snap is a JS library for generating and interacting with SVG. Itâs designed for modern browsers. Yup, that means it only supports IE9+â¦ but if older browsers are not your concern, go for it.

RaphaÃ«l, unlike Snap, is compatible with older browsers. In fact, it can work with IE6+, Safari 3+, and Chrome 5+. If youâre developing something for an enterprise system where users might be on older machines, for example, RaphaÃ«l might be your best bet.

Like SVG and jQuery? Iâm not really surprised. jQuery has, perhaps, lost some of the spotlight attention that it once had, but itâs still a go-to library for many of us.

jQuery SVG, then, is quite possibly the plugin youâre looking for. Itâs got functions for animations, making graphs, and even extensions. Thatâs right, extensions for a plugin. Browser support is IE9+, but older versions of IE can be used with the appropriate browser plugins installed.

I wouldnât depend on users having those plugins, though.

SVGMagic is a drop-in, jQuery-based, solution for older browsers (IE 7 & 8). Instead of manually creating fallback images for each and every SVG file you use, this plugin can generate them on the fly. It handles background images just fine as well.

How does it do any of this? It detects whether or not the userâs browser can handle SVG. If so, it goes to sleep. If not, it contacts a server-side PHP script and tells it to create a PNG file of the SVG images in question with the necessary dimensions.

Once done, the PHP script sends the URLs to these temporary fallback images back to the jQuery plugin, and the default URLs are replaced. This obviously takes time, so you can optionally specify a placeholder image to be shown while the conversion takes place.

One caveat: currently it canât handle too many images at once. You wouldnât want to use this technique on pages with more than a few SVG files.

Lastly, hereâs an option for the byte-counters. SVG.JS weighs in at only 11.8kbs when gzipped. Despite its small size, it supports an impressive number of features (as listed on the projectâs page):

Read the documentation for more info.

Not everyoneâs an illustrator. At least, Iâve certainly never been good at it. Thus, stock illustrations become an invaluable resource. It can be hard to find good stuff, though. What doesnât look like Microsoft clipart is often limited in scope, or expensive.

Donât lose hope, though. There is a lot of stuff out there that is of good quality. If it doesnât perfectly meet your needs, well, itâs vector art. Chances are that it can be tweaked to meet your needs if you have a basic knowledge of vector graphics software.

SVG can do more than just stock illustrations, though. You can also create patterns, large fancy backgrounds that donât eat up bandwidth, and more. Letâs have a look at what people have made for the rest of us:

SVG, as an open format, has many open source enthusiasts as fans. As a result, itâs one of the primary formats used in what might be the largest collection of free clip art out there.

And a lot of it is clipart-ish. And a lot of itâs amateur work. There are some quality graphics though, if you look. Hey, itâs free.

SVG Stock is a small site, with a relatively small, but excellent collection. Itâs mostly icons and device mockups, but they are all of high quality. If you need either of those two things, start here.

Ah DeviantArt, that giant community is still going strong. Head to the stock images category and search for SVG (or click the link above). Again, the quality will vary, but thereâs good stuff there if you have the time to look.

A small gallery full of SVG-based patterns. Itâs designed as more of a show-case, but the source files are all there for your convenience.

svgeneration.com includes a lot of SVG patterns for your use. The site comes with editing options for each pattern, and you can edit the code directly on the site to see your changes in action. Not only is this a great resource for pre-made patterns, but you can find out a lot about how theyâre made in the first place.

The art on this site is distinctly old-fashioned cartoon style. It, quite frankly, wonât be what everyoneâs looking for, but itâs there for those who want that classic feel to their illustrations.

SVG Studio is offering thousands of illustrations with a distinctly modern feel. You can buy them in small sub-sets, or download their entire catalog at once. That will set you back 500 USD, which, for 3000 illustrations, is not that bad a deal.

I canât say much about the art offered on each site, because it varies widely by the contributor with no overall style. The biggest names areÂ istockphoto.com,Â shutterstock.com,Â bigstockphoto.com,Â andÂ canstockphoto.com.

We can read all the introductions that we want, and follow all the tutorials out there. We can become experts in each and every aspect of the SVG specification, and yet we might still be incredibly boring about it. We have to look at all of the potential in any given technology to make the most use of it.

Thatâs often easier said than done, however. It often helps to have a reference point, something amazing to look at, and show us exactly what kind of awesome things we can do with what weâve got. Thatâs what sites like Webcreme did for web design in general. Thatâs what CSS Zen Garden, and all of the CSS galleries that came after it, did for CSS layouts.

As of yet, I have not found any gallery sites dedicated to what can be accomplished via SVG combined with other web technologies, and that might help. In the meantime, hereâs a showcase of awesome stuff weâve found:

This example is part of the Snap.svg collection on CodePen. Need a perfect example of how SVG could be used to revolutionize online ads? This is it.

Think about it: some ad companies are still selling ads based on pixel size. This makes no sense in the age of infinite variation in screen sizes, and Retina screens to boot. Until we come up with a better system than visual ads, SVG could at least help us to make ads fit into the responsive nature of web design.

See the Pen Snap Display Ad by CJ Gammon (@cjgammon) on CodePen.

The Mozilla Developer Network, an entity that I keep running into as I research web technologies in general, has also produced some interesting stuff made with SVG. For instance, they went and made an entire desktop interface based entirely on web technologies like HTML5, JS, SVG, and CSS. Itâs fast, customizable, and I almost wish it were part of a real OS.

Brought to us by ShinyDemos (which is in turn brought to us by the people at Opera) A Time of Reflection will literally just overlay a clock over a live feed from your webcam. Well, if you give it your permission, and you actually have a camera, anyway. But the point is that it shows how SVG masks can be overlayed on almost anything.

Through a combination of CSS, SVG, and jQuery, oblurlay creates exactly what its name suggests: a blurry overlay, iOS style. Itâs a jQuery plugin, so implementation is not difficult, and it neatly showcases how SVG filters can be applied to all kinds of things, not just the SVG objects themselves.

Codrops (previously mentioned in the tutorials section) has produced quite a number of fascinating, impressive, and just plain pretty demos to showcase what SVG can do. Each deserve its own proper section in this article, but there are so many that Iâm putting them all in one. If you donât look at anything else from this âInspirationâ section, look at these. Check out the demos, and download the source files. Then go thank the guys at Codrops. They deserve it.

Note: not all of these are SVG-focused, but they do all use SVG graphics in some fashion.

Page Loading Effects: a set of creative page loading effects that use SVG animations with Snap.svg. The idea is to show an overlay with a interesting shape animation while new content gets loaded.

Ideas for Subtle Hover Effects: some creative and subtle hover effect inspiration using modern CSS techniques including 3D translate and pseudo elements. They also use SVG. Go check out the demo for the second set of effects.

SVG Drawing Animation: a little experiment that explores the use of SVG line drawing animations to precede the appearance of graphics or website elements, simulating the loading of them.

Off-Canvas Menu Effects: some inspiration for off-canvas menu effects and styles using CSS transitions and SVG path animations.

Tooltip Styles Inspiration: a small collection of various hover tooltip styles and effects for your inspiration. Using CSS transforms, border-radius and SVG shapes we can create modern looking and interesting tooltips.

Notification Styles Inspiration: some simple ideas and effects for unobtrusive website notifications. A little script is employed for showcasing some styles and CSS animations are used for the effects.

Inspiration for Custom Select Elements: some inspiration for styling a custom version of the select element. There are many possibilities and today we are exploring some ideas of how to let the user select a choice in style.

Inspiration for Inline Anchor Styles: some inspiration for creative and modern inline anchor styles and hover effects using different techniques like pseudo-element transitions and SVGs.

Arrow Navigation Styles: some inspiration for arrow navigation styles and hover effects using SVG icons for the arrows, and CSS transitions and animations for the effects.

Wobbly Slideshow Effect: the slides in this slideshow wobble as they move. The effect is based on Sergey Valiukhâs Dribbble shot and was made using Snap.svg and morphing SVG pathsâ¦ Please note that this is highly experimental and tested only in the latest versions of modern browsers.

SVG, while not yet one of the most widely used image formats out there, is well documented, strongly supported, and itâs a big part of the Internetâs future. If youâre not using it as part of your design process yet, itâs probably time to start.|||

Imagine you could embed an image in a web page, scale that page to any size, and never lose image quality. Well, you can. It’s totally possible, we just haven’t