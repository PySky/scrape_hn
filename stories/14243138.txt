Following last year’s article on Slack, here is how to create a bot for Discord. We will go through a minimalist bot that does close to nothing. Most of the provided examples using libraries like discord.py hide asyncio away. Here we will make it explicit how it works under the hood. Be aware that this is not the easiest way to build a bot but a step-stone to understand what complete libraries do for you.

All you need is a Discord account, Python 3.6 or higher and a way to install packages, e.g. pip or conda. The examples are using the f-strings, change them to proper .format() to be compatible with Python 3.5.

To had the bot to any server, add the App Details Client ID to the following URL and visit it. You’ll be prompted with a invitation form.

At this point, the bot should appear in the contact list of the server.

To build the real-time communication between the application and an application, representing a bot as well as a real user, Discord went for WebSockets. A WebSocket is a two-ways communicating channel that remains open between a client and a server. This overcomes the HTTP protocol that closes the connection when the last bit of data was sent.

If WebSockets are more powerful than plain HTTP, it also means they are a bit more complex. But no worries, it still not rocket science.

Before being able to connect to gateway, we have to ask the REST API where it is. Here, we will be using plain HTTP using aiohttp to perform call to the GET /gateway entrypoint that gives us the address of the WebSocket.

If you already know Python but not yet async/await, let me introduce them to you.

A computer software spends most of its time to wait. The CPU is so fast compared to ready data from the disk or the network that it sits there waiting for data to crunch. One way to speed up a program is giving it many things to do and letting him switch between those tasks the way it pleases.

With async/await we make it explicit where the program may have to wait using async/await. For example, await response.json() means I want to continue when the JSON representation of the response is ready. Or await with session.get(…) means I want to wait until the response of this HTTP GET request has been performed. The event loop puts aside a waiting task and do the other stuffs waiting until it is ready. Provided there are other things to be done.

In comparison with programming using threads, using async/await is more explicit. Just like the Zen of Python taught us.

Now, let’s go back to our WebSocket.

The reponse JSON contains an URL that will be used to connect to the WebSocket.

This start function in a nutshell connects to the WebSocket URL, and waits for messages to come in.

In Python, as you may recall, for works on an iterator. An iterator doesn’t have to have an end. Hence this async for can be seen as an infinite loop until something bad happens to the WebSocket connection.

Now that we are connected to it, starts the real and complex programming. When you connect, the Discord server will send you an OP 10 Hello message containing information about the heartbeat. It then expects you to identify yourself with the secret token from before.

With the identification we start touching the protocol. The minimum message contains an opcode such as 2 for Identify or 10 for Hello and a data block.

Unlike reading data, sending can be done without having to wait. After that, you’ll receive some 0 Dispatch (zero) messages. Those are identified by their type. Propertly managing all the events is left as an exercice to the reader.

The first 10 Hello message gives information about the heartbeat. The heartbeat is a mecanism for the Discord servers to ensure that you’re still alive. Discord requires from us to send periodically a message.

asyncio simplifies spawning new tasks like this.

The heartbeat loops forever and sends a 1 Heartbeat message every interval milliseconds. last_sequence must be set to the last 0 Dispatch message received. Changing this is left as an exercise to the reader.

The WebSocket is there for Discord to send you event but when you want to publish content to Discord, the traditional HTTP REST API has to be used. For bot users though, one cannot go without the other as stated by the documentation. We’ve done that, so are good.

The time has come to improve/refactor the api_call function to be able to POST content as well.

The big changes are that it accepts a method argument to either GET or POST and create some HTTP headers by default for the authentication.

Sending a message to a user identified by its snowflake id can be done in two steps.

You may now send messages from the WebSocket queue or any other tasks as long as the 2 Identify has been done. Dive into the official documentation to perform more advanced task like sending files, creating complex messages, adding reactions, etc.

If your goal is to build a bot for Discord, use the Python API. If you want to learn about WebSocket and asynchronous programming, starting from the ground up is a good exercise. Discord is fundamentally not very different from Slack when work directly with the REST API and the WebSocket.

Let me know if this was useful to you and/or how it could be improved.|||

Following last year’s article on Slack, here is how to create a bot for Discord. We will go through a minimalist bot that does close to nothing. Most of the provided examples using libraries like…