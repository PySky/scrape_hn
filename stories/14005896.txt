It’s common to use the decorator/presenter pattern to wrap objects and add view-specific logic.

In the controller, you’d say something like:

And in the view:

Simple enough. Now let’s look at some examples that leverage .

What happens in this view?

It will not render the partial but will instead render the partial. What happened?

The Rails rendering code has a conditional that looks like this (simplified):

For most objects where you define , the rendering code will take that second branch and just call on your object.

However, decorated objects do respond to so the rendering will take that first branch. What happens when you call on a decorator?

It delegates to the wrapped user’s implementation which returns itself. This means calling on the decorator returns the unwrapped user.

This all means that gets invoke rather than .

The solution is to define on the decorator:

So all you need to do is define on your decorator? Not so fast! Rails has some other surprises up its sleeve.

How about something like this:

You might expect this form to POST to but instead it will submit to . Isn’t the path based on the class name? Apparently not. Instead the URL is built based on attributes of your object’s . Since is delegated to the underlying user, the form submits to .

This can be fixed by extending (which defines ):

Now it’s generating paths for “profiles” instead of “users”.

If you’re decorating an or object in Rails, you probably want to define the following to ensure the decorator works the way you expect instead of silently delegating to the underlying object:|||

Avoid some tricky edge cases when decorating ActiveRecord models.