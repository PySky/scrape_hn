We propose a family of concrete Key Path types that represent uninvoked references to properties that can be composed to form paths through many values and directly get/set their underlying values.

On Darwin platforms Swift's existing syntax provides a convenient way to safely refer to properties. Unfortunately, once validated, the expression becomes a which has a number of important limitations:

While methods can be referred to without invoking them ( instead of ), this is not currently possible for properties and subscripts.

Making indirect references to a properties' concrete types also lets us expose metadata about the property, and in the future additional behaviors.

We would also like to support being able to use Key Paths to access into collections and other subscriptable types, which is not currently possible.

We propose introducing a new expression similar to function type references (e.g. ), but for properties and subscripts. To avoid ambiguities with type properties, we propose we escape such expressions using to indicate that you are talking about the property, not its invocation. A key path expression takes the general form , where is a type name, and is a chain of one or more property, subscript, or optional chaining/forcing operators. If the type name can be inferred from context, then it can be elided, leaving .

These property reference expressions produce objects, rather than . are a family of generic classes (structs and protocols here would be ideal, but requires generalized existentials) which encapsulate a property reference or chain of property references, including the type, mutability, property name(s), and ability to set/get values.

Here's a sample of it in use:

are a hierarchy of progressively more specific classes, based on whether we have prior knowledge of the path through the object graph we wish to traverse.

is fully type-erased, referring to 'any route' through an object/value graph for 'any root'. Because of type-erasure many operations can fail at runtime and are thus optional.

If we know a little more type information (what kind of thing the key path is relative to), then we can use , which refers to an 'any route' from a known root:

When we know both what the path is relative to and what it refers to, we can use . Thanks to the knowledge of the and types, all of the failable operations lose their .

Finally, we have a pair of subclasses encapsulating value/reference mutation semantics. These have to be distinct because mutating a copy of a value is not very useful, so we need to mutate an inout value.

To get or set values for a given root and key path we effectively add the following subscripts to all Swift types.

This allows for code like

which is both appealingly readable, and doesn't require read-modify-write copies (subscripts access inout). Conflicts with existing subscripts are avoided by using a named parameter and generics to only accept key paths with a of the type in question.

Forming a utilizes a new escape sigil . We feel this best serves our needs of disambiguating from existing expressions (which will continue to produce ) and existing type properties.

Optionals are handled via optional-chaining. Multiply dotted expressions are allowed as well, and work just as if they were composed via the methods on .

Forming a key path through subscripts (e.g. Array / Dictionary) will have the limitation that the parameter's type(s) must be . Should the archival and serialization proposal be accepted, we would also like to include with an eye towards being able to make key paths themselves in the future.

The performance of interacting with a property/subscript via should be close to the cost of calling the property directly.

This change is additive and there should no affect on existing source.

This feature adds the following requirements to ABI stability:

We think a protocol-based design would be preferable once the language has sufficient support for generalized existentials to make that ergonomic. By keeping the class hierarchy closed and the concrete implementations private to the implementation it should be tractable to provide compatibility with an open protocol-based design in the future.

This should not significantly impact API resilience, as it merely provides a new mechanism for operating on existing APIs.

Various drafts of this proposal have included additional features (decomposable key paths, prefix comparisons, support for custom subclasses, creating a from a at runtime, conforming to , bound key paths as a concrete type, etc.). We anticipate approaching these enhancements additively once the core functionality is in place.

We also explored many different spellings, each with different strengths. We have chosen the current syntax for the clarity and discoverability it provides in practice.

While the crispness of the function-type-reference is appealing, it becomes ambigious when working with type properties. The escape-sigil variant avoids this, and remains quite readable.

During review many different sigils were considered:

No Sigil: This matches function type references, but suffers from ambiguity with wanting to actually call a type property. Having to type while consistent with function type references, really is not that great (even for function type references).

Back Tick: Borrowing from lisp, back-tick was what we used in initial discussions of this proposal (it was easy to write on a white-board), but it was not chosen because it is hard to type in markdown, and comes dangerously close to conflicting with other parser intrinsics.

Pound: We considered as well, and while it is appealing, we'd like to save it for the future. also has a slightly more computational connotation in Swift so far. For instance, 'identifies if its valid and returns a String', does the neccesary computation to verify availability and yields a boolean.

Back Slash: Where is computational, in Swift has more of a 'behave differently for a moment' connotation, and that seems to fit exactly what we want when forming a key path.

We think the disambiguating benefits of the escape-sigil would greatly benefit function type references, but such considerations are outside the scope of this proposal.|||

swift-evolution - This maintains proposals for changes and user-visible enhancements to the Swift Programming Language.