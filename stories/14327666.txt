An immutable server is a server that, once deployed, is never modified, patched or upgraded. It is merely replaced with a new updated instance if required. Immutable infrastructure extends this approach to the entire cloud.

Chad Fowler introduced Immutable Servers in 2013 when he described normal mutable infrastructure as:

The beauty of immutable infrastructure is that it not only solves many of these reliability issues, but also transforms security.

Mutability is oxygen for hackers. Nearly all persistent attacks will modify the underlying system in some way. Such changes include replacing binaries or libraries, adding programs or root kits, opening network ports and modifying critical data. Preventing these changes is key to preventing attacks. Detecting such changes is paramount for an effective defense.

In a mutable system, that is patched and updated, it is extremely difficult to conclusively know if the changes to the system are authorized or not. Linux makes this especially difficult.

With Linux, binaries and libraries are scattered over many directories: /boot, /bin, /usr/bin, /lib, /usr/lib, /opt/bin, /usr/local/bin and many more. Configuration files are similarly scattered over /etc, /opt/etc, /usr/local/etc, /usr/lib etc. These directories have files that should never be modified and others that are regularly updated. When the system update services run, they often create temporary files in these directories as well. Consequently, it is very difficult to lock down these all these directories and perform authorized system and software updates at the same time.

Through various heroics, you can try to detect which modifications are authorized and only permit system updates during specific time windows. But this also opens windows of opportunity for hackers. Clever attackers can piggyback their hacks to coincide with authorized system updates and thus “sneak through the gate” undetected.

When Intrusion Detection Systems are coupled with immutable servers, they can detect changes to the system in real-time and either quarantine, stop or terminate the server immediately.

Extended to the entire cloud, the immutable paradigm enables an entire cloud service to be exactly configured and monitored for any unauthorized changes. It is thus much harder for an attacker to modify or corrupt the service without immediate detection.

At SenseDeep, we’ve leveraged this approach of immutable infrastructure with our cloud-based, real-time security service. We recommend the immutable server paradigm, and the SenseDeep server agent which detects any and all modifications to critical system directories and files on immutable servers. It will alert in real-time when anything is modified and may invoke defensive actions to quarantine the server. The SenseDeep agent is protected itself against tampering and has a permanent tether to the SenseDeep cloud service.

On the cloud-side, SenseDeep detects in real-time any changes made to the cloud configuration. On AWS, this means detecting changes to VPCs, service groups, accounts, IAM roles etc.

This is the future for secure operation in the cloud. Immutable infrastructure is here to stay and will become the norm. With tools like Terraform, building immutable servers and configurations is easier than ever.|||

An immutable server is a server that, once deployed, is never modified, patched or upgraded. It is merely replaced with a new updated instance if required. Immutable infrastructure extends this…