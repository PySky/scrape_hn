We have a team of about 30 developers, some of them are using Clojure while others are using other languages such as Java and C#. The number of people using Clojure has been steadily increasing as the benefits have become evident. My immediate team consists of eight developers working exclusively with Clojure.

An example of such a workflow is the one found at the Bariatric Clinic, where obese patients require assessments for weight loss surgery. Let’s take a look at the problem we faced and how we addressed it.

Assessments are conducted by professionals from across five disciplines. The assessment starts with a nurse consultation, followed by a visit with a social worker, then a dietitian, and then the psych team. Finally, patient is scheduled for the surgeon interview. The surgeon must have the information collected by other disciplines in condensed form.

The task is further complicated by the fact that all the assessments work with a common set of data. Each discipline requires to see a subset of the data and uses a different set of terminologies when referring to the data elements.

When a piece of data is modified, it may trigger updates in the data model including those that aren’t part of the view that the user is working on. Since multiple users may be working on different parts of the assessment concurrently, we have to take extra care to ensure data integrity within the application.

The project team chose to use an agile development approach to allow for greater flexibility. The workflow was broken up into modules for each discipline. We would deploy each module as it was finished, and integrate user feedback into design of the system as further modules were developed.

This model provides us with the ability to modify any aspect of the assessment without the need to redeploy either the client or the server portions of the application.

Through the use of the of the application, the clinic dramatically reduced wait times for the patients from 128 to 63 days. While the dictation time used by clinicians fell by 80%, representing a total savings so far of $240,000.

We really like working with the JVM, and wish to continue leveraging this platform for our projects. However, we also recognized the need for a language that facilitated both rapid development and prototyping while allowing us to produce robust and maintainable applications.

Clojure allows us to develop the system interactively, and to quickly respond to changing needs of the project. The team is able to quickly prototype solutions without sacrificing code quality. The dynamic nature of the language allows for a cheaper and faster development process than what was available to us with Java.

REPL driven development provides us with the ability to explore the problem space interactively and come up with the best solution through experimentation. We find that the REPL workflow results in a better feedback loop than unit testing.

Clojure based solutions end up having a fraction of the code seen in the projects of similar scope that we previously built in Java. Not only that, but Clojure makes it much easier to separate the intent of the code from the implementation details. The ability to separate what is being done from how it is done results in code that’s much easier to maintain.

Clojure’s focus on immutability facilitates a natural decoupling between parts of the application. In absence of shared global state, it becomes possible to work on parts of the application in isolation. The resulting code requires fewer tests since the functions are pure and do not depend on the overall application state.

If you'd like to share your Clojure story, please contact alex.miller@cognitect.com.|||

