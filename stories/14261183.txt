Resin can analyze, index and store documents and has querying support for term, fuzzy and prefix. It's a document-based search engine and analytics tool. Analyzers, tokenizers and scoring schemes are customizable.

Resin can be seen as an index of the same kind you attach to relational database tables when you want to make reading from them fast. Resin indices are fast to write and read from and support near (as in "almost match") which is out-of-scope for most database index types.

More formally, Resin's index is a doubly chained character trie optimized for fast disk-based tree traversing.

Apart from offering fast lookups, like a database index, Resin also scores documents based on their relevance. Relevance in turn is based on the distance from a document and a query in vector space.

To support the default tf-idf scoring scheme Resin stores term counts. Resin supports any scoring scheme and also gives you the ability to store additional document/sentence/token meta-data your model might need (up-coming feature in RC4). That data will be delivered to you neatly as a field on the document posting. In your custom IScoringScheme you then base your per-document posting calculations on that instead of just the term count.

If you skip the scoring, i.e. create a searcher without a scorer, then Resin is a auto-indexing key-value store, where keys are strings and values are the string representation of any object.

In many scenarios Resin is already faster than the market leader when it comes down to querying and indexing speed, making it a in-many-scenarios-fastest information retrieval system on the .net plaform and certainly a good choice if you're on dotnet core being there is no real alternative, if you're looking for a in-process alternative. Here is an out-of-process implementation of Resin.

If you have a scenario where you feel Resin should do better, this is important information for me. Please let me know. I'm both curious about those special cases and I'd love to optimize for them.

Half a decade has passed since what we in the .net community consider to be state-of-the-art search tech was built.

Who could use a modern and powerful search engine based on sound mathematics that's open source, extensible and built on Core, though?

Resin's API and file format should be considered unstable until release candidate 4. Coming features are indexing support for numbers and dates as well as support for range queries.

Latest release is here but I suggest you clone the source or download the latest source as a zip file, build and run.

The command line tool, rn.exe, can be executed after you have built the source.

Sir is Resin distributed, a search engine, map/reduce system and long-term data storage solution in one, a Elasticsearch+Hadoop replacement for on-premise or cloud architectures.|||

resin - Auto-indexing key-value store and search engine.