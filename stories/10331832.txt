Enumerability is an attribute of object properties. This blog post explains how it works in ECMAScript 6.

Let’s first explore what attributes are.

Each object has zero or more properties. Each property has a key and three or more attributes, named slots that store the data of the property (in other words, a property is itself much like a JavaScript object or a record with fields in a database).

ECMAScript 6 supports the following attributes (as does ES5):

You can retrieve the attributes of a property via , which returns the attributes as a JavaScript object:

This blog post explains how the attribute works in ES6. All other attributes and how to change attributes is explained in Sect. “Property Attributes and Property Descriptors” in “Speaking JavaScript”.

and are the only built-in operations where enumerability matters for inherited properties. All other operations only work with own properties.

Unfortunately, enumerability is quite an idiosyncratic feature. This section presents several use cases for it and argues that, apart from protecting legacy code from breaking, its usefulness is limited.

The loop iterates over all enumerable properties of an object, own and inherited ones. Therefore, the attribute is used to hide properties that should not be iterated over. That was the reason for introducing enumerability in ECMAScript 1.

Non-enumerable properties occur in the following locations in the language:

The main reason for making all of these properties non-enumerable is to hide them (especially the inherited ones) from legacy code that uses the loop or (and similar operations that copy both inherited and own properties; see next section). Both operations should be avoided in ES6. Hiding them ensures that the legacy code doesn’t break.

When it comes to copying properties, there are two important historical precedents that take enumerability into consideration:

Problems with this way of copying properties:

The only instance property that is non-enumerable in the standard library is property of Arrays. However, that property only needs to be hidden due to it magically updating itself via other properties. You can’t create that kind of magic property for your own objects (short of using a Proxy).

In ES6, can be used to merge the sources into the target. All own enumerable properties of the sources are considered (that is, keys can be either strings or symbols). uses:

That means that both getters and setters are triggered (the former are not copied, the latter are not overridden with new properties).

With regard to enumerability, continues the tradition of and . Quoting Yehuda Katz:

In other words: was created with an upgrade path from (and similar) in mind. Its approach is cleaner than ’s, because it ignores inherited properties.

Note: don’t use to copy methods. Prototype methods are non-enumerable. You therefore can’t use to copy methods from one prototype to another one. You could use it to copy methods from an object literal (which are enumerable) to a prototype. However, then the copied methods wouldn’t have the right enumerability. Furthermore, a method that uses has a property that points to the object that hosts it. does not correctly update that property.

If you make a property non-enumerable, it can’t by seen by and the loop, anymore. With regard to those mechanisms, the property is private.

However, there are several problems with this approach:

does not include properties in its output that are non-enumerable. You can therefore use enumerability to determine which own properties should be exported to JSON. This use case is similar to marking properties as private, the previous use case. But it is also different, because this is more about exporting and slightly different considerations apply. For example: Can an object be completely reconstructed from JSON?

An alternative for specifying how an object should be converted to JSON is to use :

I find cleaner than enumerability for the current use case. It also gives you more control, because you can export properties that don’t exist on the object.

In general, a shorter name means that only enumerable properties are considered:

However, deviates from that rule, it ignores enumerability and returns the keys of all properties. Additionally, starting with ES6, the following distinction is made:

Therefore, a better name for would now be .

It seems to me that enumerability is only suited for hiding properties from the loop and (and similar operations). Both are legacy features, you should avoid them in new code. As for the other use cases:

I’m not sure what the best strategy is for enumerability going forward. If, with ES6, we had started to pretend that it didn’t exist (except for making prototype properties non-enumerable so that old code doesn’t break), we might eventually have been able to deprecate enumerability. However, considering enumerability runs counter that strategy (but it does so for a valid reason, backward compatibility).

In my own ES6 code, I’m not using enumerability, except for classes whose methods are non-enumerable.

Lastly, when using an interactive command line, I occasionally miss an operation that returns all property keys of an object, not just the own ones ( ) or not just string-valued enumerable ones ( ). Such an operation would provide a nice overview of the contents of an object.

Feel free to disagree with what I have written in this blog post and let us know in the comments below. My opinion about enumerability is still evolving, because it’s such a confusing feature.|||

