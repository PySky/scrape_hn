I started this project when I bought a 32GB microSDHC card for my Android phone back in 2010, and found out that this card always fails when one fills it up. Googling about this issue, I arrived at the blogs Fight Flash Fraud and SOSFakeFlash, which recomend the software H2testw (see here or here) to test flash memories.

I downloaded H2testw and found two issues with it: (1) it is for Windows only, and (2) it is not open source. However, its author, Harald BÃ¶geholz, was kind enough to include a text file that explains what it does, and provided the pseudo random number generator used in H2testw.

This page is about my GPLv3 implementation of the algorithm of H2testw, and other tools that I have been implementing to speed up the identification of fake drives as well as making them usable: , , and . My implementation of H2testw, which I've broken into two applications named and , runs on Linux, Macs, Windows/Cygwin, and FreeBSD. is the fastest way to identify fake drives and their real sizes. enables users to use the real capacity of fake drives without losing data. helps developers to infer how fake drives work. , , and currently runs only on Linux.

I maintain this project in my spare time, and I no longer have been able to answer all questions and address all feedback that I receive. Nevertheless, I still think that F3's users can stop flash counterfeiters, but I need a little bit of help to keep moving forward. How can you help?

I've originally implemented F3 to address a personal need, but you have turned it into a great tool. Let's work closer to bring it to the next level!

Thanks to our growing community of fraud fighters, we have a couple of graphical user interfaces (GUIs) available for F3:

F3 QT is a Linux GUI that uses QT. F3 QT supports , , and . Author: Tianze.

F3 X is a OS X GUI that uses Cocoa. F3 X supports and . Author: Guilherme Rambo.

Please support these projects testing and giving feedback to their authors. This will make their code improve as it has improved mine.

The files of the stable version of F3 are here. The command below uncompresses the files. Follow instructions in file README.md to compile it on your computer:

Starting at version 2.0, F3 supports the platform Mac. Mac users may want to check out Thijs Kuipers' page for help.

Starting at version 3.0, F3 supports the platform Windows/Cygwin, and adopts H2testw's file format. People interested in exchanging files between F3 and H2testw should read the section about it to understand the caveats.

Starting at version 4.0, F3 supports the platform FreeBSD. Mac users: Version 4.0 does not compile on Macs. The issue has been fixed on version 5.0.

Starting at version 5.0, F3 includes and as experimental, and for Linux only.

Starting at version 6.0, F3 includes as experimental, and for Linux only. Linux users may want to check out Vasiliy Kaygorodov's page or Ahmed Essam's page for help.

If you prefer watching a video than reading the text below, check out Spatry's Cup of Linux's video demo of F3 on YouTube here.

My implementation of H2testw is composed of two applications: , and . fills a file system up with 1GB files named N.h2w, where N is a number. Whereas, validates those files. If the content of all N.h2w files is valid, the drive is fine. The last file may be less than 1GB since takes all available space for data. Below the result on my fake card:

This report shows that my flash card is pretty much garbage since it can only hold 1.02GB. only writes to free space, and will not overwrite existing files as long as they aren't named N.h2w. However, as the previous report shows, files from 1.h2w to 23.h2w were written before 24.h2w and yet had all their content destroyed. Therefore, it is not wise to test nonempty cards because if the card has a problem, it may erase the old files.

When reads a sector (i.e. 512 bytes, the unit of communication with the card), can check if the sector was correctly written by , and figure out in which file the sector should be and in which position in that file the sector should be. Thus, if a sector is well formed, or with a few bits flipped, but read in an unexpected position, counts it as overwritten. Slightly changed sectors, are sectors at right position with a fews bits flipped.

Notice that doesn't overwrite sectors by itself, it's done by the drive as a way to difficult a user to uncover its fault. The way the drive overwrites sectors is arbitrary. From the point of view of a file system, what sees, the way the drive wraps around seems often contrived, but, from the drive's view, it is just an address manipulation.

The last lines of the output of and provide good estimates of the writing and reading speeds of the tested card. This information can be used to check if the claimed class of the card is correct. Check this link out for more information about classes. Note that the speeds provided by F3 are estimates, don't take them as perfect since they suffer influence even from other processes in your machine. Also, be aware that your card reader and USB port can limit the throughput of the drive.

Later I bought a second card that works just fine; I got the following output running F3 on it:

Since and are independent, can be used as many times as one wants, although is needed only once. This allows one to easily repeat a test of a card as long as the N.h2w files are still available.

As a final remark, if you want to run and with a single command, check out the shell script . This script runs and , and records their output into a log file. Use example:

Randy Champoux has brought to my attention that could eventually read data from the system cache instead of from the flash card. Since version 2.0, F3 eliminates this possibility as long as the kernel honors the system call with advice . Linux has and honor , the Mac does not have the system call, and I don't know if Windows/Cygwin, or FreeBSD honors it. In doubt about this issue, just disconnect and connect back the device after runs and before calling .

Notice that the issue pointed by Randy Champoux is entirely an OS matter, that is, it doesn't change if the drive being tested is fake or not. In 2014, I've run into a "smarter" fake card that tries hard to behave like a good one using its internal cache to fool the test. In practice, these newer cards can only mislead with a limited number of blocks, but those looking for a precise, repeatable report should follow the advice of disconnecting and connecting back the device before runs. Consider the real example of a fake drive that presents this behavior. The drive announces a size of 128GB but its real capacity is less than 8GB:

After disconnecting the drive and connecting it back, produced the following output:

Notice that file 16.h2w, that last file wrote, has no longer good sectors. What happened is that the last sectors of 16.h2w were in the internal cache of the drive when ran right after , but were not there after the forced reset. The internal cache will fool any test that doesn't write beyond the real capacity of the drive plus the size of the internal cache, and does not hard reset the drive. One can estimate the size of this cache as follows: 523920 * 512B ~ 256MB.

Tom Metro once ran on a 16GB flash drive formated with ext2 file system, and obtained puzzling free space at the end of 's output:

This happened because ext2 and some other file systems reserve space for special purposes. So they don't allow to use that reserved space. It's mostly safe to ignore that free space. If one wants to use all space possible, there're two options: (1) using a file system that doesn't reserve space (e.g FAT), or (2) reducing the reserved space. How to go for the second option depends on the used file system. The page explains how to reduce the reserved space on ext2, ext3, and ext4 file systems.

Elliot Macneille has ran into an application that reports the size of one of its good flash cards as 15.71GB, whereas only finds 14.63GB. Details on how space is accounted varies with operating system, applications, file system used to format the drive, etc. However, there is a common source for this problem that often explains most of the difference: part of the computer industry (including F3) takes 1GB as being 2^30 bytes, whereas the rest of the industry assumes that 1GB is equal to 10^9 bytes. Some people use GiB for the first definition, but its use is not universal, and some users even get confused when they see this unit. With this information in mind, the mistery is easily solved: 14.63GiB * 2^30 / 10^9 = 15.71GB.

When Art Gibbens tested a flash card hosted in a camera connected to his Linux box, at some point F3 didn't show progress, and could not be killed. After a reboot, the card was read only. Using an adapter to connect his card directly to his machine, he recreated the partition of the card, and successfully ran F3 with the card in the adpater. Thus, Art's experience is a good warning if you're testing your card in a device other than an adapter. Please, don't take it as a bug of F3. I'm aware of only two things that can make a process "survive" a kill signal: hardware failures, and/or bugs in the kernel. F3 doesn't run in kernel mode, so Art's camera is likely the root of the problem.

Darrell Johnson has reported that a flash card he got stopped working after he filled it up. This could be that the only memory chip the card had died, but it is just speculation since Darrell was not able to obtain more information. The important message here is that if you test your card with F3, or just copy files into it, and it stops working, it's not your fault because writing files to a card shouldn't damage it if it is a legitimate card.

Username Kris, here, asked what's the difference between "dosfsck -vtr /dev/sda1" and F3. dosfsck(8) makes two assumptions that F3 does not: (1) one needs write access to the device being tested, not the file system in it; (2) hardware may fail, but it won't lie. The first assumption implies that one likely needs root's rights to run dosfsck, what is just a small incovenience for simple uses. The second assumption is troublesome because a fake card may be able to persuade dosfsck(8) to report it's fine, or not report the whole problem, or give users the illusion the memory card was fixed when it wasn't. I singled dosfsck(8) out because of the question about it, but those two assumptions are true for fsck software for other file systems and badblocks(8) as well.

Mac user Athanasios Tourtouras noticed that Spotlight of OS X, which runs in the background, also indexes the content of removable drives. Although Spotlight does not interferes with , its indexing takes away around 2MB/s of bandwidth, so will run slower as well as their speed measurements will underestimate the real capacity of the drive. Not to mention that you likely don't want to index test files. You can disable the indexing of removable drives including the flash drive to Spotlight's exclude list by going to System Preferences / Spotlight / Privacy.

Starting at version 3.0, F3 generates files following H2testw's file format. This feature should help users that use both applications and/or interact with users that use the other application. However, there are two caveats explained in this section that users should be aware.

Verifying files created by H2testw with F3read. The caveat here is that H2testw only writes files whose size is a multiple of 1MB, whereas F3write fills up the memory card. Thus, verifying files created by H2testw with F3read works, but, likely, will not test approximately 1MB of space that H2testw does not write.

Verifying files created by with H2testw. The caveat here is that H2testw requires that all files have sizes that are multiple of 1MB. When it is not the case for a single file, H2testw rejects all files, and issues the message "Please delete files *.h2w." This problem often comes up with the last file generates to fill up the space available in the memory card being tested. The solution is to truncate the size of the last file generates to the closest multiple of 1MB. Assuming the last file is 30.h2w, the following command does exactly that:

If you want to exchange files with H2testw users often, check out the shell script . This script calls after runs successfully.

H2testw's algorithm has been the gold standard for detecting fake flash (see here and here) because it is robust against all counterfeits. However, as drives' capacity grows, the time to test these newer drives becomes so painful that one rarely runs H2testw's algorithm on a whole drive, but only a fraction of it. See question "Why test only 25% or 32GB?" on this FAQ for a defense of this approach.

The problem with this approach is that drives are still getting bigger, and conterfeiters may, in the future, be able to profit with fake drives whose real capacity are large enough to fool these partial tests. This problem is not new. For example, Steve Si implemented FakeFlashTest.exe, which has successfully reduced the amount of time to test drives, and is still able to give a good estimate of the real size of fake drives. Yet, FakeFlashTest.exe's algorithm is not a definitive answer to the problem because FakeFlashTest.exe's algorithm still needs to write to at least all good memory of tested drives.

When a drive is fake, writes the size of the cache of the drive a couple times, and a small number of blocks as the example in the next section shows. From the example in the next section, the fake drive has 7.86GB (16477879 blocks) of usable memory, but advertises itself as being a 15.33GB (32155648 blocks) drive. It is worth noticing that given that 7.86GB / 15.33GB ~ 51.2%, this fake drive already violates the 25% recommendation mentioned above. wrote 2158 blocks to find the real size of the drive, whereas FakeFlashTest.exe would have written at least 16477879 blocks. That is, wrote no more than 2158 / 16477879 ~ 0.01% of all that FakeFlashTest.exe would have written. Even if FakeFlashTest.exe wrote only 1% of the real size of the drive, would still write only 1% of what FakeFlashTest.exe would write under this hypothetical, two-order improvement! Moreover, provides the exact geometry of the drive, what allows one to "fix" the drive using the highest capacity possible.

When a drive is not fake, writes about half of its size, or 2GB, whichever is smaller. Thus, if the previous drive were not fake, would've written 2GB, and FakeFlashTest.exe 15.33GB. While the difference 2GB / 15.33GB ~ 13.05% is much smaller, it is still large. When a fake drive has some cache, will slow down, but given that is optimized to deal with these cases it is still fast. I do not know how FakeFlashTest.exe deal with drives that have cache. If FakeFlashTest.exe simply ignores a drive's cache, it may over estimate the size of fake drives.

This breakthrough against counterfeiters was only possible because 's algorithm assumes a tight model of how fake drives work. In spite of the fact that I have not found a drive, fake or not, that confuses , I've marked as experimental for now because this model has not been battle proven. Although there is a chance of finding out that the model is incomplete, there is also a chance that the model can be simplified if one can be sure that not all types of fake flash the model predicts really exist; the latter chance holds a promise of even higher testing speeds. Of course, efficient flash tests like the one implemented in may slow down as fake chips become "smarter". For now, though, gives us the upper hand over counterfeiters.

Finally, thanks to being free software, and once is battle proven, could be embedded on smartphones, cameras, MP3 players, and other devices to stop once and for all the proliferation of fake flash.

Different from that works on the file system of the drive, works directly over the block device that controls the drive. In practice, this means three requirements. First, one has to have root access (i.e. superuser account) on the machine that will run the test. Second, the user must know how to find the block device of the drive. Third, you must be careful on the previous requirement to avoid messing your machine up. If you don't have root access, you can't use ; use in this case. The use example below helps with the second requirement, but don't forget that you are the one responsable for doing it right!

The command lsblk(8) is handy to find the block device of the drive. In the example below, which I got running lsblk on my laptop, an experient user can quickly identify that my flash drive that is mounted at "/media/michel/A902-D705" is block device "/dev/sdb". If you don't have much experience, you may want to run lsblk before connecting the drive to your computer, and to run lsblk again after connecting the drive to easily identify what was added to the output of lsblk. Checking out the content of folder "/media/michel/A902-D705" to confirm that it's the correct drive is a good idea as well. The block device "sdb" is the disk (see column "TYPE"), and "sdb1" is the first and only partition of my flash drive; your drive may have none or more partitions. You want to choose the drive, not a partition.

If you get confused between "sdb" and "sdb1", don't worry, will report the mistake and point out the proper one. However, I cannot emphasize it enough, you MUST identify the correct drive. If I had chosen "sda", may have messied my computer. Once the device is chosen, just prefix it with "/dev/" to obtain its full name.

Once you have carefully identified the device, you run like in the example below (please use the correct device!):

There is a lot in the previous example. First, it took one minute and 13 seconds for to identify that this 16GB drive had only 7.86GB. Second, I used command sudo(8) to run as root. Third, I used option "--time-ops" to add the last four lines of the output; these lines show the time taken to read, write, and reset the drive during the test. The rest of this section covers the other aspects of this output.

The option --destructive instructs to disregard the content of the drive to speed up the test. Without option --destructive, one would see a line "Probe finished, recovering blocks... Done" in the previous output to let the user know that has recovered all blocks in the drive to their original state. While the conservative mode is very convenient, you should not rely too much on it. If crashes, the conservative mode won't work. Moreover, depending on the fake drive, the conservative mode may not recover the drive to its exact original state. In case you are running on a memory-constrainted computer (e.g. an old Raspberry Pi board), you can still run it in conservative mode reducing the amount of memory needed with option "--min-memory". If you don't have memory to test a large drive even using option "--min-memory", you need to use option "--destructive". The conservative mode is the default in the hope that it will eventually save you from a mistake.

The line "Bad news: The device `/dev/sdb' is a counterfeit of type limbo" summarizes the results presented below this line. The types of drives are good, damaged (seriously failing), limbo (the most common type of fake drives), wraparound (a rare, if existing at all, type of fake drives), and chain (a rare type of fake drives). If you ever find wraparound and chain drives, please consider donating them to my collection.

The probe time of 1'13" includes the time to run the probe algorithm, take measurements, and the time to perform all operations on the drive. But it doesn't include the time to recover the saved blocks (if this feature is enabled). Therefore, the test would take rougthly another 55.48s (i.e. total write time) to write all blocks back to the drive. As some will notice, the time to perform all operations on the drive is what dominates the probe time: 472.1ms + 55.48s + 17.88s = 1'13". It's worth noticing that read and write speed estimates derived from the times of these operations are not accurate because they mix sequential and random accesses.

The next example gives you the chance to practice reading 's outputs:

This second drive is a good one; it has all blocks necessary to hold its announced size of 3.77GB, what is roughly 4GB.

The next section shows how to fix the 16GB drive using as suggested by .

Philip de Lisle has a SD card reader on this laptop that is not backed by a USB port. So when he tries , he gets the error message: Device `/dev/mmcblk0' is not backed by a USB device . This happens because the current version of only works on devices that are mounted at a USB port; a future release of may lift this restriction. In the meanwhile, one can work around this restriction using an external USB card reader.

You should not easily settle down for a fake drive, fight back and get your money back! Doing so will help you and others. If you are still reading this section, you already realized that you own a fake drive, and would like to be able to use it without losing data.

As shown in the previous section, my 16GB fake drive can only hold 7.86GB. Moreover, suggested how I can use to fix my drive. fixes fake drives creating a partition that includes only the usable memory of the drive. takes a few seconds to finish.

The execution of on my fake drive went as follows:

If reports that you need to force the kernel to reload the new partition table, as shown above, just unplug and plug the drive back. Once the new partition is available, format it:

At this point your card should be working fine, just mount the new partition to access it. However, before using the drive, test all its blocks with . The test of my card went as follows:

As reported by above, the real memory of my fake drive is in good shape. But it may not be the case for yours. For example, the following is 's output for another 16GB drive with real size of 7GB fixed as described in this section:

If you get some sectors corrupted, repeat the test. Some drives recover from these failures on a second full write cycle. However, if the corrupeted sectors persist, the drive is junk because not only is it a fake drive, but its real memory is already failing.

The Git repository is kept here.

Michel Machado. E-mail me at michel at digirati dot com dot br.

Please try to figure out the solution for your question on your own, or ask for help from a nearby friend before you e-mail me. My spare time is very limited. For reporting bugs, requesting features, and making suggestions, open an issue on GitHub here to allow other users to help me.

F3 is licensed under the GNU General Public License (GPL) version 3.|||

