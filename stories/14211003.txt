Test-driven development (TDD) involves running automated tests. A lot. If you have a function with five tests, you might easily invoke your test runner 50 or even 100 times before all tests are passing. Any action we take that often is a natural candidate for automation.

Leaving aside automatic test running on file saving for the time being, the ideal automation for running tests is probably having your editor send the file name and line number to your test runner (e.g. RSpec). I know at one point, the common AO Vim configuration had a keyboard shortcut command to do just that.

Defining a shortcut task that calls your test runner directly can break down in our modern polyglot world. Let’s say you are writing a React app with a Rails backend. You write unit tests for your React JavaScript with Mocha, unit tests for your Rails app with RSpec, and system tests with Cucumber.

Now we’ve got a bit of a problem. Namely, ‘mocha’, ‘rspec’, and ‘cucumber’ are separate commands, so they can’t readily be bound to the same “run my tests” keyboard shortcut. You can, of course, set up three separate shortcuts, but this “smells” a bit and requires you to stop and think which shortcut you want to invoke.

To eliminate this cognitive load, I’ve created the command. Really, it is useful for any task where you might use different command line programs for the same semantic meaning (e.g. “build” or “execute”).

The config file is really the interesting bit. expects a JSON file with a list of “runners,” which first determine if the filename sent in matches, then use the filename to run another command. Showing an example is probably the easiest way to explain how it works:

will use the input filename and the find the first runner whose matches. Then it looks at the for that runner. The should be a string which can be used with JavaScript template literals (in other words, escape with ${}). The following variables are available:

transfers execution to the you provide, so output will appear as it comes in. And, of course, the output is available for automated parsing and handling if your editor supports it.

is available on npm. Give it a try, and see if you can make your repetitive tasks incur less cognitive load.|||

The run_me command is useful for any task where you might use different command line programs for the same semantic meaning (e.g. “build” or “execute”).