It lets you combine your unit tests, golden tests, QuickCheck/SmallCheck properties, and any other types of tests into a single test suite.

To find out what's new, read the change log.

Ask any tasty-related questions on the mailing list or IRC channel #tasty at FreeNode (logs & stats).

Here's how your might look like:

And here is the output of the above program:

tasty is the core package. It contains basic definitions and APIs and a console runner.

In order to create a test suite, you also need to install one or more «providers» (see below).

It's easy to create custom providers using the API from .

Ingredients represent different actions that you can perform on your test suite. One obvious ingredient that you want to include is one that runs tests and reports the progress and results.

Another standard ingredient is one that simply prints the names of all tests.

It is possible to write custom ingredients using the API from .

Some ingredients that can enhance your test suite are:

Options allow one to customize the run-time behavior of the test suite, such as:

There are two main ways to set options:

When using the standard console runner, the options can be passed on the command line or via environment variables. To see the available options, run your test suite with the flag. The output will look something like this (depending on which ingredients and providers the test suite uses):

Every option can be passed via environment. To obtain the environment variable name from the option name, replace hyphens with underscores , capitalize all letters, and prepend . For example, the environment equivalent of is . To turn on a switch (such as ), set the variable to .

If you're using a non-console runner, please refer to its documentation to find out how to configure options during the run time.

You can also specify options in the test suite itself, using . It can be applied not only to the whole test tree, but also to individual tests or subgroups, so that different tests can be run with different options.

It is possible to combine run-time and compile-time options, too, by using . For example, make the overall testing depth configurable during the run time, but increase or decrease it slightly for individual tests.

This method currently doesn't work for ingredient options, such as or . You can set them by setting the corresponding environment variable before calling :

It is possible to restrict the set of executed tests using the option. The syntax of patterns is the same as for test-framework, namely:

If the pattern ends with a slash, it is removed for the purpose of the following description, but it would only find a match with a test group. In other words, will match a group called and any tests underneath it, but will not match a regular test . If the pattern does not contain a slash , the framework checks for a match against any single component of the path. Otherwise, the pattern is treated as a glob, where: The wildcard matches anything within a single path component (i.e. but not ). Two wildcards matches anything (i.e. and ). Anything else matches exactly that text in the path (i.e. would only match a component of the test path called (or a substring of that form).

For example, matches but not , whereas both examples would be matched by . A leading slash matches the beginning of the test path; for example, matches but not .

In order to run tests in parallel, you have to do the following:

Compile (or, more precisely, link) your test program with the flag;

To apply timeout to individual tests, use the (or ) command-line option, or set the option in your test suite using the function.

Timeouts can be fractional, and can be optionally followed by a suffix (milliseconds), (seconds), (minutes), or (hours). When there's no suffix, seconds are assumed.

The following options control behavior of the standard console interface:

Run the tests but don't output anything. The result is indicated only by the exit code, which is 1 if at least one test has failed, and 0 if all tests have passed. Execution stops when the first failure is detected, so not all tests are necessarily run. This may be useful for various batch systems, such as commit hooks. Report only the tests that has failed. Especially useful when the number of tests is large. Don't run the tests; only list their names, in the format accepted by . Whether to produce colorful output. Accepted values: , , . means that colors will only be enabled when output goes to a terminal and is the default value.

It is possible to add custom options, too.

Define a datatype to represent the option, and make it an instance of Register the options with the ingredient To query the option value, use .

See the Custom options in Tasty article for some examples.

There may be several ways to organize your project. What follows is not Tasty's requirements but my recommendations.

Place your test suite sources in a dedicated subdirectory (called here) instead of putting them among the main library sources.

The directory structure will be as follows:

is where your function is defined. The tests may be contained in or spread across multiple modules ( , , ...) which are then imported by .

Add the following section to the cabal file ( ):

All the above applies, except you can't depend on the library if there's no library. You have two options:

Blog posts and other publications related to tasty. If you wrote or just found something not mentioned here, send a pull request!

The problems with test-framework are:

So I decided to recreate everything that I liked in test-framework from scratch in this package.

Oliver Charles is the backup maintainer. Please get in touch with him if the primary maintainer cannot be reached.|||

tasty - Modern and extensible testing framework for Haskell