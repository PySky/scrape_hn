This blog post is about to show a new way of blogging about Lua.

Look at a typical blog post or tutorial about any programming language: The article usually presents a couple of code snippets. As I see it, there are two pains with code snippets:

A long time ago, all the developers had a common dream. The dream was about interactivity, liveness, evaluation…

But we put this dream aside - because the browser understands only .

And after a while, we even forgot that we ever had this dream.

Still, there are some people that didn’t forget this dream, like Alan Kay:

Here is the full interview of Alan Kay. (Thanks @fasihsignal for bringing this quote to our awareness.)

With the emergence of the WebAssembly, it is possible to run code in the browser - by compiling the code into format. This is how wasm_lua works.

For the moment, WebAssembly is supported only on Firefox version 52 and Chrome version 57 but it should be available on other browsers soon.

If you want to enjoy this article, please open it on or .

The klipse plugin is a small step toward this dream: it is a tag that transforms static code snippets of an html page into live and interactive snippets:

The following languages are supported by Klipse - in any modern browser (including mobile): clojure, ruby, javascript, python, scheme, es2017, jsx, brainfuck, c++ and Lua.

In this article, we are going to demonstrate interactive code snippets evaluated by wasm_lua.

Let’s have on this page a small static code snippet:

And now, we are going to klipsify this code snippet:

Feel free to edit the code above: it’s interactive => it evaluates as you type.

All I had to do in order to klipsify my code snippet, was to set the class (configurable) to the appropriate html element.

See it by yourself: here is the source of this page:

Before dealing about integration of the klipse plugin on a web page, let’s enjoy another klipse snippet for an in :

Go ahead! modify the code snippet above, and it will evaluate as you type…

We can also evaluate code from a .

For instance, we could evaluate this gist that defines the factorial function and calls it with :

Again, feel free to modify the code…

All you need to do in order to integrate the klipse plugin to your blog (or any other web page), is to add this tag to your web page:

By the way, this is exactly what we did on the page that you are currently reading.

The Klipse plugin is designed as a platform that could support any language that has a client-side evaluator, by writing modules to the Klipse plugin. Currently, there are modules available for the following languages:

Write your own blog post with interactive snippets in your preferred language.

It’s super simple to integrate the Klipse plugin on a blog bost: check the instructions on Klipse github repository.

You can get inspired by the work of the Klipse community…|||

blogging klipse Lua Wasm live examples code snippets