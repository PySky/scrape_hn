Today we’re going to learn how to get and manipulate data from an external API. We’ll use a practical example from one of my current projects that you will hopefully be able to use as a template when starting something of your own. 

 For this exercise, we will look at current job posting data for New York City agencies. New York City is great about publishing all sorts of datasets, but I chose this particular one because it doesn’t require dealing with API keys — the endpoint is a publicly accessible URL.

Here’s a quick roadmap of of our plan. We’ll get the data from New York City’s servers by using JavaScript’s Fetch API, which is a good way to start working with promises. I’ll go over the very bare basics here, but I recommend Mariko Kosaka’s excellent illustrated blog The Promise of a Burger Party for a more thorough (and delicious) primer.

If you’ve ever used in jQuery, you’re mostly there conceptually. If not, that’s okay, too. Take a look at the code below:

We declare a variable, , and set its value to fetch(the URL that contains the data we want) which returns something called a promise. For now, just think of it as the the data we will eventually get back from the URL when the request is complete. We can access and manipulate this data once it loads by subsequently calling on . To perform multiple operations, we can chain s together, making sure we 1. always pass in our data as an argument to the callback, and 2. return a value.

In the above snippet, we’re telling the computer to execute everything contained inside once the data is retrieved from the URL. This is what we call ‘asynchronous’ code. In this case, returns the data in JSON format, which will allow us to operate on it.

Just a quick aside for wrangling huge amounts of JSON: If you go in your web browser to the URL that contains the data we want, you’ll see an enormous, unformatted block of text that is very hard to read. However, you can copy and paste that text into something like jsonviewer, which will give you an organized, hierarchical, overview of the contents. Let’s say we want to see how many postings there are for each city agency. How can we do this? Well if we look at our JSON schema in this viewer, we can see that it’s an array of objects, with each object containing all the data that makes up a single job posting.

Note that each object contains a key, , whose value is the name of the city agency that has a job available.

Therefore, if we can somehow keep track of how many times each agency is mentioned throughout this array of objects, we’ll be able to know how many jobs are currently available per agency.

How can we do this? One way is to use . From MDN, “The method applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value.” If this sounds like a bunch of nonsense to you, don’t worry! We’ll see soon that it’s not so bad when we have some examples to work through.

Most introductions to involve simple addition, which is a fine starting point. Let’s walk through this example together:

Here’s how it works: the function loops through the array, , and adds each to an accumulator, which has an initial value of (we make this value 's second argument, after the callback function). The accumulator’s current value is returned at the end of every loop, which is how the adding happens. Thus, the final value of is 13.

If you’re having trouble visualizing this, try adding a statement before your return that outputs the current values of the accumulator and the item — this way, you’ll be able to see the looping that’s happening behind the scenes. Here’s a set of log statements for the above example:

This is all well and good, and it’s fun to do some addition with ~*functional programming~*, but did you know can do more than simply count things? And that the accumulator can be something other than a number? It's true!

In our case, we’ll use it to find out how many current job postings there are per New York City agency. This might seem like a big leap from simply adding numbers together, but the core concepts of looping and accumulating are the same.

This time, instead of reducing an array of four numbers, we want to reduce our JSON blob of job posting data. And instead of reducing to a single number, we’re going to reduce to a single object. Yes, an object! Once the function is completed, the accumulator object’s keys will be the names of the city agencies and the keys’ values will be the number of postings they have, like this: {"name of agency": number of job postings} . Here’s the whole program:

How does this work, exactly? Let’s break it down. Each time around the loop, we’re looking at a specific , i.e., one object in , our aforementioned array of objects. We’re checking to see if a key with the name of the current agency ( ) already exists within our accumulator object. If not, we add it to the accumulator object and set its value to 1. If a key with the name of the current agency already exists within the accumulator object, we add 1 to its existing value. We return the accumulator object when we’re done and get this nice set of data:

Et Voila! We now know that if we want to work for the City government, we should check out the Department of Health and Mental Hygiene’s 247 openings!

We can do a bunch of useful things with this data  —  personally, I want to dip my toes into data visualization, so I’ll be using it to make a simple chart. I hope you’ll be able to use this example as a jumping-off point for your own projects.

 If you enjoyed this article, please reach out to me on Twitter!

Thanks to Jim O’Brien for editing.|||

An intro to fetch() and reduce() in JavaScript using practical examples.