This article has been updated to Inferno v1.x.

TL;DR: Inferno JS is a blazing-fast, lightweight, React-like JavaScript library. React developers will find it comfortably familiar. Inferno JS also supplies better performance, smaller size, and other improvements. Inferno is highly modular and unopinionated, encouraging developers to add only the pieces we require and write code to suit our personal preferences. In this tutorial, we'll introduce the Inferno JavaScript library, then build a simple Inferno app and authenticate it with Auth0. The final code can be found at the inferno-app GitHub repo.

Inferno is a fast, lightweight JavaScript library that resembles React. Minified and gzipped, Inferno weighs in at only 9kb (React gzipped is over 40kb). It's also extremely performant in benchmarks as well as real-world applications. Inferno can render on both the client and server and at the time of writing, it is the fastest JavaScript UI library that exists.

These features are very attractive, but many JavaScript developers are overwhelmed by the number of libraries and frameworks already out there. A few tools have emerged as mindshare and usage leaders, React among them. So what are the reasons behind Inferno's creation? Who should use Inferno and why?

Inferno's author, Dominic Gannaway, wanted to examine whether a UI library could improve experience for web apps on mobile devices. This included addressing issues that existing UI libraries had with battery drain, memory consumption, and performance. Inferno builds on the same API as React to greatly diminish the barrier to entry and take advantage of the best features of React. The result was a lightweight and incredibly performant UI library that React developers will find delightfully familiar but also improved.

Inferno has many features, including but not limited to:

You can read more about the features of Inferno and how Inferno works in the Inferno GitHub README and an indepth Inferno interview with Dominic Gannaway on the SurviveJS blog.

Dominic Gannaway initially developed Inferno to improve performance on mobile. He says:

Because Inferno is built on the same API as React, developers gain several adoption advantages when learning or switching to Inferno:

The official Inferno website and documentation can be viewed here. Dominic Gannaway also recommends the React courses on egghead.io as well as React tutorials by Wes Bos. In addition, resources such as Auth0's React Quick Start and Secure Your React and Redux App with JWT Authentication can offer insight into managing authentication with Inferno.

Developers can get started easily with Inferno with the create-inferno-app project. This is a fork of and sets up boilerplate for developing, testing, building, and serving an Inferno app.

Now that we've learned a little bit about Inferno, let's build a simple app that calls an API to get a list of dinosaurs. We'll be able to click a dinosaur's name to display more information. Let's get started!

We'll need Node.js (with npm) installed globally. If you don't have Node already, download and install the LTS version from the Node.js website.

We're going to use create-inferno-app to generate the boilerplate for our application. Install globally with the following command:

Let's scaffold a new Inferno project with . Navigate to a folder of your choosing and run the following commands to create a new app and start the local server:

The app can now be accessed at http://localhost:3000 and should look like this in the browser:

To style our components quickly, let's use Bootstrap. Version 3 is the latest stable release at the time of writing. We'll use npm to install Bootstrap:

Import the Bootstrap CSS file in the file to make it available in the application:

Our app needs an API. Let's clone sample-nodeserver-dinos in the root of our Inferno app and then rename the repo folder to . Then we'll execute to install the necessary dependencies to run our API.

Our Inferno app runs on a local development server at and the dinosaur API runs on .

Let's start our API server. From the folder, run:

To call our API, we can build a service to data. App components can then use this service to make API requests. Let's create a new folder: . Inside this folder, make a new file and call it :

The fetch API makes HTTP requests and returns promises. We want to create methods to the full list of dinosaurs as well as an individual dinosaur's details by ID. We'll make sure the response is valid, handle errors, and then export the and methods for our components to use.

Now we need to call the API from a component so we can display the list of dinosaurs in the UI. Open the file. This has some boilerplate in it that we can delete and replace:

If you have React experience, this should look familiar. If you're new to React and Inferno, please check out the React docs to learn about general syntax, state and lifecycle, JSX, and more.

In the lifecycle hook, we'll call our to get an array of all dinosaurs. We'll set state for our dinosaur array on success and error on failure. In the , we can pass (there are none in this case) and as parameters so we don't litter our function with . For example, this way we can use instead of .

Now that we've replaced the boilerplate JS, let's delete everything in and replace it with the following:

Our app now looks like this:

In our file, we're simply showing when there isn't any dinosaur data. However, this should be an error instead if the API isn't available. You may have noticed that we put in the state but didn't use it in yet. Let's create a small component that conditionally shows a loading image or an error message.

Create a new folder: . All components from now on will go into this folder. Next create a subfolder called to contain our new component's files.

Let's add a loading image. You can grab the from GitHub here. Download the image into the directory.

Create an empty file for the loading CSS: .

Let's import the loading image and CSS. Whenever we use our component, we're going to pass the parent component's state as a property. We can then pass to our function to access properties without needing . We'll render the loading image if there's no , and show an alert if there is.

Add the following CSS to :

Let's verify that our file structure looks like this:

Now we can use this component in our and replace the element we added earlier:

Now while data is being fetched from the API, the running dinosaur gif is shown. If we stop the API server and reload the app, we'll see our error message instead of an infinite loading state:

Let's explore creating a component that displays the list of dinosaurs and lets users select one to show additional details. This will replace the simple unordered list that we put in the file.

Create a new folder containing CSS and JS files for the component:

Add the following code to :

We'll import from . is an excellent helper function unique to Inferno. It allows attachment of data to events without needing , arrow functions, or closures.

The function will use the and parameters. We'll pass the dinosaurs array to our component from as a property.

The function at the top of the file is the event handler for when a user clicks a dinosaur's name to get dino details. This is not a method on the class. The function is pulled out to demonstrate how components can easily leverage methods from third-party APIs with . The parameter comes from the in like so:

can pass data (as well as the event) to a handler. We're using it here to pass the clicked dinosaur's to call the API and apply a class to the active dinosaur in the list. We're also passing the instance ( ) so we can use in our function without context errors or binding.

Next, add the following to the file to style the list of dinosaurs:

In the file, let's replace our unordered list with the new component:

At this point, when a dinosaur in this list is clicked, the only "detail" we're showing is the dinosaur's name. Also, because we don't make an API call automatically on load, the UI will show the loading image in the details area until the user clicks on a dinosaur in the list. Clearly this isn't ideal. We'll create a component next to display this in a much nicer way.

Let's make a new folder for our component: . We'll only use Bootstrap to style this component, so a CSS file won't be necessary.

Despite the large amount of JSX, this is a very simple component. All it does is take a property and display data. If there is no available, it shows a message that instructs the user to select a dinosaur.

Now we'll replace the detail dinosaur name in the component with our new component:

Note that we've also changed the expression to . We no longer want to check for here because we still want to display the component even if there is no information available yet. We only added this in the previous step to avoid errors.

When no dinosaur is selected, our app now looks like this:

When a dinosaur is clicked, its details are fetched from the API and displayed. The selected dinosaur receives an class in the list, which we styled as bold and underlined in the CSS previously:

The last thing we'll do is add Auth0 authentication to our Inferno app. At the moment, our sample dinosaur API doesn't have any secured endpointsâ€”but if we need them in the future, Auth0's JSON Web Token authentication can help.

The first thing you'll need is an Auth0 account. Follow these simple steps to get started:

Now that is installed, we can use it in our file to implement authentication logic. We'll also need to create two new components, and . These components are referenced in below.

Import as well as the new components we'll create, and . will use an auth0.js method to log in and retrieve tokens and the user's profile, redirecting back to our app when successful. will display after login and show the authenticated user's name and picture.

In the , we'll check for an existing token and profile from a previous login and set them if available. In , we'll create our Auth0 instance. Replace and with your Auth0 client information. On successful redirection from Auth0's hosted login, we'll do the following:

In the function, we'll add the and components to the element as well as a logout link. These will show conditionally based on the presence or absence of an access token. We'll pass properties to these components:

The function (pulled out near the top of the file) clears the user's token and profile from and removes this data from local storage.

We'll add a few more styles to our to support our new markup:

Next we'll create the component. When the user is logged out, the app will have a "Log In" link in the header like so:

Add the necessary folder and files for our component:

Our should look like this:

We passed our 's Auth0 instance to so we could access its method. The component has a link that calls this method with the necessary options when clicked.

We'll add just a little bit of CSS to support this component:

Finally, we'll build the component. This will show the user's profile picture and name when authenticated:

Add the necessary folder and files for our component:

The file should look like this:

We'll display the user's picture and name. As a bonus, we can add a attribute that shows the identity provider that the user signed in with (ie.: , , etc.).

Add a few styles to for alignment and a circular profile image:

We now have working authentication in our Inferno app. In the future, we can use identity management to secure routes, make authenticated API calls, conditionally render UI, control user access, and more. Check out these additional resources to learn about packages and tutorials that will be helpful for authentication with Inferno / React-like apps:

We've learned how to create a basic real-world application with Inferno. We've also explored some of the features Inferno has that its predecessors lack, such as . We've demonstrated how simple it can be to utilize Inferno with external methods. Inferno author Dominic Gannaway's favorite feature is lifecycle hooks for functional components, something we didn't explore in this tutorial but should certainly be utilized by developers who prefer a functional component approach.

To learn more about the Inferno JS library, you can peruse the docs at infernojs.org or get in touch with the community and development team by checking out the Inferno GitHub and Inferno Slack.

If you're a JavaScript developer trying to improve performance and reduce filesize in your web apps, check out Inferno. Even if you don't have React experience, Inferno is easy to learn thanks to the abundance of React resources and tutorials available. Hopefully you're now ready to get started with Inferno in your projects!|||

Inferno is a fast, small, React-like JavaScript UI library.