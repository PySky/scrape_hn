For a long time, I avoided trying to understand what common table expressions were or how they worked. The name alone was intimidating. I figured I could just get by with the database features supported by my ORM. Better that way; I won't have to get my hands dirty with all that raw SQL.

It turns out that I was missing out on some solid database features by avoiding all that raw SQL goodness. Common table expressions (CTEs) are a potent feature of PostgreSQL and most other modern relational databases. By avoiding features like CTEs, I was treating Postgres like a dumb data store instead of the powerful computation engine that it is. CTEs are one Postgres feature that epitomize this power.

The PostgreSQL documentation gives the following description of common table expressions:

That sounds nice, but it undersells what we can do with CTEs once we understand how they work. Let's interact with some concrete examples. You'll want to pop open a session for this. Use in to edit the SQL in your default editor.

For a first example, how about something straightforward like a CTE that counts to 100:

all the way up to .

Sure, that example isn't all that exciting. We could easily achieve the same with a simpler looking query that involves a sub-select. Nevertheless, we can see how the temporary table constructed by the CTE is visually set apart from the rest of the query and its namespace ( ) made explicit. This temporary table now has the set of integers from to from which we make our selection -- all of them.

We depart from what can be achieved with mere sub-selects when we employ the option. By making a CTE recursive, it essentially becomes a dynamically-built temporary table. With a recursive CTE, we can achieve the same as above, but doing so on the fly and without the function:

That is a funky looking query, so let's break it down.

I've added in the keyword to declare that this will be a recursive CTE. I've also named the single column of the CTE as . If there were more columns, I could include them with separating commas. This makes it so that I can reference the individual columns within the CTE.

The end of the query looks the same, so it's just the internals of the CTE that we have left to dissect. So let's take a look at that starting from the top.

The means we start with a single column, single row table that contains . This provides a base on which the recursive part of the CTE can build.

This base table is then unioned with a dynamically-built table where each row is recursively computed as added to the row before it ( ). This process happens until some terminating condition is met. In this case, that terminating condition is when the value of the latest reaches ( ).

The end result is a temporary table, , with the values from to . We can select from this dynamically generated temporary table like we do any other table. If we only want the rows where is greater than , we just query this table like we do any other table -- . In our case, we want to grab everything -- all 100 rows -- which we can do with . We wanted a selection that included the values from to and now we've got it.

Let that soak in for a moment. We just dynamically built a temporary table of values where each value was an individual computation based on previously computed values. And we can do a lot more than just add to . We can fill the CTE with all kinds of formulas and logic in order to build a temporary table full of interesting and useful data. That's powerful. This means that with a little SQL we can do a lot of fancy stuff right in the database. Better yet, we can avoid expensive and complicated trips between the database and some script or process that we would otherwise rely on to build that intermediate set of data.

Let's see what it means to add some logic and formulas to our CTE by taking our existing query a step further. How about solving the FizzBuzz programming challenge? We've already got the set of numbers from to ; they just need to be transformed into , , and .

So let's start with . The rule is that any value that is evenly divisible by should be represented by (we'll ignore the rule for the moment). We can know that the given value is divisible by if we take the modulo of and the result is . A list of values and whether or not they are divisible by is a good starting point.

The result with just the first 10 rows:

Great. Now we want to display whenever there is a , otherwise leave the value as is. We can use a ( ) statement to populate the second row accordingly.

The result with just the first 10 rows:

This is really close to what we want. By incorprating the rules for and , we should have what we are looking for. That can be achieved by extending the statement a bit further for values of and .

The result out to 20 rows:

And there you have it, FizzBuzz solved with PostgreSQL. Try that out at your next programming job interview.

CTEs are great for a lot more than solving FizzBuzz. Non-recursive CTEs alone can be used to simplify and dry up complicated queries that would otherwise involve many nested sub-selects1. Recursive CTEs allow you to do things in-database that simply aren't possible with other SQL constructs (e.g. sub-selects). The possibilities include but are not limited to generating reports from data aggregated from many tables and transforming data when migrating from one schema to another. This makes them a valuable addition to your SQL repertoire. CTEs are even more powerful than I've illustrated. To see some other cool capabilities of CTEs, check out this post on Writeable Common Table Expressions.|||

