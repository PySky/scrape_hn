They keep state local. Pure functions do not reference any external values. This means that pure functions will always produce the same output based upon the input. Pure functions are deterministic.

Not referencing anything but the input makes the function much easier to use, as it works in a vacuum, the function can be worked on and understood with no knowledge of the surrounding program. Purely looking at the function as a map of input to output.

Deterministic functions are predictable. Relying only their input means that input is converted the same every time computation is performed.

Looking at our function, we see when we run our function

, but what happens if changes

, but we gave exactly the same input! This shows us that is indeed non-deterministic, and is therefore not a pure function.

only ever references its input, it is therefore deterministic. No matter when, or where we call it will consistently return the same value. Pure functions are .

This property of pure functions means their output can be cached. This is called memoisation 1 

 will always return the same value, so why do we need to compute the answer more than once!

A pure function does not reference have side effects. This means that pure functions will not change anything outside the function.

Looking at our function, we see when we run our function

The function changes the variable. The function is deterministic, but has a side effect and is therefore not a pure function. 

 Pure functions return the computed value, while this function directly changes another var. This would be the same if we updated a database or API with our result. A pure function does not change anything outside of it's scope.

We want programs to have side effects.

We do want to minimise those side effects to only those we want to happen.

Pure functions are easier to read. A pure function maps an input to an output. Pure functions self document with their signature, using verbs as their names. Understanding what a function named , , or greatly alleviates the mental toll of figuring out what a function is intended to return.

Pure functions are easier to debug. Inputs and side effects are never hidden in the code. The function does not need to be looked at in the context of the rest of the program.

Pure functions are easier to test. Pure functions do not need to have a program around them to test. The function can be tested alone in a vacuum from anything else. Being deterministic means the function is reproducible. Having no side effects means testing is limited to checking the returned value of the function.

Pure functions don't care about order. is possible as each function does not share state with anything else, and therefore can be computed without care of what other functions are doing. You don't have to think about what happened before, during, or after. The output is solely dependent on the input, and therefore pure functions can be computed all at once.

Each number in can be computed individually to map to a new array. Pure functions more likely to be as they do not reference any shared state 2.

Thanks to Andrew for helping with this blog|||

Pure functions are deterministic, they are scoped only to their input and do not produce side effects