Hello, today we are going to talk about the bubble sort.

The bubble sort is a simple algorithm which will help us to get along with Rust syntax and to understand what is the algorithm complexity which we talk about in the previous post.

In short, this algorithm compare all elements in an array two by two and it swap there positions if the two element are not sorted.

It takes an array in and gives an array out.

We define here function  (fn) “bubble_sort”. It takes “vec_to_sort” which is a vector (kind of dynamic array) of i32 or integer write on 32 bits an give us out another vector of i32.

Then we iterate and compare two by two all elements.

And finally, we swap the position of elements if needed.

You can test this code here.

Count the actions, shall we?

In the worst case, we got n*n*1+1 actions. Constants are not relevant so we got a complexity of O(n2).

To get a better idea of what it means, if we got a processor able to execute 100 operations by seconds and an input array of 100 elements, this algorithm will take 1m40 to sort this array.

Nice one! To do so, we have to make the function generic and use closures (sort of unnamed function).

We can then modify the code like that:

We say here that the function is parameterized against T and F where F is a function which will return a boolean.

To see how it works, look here.

It is done for this one, see you soon for another one.|||

Hello, today we are going to talk about the bubble sort. "Bubble sort?" The bubble sort is a simple algorithm which will help us to get along with Rust syntax and to understand what is the algorithm complexity which we talk about in the previous post. "Ok, what does it do?" In short, this algorithm…