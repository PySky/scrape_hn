This is part three of a series of articles on reducing complexity in JavaScript code. In previous articles, we suggested that indentation is an indicator of complexity. It is not an accurate or comprehensive indicator, but it can be a helpful guide. We then looked at how we can replace loops, in particular, with higher level abstractions. In this post, we turn our attention to conditionals.

Unfortunately, we can’t get rid of conditionals completely. It would mean drastically re-architecting most code bases. (Though it is technically possible). But, we can change the way we write conditionals to make them less complex. We will look at two strategies for dealing with if-statements. After that, we will turn our attention to switch-statements.

The first approach for refactoring conditionals is getting rid of . We just write our code as if there was no else statement in JavaScript. This may seem like an odd thing to do. But most of the time, we simply don’t need .

Imagine we’re developing a website for ‘scientificists’ researching the luminiferous aether. Each scientificist has a notification menu that we load via AJAX. We have some code for rendering the menu once the data is loaded:

This code works. But once we’ve determined that there are no notifications to render, what is the point of hanging around? Why not just return the straight away? Let’s refactor and see what it looks like:

So, we’ve changed the code such that if we hit an edge case, we just return something and get out of there. For the reader, if this edge case is all you’re concerned about, there’s no need to read any further. We know there cannot be any relevant code after the if-statement. No need to scan down and check, just in case.

The other benefit to this code is that the ‘main’ path (where we return a list) has dropped a level of indentation. This makes it easier to see that this is the expected ‘usual’ path through the code. The if-statements are for handling exceptions to the main path. This makes the intention of our code clearer.

This tactic of not using else is a subset of a broader strategy I call ‘Return early. Return often’. In general, I find it makes code clearer and can sometimes reduce computation. For example, in the previous article we looked at :

In the function, we return out of our loop early, as soon as we find the item we’re looking for. This makes the code more efficient.

Removing is a good start, but still, leaves us with a lot of indentation. A slightly better tactic is to embrace ternary operators.

Ternary operators have a bad reputation for making code less readable. And I will say up front that you should never nest ternaries if you can help it. Nesting ternaries does make code incredibly hard to read. But, ternaries have a massive advantage over traditional if-statements. But to show why we have to dig a little deeper into what if-statements do. Let’s look at an example:

This is pretty straightforward. But what happens if we wrap the blocks in immediately-invoked-function-expressions (IIFEs)?

So far, we’ve changed nothing, both code samples do the same thing. But notice that neither IIFE returns anything. This means that it is impure. This is to be expected since we’re just replicating the original if-statement. But could we refactor these IIFEs to be pure functions? … Actually, no. We can’t. At least, not with one function per block. The reason we can’t is that the if-statement doesn’t return anything. There is a proposal to change this. But for now, we have to accept that unless we return early, if-statements are going to be locally impure. To do anything useful we either have to mutate a variable or cause a side effect inside one of those blocks. Unless we return early, that is.

But… what if we wrapped a function around the whole if-statement? Could we make the wrapper function pure? Let’s try. First, we wrap the whole if-statement in an IIFE:

Then we move things around so that we return values from our IIFE:

This is an improvement because we’re no longer mutating any variables. Our IIFE knows nothing about . But it’s still accessing variables from outside its scope: , , and . Let’s deal with and first. We’ll make them parameters to our function (note the last line):

Finally, we need to deal with . We could just pass it in as a variable too, but then we’d always be tied comparing it to ‘some value’. We could add a bit more flexibility if we make the whole condition a parameter:

Now we can move our function out on its own (and get rid of while we’re at it):

So… what have we done? We’ve created an abstraction for if-statements that set a value. If we wanted to, we could refactor (almost) all our if-statements in this way, so long as they are setting a value. As a result, instead of if-statements everywhere, we have pure function calls. We would remove a bunch of indentation and improve the code.

But… we don’t really need . We already have the ternary operator that does exactly the same thing:

The ternary operator is terse, and built-in to the language. We don’t have to write or import a special function to get all the same advantages. The only real disadvantage is that you can’t really use and with ternaries. So, give it a try. See if you can refactor your if-statements with ternaries. At the very least you will gain a new perspective on how to structure code.

JavaScript has another conditional construct, as well as if-statements. The switch-statement is another control structure that introduces indentation, and with it, complexity. In a moment we will look at how to code without switch-statements. But first, I want to say a couple of nice things about them.

Switch-statements are the closest thing we get in JavaScript to pattern matching. And pattern matching is a Good Thing. Pattern matching is what computer scientists recommend we use instead of if-statements. So, it is possible to use switch-statements well.

Switch-statements also allow you to define a single response to multiple cases. This is, again, something like pattern matching in other languages. In some circumstances, this can be very convenient. So again, switch-statements are not always bad.

With those caveats, though, in many circumstances, we should be refactoring switch statements. Let’s look at an example. Recall our luminiferous ether community example. Let’s imagine we have three different types of notification. A scientificist might receive a notification when:

We have a different icon and text format that we’d like to display for each type of notification.

One of the things that make switch-statements a bit nasty, is that it’s far too easy to forget a . But if we turn this into a function, we can use our ‘return early, return often’ trick from before. This means we can get rid of the break statements:

This is much better. We now have a pure function instead of mutating a variable. But, we could also get the same result using a plain ol’ JavaScript object (POJO):

This produces the same result as the previous version of . It is more compact. But is it more simple?

What we have done is replace a control structure with a data. This is more significant than it sounds. Now, if we wanted to, we could make a parameter of . For example:

That might not seem terribly interesting at first. But consider that now, is a variable. And that variable doesn’t have to be hard-coded anymore. We could move it into a JSON configuration file, or fetch it from a server. We can now change if we want to. We can add extra options, or remove options. We could merge together options from different places. There is also much less indentation in this version…

But, you may have noticed that none of this code deals with the case where we have an unknown notification type. With the switch-statement we have the option there. We could use it to throw an error if we encounter an unknown type. Or we could return a sensible message to the user. For example:

We’re now handling the unknown notification case. But we’re back to using switch-statements again. Could we handle this in our POJO option somehow?

One option would be to use an if-statement:

But we’re trying to cut down on our if-statements. So that’s not ideal either. Instead, we’ll take advantage of JavaScript’s loose typing, combined with some boolean logic. JavaScript will only check the second part of an OR-expression ( ), if the first part is falsy. The notification type will be if not found in the object. And JavaScript will interpret as falsy. So, we use the OR-expression like so:

And, we could make that default message a parameter too:

Now, is this approach any better than a switch-statement? The answer is, as usual, ‘it depends’. Some might argue that this version is difficult for beginner programmers to read. That is a valid concern. To understand what’s going on, you have to know about how JavaScript coerces values to booleans. But the question to ask is, “Is it difficult because it is complex, or because it is unfamiliar?” Is familiarity a good enough reason to accept more complex code?

But is this code less complex? Let’s look at that last function we created. What if we changed its name to something more general (and tweaked the last parameter)?

We could then build our function like so:

What we have now is a very clear separation of concerns. The text options and default message are now pure data. They are no longer embedded in a control structure. We also have a handy function, , for building similar types of constructs. The data is cleanly separated from the task of choosing which option to display.

This pattern is handy when we’re dealing with returning static values. In my experience it can replace a switch-statement in around 60–70% of cases. But what if we wanted to do something a little bit more interesting? Imagine, what would happen if our options object contained functions instead of strings? This article is already too long, so we won’t dive into the details here. But it well worth thinking about.

Now, as usual, be careful to use your brain. A function like can replace many switch-statements. But not all. There will be some circumstances where it makes more sense to use a switch-statement. And that’s OK.

Refactoring conditionals is a little bit more work than removing loops. This is partly because we use them in so many different ways. Loops, however, are mainly (but not always) used with arrays. But there are a few simple patterns we can apply that make conditionals less intertwined. They include: ‘return early’, ‘use ternaries’, and ‘replace switch-statements with objects.’ These are not silver bullets, but rather, handy weapons for fighting complexity.|||

Have you ever started writing some code that seemed so simple? But then you had to validate the input? And handle an edge case? Oh yeah, and that weird thing the server sometimes does? And somehow this oh-so-simple piece of code turned into a mess? This article looks at how we can reduce the complexity introduced by conditionals.