This project is a framework for generating randomised user input in iOS apps. This kind of monkey testing is useful for stress-testing apps and finding rare crashes.

It also contains a related framework called SwiftMonkeyPaws, which provides visualisation of the generated events. This greatly increases the usefulness of your randomised testing, as you can see what touches caused any crash you may encounter.

Randomised testing will help you with all of these!

SwiftMonkey is inspired by and has similar goals to UI AutoMonkey, but is integrated into the Xcode UI testing framework, providing better opportunities to debug.

Also, it is fun to look at:

To see for yourself how this framework works, just grab the code and open . Then press to run the UI test.

As a high-level overview, add to your UI test target. Then add a test that creates a object and uses it to generate events.

Optionally, you also add the to your main app, and create a object to enable visualisation. You probably only want to do this for debug builds, or when a specific command line flag is used.

SwiftMonkey uses Swift 3.0. It has no dependencies other than iOS itself (8.0 and up should work). SwiftMonkeyPaws doesn't have any dependencies, either; you can even use on its own, without SwiftMonkey.

You can install the frameworks using CocoaPods. Assuming that you've named your main app and test targets "App" and "Tests", you can use something like this in your :

Copy the and folders into your project. Next, drag the files into your project.

Then, for SwiftMonkey, add as a dependency for your test target, and add a Copy Files build phase to copy it into .

For SwiftMonkeyPaws, adding to the Embedded Binaries section of your app target is enough.

As of this writing, the Swift Package Manager doesn't support iOS projects. SPM package files have experimentally been created, but obviously don't really work yet.

To do monkey testing, , then create a new test case that uses the object to configure and run the input event generation. Here is a simple example:

() { application () Workaround for bug in Xcode 7.3. Snapshots are not properly updated when you initially call app.frame, resulting in a zero-sized rect. Doing a random query seems to update everything properly. TODO: Remove this when the Xcode bug is fixed! application. ( : . ). ( : ). Initialise the monkey tester with the current device frame. Giving an explicit seed will make it generate the same sequence of events on each run, and leaving it out will generate a new sequence on each run. monkey ( : application. ) Add actions for the monkey to perform. We just use a default set of actions for this, which is usually enough. Use either one of these, but maybe not both. XCTest private actions seem to work better at the moment. UIAutomation actions seem to work only on the simulator. monkey. () to check if an alert is shown, and click a random monkey. ( : , : application) monkey. () }

The object allows you not only to add the built-in event generators, but also any block of your own to be executed either randomly or at set intervals. In these blocks you can do whatever you want, including (but not only) generate more input events.

Documentation for this is limited at the moment, so please refer to and its extensions for examples of how to use the more advanced functionality if you need it.

The simplest way to enable the visualisation in your app is to first , then do the following somewhere early on in your program execution:

This call will swizzle some methods in UIApplication to capture UIEvents. If you would rather not do this, or if you already have a source of UIEvents, you can pass the following option to to disable swizzling:

Then you can pass in events with the following call:

Feel free to file issues and send pull requests for this project! It is very new and not overly organised yet, so be bold and go ahead. We will sort out the details as we go along.

Code style is currently just four-space identation and regular Apple Swift formatting.

Also, we have adopted the Contributor Covenant as the code of conduct for this project:

This software was originally written by Dag Ågren (dag.agren@zalando.fi) for Zalando SE. This email address serves as the main contact address for this project.

Bug reports and feature requests are more likely to be addressed if posted as issues here on GitHub.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.|||

SwiftMonkey - A framework for doing randomised UI testing of iOS apps