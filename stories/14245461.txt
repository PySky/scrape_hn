Society dictates, for the most part, that childhood serves as a dress rehearsal for adulthood.  Sure, we go to school and learn to read, write, and ‘rithmetic, but we also learn life lessons.  And these lessons come during a time when we can learn mostly consequence-free.

During these formative years, pretty much all of us learn about procrastination.  More specifically, we learn that procrastination feels great.  But then, perhaps a week later, we learn that procrastination actually feels awful. Our young brains learn a lesson about trade-offs.  Despair.com captures this with a delightfully cynical aphorism: “hard work often pays off after time, but laziness always pays off now.”

The fact that we laugh at this indicates something interesting.  Whereas we learn most childhood lessons and internalize them (e.g. don’t touch a hot stove), we don’t learn all of them this way.  Procrastination falls into this latter category.  We learn its perils, but we do it anyway, for various reasons.

As someone in the software industry, I suspect you can appreciate this.  Even if you diligently get out in front of all of your work, your organization may not follow suit.  So I’m sure you’ve seen your fair share of so-called “crunch time” over the years.  Crunch time occurs when you put a disproportionate amount of effort right before an important milestone.  Kinda like waiting until the night before the due date to write a 10 page essay on To Kill a Mockingbird.

Today, I’d like to talk about surviving these project crunches.  How can you navigate them to come out on the other end with your team’s morale intact?

For argument’s sake, I’ll draw a fine line.  Crunch time and the so-called “death march” can seem like the same thing, but I submit that they differ importantly.  Crunch time involves working hard in a spurt to succeed.  Death marches involve working hard indefinitely with a high probability of failing anyway.

The first step for pulling a team through a crunch is to ensure that you’re not instead dispatching them on a death march.  If your organization has the unfortunate habit of getting itself into death marches, you have serious problems on your hands that transcend the immediate future.  At an organization like this, I’d recommend looking for escape avenues and hinting to others that they might do the same.

If this sounds bad or like the height of disloyalty, I suggest a bit of perspective.  Your organization is about to ask you to burn yourself out on an indefinite timeline for something that will probably fail.  Unless you’re a masochist, what about that warrants your loyalty?

Okay, so we’ve established that you don’t work at the kind of organization that sentences people to death marches.  This means we’ve likely culled a significant percentage off of the bottom and find ourselves left with decent places to work.

With this in mind, I suggest that you start thinking of ways to thank the developers.  And I don’t mean sending out an email at the end of the effort thanking all of the little people.  I mean thanking them in a way that shows you really appreciate them.

My dad explained charitable giving to me when I was a child.  I asked him how to know the right amount to give.  He responded by saying something like, “you should give an amount that makes you kind of wince and think ‘ouch’ because it’s a lot.”  I recommend applying this advice to the team.  Forget the $40 Target gift cards, and do something much more significant.

Think of this as both a morale boost and a future incentive.  Needing to crunch means an ipso facto organizational mistake.  Pay your penance this time and then get it right next time.

Speaking of organizational penance, prepare yourself to show some humility and grace.  Normally I steer clear of the term “servant leader” because I encounter many more disingenuous uses of the term than appropriate ones.  All too often, managers toss this around as a way to affect humility without actually having any.

But, during crunch time, whether you have it or not, you should affect some.  And you should let your team feel its full effect.

You’re asking them to come in early and leave late, so come in earlier and leave later than they do.  Use that extra time in the morning to buy them breakfast and then to clean up the dinner you bought them before they left.  Generally spend your time making them comfortable, removing obstacles from their path, and helping them work effectively.

Nothing torpedoes morale faster than management giving a “we all need to burn the midnight oil” speech and then heading home at 5.  But even without acting in such brazen fashion, you can foster resentment.  Do your best to make it impossible to say, “must be nice to be them.”

Not all crunching happens equally.  For example, you can ask people to work 10 hour days for a couple of weeks without having an undue effect on their lives.  But if you ask them to work 18 hours per day for a solid month, things can get ugly.

People need a certain amount of rest and people need to see their families.  Slack time exists in schedules, and people can crunch, but if you start subjecting them to physical exhaustion and deteriorating home life, everyone loses.  As far as the company goes, excessive hours can actually diminish effectiveness.  This means that working people too hard produces diminishing and then negative returns.  You might actually miss the deadline more if you work them too much.  And, on the human side, you can create lasting health and personal consequences for the people in question.

Work something out with the people doing the crunch where you get extra mileage out of them, but where you don’t work them to death.  Monitor them for signs of burnout, and devise ways to give everyone a break here and there.

I’ll close out with perhaps the most philosophical piece of advice I have.  If you haven’t seen this video by RSA Animate, “The Surprising Truth about What Motivates Us,” give it a watch.  For knowledge workers, money starts to matter less than autonomy, mastery, and purpose.

Asking people to crunch certainly won’t appeal to their sense of autonomy, and it likely won’t help with mastery.  Thus it must contribute to their sense of purpose for them to feel good about it.  Do they have skin in the game?  Does a successful delivery benefit them in any way beyond whatever monetary reward you’ve cooked up?

Consider startup founders, for instance.  While they generally have heaping helpings of autonomy, they also have intense purpose.  They’ll work 80 or 100 hours for weeks at a time chasing their vision.  Staff software developers generally don’t have equity, so giving them purpose requires more creativity.  Nevertheless, figure out a way to get their broader buy-in so that they feel a sense of ownership and willingness to suck it up.

Unequivocally, your best solution is to stop needing to crunch.  But, short of that, you need to show people across the board that crunching for this cause is worth it.|||

Pulling a team through a project crunch is never fun, and since it often is a result of poor organization, its the leaders job to get them through it.