The Shift library project manages work schedules. A work schedule consists of one or more teams who rotate through a sequence of shift and off-shift periods of time. The Shift project allows breaks during shifts to be defined as well as non-working periods of time (e.g. holidays and scheduled maintenance periods) that are applicable to the entire work schedule.

The diagram below illustrates Business Management Systems' DNO (Day, Night, Off) work schedule with three teams and two 12-hour shifts with a 3-day rotation. This schedule is explained in http://community.bmscentral.com/learnss/ZC/3T/c3tr12-1.

A shift is defined with a name, description, starting time of day and duration. An off-shift period is associated with a shift. In the example above for Team1, there are two shifts followed by one off-shift period. Shifts can be overlapped (typically when a handoff of duties is important such as in the nursing profession). A rotation is a sequence of shifts and off-shift days. The DNO rotation is Day on, Night on and Night off. An instance of a shift has a starting date and time of day and has an associated shift definition.

A team is defined with a name and description. It has a rotation with a starting date. The starting date shift will have an instance with that date and a starting time of day as defined by the shift. The same rotation can be shared between more than one team, but with different starting times.

A work schedule is defined with a name and description. It has one or more teams. Zero or more non-working periods can be defined. A non-working period has a defined starting date and time of day and duration. For example, the New Year's Day holiday starting at midnight for 24 hours, or three consecutive days for preventive maintenance of manufacturing equipment starting at the end of the night shift.

After a work schedule is defined, the working time for all shifts can be computed for a defined time interval. For example, this duration of time is the maximum available productive time as an input to the calculation of the utilization of equipment in a metric known as the Overall Equipment Effectiveness (OEE).

The DNO schedule discussed above is defined as follows.

description This is a fast rotation plan that uses 3 teams and two 12-hr shifts to provide 24/7 coverage. Each team rotates through the following sequence every three days: 1 day shift, 1 night shift, and 1 day off. ; schedule ( , description); day schedule createShift( , , of( , , ), ofHours( )); night schedule createShift( , , of( , , ), ofHours( )); rotation (); rotation on( , day) on( , night) off( ); referenceDate of( , , ); schedule createTeam( , , rotation, referenceDate); schedule createTeam( , , rotation, referenceDate minusDays( )); schedule createTeam( , , rotation, referenceDate minusDays( ));

To obtain the working time over three days starting at 07:00, the following methods are called:

To obtain the shift instances for a date, the following method is called:

To print a work schedule, call the toString() method. For example:

To print shift instances between two dates, the following method is called:

For a second example, the 24/7 schedule below has two rotations for four teams in two shifts. It is used by manufacturing companies.

When printed out for a week of shift instances, the output is:

For a third example, the work schedule below with one 24 hour shift over an 18 day rotation for three platoons is used by Kern County California firefighters.

When printed out for a week of shift instances, the output is:

Shift depends upon Java 8+ due to use of the java time classes. The unit tests depend on JUnit (http://junit.org/junit4/) and Hamcrest (http://hamcrest.org/).

Shift, when built with Gradle, has the following structure:

When Shift is built with Maven, the javadoc and jar files are in the 'target' folder.|||

The Shift library project manages work schedules with teams and shift rotations.