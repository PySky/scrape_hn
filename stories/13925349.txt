Creating an app can be a scary endeavour to undertake, especially if you don’t fully understand the entire process and life cycle of software. This post is designed to answer the questions and concerns we have heard over the years.

This knowledge stems for years of experience working on different software and will forever be a work in progress. I will update this post as we learn more and update our internal process at Nano 3 Labs for creating new apps.

If you disagree, follow a different process or things are unclear, please leave a comment. Discussion leads to progress and it is the goal of this post to create a conversation around building new software products.

Further more, you will find the specific tools and techniques we use to build software at Nano 3 Labs. I included them here to show a cohesive process you can follow, not just theoretical principles.

Look at it as a recipe of how you can create an app. You can deviate from the recipe at times, but if it is your first time try to stick to it closely and adjust it to your flavour the second time.

We will use FitnessKPI, a fictitious fitness tracking app for resistance training as an example.

FitWorld owns and operates 10 gyms on the west coast of the United States. They contracted us to build an innovative new app to help trainers and their clients achieve their fitness goals. Since they believe in the old saying, what gets measured gets improved, they decide to call it FitnessKPI. Further more, FitnessKPI will be a subsidiary of Fitness World and the software will be white labelled and sold to other gyms who will pay a monthly fee for it.

We setup an appointment with Oliver Smith, CEO of FitWorld to visit one of the gym and talk about the vision for the app. We ask to talk to the trainers at the gym and their clients to learn about what issues they face and whether or not they have used any similar products in the past.

We leave things open ended and let them complain about all the things that are wrong with the way things are currently done. Write all of it down in an Evernote document and share it with the team.

We take another day to take a look at similar products. We download and try every fitness app we can get our hands on. We pay special attention to the apps mentioned during our conversations with at FitWorld.

We take note of what was done well and what they wasn’t, keeping detailed notes and share with the team.

On the third day, we come back to FitWorld and sit down with CEO, Oliver Smith and Alex Cambbell, Head Personal Trainer at FitWorld to sketch out what an early version might look like.

We start by writing out the design principles we will follow. They will guide us as we start mocking the UI and serve as tie-breakers when we need to evaluate design alternatives or trade-offs.

Now #7 brings a very interesting question to mind. How will users find us? What is our distribution channel? In other words, how do people find out about the app?

Since FitWorld has 10 location with over 2,000 members in each location we have the names and emails of 20,000 people we can advertise this new app to. FitWorld will use an email marketing campaign and in gym ad placements to promote the app. In addition Oliver knows the owners of other gym chain across North America who are interested in a white labelled version to promote their gyms.

We know our users are: Gym Owners, Personal Trainers and Clients. Since non of the principles defined above talks about helping personal trainers specifically we can safely ignore them for now. In the next version of the app we might target them more directly.

Now we are ready to start sketching some designs together. We chose to focus our limited time together figuring out how inputting information during a workout might look like.

Data entry is a tedious task and is the barrier to the adaption of most fitness apps. Therefore it makes the most sense to focus most of our efforts on getting that part right.

Our sketches look like this:

Notice that we started with a Mobile First Design and even attempted to use the Apple Watch as a way of inputting data. We know users will only have their phone with them at the gym and assume the workout would be created a head of time on a desktop or automatically generated based on muscle recovery.

After we chat between ourselves and agreed on what we think is right, we went downstairs to the gym and showed the sketches to a few clients to see what they think.

The feedback we got suggested things made sense to most people. They liked our sketches and showed us some of the apps they currently use. One person even showed us a paper print out he uses to track his workouts.

We can now proceed to the next step which is making a high fidelity sketch.

Next we open Sketch.app and start creating the different screens. Focusing on the user interaction and functionality rather than style. We use basic styles without obsessing too much about things like colors, fonts and spacing (we will leave that to the Visual Design phase).

We upload things to InVision using the InVision Craft Sync utility and link all the screens. We then test it on our phones to make sure things flow in a logical way and the user is never “trapped” on any screen with no ability to go back.

We share the prototype with the team and encourage them to leave comments right inside of InVision.

Finally we attend to the Visual Design of the app. We spend 1 day playing around with different looks and settle on the following:

We choose to do the visual design at this stage before showing it to the users again because an aesthetically pleasing design is perceived to be more user friendly.

From our experience, if we skip this step and show the users the unpolished mocks the feedback will be focused on the visual issues rather than usability issues.

Now it is time to come back to the gym with our phone and show the clients what we have been up to. We try to let them click through the prototype and see what they do. If they get confused we guide them through it. Certain interactions are impossible to test with InVision and will be tested in the next phase.

It is now time to build the first functional prototype and test if our design really does make it easy to log a workout.

Looking at the mocks and requirements it appears we can test our assumptions by building a web app. This means we don’t need to submit to the App Store or Android Play Store and there is no review process to worry about. It will also allow us to test design variants using Heroku Pipelines. As an added bonus, the app will work any device and we won’t need to build separate versions of it to target each platform.

Before we start building the prototype it would be good to clean up the mocks and create consistent margins/padding. Using Powers of 2 like 4, 8, 16, 32, 64, 128 and multiples of 2 like 6, 12, 20, 24, 48, 72 when we need sizes in between, works well when adding up sizes (this will ensure you don’t get odd spacing like left 3px and right 4px).

Remember we will be using InVision Inspect to take a look at the sizes, fonts and colors in the mock and try to match them as close as possible when building those screens. It is a tedious but important process (that will someday be automated) as we will be building upon it, so it is important to keep things tidy and organized.

We will leverage our existing knowledge in our default stack. However we will also spend a day to see if there are any other technologies out there that might be better suited for what we are trying to build.

Material UI — library with common User Interface components

React 

Redux

Redux-CRUD — makes talking to a Rails API easy

React-Redux-Starter-Kit — starting template for new projects

Ruby on Rails

Postgres DB

ActiveAdmin — admin interface to help with support tasks and modifying data by non-programmers

Heroku & Heroku Pipelines — hosting platform for our application and an easy way to create experimental designs

We use two starting templates, one is the default Rails application setup the other is https://github.com/davezuko/react-redux-starter-kit (we use our own custom fork, soon to be released :)).

We will create two repositories on Github:

We will also create 4 heroku applications

Next we will setup our project management tasks using ZenHub and create a task to scaffold the frontend.

Scaffolding means building a few screens and connecting them to get a feel for the organization of the project and start creating more surface area for other team members to attack.

We will then create an issue for each screen and use the live embed tag to add an image of the screen right in the issue.|||

Creating an app can be a scary endeavour to undertake, especially if you don’t fully understand the entire process and life cycle of software. This post is designed to answer the questions and…