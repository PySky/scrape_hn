Improve your shell by making it functional through Haskell! (An update to Awkward)

This program is an alternative to 'awk' or at least tries to be, and lets you perform 'awk' like operations through Haskell. So, if you know basic Haskell syntax, you are already set.

As an exercise, I wanted to update Awkward but in Haskell. A few minutes with Awkward and you would notice its drawbacks.

Since Awkward is a shell and that too a minimal at best, a lot of your customized shell's functionality is lost. Hence I decided to implemented FuncShell as an executable program and rely on pipes.

fsh follows the same philosophy as Awkward. Output of most bash commands can be expressed as [[String]] or [String] and one can use standard Haskell functions to modify this data representation.

Additionally, Haskell's pattern matching works really well with this representation. And its lambda functions along with partially applied operator functions ((+3) or (++" append") etc) make the syntax clean.

The command output is relayed to the executable through pipes. That output looks like this:

This is parsed, cleaned and converted to something like this:

The function you provide, let's say is applied over this data structure. The headers are handled appropriately.

You might need to install for this to work.

After installing, you can use this program through . I aliased it as ']', so my usages look like this.

The program expects the input to be received through pipes, always.

Next, it has a few flags. You can use to get help, and to choose your parser.

supports plugins, which means you can install external modules through (package manager, you can think of it as npm) and get them to work with

And finally, you are supposed to supply a haskell function. The function must take an input of type [[String]] and give an output of the same type.

To sum up, this is how this program is supposed to be used:

You can use the flag to choose your parser, depending on the kind of output you are expecting from the command. For example, gives a simple list, so the default parser is used and hence there is no need to specify anything. Whereas, the command outputs a table, hence you must specify the table parser through .

The parsers mentioned above are built-in. You can also download and install external parsers. To do that you'd need . Once installed, will install the csv parser.

To use it, do

Making plugins/external parsers is really easy and involves very little fuss. All you need to do is:

I use to import from your module and use it as a local function.

Here is the implementation of TableParser to give you an idea. I used this as a base to make the csv parser.|||

FuncShell - Improve your shell by making it functional through Haskell! (An update to Awkward)