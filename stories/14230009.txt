So Hi, hello. Last post I was talking about Advent of Code and how it can help you discover new things and ideas to learn about and also rabbit holes to go down. This post is about one of those rabbit holes! It’s a really deep one, too. I got nerdsniped on day 5 and I totally couldn’t let it go.

This post got kind of ridiculously long. I’m sorry. But this snipe definitely took me for a ride. I hope it’s interesting!

Day 5 this year asks us to calculate an 8 digit code based on the md5 digest of a user-specific input concatenated with the string representations of incrementing numbers.

You should go read the question here!

My door input was . With just two small lines, I can compute the MD5 hash for that basic input like this using Ruby’s built in library method:

Which gives me:

But the problem states that I need to to compute the md5’s for that input plus a number. To be clear, that’s the string representation of a number concatenated onto the end of the input, not the numerical value itself.

That might look like this, right?

That’s… really really different than the first hash!

Maybe I’d like to get a few more of these?

Look how different all those hashes are!

You may have noticed that my strategy here is to increment the number that I’m appending to my unique input. This seems like it might take a while to do manually, oh if only there were a way to automate it! Luckily computers

I increment that value on each loop, and append it to the static input by calling on it (again, this gives back the string of the number)! Easy peasy. This, as you would expect, fills my screen with hashes, all different, all unique, like snowflakes, or little babies!

From there, it’s a pretty straightforward exercise to collect the hashes I need to compute the password. I need the first 8 hashes in this series that begin with 5 zeros. I’ll just throw a test case in the loop and push them into an accumulator if they match:

That’s almost it, really! This loop goes forever… all I need is the first 8 matches, so I can terminate the loop once I have those:

running this will give me the output I need:

All that’s left is to concatenate the 6th characters in these hashes into the password. I can just do this with my eyes, of course, or I can write a little map to do it for me!

This returns , which is, in fact, my password.

This was the first puzzle of the year that could be considered at all computationally expensive.. Indeed, it is a feature, not a bug, for a cryptographic hashing function to be at least somewhat difficult to compute. Though md5’s are now mostly considered broken for cryptography, it’s still what they were designed to do. If it takes actual time to compute a hash, it’s that much harder to brute force guess a password if all you have is a hash.

But how long does this solution take, anyway?

That’s not terrible, that’s not even really bad, considering all the processing we’re doing. How much is that? How many hashes did we process? If I just add after the loop breaks out:

So, almost 8 million. That’s, a lot? I mean, not really, by computering standards, but it’s enough to kind of take a little while, I guess?

None of that is the point really, though, because it’s not that I needed to have faster or better code to solve the problem. 15 seconds is not that long to wait. But- what if I want it to go faster! What if I had to process 800 million hashes? Or 80 billion? Then we’d be bumping up against some more aggressive limits.

And that’s the rabbit. “What is a hashing algorithm, and how fast can I make it run.”

And here is where I followed it.

I wonder if I can write a faster implementation of the md5 hashing algorithm than the one that Ruby is using? I don’t know if I can, maybe? First I would have to be able to write any implementation of the md5 hashing algorithm. How would I do that?

To start with, I can read the wiki page, which contains some psuedocode, that’s helpful.

I can read the rosetta code page for this task, which contains working examples in many different languages, that is also helpful.

And I also have access to the original md5 specification which contains both the canonical explanation of the algorithm and a reference implementation.

So that’s a good start. This is enough information to allow me to write my own version.

Let’s say I want the md5 hash sum of my door key. It would look like this:

and it should return

The first thing I need to do is turn the ruby string into an array of bytes.

Which are the numerical values of the characters in my string. These are “bytes” in the sense that each value in the byte array is guaranteed to be no more than 255, even if the input is unicode, you’re going to get the bytes back in byte format. This unicode lambda is a single character when it is outputted to the screen,

but its machine representation is in fact two bytes long:

Externally to the interpreter, I have no way of really knowing how ruby is storing these values. They could be signed 64 bit ints for all I know! And even if they are being stored as bytes- they get autopromoted just fine.

:shrug:! Ruby has plenty of ways to work with bits and bytes, as you’ll see, but this is definitely not its strong point. This is usually a Good Thing- all these messy little details are left to the interpreter and I can just focus on expressing a problem and solution, or whatever. But when you’re trying to implement something to a spec and doing bit fiddly things… well…

The next step is to add some padding! All md5 input gets padded to add up to a multiple of 512 bits. If it’s already a multiple of 512, it gets padded one whole new chunk.

The padding always starts with a 1 and then contains a bunch of 0’s until the last NTH bytes, which are the length of the original input value’s length in bits in little endian format. Does this sound confusing? It kind of is! But let’s go through it ‘bit by bit’

First, we’ll grab the length after we split the input string into a byte array but before we do anything else to it.

this gives me

Which makes sense, because is 8 characters long and none of them are more than one byte long in unicode because they all used to be ascii!

But remember, I’m going to want the length in bits. Ok, I’ve already got 8 bytes, and there are 8 bits in a byte, so

I’ll just hold onto that for later.

Next, comes the padding. I’m doing everything with byte sized operations since I am simply building this as a little prototype for turning strings into md5 hashes… a real md5 implementation has to support streams of arbitrary numbers of bits, but assuming the smallest unit I’m going to deal with is a byte is ok for learning.

I know I need to append a single bit to the input and then start padding with zeros. I might be tempted to do this:

But don’t be fooled! This is a 1, yes, but it’s a whole byte at least on its own! This operation would give me this:

that might look right? But it’s not! Consider if I look at the binary values of all of these, padded to make them output as if they are indeed 8 bits long:

As you can see, if we think of each integer in the array as a full byte, that is indeed worth 8 bits by itself! What we really wanted is a single bit set to one followed by some number of other bits set to zero. We really want that last byte to read:

So this is interesting, right? We can’t just append a single bit to this byte array, because ruby doesn’t make that easy (there may be a way, but work with me!). Plus, as I said, we’re sort of just working with bytes here, right? So what needs to be appended to the array if not ?

so we want to append to the byte array to start the padding!

Now, I pad this array with ’s until it’s length in bytes is a multiple of 512 bits. (That’s 64 bytes!)

That gives me,

But ah! I missed something, right? I need to use the last 64 bits of this padding to fill in the length that I collected from the original message!

Now I need to get into the right format! This part was tricky to me, because I am not good at and in Ruby, which afaict is a thing that it inherited from perl and could probably do this. But oh well, this worked too!

I’ll take that original value I had grabbed earlier:

And I’ll turn it into a string of its hexadecimal representation!

This will ensure that every two characters represents one byte.

Now, I pad this string with zeros to fill out the rest of the space I need to fill on the remainder of the message space that I left for this! Remember, I left 64 bits, which is 8 bytes, which is 16 characters long in hexadecimal representation…

Right, so now I just need to split this up into its constituent hexadecimal byte character pairs! I can do this with , which will return an array of matches to a regular expression that are ordered by where they are in the string.

Now, we map over this array and replace each string with an actual numerical value that is not a string. Notice that parses the string and returns its actual integer value for that byte.

Hey guess what? that’s it. Actually wait not because it’s gotta be little endian again. Whatevs nbd.

Now that I’ve completed the padding operation, my message looks like this:

Each of these elements represents one byte, and the array itself is 64 bytes long, which is 512 bits. Keep in mind that this is a byte array, and because of the way we generated it, no number in the array will ever be more than 255, which is the maximum value of a byte. But to reiterate, I have neither insight nor control over how ruby is storing these values, so I have to be careful about maintaining it in that state!

I’ll just pull this into its own little helper function:

This is obviously the most efficient way you could ever perform this operation in any language. This hashing function is going to be ludicrous speed!

Oh yeah, one more detail to note! The spec says that in the event that the length of the input is more than the maximum number you can encode in the 64 bits of padding left over to hold the size, that you’ll just take the 64 least significant bits and discard the rest. This is like, really really long. 18446744073709551615 bits long, in fact, or 2305843009213693952 bytes. Which is 2 exbibytes, which are actual things I didn’t know existed until right now.

Anyway, just bitwise ing ( ) the length in bits against 18446744073709551615 will discard those higher order bits that we’re very likely to run into in the many applications this implementation will be used for.

…and now it’s time to actually process the hash. If you haven’t already, jump back to the wiki for the md5 algorithm and give it a once over. It’s not really that it’s complicated per se- all of the most complex operations are straightforwardly laid out for me there, but it is definitely really fiddly, and easy to mess up.

First, we initialize an accumulator with some predefined constants.

On first glance this looks like nothing, but if you squint you might notice that it’s actually these nibbles in this order:

Next we’re going to loop over the input message in chunks and adjust the accumulator values as we go on each pass in a predetermined way. We’re always going to end.

We do the outer loop one 512 byte chunk at a time. For this input, it’s only one chunk, but we might as well write it to accomodate more.

In this example, equals , but ruby’s three dotted range is exclusive, so this loop is really saying “do this one time, for of .

Within this loop, we perform some specific operations 64 times. So, an inner loop would look like:

In the outer loop, we’ll prepare a few variables to use in the inner loop.

First, we extract the chunk of the input message that we’re interested in by using the :

Again, in this case, it’s going to be the whole message.

Oh, we’ll also destructure the accumulator values into some temporary vars that we can manipulate in the inner loop.

Now, for each iteration of this inner loop, we’ll perform a few bit fiddles and then mutate the temporary variables. The operations are different depending on the position we’re at in the chunk

I don’t have much to say about why these operations are what they are or the cryptography behind them. Maybe I’ll read up on that sometime, but for now, this is just a play by play of an implementation of the existing spec.

The three lines at the end of the inner loop take the computed and values and doooo stuffff with them. Let’s unpack those lines!

This is a preperatory step. The only thing here we haven’t seen before is the array that we’re grabbing something out of. We can compute them like this:

We take that and ‘rotate’ it using a little helper function:

That looks like this:

Oh, and is another collection of constants.

They look like this!

Which can be generated a little less verbosely as:

Lastly, reassign the the temporary vars before starting the next loop:

After this chunk has been processed, we just add the values back into the accumulator:

The whole function looks like this now:

Ah, oh yeah, we gotta transform those values into a hexadecimal output string! This is a little tricky but not too bad. First, we need to shift each of these values over so that when we “or” ( ) all 4 32 bits together, we get a single 128 bit number.

First we’ll turn the accumulator into an enumerator:

then map over the tuple pairs of element and index to shift the bits:

then reduce the resulting elements by or-ring them all together:

Ok still going… turn the resulting number into a hexadecimal string:

then pad the string to make sure we have the right number of digits:

then split that string up into pairs of characters to isolate the bytes

then reverse the whole thing and join it together to get you…

Now that I have my custom built md5 hashing function, I bet I can use it to compute the answer to this question a lot faster.

I swapped the function out and tried it out with the same solution code from above.

Wow ok, that’s hella slow, but why? I thought I was using Ruby’s built in function, so shouldn’t my own version written in Ruby be comparable on the same task?

The answer to this is pretty simple. Ruby’s built in function isn’t written in Ruby at all, it’s a compiled C extension! The business end of the is all C, and it turns out it’s already really fast. It lives here in the source, and was first commited by Matz himself in 1998 as a migration commit from Subversion.

So it’s pretty obvious that writing my own md5 function in pure Ruby is never going to cut it. Regardless of how many (of the probably many) inefficiencies in the above code I find, stamp out, or reduce, I’m never going to come close to the pure C extension that ruby already has built in.

Here’s an aside about speed. Like many beginners, when I was first learning to code I absorbed a lot of information and chatter about programming in general and specific programming languages and how they related to each other. But at the time, I had no perspective on anything. People often said things like “Ruby is slow”. And I thought that meant “Ruby is like, actually really slow and useless.” It turns out, well yeah no shit Ruby is slow for really computationally intensive tasks like computing an MD5, it’s just not designed to excel for that type of application. It’s designed to be flexible, and expressive, and a joy to work in, and it’s plenty fast enough for almost anything you might want to use it for in a general context like that… but if you have a task like this that really is this computationally expensive, well of course it’s too slow, and blaming ruby for that just straight up isn’t fair, and totally misses the point.

This goes for Python too! Or other dynamic languages! Python might be faster than Ruby for some things, and vice versa, but they are essentially in the same class, and designed with similar goals in mind. We can nitpick the differences of course, but when you’re talking about apples to oranges, yeah they’re different but they’re a lot more similar to each other than say, apples to rocketships, you know what I mean?

The most logical thing to do when you find an application that a dynamic language is ill suited to because of speed constraints is simply to not use that language. So with that in mind, let’s port that solution to C!

It’s going to basically have the same shape, let’s start with this:

Just like in the ruby version, we’re passing in a “string”. C strings are already basically represented as contiguous bytes in memory, so we don’t need to convert them or anything like that!

We do have to pad the input though, here’s what I ended up with:

This function is basically doing the same thing as the ruby version! I grab the original length of the input in bytes and bits…

Then I compute what the final padded length of the message will be by adding 4 (4 bytes for the initial bit followed by zeros…) and then counting how many bytes it will take to have a multiple of 64 bytes.

Next I an output buffer with this computed size and copy the original input into it:

Finally, we’ll actually pad the output, with the initial byte ( ), a bunch of zeros, followed by the original size in bits and a few more zeros.

That TODO is there because as it stands, I’m only saving one byte worth of length- the input could only be up to 256 bits (32 bytes) long. This is just laziness on my part since my input will never be longer than that for this problem space, but it should be a little endian 64 bit (unsigned long) value (that conversion from an to a little endian long is the ‘proper bit shifting’ I’m referring to).

You might have noticed the return value of this padding function is something called a which is not yet a real thing! I’ll make a simple little struct that will hold a pointer to the beginning of the padded message I just constructed, and the size of the whole thing. I can’t use on the padded message because it contains all those padded zeros, which would be incorrectly interpreted as terminating null bytes).

So anyway, I malloc space for that and fill the space with both the pointer to the beginning of the and also the I computed earlier.

And I’ve got my thing I need to operate on!

From there, the code is essentially identical to the ruby version, with obvious differences for C syntax and types, etc:

A couple of things to point out! There’s actually a lot less fuckery going on with this version, since C is ideal for operating on arrays of bytes in a way ruby is most definitely not. Gone is that convoluted string cast to facilitate turning a hex representation into a little endian version- instead I simply use a little macro I defined called to shuffle those bytes around directly:

Oh and also I have that old friend defined as well:

Oh and instead of being clever with computing both and , I think it’s much preferable to define them explicitly as constant arrays. This will simply be loaded into memory and accessed directly, and defining them as constant arrays I suspect will make compile time optimizations easier.

Now! I can port my original solution to the problem to C and see waht kinds of /l33t p3rf gAiNs/ I’ve earned myself.

Seems familiar! This looks fine. How long does it take?

That’s a LOT better than the pure ruby version, of course! And it’s in the same ballpark as the original ruby solution I started with that uses the built in hash function, which makes sense, since they are both in C. I am not at all surprised that the library function is slightly faster than my half assed version, even despite the ruby interpreter’s overhead, whatever that is.

I could probably work harder on my C version and shave off some of those extra seconds, I could probably even beat the built in Ruby version if I found enough tricks and traps to optimize it… but I’ve got a better idea.

Strap in things are about to get really fast

Ok so a disclaimer before I really get into this part:

I mean, that’s not entirely true of course, I am happy to report that after a lot of research and trial and error I was able to make this thing work the way I hoped I would be able to.

But I will refrain from explaining everything in minute detail in this section because I don’t have enough experience with OpenCL to feel completely comfortable doing that. And to be honest, I’m really tired and I really want to post this, and this post is already super long, and I might just write more detailed info about OpenCL after I learn more about it. I’ll cover the broad strokes about what I learned though!

So, OpenCL is a framework for writing general purpose code that can be run on your GPU. The GPU (graphics processing unit) is completely separate physically from the CPU (central processing unit) in your computer.

The GPU is highly optimized for doing many many small tasks in parallel. As its name suggests, it it mostly used for graphics processing, which is a perfect use case for highly paralellized computations.

It’s often compared to its closed source sibling CUDA, which is nvidia’s proprietary framework that does basically the same thing. Linux MDFL Linus Torvalds is a big fan.

I started by using this as a template. It’s a LOT of boilerplate to get the environment set up! I am going to refrain from explaining that in detail for a couple of reasons. I don’t really understand it well enough yet to provide a helpful perspective, it’s a little bit not necessary to understand the broad strokes, and also that book does an excellent job of going through line by line.

I have to write two different programs here- one to run on the host side and another that runs on the device side. The device side code is basically c99, but is subject to a set of restrictions that follow from the limitations of the hardware and how the program actually runs on it.

Let’s look at the kernel function from the hello world example above:

Notice a few things! This function returns nothing ( ). It actually doesn’t make any sense for a kernel function to return anything at all- where would that return value go? Instead, we pass in a pointer to a shared memory object (in this case ) which can be manipulated from within the device code and accessed after that task has been run from the host’s code.

Let’s follow that backwards! Where does that pointer get ‘passed in’?

The relevant line in the host code are here on line 66:

A few things! The return value of this function is an integer that is 0 on success and an error code on error. It’s being assigned to to capture that in case it isn’t successful. What are these arguments? The docs can tell us!

So where is coming from? Line 54!

I won’t enumerate these args, but basically this function creates a memory buffer suitable for copying into the device code. More in the docs!

When the kernel is actually executed in line 70:

the kernel code from above is run and the memory object that was “passed in” is manipulated on the device side.

Getting that memory back out of the device is just as convoluted.

The memory object was read into which is now just in the host side memory space, and lo it is done:

So let’s think for a second about the original problem space. I want to compute a bunch of md5 hashes and then save a few that fulfill a criteria (in this case having those five leading s)

The only relation these input strings have to each other is that I want to find a way to compute each one only once. None of the actual computations inside of an individual kernel depend at all on any of the others. This is a perfect task to parallelize! Everything is awesome!

Not only that, but the code I want to write for the md5 function needs to be in C! I’ve basically already written it! All I need to do is make a kernel function that computes an md5, find a way to distribute the work effectively over the gpu cores, and I should have that leet perf gain I wanted since the very beginning of this nerd snipe! Let’s get crackin.

So yeah, I’ve basically already written this, but to get it running on the GPU I’ll have to make some small changes!

First, I need both and completely as is:

Next, I’ll show the signature of the function!

I’m just going to pass in the and arrays as globally accessibly memory. They don’t need to be written to, and all the cores can share them.

On the host side, we can pass these in:

Both and are defined elsewhere in the file in the same way they were before as constant arrays of values.

I’m going to eschew the struct thing and just inline all the padding and such.

It’s essentially the same as the vanilla C version, but I have to allocate memory blocks statically with array notation instead of char pointers. And I don’t have library functions like and , so I just do those things manually. The real magic happens here though!

There is my input key. And then I use to get a unique id number for that work item, turn that number into a string with that first while loop, and then concatenate it onto the end of my original input key.

Now, I can run this code in complete parallel over as many cores on the GPU as I want, and each process will be running a differently numbered key!

Back in the host code, when I execute the kernel this time, I’ll use clEnqueueNDRangeKernel, which allows the code to be run across many cores in parallel!

That first array stands for ‘global work size’, and I’m telling it that I want one dimension of global work ids that go up to 8 million. This means that calling in the kernel functions will be numbered individually from 0 to 8 million!

That’s the magic sauce. The rest of the md5 implementation is basically the same as before.

For now, I’m going to put the test to see if it’s a keeper hash in the kernel code. If it matches, I’ll just format and print out the complete hash:

If I compile and run this, Here’s the output:

Oh snap, does this look familiar?

Wait what? did it work? DID IT WORK? But… how long does it take??

Oh shit. I just computed 8 million md5 hashes in 1.8 seconds. And I am almost sure that this is not terribly awesome OpenCL code and could probably be attuned to go even faster than that. But 1.8 seconds is about 8 times faster than my original solution would run, so I am pretty happy with that.

So, this was a major rabbit hole, but I learned a hell of a lot! I learned a lot more about OpenCL than I was able to explain here or feel comfortable explaining just now, but I might have more on that in the future. It’s really cool stuff!

A very cool thing / huge pain in the ass about Advent of Code is that if you let it, almost every day can lead you down a rabbit hole like this! I just decided to follow this one, but I traded doing the rest of the problems after about day 9 for it. Now I have to go back and do those!

This was a really long post. I hope it was interesting. I’m glad it’s done. Have a Happy New Year!

Oh one more thing, here is the source code for this, basically. No warranty. It’s really messy right now and I should really have cleaned it up but #yolo and I want to go to bed. Also if you read this far I hope the explanations above have been sufficient to explain the context.|||

