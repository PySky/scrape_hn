When using Node.js, you should never mix promises and callbacks. It’s a recipe for confusion. The problem is pretty obvious in hindsight, but it sure threw me for a loop the first time I ran into it.



I’ve created an example Mocha test case that demonstrates the problem. In it, I’m using Knex to fetch a user from a database. Knex queries return Bluebird promises by default, which I use to complete a callback that I’ve passed in. Basically, this is what you want to avoid:

Looks innocuous enough, right? When this happened to me, so many things went wrong at once, and then erased their tracks, that it took me a while to figure out what broke. Here’s an abridged version of my learning experience :)

When I run the above test, I get:

Seems OK, right?

 Now let’s make sure our test fails. We’ll change the expectation to:

Now, when I run this test, I get:

Oh. This can’t be good.

 Let’s change the expectation to something nonsensical:

Now, we get:

OK, now we’re getting somewhere. There are two weird things going on:

 1) It’s saying user is null, so why didn’t fail?

 2) Why did it time out? The test should have failed immediately when the exception occurred.

#2 is the critical hint. Something must be catching that exception–d’oh!

Let’s try the case again, but this time, we’ll add a couple of extra console.logs.

One above the expect:

and one in the :

Now, we get:

We can see what’s happening: Our callback is getting called twice!

It’s first getting called in the normal expected path as , but rather than passing in as I was expecting, , is giving me an . This is causing our to fail and raise an exception.

But! That exception is caught in my block, which then calls the callback again, but this time with , which causes the to pass. Then we call , and the the test passes.

The moral of the story is, don’t call callbacks from inside promises. They will swallow your exceptions unexpectedly.

The solution in my case was to use the method to escape from the promise land:

This also a nice example of why you should always make sure your tests fail as expected. This latest bug is one of many that I’ve discovered by trying to make a test fail, and finding that it unexpectedly passes. If I hadn’t made sure my test failed, I would not have noticed this until much much later.

Also, watch out for Sinon’s . The method uses timers to escape the promises, and makes timer code synchronous, which causes all of our exceptions to get swallowed again!|||

The moral of the story is, don’t call callbacks from inside promises in NodeJS. They will swallow your exceptions unexpectedly.