Ignite.NET offers a LINQ provider which translates C# expressions to SQL queries. LINQ has many benefits over SQL, but at what cost?

Detailed explanation of Ignite.NET distributed queries can be found in Getting Started With Apache Ignite.NET Part 3: Cache Queries. If you are new to Ignite, please read that first.

Let’s get straight to the results!

This is a comparison of equivalent queries via SQL, LINQ and Compiled LINQ. Query is very simple ( ), data set is very small (40 items, 20 returned): this exposes LINQ overhead better.

We can see right away that LINQ is a lot slower than raw SQL, but compiled LINQ is a bit faster. Note that results are in microseconds: real-world queries may take tens or even hundreds of milliseconds, so LINQ overhead will be hardly noticeable.

Anyway, how can we explain these results? Why compiled LINQ is faster than raw SQL?

If we run the above code in Visual Studio debugger and look at variable, we’ll see something like this:

Compiler has translated to an Expression Tree and passed it to , which, as we can see, turns into a regular Ignite.NET . Expression tree processing is not free, that’s where the overhead comes from.

We can get that and run it manually:

However, LINQ produces typed instead of untyped . How is this achieved? You may think that LINQ engine iterates over returned from and populates , but it is more clever than that.

There is a hidden API, , which has method. SQL engine returns query results as a raw memory stream where field values are written one after another. So for a query above with one field LINQ engine will produce the following code:

This code produces zero extra allocations and zero type casts while reading query results. That is where LINQ advantage comes from: it is aware of resulting data types and can generate specialized deserialization code, while regular SQL query reads all field values as objects, which causes excessive allocations ( for each row, boxing of value types) and requires type casting.

LINQ is not only much nicer to work with than SQL, it can also be on par or faster when used properly! Just don’t forget to use when on a hot path.|||

Ignite.NET offers a LINQ provider which translates C# expressions to SQL queries. LINQ has many benefits over SQL, but at what cost?