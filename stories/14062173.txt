I’ve been enjoying using the Vive to experiment with social VR experiences.  However, the Vive is not yet very accessible, nor is it portable, so I’ve been more and more interested in the possibilities of WebVR.  I am new to building WebVR apps and am not very familiar with three.js and WebGL scripting.  However, a little over a year ago, Mozilla released an easy-to-use framework for building WebVR apps called A-Frame.  A-Frame is an HTML-based markup language (with three.js under-the-hood) that lets you create WebVR apps quickly.  These apps come ready for stereo viewing in VR headsets, and with WASD/arrow movement and camera panning/rotation support, and they even include a built-in inspector for the components.  That means that all you need to do is write some HTML to place, scale and rotate the components of your scene, and you’re good to go.  To add interactivity, you can include regular Javascript and refer to the components.

A-Frame has gained some popularity lately, and third-party developers have made libraries to make adding new VR features (and even AR!) easily to A-Frame apps.  In the span of a few days, I’ve been able to create and play with regular VR scenes, networked/social VR apps, and even some AR apps.  Hopefully, this will let me experiment more quickly with ideas for our Virtual Office and Virtual Art Studio projects.  In this post, I will briefly introduce how to create your own A-Frame apps, and then I will link to some of the recent apps I’ve made if you’d like to explore them yourself!

Line 4 includes the A-Frame library. The A-Frame code is on lines 7-17.  A-Frame scenes are delineated with <a-scene> tags, and populated with primitive geometric entities such as <a-box>, <a-sphere>, <a-cylinder> etc.  The <a-sky> entity will convert equirectangular images into a skybox in the scene.

The generated WebVR app looks like this:

A-Frame also has a built-in inspector, similar to the browser’s console, that lets you inspect the details of your A-Frame scene.

You will see some menus pop up around your scene that let you explore and even directly manipulate the components:

The inspector is a great way to reconfigure and place your scene manually, showing you the corresponding numerical values on the right that you can then plug into your code.

To learn more about the component and features in A-Frame, I would recommend checking out the following links:

To take A-Frame even further:

Below are some A-Frame WebVR and AR projects I have created recently, including a networked Elevr office, and the beginnings of a recreation of my studio from Banff.

The Elevr office, for multi-user use!  Try inviting a friend to visit the same URL, or load the URL on two different devices.

My Banff studio in WebVR, with some of the artworks I made there in 3D.

An AR app that makes a digital sculpture appear in a camera view using codified markers. (iOS not supported)|||

