So far this year, I have been exploring many of the lesser-known HTML5 tags that are becoming more prevalent and also more useful as more information about them is released. Recently, the Chromium team has released an advisory suggesting that our good friends , , and should no longer be used as they are app-modal, synchronous, and therefore they are not ideal to either the browser, developer, or user experience. Instead, the push is for developers to use the Web Notifications API for notifying users (a la ) and the tag for retrieving feedback from the user (a la and ). Since many of you are probably asking yourselves WTF the tag is, I'm going to spend some time exploring it.

First, a litle background on the tag. At the time of this writing, global support for has just crossed 56%, which means that most of the modern browsers are still not supporting it fully. That being said, it is part of the spec for HTML5, and support for it will continue to grow.

However, the idea behind the dialog tag is to provide a temporal, transient dialog with which to inform the user of some event or occurrence, and thereby replace what would normally be app-modal or even page-modal level application dialogs. Put another way (which usually means I didn't put it well the first time), dialogs are style-able transient DOM elements which are designed for notification purposes, within the context of a web document. This is separate from the Notification API, which makes external notifications about events within a web application.

So, a element is just another DOM element, however it is not shown by default. The default CSS for the element renders it as follows:

There are specific DOM methods attached to a element which allow you to trigger the browser's default behaviour. These methods are and , which as you can expect will show the dialog as a page modal or close it, accordingly. If you want to force a dialog to be open on page load, add the attribute to the opening tag, and it will be displayed by default.

In order to be able to trigger these methods, you will need to get a reference to the dialog first. Given the following code:

I would be able to fetch a reference to it with either of the following two lines of code:

I will leave it to the fanboys and SJSW's of the internet to debate over the relative merits of which approach to take to get a reference to the element. Once you have the reference, then you can simply call the and methods on them as you need:

Running the method on the will add the attribute to the element automatically.

Please, save yourself the heartache, and just don't do it. If you manually remove the open attribute, the dialog does go away, but you have now broken the state of the element and can no longer run or on it, and it will no longer receive any close events, ever again. (This is important later)

As elements are just normal block elements, you can put anything inside of them you want. Content, images, and yes, even forms. However, there are a few quirks I have found with forms in dialogs that you probably want to be aware of.

To begin with, there is a new attribute value that a tag will accept, when being used with a . That value is just , but it serves a dual purpose. First, when you have a form with set on it, submitting the form both triggers the submit event on the form but also closes the dialog.

Second, even if you have an attribute defined on the form representing the endpoint to which the form should submit, it will not trigger a network event. Once you have on the tag, you are wholly responsible for submitting the value(s) of that form programmatically. Fortunately, you do get the event being triggered on the form which you can add an event listener to, in order to process the form manually. I suspect this is a case where you would be submitting the form data via sockets, fetch, or AJAX.

One interesting note about forms and dialogs is that when you submit a form, whatever the value of the form's submit control is will be set on the dialog object as the property . Consider the following code:

When the above dialog is opened, a user will (likely, but not definitely) enter a number into the box, and click the button that says 'I am old'. Once the form submit has occurred, and the dialog has closed, then the following code behaves as described:

Notably, the property has nothing to do with the form inputs themselves, and everything to do only with the value on the submit button.

There are only two events which you can bind to that are unique to elements. One is the event, which occurs when the key is pressed, or the user-agent cancels the dialog.

The second event is the event, which is an event shared by several objects in the browser world (WebSockets, for instance), but the event for a dialog is fired when the dialog is closed, whether by the dialog being cancelled (see above), or by the method being invoked on the dialog object itself. Remember earlier, when I talked about manually removing the attribute? Here's where it matters. If you manually remove the attribute, you lose the ability to have a callback get triggered on the event.

There is no event that is fired when a dialog is opened (through ), though I think there should be. I have experimented with things like and and neither were fired. Checking the spec confirmed my suspicion that nothing in queues a task to fire an event.

The last aspect of the element which I want to share is the pseudo-element which is created when the dialog is triggered. As the dialog is a modal element, there is an overlay that is automatically built by the browser as a pseudo-element to dim out content that is inaccessible while the dialog is open.

This pseudo-element can be referenced in CSS using the pseudo-class and starts out styled thusly:

Of course, you are able to write your own styles which will give this whatever hue or appearance you want. There are probably a lot of usability lessons which can be applied here regarding what is the "right" level of alpha to use for dimming the background content.

So far, only works reliably in Chrome at the time of this writing, and you can flip a flag in Firefox to enable it if you wanted to play with it there and compare user-agent behaviour. Whether we choose to adhere to the Chromium team's admonition that should go away, at least now we know what the heck the element is.

If you have any comments or questions about this post, please feel free to shoot me an e-mail at don (at) donburks (dot) com. I would love to hear from you and continue the conversation.|||

A blog for building better coding practices, with a focus on JavaScript