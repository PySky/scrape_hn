TL;DR The introduction of Web Components have given developers super powers. With Web Components, web designers and developers are no longer limited to the existing HTML tags that existing browser vendors provide. Developers now have the ability to create new custom HTML tags, enhance existing HTML tags or extend components that developers around the world have created. In this article, I'll show you how to use and create custom web components for your apps.

Web components allow for reusability and the ability to associate JS behaviour with your markup. Developers can search for existing components created by other developers on the web components registry. In the absence of suitable existing custom elements, developers can create theirs and make it available for others by publishing it to the registry.

Web components are a set of web platform APIs that allow you to create new custom, reusable, encapsulated HTML tags to use in web pages and web apps. They are reusable widgets that are built on the Web Component standards. Web Components work across modern browsers and can be used with any JavaScript library or framework that utilizes HTML.

There are some sets of rules and specifications that you need to follow to develop web components. These specifications are classified into four categories:

We'll talk about these specifications in the latter part of this post. But let's quickly learn how to use web components.

The first step is to browse the element registry. Check for the components that you are interested in, then go through the README to know how to import it and use in your web applications.

The web component registry has two main sections:

An example web component you can install is juicy-ace-editor. You can install it by following these processes:

Make sure you have bower installed, else run:

Now install the component like so:

Create an file and import the component like this:

and place the component on the page like this:

This is an example of the component in the file.

In the code above, we referenced a script:

The file is the Web components' polyfill for browsers that don't support web components yet.

When you check out your browser, this is how your page will look like:

Follow the documentation here to install and run it in your web browser.

It is that simple. Now we have a code editor in our browser by just importing a Web Component. Whoop! Whoop!

Now, let's go through the Web Components specifications in order to know how to create a custom component, starting from .

This is a web component specification that defines how to craft and use new types of DOM elements. There are some ground rules on how to name and define your custom elements. They are:

A custom element can be created using the browser API method and a class that extends in JavaScript like so:

Another option is to use an anonymous class like so:

With this already defined, you can now use the custom element in a web page like so:

You can define properties on a customElement. For instance, let's add an attribute called to our element. This can be achieved like so:

Once you have done this, you can now use the custom element in your browser like this:

Note: You can also define a constructor in the class, but you have to call the method just before adding any other piece of code.

There are lifecycle hooks that custom elements can define during their existence. These hooks are:

You can reference the custom element specification for a lot more information.

This is a powerful API to combine with custom elements. It provides encapsulation by hiding DOM subtrees under shadow roots. You can use Shadow DOM in a custom element like so:

So when you call in the browser, it will be rendered like so:

The main idea behind Shadow DOM is to mask all of the markup behind a custom element in the shadows. If you inspect the element in the browser, you won't see any of the markup apart from the attributes of the element. They are hidden under shadow roots. Browser vendors have been using Shadow DOM for years to natively implement elements such as , , and many others. Another benefit is that all the styling and scripts inside the custom element won't accidentally leak out and affect anything else on the page.

You can reference the shadow DOM specification for a lot more information.

HTML Imports are a way to include and reuse HTML documents in other HTML documents. The keyword is assigned to the attribute of the element like so:

You can reference the HTML Imports for a lot more information.

This is a web component specification that defines how to declare pieces of markup at page load.

The tag is placed within the web component. You can write HTML and CSS code within this tag to define how you want the component to be presented in the browser.

You can reference the HTML Template specification for a very detailed information on templating.

We'll build a web component that will allow users embed vimeo videos into their apps easily. Let's get started.

Create a new HTML file, . Define the HTML Template markup like so:

We have also added CSS style to the tag to define the styling of the component.

The next step is to actually create the custom element. Now add a tag just after the tag and create it like so:

We have the , and method. In the constructor, we called the method to have access to the methods and properties of .

The method is a lifecycle hook that our custom element provides. So, we have deferred the work of setting up the shadow root, getting the value of the embed attribute and also calling the in this hook. As I mentioned earlier, this method is called whenever the custom element is inserted into the DOM.

In the method, we simply added a eventlistener and used JavaScript to create an iframe and set the required attributes.

Finally we called to attach the class to custom tag.

Create an file. Go ahead and import the file in it like so:

Oh, you can see the polyfill referenced in the script tag. How did we get that?

Install it via bower like this:

From your terminal, run a local server, e.g http-server to serve up the web page.

Your web page should display the component like so:

Once you click the play button, the video should autoplay:

Inspect the page with Chrome DevTools, check out the tag:

Check out the Shadow DOM below:

Now that we have a fully functional vimeo embed web component, let's package it and submit to the registry.

There is a list of requirements to adhere to before submitting your component to the registry. Follow the instructions below:

Now, your component should be visible in the registry.

Google Chrome is leading the pack of browsers with stable support for Web Components in their web and mobile browsers. Take a look at the browser support matrix below:

To be safe, it is recommended to use webcomponentsjs, to provide support for many browsers.

We used during the course of building our own custom element. webcomponentsjs is a suite of polyfills supporting the Web Components. These polyfills are intended to work in the latest version of browsers.

Note: Web Components capabilities are disabled by default in Firefox. To enable them, go to the page and dismiss any warning that appears. Then search for the preference called dom.webcomponents.enabled, and set it to true.

There are libraries available that make it easier to build web components. Some of these libaries are:

All the libraries highlighted here offer tools to cut down boilerplate code and make creating new components easier. Polymer and Bosonic also offer a library of ready made Web Components, but Polymer remains the most widely used amongst developers. Check out this awesome tutorial on building apps with Polymer and Web components.

You can use Auth0 Lock for authentication in your web apps. With Lock, showing a login screen is as simple as including the auth0-lock library and then calling it in your app like so:

Note: If you want to use Auth0 authentication to authorize API requests, note that you'll need to use a different flow depending on your use case. Auth0 should only be used on the client-side. Access tokens should be used to authorize APIs. You can read more about making API calls with Auth0 here.

You can also use the custom auth0-lock polymer web component for login like so:

Web components have a lot more benefits than meets the eye. Web Components allow for less code, modular code and more reuse in our apps.

In my opinion, the major selling point of Web components is reusability and simplicity of use. The more high quality components developers submit to the registry, the more a plethora of better tools will be available to the community for building better and beautiful web apps in less time!

Have you been using Web Components for a while? Do you think Web Components are the future for web app development? Are they just another hipster technology? I'll like to know your thoughts in the comment section.|||

Learn how to make web components and leverage them in your applications today.