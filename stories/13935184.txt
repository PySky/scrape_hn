If you’ve kept your JavaScript skills up to date, you’ve probably come across ES6 Promises before. Promises provide a clean, flexible way to chain multiple async operations together without having to nest function calls inside callbacks (which might lead to callback hell). Promises can be powerful but if you don’t follow proper error-handling practices, then your code can become very difficult to debug.

If you’ve worked on a large project that made extensive use of promises, you may have encountered some difficulties with debugging — This is because, without careful error-handling, Error objects that are thrown inside promises won’t tell you anything about the sequence of actions which led up to the error; all they’ll tell you is the file and line number where the error was actually thrown. To illustrate the problem; imagine that you have many front-end components that share the same service to load data from a server; if a HTTP request fails, you might know what the error was and where it was thrown (the HTTP service) but you won’t know which higher-level component actually caused the issue—A common case might be that one of your components passed invalid arguments to the service. This can be a major pain if you’re dealing with long promise chains that stretch across multiple files.

I did a fair bit of searching online and I couldn’t find any specific advice on how to deal with this problem so I decided to investigate a bit more. The standard way to handle errors from promises is to add a handler at the end of your promise chain like this:

A useful thing about catch handlers is that you can chain them:

Being able to chain multiple handlers like this is particularly useful if you have a sub-module which returns a long promise chain which spills out into one or more other higher-level modules; this means that you can add a single at the end of each sub-chain (in each file) which simply re-throws errors into the current file’s scope.

Catching and re-throwing errors in this way will tell you which higher-level module lead to the error; that means that you can later dig in and debug the issue on a layer-by-layer basis (top-down approach).|||

If you’ve kept your JavaScript skills up to date, you’ve probably come across ES6 Promises before. Promises provide a clean, flexible way to chain multiple async operations together without having to…