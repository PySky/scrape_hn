You can of course pass a blob path or base64 data.

All crop values are in percentages, and are relative to the image. All crop params are optional.

If you want a fixed aspect you only need to specify a width or a height:

..Or you can omit both and only specify the aspect.

Please note that the values will be adjusted if the cropping area is outside of the image boundaries.

A minimum crop width, as a percentage of the image width.

A minimum crop height, as a percentage of the image height.

A maximum crop width, as a percentage of the image width.

A maximum crop height, as a percentage of the image height.

If true is passed then selection can't be disabled if the user clicks outside the selection area.

If true then the user cannot modify or draw a new crop. A class of is also added to the container for user styling.

A callback which happens for every change of the crop (i.e. many times as you are dragging/resizing). Passes the current crop state object, as well as a pixel-converted crop for your convenience. This callback is not called on the load even if the crop was adjusted.

Note that when setting state in a callback you must also ensure that you set the new crop state, otherwise your component will re-render with whatever crop state was initially set.

A callback which happens after a resize, drag, or nudge. Passes the current crop state object, as well as a pixel-converted crop for your convenience.

Note that when setting state in a callback you must also ensure that you set the new crop state, otherwise your component will re-render with whatever crop state was initially set.

A callback which happens when the image is loaded. Passes the current crop state object and the image DOM element, as well as a pixel-converted crop for your convenience. If the crop was adjusted during the load, this callback gives you the adjusted crop.

Note that when setting state in a callback you must also ensure that you set the new crop state, otherwise your component will re-render with whatever crop state was initially set.

A callback which happens when the new aspect ratio is passed to the component. Passes the current crop state object, as well as a pixel-converted crop for your convenience.

Note that when setting state in a callback you must also ensure that you set the new crop state, otherwise your component will re-render with whatever crop state was initially set.

A callback which happens when a user starts dragging or resizing. It is convenient to manipulate elements outside this component.

A callback which happens when a user releases the cursor or touch after dragging or resizing.

Allows setting the crossorigin attribute used for the img tags.

I wanted to keep this component focused so I didn't provide this. Normally a cropped image will be rendered and cached by a backend. However here are some tips for client-side crop previews:

To develop run , this will recompile your JS and SCSS on changes.

You can test your changes by opening in a browser (you don't need to be running a server).

When you are happy with your changes you can build to dist with .|||

react-image-crop - A responsive image cropping tool for React