The golden rule of security, stability, and resiliency of virtually anything is “don’t put all your eggs into one basket”. This generally applies to the DNS, and there are some recommendations to avoid having all your nameservers in one domain. I would like to show that in this case, this is not a silver bullet, it depends on many conditions, and using different domains in your nameserver set might even make things not better, but worse.

Let me say at first that there might be other reasons to spread domains used in the nameserver sets, so there is no hard good or bad in this area, but always balancing the risks.

and there might be a very good reasons for that, but we are going to look at this purely from the DNS Resolver point of view, and the work that has to be done to resolve a simple domain name hosted on such service. I am going to use a (fake) domain example.udp53.cz to demonstrate that such setup might lead to more DNS queries and increased latency.

Imagine a DNS Resolver with empty cache. A DNS client asks such resolver for AAAA record for example.udp53.cz.

A very simple question, it seems? So, what would be the chain of queries the DNS Resolver must make to resolve the name? I have deliberately stripped most output in the examples to make this post shorter. I am also ignoring DNSSEC for now, because that would make this post even more complicated that already is.

1. Every DNS Resolver is primed with addresses of root nameservers (well, at least one is needed), so that will be used:

2. Good, there are GLUE records in the ADDITIONAL SECTION we can use, so the next step would be to ask one of the  nameservers:

3. And now the DNS Resolver might pick either of the two nameservers. Let’s pick the worse of the two for the latency: and we are back at the root zone:

4. Um, wait — an  zone? What is this madness? We can use these specific GLUE records, but there are cases where the GLUE could not be trusted, so I am going to pretend we need to resolve them here (for example if the DNS resolver is very strict and believes only in-domain GLUEs):

5. We still don’t have a name for name:

7. And next — Finally we have IP address for !

8. And we can return back to resolving DNS chain:

9. Well, guess what — The DNS Resolver can pick one of the two nameservers here, but let’s go easy this time and follow because we have received GLUE records for the name together with delegation nameservers, so we can finally ask for :

10. Lovely! We have just processed 9 DNS queries and responses to be redirected back at  level. I am going to just list the queries to get to the final nameservers. Notice that we would be doomed on IPv6-only network, as nameservers for are Legacy IP only.

11. So, are we done yet? Not even close — as you can see, there’s another restart in the resolving, and now we can pick from four TLD variants: 1) , 2) , 3) , and . Let’s pick  just to make life with the DNS more fun. How many queries do we need?

12. Finally, here comes the final query we have been waiting for. Or not?

13. In the worst case, the DNS Resolver would pick something not in the cache → and we are right back in the vicious cycle:

14. And this is the final step:

Now we have a proof that the can’t be reached over IPv6, but we don’t want to end in a bad mood, so let’s query for IPv4 address to have a nice souvenir to bring home in form of Legacy IP(v4) address:

It took us full 20 full DNS queries to resolve domain name, and even if the DNS Resolver would pick the optimal path on every step, we would still end up with 8 queries.

In the real world, the DNS Resolvers use some clever tricks to avoid some of the complexity and most of the records would be quickly cached, so the latency would not be that bad; but, there are other quirks when using domains from different TLDs.

Different TLDs means different registries that take care of the top-level domain, and while most of the registries are well maintained, it brings more points of failure into the system.

Using different TLDs doesn’t only mean different registries, but also different jurisdictions, so picking a “cool” TLD from the country with totalitarian regime might not be “cool” in the end, as they might be able to take down, hijack your domain name, or otherwise manipulate the responses from your nameserver.

You might be asking — what’s a good setup then?

There are a several approaches. The setup with least latency on the cold-cache would be to use the in-the-domain nameservers like this:

See? The answer in just two steps. However the .CZ registry is a special case because the nameservers for and are shared. But even without this neat trick it would take us only 3 DNS queries to get to the result. Remember that any indirection will increase the number of DNS queries needed to get the result, increasing the number of places where something can break.

This is the optimal setup for people who are deep into DNS and care deeply about latency, and in fact, if you check Alexa Top 10 domains then most of the domains there use in-the-domain nameservers, because it’s simple and reduces the latency.

However what would be the good setup for normal domain holders? My recommendation would be to split the responsibility between more entities to reduce the risk of one being under attack (or just making a mistake, because mistakes, well, happen), e.g. pick one or two stable DNS providers that use nameservers in the same domain so your nameserver set contains 1–2 domain names. You also don’t have to worry about latency, because nameservers shared among multiple domains also mean that they will be cached very quickly.|||

The golden rule of security, stability, and resiliency of virtually anything is “don’t put all your eggs into one basket”. This generally applies to the DNS, and there are some recommendations to…