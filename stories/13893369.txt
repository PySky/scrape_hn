When writing x86 assembly code, short unconditional jumps are sometimes needed. For example, an statement might become:

The instruction can also be expressed as , where is the length (in bytes) of the machine code for . When is small and positive, this is a short unconditional jump. These jumps tend to look ugly, and it can be entertaining (and sometimes beneficial) to consider ways of avoiding them. For example, encodes as where is the one byte to be jumped over. If burning a register is an option, then (encoded as ) might be an alternative (that is, the byte being jumped over becomes the imm8 value). If burning a regsiter isn't an option, but burning flags is an option, then (encoded as ) might be an alternative. If not even flags can be burnt, then (encoded as ) might be an alternative.

For , similar patterns can be used: ( ), ( ), and ( ) are all options. For or , one easy option is to take a pattern and replace the first one or two s with (or any other value).

For , slightly more effort is required. On x86_64, we could use for and then only use five of the eight immediate bytes, but this feels slightly wasteful (and isn't an option for non-64-bit code). One option to make up five bytes is to combine a 32-bit immediate value with a ModRM byte or a SIB byte. For example, a instruction with an arbitrary SIB byte and 32-bit immediate looks like . At the cost of burning a register, a shorter option is ( ). With some knowledge of what we're jumping over, we can get shorter still - for example, jumping over a five-byte instruction ( ) can be done with ( ), albeit at the cost of burning both and flags.

If this topic tickles your fancy, some terms to google are:|||

