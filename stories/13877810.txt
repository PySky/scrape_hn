In my day job I'm the head of developer evangelism at PubNub. We use Javascript heavily in our new product BLOCKS, which enables developers to run massively distributed Javascript code on the edge with very low latency.

The changes in ES6 have been massive, exciting, and confusing. In this essay I'll introduce five features of the new JavaScript that you can use right away to supercharge your code, and what features to hold off on.

JavaScript has had many versions over the years, but overall the evolution was slow until recently. I think More changes have happened in the past two years than in the previous twenty. ES 6 stands for EcmaScript 6. It's also called EcmaScript 2015, or ES 2015. These are all different names for the 'new Javascript'.

I'm not entirely sure why JS has changed so much recently, but it seems to be because the owners of the major JavaScript engines have finally become interested in pushing the language forward.

Also, the advent of transpilers like TypeScript have made it possible to use new language features before they are built into the browsers. These two have combined to push JavaScript forward massively.

JS matters because it's the fabric of the web, and increasingly used in server side apps with Node, and in mobile and desktop apps with Cordova, React Native, and Electron.

So it matters that we push it forward. Languages which don't evolve start to die. Improving the language means we can improve our code. Our apps can have fewer bugs. And some of these features enable the runtimes to actually run code faster. So let's dive in, starting with variables.

In Javascript when you want to create a variable you use the keyword. is great, but it has a couple of problems. First, variables always vary. There is no way to make a true constant in Javascript. You can sorta fake it by creating an object with an immutable property. You can override the setter of the property so that it can't be set by outside code, but it's a lot of extra typing and requires an entire object instead of a simple variable.

Regular Javascript variables also have a scoping problem. Take a look at this code.

Variables declared with are global to the function they are defined in, not the block. You'd think that the log statement above wouldn't work because is defined in a different block. and in a language like java or C# you'd be right, but in Javascript is global to a function, not a block.

It gets worse when we add in variable hoisting. Consider this code

I'm using before I've defined it. What does this code even mean? Under the hood the javascript engine will hoist the variable declaration to the top of the function block. I can sort of see why you might want to hoist functions, but variable hoisting makes it very easy to introduce subtle bugs that are a pain to diagnose.

Look at this loop:

The variable is only used inside the loop, but I can still reference it outside. This is just tons of bugs waiting to happen.

The good news is we don't have to use var anymore. Instead we can use const and let.

The new keyword does exactly what the name suggests. It makes a real constant. If you try to set the constant you'll get a runtime error. Even better, code linting systems can detect this kind of bug at compile time now, so you can find bugs earlier at development time rather than in production.

The other new kind of variable is created with the keyword. is just like but it is scoped by block instead of function. Now it does what we expect.

Now the variable is restricted to the body of the loop. There is no way it can be used outside accidentally. Also, isn't hoisted, so all of those magic moving variables go away.

The new keywords and are a complete replacement for . With modern browsers and the newest versions of Node, there is no reason to use anymore. Good riddance.

ES6 introduces a new type of string called Template Literals. I prefer to call them Super Strings. You use a super string just like a regular string, but instead of using single or double quotes, you use the back quote.

So far so good, but nothing is very different. It does have one immediate advantage. If you need to use double or single quotes inside of a string you don't have to escape them anymore. However, super strings have a few other tricks up their sleeves.

Finally we can have real multi-line strings. Need to quote several lines of something? You don't have to escape newlines or do join tricks anymore. Just put in the newlines directly and it works.

Another new feature is expression escaping. Within a super string you can put with any valid Javascript expression inside the brackets. This is much cleaner than double escaping your quotes, and recent IDEs will syntax highlight these expressions nicely.

Combining expression escaping with multiline support gives us great HTML templates.

So that was strings and variables, but now let's take a look at functions. If you've heard anything about ES6 before, it was probably about arrow functions. These are a different syntax to write regular functions but with a more compact syntax. They also have one very important difference: the variable means something different. Let's look at some code.

Suppose you want to loop over an array to double the values within it, producing a new array. You could do it with the following loop, but that creates extra variables and it can be easy to accidentially break early or get the index wrong. plus it's a lot of extra typing.

Javascript arrays have a method called which calls a function on every element to generate a new element, which are then placed into a new array. It works like this:

This looks better but it would be nice to make it smaller. The part is the only thing which actually does any work. The rest is syntactic overhead. With an arrow function we can do it like this:

Woah! That's a lot smaller. Let me explain what happened. An arrow function lets you rewrite a function without the actual word. Instead you put the after the parenthesis containing the function parameters.

Arrow functions let us write the same thing smaller. But we can make it event shorter. Let's remove the whitespace. Same code just shorter.

But we can make it even shorter still. If the arrow function contains only a single expression, we can remove the return and the braces and semicolon, resulting in a tiny one line expression which automatically returns it's value. This is so much cleaner.

Arrow functions can make your code very compact and powerful. But there's one more trick up it's sleeve. It fixes .

In Javascript the magic variable always refers to the object that the function is called on. So code like the following doesn't do what you think it does.

When you are using other objects the context may be different than what you expect. When you pass a function to somewhere else to be called back, it may call the function with a different 'this'. If you add an event handler to a button the button will be the 'this'. Sometimes that's what you want, but in the code above it isn't. We want to be the surrounding App object, not the button.

This is a long standing problem with Javascript. It's so common that developers have created something known as the self pattern where you save the correct reference using a temporary variable . It's yucky but it works.

Another way to solve the problem is to bind the function. The method forces the to be a specific object, regardless of how the function is latter called.

Again, this will work but it's not great. We now have extra code to write, and underneath doing a bind can create extra overhead. Arrow functions give us a better way to do it.

Arrow functions automatically capture the var from the surrounding context of where the function is defined, not from where the function is used. This means you can pass the function to some other place and absolutely know that right version of will be used. In the code above everything works perfectly without any yucky hacks.

In short, arrow functions are really awesome. I try to use them everywhere I can. They make your code shorter, easier to read, and becomes sensible again.

Another great feature of arrow functions is that they work well with Promises. A Promise is a new kind of object in Javascript designed to help with things that take a long time to execute. Javascript doesn't have threads so if you want to do something that might take a long time then you have to use callbacks.

For example, in Node you might want to load a file, parse it, make a database request, then write a new file. These must all be done in order, but they are all asynchronous so you have to start nesting your callbacks. This produces what JS hackers like to call The Pyramid of Doom. You get massively nested code.

This code is ugly, hard to reason about, and has lots of nasty corners for bugs to hide. Promises help us defeat the pyramid of doom.

A Javascript is an object that represents a value which may not be available yet. It promises to have the value in the future. You can add a callback to be invoked when the final value is ready using the function.

Promises with callbacks are much like traditional callbacks, but promises add an extra twist: they can be chained. Let's revisit our code from before. Each of the functions must be called in order, and each depends on the result of the previous one. Using promises we can do it like this instead.

Notice how the arrow functions make this nice and clean. Each callback returns a value. This value is passed to the next one so all of our functions can be easily chained.

Now you'll notice that the command needs the result of the previous two values however a promise only passes one value. We also don't care what order and happens in. We just want to know when both are completed. Promise can do this too.

Suppose want to load each file from an array of filenames and be be notified when they are all done. We can do that with . is a utility method on which takes an array of promises and returns a new promise that resolves when all of the sub-promises complete. Here's how we would load all of the files with . (assume that is a function which returns a promise to read the file).

Now we can rewrite our original Node example like this:

I've combined the read file and database calls into a single promise using . The value it will return is an array containing the results of both sub-promises, so I can then put them into . Notice that I've also used the abbreviated arrow syntax to make the code smaller and cleaner.

Now consider what happens if one of these Promises fails? To handle the first one failing we could put in a try / catch block, but the next will still be called. Really we want everything to stop if the first one fails. Promises have another trick up their sleeves: the catch callback.

In the new version below if anything fails it will immediately jump to the catch callback at the end, skipping the rest. After the catch we can still add more then clauses.

Of course promises only work if the APIs we call actually use them. Lots of libraries are starting to switch over to promises, but while we wait we can make our own promises too. We do it with the constructor.

It takes two values: and . Each of these are callback functions. Inside you do whatever you need to do that takes a long time, even if it involves multiple callbacks. When you are completely done invoke with the final value. This will then be sent the to the first clause of whatever uses your promise.

If something bad happens and you want to reject the value, instead of throwing an error use the , passing whatever alternate value you want.

Here's a real-life example. I use AJAX calls all the time but they can be ugly, like this.

Let's wrap this code up in a promise.

This is still the same basic code, but I can call it like this instead.

Wow, that's so much cleaner. In reality I don't need make my own AJAX Promise wrapper because there is a new web standard called Fetch which already does this for me. Fetch isn't quite supported in all browsers yet, so we can use our own until then.

Promises can be a bit tricky to wrap your head around at first, but once you start using them I think you'll really like them. They make it very easy to pull multiple functions together into a single workflow that makes logical sense, and to properly catch all errors along the way.

Finally I want to show you a bunch of new Array features. Most of these aren't exactly new for ES6, and in fact some of them are quite old. However, they are finally supported everywhere and play nicelly with Arrow Functions and Promises, so I think of them as new.

Suppose you want to do something to every element of an array. Instead of using a for loop, use the or functions.

The function runs the callback on every element of the array. The function also runs on each element, but it stores the results of each callback into a new array.

If you want to transform an array by including only certain values, use the function.

Array also has functions to find single values within the array based on some criteria.

Finally arrays can be reduced to a single value with the function. is very powerful and can be used to do lots of things like summing an array or flattening nested arrays

To loop over the properties in an object you can use the to get an array of property names, then loop over it with

The five features I've shown you can be used today, but there's a lot of other things in ES6 that you should avoid for time being; either because they don't provide much value or aren't well supported yet. These include:

Destructuring allows you to pull values out of an object by name. It can be useful in a few situations, but the best use I've found is extracting functions from modules. Unfortunately modules are still a mess and don't work the same everywhere, so avoid them for now.

Along with destructuring you can do without tricks like default parameters, and the spread operator. I find these to be more trouble than they are worth, at least for now.

Symbols, generators, iterators, weak maps and sets, and proxies are genuinely useful but they aren't supported everywhere yet so I suggest you wait a while before using them.

There is also a new class syntax. It still uses JavaScript's prototypical inheritance, but it makes the syntax of defining a class cleaner and consistent. However, it is also not as valuable without the new module support so I suggest waiting a bit longer.

Most desktop and mobile browsers support everything I've shown you. However, depending on your audience you may have older browsers / older mobile OSes that don’t. Whenever you want to know if something is ready, go to caniuse.com. It will tell you what versions of each browser support what.

If you need to support IE < 10, there's a good chance you'll want to use a transpiler like TypeScript or Babel

So those are five awesome features of ES6 that you can start using right away. More stuff is coming, but you don't need to wait to use these. Get to codin'. And if you want go use them in low latency data stream driven Javascript code, go check out PubNub BLOCKS.

We've created a catalog of example code that uses Arrow Functions and Promises to communicate with lots of useful realtime webservices like on-the-fly language translation, geo-coding, and chatbot apis.|||

