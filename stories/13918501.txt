The premise is simple. A post may contain images. These images are restricted in rendered size to keep the flow of the page in tact. Clicking an image allows you to zoom in. Here’s an example:

Let’s get the CSS out of the way first. The selector used is , which means any image in the post. By default I limit it to a maximum width of its parent container. Also, I change the cursor to a pointer, to indicate you can click on the image, like a link.

Then there are images with the class. This is still the same image element, but with an additional class:

Okay, that’s a bit more CSS, but this basically overlays the image on to the page and adds some whitespace around it.

The trick to zooming is adding the class to the element. Zooming out means removing that class again.

Now, on to the JavaScript…

For years now jQuery has been my go-to tool for anything JavaScript, mainly because it comes bundled with Rails. (Yes, I used prototype as well in the old days.)

The jQuery solution is as you rather straight forward. Wait for the DOM to be loaded, and handle events on all elements. When clicked, toggle the class.

Because I’m a keyboard user (Vim, not Emacs, thank you), I prefer to map to also close any zoomed imaged.

Again, hook into the event, check if was pressed and toggle the class for all zoomed in images.

But, using jQuery means adding an extra dependency: 1 extra HTTP request and 85kB download for you. Also, the few friends I have who practice JavaScript tell me that pure JavaScript is the way to go these days. So, let’s try!

With some help from the You Might Not Need jQuery website, I managed to drop the 85kB big jQuery dependency and rewrite the above functionality in plain old JavaScript.

First, let’s write a function that waits for the DOM to load.

This was taken straight from You Might Not Need jQuery to wrap any functions you want to run when the document has loaded fully.

Next I wrote a function to handle toggling the CSS class on the images:

It turns out that JavaScript is more than capable of toggling classes on its own.

While we’re at it, let’s also write the function that handles the presses.

This is a bit more involed. I still check for the proper , and then proceed to find all zoomed images using . It’s really that easy.

Next I use the prototype to map a function to each zoomed image. That function simply toggles the class, just like does.

What remains is nothing more than some glue to put the above fuctions together.

Here I use the function I wrote. Just like , I find all elements and add the event listener for clicks. Then I also add an event listener for the key.

Rewriting a trivial piece of jQuery code to plain JavaScript appears to be more than worth the while. Besides the warm fuzzy feeling of dumping jQuery, it saves quite a few kilobytes from each page on devroom.io. Especially for mobile users this matters.

says 11 deletions (bye, jQuery) and 27 additions (hello, JavaScript). This does not tell the full story, as one of these deleted lines is this one:

I can highly recommend you take a closer look at what your jQuery code is actually doing and consider moving away from unnecessary dependencies. Yay for lean and mean web pages!|||

a blog by ariejan de vroom about software engineering and craftsmanship.