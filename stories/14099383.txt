This article was originally posted on the Abstract blog.

Give people a tool, and they’ll find different ways to put it to use. No two designers work the same way, but I’m predicting that will change over the next couple of years. Modern digital design grew out of hacking photo editors to draw user interfaces, losing track of work inside systems designed not to lose work, and an endless cycle of recreating existing screens when things get lost in translation…

Over the past decade, designers began to re-evaluate their approach and gravitated toward a component-based workflow. Photoshop introduced Smart Objects (being able to “place” other Photoshop files in a PSD). This new feature allowed designers to share a centralized version of a component, without worrying about having duplicates of that component across their files. Sadly, this never really turned into a workflow across design teams — it was more of an exception than a rule.

When Sketch introduced symbols, the value of components became more clear. Despite being constrained to a single file, symbols make components extremely easy: create a component, and then reuse it infinitely throughout the file across artboards and pages. Initially static, symbols soon became a more robust feature with responsive resizing and the ability to overwrite values. I’m convinced symbols will have more powerful customization options in the future.

The real breakthrough came when Sketch enabled nesting symbols inside of other symbols. Even as a single designer, there is tremendous value in properly defining, naming, and structuring symbols. Coincidentally, this is how developers structure components as well: starting at the bottom where they define things at a micro level, all the way up to entire screens on a macro level.

One of Abstract’s strengths is providing a way for designers to version and manage their work. Abstract tracks changes made to any component within a Sketch file, allowing you and your team to compare different versions at the component level. This means that the more symbols in a Sketch file, the less likely you (or any of your colleagues) are to run into any conflicts. With Abstract, editing an icon that’s used on every single layer shouldn’t cause any conflicts with others who are working on the same file. And if a conflict happens to arise, Abstract handles this situation gracefully.|||

Give people a tool, and they’ll find different ways to put it to use. No two designers work the same way, but I’m predicting that will change over the next couple of years.