This post presents performance benchmarks for general matrix-matrix multiplication between Mir GLAS, OpenBLAS, Eigen, and two closed source BLAS implementations from Intel and Apple.

OpenBLAS is the default BLAS implementation for most numeric and scientific projects, for example the Julia Programing Language and NumPy. The OpenBLAS Haswell computation kernels were written in assembler.

Mir is an LLVM-Accelerated Generic Numerical Library for Science and Machine Learning. It requires LDC (LLVM D Compiler) for compilation. Mir GLAS (Generic Linear Algebra Subprograms) has a single generic kernel for all CPU targets, all floating point types, and all complex types. It is written completely in D, without any assembler blocks. In addition, Mir GLAS Level 3 kernels are not unrolled and produce tiny binary code, so they put less pressure on the instruction cache in large applications.

Mir GLAS is truly generic comparing with C++ Eigen. To add a new architecture or target, an engineer just needs to extend one small GLAS configuration file. As of October 2016 configurations are available for the X87, SSE2, AVX, and AVX2 instruction sets.

The benchmark source code can be found here. It contains Mir vs a CBLAS implementation benchmark.

Mir GLAS has a native interface. is a development version of std.experimental.ndslice, which provides an N-dimensional equivalent of D’s built-in array slicing. GLAS uses for matrix representation. It is a plain structure composed of two lengths, two strides, and a pointer type of . GLAS calling convention can be easily used in any programming language with C ABI support.

On the other hand, CBLAS interface is unwieldy

OpenBLAS and Intel MKL have sequential configurations. Sequential configuration is preferred for benchmarks.

Eigen should be built with and flags:

Eigen 3.3-rc1 provides the Fortran BLAS interface. Netlib’s CBLAS library can be used for the benchmark to provide CBLAS interface on top of Eigen.

There are four benchmarks, two charts per benchmark. The first chart represents absolute values, the second chart represents normalised values.

Mir GLAS is significantly faster than OpenBLAS and Apple Accelerate for virtually all benchmarks and parameters, two times faster than Eigen and Apple Accelerate for complex matrix multiplication. Mir GLAS average performance equals to Intel MKL, which is the best for Intel CPUs. Due to its simple and generic architecture it can be easily configured for new targets.|||

This post presents performance benchmarks for general matrix-matrix multiplicationbetween Mir GLAS, OpenBLAS,Eigen, and two closed source BLAS implementation...