Tamale is a Lua library for structural pattern matching - kind of like regular expressions for arbitrary data structures, not just strings. (Or Sinatra for data structures, rather than URLs.)

reads a rule table and produces a matcher function. The table should list rules, which are structurally compared in order against the input. The matcher returns the result for the first successful rule, or if none match.

The result can be either a literal value (number, string, etc.), a variable, a table, or a function. Functions are called with a table containing the original input and captures (if any); its result is returned. Variables in the result (standalone or in tables) are replaced with their captures.

Imperative code to rebalance red-black trees can get pretty hairy. With pattern matching, the list of transformations is the code.

The style of pattern matching used in Tamale is closest to Erlang's. Since pattern-matching comes from declarative languages, it may help to study them directly.

Each rule has the form .

The pattern can be a literal value, table, or function. For tables, every field is checked against every field in the input (and those fields may in turn contain literals, variables, tables, or functions).

Functions are called on the input's corresponding field. If the function's first result is non-false, the field is considered a match, and all results are appended to the capture table. (See below) If the function returns false or nil, the match was a failure.

marks strings as patterns that should be compared with string.match (possibly returning captures), rather than as a string literal. Use it like .

Its entire implementation is just

Rules also have two optional keyword arguments:

This is used to add further restrictions to a rule, such as a rule that can only take strings which are also valid e-mail addresses. (The function is passed the captures table.)

This flag allows a table pattern to match an table input value which has more fields that are listed in the pattern.

could match against any table that has the value t.tag == "leaf", regardless of any other fields.

The patterns specified in Tamale rules can have variables, which capture the contents of that position in the input. To create a Tamale variable, use (which can potentially aliased as , if you're into the whole brevity thing).

Variable names can be any string, though any beginning with _ are ignored during matching (i.e., will capture the third value from any four-value array). Variable names are not required to be uppercase, it's just a convention from Prolog and Erlang.

Also, note that declaring local variables for frequently used Tamale variables can make rule tables cleaner. Compare

The _ example above could be reduced to .

Finally, when the same variable appears in multiple fields in a rule pattern, such as { X, Y, X }, each repeated field must structurally match its other occurrances. would match , but not .

The function takes a rule table and returns a matcher function. The matcher function takes one or more arguments; the first is matched against the rule table, and any further arguments are saved in captures.args.

The rule table also takes a couple other options, which are described below.

Tamale defaults to structural comparison of tables, but sometimes tables are used as identifiers, e.g. . The rule table can have an optional argument of , for values that should still be compared by rather than structure. (Otherwise, all such IDs would match each other, and any empty table.)

Indexing in Tamale is like indexing in relational databases - Rather than testing every single rule to find a match, only those in the index need to be tested. Often, this singlehandedly eliminates most of the rules. By default, the rules are indexed by the first value.

is matched against {2, "d"}, it only needs one test if the rule table is indexed by the first field - the fourth rule is the only one starting with 2. To specify a different index than , give the rule table a keyword argument of , where I is either another key (such as 2 or "tag"), or a function. If a function is used, each rule will be indexed by the result of applying the function to it.

For example, with the rule table

each rule will be indexed based on the first two fields concatenated, rather than just the first. An input value of {"a", "c", 1} would only need to check the second row, not the first.

Indexing should never change the results of pattern matching, just make the matcher function do less searching. Note that an indexing function needs to be deterministic - indexing by (say) will produce weird results. An argument of turns indexing off.

Tamale has several debugging traces. They can be enabled either by spetting to true, or adding as a keyword argument to a rule table.

This can be used to check whether indexing is effective, if one rule is pre-empting another, etc.|||

tamale - TAble MAtching Lua Extension - An Erlang-style pattern-matching library for Lua