D along with the Dgame package allow for quick game prototyping and development, epecially when compared to C++ and its equivalent graphics packages. This tutorial will show you how to create a simple game engine and implementation using the engine.

Download the template off of Gitgub to begin. You'll need the latest D language runtime, as well as the library dependencies listed in the repository's readme file. Once you setup your project, compile it using dub, and then try running it. If all goes well you should see the a window with our player.

Lets take a look at the basic structure of the code.

Our program entry point is app.d. All it does is define the engine object and execute run. The engine.d file is where the first of our game logic begins. Here we define our various game display states (menu, game, endgame) and then also our overall game loop. Each of the states also contains its own loop which is dependent on the GameState variable.

The various game states each implement a run method which handles the individual logic for each step. For our menu and endgame states this means displaying the menu text, and handling the input. For our game state, we handle all of the character drawing, collision, game logic, and input.

We'll skip the menu and endgame components since they're pretty simple, and instead focus on the game component.

There's a bit going on here, so let's break it down.

Our constructor takes in a Dgame window object which is used to refresh the screen, and determine the window bounds. We also create our player object and initialize it using its create method. Finally we default our current player's direction to STOP. The playerDirection will be used to determine a vector for our player. This will allow us to "smooth" out the player's movement so that the player doesn't abruptly stop when the user take his or her finger off the arrow keys.

Here we have our game loop which is determined by the current gameState. GameState is changed depending on the win / lose conditions of the game, as well as by the input received from the user. For example, hitting escape will change the GameState to QUIT, which will then result in program termination.

In the game loop we first clear our window. Next we handle any input, which in our case involves checking if the left / right arrow key is being pressed. Next we draw the player by passing in a reference to the window object. Finally we display the contents of the window with the updated player position.

Let's take a look at our player object.

The player object contains a couple key methods - run(Direction dir) and handleStopping(). These two methods "smooth" out the player's movement which give's a nice feel of momentum when moving the player around.

The player's run method takes in a direction, in our case either LEFT or RIGHT. As long as that direction is sustained, (the user is pressing that arrow key) the player's velocity will incerase in that direction until a maximum velocity is reached. Once the user depresses the arrow key, a direction of STOP will be passed into the run method. At this point the velocity of the player will begin to decrease based on the lastDirection variable. Finally, we check to make sure that the player is still within the boundaries of the window.

The last of our logic happens in the InputHandler class. We poll the Dgame framework for an event, and then act on that event depending on the key that was pressed. In our case we're either changing the gameState or the player direction. I've decided to implement these as static methods, but feel free to create a struct or non-static class implementation.

Now that we have our simple game engine up and running, let's develop a game on top of it. After months of planning we finally have our requirements and design document in place. Our player must avoid a series of rain drops that fall from the sky. If the player gets wet, he or she loses a life. For each rain drop that the player avoids the score will increment. This will be a simple game, but it can take advantage of the start menu, game, and endgame components of our engine.

First, let's introduce our raindrop class. Create a new file, "raindrop.d" under source/engine/object. In this file we'll use the following imports.

Next, we'll add our RainDrop struct, with some shell methods.

To begin, lets add some object level variables. We'll need a few constants to define our max velocity, our velocity increase, and our score increment value. These will act as the gravity and terminal velocity for our falling rain drops. We'll also need our Texture and Surface objects to draw our sprite. Finally, we'll add some non-static properties that will tell the current velocity, visibility, and Y-position.

Let's implement our create method. In this method, we'll need to create the sprite, load the texture, and determine a starting position for the object. Here we use the std.random methods to find a random integer between 0 and the window width which serves as the starting position of our raindrop.

Next we have our fall method which simulates gravitational forces on our randrop. This method is very similar to the run method our player object implements. However, since we're only dealing with velocity in one direction (down) the raindrop's method can be simplified. You'll also notice that we're incrementing our score here. Once a raindrop goes below the height of our window we add some points to the score and set the raindrop's visibility to false.

We also implement a reset method on our raindrop. This allows us to recreate raindrops that have already fallen the full length of the window.

We need to determine if our raindrops are hitting our player. I've decided to implement the collision detection on the raindrop object, but you could also implement a more generic method on the game object, or a similar method on the player object. Dgame provides an intersects method which we can use to determine if two objects are overlapping.

Finally we implement our draw method. This is the same as the player's draw method except it checks to make sure a raindrop is visible first.

We've now fully implemented our raindrop object. Now let's make it rain! We need to make a few revisions to our game object which will include the logic required to draw raindrops and make them fall. First let's add a new constant defining the maximum number of raindrops on the srceen at once, and also update our imports.

Let's add a container for our 25 raindrops and initialize it.

If you run the game, we now have... the exact same scene as before we added the raindrops. Looks like we forgot to draw them on the screen. Let's add a draw method to our game object and call it in the loop.

While we're at it, let's add a method to move our raindrops. Otherwise they will just pop in at the top of the screen and stay there.

The first part of this method simply loops through all the raindrops and calls the fall() method. The second part of the method deals with respawning raindrops that have become invisible due to falling past the boundary of the screen. First a random raindrop is selected from the list of 25. Next, if the raindrop is actually invisible (a visible raindrop could have been selected), the dice roll gives the raindrop of 70% of reappearing. This ensures that raindrops reset at a more randomized interval.

Run the game and you'll notice that our character doesn't mind at all when he or she gets wet. We need to add our collision detection to determine if our character is getting soaked.

The collision detection is very primitive. We loop through every raindrop and check to see whether or not the player object is being intersected. If a raindrop does hit the player, we deduct a life and check to make sure our player hasn't run out of lives.

We're almost done with our little RainDrop game. All we need to do is add some text to show our score, and the number of lives we have left. First let's define a new Font object in our class variables, and also two Text objects to display our score and lives. We'll also go ahead and create a variables to store our score.

All that's left is to draw the text objects to the screen.

This concludes the tutorial. Feel free to make use of the game template we've created. If you would like to take a look at our final product, download the source off of Gitgub.|||

