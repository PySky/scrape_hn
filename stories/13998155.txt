This is a Rails gem that reloads browser as soon as you do some changes in your Rails app. We as web developers are sometimes bounded in cycle. This really hurts productivity. This gem will help you in breaking this cumbersome routine and your browser will be refreshed automatically whenever it detects any change in Rails code thus freeing you from manually updating browser and hence resulting in increased productivity.

Add this line to your application's Gemfile:

Or install it yourself as:

After gem installation just enter following line into your project's

By-default looks for changes in directory. You can easily add / modify directories according to your choice. To update directories list, first create an in your Rails app and use following code:

You can also use following way to provide single directory:

If you want to completely replace default directories and provide new ones you can use:

Always provide directories relative to your Rails app. For example if you want to look for changes in directory you can use following code:

runs on separate server than that of your Rails app. As soon as you starts your Rails app a separate server will automatically be created for serving requests. 's server run on . This means if you have run your Rails app on port then will automatically run on port . Similarly if you choose port for your Rails app, will use port .

The reason of running on a separate server is quite obvious. It don't want to interfere with your application code thus your Rails server don't need to serve requests related to . The second reason is middleware. This middleware is inserted by-default by Rails and because of this no other request can get processed until current running request is finished. Since uses Ajax Long Polling to look for changes in your code, which means if 's Ajax request is getting processed your Rails app's requests will not be entertained. So the obvious solution is to use a separate server for doing stuff related to .

You might be wondering why Ajax Long Polling when there are options available like and . The answer to this question is, Simplicity. Doing Ajax requests seems quite natural way of doing things when it comes to getting updates from server. Other solutions require some configuration, but there is no need to do any for Ajax and it works on every Ruby based web-server. Since 's server is running locally it can serve requests at a blazing fast speed.

To increase performance of 's server, instead of doing Ajax requests after each 01 second I opted Ajax Long Polling, which upon requests arrival will keep looking for changes in a loop for 25 seconds and will break as soon as any change is detected.

upon it's execution creates an which points to 's server. Upon any change found 's JavaScript communicate with parent by using which is considered to be the best option for communicating between parent and child windows.

is intended to be used only in environment. It is not developed to be the next hot code reloader / swapper. Necessary checks have been placed to make sure only works in environment when Rails server is running.

Special thanks to following awesome developers for testing gem.|||

active_reloader_rb - Rails gem that reloads browser as soon as any file is changed