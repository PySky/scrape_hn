Detecting shellcode over the network with scapy and libemu

In this blog post, I will describe a method of using libemu along with scapy in order to detect shellcode being sent across the network in unencrypted channels. This method would not be particularly reasonable for large networks without a significant amount of computing power. On the other hand, for semi-automated analysis, or even integration into something like Cuckoo Sandbox, it may be quite useful.

While this proof of concept is currently functional, it would take some work on the project’s dependencies in order for me to consider the project a success. I have not yet decided if I plan on dedicating significant time to resolving issues in the related projects.

In order to detect this shellcode, we need a few major components.

For the first requirement, we simply use libemu.

For the remaining requirements, we use scapy and some additional Python code.

Libemu is a library for detecting and emulating shellcode, allowing for some automated analysis of shellcode. Unfortunately, it does not appear to be under active development, and getting up to date source code is currently alluding me. It also appears to have a few bugs, some of which make it less viable for integration into network perimeter defenses.

Along with it being difficult to locate the source, the current libemu interfaces to libemu in Python both seem to have some issues. While both python-libemu and pylibemu are very useful, python-libemu fails to implement many of the features of libemu, and pylibemu currently has some issues which seriously impact memory usage.

I have found that even via the Python interfaces, an arbitrary buffer supplied to libemu for processing can lead to a floating point error, which will crash the process. This is one reason I do not suggest running this in production environments, or on large enterprise networks.

For our purposes, we’ll use python-libemu, installed on Ubuntu with the following:

Scapy is well known as a raw networking library for Python, and being pretty awesome. I’m not going to spend time covering Scapy.

In order to scan over these packets in a similar way that the attacker would send them, we need to create the socket streams. More specifically, we need to look at each direction of communication. Additionally, we don’t want all of every stream in memory at the same time, so we use a LRUCache (from cachetools) to keep the most recent streams in memory, and use a memory buffering technique called a sliding window.

In a sliding window, we set the max amount of memory we want to use per stream, then as we get new data, we append the new data, then cut off bytes in the beginning of our buffer until it is smaller than our max buffer size. This way we can look at all the data, and avoid simply looking at each packet.

For each new packet we get, we scan the sliding window buffer with libemu. If libemu detects shellcode, we print the offset and the quad (ip:port-ip:port).

I will not update the code in this blog post, but if I need to, I will update the code in the following gist.

In the proof of concept, the shellcode detection is being done across every thread on the local computer. This is done because libemu scanning scan be quite CPU intensive and slow.

The PoC requires the following commands before being installed.|||

