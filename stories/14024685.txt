In this article I'm going to demonstrate some simple tips and tricks which will help you build and maintain beautifully simple mobile build pipelines. These techniques can be applied to different mobile app technologies and integrated into almost any build system:

Each tip is demonstrated in the sample apps in the dwmkerr/beautifully-simple-app-ci repo.

We take our code, perform some kind of validation (such as testing, linting, whatever), generate our artifacts and then deploy them to some devices.

Often though there's a bit more to it than that:

Our source code has some metadata associated with it at the point in time you create your binaries, such as:

When we build we have to:

So even the 'basic' CI isn't all that basic. The rest of this article is a set of tips and techniques which I have found useful when developing mobile apps.

There are a raft of platform and framework specific tools and interfaces we will have to use in mobile projects. XCode, Gradle, NPM, framework specific CLIs, tools such as Fastlane, etc etc.

If you ensure that your main 'entrypoint' to key operations is a recipe in a makefile, you can provide a degree of consistency to mobile projects. For example:

A for such commands might look like this:

This is a slightly shortened snippet, you can see a variety of working examples in the git repo:

The first sample in the above repo demonstrates using makefiles to handle key commands for a React Native app. In the example, CircleCI is used to handle automatic builds on code changes, and the apps themselves are distributed automatically to testers' devices with TestFairy.

The nice feature is that the bulk of the logic is in the main repo source, in the - the CI tool simply orchestrates it. Developers can run exactly the same commands on their local machine.

The immediately draws attention to the makefile commands:

The makefiles do most of the work, that makes setting up CircleCI almost trivial. Here's a snippet of its config:

Our commands are android specific at this stage as Circle don't support iOS builds on their free plan1. Later samples which use other build systems demonstrate Android and iOS.

The CI automatically tests and builds whenever we have new code commits:

Also, if a commit is made to the branch, our new app is automatically pushed to TestFairy, which can be configured to automatically update the test team:

Makefile syntax is close enough to shell scripting that simple operations are generally straightforward2 to implement. The approach is also perfectly valid for server side code and almost any project.

Teams with many projects can build consistent patterns and syntax for building. Take a look at the image below:

This is from my article on Simple Continuous Integration for Docker Images - where exactly the same principles are applied.

We'll see more interesting makefile recipes as we get into the other tips.

iOS and Android apps have both a version number and a build number. We might have other files in our project with version numbers too (such as a file).

It can be very useful to have a way of keeping these version numbers in sync. Again, we can use a makefile recipe:

This command will vary in implementation depending on your platform. For example, this would be all that is needed for a Cordova based project:

Notice we don't really need complex tools for a job like this, is sufficient to quickly make changes to config files.

This works very nicely with build systems, many of which provide a build number as an environment variable. For example, we can add a build number with TravisCI like so:

To go into more detail, we'll look at the second sample in the git repo, which is a Cordova App. This sample will always set the build number in both apps and the build version to whatever is present in the file. That means you can do things like this:

And all of the version numbers and build numbers are updated and the apps are deployed. In this example project, they're deployed to HockeyApp:

This build runs on TravisCI, so only builds the Android version. You can clone the code and build the iOS version (and deploy it) using the makefile.

When you are working in a larger team, it can be very useful to label your app icon so that team members know exactly what version of the app they are using. This is often the case if you are working in a team where features or bugfixes are being deployed rapidly.

You might label your icons with build numbers, SHAs, branch names, versions, tags, or even something custom such as 'QA' or 'UAT' for different versions of your app. Here are a few examples:

I've found this to be very useful, so created a command-line tool called 'app-icon' to help with the task:

This tool has a command to add a label, and a command to generate icons of all different sizes. This means you can add recipes like this to your :

Each sample app labels its icon in a different way:

There are references to each sample and the associated code in the at:

As a quick example, the Pure Native App runs this code prior to each build:

This app uses BuddyBuild as a build system, meaning we can just drop this line in the script. You can see the labeled icons directly in the BuddyBuild UI:

The Android build is currently having some issues due to fonts being accessible by the labelling tool (which uses ImageMagick under the hood), with any luck this issue will be fixed soon. This seems to be an issue with the BuddyBuild ImageMagick installation rather than the labelling code itself, which is running fine on all of the other builds!

Another trick I've found useful is to have a command which automatically updates your iOS Bundle ID or Android Application ID. This can be handy when you have multiple versions of an app (such as a QA build, dev build, UAT build or whatever).

If you have users who need to have different versions of your app on their phones then this is actually a necessary step (at least for iOS), as you cannot have multiple versions of an app with the same ID installed.

Often, I will aim to have a standard 'base id', such as:

and then simply append whatever the 'flavour' of my app is to the end of the id:

The base id is then reserved for the master build, which is what goes into production.

Just like with all of the other tricks, I tend to use a recipe in the to do the heavy lifting, and then leave the build system to orchestrate the commands (we'll see more of this later). Here's how a recipe will typically look (this comes from the fourth sample, which is a Xamarin App):

This small recipe can be very useful in combination with other techniques. Ensuring your build respects the variable (or whatever you name your 'flavour') means that you can have different configurations for different environments, build multiple versions of the app, each with a distinct app icon, and distribute them to your team.

In the screenshots below, you can see how the presence of the environment variable automatically updates the App ID (this is taken from the Xamarin Sample, which orchestrates builds with Bitrise2:

Even teams which are great at documenting complex application code can sometimes be a bit lax when it comes to documenting build related code.

Unfortunately, build related code will often need more documentation than usual. Why is this?

When something goes wrong with a build process, or needs to be changed, it is a real pain when only one person knows how the code works. Be rigorous with this code, make sure it is documented and reviewed, and share the knowledge around your team. I tend to like to have a table of commands as a quick index in the README.md file, and then heavily comment the code itself:

Most of these tips are fairly explicit, there are detailed examples in the sample project. Familiarity with these patterns and techniques can be useful, but perhaps the most valuable takeaway would be to embrace the following principles:

I hope this article has been useful, any thoughts or comments are always welcome!|||

