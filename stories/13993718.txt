In Part 1 and Part 2, we have analyzed how to modify a class to compare objects by value.

Now, we will explore a type-specific implementation of how to compare objects by value including the IEquatable(Of T) generic interface and overload of “==” and “!=” operators.

Type-specific comparison of objects by value allows achieving:

We need to implement the type-specific comparison by value for the following reasons:

The implementation of comparison of all ways to be simultaneously executed may lead to particular obstacles as it is necessary to ensure that:

I am going to describe on a particular example with the Person class how to compare objects by value using the type-specific implementation, taking into account the above-mentioned points.

In addition, I will provide a final example of the code with all the explanations on how it works.

Here is the Person class containing the implementation of the full set of objects by value:

using System; namespace HelloEquatable { public class Person : IEquatable<Person> { protected static int GetHashCodeHelper(int[] subCodes) { if ((object)subCodes == null || subCodes.Length == 0) return 0; int result = subCodes[0]; for (int i = 1; i < subCodes.Length; i++) result = unchecked(result * 397) ^ subCodes[i]; return result; } protected static string NormalizeName(string name) => name?.Trim() ?? string.Empty; protected static DateTime? NormalizeDate(DateTime? date) => date?.Date; public string FirstName { get; } public string LastName { get; } public DateTime? BirthDate { get; } public Person(string firstName, string lastName, DateTime? birthDate) { this.FirstName = NormalizeName(firstName); this.LastName = NormalizeName(lastName); this.BirthDate = NormalizeDate(birthDate); } public override int GetHashCode() => GetHashCodeHelper( new int[] { this.FirstName.GetHashCode(), this.LastName.GetHashCode(), this.BirthDate.GetHashCode() } ); protected static bool EqualsHelper(Person first, Person second) => first.BirthDate == second.BirthDate && first.FirstName == second.FirstName && first.LastName == second.LastName; public virtual bool Equals(Person other) { //if ((object)this == null) // throw new InvalidOperationException("This is null."); if ((object)this == (object)other) return true; if ((object)other == null) return false; if (this.GetType() != other.GetType()) return false; return EqualsHelper(this, other); } public override bool Equals(object obj) => this.Equals(obj as Person); public static bool Equals(Person first, Person second) => first?.Equals(second) ?? (object)first == (object)second; public static bool operator ==(Person first, Person second) => Equals(first, second); public static bool operator !=(Person first, Person second) => !Equals(first, second); } }

The Person.Equals(Object) method is implemented as the Person.Equals(Person) method by casting the specified object to the Person type with an ‘as’ operator.

 Note:If object types are not compatible, then cast returns null.  In this case, the objects are not equal in the Person.Equals(Person) method.If object types are not compatible, then cast returns null.  In this case, the objects are not equal in the Person.Equals(Person) method.However, in general, we can get a comparison result in the Person.Equals(Person) method when the objects are equal, as it may be possible to call an instance method without creating an instance. Then, if a reference to the current and specified objects equals null as well as their types are incompatible, then the call Person.Equals(Object), followed by Person.Equals(Person), will lead to the incorrect result – objects are equal, though they are not equal actually. This case does not seem to require much processing, as there is no sense in calling an instance method and using its result without creating the instance itself. Still, if we need to take it into account, then we may uncomment the code at the zero step in the Person.Equals(Person) method that will prevent us from receiving the incorrect result when calling the Person.Equals(Object) method, but also will throw a more informative exception instead of NullReferenceException when directly calling the Person.Equals(Person) method from the null-object.

Thus, we have found a correct and productive way to implement comparison of objects by value in one class, as well as taken into account the correctness behavior for inheritance.

In addition, it is necessary to analyze how to correctly implement the inheritance for comparing objects by value, if we add a field in the inherited class included into multiple object fields that form a unique value of the object:

Assume we have the PersonEx class that inherits the Person class and has an additional property MiddleName. In this case, the comparison of two objects of the PersonEx class

will lead to the object equality, which is incorrect.

Therefore, though this task seems to be trivial in addition to costs and risks, the implementation of comparing objects by value in the current .NET framework tends to result in including comparison into the inherited classes which leads to additional costs and errors.

We will talk about a possible solution of this task in my further publications.

Comparing Objects by Value. Part 2: Implementation Notes of the Equals Method|||

This article is devoted to a type-specific implementation of comparing objects by value including “==” and “!=” operators