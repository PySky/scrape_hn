TL;DR: RegExp Tree is a regular expressions processor, which includes parser, traversal, transformer, and optimizer APIs.

You can get an overview of the tool in this article.

The parser can be installed as an npm module:

You can also try it online using AST Explorer.

The regexp-tree parser is implemented as an automatic LR parser using Syntax tool. The parser module is generated from the regexp grammar, which is based on the regular expressions grammar used in ECMAScript.

For development from the github repository, run command to generate the parser module:

Check the options available from CLI:

Which produces an AST node corresponding to this regular expression:

The parser can also be used as a Node module:

Note, regexp-tree supports parsing regexes from strings, and also from actual objects (in general -- from any object which can be coerced to a string). If some feature is not implemented yet in an actual JavaScript RegExp, it should be passed as a string:

Also note, that in string-mode, escaping is done using two slashes per JavaScript:

For source code transformation tools it might be useful also to capture locations of the AST nodes. From the command line it's controlled via the option:

This attaches object to each AST node:

From Node it's controlled via method exposed on the parser:

The method sets global options, which are preserved between calls. It is also possible to provide options per a single call, which might be more preferred:

The traverse module allows handling needed AST nodes using visitor pattern. In Node the module is exposed as method. Handlers receive an instance of NodePath class, which encapsulates itself, its node, , and (in case if a node is a part of a collection).

While traverse module provides basic traversal API, which can be used for any purposes of AST handling, transform module focuses mainly on transformation of regular expressions.

It accepts a regular expressions in different formats (string, an actual object, or an AST), applies a set of transformations, and retuns an instance of TransformResult. Handles receive as a parameter the same NodePath object used in traverse.

A transformation plugin is a module which exports a transformation handler. We have seen above how we can pass a handler object directly to the method, here we extract it into a separate module, so it can be implemented and shared independently:

Once we have this plugin ready, we can require it, and pass to the function:

You can see other examples of transform plugins in the optimizer/transforms or in the compat-transpiler/transforms directories.

The generator module generates regular expressions from corresponding AST nodes. In Node the module is exposed as method.

Optimizer transforms your regexp into an optimized version, replacing some sub-expressions with their idiomatic patterns. This might be good for different kinds of minifiers, as well as for regexp machines.

From CLI the optimizer is available via ( ) option:

The optimizer module is also available as an ESLint plugin, which can be installed at: eslint-plugin-optimize-regex.

The compat-transpiler module translates your regexp in new format or in new syntax, into an equivalent regexp in a legacy representation, so it can be used in engines which don't yet implement the new syntax.

To use the API from Node:

From CLI the compat-transpiler is available via ( ) option:

The compat-transpiler module is also available as a Babel plugin, which can be installed at: babel-plugin-transform-modern-regexp.

Besides future proposals, like named capturing group, and other which are being currently standardized, regexp-tree also supports non-standard features.

One of such featurs is flag, which enables extended mode of regular expressions. In this mode most of whitespaces are ignored, and expressions can use #-comments.

This is normally parsed by the regexp-tree parser, and compat-transpiler has full support for it; it's translated into:

The regexp extensions are also available as a Babel plugin, which can be installed at: babel-plugin-transform-modern-regexp.

To create an actual JavaScript object, we can use method:

It is also possible to execute regular expressions using API method, which has support for new syntax, and features, such as named capturing group, etc:

Below are the AST node types for different regular expressions patterns:

A basic building block, single character. Can be escaped, and be of different kinds.

The same value, flag is added:

Escaping is mostly used with meta symbols:

A meta character should not be confused with an escaped char.

Among other meta character are: , , , , , , (backspace char), , , , , , .

A char preceded with , e.g. , which stands for :

A char preceded with , followed by a HEX-code, e.g. (symbol ):

Char-code started with , followed by an octal number:

Unicode char started with , followed by a hex number:

Character classes define a set of characters. A set may include as simple characters, as well as character ranges. A class can be positive (any from the characters in the class match), or negative (any but the characters from the class match).

A positive character class is defined between and brackets:

A negative character class is defined between and brackets:

An AST node is the same, just property is added:

As mentioned, a character class may also contain ranges of symbols:

The range value can be the same for and , and the special range character is treated as a simple character when it stands in a char position:

An alternative (or concatenation) defines a chain of patterns followed one after another:

The disjunction defines "OR" operation for regexp patterns. It's a binary operation, having , and nodes.

The groups play two roles: they define grouping precedence, and allow to capture needed sub-expressions in case of a capturing group.

"Capturing" means the matched string can be referred later by a user, including in the pattern itself -- by using backreferences.

Char , and are grouped, followed by the char:

As we can see, it also tracks the number of the group.

A capturing group can be given a name using the syntax, for any identifier .

For example, a regular expressions for a date:

We have the following node (the property with value is added):

Sometimes we don't need to actually capture the matched string from a group. In this case we can use a non-capturing group:

Char , and are grouped, but not captured, followed by the char:

The same node, the flag is :

A capturing group can be referenced in the pattern using notation of an escaped group number.

A named capturing group can be accessed using pattern, and also using a numbered reference.

Quantifiers specify repetition of a regular expression (or of its part). Below are the quantifiers which wrap a parsed expression into a node. The quantifier itself can be of different kinds, and has node type.

The quantifier is short for .

The quantifier is short for .

The quantifier is short for .

Explicit range-based quantifiers are parsed as follows:

The type of the quantifier is , and , and properties have the same value:

An open range doesn't have max value (assuming semantic "more", or Infinity value):

An AST node for such range doesn't contain property:

A closed range has explicit max value: (which syntactically can be the same as min value):

If any quantifier is followed by the , the quantifier becomes non-greedy.

Assertions appear as separate AST nodes, however instread of manipulating on the characters themselves, they assert certain conditions of a matching string. Examples: -- beginning of a string (or a line in multiline mode), -- end of a string, etc.

The assertion checks whether a scanner is at the beginning of a string (or a line in multiline mode).

In the example below is not a property of the symbol, but a separate AST node for the assertion. The parsed node is actually an with two nodes:

Since assertion is a separate node, it may appear anywhere in the matching string. The following regexp is completely valid, and asserts beginning of the string; it'll match an empty string:

The assertion is similar to , but asserts the end of a string (or a line in a multiline mode):

And again, this is a completely valid regexp, and matches an empty string:

The assertion check for word boundary, i.e. the position between a word and a space.

Matches in , but not in :

The is vice-versa checks for non-word boundary. The following example matches in , but not in :

A node is the same:

These assertions check whether a pattern is followed (or not followed for the negative assertion) by another pattern.

Matches only if it's followed by :

Matches only if it's not followed by :

A node is similar, just flag is added:

These assertions check whether a pattern is preceded (or not preceded for the negative assertion) by another pattern.

Matches only if it's preceded by :

Matches only if it's not preceded by :|||

Regular Expressions parser in JavaScript