Terminal string styling done right, in Python

colorful supports all major Python versions: 2.7, 3.2, 3.3, 3.4, 3.5 and 3.6. 

 We recommend to use the latest version released on PyPI:

Note: on a Windows system it will install as a dependency to ensure proper ANSI support.

colorful does not require any special setup in order to be used:

See the Style a string section for more information!

These days terminals not only support the ancient 8 ANSI colors but often they support up to 16 Million colors with true color. And if they don't support true color they might support the 256 ANSI color palette at least.

By default colorful tries to auto detect the best supported color mode by your terminal. Consult for more details.

However, sometimes it makes sense to specify what color mode should be used.

 colorful provides multiple ways to do so:

If you change the color mode during runtime it takes affect immediately and globally.

colorful's Python API is based on color names like in . During runtime these color names are translated into proper ANSI escape code sequences supported by the color mode in use. However, all color names are registered in a color palette which is basically a mapping between the color names and it's corresponding RGB value. Very much like this:

Note: Depending on the color mode which is used the RGB value will be reduced to fit in the value domain of the color mode.

The default color palette is the X11 rgb.txt palette - it's shipped with colorful, thus, you don't have to provide your own. If you wish to have another file as your default color palette you can set the environment variable to this file:

colorful supports to update or replace the default color palette with custom colors. The colors have to be specified as RGB hex or channel values:

colorful supports some famous color palettes using what's called styles in colorful:

The following styles are already supported:

Note: if you know some awesome color palettes which could be a new style in colorful, please contribute it!

colorful provides multiple ways to use style a string. Most useful and expressive is probably the method syntax where you specify the modifiers and colors in the method name itself and pass the string as argument to this method. However, you can use all the following methods to achive similars things:

The method syntax can be one of:

Note that multiple s can be specified at once.

The available colors depend on the color palette you are using. By default all X11 rgb.txt colors are available.

The type of the return value of such a style method is . It correctly supports all methods including .

As you can see from the syntax in the section name, colorful supports nesting styles. See Nesting styles.

colorful implements the and protocol to combine styles and pipe strings into them:

Note: the piping has the same effect as doing a method call to the style.

 So you could do

colorful will replace the with the correspnding style. It's not necessary to pass a colorful object for to - colorful will handle that. Every other format argument ( ) has to be pass to the call as args or kwarg.

Note: The same syntax, modifiers and colors for the style in can be used as for (1) Style a string with a method call.

The method accepts the same arguments as the Python 3.X built-in print() function.

Note: for Python 2 you have to import the print function: .

Note: The same syntax, modifiers and colors for the style in can be used as for (1) Style a string with a method call.

colorful supports to nest styles with it's method call syntax when setting the parameter to . If you are using like in the first example below you don't even need the flag!

The following examples show the behavior:

colorful correctly supports the protocol ( ) on the styled strings. As mentioned above, when you style a string a object is returned. This object returns the length (when calling ) as it would be for the unstyled string to integrate styled strings seemlessly into your application.

colorful provides a hand full of convenient context managers to change the colorful settings temporarily:

This project is published under MIT.

A Timo Furrer project.

- -|||

colorful - Terminal string styling done right, in Python :snake: :tada: