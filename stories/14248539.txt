The library grew from the idea that state should be just as flexible as your React code; the state containers you build with are just components, and you can compose them however you'd like. In this way, it attempts to address the often exponential relationship between application size and complexity in growing projects.

Like Flux and React in general, builds on the principle of unidirectional flow of data. However, it does so in a way that feels idiomatic to ES2015+ and doesn't get in your way.

When building an application, it can replace , , , , , , , and potentially , depending on how you're using it.

Its design philosophy aligns closely with the Zen of Python:

This guide is intended to get you familiar with the way of doing things. If you're looking for something specific, take a look at the API Documentation. If you're just starting out with , read on!

Most state management solutions for React put all state in one place. doesn't suffer from that constraint, but it is a good place to start. So let's see what that might look like.

In the above example, we define a new state container type using , and provide it an argument. You can think about the arguments passed to as the schema for your state container; we'll get more familiar with the other possible arguments later in the guide.

The function is invoked whenever the component that it is wrapping is instantiated. But so far, our state container is not wrapping anything, so let's expand our example a bit.

That's a very basic React app. Let's see what it looks like to add some very basic state to that application.

Alright, we're getting close. But we're missing one important piece: .

Like , is a component wrapper. It links your application component with the state that it has access to.

It may not be readily apparent to you why is necessary, so let's make it clear what each function is doing. With , you define a state template that can then be applied to any component. Once applied, that component will act as a "headquarters" for a piece of state and the effects that transform it (more on that later). If you had a reason, the same template could be applied to multiple components, and they'd each have their own state based on the template you defined.

But that only tracks state. It doesn't make that state accessible to the developer. That's what is for.

In early versions of , the state was directly accessible to the component that wrapped. However, that meant that whenever a state change occurred, the entire tree would need to re-render. intelligently tracks the pieces of state that you actually access, and a re-render only occurs when those pieces of state undergo a change.

Alright, so let's finalize our example with all the pieces in play.

As was mentioned above, the -wrapped component isn't really the one that provides access to state. That's 's job. So what would stop you from injecting state into a child component that isn't containing state itself? The answer is nothing!

Let's modify the example so that we're injecting state into a child component.

Let's review what's going on here.

We could insert another component at the end, and into the component, and it would work the same.

Alright, so we know how to setup state containers, give them an initial state, and consume that state from child components. But all of this is not very useful if state is never updated. That's where effects come in.

Effects are the one and only way to change state in your application. These effects are defined as part of your state container template when calling , and they can be invoked from anywhere that state has been injected (with ).

Let's take a look at that first part.

You might be wondering why we have that extra right before in the definition. That'll be explained in the next section - for now, let's look at all the other pieces.

In the above example, we've defined an effect that, when invoked, will update the in our state container by adding .

Since updating an element of state based on previous state (and potentially new information) is something you'll be doing often, provides a shorthand to make this a bit more readable:

Now let's look at how you might trigger this effect:

Wherever your is in your application, the state and effects it references will be accessible, so long as the state container is somewhere further up in the tree.

If you've used Redux, effects are roughly comparable to an action-reducer pair, with a couple of important differences.

The first of those differences relates to asychronicity. Under the hood, relies heavily on s to schedule state updates. In fact, the following effects are all functionally equivalent:

To put it explicitly, the value you provide for each key in your object is:

Step 2 can optionally be omitted, since wraps these values in .

For most developers, this pattern is probably the least familiar of those that relies upon. But it allows for some powerful and expressive state transitions with basically no boilerplate.

For example, any number of things can occur between the time that an effect is invoked and the time that the state is updated. These "things" might include doing calculations, or talking to an API, or integrating with some other JS library.

So, you might define the following effect:

In other words, any action that your application might take, that ultimately could result in a state change can be simply expressed as an effect. Not only that, but this pattern also allows for effects and UI components to be tested with clean separation.

And, perhaps most importantly, this pattern allows for intermediate state.

So far, we haven't see any arguments to the first, outer-most function in our effect definitions. In simple scenarios, this outer-function may seem unnecessary, as in the illustration above.

But what about cases where you want state to be updated part-way through an operation? You could put all this logic in your UI code, and invoke effects from there multiple times. But that's not ideal for a number of reasons:

Fundamentally, the problem is that this pattern violates the principle of separation of concerns.

Well, we've already defined an effect as a function that, when invoked, will resolve to another function that transforms state. Why couldn't we re-use this pattern to represent this "part-way" (or intermediate) state? The answer is: nothing is stopping us!

The first argument passed to an effect in the outer function is the same object that is exposed to components where state has been injected. And these effects can be invoked in the same way. Even more importantly, because effects always resolve to a , we can wait for an intermediate state transition to complete before continuing with our original state transition.

That might be a lot to take in, so let's look at an example:

There's a lot going on there, so let's go through it piece by piece.

In the above example, has a synchronous-like behavior - it immediately resolves to a state update function. But it could just as easily do something asynchronous, like make an AJAX call or interact with the IndexedDB API.

And because all of this is just composition, you can put together helper functions that give consistency to intermediate state updates. Here's an example:

Which could be consumed like so:

But what if you want to update state with some value that you captured from the user? In Redux parlance: what about action payloads?

If you were looking closely, you may have noticed we already did something like that when we invoked .

Whether you are invoking an effect from your UI code or from another effect, you can pass arguments directly with the invocation. Those arguments will show up after the argument in your effect definition.

And it could invoked from your component like so:

As an application grows, it becomes increasingly important to have effective organizational tools. This is especially true for how you store and transform data.

Consider the following state container:

Let's say that we're implementing a component and we want to display the user's full name. We might write that component like this:

That seems like a pretty reasonable piece of code. But, even for a small piece of data like a full name, things can get more complex as the application grows.

What if we're displaying that full name in multiple components? Should we compute it in all those places, or maybe inject state further up the tree and pass it down as a prop? That can get messy to the point where you're passing down dozens of props.

What if the user is in a non-English locale, where they may not place given names before family names? We would have to remember to do that everywhere.

And what if we want to derive another value off of the generated value? What about multiple derived values, derived from other derived values? What if we're not dealing with names, but more complex data structures instead?

's answer to this is computed values.

You've probably run into something like this before. Vue.js has computed properties. MobX has computed values. Redux outsources this concern to libraries like . Ultimately, they all serve the same function: exposing compound values to the UI based on simple state values.

Here's how you define computed values in , throwing in some of the added complexities we mentioned:

Note: This is not a replacement for a proper internationalization solution like , and is for illustration purposes only.

Here we see two computed values, and . They both rely on the state value, and actually relies upon , whereas relies on the given and family names.

How might that be consumed?

In another component, we might want to just use the value:

Hopefully you can see that this can be a powerful tool to help you keep your code organized and readable.

Here are a handful of other things that will be nice for you to know.

That's all you need to know to use computed values effectively!

We started this guide by noting that, while most React state libraries contain state in a single place, approaches things differently.

Before we dive into how that works, let's briefly consider some of the issues that arise with the centralized approach to state management:

These are constraints that aims to address. Let's take a look at a minimal example:

Its important to notice here that was able to access state values from both its and its . All state keys will be accessible from the , unless there is a key conflict between and (in which case "wins").

This pattern allows you to co-locate your code by feature, rather than by function. In other words, if you're rolling out a new feature for your application, all of that new code - UI, state, effects, etc - can go in one place, rather than scattered across your code-base.

Because of this, refactoring becomes easier. Want to move a component to a different part of your application? Just move the directory and update the import from the parents. What if this component accesses parent state? If that parent is still an anscestor, you don't have to change a thing. If it's not, moving that state to a more appropriate place should be part of the refactor anyway.

But one word of warning: accessing parent state can be powerful, and very useful, but it also necessarily couples the child state to the parent state. While the coupling is a "loose" coupling, it still may introduce complexity that should be carefully thought-out.

Child effects can also trigger parent effects. Let's say your UX team has indicated that, whenever an API call is in flight, a global spinner should be shown. But maybe the data is only needed in certain parts of the application. In this scenario, you could define and effects that track how many API calls are active. If above , you show a spinner. These effects can be accessed by call-specific effects further down in the state hierarchy, like so:

Before wrapping up, let's take a look at one additional benefit that brings to the table: the ease of test-writing.

If you hadn't noticed already, all of the examples we've looked at in this guide have relied upon stateless functional components. This is no coincidence - from the beginning, a primary goal of was to encapsulate all state in state containers. That means you shouldn't need to use React's at all.

Here's the bottom line: because all state can be contained within state containers, the rest of your application components can be "dumb components".

This approach allows you to test your state and your components completely independent from one another.

Let's take a look at a simplified example from above, and then dive into how you might test this application. For the purposes of this example, I assume you're using Mocha, Chai, Sinon, sinon-chai, and Enzyme.

And then our state template:

Remember, our goal here is to test state and UI in isolation. Read through the following example to see how you might make assertions about 1) data-driven UI content, and 2) the ways in which your UI might trigger an effect.

That takes care of your SFCs. This should really be no different than how you might have been testing your presentational components in the past, except that with , this is the only sort of testing you need to do for your React components.

Next up is state. As you read through the example below, take note that we can make assertions about the initial state and any expected transformations to that state without involving a React component or rendering to the DOM.

That's it for testing!

We hope that you found this guide to be helpful!

If you find that a piece is missing that would've helped you understand , please feel free to open an issue. For help working through a problem, reach out on Twitter, open an issue, or ping us on Gitter.

You can also read through the API docs below!

This is used to define a state container, which in turn can wrap one of your application components.

The argument is an object with one or more of the following keys: , , , and .

A function defining the state of your state container when it is first initialized.

This function is invoked both on the server during a server-side render and on the client. However, you might employ environment detection in order to yield divergent results.

Effects are the mechanism by which state is updated.

The value should be an object, where the keys are function names (that you will later) and the values are functions.

Each effect will be provided one or more arguments: an reference (see note below), and any arguments that are passed to the function when they're invoked in application code.

The return value is either 1) a function that takes in old state and returns new state or, 2) a Promise that resolves to #1.

This may seem opaque, so please refer to the guide for information on how to use them effectively.

NOTE: IThe object that is passed to each effect is not the same as the outer effects object that you define here. Instead, that object is a composition of the hierarchy of stateful effects.

Each state container can define a special effect called . This effect will be implicitly invoked in two circumstances:

The object allows you to define compound state values that depend on basic state values or other computed values.

The value provided as the option should be an object where each key is the name by which the computed value will be referenced, and each value is a function taking in state and returning a computed value.

Middleware is defined per state container, not globally. Each middleware function will be invoked in the order provided whenever a state change has occurred.

With middleware, you should be able to inject new state values, intercept effects before they begin, track when effects complete, and modify the way in which sub-components interact and respond to state containers further up the tree.

To write middleware effectively, you'll probably want to take a look at the Freactal's internal method. Fortunately it is pretty straightforward.

The following is an example that will log out whenever an effect is invoked, the arguments it was provided, and when the effect completed:

While supplies the means by which you declare your state and its possible transitions, is the means by which you access and from your UI code.

By default, will detect the keys that you access in your component, and will only force a re-render if those keys change in the upstream state container.

In the above example, would only be re-rendered a second time if changed in the upstream state container.

However, it is possible to explicitly define which keys you want to "listen" to. When using this form, the keys that you specify are injected into the wrapped component as props.

In this example, would re-render when changed, but it would also re-render when changed, even though that value is not used in the component.

These functions are used to deeply initialize state in the SSR context and then re-hydrate that state on the client. For more information about how to use these functions, see the below documentation on Server-side Rendering.

You may find the following functions handy, as a shorthand for common tasks.

This handy helper provides better ergonomics when defining an effect that updates state, regardless of the previous state.

It can be consumed like so:

Which is equivalent to the following:

is provides a shorthand for updating an element of state that is dependant on the previous state.

It can be consumed like so:

Which is equivalent to the following:

Any arguments that are passed to the invocation of your effect will also be passed to the function you provide to .

Historically, server-side rendering of stateful React applications has involved many moving pieces. aims to simplify this area without sacrificing the power of its fractal architecture.

There are two parts to achieving SSR with : state initialization on the server, and state hydration on the client.

Keep in mind that, if you have a state container whose state needs to be initialized in a particular way, you should take a look at the effect.

supports both React's built-in method, as well as the newer Rapscallion.

On the server, you'll need to recursively initialize your state tree. This is accomplished with the function, provided by .

You can find a full example, including a server and SSR here.

The above method involves a partial render of your application ( ), ultimately relying upon to transform the VDOM into an HTML string. This is because is synchronous, and is asynchronous by design.

Because Rapscallion is also asynchronous by design, there is even less ceremony involved.

Using one of the above methods, you can capture your application state while server-side rendering and insert it into the resulting HTML. The final piece of the SSR puzzle is re-hydrating your state containers inside the browser.

This is accomplished with in the context of your function.

Assuming you've serialized the SSR state and exposed it as , your root state container should look something like this:

In SSR, your will be provided as your initial state. In the browser, the initial state will be read from .

Assuming you've done this with your root state container, you can similarly re-hydrate nested state containers like so:

Note that there is no need to pass to the function for nested state containers.|||

freactal - Clean and robust state management for React and React-like libs.