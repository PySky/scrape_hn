Don't worry, this is not YAMA (yet another monad article)! Instead, I want to talk about a library I've recently released that offers a helpful twist on typical functional programming ("FP") operations (like , , etc).

Before we jump in: if you're like me and have tried to understand FP (and how to apply it to JavaScript), only to be frustrated and intimated by crazy terminology like "functors" or fancy notation like , you might want to check out my latest book, Functional-Light JS (which you can read for free online!).

My book has a very different take; it approaches FP informally, from the ground-up, without being as heavy on terminology, and relies on almost no notation. The goal is to pragmatically explain the important fundamental concepts in ways you can actually use in your programs.

Note: From here on I'm going to expect you're familiar with ES6 features like spread and destructuring. Still fuzzy on those? No worries, I wrote a book on that, too! Check out You Don't Know JS: ES6 & Beyond, especially Chapter 2.

There's already plenty of great FP libraries in JS, so why did I have the idea to build a new one!? Let me explain my motivations. Bear with me, because I want you to fully understand them to get why we need YAFPL. :)

Let's start first by looking at some code which illustrates one of my many frustrations as I've been learning and trying to work more with FP in my JavaScript. I'm going to use Ramda for this comparison, but any ol' regular FP-JS library will do:

As with all methods in Ramda, is curried, which means that even though it expects 2 arguments, we can call it with just , making a more specialized function that's then waiting for an array to map over. That lets us then call with different arrays, uppercasing each value in them, respectively.

What you may not realize is that inherently, the order of these arguments matters. expects the mapper function first and then the array. In this case, that's convenient for us because we want to specialize it in that sequence (mapper function first, array(s) later).

But what if we need to specialize in a different sequence (array first, mapper function later). This is possible, but takes a little extra work:

We want to specify first, making a that later takes a mapper function. Our specialization is with the second argument instead of the first.

To accomplish this, we have to the function. makes a function wrapper that swaps the first two arguments when passing to the underlying function. By flipping the argument order of , it now expects the array first, and the mapper function second.

In other words, to work with standard FP methods across any of the FP libraries, you have to remember their argument order -- keep those docs handy! -- and if it happens to be in an inconvenient order, you're stuck doing this juggling. On more than one occasion, I've had to flip a method, pass in an argument, flip it again to pass in another argument, etc. All that juggling can quickly get out of hand!

Another frustration that arises from positional arguments is when you need to skip one (probably because it has a default you want to fall back on). For this example, I'm going to use :

The function expects arguments in this order: , , . The common understanding of in JS is that if you don't want to provide an , it doesn't just default to some magic empty value, but rather changes the behavior of the operation itself. Basically, it starts the reduction with the second element in the array, using the first element as the ; this results in overall one less call to the reducer function ( ).

Unfortunately, JS doesn't let us just omit an argument in a call list, like . That would be cool, but no such luck. Instead, awkwardly, we have to pass a placeholder. Lodash lets us use as the placeholder by default, but in general, you typically have to use .

Tip: There is a way to use a syntactic trick to avoid needing the placeholder in a normal JS function call: . What we do is use an array literal, which does allow "ellision" (skipping a value), and then we spread it out using the ES6+ spread operator. here would receive arguments , , , and its first four parameter positions. I'm not sure if that hoop jumping is any better (and it may have some perf downsides!).

In any case, juggling argument order and jumping through hoops to skip arguments at the call site is a common frustration in JS. It just happens to be a rather acute pain in FP as you end up needing to use those API methods in different ways more often than with just normal application functions.

Some languages have a syntax for naming arguments at the call site (not just naming parameters in the function declaration). For example, in Objective-C:

Here, you're calling the function, and telling the system which parameter each value should be applied to, regardless of what order they may be listed in that function's declaration.

The benefit of named arguments is that you control at the call site which order you want to list arguments, and you also can just not list one if you don't want to pass a value for it. The tradeoff is that you have to remember what the parameters are called. Typically, languages and packages will adopt standardized naming conventions to help the parameter names be more intuitive and memorable.

Let me just say, this is not an either/or situation in my mind, in terms of code readability. There are times the positional arguments are more preferable, and clearly times when named arguments are more preferable. Ideally, a language would let you pick at the call site as you desire.

Unfortunately, JS does not have named arguments. However, we do have a pattern that gives us pretty much all the benefits of named arguments. For example:

Note: Typically you will want a style function declaration to look like: . That parameter default means the function degrades gracefully if called without an object at all.

With we're using traditional positional arguments style, including the middle one ( ) having a default. With however, we're using the JS named-arguments idiom. First, we use parameter object destructuring in the parameter list. That essentially means we're declaring that we expect to always be called with a single object as its argument. That object's properties are then destructured to be interpreted as the function's actual individual arguments, , , and ; again, also has a default.

The call site for and differ, too. For , we pass in an object with properties instead of individual values with an as positional placeholder. The object-argument can list properties (named arguments) in any order, and omit any that it doesn't want to specify. Nice!

My personal rule of thumb is that I now prefer to define any function that takes 3 or more arguments (especially if one or more have defaults!) with the named-arguments style. But that's only helpful when I'm in control of the function declaration and can make that decision.

What if I have a function like (or any other normal function in the application!) but I want to use named arguments at the call site?

To do so, we need to adapt a positional-arguments style function to be named-arguments style. Let's imagine such a helper for that; we'll call it :

Since objects are fundamentally unordered, we pass a array which lists the property names in the order we want them to map to the positional arguments of the underlying function.

Let's use this utility now:

Unfortunately, the resulting is no longer usefully curried, so we can't really take advantage of this capability in any interesting way. Wouldn't it really be cool if we could do:

To do that, we'd probably need an that was smart enough to automatically curry across multiple named arguments calls. I won't show how we'd do that, for brevity sake. But it's an interesting exercise for the reader. Another wrinkle: is there any way this adapter could figure out what property names to use by default? It is possible, if you parse the function definition (string regex parsing!). Again, I'll leave that for the reader to explore!

What about adapting the other direction? Say we have a named-arguments style function, but we just want to use it as a normal positional-arguments style function. We need a companion utility that does the inverse of ; we'll call this one :

And using it:

Same problem here with currying. But at least we can now envision how armed with these two utilities, we can interoperate with positional-arguments style and named-arguments style functions, as we see fit!

Reminder: all of this is entirely separate from whether we're dealing with an FP library or not. These concepts apply (pun intended) with any of your functions in your application. You can now freely define functions with either style as appropriate, and choose at the call site how you want to interface with a function. That's very powerful!

Good grief, that was a really long preamble to ostensibly the main topic of this article, which is supposed to introduce a new FP library I've released. At least you understand why I wrote it. So now let me get to it!

When conceiving of / and playing around with them, I had this thought: what if I had a whole FP library where all the methods were already in named-arguments style? Of course, that library can also provide the / helpers to make interop easier. And, for convenience, shouldn't that library also just export all the same methods (in a separate namespace) using the standard positional-arguments style? Ultimate choice in one FP lib, right!?

That's what FPO (pronounced "eff-poh") is all about. FPO is a JS library for FP, but its core methods are all defined in the named-arguments style. As is common with FP libraries, all the methods are also curried, so you can provide arguments in whatever order and sequence you need! And has all the positional-arguments style methods if you want them.

Want to jump straight to the docs?

is named-arguments style, and already curried. Very easy to use however you want!

As you'll notice, it expects its mapper function to also follow named-arguments style. If you instead want to pass a standard-style mapper function, just it first:

Applying and currying are easy to mix together in your own code, too:

But don't forget easy skipping of named arguments for defaults:

Lastly, the standard positional-argument style methods are still available if you want them:

Note: BTW, if you don't like typing or in front of all your methods, just alias those objects to whatever you prefer, like . Eventually, FPO will even support ES6 modules style imports where you'll be able to import only the methods you want, into your own lexical scope!

That's a quick overview of what you can do with FPO. Go check out the README overview and API Docs for further information!

FPO has a fairly straightforward approach for parameter naming conventions, which should be reasonable to intuit and learn. A glimpse:

The full list of rules are listed here.

I'm not trying to compete with libraries like Ramda or lodash/fp. They're great. I just wanted to provide some additional flexibility. And in my FP coding so far, I'm finding the tradeoffs and flexibility to be a nice improvement!

I hope you find FPO useful! Let me know in the comments, or chime in on the repo issues if you have suggestions or questions.|||

Introducing FPO, a JS lib for functional programming (FP) that supports named-argument style methods.