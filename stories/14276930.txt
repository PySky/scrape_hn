Mull project is slowly transforming from an early-stage research project to a tool that allows us to do a mutation testing analysis on real-world projects. As we develop Mull further and apply mutation testing to different projects, we learn more about a behavior of a code and a test code.

This post describes interesting and unusual application of mutation testing method to a single function, not to a whole project.

In mutation testing theory there is a concept of “mutation score” which is defined as:

Mutation testing aims at achieving 100% mutation score on a codebase because this 100% means that code’s tests are so good that they can detect all of the possible mutations that can be applied to that code. See Mutation Testing on Wikipedia where this is fully explained.

Let’s now think about what mutation score means for a single function. Let’s consider a function and with one test for it:

Let’s imagine that we have run a mutation testing tool on this one test and got 10 mutants generated with a mutation score of 50%. Obviously, in this simple example, these 10 mutations were generated somewhere in function. Our test failed on 5 mutations (these 5 “mutants were killed”) and passed on the other 5 mutations (these 5 “mutants were not killed”).

If we think for a moment that each of these 10 mutations can substitute for some real-world problem like a hardware error, cosmic rays, malevolent interference, then we can read this mutation score as the following:

mutation score of 50% for 10 mutations in 1 function => 10 different bad things can happen to this function and 5 of these will make the final result incorrect.

Let’s pretend that we do want our function to work somewhere where having the result of this function correct is super-critical. Then mutation score becomes an interesting metric that we can use to evaluate how reliable our function is:

if we can write our function in a way that mutation testing applied to its tests will always produce a mutation score of 0%, then we can consider our function tolerant to these errors.

Of course, the number of errors that we can simulate is limited by a number of mutation operators that a particular tool supports. In our case Mull supports

Given this very limited number of mutation operators let’s write such a function that would give us a mutation score of 0%.

If we run Mull against this code, it finds only one mutation point: operator which for expression generates a mutation :

Final report contains 1 mutation which is killed by test:

Obviously, we cannot use the original algorithm code as is because will break it and we will not have a valid result of the algorithm. In my solution I found that I had to introduce a redundancy: 3 versions of the same algorithm located in different functions so that can only break one of them. The number 3 comes from a minimal number of 2 required for “consensus”: to decide on which 2 of 3 algorithms work as expected.

Using mutation testing score as a metric for a reliability of a single function is an interesting application of mutation testing tool. I am looking forward to running Mull on this code when Mull supports much more mutation operators than it supports currently.

I would be happy to learn about your experience with writing unbreakable functions or if you know if there are any white papers about attempts to measure a reliability of a source code. Feel free to drop me a line.|||

This post describes interesting and unusual application of mutation testing method to a single function, not to a whole project.