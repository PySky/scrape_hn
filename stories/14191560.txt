Kailua is an experimental type checker and integrated development environment (IDE) for the Lua programming language (currently only Lua 5.1 is supported).

THIS IS VERY EXPERIMENTAL PROJECT AND NO WARRANTY OR SUPPORT IS PROVIDED!

Kailua can be used as a standalone checker or an IDE plugin.

To install a standalone checker, install Rust first (1.15 or later required), then type the following:

You can run now.

You can also run , if you have or in that directory. See the following section on the configuration format.

Caution: Currently the extension only works in Windows due to the packaging issue.

Kailua can be used as an IDE support for Visual Studio Code. Install Kailua by typing from the Quick Launch ( ).

You will see a warning that the configuration file is missing when you open a folder containing Lua codes. You need it for real-time checking.

You can either create by hand, or search "Kailua" from the Command Palette ( ) to edit one.

The following content is required for , in case you are editing it by hand:

{ , You can also put the following: "package_path": "<the value of `package.path`, determined from assignments if missing>", "package_cpath": "<the value of `package.cpath`, determined from assignments if missing>", }

You need to reload the current window ( or ) to apply the configuration.

Once you've set the entry point, you can write your first Kailua code:

Play a bit with this code to see which errors Kailua can detect.

Kailua is a subset of valid Lua code---you don't need any transpilation or compilation. The additional annotations are described in special comments:

It is valid anywhere a new name can be possibly defined: (either individual names or statement), (arguments), (individual names) and assignment (either individual names or statement). When used right after the name, for the ease of typing, you can put a comma or closing parenthesis before the type like this: For the common case of defining multiple names you can put types after the statement. In this case types are delimited by commas. It is valid only after the closing parenthesis of function arguments. It is valid to put (for the last argument) and in the same line. It is valid before the keyword (yes, also for anonymous functions). This is equivalent to and , but much more readable. All names should be identical to the corresponding declarations. Variadic arguments can be written as at the end of arguments. Multiple returns need parentheses. The general rule of the thumb is that all functions have to be typed with either or unless it is obvious from the preceding context. This allows you to write a code like , but only when is known to accept such a function. It is same to , but for declarations like . Kailua tries to infer the type of , and if it's not possible you should use and instead for the clarity. is a special directive for the type checker. The most important directive is , which loads the corresponding built-in names and also implicitly specifies what language variant is currently in use. The only supported name so far is , for the vanilla Lua 5.1. It is recommended to put it to the first non-comment line in the entry point. can be used to declare a type alias. There are three flavors of typa alises: is locally scoped (much like statements), is globally scoped (much like ), and no modifier indicates that the type is exported from the current file and they should be locally visible after . Only local types can be in the inner scopes. Unlike variable names, inner type names should not overwrite outer names. overrides the type for given name. The keyword forces the global assignment, otherwise a new scope is created like statements. It is useful for sidestepping the checker issue, but it is also highly unsafe. Use at your own risk. More directives are likely to come.

The equal kind of special comments can span multiple lines.

The following basic types are recognized:

or , integer and string literals are valid subtypes of , and , respectively. The table type is divided into four useful cases. Importantly, first two cases are not automatically inferred from the use and should be explicitly annotated like . for records, whose keys are strings and fixed at the check time. You can use semicolons in place of commas. Explicitly declared records are "inextensible" by default, meaning that the list of fields is complete and cannot be altered. You can make it extensible by putting at the end of fields; this allows a lazy initialization of records like . On the other hands, a normal Lua table is implicitly typed as extensible records, only made inextensible when required. for tuples, whose keys are consecutive integers. Otherwise they are similar to records. or for functions. can be multiple types, in which case you need parentheses ( ). Arguments can be named like . for union types. They are mostly useful for literal types (e.g. ). Kailua has very limited support for checking other kinds of union types. has no type information. is the only way to make it useful. (note the case) is a hole that the type checker always accepts. and are compatible; and are not. As this thwarts the basic of type checking, use at your own risk.

The Kailua types are by default not checked for . That is, you can assign to but you can also add two s; the valid Kailua code can still result in a runtime error therefore. This restriction was required for making a practical type checker without changing the source programming language.

You can opt in two other -handling modes if you need to make it explicit. As they are (transitively) freely assignable, consider them more a machine-readable documentation.

Also, the table values are always or (for the obvious reason).

Finally, types for the names and table values can optionally have a prefix. You cannot modify the innard of types: . You can still assign to them (otherwise this type won't be useful at all).

As annotating everything is not practical, Kailua supports two ways to avoid the type checking with more localized guarantees:

disables the type checking for the following function. Kailua essentially believes the specified function type, which can be no longer omitted. You can override what file to check by having files. When was used with a check-time string Kailua makes use of and set. For , it will try first before reading a file . For , it will always as would be probably binary. (Note that this will normally result in two extensions unless you have a sole in the search paths.) files would frequently use as you should assume that the original code has given types.

The internal documentation is available in a different file.

Kailua is dual-licensed under the MIT license and Apache license 2.0 at your option. By contributing to Kailua you agree that your contributions will be licensed under these two licenses.|||

kailua - ðŸŒ´ Type Checker and IDE Support for Lua