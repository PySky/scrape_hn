This comes as a standalone single-file which, among the other things, enables a configurable dashboard showing the most relevant information during the program execution. Its main goal is to reduce the number of GDB commands issued to inspect the current program status allowing the programmer to focus on the control flow instead.

Just place in your home directory, for example:

Follows the list of bundled default modules. Refer to the GDB help system for the full syntax.

By default the dashboard is displayed in the GDB terminal but the command of both the dashboard and modules can change this behavior. When the output of a module is not specified then the global output is used.

It may be useful to move the dashboard to another terminal so the main terminal can be used exclusively for GDB commands and target I/O.

It is also possible to display the output of one or more modules to individual terminals. If two or more modules share the same output, they will be stacked as usual.

Pushing this even further, one could use a web browser as an auxiliary terminal using gotty. Of course, using the method described above, one can also display the output of individual modules in one or more web browser instances.

The GDB documentation is available at . Just like any GDB command, abbreviations are possible. Moreover, the alias resolves to .

This is the root command and it is used to manually redisplay the dashboard.

By default the dashboard is written to the GDB console but it is possible to redirect its output to a file or even to another terminal. If the target is a valid terminal TTY then its width is used to format the dashboard, otherwise fall back to the width of the main GDB console.

Without argument reset this setting to the default.

Enable or disable the automatic display of the dashboard whenever the target program stops. The dashboard is enabled by default and even when it is disabled, it can be manually displayed with .

Sometimes it may be convenient to redraw the dashboard even if the target program has not changed its execution status, for example when the programmer switches the currently selected frame with the or commands. It is possible to do so by setting up some GDB hooks in the user-defined init file, for example:

By default, all the modules are enabled and placed within the dashboard in alphabetical order. As the number of modules grows, it is important to decide which modules will be part of the dashboard, and where.

Each directive is in the form , when the is present then the corresponding module is disabled by default. The order of directives denotes the display order within the dashboard. For example:

Modules which do not appear in the list are disabled and placed after the last element in alphabetical order.

When executed without arguments, this command lists all the available modules in the form of a list of directives followed by the status of the output files of the modules.

Access to the stylable attributes of the dashboard, see Stylable attributes. For example, to change the prompt to something more familiar:

The argument is parsed as a Python literal and converted to the proper type.

When only the name is specified this command shows the current value, whereas without arguments prints all the attributes.

Every module adds its own subcommand which is used to toggle the enable flag and to redisplay the dashboard.

Modules may also declare additional subcommands, see from GDB.

There are two additional predefined subcommands: and .

If a module declares some stylable attributes then the command will be available. Its functioning is equivalent to the command but it does apply to a module.

Similarly, the mimics the command but allows a finer grain of operation.

Files in are executed in alphabetical order, but the preference is given to Python files. If there are subdirectories, they are walked recursively. The idea is to keep separated the custom modules definition from the configuration itself.

By convention, the main configuration file should be placed in (say ) and can be used to tune the dashboard styles and modules configuration but also the usual GDB parameters.

The alternative is to hard code changes in the provided , to do so just add new modules and GDB settings under and respectively.

GDB natively support the auto-loading of files, this can come in handy to set up a different dashboard style according to the current project type (e.g., C++ development, reverse engineering, etc.). This feature is disabled by default for security reasons. To enable the auto-loading everywhere in the file system add this line to the main configuration file:

There is number of attributes that can be used to customize the aspect of the dashboard and of its modules. They are documented within the GDB help system. For what concerns the dashboard itself it can be reached with:

Colors and text styles are specified using ANSI escape codes. For example setting a style to will produce , which will result in displaying the text red ( ) and bright ( ). The ANSI output can be disabled by setting the attribute to (note that this will not affect the command prompt).

When the attribute is set to the Pygments Python library may be used by modules to provide syntax highlighting of the source code.

The stylable attribute is a string which defines the Pygments style to use.

The list of all the available styles can be obtained with (from GDB itself):

A divider is basically a terminal-wide horizontal line with an optional label. Primary dividers are those used to separate the modules, whereas secondary dividers may be used inside modules to logically separate different sections. When a section or module is empty then the styles used for the divider are those with the qualifier.

These are general purpose ANSI styles defined for convenience and used within the default modules.

The idea of custom modules is that they provide ways to access readonly information from the target program status; it is safe to assume that they will be queried during the program execution only.

Custom modules must inherit the class and define some methods:

The name of a module is automatically obtained by the class name.

Modules are instantiated once at initialization time and kept during the whole the GDB session.

Optionally, a module may include a description which will appear in the GDB help system by specifying a Python docstring for the class.

Optionally, a module may define stylable attributes by defining the method returning a dictionary in which the key is the attribute name and the value is another dictionary:

Optionally, a module may declare subcommands by defining the method returning a dictionary in which the key is the command name and the value is another dictionary:

A number of auxiliary common functions are defined in the global scope, they can be found in the provided and concern topics like ANSI output, divider formatting, conversion callbacks, etc. They should be more or less self-documented, some usage examples can be found within the bundled default modules.

Default modules already provide a good example, but here is a simple module which may be used as a template for new custom modules, it allows the programmer to note down some snippets of text during the debugging session.

To use the above just save it in a Python file, say , inside , the following commands (together with the help) will be available:

GDB dashboard requires at least GDB 7.7 compiled with Python 2.7 in order to work properly.

See #1 for more details/workarounds.

GDB dashboard is not meant to work seamlessly with additional front ends, e.g., TUI, Nemiver, QtCreator, etc.

There are basically two options to work around this:

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.|||

gdb-dashboard - Modular visual interface for GDB in Python