This is a library that provides access to Matlab-like functions for easily creating javascript plots from within Python.

No need to deal with HTML, Javascript, or CSS to get some plots with multiple linestyles, colors, markers, and labels. The currently supported Javascript plotting libraries are Flot and NVD3 (which is a wrapper around D3).

One use case for this library is to have Python scripts running automatically and updating websites that serve Javascript plots to visitors. For example, we used this library to create and update the plots on prespredict.com. During US presidential election seasons, a cron job calls the plotting script daily, which automatically updates the plots on the website with data from the latest polls.

The currently supported plotting functions are:

These functions are to be used with

in order to visualize your plots.

This library works with the matlab_utils_for_python library which also provides access to several Matlab-like functions and syntax, such as:

Then, in your Python scripts add the following

and use the functions included in the module. Some sample code is shown below:

matlab_plot_functions y1 marray([ , , , , , , , , , , , ]) y2 marray([ , , , , , , , , , , , ]) x1 mrange[ :length(y1)] x2 mrange[ :length(y2)] figure( ) clf() plot(x1,y1, ) hold( ) plot(x2,y2, ) grid( ) legend( , , , ) xlabel( ) ylabel( ) title( ) figure( ) clf() plt_str marray( , , , , , ) Is mrange[ : ]: y randn( , ) x mrange[ :length(y)] plot(x,y,plt_str[Is]) hold( ) grid( ) legend( , , , , , , ) xlabel( This is the xlabel text ) ylabel( This is the ylabel text ) title( The title of the plot ) figure( ) clf() y1 randn( , ) y2 randn( , ) linspace( , , ) x1 mrange[ :length(y1)] x2 mrange[ : :length(y1)] plot(x1,y1, ) hold( ) plot(x2,y2, ) legend( , ) title( ) xlabel( ) To visualize the plots, uncomment one of the following output options output num_figures length(get_active_figures()) output : plt.ion() fig mrange[ :num_figures]: output_to_matplotlib(fig) ( ) output output : output_to_html output_to_flot output output_to_nvd3 fig mrange[ :num_figures]: output_html_file sprintf( , output, fig) output_to_html(fig, output_html_file) open_html_file(output_html_file) : error( )

Below are the plots you get from the above code, using Flot as the output format.

This project is licensed under the MIT License - see the LICENSE.md file for details|||

javascript_plots_from_python - Library that provides access to Matlab-like functions for easily creating javascript plots from within Python