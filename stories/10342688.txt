A live-editing time travel environment for Redux.

 See Dan's React Europe talk demoing it!

Redux DevTools is a development time package that provides power-ups for your Redux development workflow. Be careful to strip its code in production (see walkthrough for instructions)! To use Redux DevTools, you need to choose a “monitor”—a React component that will serve as a UI for the DevTools. Different tasks and workflows require different UIs, so Redux DevTools is built to be flexible in this regard. We recommend using for inspecting the state and time travel, and wrap it in a to quickly move it across the screen. That said, when you’re comfortable rolling up your own setup, feel free to do this, and share it with us.

If you came here looking for what do the “Reset”, “Revert”, “Sweep” or “Commit” buttons do, check out the documentation.

If you don’t want to bother with installing Redux DevTools and integrating it into your project, consider using Redux DevTools Extension for Chrome and Firefox. It provides access to the most popular monitors, is easy to configure to filter actions, and doesn’t require installing any packages.

Read the installation walkthrough for integration instructions and usage examples ( component, , exclude from production builds, gotchas).

Now you can open an example folder and run there:

Finally, run the development server and open the page:

Try clicking on actions in the log, or changing some code inside the reducers. You should see the action log re-evaluate the state on every code change.

Also try opening , click around, and then refresh. You should see that all actions have been restored from the local storage.

DevTools accepts monitor components so you can build a completely custom UI. and are just examples of what is possible.

I challenge you to build a custom monitor for Redux DevTools!

In fact some of these are implemented already:|||

redux-devtools - DevTools for Redux with hot reloading, action replay, and customizable UI