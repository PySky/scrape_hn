In my previous publication, I described the fullest and the most correct way to compare objects by value – class instances that represent reference types in the .NET framework.

Now, I am going to determine how it is possible to modify the proposed method to compare instances of the structs that represent value types.

It should be noted that it is possible to compare instances of the structs by value.

For the predefined types such as Boolean and Int32, comparison by value means comparing field values of structs instances. The same is applied for a user defined struct. For more information, see the ValueType.Equals(Object) method and the == and != operators.

In addition, the ValueType.GetHashCode() method that overrides the Object.GetHashCode() method will be implemented as well.

In this case, we should keep in mind the following points:

Thus, on the one hand, there are several reasons for implementing a custom mechanism of comparing objects by value, namely performance, and domain model match.

On the other hand, the need to automatically implement the GetHashCode() method leads to the need to implement a comparison by value (see the first publication). It should be done as the GetHashCode() method must be aware what data and how it can be compared by value.

In addition, the following case may be possible: when there is a simple structure containing only structure fields which returns a semantically correct result when comparing byte-by-byte with reflection.

In this case, it is quite possible to implement GetHashCode() in a correct way to return the same hash code for equal objects without creating a custom implementation of comparing by value.

However, when writing this example with Auto-Implemented properties, we have the following:

According to the documentation, the compiler creates a private, anonymous backing field that meets the public properties.

Strictly speaking, it is not clear whether two Point objects with pairwise identical values of X and Y will be equal when implementing the default comparison by value. Thus, this triggers the following questions:

Most likely, you will find positive answers to these questions in the documentation, meaning that behavior for structures with explicitly declared fields and structures with auto-implemented properties will return the same result in the comparison by value.

Alternatively, it may turn out that we will get the expected behavior of a compiler and runtime.

Therefore, taking into account all the points, we assume that it is better to implement a custom comparison by value.

In future, I am going to write an article with detailed comments on a particular example with the Person entity.

Comparing Objects by Value. Part 2: Implementation Notes of the Equals Method

Comparing Objects by Value. Part 3: Type-specific Equals and Equality Operators|||

This article describes how to implement a custom comparison by value of structs instances to improve performance and return the accurate value for equality