If you have been following my blog, you may have noticed a pattern; I write a lot about testing software. Recently, I picked up a book on Building Micro Services, where I came across a chapter on testing micro services. This post is about mocking your python code to make it easier to test your micro services or the likes.

There are a lot of posts to describe the need for mocking. I won’t be getting into that discussion, though I do want to help you get started with mocking functions and objects in python. I found that when I tried to learn about mocking, there weren’t a lot of introductory tutorials for new comers and this blog post is a reflection of what I think might be useful to learn mocking.

Let’s start with a basic example where you fetch some rows of data from a database. If you were to write some python code for it, you will start by making a database connection through a ORM like SQLAlchemy. Once the connection is established, you will write SQL queries using the database object models. For the sake of simplicity, I will keep the code contained to:

For our test case we will use the python unittest framework. Each returned by item is a SQLAlchemy object with the attributes , , , and .

Here’s how our application is structured. It contains just 3 files db_connection.py, app.py and test_app.py.

This is what our application code looks like

We will write our test in the test_app.py file. We will use mocks to avoid querying the database to fetch records via . For this we create a object and assign it the attributes that a user has. This object is just another python class when called for any fake attribute will return an answer.

In our case we will override the SQLAlchemy database object and it’s attributes , , , and . So we can test for the object even though we know it’s not real.

''' The function `has_user_expired()` takes a argument `user` which is a SQLAlchemy database object. The object contains attributes `id`, `firstname`, `lastname`, `join_date` and `expiration_date`. If the `expiration_date` is less than the date today it will return `True` or if the `expiration_date` is greater than today then return `False` For this test since we do not want to speak with the database we will create a `Mock` object and assign it the attributes that a user has. This `Mock` object is just another python class that when called for any fake attribute will return an answer. ''' # now set the attributes for the `user` object # now we pass the `user` object check for expected result `True` # for the same user we can update the `expiration_date` to sometime # in the future to see if the expected result is `False` """ We patch the function `get_all_user()` with our own function `mocked_get_all_users` for which we set a `return_value`. The `return_value` will contain a list of `Mock` users. Some of these users are expired and some of them haven't expired. We compare the output of our mocked `get_all_user()` function with the `expected` output. """ # we know only user `id` 4 and 5 have expired

Hope that gives you an idea of how to get started with mocking in python. A good practice is to run regular integration tests on the mocked data regularly. It’s possible that though your tests pass the moment you have production data your website begins to crumble. Hence the integration tests keep a tab on your unknowns.|||

Programmer. Photographer. Beer Aficianado