In a recent study, we investigated the evolution of the Linux kernel using a code authorship measure. We provide answers to four major questions:

Our analysis accounts for 56 stable releases (v2.6.12– v4.7), spanning a period of over 11 years of development (June, 2005–July, 2016).

The study relies on the Degree-of-Authorship (DOA) measure to define the authors — i.e., the key developers — of each file in a system. DOA values are computed from commit histories, as follows:

The DOA values are normalized per file; the developer with the highest DOA value in a file f has its normalized DOA equal to 1. A developer is considered an author of a file if its normalized DOA is greater than 0.75. To propose this threshold we manually validated the DOA results produced for six popular systems (more details in this paper).

Table 1 shows the proportion of authors in each Linux subsystem.

Throughout the kernel development, the proportion of authors is nearly constant (Std dev= ± 0.83 %). Thus, the heavy-load Linux kernel maintenance has been kept in the hands of less than a third of all developers.

Figure 1 presents boxplots of files per author across the Linux releases.

The number of authors with more than 100 files is always lower than 7% of the authors, ranging from 7 % in the first release to 3% in the last one.

At the top, Linus Torvalds acts as a “dictator”, centralizing authorship of most of the files (after all, he did create the kernel!). Bellow him lies his hand-picked “lieutenants”, often chosen on the basis of merit. Such organization directly reflects the Linux kernel contribution dynamics, which is itself a pyramid. However, as the kernel evolves, we see that Torvalds is becoming more “benevolent”.

We also apply the Gini coefficients to analyze the distribution of the number of files per author (Figure 3). In all releases, the coefficient is high, confirming skewness. However, we notice a decreasing trend, ranging from 0.88 in the first release to 0.78 (v4.7). Such a trend further strengthens our notion that authorship in the Linux kernel is becoming less centralized.

We call authors specialists if they author files in a single subsystem. Generalists, in turn, author files in at least two subsystems.

Looking at the work specialization in each subsystem also provides a means to assess how much the Linux kernel architectural decomposition fosters specialized work.

Many files in the Linux kernel result from the work of different authors. As such, we set to investigate such collaboration by means of the properties of the Linux kernel co-authorship network. We model the latter as follows: vertices stand for Linux kernel authors; an edge connects two authors vi and vj if ∃f such that {vi , vj} ⊆ authors(f). In other words, an edge represents a collaboration. The figure that opens this post shows Linux co-authorship network (note the central role of Linus Torvalds).

We analyze the latest co-authorship network, as given in release v4.7 (Table 2). The number of vertices (authors) determines the size of a co-authorship network. The mean degree network, in turn, inspects the number of co-authors that a given author connects to.

At the subsystem level, Driver forms the largest network (2,604 authors, 75%), whereas Misc results in the smallest one.

The third property, clustering coefficient, reveals the degree to which adjacent vertices of a given vertex tend to be connected. In a co-authorship network, the coefficient gives the probability that two authors who have a co-author in common are also co-authors themselves. A high coefficient indicates that the vertices tend to form high density clusters. The clustering coefficient of the Linux kernel is small (0.080). Nonetheless, Net, Misc, and Fs exhibit a higher tendency to form density clusters (0.205, 0.188, and 0.175, respectively) in comparison to other subsystems.

Last, but not least, we compute the assortativity coefficient, which correlates the number of co-authors of an author (i.e., its vertex degree) with the number of co-authors of the authors it is connected to [26]. Ranging from -1 to 1, the coefficient shows whether authors with many co-authors tend to collaborate with other highly-connected authors (positive correlation). In v4.7, all subsystems have negative assortativity coefficients, ranging from −0.146 in Fs to −0.029 in Net subsystem.

Guilherme Avelino, Leonardo Passos, Andre Hora, Marco Tulio Valente. Assessing Code Authorship: The Case of the Linux Kernel. In 13th International Conference on Open Source Systems (OSS), pages 1–12, 2017|||

In a recent study, we investigated the evolution of the Linux kernel using a code authorship measure. We provide answers to four major questions: Our analysis accounts for 56 stable releases (v2.6.12…