All notable changes to this project will be documented in this file. This project adheres to Semantic Versioning.

As with every new major release, there are lots of new rules in 10.0.0 designed to help catch bugs and make programmer intent more explicit.

is more popular than ever – 330,000 downloads per month! It's even more popular – 670,000 downloads per month – if you include the shareable ESLint config that we also publish.

The most important change in 10.0.0 is that using deprecated Node.js APIs is now considered an error. It's finally time to update those dusty old APIs!

Deprecated APIs are problematic because they may print warning messages in the console in recent versions of Node.js. This often confuses users and leads to unnecessary support tickets for project maintainers.

Some deprecated APIs are even insecure (or at least prone to incorrect usage) which can have serious security implications. For that reason, now considers usage of to be an error, since this function returns uninitialized program memory which could contain confidential information like passwords or keys.

Instead of , consider using or which make the programmer's intent clearer. These functions exist in all currently supported versions of Node.js, including Node.js 4.x. For more background, see this Node.js issue.

We also improved some rules to support common patterns in code bases that use React, JSX, and Flow.

When you upgrade, consider running to automatically fix some of the issues caught by this new version.

It's time for a new major version of ! As usual, this release contains a bunch of awesomeness to help you keep your code in tip-top shape!

We've added several new rules designed to catch potential programmer errors (i.e. bugs), as well as rules to make programmer intent more explicit in certain circumstances.

This release continues our trend of tightening up rules so that, wherever possible, there's one "right" way to do things. This design goal is intended to reduce the time that teams and maintainers spend giving code review feedback in pull requests.

When you upgrade, consider running to automatically fix some of the errors caught by the new rules in this version.

Note: If you use the Chai test framework, you will need to make some changes to your tests to improve their robustness. Read about the changes you need to make.

The last release ( ) added ES7 support. This release ( ) adds ES8 support ...just 3 days later!

This release should eliminate the need to specify as a custom parser, since can now parse ES8 (i.e. ES2017) syntax out of the box. That means and will just work.

For many users, this release should eliminate the need to specify as a custom parser, since can now parse ES7 (i.e. ES2016) syntax out of the box.

This release contains a bunch of goodies, including new rules that catch potential programmer errors (i.e. bugs) and enforce additional code consistency.

However, the best feature is surely the new command line flag to automatically fix problems. If you ever used and ran into issues with the lack of ES2015+ support, you'll be happy about .

is built into v8.0.0 for maximum convenience, it supports ES2015, and it's lightweight (no additional dependencies since it's part of ESLint which powers ). Lots of problems are already fixable, and more are getting added with each ESLint release.

also outputs a message ("Run to automatically fix some problems.") when it detects problems that can be fixed automatically so you can save time!

With v8.0.0, we are also dropping support for Node.js versions prior to v4. Node.js 0.10 and 0.12 are in maintenance mode and will be unsupported at the end of 2016. Node.js 4 is the current LTS version. If you are using an older version of Node.js, we recommend upgrading to at least Node.js 4 as soon as possible. If you are unable to upgrade to Node.js 4 or higher, then we recommend continuing to use v7.x until you are ready to upgrade Node.js.

Important: We will not be updating the v7.x versions going forward. All bug fixes and enhancements will land in v8.x.

The goal of this release is to make faster to install, and simpler to use.

The percentage (%) of users that rule changes will effect, based on real-world testing of the top ~400 npm packages is denoted in brackets.

For power users, it might be easier to use one of these new hooks instead of forking , though that's still encouraged, too!

To set custom ESLint plugins, rules, or envs, use the command line , , and flags.

In , use the "standard" property:|||

