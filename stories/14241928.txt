Ansible’s simple requirements make it very easy to get started. Overall, it works extremely well, but once you get a bit deeper some things might end up causing discomfort. Here are 3 things I’ve learned about Ansible (or re-learned) the hard way.

Ansible tags are a powerful way to limit the amount of work that gets done. Generally, the playbooks will run all the way through because you made them idempotent, but sometimes it’s nice to just target a very specific part. After all, why run through all the database-related tasks when you’re simply looking to change a setting in Nginx?

Clearly, tags are great for simplifying work, but they have a very clear limitation. Once a play matches a tag, it will also run every task that is part of that play regardless of other tags.

Let’s take a look at an example. The following is a very simple top-level play:

That file includes the following :

Running without any produces all the debug message (that should be obvious since Ansible’s default is ). Running with will also produce all the output:

This information is mentioned in the documentation, though it stops far short of belaboring the point:

Thus, if you were hoping to use the tag within the included play to continue to isolate things, you’ll be disappointed.

It is possible to further limit what happens at execution by adding :

In this case, the ambiguous first task in matches and doesn’t. The effect is that it does not run.

Lastly, if the top level is skipped, nothing happens:

There is still a lot of power in the , but I know I spent too much time figuring out why something did or did not run. As a rule of thumb, I try to use tags with role and include statements. If things need to be treated sensitively, I generally set a boolean variable and default it to or rather than having things happen accidentally.

Working with hashes in can be tricky in Ansible due to the hash merge behavior of either (the default) or .

So what does that mean? Let’s use an example:

Say we want to augment that hash by adding another bit to :

With the default behavior of , you’ll end up with only ’s eye color. Setting in the will get you a hash that has all of ’s attributes.

Now the problem with overriding the setting in the config file is that it might come back to bite you. If that file gets munged or it’s run on another system, etc., you’ll likely end up with some very strange effects. The way around it in Ansible 2 is to use the filter to explicitly merge.

The documentation on this topic is pretty good. For our example above, it would look like this:

You’ll end up with the following:

Again, my advice: don’t change the default, and learn to love the filter.

There are multiple ways to set variables in Ansible: , , passing them as part of the play and, of course, . The thing to realize is that once you use to set a variable, you can’t change it unless you use again. I suppose it’s technically more correct to say that fact has higher precedence, but the effect is the same. Take the following example:

The moral is that running with or adding tasks is a good idea when you’re seeing some odd behavior.

I was excited to learn that with Ansible version 2.2 it became possible to run roles as tasks. That may not sound like much, but it’s very powerful and could have saved me a lot of weird code I used to write and/or duplicate.

This new feature is very powerful and allows you to write smaller roles that are easy to include. For example, you can easily create a role to manage your database tables or Elasticsearch indexes. I’ve come across a few use cases. With this new play, it’s now possible to do things like:

It’s so powerful that I can’t believe it wasn’t there a long time ago.

Now, if only I could loop over s …|||

