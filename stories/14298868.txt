Post-mortem diagnostics & debugging comes into the picture when you want to figure out what went wrong with your Node.js application in production.

In this chapter of Node.js at Scale we will take a look at node-report, a core project which aims to help you to do post-mortem diagnostics & debugging.

The purpose of the module is to produce a human-readable diagnostics summary file. It is meant to be used in both development and production environments.

Currently node-report supports Node.js v4, v6, and v7 on AIX, Linux, MacOS, SmartOS, and Windows.

Adding it to your project just takes an npm install and require:

Once you add node-report to your application, it will automatically listen on unhandled exceptions and fatal error events, and will trigger a report generation. Report generation can also be triggered by sending a USR2 signal to the Node.js process.

For the sake of simplicity, imagine you have the following endpoint in one of your applications:

This code simply throws an exception once the route handler is called. To make sure we get the diagnostics information, we have to add the module to our application, as shown previously.

Let's see what happens once the endpoint gets called! Our report just got written into a file:

Once you open the file, you'll get something like this:

You can think of this part as a header for your diagnostics summary - it includes..

The next part of the report includes the captured stack traces, both for JavaScript and the native part:

In the JavaScript part, you can see..

In the native part, you can see the same thing - just on a lower level, in the native code of Node.js

You can see in the heap metrics how each heap space performed during the creation of the report:

The module can also help once you have a fatal error, like your application runs out of memory.

By default, you will get an error message something like this:

On its own, this information is not that helpful. You don't know the context, or what was the state of the application. With , it gets better.

First of all, in the generated post-mortem diagnostics summary you will have a more descriptive event:

Secondly, you will get the native stack trace - that can help you to understand better why the allocation failed.

Imagine you have the following loops which block your event loop. This is a performance nightmare.

With you can request reports even when your process is busy, by sending the USR2 signal. Once you do that you will receive the stack trace, and you will see in a minute where your application spends time.

The creation of the report can also be triggered using the JavaScript API. This way your report will be saved in a file, just like when it was triggered automatically.

Using the JavaScript API, the report can also be retrieved as a string.

If you don't want to use automatic triggers (like the fatal error or the uncaught exception) you can opt-out of them by requiring the API itself - also, the file name can be specified as well:

If you feel like making Node.js even better, please consider joining the Postmortem Diagnostics working group, where you can contribute to the module.

In the next chapter of the Node.js at Scale series, we will discuss profiling Node.js Applications. If you have any questions, please let me know in the comments section below.|||

Let's take a look at node-report, a project which helps you to do post-mortem diagnostics & figure out what went wrong with your Node.js app in production.