Rich powerful people, famous people, spies, political people, ALL have "clones". (Royals do not, except for Hirohito, but his was really obvious.)

-- rotten elf

The first thing he did was thank Craigslist "for sponsoring me these last few years". On October 5th, 2015 Larry Wall addressed a crowd of geeks at San Francisco's Exploratorium, saying he couldn't properly express his gratitude to Craigslist. Then he acknowledged how long the development arc had been for Perl 6. "As the old joke goes, Perl 6 is coming out this Christmas." Only this time, he meant it. Larry has a soft, cheerful voice, and an unflaggingly positive attitude. "To the nay-sayers: thank you for saying nay. It was a tremendous motivator. We couldn't have done it without you." And then for the rest of the audience, the former linguist said, "We did it. For some definition of 'we', and 'did', and 'it'." To underscore the point, he put up a slide that said "Here." Someone from the audience jokingly alluded to The Lord of the Rings. ("Does one simply build Perl 6? It's not like Mordor?") But Larry was more interested in demonstrating how the new language would "carry forward the high ideals of the Perl community." He joked that a top priority now was fixing bugs that could be mistaken for features. And then we saw a lot of things that were exotic and new. # An anonymous state variable, 

# for very fast loops # A control structure for creating lists

 # without an intermediate temp variable # Looks like an alternate syntax 

# for creating a loop # Code runs when a condition is met. 

 # Larry actually demonstrated this by 

 # triggering the react block just by 

 # typing an echo command One of the most impressive things Larry demonstrated was the sequence operator, and Perl 6's ability to intuit sequences. This correctly produced a nice tidy list of just 32 values -- rather than the 4,294,967,296 you might expect. (Larry later told an audience member that he "really liked" this capability, and when someone asked how it's implemented, he said "Go read the code!") And he also dazzled the audience by calling methods on integers. "Everything is an object. But only if you want it to be..." With a nod to Douglas Adams, Larry said "42 is a very important number," then showed the audience what would happen if you called integer methods on the number 42. "Pretty much everything is a reference, if you scratch it," he said later. (One web site notes that in Perl 6, "everything that can be held in a variable is an object, and objects are passed by reference everywhere....") Larry talked quite a bit about meta-programming -- the ability to write your own grammar, defining bits of syntax and extending the language on your own. "We really make no distinctions between built-in and user-defined," he said at one point. Defining a new "infix" operator has an eminently reasonable syntax -- something like: And any op in square brackets becomes a list operator. It took me a second to process Larry's statement that "Any infix operator can be replaced by itself in square brackets..." Later someone asked, "In a world of user-defined operators everywhere, how do you define precedence?" And Larry pulled out is tighter() and is looser(), noting that Perl 6 even has customizable precedence levels. "You can add an infinite number..." But Larry was especially proud of Perl's ability to drop down into other languages. ("This is why we say all languages are really just dialects of Perl 6...") Python and Lua are even included in the Inline library. And Larry pointed out a new library that adds Ruby-esque rules, so exclamation points and question marks can be used at the end of identifiers. ("If that's what it takes to make Ruby programmers happy...") He touted many other cool features of Perl 6. (Concurrency. Roles. "Lazy lists," which don't calculate their values until required...) There's even an improved handling of smart quotes. And he promised that soon we'd see something called native shift arrays. "But things you can feed into a high-speed processor to do matrix manipulations is already built in." There's also a new syntax in Perl 6 which lets you perform smart matching. (Finally, there's a way to stop non-identical strings from matching just because they have the same numerical value.) By comparison, a regular expression is just "a degenerated way" of doing a smart match -- doing character-by-character analysis instead of checking for actual equivalence. 



 There was a moment in the presentation when it seemed like Perl 6 may be the language that Larry had always wanted to write. "My wife observes that when we did Perl 5, we had to incorporate a lot of recognizable culture," he told the audience. "But with Perl 6, we now have street cred to design things the way they ought to be. The hardest thing is waiting for the right person to come along, who understands how to implement it. If we'd shipped any time in the last 15 years, we might thoroughly regret it now." Larry concluded by taking questions from the audience, which drew out some more interesting comments on the same theme. ("We've been trying very hard for the last 10 years to underpromise and over perform.") But my favorite part was when he alluded to the old joke about development -- that you can choose any two of the follow three attributes: fast, good, and cheap. "We're an open source project. By definition, we're cheap. We chose good over fast." Please enable JavaScript to view the comments powered by Disqus. comments powered by|||

