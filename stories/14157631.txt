This article is a straight-to-the-point checklist for deploying a NativeScript-built app to the iOS App Store and Google Play.

Publishing an app to the stores is hard‚Äîthere‚Äôs no point sugarcoating that. If you‚Äôve never published an app to the stores, you should set aside at least two full days‚Äîyes, days‚Äîto complete the monotonous processes that this article spells out.

Don‚Äôt worry though; once you‚Äôve completed these steps once, it‚Äôs a whole lot easier to go through the process in the future‚Äîand I‚Äôll be sharing a handful of tips & tricks as we work through these steps. In fact, to give this article a bit of real-world context, I‚Äôll be using a simple app I recently deployed to the stores, Pok√©mon Types, to give concrete examples of the things you need to do to make your next app a reality.

When you‚Äôre ready, grab some coffee, and let‚Äôs get started!

Your app‚Äôs icon is the first thing you users notice about your app. When you start a new NativeScript app you get a placeholder icon, which is fine for development, but for production you need to replace the placeholder icon with the image you‚Äôll want to go to the stores with.



 The NativeScript placeholder icon on the home screen of an iOS device

To get your production-ready app icon files in place, you need to first create a 1024 x 1024 pixel image asset that represents your app. Here‚Äôs the image I used for Pok√©mon Types, as an example.

If you work with designers, this is where you‚Äôll want to ask them to create the final image file for you. If you don‚Äôt work with professional designers, there are a few sites that can help. For example, I bought the Pok√©mon Types icon from VectorStock, which offers high-quality image assets for a few dollars.



 VectorStock is one of many sites that offers high-quality image files you can use icons at reasonable prices.

To make your life difficult, both iOS and Android require you to provide a variety of icon images in a wide array of sizes. Don‚Äôt worry though; once you have a 1024 x 1024 image, there are a few sites that will generate images in the various dimensions that Android and iOS require. For NativeScript development, I recommend using the Brosteins‚Äô excellent NativeScript Image Builder, which is available at nsimage.brosteins.com.

Go ahead and visit the site, find the ‚ÄúUpload an Icon‚Äù box, choose your newly created file, and click the ‚ÄúUpload App Icon‚Äù button.



 How to use the NativeScript Image Builder to create the icon files you‚Äôll need for your iOS and Android app

After the Image Builder completes, you‚Äôll automatically start downloading an file. That archive contains and folders with the image assets you need.

To put those images in the appropriate places, start by opening your app‚Äôs folder. This folder contains the NativeScript placeholder images for iOS. Delete the entire contents of this folder and replace them with the files in the folder from your download.



 How to replace the default NativeScript icon images with your own image files from the NativeScript Image Builder

With these new images in place, go ahead and run your NativeScript app on iOS to ensure the new icons looks ok. Here‚Äôs what the Pok√©mon Types‚Äô icon looks like on the iOS simulator.

Now that your iOS icons are complete let‚Äôs move on to Android. To complicate your life, Android has a completely different set of conventions for handling icons. (Different processes for iOS and Android is a recurring theme in this article, by the way, just so that you‚Äôre prepared.)

There‚Äôs one other important difference you should know before generating your Android images. On iOS, almost all app icons have solid color backgrounds. For Pok√©mon Types my icon image has a solid white background to fit in with other iOS icons.

But on Android icons usually have a transparent background. As such, for Pok√©mon Types my icon has a transparent background to fit in with other Android icons.

What that means is you might want to upload two different 1024 x 1024 images to the NativeScript Image Builder, one with a solid background color for iOS, and another with a transparent background for Android. That‚Äôs what I ended up doing for Pok√©mon Types.

Regardless of your design decision, once you have your image assets ready for Android, start by opening your app‚Äôs folder. Next, move the files from your file‚Äôs folder into their corresponding place in the folder. Refer to the image below for specifics on what file goes where.



 How to replace the default NativeScript Android icon images with your own image files from the NativeScript Image Builder.

After these files are in place, go ahead and run your app on Android to ensure that your new icons are showing up as intended. Here‚Äôs what the Pok√©mon Types looks like on my Android emulator.

And that‚Äôs it for icons. Phew! I warned you that these steps can take a while üòÑ

But keep your image editors open, as the next thing you need to tackle is splash screens.

Splash screens are what the user sees when the open your app before it‚Äôs ready to use. For example, here‚Äôs what the user sees when they open Pok√©mon Types on iOS.

Although there are many things you can potentially do with a splash screen, most applications show the app‚Äôs logo, and perhaps the app‚Äôs name. NativeScript has a series of conventions in place to make this sort of splash screen relatively easy to implement for both iOS and Android.

Let‚Äôs start with iOS. Open your app‚Äôs folder, and notice two folders named and .



 The location of the iOS splash screen files in a NativeScript app

These files contain the default splash screens you‚Äôve used in your app to this point. You can refer to the NativeScript docs for details on exactly how NativeScript uses these files, but the basics are pretty simple‚Äîthe AspectFill images are your splash screen‚Äôs background, and the Center images are centered on top of the background. Therefore, assuming you want a relatively simple splash screen, your task is to change the background color of the AspectFill images, and to place your logo in the Center images.

Feel free to look over the folder of Pok√©mon Types to see the specifics, but essentially the AspectFill images are solid white, and the Center images contain the app‚Äôs logo centered. Here‚Äôs what my app‚Äôs file looks like, for instance.



 The file for my Pok√©mon Types app

At this point go ahead and run your iOS app to make sure your new splash screen files are working as expected.

Once you‚Äôre all set on iOS, you‚Äôre ready to move on to Android, where luckily your steps are nearly identical this time. In your app‚Äôs folder you‚Äôll find a series of and files. Much like on iOS, NativeScript uses the as a background of your splash screen, and centers the file on top of it. You can refer to the appropriate files in Pok√©mon Types as a reference, but really this step is just more of the same image editing.

When you‚Äôre all set, run your app on Android to make sure everything looks alright, and then let‚Äôs move on to configuring your app‚Äôs metadata.

iOS and Android applications have a lot of information that you need to configure before you deploy your apps to their respective stores. NativeScript provides intelligent defaults for many of these values, but there are a few you‚Äôll want to review before you deploy.

Your application id is a unique identifier for your app that uses something called reverse domain name notation. For example the application id of Pok√©mon Types is . The NativeScript CLI has a convention for setting the application id during app creation, , but if you didn‚Äôt use that option it‚Äôs easy enough to change your app id.

Open your app‚Äôs root file and find the key. Make sure the attribute contains the value you‚Äôd like to use.

You app‚Äôs display name is the name the user sees next to your icon on their screen. For example, Pok√©mon Types uses a display name of ‚ÄúPok√©Types‚Äù, and that name shows up as such.

 



The display name of your app shows up next to its icon.

By default, NativeScript sets your app‚Äôs display name based on the value you passed to , which is oftentimes not exactly what you want the user to see. For example, running results in an app with a display name of ‚Äúpokemontypes‚Äù.

To change that value on iOS, first open your app‚Äôs file. The file is iOS‚Äôs main configuration file, and here you‚Äôll find a number of values you may want to tinker with before releasing your app. For display name you‚Äôll want to alter the value. Here‚Äôs what this value looks like for Pok√©mon Types.

One note: although there‚Äôs no real character limit to display names, both iOS and Android will truncate your display names after somewhere around 10‚Äì12 characters. For example, when I tried to use ‚ÄúPok√©mon Types‚Äù as a display name of my app, I ended up with the following truncated display.



 Both iOS and Android truncate long display names. Here, iOS is truncating a display name of ‚ÄúPok√©mon Types‚Äù.



Because the truncated display is less than ideal, you might have to be creative in how you choose your app‚Äôs display name.

On Android the process for changing your display name is similar. In your app look for a file. If the file doesn‚Äôt exist (it doesn‚Äôt by default), go ahead and create it, and paste in the following code.

Next, change the two ‚ÄúPok√©Types‚Äù references with your own app‚Äôs display name. After you‚Äôre done, run your app on Android again to make sure all looks well.

Although application id and display name are the two most common values, there are a few other values you might need to check before deploying your app.

If you open your app‚Äôs file you‚Äôll see other values you may wish to change, such as your app‚Äôs supported orientations. For details on these various keys, you can refer to Apple‚Äôs documentation on the topic.

On Android there are additional configuration values in your app‚Äôs file. One thing you‚Äôll want to check here is the permissions you‚Äôre currently requesting, and whether they‚Äôre up to date with the current state of your app. Check the Android documentation on permissions for more details.

One final note: your and files also contain your app‚Äôs version numbers, which NativeScript sets to 1.0 by default. If you‚Äôd like to change those values, or if you need to update the values for an app update, refer to the NativeScript documentation on versioning‚Äîhere are the iOS docs, and here are the Android docs.

When you‚Äôre satisfied with your configuration and ready to go, let‚Äôs move on to optimizing your code itself.

In NativeScript your source code is JavaScript, and much like JavaScript code on the web, you may wish to optimize your JavaScript code before you push that code to production. For NativeScript apps the optimization tool of choice is webpack, which NativeScript has built-in support for.

Before we get started, it‚Äôs worth noting that webpack usage is optional for NativeScript apps. You get one big thing from using webback‚Äîbecause webpack reduces the amount of JavaScript code in your app, your app will load quicker, and you‚Äôll have a smaller app size when your app appears in the app stores. Just how much of a benefit you get from webpack depends on the app that you‚Äôre building, most notably its current size.

The disadvantage of using webpack in NativeScript is having another thing you have to configure and maintain. Although NativeScript‚Äôs webpack plugin is super easy to install and get started with, it can be tricky to configure for advanced usage, especially if you‚Äôve never used webpack before. If you‚Äôre already feeling overwhelmed by the deployment steps in this article, you could consider deploying your apps to the stores as a first step, and optimizing those apps with webpack in a subsequent version.

The decision is up to you, but if you‚Äôd like to give webpack a shot, go ahead and read through the NativeScript webpack documentation. If you run into issues, try asking for help on the NativeScript community forum.

Once you‚Äôre all set, let‚Äôs move to building your apps.

Now that you have all of your configuration in place, you‚Äôre ready to get your app built and into the app stores. Let‚Äôs start with Android, as getting your app into Google Play is considerably easier than dealing with the iOS App Store.

Before you go out to Google Play to register and publish this app (which is the next step), you first need to generate an executable Android file for your application. On Android this file has a extension, and you can generate this file using the NativeScript CLI.

The command you‚Äôve been using during NativeScript development actually generates a file for you, and installs that file on an Android emulator or device. But the build you must perform for an actual Google Play release must also be code signed. You can refer to Android‚Äôs documentation on code signing if you want to dive into the cryptographic details, but at a high-level you need to do two things to create a release version of your Android app.

The Android documentation give you a few options on how you can create your keystore file. My preferred approach is the command-line utility, which is included in the Java JDK NativeScript depends on, so it should already be available on your development machine‚Äôs command line.

To use to generate a keystore for code signing, take the following command, replace with your name or company‚Äôs name, and replace with the name of your app.

The utility will ask you a number of questions, several of which are optional (name of organization, as well as the names of your city/state/country), but the most important ones are the passwords for both the keystore and the alias (more on that momentarily). Here‚Äôs what the process looks like when I generate the keystore I used for Pok√©mon Types.



 Output of running the command to generate a keystore

Before we move on to how to use this file there‚Äôs one important thing you need to know. Put this file somewhere safe, and do not forget the password for the keystore or for the alias. (Personally I like using the same password for my keystore and my aliases to simplify my life.) Android requires you to use this exact same file to sign any and all updates to your app. Meaning, if you lose this file, or its password, you will not be able to update your Android app. You‚Äôll have to create a brand new entry in Google Play and your existing users will not be able to upgrade. So don‚Äôt lose it!

Oh and one more thing: in most cases you‚Äôll want to use a single keystore file to sign all of your personal or company‚Äôs Android applications. Remember how you had to pass a flag to the utility, and how that alias had its own password? It turns out that one keystore can have many aliases, and you‚Äôll want to create one for each Android app that you build. (Note: the easiest way to add an alias to an existing keystore is in Android Studio.)

Ok, so now that you have this file, and you have it stored in a nice and secure location, the rest of the process is quite easy. Run the command, and pass it the information you just used to create the file. For example, here‚Äôs the command I use to create a release build of Pok√©mon Types.

Once the command finishes, you‚Äôll have a release file in your app‚Äôs folder. Note the location of that file, as you‚Äôll need it in the next step‚Äîdeploying your app on Google Play.

Google Play is where Android users find and install apps, and the Google Play Developer Console is where developers register and upload apps for users to find.

Android‚Äôs documentation on uploading apps and setting up your store listing is quite good, so I‚Äôm not going to recreate all that information here. Instead, I‚Äôll give a few tips you might find helpful when uploading your own NativeScript apps to Google Play.

On the ‚ÄúStore Listing‚Äù tab in the Google Play Developer Console you‚Äôll have to provide at least two screenshots of your app in action. Although there are many ways you may choose to create these screenshots, I thought I‚Äôd spell out my preferred approach.

Launch your app in an Android AVD (Android Virtual Device) using the command. The Android AVDs have a built-in way of taking screenshots using the little camera icon in the emulator‚Äôs sidebar.



 The button you can use to take screenshots from an Android Virtual Device

Use this button to take a few screenshots of the most important screens in your app, and the image files themselves will appear on your desktop. From there you could take those files an upload them directly into the Google Play Developer Console, but I personally recommend using a service like DaVinci to add a little flair to your screenshots, and turn them into a small little tutorial of what your app does. For example, here are the screenshots I use for Pok√©mon Types.



 The screenshots I used for Pok√©mon Types. Notice how the screenshots do more than show a static image of the app.

Little touches like polished screenshots can make the difference between users hitting the Install button or moving on, so it really is worth taking a few extra minute to making high-quality screenshot files.

Google Play also requires you to upload a 1024 x 500 ‚ÄúFeature Graphic‚Äù image file. This file will appear at the top of your store listing. To give you an idea of what that looks like in action, here‚Äôs what the Pok√©mon Types ‚ÄúFeature Graphic‚Äù looks like on my Nexus 6.



 The location of the ‚ÄúFeature Graphic‚Äù on a Google Play app listing

Designing a feature graphic can be hard, and as someone that lacks design talent, I don‚Äôt think I did a particularly good job with Pok√©mon Types. If you‚Äôre having trouble designing one of these images, one thing you might want to try is just using your app‚Äôs logo against a solid background color. Several popular apps take this approach, such as Facebook.



 Many popular apps, such as Facebook, use a simple icon for their Feature Graphic

The ‚ÄúApp Releases‚Äù section of the Google Play Developer Console is where you upload the file you generated in the previous step of this article. Just as a reminder, that file is located in your app‚Äôs folder.

Once you have your APK uploaded, and all of your app‚Äôs information spelled out in the Developer Console, you‚Äôre ready to submit your app! Android app reviews generally take a few hours, and unless Google flags any problems, your app should be available in Google Play within a half day or so.

With Android out of the way, now you‚Äôre ready to tackle iOS.

There‚Äôs no point lying to you‚Äîreleasing an iOS app to the iOS App Store is one of the most painful processes you‚Äôll go through in your software development career. So in case you get stuck or confused in these steps, just know that it‚Äôs not just you‚Äîeveryone gets frustrated releasing iOS apps the first time.

As with the previous steps, I‚Äôm not going to spell out every step for generating an iOS release build in this article‚Äîboth because the necessary steps change frequently, and because the NativeScript documentation already covers the topic of creating iOS release builds in detail. What I will do is spell out a few things that you should know.

To deploy iOS apps to the iOS App Store you absolutely must have an active Apple Developer account. It costs $99 USD per year to be a part of the program, and you can sign up at developer.apple.com/register.

Once you have an Apple Developer account, you‚Äôll need to create a production certificate, an app ID, and a distribution provisioning profile on the Apple Developer portal. This is the most tedious part of the entire process, as it takes some time to learn what each of these various files do and how to use them.

The NativeScript documentation has steps that walk you through the process, but honestly the best thing you can do is find someone else that‚Äôs been through these steps to walk you through the necessary steps. If you get stuck ask for help on the NativeScript community forum.

The iOS equivalent of Android‚Äôs file is a file, and you‚Äôll need that file to upload your app to the iOS App Store.

In NativeScript there are a few different ways you can generate this file. My preferred route is using the NativeScript CLI‚Äôs command with the following flags.

After this command finishes, you‚Äôll have the file you‚Äôll need in your folder. Make a note of the location of that file, as you‚Äôll need it in the final step of this guide.

Phew! Hopefully you‚Äôve made it to this point in one piece. You‚Äôre now ready for the final step, which I wish I could tell you was easy‚ÄîiTunes Connect.

iTunes Connect is Apple‚Äôs equivalent of the Google Play Developer portal, just worse. And by worse I just mean that it‚Äôs at least 50% more time consuming to fill in the appropriate information and figure out what you‚Äôre supposed to do.

As with previous steps, I‚Äôm not going to provide a step-by-step guide to uploading your apps to iTunes Connect. Apple changes that portal too often, and their documentation on iTunes Connect is pretty good. I will, however, give you a few tips on how to register your app for iOS distribution.

The first thing you‚Äôll need to do is register your app. To do that, visit https://itunesconnect.apple.com/, click ‚ÄúMy Apps‚Äù, and, click the ‚Äú+‚Äù¬†button (currently in the top-left corner of the screen), and then select ‚ÄúNew App‚Äù.



 To register a new app in iTunes Connect, use the above ‚ÄúNew App‚Äù link.

Here you‚Äôll have to provide a few pieces of information about your app, such as its name and its app id. Here‚Äôs the information I provided for Pok√©mon Types.



 A sample of the information you need to provide to register a new app in iTunes Connect

After providing this information you‚Äôll be taken to your app‚Äôs dashboard where you need to provide more metadata about your application. Most of this information is pretty straightforward, such as descriptions, pricing, and so forth, but there are a few ‚Äúfun‚Äù pieces you‚Äôll have to deal with, such as screenshots.

Much like on Android, iOS requires you to provide screenshot files in order to submit your apps. Previous versions of iTunes Connect required you to provide five screenshots for every supported iPhone and iPad resolution, which is just as painful as it sounds.

Luckily, iTunes Connect now only requires you to upload two sets of screenshots, one for the largest iPhone devices (5.5-inch displays), and another for the largest iPad devices (12.9-inch devices). Apple still gives you the ability to provide optimized screenshots for each and every iOS device dimension, but if you provide only 5.5-inch and 12.9-inch screenshots, Apple will rescale your provided screenshots for smaller display devices automatically.

To get those screenshots you could run your app on physical iPhone Plus and iPad Pro devices, but I find it far easier to get these screenshots from iOS simulators. To do so, go ahead and run your iOS app on any iOS simulator.

Once your iOS simulator is running, use the simulator‚Äôs ‚ÄúHardware‚Äù --> ‚ÄúDevice‚Äù¬†menu to switch to an ‚ÄúiPhone 7 Plus‚Äù, as that‚Äôs a device you can use to get 5.5-inch screenshots.



 You can use the iOS simulator‚Äôs Hardware menu to switch to different iOS devices.

With the correct simulated device running, you can use the simulator‚Äôs + keyboard shortcut to take a screenshot of your app, which save the appropriate image file to your desktop. Like you did with Android, take a few screenshots of the most important parts of your app in action.

When you‚Äôre done, use the simulator‚Äôs ‚ÄúHardware‚Äù --> ‚ÄúDevice‚Äù¬†menu to switch to an ‚ÄúiPad Pro (12.9 inch), as that‚Äôs a device you can use to get 12.9-inch screenshots. Deploy your app to the iPad simulator with the command, and then use the + keyboard shortcut to get a few iPad-sized images.

At this point you‚Äôre all set. You may want to a service like DaVinci to polish your image files, but when you‚Äôre ready, drag your images into the ‚ÄúApp Preview and Screenshots‚Äù area of iTunes Connect. Here‚Äôs what my screenshots look like for Pok√©mon Types.



 How screenshot files appear in iTunes Connect

You‚Äôre almost there! Once you have all your information entered into iTunes Connect, your final step is to associate your built file with all the information you just typed out. Specifically, you need to fill in this section within iTunes Connect.



 How the ‚ÄúBuild‚Äù section looks in iTunes Connect by default

As Apple‚Äôs message says, there are many ways you can upload your file, including using Xcode, or a tool called Application Loader. But my personal preference is to use the built-in upload behavior in the NativeScript CLI.

Run the following command to publish your app to iTunes Connect.

And that should be it. One important note though: for whatever crazy reason, there‚Äôs a non-trivial delay between the time you upload your iOS app, and the time that app shows up in iTunes Connect. I‚Äôve seen the delay be as short as 30 seconds, and as long as an hour. It‚Äôs bizarre, and iTunes Connect gives you no clue that some sort of processing is occurring. So be patient, and hit the refresh button liberally until your build file appears. When it does you‚Äôll see something like this.



 How the ‚ÄúBuild‚Äù section looks in iTunes Connect after you upload a valid file

After you select a build you could be all set. Go ahead and hit the big ‚ÄúSubmit for Review‚Äù button‚Ä¶ and cross your fingers.

Apple has a notoriously sporadic delay for reviewing the iOS apps that you submit. At the time of this writing, the average review for the iOS App Store is around 2 days. It look almost exactly two days for me to hear back about Pok√©mon Types.

If all goes well you‚Äôll receive a happy message in your inbox that looks something like this.



 An example of the message you see after Apple approves your iOS app

And with those eight steps, you now have your app listed both on Google Play and the iOS App Store. If you‚Äôve made it this far, congratulations üéâ

Make sure to let us know about your app on the NativeScript showcases page‚Äîwe can help spread the word about your cool new app.

Deploying apps is not easy, but now that you‚Äôve went through the process once it should be a whole lot easier when you need to do this for your future apps.|||

This article is a straight-to-the-point checklist for deploying a NativeScript-built app to the iOS App Store and Google Play.