In my opinion, it is quite important to encrypt the traffic between the backend services. Especially, if you don’t control your infrastructure (or don’t trust your infra provider). Let’s see how to encrypt the elasticsearch cluster transport traffic with X-Pack.

X-Pack uses TLS to encrypt the traffic between nodes in the cluster and between clients and the cluster. Additionally, a hostname verification can be performed as well. The prerequisite for internal TLS is to assign a X.509 certificate to each node. The certificates should be sign by a trusted certificate authority, or CA.

In this blogpost we will use official docker images of elasticsearch and docker compose to demonstrate the setup. You can find the code to reproduce the setup on my github at elasticsearch-fun-with-tls.

In this exercise we want to set up three elasticsearch nodes. Two of them will have certificates signed by a trusted CA and the third one is an alien — its certificate is not trusted. We will show that it can’t join the cluster formed by the two.

Note that we use docker images with default config here (including passwords) which is not the best production config. In this post we are only interested in demonstrating the TLS setup.

First lets produce the certificates. Elasticsearch has a tool which helps with that — . It can generate a CA cert + key and a set of certificates + keys for all the nodes. In a production scenario you want to generate keys + CSRs and then sign the CSRs with you CA to get the node certificates. See the documentation for that.

It defines two nodes together with their dns names and ip addresses (to allow hostname verification).

And use a temporary docker container to run :

We will end up with the following certs:

Let’s also create another set — signed by a different CA — for the alien node-0003.

Which after using and unzipping produces the following:

We are going to use docker compose the spin up the cluster. We define three services , and plus a network bridge between them. To simplify the setup we are going to use static ipv4 addressing.

The other nodes have similar configs with slight differences.

You can find the full configuration in the repo.

And check how our cluster looks now:

Now the second node:

As we can see it joined the cluster.

Finally, lets try the third one — alien signed off by a different CA.

And it is not present in the node list:

There we go, we’ve configured the cluster in such a way that all the inter-node communication is encrypted. We see that we need a set of per-node certificates signed off by a trusted CA.

Seeing is believing so one should dump the docker network bridge traffic to verify it is indeed tls encrypted. This is left as an exercise for the reader.

Next step is the certificate rotation. In most of the production grade setups you want the ability to rotate the certificates without cluster downtime. I plan to cover it in some future blog posts.

If you want to play with this setup, be sure to check the accompanying github repo.|||

