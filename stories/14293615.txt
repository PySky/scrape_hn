Summary: I've been learning Idris to play around with writing simple proofs. It seems pretty cool.

The Idris programming language is a lot like Haskell, but with quite a few cleanups (better export syntax, more though out type classes), and also dependent types. I'm not a massive fan of dependent types as commonly presented - I want to write my code so it's easy to prove, not intertwine my beautiful code with lots of invariants. To try out Idris I've been proving some lemmas about list functions. I'm very much an Idris beginner, but thought I would share what I've done so far, partly to teach, partly to remember, and party to get feedback/criticism about all the beginner mistakes I've made.

Before proving stuff, you need to write some definitions. Idris comes with an append function (named as you might expect), but to keep everything simple and out in the open I've defined:

Coming from Haskell the only real difference is that cons is and types are . Given how Haskell code now looks, that's probably the right way around anyway. We can load that code in the Idris interactive environment and run it:

What we can also do, but can't easily do in Haskell, is start proving lemmas about it. We'd like to prove that , so we write a proof:

We name the proof and then say that given (of type ) we can prove that . That's pretty direct and simple. Now we have to write the proof - we first write out the definition leaving where we want the proof to go. Now we can load the proof in Idris and type to get the bit of the proof that is required, and Idris says:

That's fair - we haven't proven anything yet. Since we know the proof will proceed by splitting apart the we can rewrite as:

We can now ask for the types of the two remaining bits:

The first is obviously true since the things on either side of the equality match, so we can replace it with . The second statement looks like the inductive case, so we want to apply to it. We can do that with , which expands to , and rewrites the left-hand-side of the proof to be more like the right. Refined, we end up with:

Reloading again and asking for the type of we get:

These things are equal, so we replace with to get a complete proof of:

Proofs are only proofs if you have code that terminates. In Idris, seemingly sprinkling the statement:

At the top of the file turns on the totality checker, which ensures the proof is really true. With the statement turned on I don't get any warnings about totality issues, so we have proved really does have as a right-identity.

The keyword seems like a very big hammer, and in our case we know exactly where we want to apply the rewrite. Namely at the end. In this case we could have equally written:

Not sure which would be generally preferred style in the Idris world, but as the proofs get more complex using certainly seems easier.

Coming from a Haskell background, and sticking to simple things, the main differences in Idris were that modules don't have export lists (yay), lists are and types are (yay), functions can only use functions defined before them (sad, but I guess a restriction to make dependent types work) and case/lambda both use instead of (meh).

For my first task in Idris I also defined two functions:

The first function is in O(n^2), the second is in . I then tried to prove the three lemmas:

Namely that both and are self inverses, and then that they are equivalent. To prove these functions required a few helper lemmas, but only one additional Idris function/feature, namely:

A function which transforms a proof of equality from one way around to the other way around. I also required a bunch of helper lemmas, including:

Developing these proofs in Idris took me about ~2 hours, so were a nice introductory exercise (with the caveat that I've proven these lemmas before, although not in 4+ years). I'd invite anyone interested in learning this aspect of Idris to have a go, and I'll post my proofs sometime in the coming week.

Update: additional notes on this material can be found here from Reddit user chshersh.|||

