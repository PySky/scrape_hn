It is possible to have some kind of dependent typing in C++ using templates. The “solution” isn’t elegant or usable, but I found it mildly interesting so I’ll try to explain it here. The C++ type system with templates is Turing complete, so that something like this can be done shouldn’t be a surprise. The entire source file is here [1].

We will need to convert s to types and vice versa (we’ll soon see why), so we might as well get that out of the way. One way to convert an to a type is by exploiting the fact that templates are allowed to take integral values as parameters:

The issue with this is the lack of control over the types we’re producing. In this particular case, we want to prevent (at compile time) the creation of types corresponding to negative integers. We do this by following Peano’s definition of natural numbers:

In this case, represents and it is obvious that using and , it is possible to enumerate only positive integers.

Secondly, we want some mechanism which to use to “lift” normal integers into a corresponding type. This is done by . The recursion is simple, for , “returns” and for , it “returns” the “return value” of . and are macros to save typing.

Note that we’ve not really solved the problem of creation of negative integers — will throw a “template depth exceeds maximum of XYZ” error and not a proper compile time error. All this mechanism does is isolate the issue of negative numbers to within so that the rest of the code can work with a cleaner representation. I think this can be improved:

This should give a compile time error on instantiating . However, right now, we concentrate elsewhere. Importantly, check the typedef in , which isn’t present when we specialize in — will be our main weapon in generating compile time errors, as we shall see.

We now create a “linked list” which keeps track of the number of nodes in it at compile time:

We don’t need to have a pointer to a node since the field always points to a smaller type — there is no circularity (and hence no possibility of a loop in the linked list). I’m not exactly sure of this, but I think, at least in terms of memory layout, should be equivalent to an array of s.

We can actually write up a for this case. First we declare the type of a generic function (we have to use s everywhere because C++ does not allow partial template specialization on functions):

Now, to fold a type , we need a function of type and an initial value of type :

I was surprised how close C++ can get to Haskell at this point.

Right now we have a dependently typed (only in a loose sense of the term — I’ve not had enough rigour with type systems to formally claim this) linked list in C++. We can now write a “safe” sorting function using this:

The cute part about this code is, if the specialization is removed you get a compile time error, since the compiler tries to sort a list of on element using the general template which then tries to sort a list of zero elements. Since the general template tries to access the field (via the macro), you get a compile time error. That the code compiles is “proof” that your algorithm will not try to walk the past of an empty linked list.

It is easy to create a which creates a linked list of a specified length and printing is a matter of folding with the function

and an empty and print the resulting vector. The exact code is in [1].

The entire list, the sorting function could all be implemented inside the template system, by the way. However, in that case the elements of the list would all be baked in; in the present situation, we have the option of reading (a compile-time-constant obviously) number of entries from a file or from the user. I think more interesting applications will be seen in “lifting” a partial amount of data and algorithms into the type system, providing a fuzzier boundary between what programmers have to keep in their heads and what the type system proves for them.

For dessert, let’s see how you can implement compile-time bound checking on the list. First a template to assert the less-than relation:

Essentially iff exists. The non-existence of can be made a compile-time error by ing it in the template which requires the relation to be valid. So, in this case, is less than all integers which can be written as for some and is less than iff is less than . Notice that these two axioms are both necessary and sufficient for comparing any two positive integers. Also note how we are inductively asserting in the general case — since we to , will have ed iff has it ed. Stating a correct indexing operation is now trivial:|||

It is possible to have some kind of dependent typing in C++ using templates. The "solution" isn't elegant or usable, but I found it mildly interesting so I'll try to explain it here. The C++ type system with templates is Turing complete, so that something like this can be done shouldn't be a surprise. The…