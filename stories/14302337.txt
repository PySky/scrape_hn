At Superhuman, we’re building the fastest email experience in the world.

This post describes the architecture of a delightful search experience that runs inside the web browser itself.

Search is one of the most frequent and important email tasks. Users expect search to have the following properties:

To support the user requirements we wanted our search architecture to have the following properties:

As mentioned in a previous post, Superhuman caches as much emails as possible on your device, which allows the search to be Local. Let’s look at the database we use to cache emails.

As a recipient of this email, I may want to find it later. I could take various approaches:

To power text matching queries like these, we use a WebSQL Full Text Search table: .

To power specific queries like or , we also use two regular WebSQL tables: and .

These tables give us everything we need to make our search Composable. Let’s now see how we can construct SQL queries from search queries.

The Query Compiler is modeled after a code compiler. It has four phases:

Let’s go through each stage with the following search query:

As a first step, we convert the user input into an array of tokens.

We use a very simple algorithm:

We then convert each token into a node.

For example: will become a Text node with value , whereas will become a From node with value .

In Gmail syntax, search terms get joined by an And operator by default in the absence of any operator term. So in this example, we inserted an And node between and the open parenthesis .

We then convert the node list into an abstract syntax tree.

We use the Shunting-yard algorithm to build the tree in a single pass.

We can now recursively generate the SQL.

Each node class has a method . This method calls the same method of its child nodes, and then combines the SQL as necessary.

To avoid SQL injection, we build the query with placeholders and a separate array of parameters.

Consider again our example:

The From node class is a subclass of the Contact node class. The Contact node class contains the implementation details:

Meanwhile, the Or node combines the SQL from its children with :

After the recursion is done, the final SQL looks like this:

Voilà! This SQL query is now ready for execution in WebSQL.

This kind of search architecture has many advantages. For example, consider autocompletion; no modern search is complete without it. In general, autocompletion can be hard, since user queries can be very complex. How do you know which autocompletion to suggest?

We can reuse parts of the Query Compiler to power autocompletion. When the user types, we quickly tokenize the input and create a node for just the last token. We then call on the node to get the suggestions. For example, consider the Contact node:

By storing the node list in the UI, we can very easily highlight syntax:

As we saw it was extremely easy to add autocompletion and syntax highlighting using the query compiler, which makes this architecture Flexible.

We built a search architecture that is Local, Composable, and Flexible. This architecture makes the search Fast, Powerful, Responsive, and Available.

How have you architected search for your web app? Please leave a comment below, and please do share if you found this interesting!|||

This post describes the architecture of a delightful search experience that runs inside the web browser itself. Search is one of the most frequent and important email tasks. Users expect search to…