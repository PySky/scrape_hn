We’ve just uploaded mypy 0.510 to PyPI. This release adds new features, bug fixes and library stub (typeshed) updates. You can install it as follows:

Note: Remember that the package name is now (no longer ).

Update (10 May): Released mypy 0.511 that fixes two crash bugs but is otherwise identical to 0.510.

Previously the decorator was only supported in stub files. Now you can use it in regular source files as well. First write some declarations that define the different signatures your function supports. These should have empty bodies and are only used by mypy. Put the actual runtime definition of the function after these declarations, without a decorator. Here’s an example from the mypy documentation:

This was contributed by Naomi Seyfer.

As an experimental mypy extension, you can specify types that support keyword arguments, optional arguments, and more. Where you specify the arguments of a Callable, you can choose to supply just the type of a nameless positional argument, or an "argument specifier" representing a more complicated form of argument, using helpers such as and that are defined in the module. This allows one to more closely emulate the full range of possibilities given by Python’s statement.

As an example, here's a complicated function definition and the corresponding :

To use this, you need to install :

This was contributed by Naomi Seyfer.

You can mark names intended to be used as class variables with . In a pinch you can also use in comments. This is supported by the module that ships with Python 3.6 (it is part of PEP 526). Example:

This was contributed by Dominik Miedziński.

Run mypy with the (or just ) option to try a new experimental, unsafe variant of incremental mode. Quick mode is faster than regular incremental mode, because it only re-checks modules that were modified since their cache file was last written; regular incremental mode also re-checks all modules that depend on one or more modules that were re-checked.

Quick mode is unsafe because it may miss problems caused by a change in a dependency, so you should not use it in a continuous integration build, and you should perhaps run mypy without quick mode before landing commits. Quick mode updates the cache, but regular incremental mode ignores cache files written by quick mode.

Mypy now also supports the functional API for defining an Enum. Previously you had to define a class deriving from . Example (other forms are also supported):

Mypy now treats the type more consistently between the default checking mode and the strict optional checking mode. Unlike previously, is largely treated as a regular type, and things like mean what you’d expect: a list containing values. Additionally, this idiom no longer generates an error:

Python 3.6 allows coroutines defined with to be generators — they may contain statements and expressions. It also introduces a syntax for asynchronous comprehensions. Mypy now supports these features. Here’s an example from the mypy documentation:

This was contributed by Jelle Zijlstra.

Mypy now understands that a function may return a generic function. A typical use case is a function that returns a decorator:

This was contributed by Naomi Seyfer.

Unions containing , such as , are now handled consistently. Previously in some cases mypy would simplify these into just , which is not equivalent. This could result in mypy failing to generate errors for buggy code. All operations performed on a union-typed value much be valid for every union item. For example, adding a string to a value is an error, since you can’t add a string and an integer. If the union was simplified to , mypy would not detect this error, since anything can be added to .

You no longer can write (with lower case ) in type annotations, as this doesn’t work at runtime. The also applies to and other types that have capitalized aliases in . Use , and so on (defined in ) in type annotations. Note that this may require many changes to existing type annotations.

This was contributed by Ivan Levkivskyi.

First of all, I’d like to thank my employer Dropbox for funding the mypy core team.

Thanks to all mypy contributors who contributed to this release:

Additional thanks to all contributors to typeshed. In particular, I’d like to single out Jelle Zijlstra and David Euresti who have done a huge amount work on improving typeshed. Here’s a list of all typeshed contributors who contributed to this release:

— Jukka (on behalf of the rest of the mypy team: Guido, David and Greg)|||

