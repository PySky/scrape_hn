Did you know? Before cookie came to browser, user has give userid and password with every single logged in request? If you knew this you should skip this article and if you don’t go ahead and read this article to know how it all works from visiting the web page till logout.

Here I will try to replicate some of the steps that we perform on the browser like doing signup, login, logout and try to explain how client and server communicates to keep user logged in and give user logged in page to see (HTML) in all of those steps.

Below are the steps that I will try to go through one by one try to explain how browser (client) and server behaves on each step.

step 1. Go to your favorite browser. You type link and press enter.

step 2. Click on signup and give your userid/password.

step 3. login with userid/password

step 4. play around, visit other pages as logged in user

step 5. Log out

On client side:

Let’s say you want to visit www.medium.com/. Go ahead and open your favorite browser enter above url and press enter. Once you do that client does lot of stuff like finding the server and communicate with it with DNS resolutions, 2 way handshakes etc.. Once the connection is set up client sends a request to the server for getting the data corresponding to the path “/” for medium.com.

On server side:

On the other side server gets the request and goes to pull the content for the request, in this case it will fallback to the index file, as “/” is the main file and generally points to index.html (some cases can override this, but this is the most common method). Once server has figured out HTML document it has to send back to the client, server sends response back to the client containing that document which browsers can render on the screen. More stuff here.

The simplest signup form has two fields user id and password to identify user. When you submit the form, browser sends a request containing your id and password to the server. More info on MDN.

On server side:

Server receives the request, extracts the data (credentials) and creates an entry in their database with userid and password. If database entry is created successfully without any userid conflict Server redirects user to login page. Otherwise it will throw some error saying userid already exists etc.

On client side:

To log in to the system Browser has to send the credentials (userid, password) via login form (similar form like we used for signup) which points to different route (example: “/login”) which allows us to login. Browser sends request to that route with user’s credentials when you submit (click on submit) that form.

On server side:

Server gets the request. Extracts userid and password from the request. Searches for that userid in the database, extracts the stored password against that userid and tries to compare stored password against password received from request (assuming we haven’t stored hashed password). If the server stored hashed password in their database it checks by comparing hash value of the password. (example: 2ef5aa5a037ae1be9c7cdd15649cf9fc686ddee2).

On server side:

- Server creates a random token string (example: “xyztoken”) and puts it against userid in the database. You can generate any random tokens by yourself but there are modules which can generate tokens without repeating it.

- Now server has to send this token to the client and tell client to store this token somewhere and use it for future request to identify user. Server does this by setting response header Set-cookie. Don’t forget server also sends the html document along with it.

On client side:

Now the client gets the response. Client uses data (HTML) to render it on screen and value of set-cookie to set as a cookie. Cookie is nothing but small (key, value) persistent storage which browsers allowed to keep in order to provide stateful behavior. Browsers can store Cookie up to 5MB.

On client side:

Now user is logged in. It means client has cookie which contains access_token=xyztoken. When you navigate to other pages on the same domain, browser will send back that cookie to the server by setting it to request header cookie like below.

On Server side:

Server receives a request. extracts access_token from cookie and searches for that token in database to see which user id it points to. Once we have user id its easy to get all the information about the user and create specific HTML document for that user. If token doesn’t match server will redirect client to the login page or show errors indicating password doesn’t match. 

Remember while sending data back to the client, server doesn’t have to send the Set-Cookie as a header again and again because client already have that cookie stored in a persistent storage.

On client side:

When click on the logout. There is a separate route for logout (example: /logout). Browser sends request to the server on that route with existing token set as a cookie.

On server side:

Server extracts the token, Finds the userid corresponding to that token, deletes the access token against that userid and redirects user to login page. Now that we have removed the token from database the server will have to tell client to remove that token from cookie because that token doesn’t exist anymore. To do that while redirecting user to login page server uses Set-Cookie header again, but sets access_token as empty string to tell browser to remove token from the cookie.

I hope it helps. This is just the basic cookie/session management. It doesn’t cover lots of loopholes this approach has. But now if you go ahead and read those documents or codes it will be more clear to understand how sessions and attack prevention works.

If there’s anything I can help you with, don’t hesitate to hit me up on Twitter!|||

Did you know? Before cookie came to browser, user has give userid and password with every single logged in request? If you knew this you should skip this article and if you don’t go ahead and read…