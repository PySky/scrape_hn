A Hamiltonian path in a graph is a path whereby each node is visited exactly once.

A number of graph-related problems require determining if the interconnections between its edges and vertices form a proper Hamiltonian tour, such as traveling salesperson type problems. Such a problem is NP-Complete, that is, the effort required to solve the problem increases dramatically as the size of the problem grows.

This C++ implementation borrows heavily from the ideas and algorithms used in the following article:

http://www.geeksforgeeks.org/backtracking-set-7-hamiltonian-cycle/



 The main differences are that I prefer to use smart pointers over conventional pointers where possible and I use the data structure to contain the edges and vertices, and methods to insert new edges, output results, test for the presence of edges etc.

In the class network interconnections are represented by an adjacency list for example, uses instead:

instead of a two-dimensional array representing the presence or absence of link between nodes:

Here is the complete C++ code sample used to determine if the graph contains a Hamiltonian Cycle or not, and output the path vertices if it does:

The following example contains a Hamiltonian path since it is possible to visit each node:

While the following examples do not contain any Hamiltonian paths:

Which gives the following console output:|||

Determining if paths are Hamiltonian in C++