This site aims to be a comprehensive guide to Frida. We’ll cover topics such as doing interactive function tracing from the command-line, building your own tools on top of Frida’s APIs, and give you some advice on participating in the future development of Frida itself.

It’s Greasemonkey for native apps, or, put in more technical terms, it’s a dynamic code instrumentation toolkit. It lets you inject snippets of JavaScript or your own library into native apps on Windows, macOS, Linux, iOS, Android, and QNX. Frida also provides you with some simple tools built on top of the Frida API. These can be used as-is, tweaked to your needs, or serve as examples of how to use the API.

Great question. We’ll try to clarify with some use-cases:

Frida’s core is written in C and injects Google’s V8 engine into the target processes, where your JS gets executed with full access to memory, hooking functions and even calling native functions inside the process. There’s a bi-directional communication channel that is used to talk between your app and the JS running inside the target process.

Using Python and JS allows for quick development with a risk-free API. Frida can help you easily catch errors in JS and provide you an exception rather than crashing.

Rather not write in Python? No problem. You can use Frida from C directly, and on top of this C core there are multiple language bindings, e.g. Node.js, Python, Swift, .NET, Qml, etc. It is very easy to build additional bindings for other languages and environments.

Throughout this guide there are a number of small-but-handy pieces of information that can make using Frida easier, more interesting, and less hazardous. Here’s what to look out for.

If you come across anything along the way that we haven’t covered, or if you know of a tip you think others would find handy, please file an issue, and we’ll see about including it in this guide.|||

Inject JavaScript to explore native apps on Windows, macOS, Linux, iOS, Android, and QNX