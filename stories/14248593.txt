Was made as a personal project for learning more about compilers and having some fun with developing complex data structures using pure Lambda calculus.

While fairly easy to parse, pure Lambda calculus proved to be fairly difficult to reason about when writing more complex trees.

Sel partially solves the problem by allowing for bindings between functions and meaningful names.

For example, the Identity function in lambda calculus:

Would be represented in Sel as

With the application working the same as in any lisp dialect:

While the value might not appear immediately clear from small functions, it becomes clearer when complex structures are made. Take as example the following implementation of expression:

The equivalent free Lambda calculus example would be:

The language it self has almost no builtins, and all of the primitives are implemented over a (very) thin layer that includes nothing but the ability to define and return lambda expressions.

For example, All of the Boolean logic in Sel is implemented as follows:

And even the numerals are implemented as Church Numerals:

Part of the fun in the project was implementing some of the most basic structures without any resources. You can see all of the implementations in the "base.sel" file, which is also included by default every time you compile / run Sel code but could be removed with a flag.

Currently the base library includes implementation for:

You can see the implementation for these here.

The compiler is written in JavaScript and uses ES2017 features such as async/await, so to run it you have to have a node version >7 (it was developed against v7.9.0). If you have nvm installed simply run in the project folder.

to compile to compile and evaluate

Both commands will also include during the compilation unless flag is passed.

By default the compilation target is Javascript with named functions, for example:

But Sel also supports compiling to point-free Javascript with the flag, which though much less readable looks much more aesthetic and appropriate for a Lambda calculus compilation target:

All compilation targets will also include a comment block with the pure Lambda term in it:

None that I could think of.

As the compiler actually works to what I consider a satisfactory level, I will probably not touch it at all (though PRs are welcomed, of course).

I will most likely continue implementing different algorithms and data-structures for it, as I found the practice pretty fun.

The Wikipedia entry for 'Church encoding' proved to be very useful: https://en.wikipedia.org/wiki/Church_encoding

The Javascript version of different functions was often more readable when encoded to Javascript: https://github.com/gtramontina/lambda|||

Sel - A compiler for thin Symbolic Expressions abstraction layer over Lambda calculus.