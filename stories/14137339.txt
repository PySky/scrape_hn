React has popularized functional programming in JavaScript. This has led to giant frameworks adopting the Component-based UI pattern that React uses. And now functional fever is spilling over into the web development ecosystem at large.

But the React team is far from relenting. They continue to dig deeper, discovering even more functional gems hidden in the legendary library.

So today I reveal to you a new functional gold buried in React, best kept React secret — Functional setState!

Okay, I just made up that name… and it’s not entirely new or a secret. No, not exactly. See, it’s a pattern built into React, that’s only known by few developers who’ve really dug in deep. And it never had a name. But now it does — Functional setState!

Going by Dan Abramov’s words in describing this pattern, Functional setState is a pattern where you

React is a component based UI library. A component is basically a function that accept some properties and return a UI element.

A component might need to have and manage its state. In that case, you usually write the component as a class. Then you have its state live in the class function:

To manage the state, React provides a special method called . You use it like this:

Note how works. You pass it an object containing part(s) of the state you want to update. In other words, the object you pass would have keys corresponding to the keys in the component state, then updates or sets the state by merging the object to the state. Thus, “set-State”.

Remember how we said works? Well, what if I told you that instead of passing an object, you could pass a function?

Yes. also accepts a function. The function accepts the previous state and current props of the component which it uses to calculate and return the next state. See it below:

Note that is a function, and we are passing another function to it(functional programming… functional setState) . At first glance, this might seem ugly, too many steps just to set-state. Why will you ever want to do this?

The thing is, state updates may be asynchronous.

Think about what happens when is called. React will first merge the object you passed to into the current state. Then it will start that reconciliation thing. It will create a new React Element tree (an object representation of your UI), diff the new tree against the old tree, figure out what has changed based on the object you passed to  , then finally update the DOM.

Whew! So much work! In fact, this is even an overly simplified summary. But trust in React!

Because of the amount of work involved, calling might not immediately update your state.

What does React mean by this?

First, “multiple calls” could mean calling inside a single function more than once, like this:

Now when React, encounters “multiple calls”, instead of doing that “set-state” three whole times, React will avoid that huge amount of work I described above and smartly say to itself: “No! I’m not going to climb this mountain three times, carrying and updating some slice of state on every single trip. No, I’d rather get a container, pack all these slices together, and do this update just once.” And that, my friends, is batching!

Remember that what you pass to is a plain object. Now, assume anytime React encounters “multiple calls”, it does the batching thing by extracting all the objects passed to each call, merges them together to form a single object, then uses that single object to do  .

In JavaScript merging objects might look something like this:

This pattern is known as object composition.

In JavaScript, the way “merging” or composing objects works is: if the three objects have the same keys, the value of the key of the last object passed to wins. For example:

Because are the last object merged into , the value of in the object — “Your name” — overrides the value of in the object. So “Your name” makes it into the object… win! :)

Thus, if you call with an object multiple times — passing an object each time — React will merge. Or in other words, it will compose a new object out of the multiple objects we passed it. And if any of the objects contains the same key, the value of the key of the last object with same key is stored. Right?

That means that, given our function above, the final result of the function will just be 1 instead of 3, because React did not immediately update the state in the order we called  . But first, React composed all the objects together, which results to this:  , then only did “set-state” once — with the newly composed object. Something like this: .

To be super clear, passing object to is not the problem here. The real problem is passing object to when you want to calculate the next state from the previous state. So stop doing this. It’s not safe!

Here is a pen by Sophia Shoemaker that demos this problem. Play with it, and pay attention to both the bad and the good solutions in this pen:

If you’ve not spent time playing with the pen above, I strongly recommend that you do, as it will help you grasp the core concept of this post.

While you were playing with the pen above, you no doubt saw that functional setState fixed our problem. But how, exactly?

Note the answer he gave. When you do functional setState…

So, when React encounters “multiple calls” , instead of merging objects together, (of course there are no objects to merge) React queues the functions “in the order they were called.”

After that, React goes on updating the state by calling each functions in the “queue”, passing them the previous state — that is, the state as it was before the first functional call (if it’s the first functional setState() currently executing) or the state with the latest update from the previous functional call in the queue.

Again, I think seeing some code would be great. This time though, we’re gonna fake everything. Know that this is not the real thing, but is instead just here to give you an idea of what React is doing.

Also, to make it less verbose, we’ll use ES6. You can always write the ES5 version later if you want.

First, let’s create a component class. Then, inside it, we’ll create a fake method. Also, our component would have a method, which will do a multiple functional setState. Finally, we’ll instantiate the class, just as React would do.

Note that setState also accepts an optional second parameter — a callback function. If it’s present React calls it after updating the state.

Now when a user triggers , React queues up the multiple functional setState. We won’t fake that logic here, as our focus is on what actually makes functional setState safe. But you can think of the result of that “queuing” process to be an array of functions, like this:

True, this is not as so sexy a code. I trust you could do better. But the key focus here is that every time React executes the functions from your functional setState, React updates your state by passing it a fresh copy of the updated state. That makes it possible for functional setState to set state based on the previous state.

Here I made a bin with the complete code. Tinker around it (possibly make it look sexier), just to get more sense of it.

Play with it to grasp it fully. When you come back we’re gonna see what makes functional setState truly golden.

So far, we’ve deeply explored why it’s safe to do multiple functional setStates in React. But we haven’t actually fulfilled the complete definition of functional setState: “Declare state changes separately from the component classes.”

Over the years, the logic of setting-state — that is, the functions or objects we pass to  — have always lived inside the component classes. This is more imperative than declarative.

Well today, I present you with newly unearthed treasure — the best-kept React secret:

That is the power of functional setState. Declare your state update logic outside your component class. Then call it inside your component class.

This is declarative! Your component class no longer cares how the state updates. It simply declares the type of update it desires.

To deeply appreciate this, think about those complex components that would usually have many state slices, updating each slice on different actions. And sometimes, each update function would require many lines of code. All of this logic would live inside your component. But not anymore!

Also, if you’re like me, I like keeping every module as short as possible, but now you feel like your module is getting too long. Now you have the power to extract all your state change logic to a different module, then import and use it in your component.

Now you can even reuse the increaseScore function in a different component. Just import it.

What else can you do with functional setState?

You can also pass extra arguments to calculate the next state (this one blew my mind… #funfunFunction).

For years now, the react team has been experimenting with how to best implement stateful functions.

Functional setState seems to be just the right answer to that (probably).

If you’ve made it this far, you’re probably as excited as I am. Start experimenting with this functional setState today!

If you feel like I’ve done any nice job, or that others deserve a chance to see this, kindly click on the green heart below to help spread a better understanding of React in our community.

If you have a question that hasn’t been answered or you don’t agree with some of the points here feel free to drop in comments here or via Twitter.|||

React has popularized functional programming in JavaScript. This has led to giant frameworks adopting the Component-based UI pattern that React uses. And now functional fever is spilling over into…