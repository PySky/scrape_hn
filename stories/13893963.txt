Make a list of instructions to run on a hybrid computer with both qubits and classical registers, and then use the measure instruction to store a qubit value onto a classical register.

You can then return the value of these classical registers on each run of your program.

Tests based on the example code in pyQuil

{ , , , , , } get an API key from http://forest.rigetti.com/ c ( ); q (c); p (); put an X gate on the zeroth qubit . ( . ( )); store the zeroth qubit's value in the first classical register . ( , ); p now contains Quil instructions, which look like this: run the program twice, and return the first classical register on each iteration . (p, [ ], , ( , ) { });

Changing the run command to return three classical registers' values:

Two ways to write a series of gate commands:

Looping some instructions while a classical register value is TRUE

An if-then-else statement combines multiple program objects and chooses one based on a classical register bit value

Adding gate and measurement noise to the QVM, to simulate a quantum computer|||

jsquil - Quantum computer instructions for JavaScript developers