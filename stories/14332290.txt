Network automation is a continuous process of automating the configuration, management and operations of a computer network. Although the abstraction could be compared with the operations on the server side, there are many particular challenges, the most important being that a network device is traditionally closed hardware able to run proprietary software only. In other words, the user is not able to install the salt-minion package directly on a traditional network device. For these reasons, most network devices can be controlled only remotely via proxy minions or using the Salt SSH. However, there are also vendors producing whitebox equipment (e.g. Arista, Cumulus) or others that have moved the operating system in the container (e.g. Cisco NX-OS, Cisco IOS-XR), allowing the salt-minion to be installed directly on the platform.

The methodologies for network automation have been introduced in Carbon based on proxy minions:

NAPALM (Network Automation and Programmability Abstraction Layer with Multivendor support) is an opensourced Python library that implements a set of functions to interact with different router vendor devices using a unified API. Begin vendor-agnostic simplifies the operations, as the configuration and the interaction with the network device does not rely on a particular vendor.

Bgeginning with Nitrogen, the NAPALM modules have been transformed so they can run in both proxy and regular minions. That means, if the operating system allows, the salt-minion package can be installed directly on the network gear. The interface between the network operating system and Salt in that case would be the corresponding NAPALM sub-package.

For example, if the user installs the salt-minion on a Arista switch, the only requirement is napalm-eos.

The following modules are available in Nitrogen:

Install NAPALM - follow the notes and check the platform-specific dependencies. Salt's Pillar system is ideally suited for configuring proxy-minions (though they can be configured in /etc/salt/proxy as well). Proxies can either be designated via a pillar file in , or through an external pillar. External pillars afford the opportunity for interfacing with a configuration management system, database, or other knowledgeable system that may already contain all the details of proxy targets. To use static files in , pattern your files after the following examples:

Retrieve the NTP servers configured on all devices: Display the ARP tables on all Cisco devices running IOS-XR 5.3.3: Execute traceroute from the edge of the network: Verbatim display from the CLI of Juniper routers: Retrieve the results of the RPM probes configured on Juniper MX960 routers: Return the list of configured users on the CPEs: Using the , return the list of BGP neighbors that are down: Using the , determine the devices containing the pattern "PX-1234-LHR" in their interface description:

Assuming that the user adds the following two lines under : Define the list of NTP peers and servers wanted: Include the new file: for example, if we want to have the same NTP servers on all network devices, we can add the following line inside the file: Or include only where needed: Define the SLS state file, making use of the : Run the state and assure NTP configuration consistency across your multi-vendor network: Besides CLI, the state can be scheduled or executed when triggered by a certain event.|||

