User interface testing, in general is hard, those why we use among others page object pattern. Still, the way we define those page objects matter, any changes in UI, quite often have consequences in page object itself. One of technique that helps here is splitting one page into page objects fragments — as extra: it will help with integration testing.

There are many available implementations of page object pattern — the idea from the article might work with most of them. Today we will work with ember-cli-page-object implementation for the Ember.js framework with Mocha and Chai as the testing platform.

We will focus on two features on our page: adding new log and edit the existing one. In both situations we would be working on the same form, still when in edit two forms would be visible on the page, so we need to deal with that.

One thing worth to notice is the readability of the acceptance tests. And page object plays an important role here. We are also using and (new stuff from ES2017). Just have a look how readable is the source code:

The acceptance test looks amazing, and I know you like it :-) — declarative, straightforward. So now let’s look at the definition. We are working with three different page objects: page, of the table and .

Looking at the source (below), we can see that we define constructor - the function that return page object with passed scope. Thanks that we can define on , together with defining on . In the end, our main page object is pretty neat. Have a look.

Nesting page objects are pretty convenient technique, I highly recommend it for acceptance and integration testing. There is also composability approach described by Davin Weaver you can look on.

There is one caution — do not over engineer your tests, keep it quite simple.|||

User interface testing, in general is hard, those why we use among others page object pattern. Still, the way we define those page objects matter, any changes in UI, quite often have consequences in…