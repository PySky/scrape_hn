Before Novus, I completed coding tests at multiple Big Name Tech Companies That You Would Recognize. And, like some struggling novelist, I had the rejection emails covering my wall. One firm asked me to implement PowerSet. Another had me parse and validate decimals from a string. Yet a third wanted me to devise a deadlock detection algorithm – on a whiteboard. And I can assure you that after 15 years of job hunting in Tech, I can generate a Fibonacci sequence in no fewer than six languages.

Now, at Novus, and back on the other side of the equation, the time came to devise a coding test for my own team’s open position. This article describes the approach I took, and why.

As a tech hiring manager evaluating candidates, we always start with a simple question: well, can they actually code?

There are already many outstanding blog posts on this topic. Jeff Atwood’s post Why Can’t Programmers…Program? is obviously a classic, and I’ve often referred back to Interview Programming Problems Done Right by William Shields. Finally, Tony Arcieri’s post “Can you solve this problem for me on the whiteboard?” makes a pretty strong case for eliminating coding tests altogether.

My position is this: many candidates can write correct, clever, elegant code – but that’s not enough. There’s a more important question to answer: can they write code ?

Many coding tests essentially use CompSci 101 homework problems – which is fine if you’re recruiting fresh grads or candidates 1 – 2 years out of school (or launching a startup offering palindrome detection as-a-service). But let’s be real:

What traditional coding challenges actually measure is the candidate’s ability to play the programming interview “game.” Just as a high SAT score isn’t a direct measure of intelligence (test-taking skill is a larger component), acing a typical coding challenge tells you the candidate very likely invested $29.99 on Programming Interviews Exposed, 2nd Edition.

What it doesn’t tell you is if the candidate will be successful in the job.

After the welcome lunch and on-boarding, your new team member will be at their keyboard, the problem before them no longer “implement a factorial function,” “detect a circular linked list” or “invert a binary tree.”

Perhaps, posed with an unfamiliar problem domain, they freeze up. A day passes and they’re “still working on it.” Passive during pair programming and code reviews, they do not improve. A few months later, it’s clear to everyone on your team that “it’s not working out.” You’re asked: “How did this happen? He did so well on the coding test and seemed so knowledgeable in person!”

Over the years, I’ve seen this happen not once – but several times. This is the challenge we face as hiring managers. We need to maximize our chances of hiring a great coder – who can also do the job.

Here is the framework I devised:

If you shouldn’t ask your candidate to whip up a recursive Fibonacci sequence function, what do you do? Well…how about some real-world bugs from your own system? Again, I felt it was vitally important that the coding test reflect what the candidate might do in their day-to-day job –  and what better way than distilling problems from actual problems I had to solve?

Working from that framework, devising my coding tests was simple: I would review our bug database from the past 6 months and select a few memorable ones that would require legit coding ability (and – yes – even some CompSci 101 fundamentals), but would also provide an accurate indicator of how the candidate might Perform on the Job For Real.

These problems have more than one valid solution – either imperative or functional style, with or without recursion. None are straight CompSci 101 homework problems, and they’re not to be found on “programming challenge” sites or in tech interview guides.

Instead, each of these were real, critical bugs that I would have assigned to the candidate, had he or she been on my team at the time. If a candidate writes code for these problems in a test, then it’s a strong indicator that they’ll be successful in the actual job.

Finally, the Novus back-end is 100% Scala, so the coding test would have to be in Scala. Candidates would be expected to learn a little bit of basic Scala (options and list comprehensions) to do well – at a minimum they need to be able to code “Java in Scala.” They’re learning constantly on-the-job – perhaps their #1 time investment the first 6 months. So, this test would be a first, modest step in proving out that aptitude.

For any coding challenge, it’s important to know if the candidate’s solution is complete and correct. So my next step in preparing this coding challenge was to write test cases that ship along with the project.

Unit testing is a crucial part Novus’ development methodology – if we get a bug report, we first write tests that will prove that the bug is fixed. This is a quality I want to see in a candidate – they might not write the tests, but to be successful, they need to read all the tests to ensure they all pass. An excellent candidate will even add new tests for edge cases they discover. On the other hand, if the candidate comments-out – or even changes tests that they “disagree with” – well, that tells you something else about them.

So, to create this test-driven coding challenge, I created a stub SBT (Simple Build Tool for Scala) project from a giter8 template. I coded up a skeleton class with the functions for the candidate to implement, and then started writing test cases that would prove the candidate had successfully completed the challenge.

This was probably the most time-intensive portion of this project. I used ScalaTest to build 30 different test cases for my three problems. Along the way, I learned a few features of ScalaTest, (advanced matchers I had not used before), which was a bonus on top of the ultimate benefit of gaining a new team member.

Most importantly, by using testable code and test-driven development, you’re advertising your team’s core principles to the candidate, and demonstrating that you’re willing to put some real work into selecting the best candidate.

Ideally, you’ll end up collaborating with this new team member for years, so you should at least put a few hours into a test that helps select the best possible candidate.

Many tech companies bring in candidates for coding tests, but I decided to allow candidates to complete the test remotely (at home), at a time of their choosing.

For the test, I wrote up a detailed README.txt describing the test, with some helpful links to Scala and SBT tutorials. Like a real project, the README also included instructions for building the project from the command line, with examples.

Allowing each candidate to schedule the test time gave them time to study and prepare as necessary (warning them that, of course, if they waited too long the position could be filled).

Some candidates actually self-selected themselves out of the process at this stage. Informed that they would have to code Scala, they chose not to proceed – even with unlimited time to prepare. This is fine, because for my specific opening, I didn’t want to hire someone who was hesitant (or even unwilling) to learn new skills.

My team needs autodidacts who can learn Scala, and so I oriented the test to select for that trait. This doesn’t work for everybody. Perhaps your team hasn’t selected a tech stack yet, and therefore you want candidates to work in their preferred language – where they can demonstrate mastery. That’s fine too!

If it is a take home test, they can use online documentation, Google and StackOverflow to assist them. And, if so, fantastic: I want them using those tools on the job (I certainly do!). I also want them coding in a realistic (relaxed, self-paced) environment, not with someone critiquing and questioning every character they type. In my experience, that unrealistic pressure is the worst aspect of assessing candidates using online coding tools like CollabEdit.

I should also mention that, if the candidate passes the test, we bring them in for in-person code review. This “interview” is just like a real code review as a member of our team – because that’s exactly what it is. In this way, we see how they’ll work with more senior developers and respond to coaching. Also, in-person code-review weeds out candidates who plagiarize or otherwise “cheat” (have a friend complete the test). We make sure that the candidate can explain and critique their own code.

While somewhat controversial in the Novus engineering team, I feel it’s important that a coding test have a time limit. On the job, development tasks have time limits, whether externally imposed (spikes, regulatory deadlines), or internal (budgeted time for one-off requests or bug-fixing). You want to be sure that you’re hiring somebody that will understand how much time to budget for a relatively small task and will manage their time effectively.

For my challenge, I estimated that 3 hours was appropriate – 1 hour per function. I asked some of our current team members to attempt the test, and all completed in under 30 minutes. This seemed to confirm that 3 hours was generous for a competent developer.

As it turned out, most candidates who completed the test did so within 3 hours, with some even completing in under 1 hour.

You need to rank your candidates in a consistent manner, and I found the go-to tool for doing so was the rubric.

This topic could actually be its own blog post: I first encountered a rubric for my son’s 1st Grade science project. He had to make an information poster about an animal (he chose Ocelot – thank you @notch). The rubric was very clear:

Creating a rubric for your coding challenge is a fantastic tool for measuring your candidates’ results and maintaining an objective, dispassionate criteria for your ultimate hiring decision. The rubric forces you to have a consistent, quantitative assessment of each candidate’s code sample, which can be especially helpful when you’re sometimes reassessing candidates days later.

After discussion with my colleagues and considering our hiring goals, we devised the following rubric:

If it’s not obvious, the points used by my rubric are somewhat arbitrary. I found that after seeing results from a few candidates, I went back to re-balance / re-score the tests. The point of a rubric isn’t for it to be perfect, but that you have one, and you aren’t just judging candidates on ambiguous “pass/fail” criteria.

Devising the perfect coding test is not trivial, and by no means do I think that the approach I’ve outlined here is a one-size-fits-all solution that will work for your team. In fact, here at Novus, we have different coding test for our other engineering positions – for our senior positions, the candidate can choose the language and project structure, and the test has no time limit.

My framework was very specific to my ideal candidate: a junior developer who nonetheless was an autodidact willing to learn Scala and solve finance-oriented problems. But, perhaps your process will have them code a simple iPhone app, a small AngularJS web application, or a design new Bootstrap theme.

Whatever you come up with, your candidates will surely have a better experience doing your well-planned test that accurately represents the job they’ll be doing – versus coding a recursive Factorials function for the 17th time in their career.

If you like what you read in this article, maybe you should come work at Novus. We’re hiring.

Thanks to Ben Ragheb (@benzado) for feedback on a prior draft of this article!|||

How do you devise the perfect coding test? Noah Zucker reveals how he came up with Novus' coding test and why. No Fibonaccis here!