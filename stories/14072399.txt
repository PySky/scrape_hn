Hereâ€™s a comparison of a standard error message. The first one uses the built-in alert-function, while the second is using SweetAlert2.

Pretty cool huh? SweetAlert2 automatically centers itself on the page and looks great no matter if you're using a desktop computer, mobile or tablet. It's even highly customizeable, as you can see below!

swal( 'Any fool can use a computer' ) swal( , 'That thing is still around?' , ) swal({ title: , text: , timer: }).then( () {}, (dismiss) { (dismiss === ) { console.log( 'I was closed by the timer' ) } } ) swal({ title: , type: , html: 'You can use <b>bold text</b>, ' + + , showCloseButton: , showCancelButton: , confirmButtonText: , cancelButtonText: }) A warning message, with a function attached to the "Confirm"-button... swal({ title: , text: "You won't be able to revert this!" , type: , showCancelButton: , confirmButtonColor: , cancelButtonColor: , confirmButtonText: }).then( () { swal( , 'Your file has been deleted.' , ) }) ... and by passing a parameter, you can execute something else for "Cancel". swal({ title: , text: "You won't be able to revert this!" , type: , showCancelButton: , confirmButtonColor: , cancelButtonColor: , confirmButtonText: , cancelButtonText: , confirmButtonClass: , cancelButtonClass: , buttonsStyling: }).then( () { swal( , 'Your file has been deleted.' , ) }, (dismiss) { (dismiss === ) { swal( , , ) } }) swal({ title: , input: , showCancelButton: , confirmButtonText: , showLoaderOnConfirm: , preConfirm: (email) { ( (resolve, reject) { ( () { (email === ) { reject( 'This email is already taken.' ) } else { resolve() } }, ) }) }, allowOutsideClick: }).then( (email) { swal({ type: , title: , html: + email }) }) swal.queue([{ title: , confirmButtonText: , text: 'Your public IP will be received ' + , showLoaderOnConfirm: , preConfirm: () { ( (resolve) { $.get( ) .done( (data) { swal.insertQueueStep(data.ip) resolve() }) }) } }])

1. Initialize the plugin by referencing the necessary files: 2. Call the sweetAlert2-function after the page has loaded swal({ title: , text: 'Do you want to continue' , type: , confirmButtonText: })

Here are the keys that you can use if you pass an object into sweetAlert2: The title of the modal, as HTML. It can either be added to the object under the key "title" or passed as the first parameter of the function. The title of the modal, as text. Useful to avoid HTML injection. A description for the modal. It can either be added to the object under the key "text" or passed as the second parameter of the function. A HTML description for the modal. If "text" and "html" parameters are provided in the same time, "text" will be used. The type of the modal. SweetAlert2 comes with 5 built-in types which will show a corresponding icon animation: warning, error, success, info and question. It can either be put in the array under the key "type" or passed as the third parameter of the function. The container element for adding modal into. Input field type, can be text, email, password, number, tel, range, textarea, select, radio, checkbox, file and url. Modal window width, including paddings (box-sizing: border-box). Can be in px or %. Auto close timer of the modal. Set in ms (milliseconds). If set to false, modal CSS animation will be disabled. If set to false, the user can't dismiss the modal by clicking outside it. If set to false, the user can't dismiss the modal by pressing the Escape key. If set to false, the user can't confirm the modal by pressing the Enter or Space keys, unless they manually focus the confirm button. If set to false, a "Confirm"-button will not be shown. It can be useful when you're using custom HTML description. If set to true, a "Cancel"-button will be shown, which the user can click on to dismiss the modal. Use this to change the text on the "Confirm"-button. Use this to change the text on the "Cancel"-button. Use this to change the background color of the "Confirm"-button (must be a HEX value). Use this to change the background color of the "Cancel"-button (must be a HEX value). Apply default swal2 styling to buttons. If you want to use your own classes (e.g. Bootstrap classes) set this parameter to false. Set to true if you want to invert default buttons positions ("Confirm"-button on the right side). Set to true if you want to focus the "Cancel"-button by default. Set to true to show close button in top right corner of the modal. Set to true to disable buttons and show that something is loading. Useful for AJAX requests. Function to execute before confirm, should return Promise, see usage example. Add a customized icon for the modal. Should contain a string with the path or URL to the image. If imageUrl is set, you can specify imageWidth to describes image width in px. If input parameter is set to "select" or "radio", you can provide options. Object keys will represent options values, object values will represent options text values. Automatically remove whitespaces from both ends of a result string. Set this parameter to false to disable auto-trimming. HTML input attributes (e.g. min, max, autocomplete, accept), that are added to the input field. Object keys will represent attributes names, object values will represent attributes values. Validator for input field, should return Promise, see usage example. Progress steps, useful for modal queues, see usage example. Function to run when modal opens, provides modal DOM element as the first argument. Function to run when modal closes, provides modal DOM element as the first argument. You can redefine default params by using swal.setDefaults(customParams).

When an alert is dismissed by the user, the Promise returned by swal() will reject with a string documenting the reason it was dismissed: The timer ran out, and the alert closed automatically. If rejections are not handled, it will be logged as an error. To avoid this, add a rejection handler to the Promise.

 Alternatively, you can use .catch(swal.noop) as a quick way to simply suppress the errors:

swal({ title: , input: , showCancelButton: , inputValidator: (value) { ( (resolve, reject) { (value) { resolve() } { reject( 'You need to write something!' ) } }) } }).then( (result) { swal({ type: , html: + result }) }) swal({ title: , input: , inputOptions: { : , : , : }, inputPlaceholder: , showCancelButton: , inputValidator: (value) { ( (resolve, reject) { (value === ) { resolve() } { reject( 'You need to select Ukraine :)' ) } }) } }).then( (result) { swal({ type: , html: + result }) }) inputOptions = ( (resolve) { setTimeout( () { resolve({ : , : , : }) }, ) }) swal({ title: , input: , inputOptions: inputOptions, inputValidator: (result) { ( (resolve, reject) { (result) { resolve() } { reject( 'You need to select something!' ) } }) } }).then( (result) { swal({ type: , html: + result }) }) swal({ title: , input: , inputValue: , inputPlaceholder: 'I agree with the terms and conditions' , confirmButtonText: , inputValidator: (result) { ( (resolve, reject) { (result) { resolve() } { reject( 'You need to agree with T&C' ) } }) } }).then( (result) { swal({ type: , text: }) })

Multiple inputs aren't supported, you can achieve them by using html and preConfirm parameters.

 Inside the preConfirm() function you can pass the custom result to the resolve() function as a parameter: If you end up using a lot of the same settings when calling SweetAlert2, you can use setDefaults at the start of your program to set them once and for all! Resets settings to their default value. Disable buttons and show loader. This is useful with AJAX requests. Get the input DOM node, this method works with input parameter. Provide array of SweetAlert2 parameters to show multiple modals, one modal after another. See usage example Get the index of current modal in queue. When there's no active queue, null will be returned. Insert a modal to queue, you can specify modal positioning with second parameter. By default a modal will be added to the end of a queue.

Feel free to fork SweetAlert2 on GitHub if you have any features that you want to add!|||

