Internationalizing an application is always simple at first glance. It only consists on applying a  function on strings to be translated, right?. This function is generally a mapping function, linking an input key (the string to be translated) to the returned translated string.

Sounds simple? What about handling plural forms? It doesn’t consist in just adding an at the end of the word (see and for instance). So it also needs to handle singular and plural form. And, what about some Slavic languages where there are several plural forms? For instance, in Russian, there is the singular form for a single element, the dual form for between 2 and 4 elements, and the plural form for 5 or more elements.

It becomes quite complex, and we just talked about strings, not even date or currency formats. Fortunately, we can rely on some i18n libraries, whose most famous in React ecosystem are probably node-polyglot and react-i18next.

I won’t cover the differences between these two different libraries, as I don’t know enough . Indeed, Polyglot was already present on the project we maintain, and does perfectly the job. Why switching to another lib if everything works well and is simple to develop? Just be pragmatic!

First, we need to grab Polyglot dependency:

Be careful: the Polyglot we retrieve here is the Airbnb one, called . There is also a package, but it is not the one covered by this post.

Reading the official documentation, we can achieve our first translation very easily, using a code similar to:

We instantiate a instance passing it two properties:

Then, translating a string is as simple as calling the function and passing it the string to be translated.

Let’s imagine we need to display a customized welcome message to our users. We would need username variable in our string. That would be especially useful to handle punctuation properly. Indeed, assuming we want to display Welcome Jonathan! once logged in, we may use a code like:

It works for English. But not in French, where there is always a space before exclamation points. So, we need to embed the login into our translation. Polyglot supports string interpolation, easing our job:

Polyglot replaces all instances of by value, allowing to embed our punctuation directly into our translated strings. In French, it would have been .

As explained above, handling plural forms is not as trivial as it may sound. Fortunately, Polyglot handles it natively:

Note the symbol which is the plural form separator. As Polyglot is configured in French (via the attribute), it splits the translation string on this symbol, and considers the first part as the singular form and the last one as the plural form. We can, if we need to support Russian for instance, have several in the same translated string.

Number of items is retrieved from the special variable.

So, that was the getting started of Polyglot. Yet, how do we use it in a real-world application, where you need it in several files?

There is generally a huge gap between the straightforward getting started tutorial and its integration into a real-world application.

Polyglot is not an exception to the rule. Just following the tutorial, how can we use it in all our React components without instantiating it several times? The quick and dirty solution would be to declare it globally via a property. Yet, not fully satisfying, as we are going inevitably to face some troubles using global variables.

Explaining how to implement Polyglot on a real-world application requires a real-world application. I bootstrapped a really basic video list application. You can grab the whole source code on GitHub, each commit bringing improvement compared to the previous one.

Our sample application contains three components: a displaying a list of , each one having a component (for duration and number of views). Code is basic React and I’ll assume you have a basic knowledge of this awesome lib. That’s why I won’t cover the setup part and focus on the internationalization part.

The first naive solution would be to declare a Polyglot instance once, in our top level script, and then passing it manually via props to all our children. For instance, we may write the following code:

This naive implementation works perfectly, but is incredibly cumbersome and thus error-prone, due to the numerous prop transfers . This basic sample handles only three levels of components. What about a more complex application with sometimes a dozen of depth levels? We need a better solution. Especially as only the component needs the prop.

Fortunately, React provides a solution. Reading the official documentation:

That’s exactly what we need. Yet, a few lines later, we can read, still on the same page:

Not really encouraging. So, it perfectly fits our need, but is not recommended. What should we do? When facing such questions, the best solution is to refer to the developer collective intelligence. Dan Abramov, a high-skilled developer you need to follow if you are interested in the React ecosystem, shared a code snippet on Twitter:

So, using context for localization is fine, but only with a Higher Order Component (HOC). Let’s focus on how to use context for now.

Using context consists in creating a , which should fulfill three different requirements:

In our case, we are going to pass the function to the context. But also the as a string. Indeed, we may need it if we want to localize dates using moment for instance. So, let’s declare our context new data types:

Now, we need to fill the context new attributes, via the method. That’s where we need to instantiate Polyglot:

We use the prop passed to the instead of retrieving it directly via the local storage. Indeed, this logic should not be embedded in such a “dumb” provider.

We can now use our in our application. So, let’s change our render script:

We wrapped our component in our , adding it a property. That’s the only change we need to bring to our application. All the instanciation logic is decoupled in the provider, keeping our code really readable.

Yet, our has no method yet. It would then display nothing. In this case, this method should just proxy the display of component child.

If we remember correctly Dan’s previous tweet, we promised him to write a Higher Order Component (aka HOC). But what is it?

In our case, HOC is useful as it allows to map our base component with our new context attributes. It would return a new component passing and as props. Such a HOC code would be:

We map our component to the context thanks to the property. It takes the same data structure as our . Then, we can retrieve it thanks to the second argument of our functional component.

Now we get our HOC, we just need to remove all former props from our components, and just call our function on our component:

Our internationalization is now quite straightforward, just requiring a function call to our component to access Polyglot. And we also learned how to create a Provider. Level up!

Final code is available on GitHub as the penultimate commit. of the repository uses recompose to simplify code slightly.|||

