Apache Ignite 2.0 has been released last week. Changes on Java side are tremendous, but Ignite.NET has some cool things to offer as well.

This is a huge one! In short:

Now let’s see this in action. First, you don’t need to register types in to be able to use them in Ignite, so the following works:

Next, and types are written in Ignite binary format, which means SQL works for and :

classes are serialized the same way as , the difference is only in API. See apacheignite-net.readme.io/docs/serialization for more details.

Finally, as a consequence of the above, anything and everything can be serialized in Ignite, including object hierarchies that combine and regular types. I think the most awesome example here are Expression Trees. There is no built-in way in .NET to serialize an Expression Tree (see google search for ‘serialize expression tree’), but you can do this in Ignite no problemo:

We have put a piece of code into distributed cache, and any node can easily retrieve and execute it!

Below are some fancy tricks you can do with dynamic serializer:

As you can see, the possibilities are endless!

Ignite.NET is built on top of Ignite Java: .NET code starts a JVM in process and communicates with it via JNI and unmanaged memory regions, so that code is reused as much as possible, and performance is maximized.

Ignite 2.0 exposes this interoperation subsystem in form of plugins: each plugin consists of .NET and Java parts which can establish two-way communication and expose new APIs to the users.

In the next blog post we will implement such a plugin; for now you can have a look at the docs: apacheignite-net.readme.io/docs/plugins.

A number of improvements has been made to address the issue with IIS application lifecycle, where AppDomains are loaded and unloaded within the same worker process. Java part of Ignite does not belong to an , so additional steps were required to deal with it.

As a result, Ignite.NET can be easily used in IIS environment when is :

As usual, Ignite LINQ to SQL engine continues to improve.

This time changes are subtle, but still important: all limitations to splitting queries into multiple statements or joining multiple subqueries into one has been addressed, so all of the following queries work:

There are some API changes that may break compilation and/or behavior in existing code, please refer to Migration Guide.|||

Apache Ignite 2.0 has been released last week.
Changes on Java side are tremendous, but Ignite.NET has some cool things to offer as well.