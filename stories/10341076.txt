With the rise of cheap VPS (Virtual Private Server) services and the increase of complexity in the architecture of new web applications, deployment processes are becoming a very important topic and a skill to master to some extent.

Long gone the days when we just needed a cheap hosting service and an FTP access to be able to setup and update our static websites.

Furthermore, it is worth considering that software development has become a lot more collaborative thanks to tools like Git and services like GitHub and therefore people are getting used to the benefits of versioning. This brought in the idea of being able to keep our deploys versioned as well and to be able to roll back to a previous version easily in case a new deploy ends up to break something.

In this article we will learn how to setup a VPS (or a test virtual machine) to serve a static website with Nginx and how to create a simple yet effective deployment process to keep our website updated. Of course we will take care of integrating versioning and rollbacks in the process.

I am assuming you already have a basic knowledge of Bash, Git, SSH and Ubuntu but I will try to make things as clear as possible so that, even if you are a newbie, you should be able to understand and follow the tutorial.

Also, you will need to have Git and NodeJs installed on your local machine.



The first thing to do is to have a server machine that we will need to be configured to serve our website. My advice is to get a basic VPS on DigitalOcean or Linode. It will cost you very little money ($5-10/month) and you can shut down the machine once you are done with the tutorial and save the money for when you need to serve your next real website.

As an alternative, you can also use a local virtual machine to simulate a remote server. In this case my advice is to go with Vagrant.

In case you chose the first option, here are some tutorials that will explain you how to run a new machine and how to establish a connection through SSH:

In case you want to go with the local virtual machine option here‚Äôs another guide for you to get started with Vagrant.

Whatever path you choose I expect you have the following requirements before moving on with the rest of the tutorial:

So, just to make things clear, we will work on two different machines. The local machine (our computer) for development and the remote machine (our server) as production environment to serve our website to the World. All the next paragraphs will be labeled with ‚Äú(local)‚Äù or ‚Äú(remote)‚Äù to make clear where we will perform our actions.

I am assuming your server is running Ubuntu (at the time of writing the last LTS version is 14.04). The first thing we need to do is to login with SSH to our server and install Nginx. In case you never heard of it, Nginx is one of the most famous web servers. It is really easy to install and configure and it also offers very good performances. You can use Apache as an alternative but we will stick with Nginx in this tutorial. To install Nginx on Ubuntu you just need to be sure you are connected to your remote server and to run the following command in your bash prompt:

If everything went fine we now have Nginx installed. If you open your browser and visit http://yourserver/ (where yourserver is the real IP or the domain name of your server) you should be able to see the default Nginx welcome page. We will change that later with our real website.

We will also need to have git installed on our server, so let‚Äôs add it:

For now our server is ok, we will see in a moment how to configure it for our needs, but let‚Äôs create a new website on our development machine first!

In this paragraph we will create a very simple website and start to version it using git.

Let‚Äôs just create a new folder in our local machine, open a command line shell in that folder and run:

For the sake of simplicity, in our website we are going to have two files: a HTML home page and a CSS file.

Our HTML file is called and it should look like this:

Pretty simple! Now let‚Äôs move to our :

As a starting point, our css file includes Normalize.css, an open source stylesheet crafted to minimize the differences in the way different browsers handles some properties. It helps web designer to obtain the same graphic layout through all the major browser.

So if we want to see how our new amazing web site looks like we just need to open our .

Isn‚Äôt a beautiful piece of art? Ok, maybe it‚Äôs not, but it‚Äôs a decent starting point for you next great thing üôÇ

Now let‚Äôs add the new files to our local git repository. Go to the command line and launch the following command:

Then we can make our first commit:

At this stage our git repository lives only on our local machine, so nobody will be able to read it from the outside, neither our server will be able to download the files when we want to release a new version of the project.

The next thing to do is to add a remote repository. To understand what remote repositories are let‚Äôs quote the official git documentation:

So now we have one problem: where do we have to put our remote repository? The easiest solution is to get an account on GitHub and create a new public repository there. GitHub is free to use for public repositories, but you can purchase a paid account to have private repositories in case your repository contains sensible information that you don‚Äôt want to share.

Once you have your account on GitHub, you can create a new repository using their web interface:

Let‚Äôs add a name and a description, be sure to select public and click the ‚ÄúCreate repository‚Äù button.

Once done you should be able to see something like this:

As you can tell, our project file are not there yet, let‚Äôs push them!

To push our files we need to associate our local repository to the new remote one, so copy your repository address in the right column (you can choose or URLs, I recommend to use the former) and get back to your command line console with the following command:

Be sure to replace with the URL you copied from your GitHub repository page.

Now we have associated our local repository with the new GitHub remote one. GitHub creates some files when you create a new repository, so it‚Äôs a great thing to download them into your local repository:

This will make you ready to push our file to the remote repository

If you refresh your GitHub project page, you will now see all our project files are there.

We now have our website and our server and at this stage we can move to the core of our article: how to organize a process to simplify the deployment of our website in the new server.

There are hundreds of tools and SaaS platforms to manage complex deployment processes on one or more servers, but one of my favourite is Flightplan. Flightplan is a NodeJS library that can be easily installed and configured to create a sequence of shell commands in our local machine and in our remote server to deploy and update our website or app.

The first thing to do is to install Flightplan in your local machine:

The first command installs Flightplan as a global command (the command) in your system, the second one allows us to use the Flightplan library inside your project.

Now we need to create a configuration file inside the main folder of our project called .

Before writing the code in our Flightplan configuration file let‚Äôs understand what exactly we want to achieve and how we want to structure our files and folders to do so.

As we said, our objective is to be able to deploy a new version of our website with a single command and to be able to rollback to the previous version just by launching another command. So we expect to have at least two different commands: and .

To achieve this goal we can structure the folders in our remote server as follows:

The flow we want to create for every deploy is the following:

Furthermore we want to add a nice feature to save disk space: we want to have a fixed numbers of deployed versions on the server (e.g. no more than 10), so we might need to delete the older ones at the end of every deploy.

It‚Äôs a lot of code, let‚Äôs analyze it piece by piece.

The remote configuration defines our production environment on our server and tells Flightplan how to connect to it and what the specific options for the server are. In more advanced setups you can also specify an array of servers to which the deploy will be carried simultaneously.

As you can see there are some configurations that you will need to change, like:¬† , , (probably not required), and .

The setup command is a helper command that you can launch once to configure the remote machine folders.

The command is a debug function that prints the hostname of the server the script is currently in. I recommend to use it, because if you need to switch to a multi-server environment it will be very useful to follow the output of all the servers.

In the next lines we first create our web root folder, then inside that folder we create the folder and we clone our repository into the folder .

The deploy command is, of course, the most important one, let‚Äôs review its code:

The first thing we do is to update the folder pulling all the new stuff from our repository. Then we execute the bash command that prints out the current timestamp in seconds and milliseconds (e.g. ). This will be the id of our new deploy. At this stage, we simply copy the folder inside the folder using the new version id as folder name (e.g. ). To finish the process we symlink this new folder to the folder. We also take care to assign these files to the user so that nginx will be able to read these files.

Then we clean up the old deploys using a handy bash short-liner command. The command lists and removes all the folders in the directory skipping the first n, where n is the number of deploys that we want to keep.

The rollback command allows us to restore the previous version and to delete the newest one, it‚Äôs like a step back in time.

What we do here is to use another bash short-liner to get the last 2 deployed versions inside the folder. The first one is the newest one, the second is the one we want to rollback to. Then we simply symlink the second to the folder and delete the first one.

Ok, now that we have all our Flightplan commands ready we can launch off the first deploy.

For the first time we need to run:

to set up all the folders on our server, then we can launch our first deploy with

If we have done everything correctly our deploy should be successful and show a green dot! But wait‚Ä¶ why our server still shows the default nginx page? Oh well, we still need to configure nginx to use our folder!

Get back to you ssh console and run:

This will open the nginx configuration file with the nano editor. Move the cursor down until you see a block definition and look for the property. There should be the default nginx page path in there, just replace it with the path of your folder (e.g. ). Then you have to save the file with and exit with .

The last step to do is to force nginx to reload the new configuration:

Now get back to our website and refresh! Tad√°! Our web server is now serving our new website! Cheer up!

Ok now maybe it‚Äôs time to realize that our new website it‚Äôs not so amazing, maybe it would be nice to add an image and change the background color. You can grab a very nice image from here. Let‚Äôs update our HTML file:

We basically just added the paragraph with the image, but notice we also moved our stylesheet into its own folder! Ok now just add the following block of CSS at the end of our stylesheet to change the background color:

And here we have it!

I know, I know‚Ä¶ it looks like one of that websites from the early ‚Äô90s, but let‚Äôs pretend it‚Äôs wonderful and we want to deploy this new version for now.

So first of all we need to commit our modifications. It‚Äôs always a good idea to launch a before committing to have a clear idea of what has changed. That‚Äôs the output we should get:

There are some things to review here. First of all we moved our css file to the folder so git thinks we deleted it. We also changed our file , then there are some new files and folders that we need to add to the repository.

But it‚Äôs a good idea to not add the folder because we don‚Äôt want it on our website, it‚Äôs just there because it contains all the needed dependencies to run Flightplan on our local machine. Thus, the best approach is to put it onto the git ignore list. To do so we need to create a new file called :

If you run again you can see that the output changed a bit:

The folder disappeared and the new file is waiting to be added to the repository.

To add all these new files and folders to our repository we need to launch the following git command:

Let‚Äôs launch again to see what‚Äôs happened:

Now everything is green and git also recognized that we moved the css file to the new folder. Great, it seems that we have added all the files that we need and we are now ready to commit the changes to generate a new version in the local repository:

And then we can send this new version to the remote repository with:

Now it‚Äôs time to run our deploy script to update our remote server:

We should see a bunch of lines of output and then a green dot that confirms that our deploy went fine! Great, let‚Äôs now refresh our website page in the browser and see that our new version is online!

We are just cheering up for the update but after a couple of minutes one of our friends call us to say:

So yes, maybe we realize as well that the previous version had that kind of fascinating minimalism and that it‚Äôs better to rollback. Our Flightplan configuration it‚Äôs here to support us and make things simple, just run:

Let‚Äôs refresh your browser and tell our friend he was right!

Maybe it‚Äôs time to work on a better new version, but now you know how to do it on your own üòâ

In this article we learned a lot of useful things about how to keep our website versioned and how to deploy it easily. We used a bunch of interesting tools like git and Flightplan.

The article was focused on explaining the basics of these tools. You might have a dynamic website written in Php or NodeJs rather than a static site¬†so you might need to add more steps to configure your remote server and your deploy process. Anyways, it shouldn‚Äôt be too hard now that you have a boilerplate to start from.

I hope the article was useful, I really hope to hear your opinions in the comments below!

Luciano is a Software Engineer born in 1987, the same year that the Nintendo released ‚ÄúSuper Mario Bros‚Äù in Europe, which, by chance is his favourite videogame!

He is passionate about code, the web, smart apps and everything that‚Äôs creative like music, art and design. As web developer his experience has been mostly with PHP and Symfony2, even if he recently fell in love with Javascript, NodeJS and Docker. In his (scarce) free time he writes on his personal blog at loige.co.|||

In this article you'll learn how to deploy a static website with Nginx and how to create a deployment process to keep our website updated using Flightplan.