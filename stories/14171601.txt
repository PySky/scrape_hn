This post is a reply to ‚Äújust use Terraform‚Äù recommendation I‚Äôve just seen. I hope more people will benefit from my perspective if it‚Äôs posted here. There is plenty of marketing behind most of the tools I mention here. It‚Äôs all rosy, see the ‚ÄúLife before Puppet‚Äù video. Let‚Äôs balance this marketing bullshit a bit.

Terraform, CloudFormation, Puppet, Chef as any other declarative frameworks/tools take control away from you. They work fine for ‚Äúhello world‚Äù examples. Then there is life where you need something these frameworks did not anticipate and you are sorry you have not coded everything yourself from the start. Now you are stuck with these tools and you will be paying for it in your time and money. Working around limitations of such tools is a pain.

I am using CloudFormation and have used Puppet and Chef in the past. These tools do have their place. In my opinion it‚Äôs a very limited set of scenarios. Terraform, CloudFormation, Puppet and Chef are used much more widely than they should be.

These tools have some value but too often people neglect the cost which in many cases outweighs the value. Most of the cost comes from inflexibility. Terraform and CloudFormation are so limited that people frequently use another tool for generating these. That adds another bit to the cost.

I‚Äôm hearing frequently from a friend (sorry, can‚Äôt name him) how much they suffer from Terraform‚Äôs inflexibility. Inflexibility can not be fixed because it‚Äôs a declarative framework. Unfortunately they are so invested in Terraform that they will continue to spend hundreds of hours to fight it. Chef is causing trouble there too, community Cookbooks proved to be a mismatch for the needs and sanity of the engineers there.

Are you sure you want to use Puppet? Apparently you can‚Äôt do it well without their support‚Ä¶ Just saying‚Ä¶

Regular considerations for choosing a tool apply. See my older post ‚ÄúProve your tool is the right choice‚Äú.

Let‚Äôs take it to the extreme: no new code should be written. No libraries, no frameworks. Because everything already exists. Sounds about right.

Smarter people don‚Äôt always produce better solutions or solutions that fit your use case. Most of the time smart people will produce smart solutions‚Ä¶ and then there are people that don‚Äôt usually think in graphs and are really puzzled when debugging Puppet cyclic dependency errors for example.

This is marketing bullshit. Don‚Äôt buy it! It‚Äôs often more expensive to adopt a code that does not meet your exact needs and is much more complex that you need (because it should support multiple platforms and use cases) than to write your own. I have seen suffering followed by usage of community Cookbooks/modules followed by in-house rewrite or fork.

Let‚Äôs do some math. Team of two works for a year. They are (very modest estimation) 10% more productive because they have coded whatever they needed and were not fighting with the tools. Even when wrongfully assuming that custom solution is harder to understand for the 3rd guy that joined the team after one year, how much is it harder? Is it more than 300 hours harder?

Yes. What is common to all these tools is declarative style and their usage: these tools are typically run using CLI.

All these tools have three axes that I consider:

I‚Äôd like to make sure that it‚Äôs clear that the tools mentioned in this article have different positions on the 3 axes and are not equal in the value they provide you in your specific situation.

The main point of the article is that while these tools differ on axes 1 and 3, they are all limiting because conceptually, they are all frameworks. You pass your execution into the tool and it does a lot. Here is where you loose your flexibility as opposed to using a library. You have relatively little control of what happens inside the tool.

I don‚Äôt want to work around limitations. It seems to be the norm for these tools. I‚Äôd rather have a library that misses parts that I‚Äôd code myself. Working around limitations in my opinion is generally much worse than missing functionality (depends on specific circumstances of course).

Please note we are still comparing between the tools that all use limiting paradigm: frameworks

We are talking about the ‚ÄúInput‚Äù axis I mentioned above. Yes, Terraform syntax apart from being more aesthetically pleasing is somewhat closer to ‚ÄúHalf-baked programming language that was probably never indented to be a programming language‚Äù while CloudFormation is somewhat closer to ‚ÄúConfiguration format‚Äù.

There is a huge difference in the amount of work done by typical API call and what these tools do once you call them. With more granular API calls you decide if and when you do specific calls and what do you do in between the calls ‚Äì it‚Äôs much more flexible.

One of the low value tools from my perspective. I‚Äôll explain. On the ‚ÄúInput‚Äù axis, it‚Äôs half-baked programming language. Better than configuration file but still loses to Chef for example. On the ‚ÄúTCO‚Äù access, I really think that Puppet and Chef are not good alternatives to custom scripts in most cases. Scripts by the way also win on the ‚ÄúCalling‚Äù axis, which means flexibility.

We don‚Äôt. When we suffered while working with Puppet, we knew that support will not solve our problems. Some crappy community modules can not be solved by support. Breakage on modules versions updates ‚Äì same. Librarian, more complexity on top of complexity ‚Äì same. The above quote about support (‚ÄúA key component of every successful Puppet implementation is access to a knowledgeable support team‚Äù) was just to highlight that guys at Puppet think people can‚Äôt use it without support. This is just a humorous point and not really important.

The point is that all these tools would have been better if they would be implemented as libraries on top of real programming languages, where you call the parts that you need instead of one ‚Äúdo everything‚Äù call.

With the exception of Chef, these tools use either configuration files as input or configuration-file-almost-a-programming-language format. It‚Äôs always the same path:

Elaborating on taking control away from you. You get convoluted things like this:

For Puppet and Chef, I have not seen a single system where my estimated TCO of these tools would be better than a bunch of idempotent modular bash scripts which I use. It did not take much time to write these. Some Python is used for configuration generation (json / jinja templates + environment data).

With Cloudformation and Terraform it‚Äôs not that simple. I‚Äôm mostly amazed that nobody does libraries which would just provide declarative primitives, not frameworks where you feed everything you need via one call. I am working on one but it is really strange for me that I haven‚Äôt heard already about such library for Python or Ruby.

Not sure I agree 100% because it depends on situation but I can imagine many situations where it‚Äôs correct. The important thing here is that I think that all current alternatives are not so good.

Custom solution is simpler. Do you really need documentation for 19 lines of bash code that installs Nginx and another 29 that do a restart that handles leaking file descriptors? You will definitely need documentation of 2000+ lines of Chef cookbook or Puppet module that install Nginx and ‚Ä¶ oh wait‚Ä¶ how do I reload Nginx and then conditionally (if enough file descriptors leaked) restart it? Time to dive in üôÇ

I do imagine how custom solution can be complicated (read harder to maintain and higher TCO) if done by unprofessional people. In some cases it might be better for them to use a framework. On the other hand, they might stuck when trying to do something advanced with the framework. Really depends on the situation.

While ‚Äúuse standard tools‚Äù generally sounds right, I have seen too much convoluted solutions using ‚Äústandard tools‚Äù because of the inflexibility. People were trying to work around the limitations. Comparing top-down execution of simple script to workarounds for these tools, it‚Äôs much simpler to wrap your head around the scripts. I have recently passed one of my clients to the next guy. I have asked him how he is doing and he told me that he was happy to have simple custom solution over complex frameworks. TCO has many components. Choosing ‚Äústandard tools‚Äù does not always outweigh other aspects.|||

This post is a reply to "just use Terraform" recommendation I've just seen. I hope more people will benefit from my perspective if it's posted here. There is plenty of marketing behind most of the tools I mention here. It's all rosy, see the "Life before Puppet" video. Let's balance this marketing bullshit a bit.‚Ä¶