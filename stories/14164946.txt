“You know a little about virtualization don’t you?”

And so it began. This was the mid 1980’s at IBM Poughkeepsie. We had recently finished up work on OLE – more on that in a bit - and were starting work on IBM’s next generation ES/9000 computer system.

Amdahl had recently announced their ‘Multiple Domain Facility’ and IBM needed a response. Approximately 18 months later, IBM announced Logical Partitioning and its associated PR/SM (Processor Resource/System Manager) hypervisor. This initial implementation of Logical Partitioning was mostly in microcode on an existing IBM 3090E computer system1.

My job, in addition to helping develop the LPAR architecture, was to implement Logical Partitioning mostly in hardware, rather than microcode, in IBM’s next generation ES/9000 systems. I was also team lead for the ES/9000’s microcoded System Execution Element (SXE). The SXE was based on OLE (Off-Load Element), a processor our small team (Clark Kurtz, Paul Heintz, Fred Cox, Kulwant Pandey, Larry Meoli, Jay Murdock & many others) had previously designed for use in IBM’s earlier 3090E computer system. OLE was ‘My First Processor’; I was lead designer on the OLE instruction fetching and execution units. OLE, in turn, was based on John Cocke’s 801 RS24 RISC microprocessor design which later spawned IBM’s Power* series computer systems. Our young team took the OLE design all the way from concept through implementation and to a very successful post-silicon bring-up.

We added many features to the ES/9000 design to support hardware-assisted virtualization. This hardware included multiple copies - Host (aka hypervisor), Guest-1 and Guest-2 – of most of the S/390 O/S visible architectural registers including program status words (PSWs), control registers,  I/O & and external interrupts masks, timers, Time-of-Day clock, etc. A 2nd level guest virtual address translation, for example, required hardware to access over 20 translation table entries.

It took several years and hundreds of designers to develop IBM’s ES/9000 system2. Here is one particularly memorable example of the myriad of ‘minor’ issues we dealt with each day:

Approximately 25,000 virtualization test cases were generated for the previous 3090E implementation of LPAR. When first run (in simulation) on the ES/9000’s newer hardware-intensive implementation, several thousand of these test cases failed; too many to deal with ‘by hand’. I sketched out – literally, on a napkin – the algorithm – in S/370 assembler - for a microcode path trace coverage tool to categorize and prioritize these fails; fixing one test case could fix dozens of similar test cases if you knew the ‘right’ test case to pick. Jim Goldsmith and I negotiated a month off our regular duties and wrote the initial code. By the end of the summer, we had written over 10,000 lines of code and had helped categorize, root cause and resolve essentially all the fails. Jim and I also delivered a microcode regression system which, whenever a microcoder changed microcode, identified the affected microcode paths and submitted a regression using the associated test cases; regression results were emailed to the microcoder the next morning.

Some time after ES/9000 shipped, I met with a group of IBM Field Application Engineers to discuss their customers’ experiences with LPAR and PR/SM. It normally takes several years for even a small subset of our customers to adopt new technology. This was only one to two years after ES/9000 shipped and, already, more than one-half the customer base had adopted LPAR and PR/SM. This was when I first realized how truly transformative Logical Partitioning was.

When the dust settled, Amdahl licensed Logical Partitioning from IBM. I was awarded an IBM Outstanding Technical Achievement Award for my contributions.

I left IBM in 1999 and joined Intel’s new microprocessor design center in Austin, TX. In ~2000, Rich Oehler, working on IBM’s x86-based servers at the time, and I contacted Intel’s Diane Bryant to convince Intel to implement virtualization.  Diane famously told Rich Oehler and I that ‘virtualization is a chipset problem’. Needless to say, she was wrong; it took Intel several more years to realize this.

A couple of years later, I was given the opportunity to perform a technology transfer of IBM’s logical partitioning to Rich Uhlig's virtualization team. I met with Rich’s team, explaining how IBM's 'Logical Partitioning' works, detailing each of the instructions (e.g. ‘Start Interpretive Execution’) and patents involved and, most importantly, explaining the ‘why’ behind the ‘what’ we had implemented.  VT-x, as described in Rich’s 2006 article3, looks very similar to IBM's logical partitioning though, as I mentioned several months later to Rich, VT-x was a 'little light on I/O' (input/output; I/O address translation, I/O interrupts; etc., all of which were included in LPAR). Rich's team subsequently & independently defined VT-d for I/O virtualization.

VMware benefited significantly from Intel's VT-x. Prior to Intel's VT-x, VMware used a technique called 'binary translation' to implement virtual machines on Intel hardware (basically, VMware's software copied and significantly modified the guest operating system on the fly). Intel's VT-x improves on that considerably. From Rich's paper: "A central design goal for Intel Virtualization Technology is to eliminate the need for CPU paravirtualization and binary translation techniques and thereby enable the implementation of VMMs that can support a broad range of unmodified guest operating systems while maintaining high levels of performance."

My daughter recently applied for a summer internship at VMware.

I left Intel and I joined AMD in 2007 - don’t worry; I’ll find the ‘right’ company, some day. AMD had recently developed their own IOMMU (aka I/O virtualization) specification and had contracted with a third party to implement it. Needless to say it didn’t work. Leo Duran and I, with considerable assistance from Mike Choate, debugged the third party’s chipset-based IOMMU implementation. Unfortunately, the third party decided to exit the chipset market. Not knowing when to quit or how to say no, I offered to create an FPGA-based IOMMU software development vehicle. Steve Klassen’s group built the systems, which were deployed worldwide to Xen, Microsoft Azure/HyperV, VMware, etc. Leo Duran and I successfully demonstrated a pair of IOMMU SDVs to Dave Cutler and Jake Oshins at Microsoft.

A recent interrupt controller virtualization patent continues my long involvement with processor and I/O virtualization.

John Hennessey refers to IBM’s virtualization as the “gold standard of virtual machine technology”.

“You know a little about virtualization don’t you?” I knew nothing about virtualization at the time – OLE didn’t implement that feature - but I would never admit that. Then as now, “Yes” creates incredible opportunities!|||

