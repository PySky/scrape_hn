Ghostscript is a suite of software based on an interpreter for Adobe Systems' PostScript and Portable Document Format (PDF) page description languages. Its main purposes are the rasterization or rendering of such page description language files, for the display or printing of document pages, and the conversion between PostScript and PDF files.

Ghostscript can be used as a raster image processor (RIP) for raster computer printers—for instance, as an input filter of line printer daemon—or as the RIP engine behind PostScript and PDF viewers.

Ghostscript can also be used as a file format converter, such as PostScript to PDF converter. The ps2pdf conversion program, which comes with the ghostscript distribution, is described by its documentation as a "work-alike for nearly all the functionality (but not the user interface) of Adobe's Acrobat Distiller product".[3] This converter is basically a thin wrapper around ghostscript's pdfwrite output device, which supports PDF/A-1 and PDF/A-2 as well as PDF/X-3 output.[3]

Ghostscript can also serve as the back-end for PDF to raster image (png, tiff, jpeg, etc.) converter; this is often combined with a PostScript printer driver in "virtual printer" PDF creators.

As it takes the form of a language interpreter, Ghostscript can also be used as a general purpose programming environment.

Ghostscript has been ported to many operating systems, including Unix-like systems, classic Mac OS, OpenVMS, Microsoft Windows, Plan 9, MS-DOS, FreeDOS, OS/2, Atari TOS and AmigaOS.

At the time i created this module i was not able to find any module on npm that execute Ghostscript command through its C API, otherwise there were some module that call Ghostscript through the execution of the corresponding shell command. This is a good way to start using some library from node, but there are the following drawbacks:

To fit all needs Ghostscript4JS has sync and async methods so it could be used in a web application where it's very important to not block the event loop, so all requests will be served without any delay originated by our application.

Before installing Ghostscript4JS you need to assure you have the following prerequisites:

At this point you need to set the enviroment variable GS4JS_HOME to

At this point you need to set the enviroment variable GS4JS_HOME to or based on you architecture

In general, based on your Linux OS and architecture, you have to set the environment variable GS4JS_HOME to point on folder containing library.

If you want to use ghostscript4js you have to install it. There are two methods for that:

In dependencies of your add the following item:

The module ghostscript4js allows you to use some installation options that you can use when in your operating system something is different against standard installation.

--GS4JS_HOME Set the GS4JS_HOME variable that represents the path in your system where is located the ghostscript library

--GS4JS_LIB Set the GS4JS_LIB variable that represents the file name for the ghostscript library installed in your system

--GS4JS_DLL Set the GS4JS_DLL variable that represents the file name for the ghostscript DLL installed in your windows system

version() method returns an object that contains information about version of Ghostscript library installed on the system. It is important in those circumstances where you have to take decision based on different version. The returned data are similar to the example repoted below:

This is a synchronous method and returns the version info or throws an Error to indicate that something went wrong during its execution.

executeSync(cmd) method takes the Ghostscript command parameters in input as a string and executes in a synchronous way. If something wrong happens in calling this method an Error with description and code error will be thrown.

execute(cmd, callback) method takes in input the Ghostscript command parameters as a string and an optional callback. The execution will be asynchronous so this ensure better performance especially in a web application enviroment, because it'll not block the Node.Js event loop. This method has an optional callback function as input, in that case, a possible error will be handled by this function. If noone function will be provided the method returns a Promise that will be resolved or rejected as reported in the following example.

The error raised from ghostscript4js in all of its method is an instance of Error object that cointains a message that describes what happened and at the same time cointains the Ghostscript error code so you can inspect what happened in a better way. At this link Ghostscript error codes you can find all Ghostscript errors code.

This module was built based on Ghostscript C API that is compatible with some specifics versions. The module has two properties MIN_SUPPORTED_REVISION and MAX_SUPPORTED_REVISION which respectively indicate the minimum and maximum supported Ghostscript's version.

Thank you to all people that encourage me every day.|||

Bindings for the Ghostscript C API to the Node.JS world.