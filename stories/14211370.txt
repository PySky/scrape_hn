SteamPress is a Swift blogging engine for use with the Vapor Framework to deploy blogs to sites that run on top of Vapor. It uses Fluent so will work with any database that has a Fluent Driver. It also incorporates LeafMarkdown allowing you to write your posts in Markdown and then use Leaf to render the markdown.

The blog can either be used as the root of your website (i.e. appearing at https://www.acme.org) or in a subpath (i.e. https://www.acme.org/blog/).

There is an example of how it can work in a site (and what it requires in terms of Leaf templates and the parameters is passes to them) at https://github.com/brokenhandsio/SteamPressExample.

It's just a single line! Well almost... First add it to your dependencies:

Next import it in the file where you are setting up your with:

This will look for a config file called that looks like:

The line is optional, if you want your blog to be at the root path of your site, just remove that line.

You can also initialise the Provider manually, by creating it as so:

This will initialise it as the root path of your site. If you wish to have it in a subdirectory, initialise it with:

By default, the paginator used by SteamPress is expecting to use Bootstrap 4. You can configure it to use Bootstrap 3 by either adding it to the configuration file or the manual initialisation. To add to a config file, in your , add:

To manually iniatialise, set up the Provider like so:

You can disable the routes for authors pages and tags pages (both individual and all) by adding the option in your configuration file. To disable all of the authors pages, in your add:

To disable all of the tags pages, set:

Both of these settings can also be configured if manually setting up the Provider:

When you first visit the login page of the admin section of the blog it will create a user for you to use for login, with the username . The password will be printed out to the console and you will be required to reset your password when you first login. It is recommended you do this as soon as your site is up and running.

SteamPress currently supports using Disqus for the comments engine. To use Disqus, just add a config file to your site that looks like:

This will pass it through to the Leaf templates for the Blog index ( ), blog posts ( ), author page ( ) and tag page ( ) so you can include it if needs be. If you want to manually set up comments you can do this yourself and just include the necessary files for your provider. This is mainly to provide easy configuration for the Platform site.

SteamPress supports both Open Graph and Twitter Cards. The Blog Post Context (see below) will pass in the created date and last edited date (if applicable) in ISO 8601 format for Open Graph article support, under the parameters and .

The Blog Post page will also be passed a number of other useful parameters for Open Graph and Twitter Cards. See the section below.

The Twitter handle of the site can be configured with a config file (or injected in) with a property (the site's twitter handle without the ). If set, this will be injected into the public pages as described below. This is for the tag for Twitter Cards

SteamPress expects there to be a number of Leaf template files in the correct location in . All these files should be in a directory, with the admin template files being in an directory. For an example of how it SteamPress works with the leaf templates, see the Example SteamPress site.

The basic structure of your directory should be:

This is the index page of the blog. The parameters it will receive are:

This is the page for viewing a single entire blog post. The parameters set are:

This is the page for a tag. A blog post can be tagged with many tags and a tag can be tagged on many blog posts. This page is generally used for viewing all posts under that tag. The parameters are:

This is the page for viewing a profile of a user. This is generally used for viewing all posts written by a user, as well as some information about them. This template is also used by the Admin section for viewing a 'My Profile' page when logged in. The parameters it can have set are:

This is the page for viewing all of the tags on the blog. This provides some more navigation points for the blog as well as providing a page in case the user strips off the tag from the Tag's URL. The parameters that can be passed to it are:

This is the page for viewing all of the authors on the blog. It provides a useful page for user's to see everyone who has contributed to the site.

This is the main Admin page for the blog where you can create and edit users and posts. The parameters for this page are:

This is the page for logging in to the admin section of the blog. The parameters are:

This is the page you will be redirected to if you need to reset your password. The parameters are:

This is the page for creating a new blog post, or editing an existing one. The parameters for this page are:

This is the page for creating a new user, or editing an existing one. The parameters are:

There are a number of routes to the Admin site for creating and editing user etc that are required otherwise you will receive errors.

This section needs to be filled out, but you can view the Controllers in the code to work out what they should be, or see the Example Site.

The blog post has a number of s you can pass to the function to provide more information when getting a . Currently there are three contexts supported:

If no is supplied to the call you will get:

The blog user has a available to pass into the function that provides an extra parameter to the user node, which contains the number of posts that author has written.

The blog user has a available to pass into the function that provides an extra parameter to the tag node, which contains the number of posts tagged with that tag.

SteamPress supports two type of snippets for blog posts - short and long. Short snippets will provide the first paragraph or so of the blog post, whereas long snippets will show several paragraphs (such as for use on the main blog page, when listing all of the posts)

You can pass in a to the call to provide more information when getting objects, as shown above.

You can also call them directly on a object (such as from a ):

LeafMarkdown allows you to render markdown as HTML in your Leaf files. To use, just simply use:

This will convert the object 's to HTML (you pass in as a parameter to your Leaf view). It uses CommonMark under the hood, but for more details, see the LeafMarkdown repo.

SteamPress also contains an API for accessing certain things that may be useful. The current endpoints are:

I anticipate SteamPress staying on a version 0 for some time, whilst some of the biggest features are implemented. Semantic versioning makes life a little difficult for this as any new endpoints will require a breaking change for you to add Leaf templates! However, I will aim to stabilise this as quickly as possible, and any breaking changes will be announced in the releases page.

On the roadmap we have:|||

SteamPress - A Blogging Engine and Platform written in Swift for use with the Vapor Framework