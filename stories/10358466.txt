Once you've downloaded the OneDrive SDK for Python, open a command prompt and type the following to install it:

Next, include the SDK in your Python project by adding:

To interact with the OneDrive API, your app must authenticate. You can use the following code sample to do so.

The above code requires copy-pasting into your browser and back into your console. If you want to remove some of that manual work, you can use the helper class . That helper class spins up a webserver, so this method cannot be used on all environments.

Once your app is authenticated, you should have access to the OneDrive API, and can begin making calls using the SDK.

To interact with the OneDrive API, your app must authenticate for a specific resource. Your app must first use the Resource Discovery helper to find out which service you can access. Then, you can build a client to access those resources. This uses a slightly different auth flow than the standard code flow - note the use of with the of the service you want to access.

Note: All examples assume that your app has already been Authenticated.

For async operations, you create an which implements , and execute it with .

You can save your OAuth session details so that you don't have to go through the full OAuth flow every time you start your app. To do so, follow these steps:

After the call to your will be ready to authenticate calls to the OneDrive API. This implementation is not complete, though.

If you need to proxy your requests, you can use the helper class .

All requests using that client will be proxied.

This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.|||

onedrive-sdk-python - OneDrive SDK for Python! https://dev.onedrive.com