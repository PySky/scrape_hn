If you’re using “Form Objects” to not keep validations in your model, you might find yourself challenged when trying to reuse custom validators, that are common across few classes.

Imagine code that validates and processes purchases by different payment providers. In the end, they are doing the same thing, but in a different way, thus we have separate classes for handling each of them.

User is purchasing the product, so we need to check if it exists.

This validation is exactly the same for both providers.

To use it, you simply write:

While purchasing, user can input a voucher that will discount a price, but we need to check if it actually exists and is available for the given product.

Now you can use them both with the benefit that when the first validation fails, you don’t process another one, because it cannot succeed. When there is no product, then for sure there is no discount for it.

This way you can compose your form objects from small pieces and reuse them in different places.|||

If you’re using “Form Objects” to not keep validations in your ActiveRecord model, you might find yourself challenged when trying to reuse custom validators, that are common across few classes.