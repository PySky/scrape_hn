In a previous post an artificial benchmark was done to measure the performance difference between IP and Unix domain sockets. The results were somewhat impressive, as Unix sockets performing at least twice as fast as IP sockets. But how these two forms of communication behaves in the real-world, using a battle-tested application protocol? Would the throughput really double just by switching between them? We’ll be using a Flask app served by Gunicorn behind an nginx reverse proxy to find out.

The following tests were executed on a (2 Cores, 3.75GB RAM) instance on Amazon Web Services (AWS). None of the multi-threading/multi-process options offered by Gunicorn were used, so what we’ve got here was really what it can serve using a single CPU core. This way, we’ll also have the benefit of a free core to run both nginx and the benchmarking (wrk) tool itself.

The application is pretty close to the standard Flask “hello world” example:

Gunicorn was used to serve the application with no other option besides .

This is the nginx virtual host configuration for both Gunicorn instances:

We’ll have to append both hostnames to our , in order to avoid the need for a DNS server:

The parameters used in this benchmark were pretty much what offers by default. Experimenting with more threads or connections didn’t resulted in a significant difference, so the only parameter set was , which means “send the maximum number of requests as you can during five seconds”.

During multiple runs, these numbers were consistent. The Unix socket virtual host answered around 5 to 10% more requests in average. This number is small but can be significant, specially when dealing with high traffic web servers answering thousands of requests per minute. Anyway, this isn’t anywhere near the 100% performance improvement we saw when comparing raw sockets instead of a real protocol like HTTP.

It would still be interesting to compare how this application would perform running inside a Docker container. Docker is known for having network overhead when using forwarded ports, so we’ll see how much it means in this case. Two files will be used to create our application image and its containers:

Let’s run again, after and :

The difference between IP sockets over forwarded ports and Unix sockets via shared volumes were huge under Docker. 40-45% is a pretty big number when considering web server performance penalty. With a setup like this one, it would be needed almost twice as hardware resources to serve the same number of clients, which would directly reflect on infrastructure and project costs as a whole.

A few conclusions can be drawn from this experiment:|||

In a previous post an artificial benchmark was done to measure the performance difference between IP and Unix domain sockets. The results were somewhat impre...