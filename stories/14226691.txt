PostCSS plugin to parse CSS and add vendor prefixes to CSS rules using values from Can I Use. It is recommended by Google and used in Twitter and Taobao.

Write your CSS rules without vendor prefixes (in fact, forget about them entirely):

Autoprefixer will use the data based on current browser popularity and property support to apply prefixes for you. You can try the interactive demo of Autoprefixer.

Working with Autoprefixer is simple: just forget about vendor prefixes and write normal CSS according to the latest W3C specs. You don’t need a special language (like Sass) or remember where you must use mixins.

Autoprefixer supports selectors (like and ), unit function ( ), at‑rules ( and ) and properties.

Because Autoprefixer is a postprocessor for CSS, you can also use it with preprocessors such as Sass, Stylus or LESS.

Just write normal CSS according to the latest W3C specs and Autoprefixer will produce the code for old browsers.

Autoprefixer utilizes the most recent data from Can I Use to add only necessary vendor prefixes.

It also removes old, unnecessary prefixes from your CSS (like prefixes, produced by many CSS libraries).

Autoprefixer uses Browserslist, so you can specify the browsers you want to target in your project by queries like or .

The best way to provide browsers is config or with key. Put it in your project root.

We recommend to avoid Autoprefixer option and use config or . In this case browsers will be shared with other tools like babel-preset-env or Stylelint.

See Browserslist docs for queries, browser names, config format, and default value.

You can disable this behavior with the option. If you have no legacy code, this option will make Autoprefixer about 10% faster.

Also, you can set the option. Autoprefixer will only clean outdated prefixes, but will not add any new prefixes.

Autoprefixer adds new prefixes between any unprefixed properties and already written prefixes in your CSS. If it will break the expected prefixes order, you can clean all prefixes from your CSS and then add the necessary prefixes again:

Many other tools contain Autoprefixer. For example, webpack uses Autoprefixer to minify CSS by cleaning unnecessary prefixes.

If you set browsers list to Autoprefixer by option, only first Autoprefixer will know your browsers. Autoprefixer inside webpack will use default browsers list. As result, webpack will remove prefixes, that first Autoprefixer added.

You need to put your browsers to config in project root — as result all tools (Autoprefixer, cssnano, doiuse, cssnext) will use same browsers list.

Most new CSS features will require client side JavaScript to handle a new behavior correctly.

Depending on what you consider to be a “polyfill”, you can take a look at some other tools and libraries. If you are just looking for syntax sugar, you might take a look at:

Developers are often surprised by how few prefixes are required today. If Autoprefixer doesn’t add prefixes to your CSS, check if they’re still required on Can I Use.

There is a list with all supported properties, values, and selectors.

Browser teams can remove some prefixes before others. So we try to use all combinations of prefixed/unprefixed values.

Autoprefixer needs unprefixed property to add prefixes. So if you only wrote without W3C’s , Autoprefixer will not add other prefixes.

But PostCSS has a plugins to convert CSS to unprefixed state. Use postcss-unprefix before Autoprefixer.

No, Autoprefixer works only with browsers prefixes from Can I Use. But you can use postcss-epub for prefixing ePub3 properties.

is technically not a prefix and the transformation is not future-proof. But you can use postcss-font-family-system-ui to transform to a practical font-family list.

In Gulp you can use gulp-postcss with npm package.

With you also can combine Autoprefixer with other PostCSS plugins.

In webpack you can use postcss-loader with and other PostCSS plugins.

In Grunt you can use grunt-postcss with npm package.

With you also can combine Autoprefixer with other PostCSS plugins.

There is postcss-js to use Autoprefixer in React Inline Styles, Free Style, Radium and other CSS-in-JS solutions.

You can use the postcss-cli to run Autoprefixer from CLI:

See for help.

You can use Autoprefixer with PostCSS in your Node.js application or if you want to develop an Autoprefixer plugin for new environment.

There is also standalone build for the browser or as a non-Node.js runtime.

You can use html-autoprefixer to process HTML with inlined CSS.

Autoprefixer should be used in assets build tools. Text editor plugins are not a good solution, because prefixes decrease code readability and you will need to change value in all prefixed properties.

I recommend you to learn how to use build tools like Gulp. They work much better and will open you a whole new world of useful plugins and automatization.

But, if you can’t move to a build tool, you can use text editor plugins:

Autoprefixer uses the PostCSS warning API to warn about really important problems in your CSS:

You can get warnings from :

Every Autoprefixer runner should display this warnings.

Autoprefixer was designed to have no interface – it just works. If you need some browser specific hack just write a prefixed property after the unprefixed one.

If some prefixes were generated in a wrong way, please create an issue on GitHub.

Autoprefixer has 4 features, which can be enabled or disabled by options:

If you do not need Autoprefixer in some part of your CSS, you can use control comments to disable Autoprefixer.

Control comments disable Autoprefixer within the whole rule in which you place it. In the above example, Autoprefixer will be disabled in the entire rule scope, not only after the comment.

You can also use comments recursively:

In Sass/SCSS you can use all the disable options above, add an exclamation mark in the start of comment: .

Function returns new PostCSS plugin. See PostCSS API for plugin usage documentation.

You can use PostCSS processor to process several CSS files to increase performance.

You can check which browsers are selected and which properties will be prefixed:|||

autoprefixer -  Parse CSS and add vendor prefixes to rules by Can I Use