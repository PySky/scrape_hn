0. Carefully select an item from your backlog that would make your elevator pitch stronger.

1. Implement the feature but add only one or two new areas of complexity to your code base. Cover such areas with a happy-flow unit test if you are implementing an idea for the first time.

2. In a debug session, step through new areas of complexity to find logical errors.

3. Manually test the new feature.

4. If result seem off, or your app crashes and this is a recurring error, or if this is a new error and a debug session does not make you any wiser, add a unit test.

5. Fix error.

6. Verify areas not covered by unit tests by testing manually. Choose areas that may have been impacted by the new feature.

7a. Unfixable errors? Consider adding more unit tests but first ask, is your solution an architecturally sound one? If you realize where you took a wrong turn, make a copy of your new unit test files then git reset — hard <stable_state> and repeat step 1 but this time implement the feature in smaller increments. Re-implement your favorite unit tests from last session then add just one new area of complexity at a time. If you reset don’t dispair, you’re much wiser this time around. Resetting is good. Your future self will thank you for it.

7b. Errors fixed or no errors found? Go to 0.|||

0. Carefully select an item from your backlog that would make your elevator pitch stronger.
1. Implement the feature but add only one or two new areas of complexity to your code base. Cover such…