This post is about release of ESB pack for BizTalk Server.

Seven years after the release of version 2.0, BizTalk ESB Toolkit features and capabilities remain the same and some of them are not well known. Unfortunately, very little has been done to improve the toolkit itself during these years. At Infragravity, this situation suddens us. This is why this feature pack for was created. It was designed to modernize and extend capabilities of using BizTalk as enterprise service bus without breaking changes or impacting existing components. It can also replace Microsoft AppFabric for Windows Server monitoring to collect telemetry from WCF, WF, ESB, IIS and integrated with modern monitoring platform used for DevOps today on-premise and in the cloud.

First, more robust flow control for itineraries and more options for “templating”. The original purpose of templating was to ensure that itinerary itself works across different BizTalk environments and relies on reference data: service registry, business rules, configuration store, etc. In the past, developers asked why they cannot reference one itinerary from another in designer and can only use a single limited mediation flow. This is now resolved in this feature pack, which brings us to it’s new itinerary concepts: variables, sub-flows and continuations. In addition, this feature pack uses active monitoring and emits rich telemetry that can be used for test automation, user-defined events, troubleshooting and monitoring in production without dependency on BAM.

The set of variables is collection of name-value pairs stored in itinerary. Using variables makes easier to store important context properties before message exchanges and make routing decisions during the execution of a flow. Every itinerary service can write and read variables and utilize new resolver for routing based on their values.

The concept of sub-flow simply means referencing steps in one itinerary from another which have to take place as part of main flow at runtime. In addition new itineraries can be initiated from orchestrations with different tracking options.

In terms of itinerary, continuation specifies whether or not main flow should resume after sub-flow is completed. In other words, after execution of sub-flow, steps in a main flow could be ignored or triggered. This feature also provides orchestration services ability to spawn new itinerary with optional continuation of another known instance without using on-ramps. While it is not universal solution to address all integration challenges, the benefit of this feature is ability to dynamically choose flows as itinerary is being processed, which is now truly compliant to the definition of the Recipient List pattern.

Last, but not least there are few improvements in existing runtime and extensibility. It is much easier to create different types of broker services using messaging, orchestrations and new filtering. Runtime capabilities were improved with new message exchange capabilities for enabling SOA and EAI patterns that ESB Toolkit currently does not support today. These capabilities are configurable using new extensions in itinerary designer.

The integration of telemetry with modern monitoring platform offers choices for storing and processing time series, metric visualization and alerting. This feature pack let customers decide how to collect, store, analyze and visualize runtime metrics and choose “what to use when”. Each of these steps has many choices for different OS, middleware, service technology, IaaS and PaaS.

Using dbgview utility is no longer required: new telemetry for on-ramps, off-ramps, itineraries and failed message routing makes BizTalk much easier to operate for troubleshooting and monitoring service level agreements.

Developers often face challenges when implementing common SOA and integration patterns with ESB Toolkit. Typically, when itinerary flows become more complex, they are more difficult to track. To address this challenge, this pack uses telemetry for all ESB scenarios to measure performance of new features and capabilities without using BAM. The data collected from telemetry increases operational capabilities to detect when integration solution SLAs are broken and performance bottlenecks. The levels of telemetry are defined per itinerary and can be adjusted to choose events that should be emitted and collected at runtime.

This feature also solves critical challenge when business uses BizTalk as “shared infrastructure” when every change in application can negatively affect performance or function of existing apps deployed on the farm. The telemetry data also includes metrics for failed messages with and without itineraries. The alerting for any combination of metrics can be easily configured. More about alerts are described later in this post.

It is critical to allow DevOps engineers to evolve monitoring around their business, not someone else’s cloud business. What companies to monitor large cloud infrastructure do use today to monitor Docker, Kubernetes and many other metrics from products and infrastructure? InfluxDb is most popular time series database used on-premise and in the cloud to store and process monitoring and IoT data.  Grafana is de-facto industry standard for metric visualization with robust alerts feature in the latest version. New alerting capabilities in the latest version of Grafana allow to configure queries for any metric and send alerts via different channels including e-mail, Slack and Telegram.

This feature pack includes integration with modern monitoring platform described above for BizTalk ESB and other service technology, including WCF and WF. This approach is also similar to what IBM has done for the Integration Bus to help their core product be more successful with modern DevOps.

Performance engineers can collect performance counters using Telegraf, metrics from Snap, events from App Fabric and ESB metrics collected by this pack, IBM MQ metrics from Prometheus and visualize them together in Grafana. While this path may require using SaaS offerings in the cloud or hosting them on-premise, it does provide flexibility to decide how to monitor heterogenous systems along with BizTalk and .NET services to achieve symmetry for monitoring on-premise and in the cloud. In other words, performance engineers have an opportunity to adopt modern monitoring, which is proven to be reliable, actively developed, supported and easily accessible without any upfront cost.

The roadmap published by Microsoft in December 2015 indicates that BizTalk is going to stay here for some time. The latest version of BizTalk can be now hosted in the cloud. There are many customers who are using BizTalk today dealing with failed messages and itineraries, every day. Some of them consider “lift and shift” to move WCF and WF services along BizTalk as part of older stack to the cloud. The feature pack helps customers to use this approach to achieve symmetry for monitoring and operations for BizTalk and Microsoft service technology using deployment of your choice.

Enterprises are looking for flexibility and cost reductions to modernize and adopt new technology at the same time to achieve the best possible outcome. Using modern monitoring platform also allows to reduce support costs for monitoring different types or applications and services in datacenter, Amazon AWS, Microsoft Azure, Google cloud or IBM Bluemix.

Whether or not the this feature pack succeeds or fails, it is important that customers know that they can protect existing investments in BizTalk (and its ESB part) and reduce cost of ownership by using it with modern monitoring platform. Developers and performance engineers can download version of the ESB feature pack for free to determine if this path will work for them. For more more information about how to install this pack and support, please see release notes.

If opportunities to modernize BizTalk Server and its ESB capabilities that exist today are missed, this product will likely become another example of old EAI technology fading out from enterprise integration landscape.|||

Download ESB Feature Pack for BizTalk Server to modernize ESB capabilities and DevOps for enterprise and cloud of your choice.