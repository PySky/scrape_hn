Now that we’ve learned what operations do and how Trailblazer provides convenient macro steps to ease your life as a software engineer, it’s time to check out how to use operations, contracts, and cells in Rails.

In this example we will use Trailblazer operations with Reform form objects to validate and process incoming data.

The gem makes the integration a walk in the park. It pulls and invokes the gem automatically for you via a Railtie. All Trailblazer files are eager-loaded.

The gem also adds one single method to the which we’ll discover soon.

You can always discover a Trailblazer application in Rails by the directory.

Since we already covered the essential mechanics in chapter 02, we can jump directly into the first problem: how do we render a form to create a blog post?

At first, we need a presentation operation that creates an empty for us and sets up a Reform object which can then be rendered in a view. This operation per convention is named and sits in .

Those are all steps we’ve discussed in chapter 02. Create a new model, and use to instantiate a Reform form that decorates the model.

The interesting part in the operation is the option: it references the class, which itself lives in .

Contracts can be pure schemas or Reform objects that can in turn use or as their validation engine. Using a Reform object, whatsoever, will allow rendering that form in a view.

We now have the form and operation in place and are ready to hook that into the ’s action.

The method invokes the operation, optionally passes dependencies such as the into the operation’s , and then sets some default variables such as and for you.

After running the operation and retrieving the contract instance, it is now time to render a view with a form, that we can actually fill out and publish our blog post. This happens via and by invoking a cell. The cell’s job is rendering the form, so we need to pass the object to it.

BTW, the Cells gem and the rendering layer it brings is completely optional. If you want, you can keep using ActionView rendering along with operations.

The cell is responsible for rendering this view. We will discuss its internals later, but for a quick preview, here’s the cell class.

The s are necessary to import all helpers we need in the view.

As all we do is rendering the view, there’s no real code yet. Speaking of views, here is the cell’s view in .

Enough code to render the blog form. It looks a bit sad without any layout, but we’ll come to that shortly.

Submitting this very form will POST it to , which is the next controller action we have to implement.

Again, we run an operation. This time it’s .

A nice detail about is: it executes an optional block when the operation was run successfully. This means we can redirect to the index page in case of a successful blog post create. Otherwise, we re-render the form cell.

Let’s check out the operation in detail, now.

While the operation we implemented earlier only creates an unpersisted model, the operation also processes the submitted form data and physically persists the model in case of validity.

To understand how the operation knows whether or not it was run successful, and how this entire workflow is implemented, we should have a look at the code in .

Don’t get confused by the nested class in ! This is only Ruby’s way of namespacing and doesn’t leak any logic or state into the operation.

The operation definition starts with the statement. This is where we’re reusing the existing operation to create the model and contract for it. After that’s done, we run validations, persist the data to the model (in case the validation is happy) and send a notification after it.

We wrote enough code to have a fully working setup to create, validate and persist blog posts along with post-processing logic such as sending out notifications, which would usually happen in an ActiveRecord callback.

While an invalid form submission will re-render the form, sane data causes us to get redirect to , aka the index action.

The controller method, again, simply dispatches to the operation and then uses its cell to render the list.

We’re going to discuss the cell in another chapter. Here’s the operation found in .

In line with what we did in , the operation’s job is to retrieve a list of posts and expose them via the result object’s field.

This array is then passed into the cell and renders an index list. In that list, clicking a link will direct you to a URL such as , which corresponds to a action.

The action in the controller now doesn’t look anything special, anymore.

Given that we’ve just learned about the operation, the class in is almost boring.

Trailblazer already ships with the macro to retrieve the model and assign it to the object.

A colorless, but functional view of a particular blog post is the reward for our hard work.

When editing an existing blog post, the action is invoked.

The processing part of the update flow is implemented via the action.

Again, the cells views will be discussed in chapter 05. Let’s focus on the business logic here.

The following code file are the and operations used in the two controller actions just introduced. Just as their counterpart, we put them in .

Note that in the step, we use the method, just as we did for Show. Another interesting fact here’s that the contract is reused. At the moment, we don’t need differing validations for the editing logic, which allows us to lazily point to that existing class.

The last missing piece for our simple CRUD example is deleting: we want to be able to trash articles that no longer fit.

The controller action is responsible for triggering the respective delete logic.

Since we don’t have anything that could go wrong, yet, we don’t need the block for . The operation in is very simple, too.

The macro helps with finding the right blog post instance, and a custom step actually deletes the model using ActiveRecord’s method.

Building a simple CRUD component for a model is very easy with Trailblazer. In this chapter, we really only focused on the business code, and we will learn about Cells in chapter 05.

However, and this is a terrible thing to do, we’ve totally neglected testing! Testing with Trailblazer is incredibly simple and much more straight-forward as compared to Rails and its quite fragmented testing style. We’ll discover the world of testing in the next chapter, and only once we’re finished you can sit back and be proud of your work.|||

03- Rails Basics - Trailblazer