So you use karma for your tests and webpack as your bundler. And you also use karma-webpack to glue them together. Brilliant. Unless you have a large app with hundreds or thousands of tests and hundreds or thousands of files. In that case running your tests and especially booting karma can take a while. Even more so when you also use babel. It’s ok in CI, but especially annoying in dev when you just want to quickly boot up karma for the tests of one module you’re currently developing.

If you’re using karma-webpack, you most likely have a setup like this:

Here we have a pretty standard karma.conf.js file where we also require in webpack.config.js and set that in the karma config for karma-webpack to consume. We then use webpack’s require.context feature to load in all files in the tests directory ending in Test.js. You can find more details and an example of this setup at https://github.com/webpack/karma-webpack#alternative-usage.

Ok. Now let’s add the following to the karma.conf.js:

Let’s break the new code down line by line:

And now you can execute:

OK. So this is all quite complicated and obscure. But I found it to be extremely helpful in large projects. To simplify this slightly, I’ve extracted this pattern into an npm module https://www.npmjs.com/package/karma-webpack-grep. Using the module, you can achieve the above in a simpler way:|||

So you use karma for your tests and webpack as your bundler. And you also use karma-webpack to glue them together. Brilliant. Unless you have a large app with hundreds or thousands of tests and…