I’m going to try to explain a technique called type-driven development. It’s where we write as much code as possible using only types, deferring any non-type details until later. We’ll see how it helps us as we develop a small service that supports authentication. Along the way we’ll see how we can use abstract types, the method, and the Scala compiler itself to converge towards a good solution to our task.

Since type-driven development doesn’t sound very fun, I like to call it “Type Tetris”. How is programming with (only) types like Tetris?

This is a powerful, and fun, technique because we specifically avoid implementation details, and instead focus solely on creating the correct types and (function) type signatures. (We’re going to specifically talk about function types: types that have types for inputs, and an output type.)

Let’s use “Type Tetris” to start working on the following toy problem:

Let’s start with the barest skeleton of code to define our service. We’re going to only create types and function signatures (where are simply function types):

You put it anywhere where you need to return a value, but haven’t actually computed it yet. It has type , which is a subtype of every type, so your methods will compile (but not run without an error).

Hmm, what’s authorization? We certainly need to do it, whatever it is, before we “really” process the request. So maybe authorization transforms a into another  :

Maybe we need different subtypes, one for unauthorized, one for authorized. Let’s try that:

Ahh, we split into two cases, so we need to start in the correct, unauthorized request state:

Ok, we’ve attempted to authorize an unauthorized request. Let’s put placeholders in for the two cases:

Let’s handle unauthorized requests first. We need a that means “unauthorized”:

Now let’s handle the case if our request is authorized:

Finally we can fill in the implementation of  :

Now somebody else can write . :)

In this post we have seen how we can incrementally build a program to match our specification, delaying the need for implementation details until we really need them. Specifically:

Programming with types can be fun in itself, like playing a game of Tetris, and they get you most of the way to working programs. Have fun! (cue the Коробейники)|||

