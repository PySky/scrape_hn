In some cases, with Angular 2+ or any similar library or framework, using components inputs and outputs to share data doesn’t answer all use cases.

This mainly happens when you have two distinct and unrelated Angular 2+ components that manipulate the same data (Ex.: Session, Current user, Cart, User Settings, A component’s state like a bottomsheet or sidenav etc…).

You may want to use ngrx or any redux-like pattern but you will still have to handle all the logic to persist data on your API or anywhere else.

In order to handle communication between components, I use a special pattern I call “Reactive Stores“. It is a simple Angular 2+ service using rxjs‘s ReplaySubject to propagate changes.

I love using this pattern for my models. It might look tricky but it’s simply a way to implement named parameters in TypeScript.

The model’s code is splitted into two classes  containing the properties and the constructor then  containing the helper methods if needed.

The funny thing with this is that we just won a constructor that we can directly use with data we receive from the API or anywhere else  and in addition to this, we just won a copy constructor . This all works thanks to TypeScript’s duck typing.

The cool thing here is the  rxjs operator in .  will simply return the observable that updates the resource on the API so if something goes wrong, it’s up to the component who called the method to decide how to deal with that error.

If the call succeeds, our arrow function we gave to the  operator will be called and we will propagate the new  value using the .

A   is some kind of buffer. Every value we emit using the  method will be kept in memory so even if a component (or anything else) subscribes to the replay subject, it will receive the whole stream of data we emitted. It’s just like a twitter feed, when you sign in, you see all the previous tweets and anytime there’s a new tweet it’s added on top so you never miss anything.

As you might have noticed, the  constructor had been given a parameter with a value of . It just means that we only a need a buffer of that size so we only keep the last state. We don’t need the whole history.

Here’s how a components updates the state of the store:

When we call , we get an observable so we candle handle the success and failure as we wish.

And here’s how it is consumed by another component:

We subscribe to the  observable property and our arrow function callback will immediately receive the last  value that the store remembers and anytime the value changes, we receive a new object.|||

Using rxjs ReplaySubject to easily communicate between components.