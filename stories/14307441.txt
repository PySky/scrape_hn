There could be times when you need to split delimited values in a string and get a value at certain position. Obviously this could be done with explode in PHP or split in Perl using server-side script but what if you need to do it directly in MySQL.

Surprisingly MySQL doesn’t have a dedicated function for this operations as opposed to split_part in PostgreSQL. Luckily it has SUBSTRING_INDEX() function that does almost what we need.

From the official documentation:

Returns the substring from string str before count occurrences of the delimiter delim. If count is positive, everything to the left of the final delimiter (counting from the left) is returned. If count is negative, everything to the right of the final delimiter (counting from the right) is returned. performs a case-sensitive match when searching for delim.

Suppose we want to find all employees working in a certain state (for example, ) which is a fourth field in a column holding address as comma-separated values.

With function we will be able to extract everything up to the fourth column containing state

Now we know that state would always be the last field in the resulting value. Because function allows to use negative values to extract fields counting from the right, we will use this ability to extract the rightmost field containing state abbreviation.

Final solution to get all employees working in a certain state is shown below.

One thing to be aware about is that the function returns the whole string if the requested field doesn’t exist.

Then attempt to extract sixth field with will give us zip code (fifth field) which is wrong.

One possible workaround to this problem would be to check if the number of fields is greater than or equal to requested index and then the code the above, or return empty string, if the field index is invalid.

In most cases it is better to use a separate lookup table or a column for each field instead of storing data as comma-separated values for later lookup.

However, there could be rare cases where the trick above could be useful. For example, recently I needed to return a list of values from user-defined function and the only way to do it would be to return a string containing comma-separated values. I ended up using to order the results by one of the fields.

MySQL has a dedicated function FIND_IN_SET() that returns field index if the value is found in a string containing comma-separated values.

For example, the following statement returns one-based index of value in string .

If the given value is not found, function returns .|||

Describes a solution to work with comma-separated values in MySQL using SUBSTRING_INDEX() and FIND_IN_SET() functions.