react-mosaic is a full-featured React Tiling Window Manager meant to give a user complete control over their workspace. It provides a simple and flexible API to tile arbitrarily complex react components across a user's view. react-mosaic is written in TypeScript and provides typings but can be used in JavaScript as well.

The best way to see it is a simple Demo.

The core of react-mosaic's operations revolve around the simple binary tree specified by . is the type of the leaves of the tree and can be anything that can be resolved to a for display.

Without a theme, Mosaic only loads the styles necessary for it to function - making it easier for the consumer to style it to match their own app.

By default, Mosaic renders with the class. This uses the excellent Blueprint React UI Toolkit to provide a good starting state. It is recommended to at least start developing with this theme. To use it install Blueprint and add its CSS to your page.

See blueprint-theme.less for an example of creating a theme.

is a stateless lookup function to convert into a displayable . Here is already a , so can simply be the identity function. This example renders a simple tiled interface with one element on the left half, and two stacked elements on the right half. The user can resize these panes but there is no other advanced functionality.

Here is a that can be used to look elements up in . This allows for easier view state specification and serialization. The resulting view looks and functions identically to the previous example.

is a component that renders a toolbar and controls around its children for a tile as well as providing full featured drag and drop functionality.

This will render a view that looks very similar to the previous examples, but now each of the windows will have a toolbar with buttons. These toolbars can be dragged around by a user to rearrange their workspace. API docs here.

Mosaic views have two modes, similar to input elements:

All of the previous examples show use of Mosaic in an Uncontrolled fashion.

Components export both factories and component classes. If you are using TS/JS then use the factories; if you are using TSX/JSX then use the exported class but know that you will lose the generics if you aren't careful. The exported classes are named as the base name of the component (e.g. ) while the exported factories have 'Factory' appended (e.g. ).

See ExampleApp (the application used in the Demo) for a more interesting example that shows the usage of Mosaic as a controlled component and modifications of the tree structure.

< > { title ; className ; * Controls in the top right of the toolbar * default: [Replace, Split, Expand, Remove] if createNode is defined and [Expand, Remove] otherwise toolbarControls . < >[]; * Additional controls that will be hidden in a drawer beneath the toolbar. additionalControls . < >[]; * Label for the button that expands the drawer additionalControlButtonText ; draggable ; * Method called when a new node is required (such as the Split or Replace buttons) createNode < >; * Optional method to override the displayed preview when a user drags a window renderPreview ( < >) . ; }

The default controls rendered by can be accessed from

The above API is good for most consumers, however Mosaic provides functionality on the Context of its children that make it easier to alter the view state. All leaves rendered by Mosaic will have the following available on React context. These are used extensively by .

; []; < > { * These actions are used to alter the state of the view tree mosaicActions < >; * Returns the path to this tile getMosaicPath () ; } < > { * Increases the size of this node and bubbles up the tree * percentage Every node in the path up to root will be expanded to this percentage expand ( , ) ; remove ( ) ; * Hide the node at `path` but keep it in the DOM. Used in Drag and Drop hide ( ) ; replaceWith ( , < >) ; * Atomically applies all updates to the current tree updateTree ( < >[]) ; * Returns the root of this Mosaic instance getRoot () < > ; }

Children (and toolbar elements) within are passed the following additional functions on context.

< > < > { mosaicWindowActions ; } { * Fails if no `createNode()` is defined * Creates a new node and splits the current node. * The current node becomes the `first` and the new node the `second` of the result. * `direction` is chosen by querying the DOM and splitting along the longer axis split () < >; * Fails if no `createNode()` is defined * Convenience function to call `createNode()` and replace the current node with it. replaceWithNew () < >; }

To access the functions on context simply specify on your component.

Utilities are provided for working with the MosaicNode tree in and

is an argument meant to be passed to to modify the state at a path. has examples.

Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at

Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.|||

react-mosaic - A React tiling window manager