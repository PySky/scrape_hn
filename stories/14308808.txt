It seems like Nodejs is gaining popularity at a surprising rate, with npm becoming one of the largest package managers in the world. I say it’s surprising because it’s gaining popularity despite there being no conceivable reason to ever use Nodejs in any context. There is literally nothing Nodejs can do that other languages and frameworks can’t do better. In this post I will be exploring the claims made on Nodejs’s website and by the community at large.

Let’s address the first claim, that a thread-based networking stack is inefficient while Nodejs is designed to be scalable and low latency. A simple load test was performed that connects to webservers written in various languages / frameworks and issues GET requests from multiple simultaneous connected clients.

The performance test used Nodejs (server code), rustc (server code), clang version (server code), and go (server code) running on a Google Compute Engine virtual machine instances of size in the region (client code).

Nodejs performed by far the worst in terms of latency and performance, magnitudes slower than C++ or Go. Of course it’s no suprise that Javascript is slower than C++, but how much slower is shocking to me. I’d also like to point out that the C++ server (listed as on the graph) is not using an asynchronous event-based networking model, but a thread-per-connection blocking network model, the one described in the previous quote as being “relatively inefficent”. See my previous article on the comparison of sync vs async networking IO which goes into why the cargo cult around async network programming is bullshit.

While it’s true that asynchronous network IO is slightly faster than thread-per-connection blocking IO, the use of Javascript nullifies any performance benefit you would receive from writing async code. The last time I made a post about IO performance a few people pointed out the C10K problem as the reason why async is becoming popular. Nodejs, despite using async, is clearly not the solution to the C10K problem; in fact, a sutable solution already exists for this problem and it’s called a load balancer.

Update: I received a few complaints that it wasn’t fair to use a 4-core machine to perform the load tests, since Nodejs does not support a multi-threaded event loop by default (like that’s somehow my fault?). So I decided to rerun the exact same benchmarks above but with a GCE instance which is a single core CPU.

As you can see, Nodejs is still dead last. I also want to point out again that the C++ server, which is showing the highest QPS and lowest latency, is using a thread-per-connection blocking IO network model and is said to be “inefficient” according to the Nodejs website.

Another claim on the Nodejs website is that thread-based networking is very difficult to use (I’m not making this up, check the about page). I find it hard to believe that callback hell is a better way of writing code than a proper sequentially executed method, i.e.:

Clearly the thread-based synchronous IO example is much cleaner and readable. There have been improvements to ES7 that adds the and keyword which uses promises / futures, but that’s only a hack on top of a hack. I would much rather deal with mutexes than this callback garbage we’ve been subjected to.

Finally, I can conclude this section with a paradox: If you cared about performance you wouldn’t use Nodejs; if you don’t care about performance why are you torturing yourself writing complicated asynchronous code?

I’ll keep this section short, since I feel like this has been talked about to death already. Basing a framework on a language written in a few weeks isn’t a great idea.

As many of you know, all numbers in Javascript are doubles, which leads to hilarious bug reports such as: Node occasionally gives multiple files/folders the same inode (I’d also like to point out the lovely callback hell given in the example).

Let that sink in, due to the limitations of Javascript, a supposed “server-side framework” is unable to accurately represent an inode on a server.

Despite claims made on the Nodejs webiste, Node is neither easy to use, scalable, or low latency. There’s literally no reason to ever use Nodejs for anything. Just in case you’re wondering what I think of other languages:|||

Computer Science and Software Engineering Blog