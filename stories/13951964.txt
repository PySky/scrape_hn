This article shows you how to correctly build React components, especially container components in a modular and flexible way such that they can be used with customization across apps and use cases without having to modify the component code.

While React makes it very simple to create composable components, providing flexibility for varying use cases by apps consuming the components requires care in consuming only properties explicitly supported and passing on the remaining ones to the underlying DOM elements. In this article, we will explore best practices integrated from multiple sources to achieve this goal.

All code for this article is available on Github

I learned many of these techniques while trying to wrap Material Components for Web into re-usable React components. The project is called reactmdcweb hosted on Github.

We will build a container component like the picture below. It is a colored box that spans the available width and contains children that will have left-aligned text. The parent must specify a title which is center aligned. The component will be flexible and modular allowing event binding & style overrides by the app using the component in ways that differ from the original design.

We will use the Create React App tool to bootstrap a new React Project with all our required libraries & development dependencies like BabelJS, Webpack and its loaders etc.

If everything installed properly, you shold see a screen like the one below showing the initial demo screen of create react app. We will use the phone device browser emulation in Chrome for easier reviews and debugging.

We will begin creating the styles for our container component. Our container will be a with a firebrick red background and white text spanning the full available width with some padding. Create the file and add the following style to the file.

In create the following React container component which is basically a on which we apply the styles we defined earlier. This container expects a title which will be displayed with a tag separated from the containing other child components by a horizontal ruler . Child components are added using .

Let’s wipe out some of the Create React App boilerplate in and test our own component instead. We need to first and use it. We will pass a title and add two children - an image & a Lorem Ipsum div.

The outcome should look like the picture below with the red card like container taking up the full width available but only as much height as required for the children plus padding.

It’s good developmental practice to ensure the props we want to consume have the type we expect. React provides a PropTypes mechanism to type check props during development. This is stripped out in optimized production builds. Let’s add type checking for for the the prop in .

Suppose the programmer consuming our custom component wanted to let his users click on the container and capture the event. They would try to bind to the onClick event on our container like below in . However, the expected console message won’t show up if we do this.

This fails because the original creator of the container did not anticipate that a user will want to bind to the onClick event and did not provide for a way to do so. He merely wanted the component to be used as a container for other things.

However, as a container component developer, we can still take advantage of ES6 semantics to provide a simple way to pass on un-anticipated props and event bindings to the by the approach below in

Here, we use the experimental destructuring assignment syntax to extract the props we are directly using in our component (ie. and and bundle the remaining properties and event bindings into which gets passed on to the root using the spread operator. Both the spread operator and the destructuring assignment are supported in the Create React App setup by default.

On doing this, you will find that the event is firing and producing logging in the console. This is because the event binding has been passed on to the root of the component using the .

Let’s say the user wants a dark green background instead of the firebrick red background. Knowing how CSS3 works, he notices that the container component is styled by a style class named ‘MyContainer’. So he adds a style tied to a more specific selector class in his like below.

He then uses it in to try to override the firebrick red background in .

This unfortunately causes us to lose the background color entirely due to the overriding class not being handled correctly in our component.

To fix this, we need to handle the prop in our component and append it to any existing classes we are already using. We will use the excellent module to do this - so first we need to install it.

Now here below, we extract the passed to us if any using the destructuring assignment syntax and then append it to the existing class we use. This allows the class to override only the property and not mess with other settings from like padding and text color white.

This results in the correct background color being applied.

Sometimes, a container class needs to add styles and classes to all its children. As a practical example, the Card Actions section in Material Components for Web requires us to add a class called to all child buttons.

In our case, we will style all children of our component to have their text left aligned. To do this, let’s first go into and add the following style.

To apply this style to all the children, we need to first iterate through the children. Due to the special nature of the props, we need to use the React.Children.map function provided by React to iterate through them.

For each child, we need to first extract any existing classes by accessing . We then use our trick to add the our class and assign the combined classes to a string.

Finally we clone the of the child replacing the with our revised class string using and then clone the React component itself using the revised props. In the component, we use the cloned children instead.

Here is the full revised code.

This should result in children text being left aligned.

I hope this article is useful in outlining some of the best practices required for creating flexible and modular React components. Please do shout out to srinathh-at-gmail in case of any errors, comments or suggestions.|||

Living at the intersection of Technology, Research, Economics & Art