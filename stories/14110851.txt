Simply add a decorator to a python function and cache the results for future use. Extremely handy when you are dealing with I/O heavy operations which seldom changes or CPU intensive functions as well.

Anatomically, once a function is called, result from the function is cached into an SQLite3 database locally, with an expiry time. There is a maximum length for the cache to prevent cache flooding the file system.

Or you can clone the source and run setup.py

: SQLite3 file name to which cached data should be written into (defaults to .cache)

: how long should the data be cached in seconds (defaults to 1 day)

: how many different arguments and corresponding data should be cached (defaults to 10000)

: If True, will retry for the data if blank data is cached ( default is )

For reproducing results, run from the project root.|||

cashier - Persistent caching for python functions