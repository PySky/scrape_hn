You only look once (YOLO) is a state-of-the-art, real-time object detection system. On a Titan X it processes images at 40-90 FPS and has a mAP on VOC 2007 of 78.6% and a mAP of 48.1% on COCO test-dev.

Prior detection systems repurpose classifiers or localizers to perform detection. They apply the model to an image at multiple locations and scales. High scoring regions of the image are considered detections.

We use a totally different approach. We apply a single neural network to the full image. This network divides the image into regions and predicts bounding boxes and probabilities for each region. These bounding boxes are weighted by the predicted probabilities.

Our model has several advantages over classifier-based systems. It looks at the whole image at test time so its predictions are informed by global context in the image. It also makes predictions with a single network evaluation unlike systems like R-CNN which require thousands for a single image. This makes it extremely fast, more than 1000x faster than R-CNN and 100x faster than Fast R-CNN. See our paper for more details on the full system.

YOLOv2 uses a few tricks to improve training and increase performance. Like Overfeat and SSD we use a fully-convolutional model, but we still train on whole images, not hard negatives. Like Faster R-CNN we adjust priors on bounding boxes instead of predicting the width and height outright. However, we still predict the and coordinates directly. The full details are in our paper.!

This post will guide you through detecting objects with the YOLO system using a pre-trained model. If you don't already have Darknet installed, you should do that first. Or instead of reading all that just run:

You already have the config file for YOLO in the subdirectory. You will have to download the pre-trained weight file here (258 MB). Or just run this:

You will see some output like this:

Darknet prints out the objects it detected, its confidence, and how long it took to find them. We didn't compile Darknet with so it can't display the detections directly. Instead, it saves them in . You can open it to see the detected objects. Since we are using Darknet on the CPU it takes around 6-12 seconds per image. If we use the GPU version it would be much faster.

I've included some example images to try in case you need inspiration. Try , , , or !

The command is shorthand for a more general version of the command. It is equivalent to the command:

You don't need to know this if all you want to do is run detection on one image but it's useful to know if you want to do other things like run on a webcam (which you will see later on).

Instead of supplying an image on the command line, you can leave it blank to try multiple images in a row. Instead you will see a prompt when the config and weights are done loading:

Enter an image path like to have it predict boxes for that image.

Once it is done it will prompt you for more paths to try different images. Use to exit the program once you are done.

By default, YOLO only displays objects detected with a confidence of .25 or higher. You can change this by passing the flag to the command. For example, to display all detection you can set the threshold to 0:

So that's obviously not super useful but you can set it to different values to control what gets thresholded by the model.

Tiny YOLO is based off of the Darknet reference network and is much faster but less accurate than the normal YOLO model. To use the version trained on VOC:

Which, ok, it's not perfect, but boy it sure is fast. On GPU it runs at >200 FPS.

Running YOLO on test data isn't very interesting if you can't see the result. Instead of running it on a bunch of images let's run it on the input from a webcam!

To run this demo you will need to compile Darknet with CUDA and OpenCV. Then run the command:

YOLO will display the current FPS and predicted classes as well as the image with bounding boxes drawn on top of it.

You will need a webcam connected to the computer that OpenCV can connect to or it won't work. If you have multiple webcams connected and want to select which one to use you can pass the flag to pick (OpenCV uses webcam by default).

You can also run it on a video file if OpenCV can read the video:

That's how we made the YouTube video above.

You can train YOLO from scratch if you want to play with different training regimes, hyper-parameters, or datasets. Here's how to get it working on the Pascal VOC dataset.

To train YOLO you will need all of the VOC data from 2007 to 2012. You can find links to the data here. To get all the data, make a directory to store it all and from that directory run:

There will now be a subdirectory with all the VOC training data in it.

Now we need to generate the label files that Darknet uses. Darknet wants a file for each image with a line for each ground truth object in the image that looks like:

Where , , , and are relative to the image's width and height. To generate these file we will run the script in Darknet's directory. Let's just download it again because we are lazy.

After a few minutes, this script will generate all of the requisite files. Mostly it generates a lot of label files in and . In your directory you should see:

The text files like list the image files for that year and image set. Darknet needs one text file with all of the images you want to train on. In this example, let's train with everything except the 2007 test set so that we can test our model. Run:

Now we have all the 2007 trainval and the 2012 trainval set in one big list. That's all we have to do for data setup!

Now go to your Darknet directory. We have to change the config file to point to your data:

You should replace with the directory where you put the VOC data.

For training we use convolutional weights that are pre-trained on Imagenet. We use weights from the Extraction model. You can just download the weights for the convolutional layers here (76 MB).

If you want to generate the pre-trained weights yourself, download the pretrained Darknet19 448x448 model and run the following command:

But if you just download the weights file it's way easier.

Now we can train! Run the command:

You can train YOLO from scratch if you want to play with different training regimes, hyper-parameters, or datasets. Here's how to get it working on the COCO dataset.

To train YOLO you will need all of the COCO data and labels. The script will do this for you. Figure out where you want to put the COCO data and download it, for example:

Now you should have all the data and the labels generated for Darknet.

Now go to your Darknet directory. We have to change the config file to point to your data:

You should replace with the directory where you put the COCO data.

You should also modify your model cfg for training instead of testing. should look like this:

Now we can train! Run the command:

If you want to use multiple gpus run:

If you want to stop and restart training from a checkpoint:

If you are using YOLO version 1 you can still find the site here: https://pjreddie.com/darknet/yolov1/

If you use YOLOv2 in your work please cite our paper!|||

You only look once (YOLO) is a state-of-the-art, real-time object detection system.