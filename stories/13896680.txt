Create an invisible padding around an element and respond when its breached.

exports a single component that will register a listener and calculate whether the current mouse position is within a padding.

The padding will be calculated using and the prop, which lets you define "padding" for the perimeter.

by default will wrap its children in a and use that to calculate the boundries. If you want to avoid the wrapping , or you want the padding to be calculated from another element, you can use a render callback.

The render callback is passed a ref callback which should be passed to the prop of the element you want to use.

You may want to debounce or throttle the and event listeners if you've profiled your application and determined that they are noticeably affecting your performance. You can do so using the prop, which takes a function that should accept an event listener and return a new function to be used instead.

By letting you provide the mapped listener yourself, gives you full control over what debounce/throttle imeplementation you wish to use and its paramaters.

If you use in multiple places in your application you may want to dedupe the internal event listeners.

integrates with react-listener-provider to make deduping easy. Simply and wrap your application like this:

Any component you use inside of will automatically use the global event listener provided by instead of registering its own.

shines especially bright when used to prefetch or preload other components. Here is a small example that uses and to preload a route chunk when the cursor gets near a link:

provides an extremely useful static method that begins fetching the chunk for us. We pass this to so that the preloading begins as soon as the mouse is within pixels of the component. We also pass in the prop to tell that we only want to respond to the first breach. This means that, after the preload request has been issued, the listeners will be deregistered, removing any unneeded overhead.

We can go one step further and abstract this out into its own component, :|||

react-perimeter - Create an invisible perimeter around an element and respond when its breached.