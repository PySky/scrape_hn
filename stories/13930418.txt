This client is a fully compliant, native Python implementation of the AWS Encryption SDK.

There are three main concepts that need to be understood for use of this library:

Master Key Providers are resources which provide Master Keys. An example of a Master Key Provider is AWS KMS.

In the context of this client, a MasterKeyProvider object must contain at least one MasterKey object in order to encrypt data.

MasterKeyProvider objects can also contain other MasterKeyProviders.

Master Keys provide data keys. An example of a Master Key is a KMS Customer Master Key.

Data Keys are the actual encryption keys which are used to encrypt your data.

In order to use this client, an instance of a Master Key Provider must be provided. For the examples in this readme, the KMSMasterKeyProvider class will be used as an example.

The KMSMasterKeyProvider uses the boto3 SDK to interact with AWS KMS, and as such requires AWS Credentials. These can be provided either in the standard means by which boto3 locates credentials, or by providing the KMSMasterKeyProvider a pre-existing instance of a botocore session. This later option can be useful if you have some alternate means of storing your AWS credentials or you would like to re-use an existing instance of a botocore session in order to decrease startup costs.

If desired, the KMSMasterKeyProvider can be pre-loaded with one or more CMKs. At least one CMK is required to be loaded into a KMSMasterKeyProvider in order to encrypt data. If multiple CMKs are added, a copy of the data key encrypted by each added CMK will be included in the final message.

CMKs from multiple regions can be added as well.

Once you have an instance of a MasterKeyProvider, you can simply use one of the two high-level encrypt/decrypt functions to encrypt and decrypt your data.

If desired, additional authenticating information can be provided in the form of an encryption context.

If you are handling large files or simply do not want to put the entire plaintext or ciphertext in memory at once, this library also provides streaming clients. The streaming clients are file-like objects, and behave exactly as you would expect a Python file object to behave, supporting context managers and iteration. Rather than accepting a string as input, the streaming clients expect an existing file-like object. A simple -like entry point to the streaming clients is provided, to simplify library usage.

Two things will significantly improve the performance of encrypt/decrypt operations with this library:

Each line read and each frame in a framed message involve a significant amount of overhead. If you are encrypting a large file, increasing the frame size and line length can offer potentially huge performance gains. It is recommended to tune these values to your use-case in order to obtain peak performance.|||

aws-encryption-sdk-python - AWS Encryption SDK