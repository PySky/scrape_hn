We are releasing a 1.11.2 update to add the 1.11 translations and address a handful of issues.

In the 1.11.1 update, we fixed these issues.

Some users are reporting issues with the new Git integration and the keyboard layout support.

If you like to go back to the previous behavior, you can apply the following workarounds:

Welcome to the March 2017 release of Visual Studio Code. There are a number of significant updates in this version that we hope you will like, some of the key highlights include:

The release notes are arranged in the following sections related to VS Code focus areas. Here are some further updates:

The first results of the effort on workbench theming are now visible. The built-in themes Abyss, Quiet Light, and Solarized Dark take advantage of new color theming capabilities.

There are still several gaps and we have not finalized the new theme file format. For that reason, there's no documentation and we ask theme authors to not use the new theme format yet.

However, if you want to play around with new colors, use the setting to customize the currently selected theme.

With this release, VS Code provides a rich and easy keyboard shortcuts editing experience using a new Keyboard Shortcuts editor. You can now find a command and change/remove/reset its key binding easily. Most importantly, you can see key bindings according to your keyboard layout, instead of mapping keys in the earlier json-based key bindings editor to your keyboard layout. The dialog to enter key bindings will assign the correct and desired key binding as per your keyboard layout.

NOTE: For more advanced customizations like editing clause context of a key binding, you can open the file just like before and edit.

On Windows and macOS, we now detect when the keyboard layout has been switched while VS Code is running and will update all keyboard shortcuts appropriately.

On Linux and macOS, we have made significant changes in how keyboard shortcuts are dispatched; we have switched to using the brand new . This new dispatching logic will result in changes in default keyboard shortcuts for non-US standard keyboard layouts. Unfortunately, due to the indeterminate nature of on these platforms, we cannot be sure in each case the exact changed keybindings and present a list. In most cases, we expect the impact to be limited to the following built-in actions:

You can read more in our wiki or in the plan item.

Search is now powered by the excellent tool ripgrep, from Andrew Gallant (@BurntSushi), and searching should now be significantly faster. If you encounter an issue and need to revert to the previous search experience, you can set the option .

Our ripgrep-based search can now respect files as well. Enable it with the new Use Ignore Files button in the Search view, or by default with .

The gear icon next to it is also new, and toggles whether search will ignore the patterns specified in the and settings.

We have added a maximize/restore button to the panel title area:

There is a new setting that can be set to to keep editors open even if the file was deleted on disk. Editors will indicate if the file was deleted on disk with their label.

Note: Files that get deleted via the Explorer will still cause the editor to close.

A new command ( ) was added to join the editors of one group with the one to the left. This allows to quickly reduce the number of opened editor groups without losing any of the editors inside.

New commands have been added to navigate between the visible views of the application. For example, when focus is inside the first editor group, will bring you to the Side Bar. Similar, would move focus to the panel.

New commands are available to resize the currently focused view with the keyboard. Use and to change the view size in increments.

A new setting can be enabled to prevent opening the same file in another group if the file was already opened. One common scenario is the file picker (Quick Open): by default, it will open a file in the current active Editor Group. Changing this setting will prefer to open the file in any of the other groups in case the file is already opened there.

Note: There are still ways that the same editor will open in multiple groups, for example when you click the split editor action.

You can now copy selected text instead of moving it when you drag and drop. The experience is the same as you have on your platform. On macOS, press and hold the key while you drag and drop. Press the Ctrl key on Windows and press the Alt key on Linux.

When you drag and drop with or without copying the text, the style of the mouse pointer will change accordingly. You will see a (plus) image when copying.

The new Git source control extension is now enabled by default. This Git integration goes through the same extension points as third-party SCM providers. We're still working on the Git extension and if you'd like to go back to the previous version, you can run the SCM: Disable Preview SCM command to switch back.

You can quickly tell if the Git extension is enabled by looking at the Activity Bar icon. The new SCM provider integration will show a merge icon instead of the Git icon:

There is a new option, that can be set to to turn off highlighting of the selected word or word under cursor in cases where these highlights are computed by a rich language service.

You can now let VS Code guess the encoding of a file automatically via the new setting which is disabled by default. Once enabled, we will do an attempt at guessing the encoding from the file and use that information if there is a suitable encoding detected.

Note: there are cases where the encoding is detected wrongly or not at all. To have full control over the encoding in the workspace, use the setting instead.

On top of that, if you select the encoding picker on a file to change its encoding, we will now present you the guessed encoding (if any) to the top of that list, making it very easy to pick the right encoding in case the file contents are not showing correctly and we can detect the encoding from the contents:

Note: The encoding is guessed, and can be wrong. There is no 100% accurate way to find the encoding from the contents of a file. The only exception is using a BOM (byte order mark) for UTF-8 or UTF-16 files.

We have improved the filtering and scoring of suggestions. In addition to prefix and camel-case matching continuous substring matching is supported.

There is no more eager IntelliSense when typing in comments or strings! You can still request completions with Ctrl+Space but quick suggestions, AKA "24x7 IntelliSense", are disabled by default in comments and strings. To tune the suggestions behavior to your needs, we now allow more control over the setting:

A new setting can be used to set the language mode for new files that are untitled and not saved yet. This setting avoids having to pick the language each time you open a new file if you are often working on the same file type.

The terminal links feature that was introduced last month got some more polish this version. The experience is now aligned with the editor, requiring Ctrl or Cmd to be held depending on your platform.

Also all links are now validated so only links that actually go somewhere will react to user action.

Unlike on macOS and Linux with their environment variable, Windows doesn't really have a reliable alternative. There is but unfortunately it always defaults to the 32-bit variant of Command Prompt and it's seldom modified. To work around this, we've introduced a message when the terminal is first launched on Windows that allows users to select from a set of shells detected on the machine.

In VS Code v1.9, we disallowed workspace settings from configuring the terminal shell as it could have potentially been exploited maliciously. We are now re-allowing this but requiring an explicit user opt-in for each workspace before the settings will be picked up.

The new setting has been added that presents a confirmation dialog when the window is closing with active terminal sessions. This is disabled by default.

Thanks to an upstream PR from Lucian Buzzo, data is no longer discarded when resizing the terminal prompt horizontally.

In this release, we opened up tasks for contributions from extensions. They can contribute problem patterns and problem matchers via the extension's file. These contributions work in both the output panel runner and in the new (not yet the default) terminal runner. Below an example to contribute a problem matcher for the gcc compiler in an extension:

This problem matcher can now be used in a tasks.json via a name reference . An example looks like this:

We also now allow extensions to contribute tasks to the Quick Pick list programmatically. This opens VS Code up for use cases where an extension wants to add support for a specific build system and wants to contribute corresponding tasks. An example is the npm extension that can now contribute scripts defined in the as tasks to VS Code programmatically.

Please note the following limitations:

For an example of how to use the API, please refer to VS Code's gulp extension or the proposed API file

VS Code now ships with TypeScript 2.2.2. This release includes a number of important bug fixes and performance improvements. You can find a complete list of changes here.

We now include a CodeLens that shows the number of implementers of interfaces and abstract classes in TypeScript code.

Clicking on the CodeLens will display a list of all implementations.

This feature is disabled by default and requires TypeScript 2.2.1+. To enable it, add to your settings.

Added a new setting to simplify the collection of logs from the TypeScript server that powers VS Code's TypeScript and JavaScript language support. These logs can be used to debug issues with JS and TS language support, and make it easier for users to provide these logs during issue investigations.

The new logging experience is supported with TypeScript 2.2.2+. Set and reload VS Code to enable logging to a file. Use the command to open the log file in the editor.

VS Code now includes an language mode for working with Objective-C++. Previously, files were treated as regular C++. This release also improves syntax coloring of Objective-C++ files.

We have added a top level debug menu with the most common debug commands:

Note: There is a new command (Install Additional Debuggers...) to bring up the Extension view to search for debugger extensions.

It is now possible to edit multiple breakpoints on a line directly from the glyph margin context menu. Apart from this, there were issues with multiple breakpoints on a line which are now fixed.

The editor's "Peek UI" has been enhanced to show additional information for thrown exceptions, For example, VS Code's built-in Node.js debugging now shows the stack trace:

Since this feature requires some adoption effort by debugger extensions, do not expect to see additional exception information in other debugger extensions immediately.

In the February milestone, we folded the two Node.js debuggers ('node' and 'node2') into a single Node.js debugging experience and introduced a new launch configuration attribute to control which protocol to use (for details see the section in the February release notes.

In this milestone, we've changed the default value for from to . So if you don't specify the explicitly in your launch configuration, VS Code Node.js debugging will now try to detect the protocol used by the targeted runtime automatically. Since we do not want to switch users to the new "inspector" protocol too aggressively, we will use the new protocol only for 8.x versions of Node.js.

If you experience problems with this automatic protocol switching, you can get back to the old behavior by explicitly setting to .

When debugging async JavaScript in Node.js or Chrome, we now show the async frames that led to the current call stack across async calls. This is currently only supported when debugging with the inspector protocol via . It can be disabled by setting in the launch config.

In this code snippet, is an async function that returns a Promise. Without async stacks, we can't see the calls that happened before the Promise was resolved:

But with the async call stacks, we can see the full call stack that produced the async call:

It is now possible to access the loaded scripts of a JavaScript runtime. This is useful if you need to set a breakpoint in a script that is not part of your workspace and therefore cannot be easily located and opened through normal VS Code file browsing. A typical scenario for this is a remote debugging session: you attach to a remote Node.js program and have no code available locally. See issue #20355 for other scenarios that drove this enhancement.

The Debug: Open Loaded Script action (⌘F4 (Windows, Linux Ctrl+F4)) gives you access to loaded scripts while a debug session is active. In the Quick Pick, you can filter and select the script to open. The script is then loaded into a read-only editor where you can set breakpoints. These breakpoints are remembered across debug sessions but you only have access to the script content while a debug session is running.

A stable Source Control API was released this month which lets you create source control extensions integrated within VS Code. You can learn all about it in the Source Control in VS Code documentation page.

Some extension developers have already started adopting it:

If a debug adapter returns a non-falsy capability, VS Code will now use the to obtain additional information for the exception. Currently the attributes , , , and are displayed in VS Code's exception Peek UI.

VS Code always supported running debug adapters in server mode. However this was only officially supported for developing debug adapters, not for running them in production. With this release, we are starting to support the "server mode" as an official "run mode" for debug adapters. Please find the details for how to use this feature in the original feature request.

The semantics of the attribute of has been changed slightly. Previously, it was specified that the reason attribute is shown in the UI (which has the consequence that the value needs to be translated to different languages). This makes it impossible for VS Code to interpret the attribute in a robust way. Starting with this release, VS Code uses the new attribute when the "stopped" reason needs to be shown in the UI and uses the attribute to interpret the reason. If is missing, VS Code falls back to the previous behavior.

A new optional attribute has been added to the type which can be used to control how the client renders a stack frame in the UI.

The VS Code Mono debugger extension has been enhanced to use the recently introduced attribute on the for configuring exception catchpoints.

The implementation can serve as an example for how to use the debug adapter protocol (DAP) from an extension to add specific functionality that is not provided by the generic VS Code debugger UI.

In a collaboration with the Visual Studio Marketplace, we've increased the size limit of extensions in the Marketplace from 20MB to 100MB. You'll need to update to to benefit from this.

We have added a new command line option that allows you to profile the startup of VS Code. Run code like this and it will create profiles for the main and renderer process. These profiles are stored in your home directory and we encourage you to share them with us. Often performance out in the wild is vastly different from our machines and getting more insights from you will help us improve VS Code.

VS Code currently ships with support for 9 languages: French, Italian, German, Spanish, Russian, Traditional and Simplified Chinese, Japanese, and Korean. In the March release, we started moving the current internal localization process to support the open translation platform called Transifex.

Once this work is done, we will be able to accept translations from the community directly instead of having to submit a bug and wait for us to localize the string(s).  Even more exciting though, this work enables VS Code to be localized by the community into additional languages such as Portuguese and Polish. In fact, we're opening up translations into 8 additional languages: Czech, Dutch, Hungarian, Polish, Portuguese (Brazil and Portugal), Swedish, and Turkish.

If you are passionate about having a high quality VS Code in your native language, please come and help us!  Learn more at the Visual Studio Code Community Localization Project.

These are the closed bugs and these are the closed feature requests for the 1.11 update.

Our team maintains or contributes to a number of VS Code extensions. Most notably:

Last but certainly not least, a big Thank You! to the following folks that helped to make VS Code even better:|||

See what is new in the Visual Studio Code March 2017 Release (1.11)