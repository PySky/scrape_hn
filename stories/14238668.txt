As you probably know I am developing a series posts called- Pragmatic Automation with WebDriver. They consist of tons of practical information how to start writing automation tests with WebDriver. Also, contain a lot of more advanced topics such as automation strategies, benchmarks and . In the next couple of publications, I am going to share with you some Advanced WebDriver usages in tests. Without further ado, here are the today's advanced WebDriver Automation tips and trips.

Just use the AddExtension of the FirefoxProfile class to load the desired extension.

The configuration of a proxy for ChromeDriver is a little bit different from the one for  FirefoxDriver. You need to use the special Proxy class in combination with ChromeOptions.

The only difference from the previous example is the configuration of the --proxy-server argument.

Chrome extensions can be either packed or unpacked. Packed extensions are a single file with a .crx extension. Unpacked Extensions are a directory containing the extension, including a manifest.json file. To load an unpacked extension you need to set the load-extension argument.

Instead of setting the load-extension argument, you need to use the AddExtension method of the ChromeOptions class to set the path to your packed extension.

You can check if an element is disabled through the Enabled property of the IWebElement interface.

You can get the value of a hidden field through the GetAttribute method, part of the IWebElement interface. Get the value attribute of the element. You can set the same attribute with a little bit of a JavaScript code.

jQuery.active is a variable uses internally to track the number of simultaneous AJAX requests. Wait until the value of jQuery.active is zero. Then continue with the next operation.

To change the default download directory of the current Chrome instance set the download.default_directory argument. When we initiate the file download, we use the WebDriverWait to wait until the file exists on the file system. Finally, we assert the file size. The whole code is surrounded with a try-finally block. In the finally we delete the downloaded file so that our test to be consistent every time.

The code for FirefoxDriver is similar to the one for ChromeDriver. We need to set a few arguments so that the browser not to ask us every time where to save the specified file.|||

Find some advanced WebDriver tips and tricks how to use the framework for dealing with extensions or downloading files.