The elasticity and scalability of the cloud provides lots of opportunity for automation. Some automation tools and services are provided by cloud vendors themselves. AWS, for example, offers CloudFormation for provisioning AWS resources programmatically, Microsoft has its Automation, and OpenStack has Heat. But all those services come with vendor lock: they’ll only deploy within their own environments. But if you’re looking for multi-vendor solutions, then you might be better off with HashiCorp’s open source Terraform, which can provision servers and services from just about any cloud platform.

Besides Terraform, HashiCorp is also the creator of the Vagrant, Packer, Serf, and Consul projects, and the commercial product Atlas.

Terraform is meant to help you combine all the components you’ll need to build and launch your application infrastructure. You could, for instance, select a base server from AWS, DNS from cloudfare, and a postgres database from Heroku. Terraform will build a single application framework from across all these providers in parallel.

When you make changes to your configuration file, Terraform determines what needs updating and applies only incremental changes.

Terraform’s flexibility and power mean that it will work across a very wide range of use cases.

Here’s how you can very quickly and simply install Terraform on your Linux system. There are also 32 and 64-bit packages available for Mac OS X, Windows, FreeBSD, and OpenBSD.

The following cloud providers are supported by Terraform:



Now that Terraform is installed on your Linux system, use this simple “terraform init” example from your command prompt to quickly deploy a two tier application to AWS (note: you may incur usage costs from AWS as a result).

To generate and show an execution plan, run

cd into your git-cloned directory and then run

Terraform will interactively ask for account authentication and access data like your AWS Keys, Region, and AMI. Your resources will be provisioned on AWS and a sample nginix application will be deployed on those servers.

When  you  are done, clean up your resources by running

Do you have your own experiences with or plans for Terraform? Let us hear from you in the comments.|||

Learn Cloud Computing, get Certifications and Change your JOB!