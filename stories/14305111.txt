Tox is a relatively new tool that does one thing very well: test a python package in a set of virtual environments. This roughly translates to something like:

A minimal looks like this:

That will run with both Python 2.7 and 3.4.

There are probably other tools I haven't considered, feel free to comment, if you still think there's something better than tox . :-)

There are some alternatives to tox , however, they have some disadvantages:

There are several advantages of using tox :

Because tox was designed for the aforementioned workflow some things are hard to do, or the best way is unclear. I'm going to go over few less known tricks and patterns.

I usually allow overriding the test command . This allows me to use tox for ad-hoc development. With that you can conveniently do any of: to run tests matching in all the environments. to get the python REPL in that environment. to run the Django development server in that environment. And that would be run over all the available environments.

Sometimes you lack a and it doesn't make sense to have one. But you still want to use tox because you want to use virtualenvs and run something in them. To make that work have this in your : Note that this applies to all environments you use.

Sometimes you want to run several commands. Now you have two choices: Have one environment with all the commands. This makes it hard to select an individual command. Have a environment for each command. This makes command line selection very neat. However, now you have a virtualenv for each environment, which makes everything very slow unless ... ... you have all the environments use the same virtualenv directory! As seen here, you can use a specific directory that doesn't need to be unique: With such an configuration you can do any of: to build and rebuild on file changes Note the in the build command allows adding extra arguments. Example: to get some verbose logging.

When it inevitably leads to shell scripts * This is one thing that's annoying to do in Tox - sometimes you do want to run some shell scripts, as bad as they are. Suppose you have a in your project's root: This will work fine, however, on Windows you need a different shell script. Currently tox doesn't have conditional settings for the platform so you need to have a script that can run both as Shell and Batch (for Windows). A way to solve this is to have something like this in : Then you make executable and have this peculiar mash-up of ( ), labels ( ) and : And then you write regular Bash code in and PowerShell (on Windows) in . The is required because PowerShell doesn't allow external scripts to run by default (the default is a sort of "interactive only" mode) .

Suppose you want to test a set of configurations. Using a conditional settings you can have something like this: # I'm building here on the previous example but we could have any other command here ... With that you'll have only 2 environments and that will significantly reduce environment rebuild time.|||

