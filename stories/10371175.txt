At OK GROW! most apps we build need to integrate with a legacy REST API of some sort. Meteor of course provides simple functions for making raw HTTP calls but once you've been working with DDP for a while you don't want to go back.

We picture a world where developers demand a DDP API (remember when developers overthrew their SOAP overlords in the Great RESTful API Revolution of 2006?) and we want to make it easier for legacy apps to produce a live updating DDP API.

You have a service which provides a REST API but the world wants it as a live updating DDP API. With just some simple configuration you can add a DDP API to your site.

You can create configurations for REST API endpoints, and the system makes a DDP subscription available. You define the following:

It's a Meteor app that lets you store descriptions of REST API endpoints (URL, etc). For each one it provides a publication that can be subscribed to by any DDP client.

The core of the app is a function that connects to a REST API. It loads the data, parses out an array and converts that array into documents that get published to the client.

It then continues to poll the REST endpoint until the subscription is stopped (on a frequency that you define), comparing the new results with the previous and sending just the changes over the DDP connection to the subscribed client.

We used an object diffing library that should be able to efficiently give us just the changes so that we send the minimal changes to the subscribed client. But due to time constraints we're not taking full advantage of the diff library right now and our DDP updates are not as efficient as they should be. There are two issues:

It's challenging to design a UI that's self-explanatory enough for a casual user or hackathon judge to grasp immediately. We didn't have time to iterate on the UI.

We would like to see Meteor come to mind immediately for developers who are looking to put a new UI in front of a legacy app with a RESTful API, rather than being considered for new app development only. Front-end only frameworks tend to grow in popularity much faster than full-stack frameworks because there are so many developers with legacy apps that want to update the UI without rebuilding the entire app.

A hosted service is good for an API provider who wants to provide a DDP API without doing more work, it can be thought of like a proxy. But a developer who wants to consume a REST API might not want to go through a hosted proxy and might want to be able to subscribe to REST API's directly within their app.

So we would like to extract the core functionality into a package so that any Meteor app can easily subscribe to a REST API and receive live updates over DDP.|||

REST2DDP - Publish a live updating DDP API for any existing REST API with no coding required