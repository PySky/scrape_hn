Take any directory full of stuff that you're working on; web apps, scripts, Jupyter notebooks, data files, whatever it may be.

By adding an to this project directory, a single command will be able to set up all dependencies and then launch the project.

Anaconda projects should run in the same way on your machine, on a colleague's machine, or when deployed to a server.

Running an Anaconda project executes a command specified in the (any arbitrary commands can be configured).

automates project setup; Anaconda can establish all prerequisite conditions for the project's commands to execute successfully. These conditions could include:

The goal is that if your project runs on your machine, it will also run on others' machines (or on your future machine after you reboot a few times and forget how your project works).

The command creates an , converting your project directory into an Anaconda project.

Traditional build scripts such as automate "building" the project (going from source code to something runnable), while automates "running" the project (taking build artifacts and doing any necessary setup prior to executing them).

Check out the complete documentation, including a tutorial and reference guide, at: http://anaconda-project.readthedocs.io/en/latest/index.html

has similar functionality and may be more convenient. The advantage of for environment handling is that it performs conda operations, and records them in a config file for reproducibility, in one step.

For example, if you do , that will install Bokeh with conda, and add to an environment spec in (the effect is comparable to adding it to ). In this way, "your current conda environment's state" and "your configuration to be shared with others" won't get out of sync.

will also automatically set up environments for a colleague when they type on their machine; they don't have to do a separate step to create, update, or activate environments before they run the code. This may be especially useful when you change the required dependencies; with people can forget to re-run it and update their packages, while will automatically add missing packages every time.

In addition to environment creation, can perform other kinds of setup, such as adding data files and running a database server. It's a superset of in that sense.

For the time being, the Anaconda project API and command line syntax are subject to change in future releases. A project created with the current “beta” version of Anaconda project may always need to be run with that version of Anaconda project and not conda project 1.0. When we think things are solid, we’ll switch from “beta” to “1.0” and you’ll be able to rely on long-term interface stability.

Please report issues right here on GitHub.

Here's how to work on the code:|||

Contribute to anaconda-project development by creating an account on GitHub.