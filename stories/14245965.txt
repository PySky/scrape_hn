In my first article, I talked about creating an MVP with a Chatbot and showed an example with Cinebot

But getting the bot up and running wasnâ€™t enough.

It needed to be able to search complex data from text and location queries sent by the user through Messenger.

So I started to look for a cheap and flexible solution to store and retrieve data. At around the same time I heard about Algolia, a French companyÂ providing exhaustive search capabilities through a SaaS platform, and decided it was worth trying out.

In this article Iâ€™ll explain how I tuned Algolia to provide relevant search for my users in just a few hours.

Algolia acts as a data store, so I will fetch the screenings data daily using cron jobs and upload it there.

 This will allow my chatbot to use Algoliaâ€™s exhaustive search capabilities to return relevant data.

Here is a diagram to show what the architecture of the project looks like:

Algolia Free Plan includes 10,000 records and 100,000 operations (an operation can be adding a record or querying the database).

 Itâ€™s quite limited but enough for my MVP: creating a chatbot to help Parisians find showtimes in their city.

For approximately all the Paris and surrounding area, I have 2,500 records per day.

 Which means ~30Ã—2,500 = 75,000 operations per month, which fits into the free plan.

N.B: In order to use Algolia Free Plan, you must put their logo somewhere in your product

First you need to go to https://www.algolia.com/explorer/indices and to create a new index (the equivalent of a MongoDB collection, that will hold your records).

 Give it the name you want, I called mine .

 Then head to https://www.algolia.com/api-keys to get your Application ID and Admin API Key.

 Then weâ€™re ready to roll.

The searchable items are releases: they represent all the screenings for a given movie in a given cinema, on a given day:

Algolia provides clients for many languages which means you can work with the language of your choice.

I wentÂ with Javascript since my bot is developed in Javascript. Hence, I needed to install two Javascript packages and add the corresponding two lines on top of every .js file where Iâ€™ll use Algolia:

The clients allow for batch uploading of JSON arrays, which is quite convenient.

 However two days of screenings are contained in a 3.4Mb JSON array, and batch uploading the entire array often timed-out.

 A solution is to upload small chunks of 100 screenings. With asynchronous Javascript, uploading does not take more than 5 seconds.

Since the free plan can only contain two days worth of data, every upload of a new batch means clearing all the records currently held in the database before uploading new ones.

Once the data is in there, itâ€™s very simple to select the fields that will be searchable through Algolia, and the order in which they should be displayed to the user. It all happens in the index dashboard at https://www.algolia.com/explorer#?index=cine_seances

After experimenting a bit, I found out the following order for the attributes that were important in the search:

All that is needed is to add the attributes through the interface and order them in the way I want them to be prioritized.

A key feature I neededÂ in the bot was the ability for the users to send their location and discover screenings around them.

 Facebook Messenger allows you to prompt the user for his location, which can be useful as a fallback when the user does not understand how to talk to your chatbot.

And then getting the location back from the message:

Enabling geolocation search is simple with Algolia as you only need to add a field to your records and enable Geosearch in the Dashboard:

Then by adding a query parameter , you will get the results sorted based on distance.

 You even get the distance in meters to the cinema, which you can then display to the user.

Since I also had the information about the movie ratings, I wanted the results to be displayed in an order based not only on the proximity, but also on the quality of the movie.

To do so I defined Custom Ranking Attributes just below the searchable-attributes in the console, and Algolia sorts it out by itself.

After setting up the ordering of results, I wanted to retrieve only the screenings for the date of today.

To do so I used faceting which allows me to index a field with a limited number of discrete values to make them easily searchable.

By faceting the field, I was able to query all the showtimes for todayâ€™s date.

With Algolia you can also fine tune typo-tolerance on every field: if it should be enabled or not, the minimum number of characters before accepting 1 or 2 typos, and if stop words should be removed for example.

 For a more exhaustive list, scroll down to this section on your index page.

In a few hours, I was able to get Algolia configured to perform complex queries on my dataset and provide fast and relevant search to my users based on what their textual query as well as their location if they wish to share it.

Iâ€™d definitely recommend Algolia to anyone who wants to perform search on a slightly complicated dataset without the overhead of setting up an in-house solution.

However, getting more space and operation capacity comes at a cost: 49,9$/month for Starter Plan with 100â€™000 records and 1â€™000â€™000 operations. So youâ€™d better have a product that makes money ðŸ’·

You liked this article? You'd probably be a good match for our ever-growing tech team at Theodo.|||

How to build a chatbot using Algolia.