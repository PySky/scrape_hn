We are pleased to announce the availability of Typelevel Scala 4 for Scala 2.12.2 and 2.11.11.

As of this release, Typelevel Scala releases are distinguished from the corresponding Lightbend Scala releases by a version number suffix which indicates the Typelevel feature level beyond the baseline compiler. We are attempting to maintain parity of Typelevel features across the Scala compiler versions we support.

The current Typelevel feature level is 4 and it is avaliable as a drop in replacement for Lightbend Scala 2.11.11 and 2.12.2.

Support for Scala 2.13.0-M1 will be added in due course. Support for Scala 2.10.6 will be considered if sponsors step forward to support the necessary work.

The Typelevel Scala additions to Lightbend Scala 2.12.2 and 2.11.11 can be found on the branches 2.12.2-bin-typelevel-4 and 2.11.11-bin-typelevel-4 respectively of this repository.

Typelevel Scala 4 offers the features listed below over Lightbend Scala 2.12.2/2.11.11. Following Typelevel Scala policy each one of these exists as a pull request against Lightbend Scala and is being considered for merging.

Please report issues with the new features on the TLS github repo issue tracker or directly on the corresponding LBS pull request. Discussion can be found on the TLS gitter channel. More general Scala compiler development discussion can be found on .

TL;DR ... skip ahead to instructions on how to use in your project!

Type arguments are now allowed on patterns. This allows extractors to be parametrised by types which can be used to materialize implicits which can't be inferred from the static type of the scrutinee. As an example usage, this allows pattern matches using shapeless's Typeable to be expressed very succinctly,

Enabled by , this feature dramatically speeds up the compilation of inductive implicit resolution, such as is found in shapeless-based generic programming and type class derivation.

The following is an example of the sort of inductive definition which will benefit from this feature,

extracts elements from values of types in a type safe way. Without this feature enabled materializing instances of this type class are roughly cubic in the length of the . With this feature enabled the behaviour is close to linear and with a small constant factor. A benchmark demonstrating a 36x speedup for selection from a 500 element can be found here.

One current limitation is that where the induction step is wrapped in shapeless's the induction will not take advantage of this algorithm. In some cases it may be possible to drop the use of , though not all. Later TLS releases will provide an interpretation of byname implicit arguments which is equivalent to shapeless's and which will get along nicely with this induction heuristic.

More details on the PR.

Enabled by , it is now possible to write type and method definitions with type parameters of arbitrary kinds.

The following is an example of a type class which is indexed by types of arbitrary kinds,

The special type is used as a bound to indicate that a type variable may be instantiated by a type argument of any kind. Instances of the type class are then provided for types of kind , kind and kind .

More examples can be found here.

More details on the PR.

Enabled by and , it is now possible to specify the default imports for a Scala compilation allowing, for example, an alternative to be used.

By default, scalac imports , , and into the namespace of Scala compilation units. In Lightbend Scala, we have two flags that adjust the behavior of predefined imports.

There are a few other nuances to the behavior of imports. The most important behavior is that is unimported/evicted if there are any direct leading imports for anything within . For example, an import of will cause everything else normally imported by predef to be unimported.

This feature introduces the notion of "sysdefs" and "predefs" for Scala compilation units. Sysdefs are global imports that are imported at the top of all Scala compilation units under all circumstances. Predefs are imported after sysdefs and can be masked by top level imports in the source file (to match the existing behavior of directly importing from scala.Predef).

More details on the PR.

Enabled by , this implements SIP-23. Literals can now appear in type position, designating the corresponding singleton type. A type class and corresponding operator has been added yielding the unique value of types with a single inhabitant. Support for literal types has been added.

Literal types have many applications in situations where a type can be specified more precisely in terms of a literal value. The following example defines the type of integers modulo some .

Because the modulus is specified by a literal type it can be checked at compile time and has no runtime storage cost. Literal types for s and s also greatly simplify type signatures when working with shapeless records.

More details on the PR.

Enabled by , the feature provides more accurate reporting of failures of match exhaustivity for patterns with guards or extractors. Additionally, will warn on inexhaustive matches against unsealed traits.

The following will now warn that the match might not be exhaustive,

More details on the PR.

Two-parameter types with symbolic names now print in infix form by default. A annotation has been added to enable or disable that behaviour explicitly for specific types.

This provides much easier to read type signatures in the Scala REPL and elsewhere with libraries such as shapeless which make heavy use of infix type constructors,

More details on the PR.

Comma separated lists are now allowed to have a trailing comma. This applies to tuples, argument and parameter groups and import selectors.

The features makes adding and removing elements from multiline parameter lists a lot less laborious. For example, the following is now legal,

More examples can be found here.

More details on the PR.

Requirements for using Typelevel Scala in your existing projects,

You can now temporarily build with Typelevel Scala by entering,

To switch your project permanently to Typelevel Scala 4 update your as follows,

Alternatively, if you want to try Typelevel Scala without modifying your and you have scoped as shown earlier you can instead create a file at the root of your project with the following content,

These settings will override the scoped settings in your .

Whichever method you choose, your build should now function as before but using the Typelevel Scala toolchain instead of the Lightbend one. You can verify that the settings have been updated correctly from the SBT prompt using ,

If you are using maven with the , set the to ,

Typelevel Scala is only possible because of the contributions made to Lightbend Scala â€” see the contributors section of the LBS Scala 2.12.2 and 2.11.11 release notes.

We are hugely grateful to the following for their work on the enhancements included in Typelevel Scala 4 and look forward to them being included in future Lightbend Scala releases,

We would also like to thank Adriaan Moors, George Leontiev, Jason Zaugg and Vlad Ureche for their contributions to Typelevel Scala in general and to the PRs merged in this release in particular.|||

scala - Typelevel Scala, a fork of Scala