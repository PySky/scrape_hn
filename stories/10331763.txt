There are many great tutorials and boilerplate apps online–linked to in the footer of this post–and even documentation for redux and react itself is fantastic, so for the purposes of this tutorial I’d like to focus on purely how we switched from using reflux to redux in production. You don’t necesarilly need a background in Reflux or Redux specifically to understand what’s going on, but at least a working knowledge of React and Flux is recommended.

Over the last week or so we took the time to convert our ES5 React Reflux implementation of our location’s flow into a brand spanking new ES6/7 React Redux implemenation. We’ll go over 3 important examples in our data flow: saving the state of the ui in a store, fetching data from an external API to hydrate our store, and filtering data that is already in our store. This might be redundant, but you’ll also get some transitioning from ES5 to ES6/ES7 examples built in.

Let’s think about something as simple as hiding or showing extra filters in a list application.

Going from a state where most of the location filters are hidden, with a link that says “More Filters”…

…to a state where all filters are visible and a link that says “Fewer Filters”.

Using jQuery you could have a listener to that specific link, and when it’s clicked have it toggle the hidden filters container:

Problem with this is, it’s super specific, it’s not the most reusable piece of code in the world, and it usually just gets dumped into a compiled application.js file that will be hard to find in a production level codebase.

What if we had access to a boolean that told us whether we should show or hide the hidden filters container? Our React components would listen to that boolean so it would know what to display, then our link component would simply dispatch an action that would toggle that boolean when clicked.

Following the Reflux pattern, let’s declare an action–showFiltersActions–to tell the store that we want to toggle the state of “showFilters”, and let’s create a single store–showFiltersStore–to hold the record of this state.

Now that we’ve defined our action and store, let’s use them in our components:

I know this might seem like overkill essentially replacing 3 lines of jquery and a few lines of html with 4 different files between the actions, stores, and components, but this method actually leads to cleaner more reusable–and in my opinion more readable–code, as you start to extend the functionality of your application. What if you wanted to carry the state of your UI through multiple pages on your application? How do you handle reloads? React allows you to handle this complexity in a structured declarative manner.

But this tutorial isn’t about why you should use Reflux…

When you start building larger production level applications that require many types of stores and a more complex data model, reflux can start to feel a little bloated (TERRIBLE PUN). Redux is a natural successor to reflux (and other flux patterns in general).

We’re going to go over a few examples, but take a look at the Redux docs for a quick overview into why Redux was even created and how it works:

This sounds similar to the reflux implementation, but the main differences boil down to:

Let’s look at the Redux implementation of our showFiltersLink.

A few caveats before diving into the new code:

The single store concept can seem a little strange coming from the reflux world. In an example where you’re filtering locations, it could look something like this:

With that in mind, lets first build the actionType, action, and reducer in our showFilters module, which will represent the “showFilters” part of the store object written above:

Next we need to build the single global reducing function. Remember according to the docs, “there is just a single store with a single root reducing function.” You’ll notice that we’re also including the locations reducer that we’ll build in EXAMPLE 2 below:

Now that we’ve set up our single store, how do we get it into the application? Unfortunatley, it looks like mixins are dead so we can’t use the same pattern we were using in the ES5 Reflux example.

What you’re looking at above is another huge benefit to Reflux: Middleware. You can write custom code to inject extensions into your redux flow, or include already written middleware like redux-thunk or redux-logger. We’ll need redux-thunk for our external API implementation in Example 2.

Next, let’s connect the store to our main component using the component. It “makes our store instance available to the components below.” (DOCS)

And ultimately connect the component to the store to pass down necessary data as props to it’s child components:

Now, all you have to do is use your props like you normally would in your components:

Now that we have the basics of redux under our belt, let’s look at hydrating the store with data from an external API.

A nice feature to this pattern is we dispatch the action once data is received from the API. That forces a state change which causes our components to re-render, updating the view.

With the new locations module written, and everything already setup in EXAMPLE 1 to handle this new locations reducer, all we have to do is now connect to this part of the store in our main component.

What if we want to filter any of our existing data? For that you use reselect. Reselect allows you to create memoized selectors that only update when the sections of the store that it is listening to are updated.

In the example of filtering locations:

Now all we have to do is tell the component to listen to the filteredLocationsSelector instead of the locations part of the store.

Dan Abramov’s Redux Talk at React Europe: Highly recommended watch and it’s only 30 minutes. He gets into the reasons why he made redux and shows the incredibly useful redux-devtools debugger.

The React/Redux/HotReloader Boilerplate app: Constantly being updated by a vocal and opinionated react community, this was my top resource for patterns (redux modules!) and best practices. I check out this repo daily to see updates and look through the issues. It gets into isomorphic/universal react (server side rendered) and includes many amazing developer tools like the devtools mentioned in Dan Abramov’s talk.

Full-Stack Redux Tutorial: There’s a lot in here, but it’s nice and comprehensive, and you get step by step instructions.|||

There are many great tutorials and boilerplate apps online–linked to in the footer of this post–and even documentation for redux and react itself is fantastic, so for the purposes of this tutorial I…