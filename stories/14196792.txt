I think most answers assume you are at a level to practice recursion in context of ADTs and complicated algorithms. IMHO if you are weak with recursion, chances are you are fairly weak with Trees, Graphs and other complicated data structures and algorithms that work on those data structures.

So let’s step back a little bit. Let’s learn the very basics of recursion first and slowly bring in other elements of computer science in it.

I remember when I was in undergrad, my brilliant lecturer[1] would come in the class with a board marker in his hand and write a method signature on the whiteboard and ask us to implement it recursively. Then iteratively. These would be functions as simple as calculating x^y, reversing a string, etc. He did these for 2–3 lectures straight. It built a very strong base for thinking recursively (and not just invoking recursion because someone asked you to). Once your brain is wired for recursion ( it will be super hard for a few people initially - not because they are less intelligent but simply because we all think differently [the left/right brain thing - more on that some other day]).

So, you need 5–10 hours of paper coding to learn and get recursion. I recommend searching google for recursion practice questions. A good way to do it is with filetype:pdf and it will directly link you to top university problem sets you can do on your own and filter all the blogs.|||

