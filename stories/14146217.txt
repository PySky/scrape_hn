One of the most powerful features of Artillery is being able to add custom logic to your test scripts by writing JS functions. If you’re a Node.js developer, you will already know that contains a lot of high-quality open-source code, and any of that code can be used in your Artillery tests scripts to get stuff done faster or to accomplish something that Artillery does not provide out of the box.

We can use Artillery’s support for custom JS to solve a common task when writing performance testing scripts: making request payloads sent to our backend APIs random, while making sure that they are also realistic.

For example let’s say our test scenario contains a user registration step, which is a request to with a JSON body containing the name, email address and password for the new user:

However, hardcoding the request data is not ideal. We’d definitely want to send a different combination of email, name, and password for every request actually made to the endpoint to make our tests more representative of real behavior. This is where the Faker.js package would come in.

Faker.js is a small module that has a comprehensive API and can be used to generate all sorts of random data: from names, email addresses and phone numbers to colors, numbers, and lorem ipsum text blocks.

Here’s how we could generate a name using Faker for example:

When run, the script produces output along the lines of:

We can easily combine Faker.js with Artillery to be able to send a lot of random data to an API we’re testing in just a couple of steps.

First, a quick refresher of how load testing with Artillery works:

With that in mind, our goal for this exercise is to go from a script that looks like this:

To something that sends random data rather than hardcoded values.

The first thing we’ll do is replace hardcoded values with variables:

We don’t have those variables defined anywhere yet - they will be created with a custom function and Faker.js.

Create a file in the same directory as our Artillery test script, and add to our script to tell Artillery to load custom JS code from a module:

This will make any functions ed from available in our scenarios.

We can make our scenario call a custom JS function as one of the steps in our scenario with the command. Since our code will be creating the variables that the request to will be using, we’ll want to call our function that generates random data at some point before making the request. Our scenario now becomes this:

By convention, a function called from a scenario with a command is given 3 arguments: the virtual user’s context, an EventEmitter which can be used to communicate with Artillery, and a callback which needs to be called for the control to be returned to the scenario. (There are other ways to call functions, e.g. with a attribute on a request definition but we won’t be using those for our current task.)

Our module with the function using Faker.js will then look like this:

And that’s it! Our complete test script now looks like this:

And if we run the script now, we should see output like:

We saw that combining modules with Artillery tests is quite straightforward, and opens up a lot of possibilities for our test scripts. We can use a module like Faker.js to make our tests more realistic or even turn Artillery into a fuzz testing tool with a little more effort.

More information on writing custom JS can be found in the Artillery docs.|||

