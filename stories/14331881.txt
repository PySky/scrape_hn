{"id": "D0ZNPP:989C3FB6BBF8BCB1877FAC2053160F16", "bulletinFamily": "blog", "title": "How to bypass libinjection in many WAF/NGWAF", "description": "Before we start, [libinjection](<https://github.com/client9/libinjection>) is a very popular open-source project (<https://github.com/client9/libinjection>) created by [Nick Galbreath](<https://github.com/client9/libinjection>) from Signal Sciences. 

A lot of WAFs and NGWAFs use this library instead of regular expressions because of performance. For example, mod_security since version 2.7.4 supports libinjection by two operators in the SecRule definition: detectSQLi (since 2.7.4) and detectXSS (since 2.8.0).



Technically libinjection is a C-based parser based on the tokenizers for different syntax. 

SQL syntax and HTML syntax are supported now.



But sometimes libinjection is even worse than regular expressions. Let me tell you why.



**A. Unknown token for the libinjection tokenizer. 

**A.1. Function token. It\u2019s easiest way to find unknown token. Authors tried to list all the possible SQL functions, but it\u2019s impossible because of the custom functions (stored procedures, triggers, dynamic functions, etc). 

The second reason why it was a wrong decision to list all the SQL functions in the tokenizer is many different SQL functions built-in in various SQL engines such as MariaDB, MySQL, SQLite, PostgreSQL, etc.



A simple example here is:

 

 

 **?id=\u2018-sqlite_version() UNION SELECT password FROM users- -**



**B. Unknown context for the libinjection parser. 

**B.1. Brackets context. 

If an attacker wants to do DoS and turn down your database through SQL injection, he should run a huge query like this:

 

 

 **?id=sleep(9999)**



But this attempt will be detected and blocked as attack. 

However this one will not:

 

 

 **?id=)-sleep(9999**



Just because libinjection doesn\u2019t know brackets contexts.



The same situation for the file writing in MySQL:

 

 

 **?id=1337 INTO OUTFILE \u2018xxx\u2019--**



will be detected. 

But this one :

 

 

 **?id=1337) INTO OUTFILE \u2018xxx\u2019--**



will not be detected because of the context.



A lot of fun can be obtained through stacked (batch) queries:

 

 

 **?id=123;DROP TABLE users--**



will be detected and blocked, but this one:

 

 

 **?id=123);DROP TABLE users--**



will not be blocked and you will miss your users table\u2026



Simple data extraction payload could looks like:

 

 

 **?id=) OR (SELECT password FROM users ...**



B.2. Comments context. Injection inside the comment of SQL query.

 

 

 ***/UNION SELECT password FROM users--**



It\u2019s not so rare to find the injection inside comments area in SQL query. libinjection can\u2019t detect anything there just because doesn\u2019t support this kind of context inside the SQL parser.



As seen in this article, it is not so easy to protect Web applications even from such well understood attacks as SQL injections. Even very popular and modern libraries can be easily bypassed.



![](https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=1e2513453c0f)", "published": "2017-05-12T18:55:21", "modified": "2017-05-12T22:35:44", "cvss": {"score": 0.0, "vector": "NONE"}, "href": "https://medium.com/@d0znpp/how-to-bypass-libinjection-in-many-waf-ngwaf-1e2513453c0f?source=rss-952c3fe8c7c7------2", "reporter": "Ivan Novikov", "references": [], "cvelist": [], "type": "d0znpp", "lastseen": "2017-05-13T17:01:20", "history": [], "edition": 1, "hashmap": [{"key": "bulletinFamily", "hash": "126ac9f6149081eb0e97c2e939eaad52"}, {"key": "cvelist", "hash": "d41d8cd98f00b204e9800998ecf8427e"}, {"key": "cvss", "hash": "8cd4821cb504d25572038ed182587d85"}, {"key": "description", "hash": "65f0a99fbbec1a1d4f214f7b6a394f8a"}, {"key": "href", "hash": "01c920446f43eb9fec898f51b878386f"}, {"key": "modified", "hash": "4bc14bb5953333601734ef201e3996fa"}, {"key": "objectVersion", "hash": "56765472680401499c79732468ba4340"}, {"key": "published", "hash": "9c1b5111027d0a74dbcccc5f9b3b99e2"}, {"key": "references", "hash": "d41d8cd98f00b204e9800998ecf8427e"}, {"key": "reporter", "hash": "16a2229c90b53a365cbc8cbc585dc421"}, {"key": "title", "hash": "95079308d37a5ed701a1186e98b91e64"}, {"key": "type", "hash": "5d612b796768c61d594a88f8b25918c9"}], "hash": "88acc9c8c3cf5fd18b4a6526ea480dfdb7aec4ef8ae15de03fef50da0e5b0ad5", "viewCount": 147, "objectVersion": "1.2"}|||

Before we start, [libinjection](&lt;https://github.com/client9/libinjection&gt;) is a very popular open-source project (&lt;https://github.com/client9/libinjection&gt;) created by [Nick Galbreath](&lt;https://github.com/client9/libinjection&gt;) from Signal Sciences.  
A lot of WAFs and NGWAFs use this library instead of regular expressions because of performance.