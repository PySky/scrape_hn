To bring you the latest from the web and tried-and-true hosting, recommended for designers and developers.

This article is part of a series created in partnership with SiteGround. Thank you for supporting the partners who make SitePoint possible.

With images making up a whopping 65% of all web content, page load time on websites can easily become an issue.

Even when properly optimized, images can weigh quite a bit. This can have a negative impact on the time visitors have to wait before they can access content on your website. Chances are, they get impatient and navigate somewhere else, unless you come up with a solution to image loading that doesn’t interfere with the perception of speed.

In this article, you will learn about five approaches to lazy loading images that you can add to your web optimization toolkit to improve the user experience on your website.

Lazy loading images means loading images on websites asynchronously — that is, after the above-the-fold content is fully loaded, or even conditionally, only when they appear in the browser’s viewport. This means that if users don’t scroll all the way down, images placed at the bottom of the page won’t even be loaded.

A number of websites use this approach, but it’s especially noticeable on image-heavy sites. Try browsing your favorite online hunting ground for high-res photos, and you’ll soon realize how the website loads just a limited number of images. As you scroll down the page, you’ll see placeholder images quickly filling up with real images for preview. For instance, notice the loader on Unsplash.com: scrolling that portion of the page into view triggers the replacement of a placeholder with a full-res photo:

There are at least a couple of excellent reasons why you should consider lazy loading images for your website:

Well, lazy loading images helps with website performance, but what’s the best way to go about it?

There is no perfect way.

If you live and breath JavaScript, implementing your own lazy loading solution shouldn’t be an issue. Nothing gives you more control than coding something yourself.

Alternatively, you can browse the web for viable approaches and start experimenting with them. I did just that and came across these five interesting techniques.

David Walsh has proposed his own custom script for lazy loading images. Here’s a simplified version:

The attribute of the tag is replaced with a attribute in the markup:

In the CSS, elements with a attribute are hidden. Once loaded, images will appear with a nice fade-in effect using CSS transitions:

JavaScript then adds the attribute to each element and gives it the value of their respective attributes. Once images have finished loading, the script removes the attribute from elements altogether:

David Walsh also offers a fallback solution to cover cases where JavaScript fails, which you can find out more about on his blog.

The merit of this solution: it’s a breeze to implement and it’s effective.

On the flip side, this method doesn’t include loading on scroll functionality. In other words, all images are loaded by the browser, whether users have scrolled them into view or not. Therefore, you get the advantage of a fast loading page because images are loaded after the HTML content. However, you don’t get the saving on bandwidth that comes with preventing unnecessary image data from being loaded when visitors don’t view the entire page content.

Robin Osborne suggests a super ingenious solution based on progressive enhancement. In this case, lazy loading itself, which is achieved using JavaScript, is considered the enhancement over regular HTML and CSS.

Why progressive enhancement? Well, if you display images using a JavaScript-based solution, what happens if JavaScript is disabled or an error occurs which prevents the script from working as expected? In this case, without progressive enhancement, users are likely to see no images at all. Not cool.

You can see the details of a basic version of Osborne’s solution in this Pen, and a more comprehensive one, which takes into account the case for broken JavaScript, in this other Pen here.

This technique has a number of advantages:

You can learn all the details of Robin Osborne’s approach on his blog.

A quick and easy alternative for implementing lazy loading of images is to let a JavaScript/jQuery plugin do the heavy lifting for you.

Lazy Load XT is a feature-packed jQuery plugin. You can opt for a simplified version called , which lets you just lazy load images. Alternatively, you can use , which is an extended version of the plugin. With the extended version, you can lazy load iframes, videos, and generally all tags that use a attribute.

To include Lazy Load XT in your project, at the bottom of your HTML page before the closing tag, add the jQuery library, followed by one of the two Lazy Load XT flavors mentioned above. For instance:

If you don’t want to use jQuery, Lazy Load XT offers a much lighter option, a small script called :

In your HTML document, mark up images using a attribute instead of the regular attribute, like this:

You can then leave the plugin to initialize itself, or you can manually initialize it yourself. For instance, to initialize a selection of elements write:

This plugin makes tons of add-ons for extra functionality available. To mention just a couple:

Among the advantages of Lazy Load XT and its add-ons are:

For a full list of options and add-ons, visit the Lazy Load XT repo on GitHub.

bLazy is a smart vanilla JavaScript plugin for lazy loading images. More specifically:

You need to modify the regular tag as follows:

The JavaScript: enter a simple call to bLazy and fine-tune with a map of options:

To learn more on bLazy and its available options, follow these links:

If you are a Medium reader, you have certainly noticed how the site loads the main image inside a post.

The first thing you see is a blurred, low-resolution copy of the image, while its high-res version is being lazy loaded:

You can lazy load images with this interesting blurring effect in a number of ways.

My favorite technique is by Craig Buckler. Here’s all the goodness of this solution:

You can read all about it in How to Build Your Own Progressive Image Loader and download the code on the project’s GitHub repo.

And there you have it, five ways of lazy loading images you can start to experiment with and test out in your projects.

What is your preferred approach? Do you think lazy loading images improves user experience and performance on your website?

Use the comment box below to share.|||

Maria Antonietta Perna highlights the benefits of lazy loading images on websites and shows five approaches to implement lazy loading for your website.