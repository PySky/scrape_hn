X3J13 is the subcommittee that created ANSI Common Lisp. Its parent committee was X3. The J series of subcommittees were the programming language committees. Common Lisp was the 13th language committee. Lucky us!

X3J13 was later renamed to J13, as part of a complicated bunch of name changes. This makes online archaeology slightly difficult, so be careful.

What was originally called the Computers and Business Equipment Manufacturing Association (CBEMA, pronounced "Suh-BEE-mah") became, briefly NCITS, and then (probably to make it sound better and look more insightful) to INCITS.

Presently there is no home page for J13 because the committee J13 is no longer active.

Some worry that its being inactive is a sign of failure, but it's not; it's a sign of stability. As a matter of procedure, it could be reactivated if a suitable need were shown. None has been shown. The language is well-designed and stable.

It's my opinion that reviving standardization activity by re-opening the Common Lisp standard itself for change would be both expensive and destabilizing for the community.

The original process, which took about about 8 years (1986-1994), cost almost a half a million dollars in itemizable expenses, and a great deal more in other costs for which no accounting was done.

And then there was the cost to the community of adopting the result. Incompatible changes were involved. People had to be paid to understand the changes, to survey code that had changed, to debug code that was not compiling, etc.

To open the standard to change is to expose it to all of these effects anew. By contrast, these techniques address the fundamental needs of the community to move forward without the negative effects:

User-written packages. Many things people complain should be in the standard could be written privately with existing language capabilities. Layered standards. Where there is a need for agreement on extensions, that doesn't imply that the base language needs to change. New languages. In the event that someone thinks the underlying language needs to change, my strong personal opinion is that they should make a new language of appropriate coherent form and then seek to attract users to that new language without destabilizing the existing community. A new language can be adopted on an as-needed basis by those that need it. If the existing language changes, the problem is that users who are content with it will be forced to expend energy and money, probably at times not of their own choosing, to accommodate the change.|||

