How do you go from developer and founder of an API, IaaS or dev tool to $100m ARR? What are the biggest surprises and hurdles to get to market? What can you learn from Heroku, Github, Algolia, Tokbox, Layer, Greta.io, Timekit, and maybe even me?

The world is breaking apart. And, not in the way you think. I am talking about Infrastructure as a Service (IaaS) companies. Gone is the world of a massive monolith of self-written code hosted on your machines. Layer by layer is being peeled off from underneath. The peel continues, like a Brit after the first summer sun, and the opportunities to build startups are amazing.

How do you go from a product to a massive revenue IaaS company? Here are the five biggest discoveries you need to figure out and my three recommendations.

Very likely you are a developer if you build an IaaS and you want to talk to and help other developers. It is great to see people sign up for the service you are building and chatting with them. But sadly, these people are not the customers you want. Why?

You have to find who would get promoted for buying your service. Is it someone in marketing? Or a product manager? Or the CIO?

What is that person’s business needs? Is your product essentially replacing the cost of one developer per year? Or, do you decrease load times and increase uptime and therefore increase revenue? Or can you improve analytics which allows the marketing team to be more data driven?

Companies are driven by profit, although we’re sometimes tricked into believing otherwise in the startup world. Therefore, you can only become important to them by improving that profit, meaning you either increase their revenue, or decrease their cost.

It sounds great to be a vital part of your client’s business. To be core, not context, as it is called in business tongue. If you are not then customers might not pay you much or even bother. Not a problem if the setup is self-service and costs are less than $50 per year. But if you want to charge $25k per year you need to show not only why they can trust you, but why they shouldn’t build it themselves.

The best ways of staying relevant is doing one of two things:

Be very close to customers and potential ones who you are core for even if they can handle things themselves. Some of your best clients might refuse you give you insight into how they are using your product. You still want to stay on top of their demands and make sure to know what internal projects they are benchmarking you against.

Almost every company I know have whales — a small number of clients who make up the majority of the revenue. The top 20% accounts constitute more than 60% of the MRR. Those who survived realized that the pricing plan shouldn’t be Free, $299, and a $699 enterprise plan. The highest clients will pay five-figure numbers or more per year.

It is often a heart breaking moment for developer founders to ask themselves “Is Enterprise a serious part of our revenue or are we a community play?”. You don’t feel equipped to handle these sales conversations. Luckily for you, there are good books on the subject.

Big deals might not be huge in the beginning. The strategy is often “land and expand.” Begin with a proof of concept, than an internal use case, move on to being one feature or region, and so on.

But big clients will need handholding or even integrations done. You might need to build a professional service team even.

I have a simplified rule of thumb for different contract values:

A lot of tech founders just want to get their product out there and in the hands of other developers. First, you start with a free tier. Then you realize you need monetization and add paid tiers. Most headless companies can’t make $100m ARR if they don’t have very high priced tiers. But apart from that, what should you think about?

As long as you don’t have high costs for using your service or a very complex onboarding, I think you should try to have a free tier. If there are costs then you can have a free trial at least. What are the reasons for a free tier?

So, we need the free tier, but then what about the rest? There are two main ways, dependent on how your product works. Either you have feature-based tiers, or you are paid by the meter — for storage, traffic, or some kind of volume. Whatever you do: have few tiers, make sure they are simple to understand, and costs are predictable.

Ideally, there are only two paid tiers; one which can be handled over the phone with setup meetings, and one which will need some professional services or substantial interaction.

Put the “sophisticated” features in the more expensive tier, even if it already is there implemented from a product standpoint. Things like using the API on your own — even if that works out of the box it will demand a lot from your customer success team. Compliance, guaranteed uptime, more service, etc. are all in higher tiers.

A lot of time we make the higher tiers more flexible instead of learning what those use cases really are. Compensate your flexibility with customer intimacy as your product becomes more vague and harder to understand. Setup professional service teams or just work in close cooperation with the big clients.

With feature-based pricing, you will leave money on the table. Some of the biggest companies in the world will settle for a lower tier and not the “Call us” one. You know that you could increase the price for them. But resist the temptation to add tiers in between to solve this.

Volume feels so easy — if you use it more, you pay more. But with volume based pricing comes other problems. The first one is that you take the risk and cost of the onboarding without knowing how much you will make.

The second is that some of the customers that get the most value, might not have the biggest volume. If you are a messaging service, you drive revenue for an e-commerce business but are not a revenue feature for a dating service. Another problem is that ambitious people believe their company to be the next Google so when they look at what your service will cost in two years, it is worth building it on their own.

Both are usually best solved with platform fees, because people don’t like minimum bundles of usage if they don’t understand how much they will use.

The platform fee covers the onboarding and filters out the false positives of people who later don’t want to pay anyway. In the fee, there is some volume, but then you charge that by the meter. You can have a unique platform fee for every tier and will look just like any SaaS pricing page.

Secondly, you want to show how increased usage increases the benefits. Ask yourself “What can I build into my product to incentivize the real clients to use it more?”.

When you are building infrastructure, API services, or anything “headless” you need to figure out how people can see and relate to what you can do. As Clayton Christensen says “People don’t buy drills, they buy holes.”

There are a couple of ways to become tangible — get credibility, data, or testimonials:

At the end of the day: Do not underestimate how hard it is to understand what can be done with your amazing technology. You are not spending a tenth of what you should be on communicating. What are you solving and for whom? Educate them on the problem.

If you are building a company in the space, I’m of course happy to chat!

Thanks, everyone who talked to me and helped me figure this out: Jesper Klingenberg, Anna Ottosson, Tomaž Štolfa, Scott Chacon, Janine Yoong, Gaëtan Gachet, Christoph Janz, and Blake Mizerany.|||

How do you go from developer and founder of an API, IaaS or dev tool to $100m ARR? What are the biggest surprises and hurdles to get to market? What can you learn from Heroku, Github, Algolia, Tokbox…