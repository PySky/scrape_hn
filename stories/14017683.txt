In complex service oriented application stacks, some bugs only manifest themselves on congested or slow networking interfaces. Consider a web-service running on a generic Linux box with a single networking interface, . If is busy enough to completely saturate its networking link, a web-service running on the host behind that link may experience odd behavior when things “slowdown”.

For instance, established client connections timeout but the service fails to gracefully cleanup after itself leaving these connections open — this is a classic source of connection leaks, which on the JVM usually results in the dreaded problem.

So, in development, if one wants to see how a service behaves behind a slow networking interface with extra latency:

A quick search for “how to artificially slow down a Linux networking interface” produced a number of interesting results. Folks mostly discussed 3rd party tools like Wondershaper and Dummynet. Other suggestions involved proxying all HTTP/HTTPS traffic through Apache’s — yuck!

Fortunately, most Linux distros ship with the command which is used to configure Traffic Control in the Linux kernel.

On my Ubuntu 12.04 box I’ve got a single gigabit networking interface, .

Without throttling, ping times to another local node on my home network are less than on average.

So, lets use to add of latency to all network traffic.

Now, trying again note as desired.

Using we’ve added a delay of to all traffic. This will slow short connections, but once a connection gets past the TCP Slow-start window we’re back to full speed. That is, the connection may start slow — as shaped by our delay tweak — but once things are started TCP will ramp up and eventually hit full speed again.

So, let’s configure a sustained maximum rate using . In other words, lets configure Linux to never allow to use more than regardless of port or application.

Looks good, now lets download a large file using to prove to ourselves that our sustained maximum rate throttling is actually working.

Note the download isn’t going to hover exactly at — the actual download speed as reported by is an average over time. In short, you’ll see numbers closer to an even the longer the transfer. In this example, I didn’t wait to download an entire file, so the you see above is just averaging the transfer speed over the short time I left running.

Now that we’re done, simply delete all traffic control throttling rules to return to normal.|||

