In this tutorial, we'll learn how to set up Server Side Rendering of React Components with Hypernova.

Situation: You've written a React app, and your website works great. Of course it does! But you begin to wonder, how can I improve performance on the client? The answer, of course, is Server Side Rendering!

Actual footage of a user loading an SSR-enabled website for the first time.

Here are some great benefits to Server Side Rendering (SSR) your React components:

There are a few projects that we could use to do SSR:

Why not just use ? Well, it's kinda slow. In a production environemnt, we also want to have things like caching, isolated rendering and multithreading in order to be able to scale.

The projects listed above allow us to solve these problems. They're all decent options, but we'll go with Hypernova here.

If you want to follow along, git clone this repo for the example code.

Let's say you already have the existing following bare-bones code structure:

Where and look like the following:

is a "top-level" component, a component that gets loaded into the page with . Any components that are nested within , we don't care about - it's only these top level components that we'll be passing to the SSR server.

To complete the picture, we transpile with babel and use webpack to create a bundle that gets loaded into a template .

Running runs webpack, spits out a build folder, launches a webserver and everything works as expected. 



This gives us a (very!) bare bones React app. We can now begin to add the SSR :)

You can checkout the branch in the example repo to get to this point.

Our website is in great shape, and now it's time to add SSR!

Instead of sending over a static compiled template that contains everything, we'll just keep the outer HTML structure in a template and let SSR components fill in the middle bits.

We'll do this in a few stages:

Eventually, our stack will look like this: 



We will again use webpack to generate the bundle for the server side renderer. Here's what this process looks like: 



We will define a file, , to import all the top-level components that we need. (Remember, a top-level component is defined by anything we'd otherwise call on. In our case, . For a new application, you'd probably only want one entrypoint.)

Here's what our file looks like:

We now need to modify our webpack setup to generate an additional bundle for SSR, using our file.

Checkout the branch in the example repo to get to this point.

Now that we've set up the bundling, let's create the Hypernova service to serve these components. Hypernova recommends doing this as a separate server:

This is especially useful advice when deploying as part of a microservice architecture (having multiple concerns running in one containers is hairy 3, and scaling becomes easier for a dedicated container). We'll "deploy" to a subdirectory in this tutorial, but we would ideally containerize each server individually, with only the compiled bundle needing to be shared.

In the directory , let's create the following Hypernova server:

We can verify the server works by running the server with and querying the API for our component:

Checkout the branch in the example repo to get to this point.

Let's turn into a function that accepts some markup:

This enables us to get the markup from Hypernova and pass it down as an argument. (In the real world where markup probably already lives in templates, this may not be easily doable. This will be discussed further in a future blog post, but the answer for now is string substitution.)

Checkout the branch in the example repo to get to this point.

Finally! Now we can call Hypernova from our webserver and plug the rendered React markup into our template.

We also need to update to let Hypernova hook into the rendered components instead of using

Fingers crossed - let's run to compile webpack, launch Hypernova and start the webserver and hopefully...

Hooray! It's exactly the same, but slightly quicker!

Checkout the example repo for all the code.|||

In this tutorial, we'll learn how to set up Server Side Rendering of React Components with Hypernova.