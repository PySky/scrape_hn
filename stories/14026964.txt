Language support for caching sucks. Despite an ever present need to cache data and calculations most languages require the programmer to do all the work. There’s no way to track dependencies, no way to know if the cache is valid, no way to know if the cache is even useful. In this article I’ll look at some of the key problems.

In Fuse we do a lot of calculations. We need to check hit test bounds, calculate curve bounds, produce local-to-world transform matrices and calculate render bounds. I’ll even consider the drawing of elements to be a calculation. I’m sure I’m missing something; the point is that we have a lot to do.

On their own none of these individual calculations is a problem. En masse however, for every node in the tree, they take a lot of CPU time. Caching improves the frame rate and reduces energy usage.

A cached calculation looks something like this:

Let’s assume for a moment that and are both pure functions (the result depends solely on the input arguments). This means is valid until either or change. But how do we know when they change?

There are two basic approaches. Either we subscribe to a event:

Or we add a and check it each time we calculate:

Both approaches unfortunately require that whoever changes do something more: either emit the changed event or increment the version. I’ll just refer to the event based approach now for simplicity.

That example is nearly trivial yet we can already see the coming wave of defects. Either the cache forgets to subscribe to events, or the producer fails to emit an event.

Nonetheless, to see the true scope of the problem, let’s make it more complicated. We’ll replace with that calculates the render bounds of a child node, where and are such nodes (elements in a UI tree for example).

It would no longer make sense to subscribe to as we don’t actually know what variables in the node are used by . Nor would we want to start subscribing to many different events here, it’s error-prone and inefficient.

Instead we pass on the responsibility for the caching to the node itself:

We can subscribe to a simple event on each of the nodes. It keeps this level simple, but it’s pushed the burden a level down.

Each node needs to cache its own and emit events when it updates. It may sound simple, but something like bounds involves a lot of variables: position, size, transforms and visibility. A change in any one of those variables must invalidate the cache somehow.

Events are never free, and that’s a problem. Does the cached render bounds really need to subscribe to events for all the variables of interest? Consider now that hit test bounds and layout also have cached values. Every node in a UI tree would need to subscribe to a lot of events to keep it’s caches in order. The management, and dispatch, of these events, adds even more overhead.

In Fuse we use a third approach to alleviate this. Instead of dynamic events we hard-code some virtual functions for key caches. Things like and . All cached values are calculated and cached lazily: after invalidation they are not calculated again until actually used.

This does wonders for efficiency, but at the expense of complexity.

There’s no avoiding the need for these caches. It’s just unfortunate there isn’t much language support to help. All this work feels mundane and repetitive. Each variable we use a variable the cache ends up having the same basic structure of either subscribing to messages or checking versions. Each time we set a variable we have the same basic emitting of events or incrementing versions.

This all feels like something a compiler could be doing for us in an efficient and safe manner. I’m not clear yet on what the syntax should be. Well, that’s not true, the ideal syntax would be something like:

Where sets up everything needed for cache: the events and subscriptions, or versions and checking, on the complete tree of dependencies. Though it seems like I might be asking for a bit much, this is essentially what reactive programming does. It’s just usually reserved for higher level programming.

I’ll have to investigate further.|||

Language support for caching sucks. Despite an ever present need to cache data and calculations most languages require the programmer to do all the work. There's no way to track dependencies, no way to know if the cache is valid, no way to know if the cache is even useful. In this article I'll look…