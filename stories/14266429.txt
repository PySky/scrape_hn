With redux-logic, you have the freedom to write your logic in your favorite JS style:

Testing your logic is straight forward and simple. redux-logic-test provides additional utilities to make testing a breeze.

With simple code your logic can:

Redux-logic makes it easy to use code that is split into bundles, so you can dynamically load logic right along with your split UI.

Server rendering is simplified with redux-logic since it lets you know when all your async fetching is complete without manual tracking.

Inspired by redux-observable epics, redux-saga, and custom redux middleware, redux-logic combines ideas of each into a simple easy to use API.

This is an example of logic which will listen for actions of type FETCH_POLLS and it will perform ajax request to fetch data for which it dispatches the results (or error) on completion. It supports cancellation by allowing anything to send an action of type CANCEL_FETCH_POLLS. It also uses feature that if additional FETCH_POLLS actions come in before this completes, it will ignore the outdated requests.

The developer can just declare the type filtering, cancellation, and take latest behavior, no code needs to be written for that. That leaves the developer to focus on the real business requirements which are invoked in the process hook.

{ } ; ({ type , only apply this logic to this type cancelType , latest , your code here, hook into one or more of these execution ({ getState, action }, , ) { . ( ) . ( . . ) . ( ({ type , payload polls })) . ( { . (err); log since could be render err ({ type , payload err, error }) }) . (() ()); } });

Since redux-logic gives you the freedom to use your favorite style of JS code (callbacks, promises, async/await, observables), it supports many features to make that easier, explained in more detail

Full release notes of breaking and notable changes are available in releases. This project follows semantic versioning.

A few recent changes that are noteworthy:

These changes are not breaking but they are noteworthy since they prepare for the next version which will be breaking mainly to remove the single dispatch version of process hook which has been a source of confusion.

{ } ; ; ; { anything you need to have available in your logic , firebase firebaseInstance }; (arrLogic, deps); ( logicMiddleware ); middleware; could compose in dev tools too () { (rootReducer, enhancer); store; } in logic.js - combines logic from across many files, just a simple array of logic to be used for this app [ todoLogic, pollsLogic ]; { } ; ({ type , ({ getState, action }, , ) { . ; ( (). [ . ]) { can also hit server to check (action); } { ({ type , payload user, error }) } } }); ({ type , ({ getState, action }, ) { add unique tid to action.meta of every action . {}; { existingMeta, tid . () }, ({ action, meta }); } }); ({ type , only apply this logic to this type cancelType , latest , ({ getState, action }, , ) { . ( ) . ( . . ) . ( ({ type , payload polls })) . ( { . (err); log since could be render err ({ type , payload err, error }) }) . (() ()); } }); [ validationLogic, addUniqueId, fetchPollsLogic ];

has these new properties which affect the process hook behavior:

The successType and failType would enable clean code, where you can simply return a promise or observable that resolves to the payload and rejects on error. The resulting code doesn't have to deal with dispatch and actions directly.

{ } ; ({ type , only apply this logic to this type cancelType , latest , processOptions { optional since the default is true when dispatch is omitted from dispatchReturn , provide action types or action creator functions to be used with the resolved/rejected values from promise/observable returned successType , failType , }, Omitting dispatch from the signature below makes the default for not needing to use dispatch directly ({ getState, action }) { . ( ) . ( . . ); } });

This is pretty nice leaving us with mainly our business logic code that could be easily extracted and called from here.

See the docs for the full api

Following are just short summaries to compare redux-logic to other approaches.

For a more detailed comparison with examples, see by article in docs, Where do I put my business logic in a React-Redux application?.

The SAM (State-Action-Model) pattern is a pattern introduced by Jean-Jacques Dubray. Also known as the PAL (proposer, acceptor, learner) pattern based on Paxos terminology.

A few of the challenging parts of implementing this with a React-Redux application are:

Custom Redux middleware can be introduced to perform this logic, but you'll be implementing most everything on your own.

With you can implement the SAM / PAL pattern easily in your React/Redux apps.

Namely you can separate out your business logic from your action creators and reducers keeping them thin. redux-logic provides a nice place to accept, reject, and transform actions before your reducers are run. You have access to the full state to make decisions and you can trigger actions based on the updated state as well.

redux-logic was inspired from these projects:

Note: If you are already including RxJS 5 into your project then the resulting delta will be much smaller.

If you have input or ideas or would like to get involved, you may:

This project is supported by CodeWinds Training|||

redux-logic - Redux middleware for organizing all your business logic. Intercept actions and perform async processing.