You're almost there, writing an Iterator class (I show a Generator at the end of the answer), but gets called every time you call the object with , returning a generator object. Instead, use :

To make the class itself an iterator:

Here's your original code with my comments:

So every time you called you got the generator object that returns:

You still need to implement a send and throw method for a

So let's implement a generator object, and leverage the abstract base class from the collections module (see the source for its implementation), which means we only need to implement and - giving us , (returns self), and (same as ) for free (see the Python data model on coroutines):

and using the same tests above:|||

