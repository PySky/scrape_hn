Want to equip your command-line application with a nice visual user interface? TUI libraries are here to help.

You are a developer and want to learn Go? A new online Video course is coming soon! Visit appliedgo.com to learn more.

Console applications usually take some parameters at start, and maybe some more input through basic console I/O. And that‚Äôs ok in most cases, though sometimes it would be great to have a visual user interface but without the code size and complexity of a full-blown Web app.

Text-Based User Interface libraries (or TUI libraries) meet this need. They bring panes, input, output, mouse support, graphics, and audio, to your terminal.

Originally, I planned to evaluate three to four TUI libraries for Go side-by-side, using a sample app definition with a specific set of features to be tested. I had a few requirements on the libraries: They should -

Turned out that none of the libraries I found passes all of the requirements.

Well, not if you really want all those nifty UI features at once. However, if you can forego some of the requirements, there is indeed a small selection of capable TUI libraries at your disposal that I‚Äôll briefly introduce below.

Just one thing before we start.

The list is (and cannot) be complete. I used GitHub.com, awesome-go.com, GolangLibs.com, and LibHunt.com to find TUI libraries but still there is no guarantee that I found all relevant projects out there.

Without the tips of a couple of redditors in this thread, and would perhaps have slipped through.

And then, of course, the above list of criteria is a very fuzzy filter, and you might have included a library that I ruled out because of this list.

But now let‚Äôs move on to the TUI library overview.

If you are fine with building your UI on top of a handful of UI primitives, there are two libraries that look fairly stable and complete:

has a small and straightforward API. It uses a two-dimensional cell buffer to represent the terminal screen, with a few methods like setting cells, clearing the screen, or setting the cursor. All input, whether keyboard, mouse, or resize events, is tracked through a unified Event type.

As simple as the API might seem, it has not prevented others from creating interesting projects on top of , including higher-level TUI libraries ( , , and `), simple games, godit (a text editor) and hecate (a hex editor), and more.

The README makes no claims about supported platforms. The code includes some files, indicating that runs on Linux, macOS, Windows, OpenBSD, NetBSD, FreeBSD, and Dragonfly BSD.

According to the author, was born out of the need for certain features that does not provide, and patching turned out to not be a suitable way to go forward. claims to have a couple of advantages over , including additional functionality, better portability, better I/O, better support for mouse, Unicode, colors, and more. (I cannot comment on these claims, as I have tested neither nor in great depth.) is the TUI library behind the Micro editor, and is also used by godu.

According to the README, works on POSIX systems that provide a POSIX termios implementation with , as well as on Windows.

The ‚ÄúPOSIX‚Äù requirement includes Linux, macOS, FreeBSD, and Solaris, and certainly more systems that are not explicitly listed in the README.

is one of the high-level TUI‚Äôs that are built on top of . It is specialized on displaying information in graphical form - as bar chart, line diagram, spark line, or as a gauge. Text output is also possible of course. The UI is built on the concept of widgets, or blocks, that contain exactly one type of data representation - text, charts, or diagrams.

provides a static layout and a grid layout. The grid layout can respond dynamically to resizing of the terminal window.

On the input side, offers a simple event handling system that can react to key presses, window resizes, or timers.

What is missing from to make it a ‚Äúfeature-complete‚Äù TUI toolkit is high-level input handling (input boxes, buttons, menus, drop-down lists etc). I also missed some sort of resizeable panes, although the grid layout probably provides a suitable alternative to that.

A couple of projects have already been built with , including ctop.

This library almost seems like the opposite of : No fancy widgets anywhere, but instead, building blocks for split views, overlapping views, editable views, and event handling for keyboard and mouse events.

I couldn‚Äôt resist including the following projects here, although they do not meet some of the inclusion criteria. Still, they look very promising and may offer one or the other feature that you might have missed in this list so far.

From the screenshots, this is perhaps the best-looking TUI library in this list. It also looks fairly advanced already, featuring a rich set of UI widgets like buttons, drop-down lists, gauges, etc. as well as a window manage and theming. However, the lack of documentation (except for the API docs) indicates that this is still a work in progress.

Definitely a work in progress, manages overlapping, resizeable, decorated windows with scrollable content.

The building blocks of are widgets and layout boxes. There seems no support for mouse-based resizing of layout boxes, but each layout box can assume one of (currently) two automatic resizing behaviors.

This one is a special kind of TUI. is not a general TUI library. Rather, it is a specialized toolkit for console-based games. So perhaps you won‚Äôt be able to build a ‚Äústandard‚Äù application UI on top of it, but you surely can make your windows make a sound when colliding! üòâ

As always, there is some code included to try out at your end. This time, the code uses the two libraries and for creating a minimal UI with a simple layout - similar to the layout in the screenshot:

If the library provides a text entry widget, text entered there shall appear in the output pane.|||

Beef up your Go console application with a Text-Based UI