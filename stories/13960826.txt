Yesterday I was talking to some friends about Bash and I realized that, even though I’ve been using Bash for more than 10 years now there are still a few basic quirks about it that are not totally obvious to me. So as usual I thought I’d write a blog post.

If you write shell scripts and you don’t read anything else in this post, you should know that there is a shell script linter called shellcheck. Use it to make your shell scripts better!

We ’re going to talk about bash like it’s a programming language, because, well, it is. The goal of this post really is not to go into details of bash programming. I do not do complicated programming in bash and do not really plan to learn how to. But after thinking about it a bit today, I think it’s useful to explicitly write down some of the basics of the bash programming language. And some things about the bash programming languages are quite different from other programming languages I use!

I really thought I knew this stuff already but I learned a couple things by writing this post so maybe you will too.

In bash variable assignment looks like this:

and you reference variables with . It’s very important that you don’t put spaces around the = sign – , , and are not syntax errors, but will all do different unwanted things (like try to run a program called an environment variable set to the empty string).

Bash variables don’t need to be all-caps but they usually are.

Most bash variables you’ll use are strings. There are also some array variables in bash but I don’t really understand those.

Sometimes I have a variable containing a string like and I want to do like

This code as is won’t work! It will instead look for the variable which is not a real variable.

To get around this, all you need to know is that does the same thing as . So we can run

Next, Bash has 3 kinds of variables. The kind I usually think of first (and probably use the most often) are environment variables.

Every process on Linux actually has environment variables (you can run to see what variables are currently set), but in Bash they’re much more easily accessible. To see the environment variable called you can run.

To set an environment variable, you need to use the keyword:

When you set an environment variable, all child processes will see that environment variable. So if you run , the python program will have MYVAR set to 2.

The next kind of variable is the global variable. You assign these just like we described up above.

They behave like global variables in any other programming language.

There are also local variables, which are scoped to only exist inside a bash function. I basically never use functions so (unlike in literally every other programming language I write in) I have never used local variables.

Here’s how I write for loops in bash. This loop prints the numbers from 1 to 10.

If you want to write this loop on one line it looks like this:

I find this impossible to remember (how are you supposed to remember that there’s a semicolon after but none after ?) so I don’t try to remember that.

You can also write while loops but I never do that.

The cool thing about this is that you can iterate over the output of another command. prints the numbers from 1 to 10 (one per line), and this for loop is just taking that output and iterating over it. I use this a fair amount.

You can interpolate command output with either backticks or .

If statements in bash are pretty annoying to remember how to do. You have to put in these square brackets, and there have to be spaces around the square brackets otherwise it doesn’t work. and square brackets (double/single) both work. Here we get truly into bash quirk territory: is a program ( ) but is bash syntax. is better.

Also, you can check for things like “this file exists”, “this directory exists”, etc. For example you can check whether the file /tmp/awesome.txt exists like this:

This is sometimes useful but I have to look up the syntax every single time.

If you want to try out conditions from the command line you can use the command, like . It’ll return 0 for success, and an error return code otherwise.

One last thing about why is better than : if you use , then you can use to do comparisons and it won’t turn into a file redirection.

Also one extra last thing about if: I learned today that you don’t need or to do if statements: any valid commamd will work. So you can do

Defining and calling functions in bash (especially if they have no parameters) is surprisingly easy.

Another bash trick: never use a variable without quoting it. Here, look at this totally reasonable-looking shell script:

If you try to run this script, you will get the incomprehensible error message . What?

Bash interprets this if statement as if [ i am awesome == i are awesome] , which doesn’t really make sense because there are 6 strings (i, am, awesome, i, are, awesome). The correct way to write this is

There are cases where it’s okay to just use $X instead of “$X”, but can you really keep track of when it’s okay and when it’s not okay? I sure can’t. Always quote your bash variables and you’ll be happier.

Every Unix program has a “return code” which is an integer from 0 to 127. 0 means success, everything else means failure. This is relevant in bash because: sometimes I run a program from the command line and want to only run a second program if the first one succeeded.

You can do that with !

For example: . This will run , check the return code, and then run only if the return code is 0.

This is different from which will run no matter what the return code of is

You can also do which will run only fails. That’s definitely in the realm of clever tricks.

I’m not going to say much about job control here but: in bash you can start a background process like this

If you later have regrets about backgrounding the process and want to bring it back to the foreground, you can do that with . If there’s more than one of those processes, you can see them all with . For some reason takes a “job ID” (which is what prints) instead of a PID. Who knows. Bash.

Also, if you background LOTS of processes, the builtin will wait until they all return.

Speaking of having regrets – if you accidentally start a process in the wrong terminal, Nelson Elhage has a cool project called reptyr that can save your process and move it into a screen session or something.

When I write programs, usually I make mistakes. In most programming languages I use, when something goes horribly wrong the program will exit and tell me what went wrong.

In a bash script, you are usually running a lot of programs. Sometimes those programs will exit with a failure return code. By default, when a program fails, Bash will just keep running.

For example, in this script Python will fail (because the file I’m trying run doesn’t exist) and then it’ll happily continue and print “done”.

This is almost never what I want – if one of the programs in my script fails, I do not want it to just merrily keep going and do possibly undefined / questionable things! That is terrifying. will make the script stop and hopefully prevent any damage. Here’s the safer version of that

In most programming languages I use, I get an error if I try to use an unset variable. Not in Bash! By default, unset variables are just evaluated as if they were the empty string. The result of this is

will actually run if is unset. If you use bash will stop and fail if you try to use an unset variable.

will make bash print out every command it runs before running it. This is really useful for debugging.

You can see all the other bash options you can set with .

A lot of shell scripts I see people using in practice start with or . Safety!

You can also to exit if one part of a pipe fails.

Very recently I learned that there is a bash linter to help detect all these weird quirks and more!! It ‘ s called and you can install it with .

Also it has a website! https://www.shellcheck.net/. There is an example so can see the kind of errors it tells you about. It’s pretty awesome and I’m excited about trying it out.

Shellcheck knows about way way more bash scripting best practices than I do :). When looking at the examples I was like “wow, that makes sense but I would have never thought of that”.

There’s also a shell formatter called which seems useful: https://github.com/mvdan/sh.

I think those are all the basic bash quirks I know! I suppose it is possible to rant about how bash is a Terrible Programming Language that you shouldn’t be using and why don’t we have a shell programming language that is less confusing, but it doesn’t bother me too much.

I just try to not write very complicated bash scripts, stick to some of the best practices here, and don’t worry too much about it. And it’s kind of interesting to learn about the weird quirks, anyway!

If you liked this, people linked me to a bunch of other bash resources which I will share with you now

thanks to Mat, Marina, Kamal, Geoffrey, Panashe, @gnomon, and Iain for talking about Bash with me!|||

Bash scripting quirks & safety tips