A few days ago I showed you how to combine Nancy with Autofac and ASP.NET Core IoC. Today‚Äôs post will be related to the security and more precisely JWT authentication. Before moving further, I‚Äôd like to mention that below text is going to be the last Nancy-related one (at least for now). In a next couple weeks, we‚Äôll explore the world of graph databases with Neo4j and .NET Core, so I hope you‚Äôre as excited as I do üòâ

JWT stands for JSON Web Token. If you have never heard about this standard, I encourage you to visit this site and read the text. I‚Äôm not gonna do this since it‚Äôs not the point of this article. What I‚Äôd like to present (shortly) is the whole process of using JWT. The below diagram should help to understand it a little bit:

Simple is that. What happens when you log in to some web application is you get the JWT token which is then stored inside your browser (etc. local/session storage). The token contains all the data needed to properly authenticate the user, so it might be userId, userName, userEmail or whatever you need to identify and verify. Then when your client side needs some resources from the API it adds the Authorization header to the each request which looks as follows:

Having the necessary header, the backend can verify the token using implemented logic and decide whether resources should or should not be granted to the caller. If so, you‚Äôll get the response with a body containing needed data, if not you‚Äôll receive a response with 401 status code which means Unauthorized.

First one is going to help us a lot with encoding and decoding token with given algorithm and secret. The second package is an external module for Nancy to add authentication step in the pipeline.

Have all the packages restored? Great, let‚Äôs do some code! The first thing we need to do is to store the secret used for the encoding/decoding tokens. There are many ways to achieve that such as:

Having this part done, we should change a little bit Nancy‚Äôs bootstrapper by implementing the override for ApplicationStartup method:

As you see here we are adding the authentication step to Nancy‚Äôs pipelines by invoking static Enable method from the StatelessAuthentication class. The method signature looks as presented below:

Since the first parameter is self-explained we should concentrate more on the second one. If it‚Äôs not clear for you, we need to deliver a function which will take the NancyContext and return ClaimsPrincipal (this one represents our authenticated user). Now, we could write some lambda inside the bootstrapper but that would look ugly. That‚Äôs why I suggest creating independent service for this purpose. Mine called IdentityProvider looks as shown below:

The first thing you‚Äôve probably spotted is the constructor. Since we‚Äôll need to decode the JWT we need secret used for its encryption. The easiest way is obviously to use dependency injection since we‚Äôve already registered settings model. Moving to the GetUserIdentity method we can see the entire logic. As wrote before our function needs NancyContext as the parameter. Then the whole ‚Äûmagic‚Äù happens. The first step is to get the Authorization header from the request and pull out the token. Next, we need to decode it using secret and algorithm used for encoding. In this case, it‚Äôs HS256. After decoding we get the AuthModel with data need to create ClaimsPricipal. But before creation it‚Äôs a good practice to check whether to token expiration date didn‚Äôt pass. If so, we should not let him get the resources. Assuming that everything looks fine we are ready to create the ClaimsPrincipal. On of its constructor takes the IIdentity object as a parameter. Therefore we need to create a class that will implement that interface. And that‚Äôs where AuthUser comes into play:

Moving back to the IdentityProvider we create the new instance of the AuthUser and finally create the expected ClaimsPrincipal. Notice, that the entire code has been wrapped by the try-catch. So, if some failure would happen like decode would fail or there would be no Authorization header we return null. This is a sign for Nancy that user has not been authenticated and it should return the 401 response.

 Having this code done we can now come back to the bootstrapper to finish our work:

Now, the last question for today is: How do we mark the Module as protected (which means that we require a token to get the resources). The example below shows that:

It‚Äôs worth to mention that you can enable that for the entire Nancy module or just for the selected actions, so you have the flexibility in that case. If you want to see this implementation in action, I encourage you to visit gifty‚Äôs GitHub üòâ|||

