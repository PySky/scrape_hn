At this point the operator might crash a few times, because it takes some time for TPR to initialize. I could write code to wait for it.

The output should look something like where portion is dynamically generated. IMPORTANT: Do not edit the job once created or bad things might happen.

Check on the particular jobs progress

If the status is , then look at the list, fetch them somehow, if needed merge them into single file.

A few years ago I did a similar PoC, using etcd for locking/consensus, and uploading/downloading worker binaries from S3.

kubemr is similar, but we (ab)use Kubernetes Third Party Resources for state, docker images for workers, and optionally S3 for storing stage outputs. Currently it only supports Amazon S3, but should be trivial to support other S3-like services.

All state for a job is stored in a TPR. Originally we planned to use etcd for state, but we decided to use JSON patch functionality provided by kubernetes to make changes to this state. The operation allows the patch to fail if some condition is not met.

Above operation would fail if the already had a value. So multiple users might try to aquire the lock but only 1 would succeed.

Worker images are normal docker images that must have or defined. See wordcount example to see how the binary should be implemented.

At the base level, all map/reduce inputs/outputs and results are strings. Helper functions are provided to upload/download these from S3. Your worker code can interpret this as anything - database table/keys, some other storage provider, shared filesystem, etc...

The operator registers a TPR called and deploys a kubernetes Job with the worker image specified. Once a Job is deployed, the workers manage the state. It should be safe to run multiple replicas of the operator.

All resources for a MapReduceJob is created in the namespace the MapReduceJob is created in.

I was thinking of making this an endpoint to read results from, but since the result can be arbitrary string, I am not sure how to handle this.|||

kubemr - Kubernetes native MapReduce framework