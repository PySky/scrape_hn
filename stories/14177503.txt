Just-in-time or JIT compilation is compilation done by dynamically generating executable code. It’s a common technique used in many language runtimes to generate optimized code for hot code paths as well ahead of time compilation for various tasks.

So let’s build a small LLVM-like intermediate language and JIT execution engine in Haskell. This will only function with modern Linux and x86-64 architecture, although in principle this will work on any platform if you can make the appropriate FFI calls to and syscalls on your respective platform.

Source code is available here.

The x86-x64 instruction set is the 64-bit revision of x86 instruction set which was first developed for the Intel 8086 CPU family. The base types which hardware operates over are integers and floating point types. Let us just consider the integral types for now, these come in four major varieties:

On the Intel architecture numbers are represented little endian meaning lower significant bytes are stored in lower memory addresses. The whole memory representation for a value is partitioned into high bits and low bits. For example the hexadecimal number as a DWORD is stored in memory as:

In Haskell unboxed integral machine types are provided by the module.

Pointers are simply literal addresses to main memory, where the underlying access and storage are managed by the Linux kernel. To model this abstractly in Haskell we’ll create a datatype containing the possible values we can operate over.

To convert from Haskell types into byte sequences we’ll use the binary library to convert integral types into little endian arrays of bytes.

For example given a hexadecimal literal this will expand it out into an array of it’s bit components.

The x64 architecture contains sixteen general purpose 64-bit registers capable of storing a quadword. They major ones are labeled and .

Each of the registers is given a specific index ( ), which will be used in the binary representation of specific instructions that operate over these registers.

Each of these registers can be addressed as a smaller register containing a subset of the lower bits. The 32-bit register of is . These are shown in the table below.

These smaller registers are given specific names with modified prefixes.

In Haskell we model this a sum type for each of the 64-bit registers. Consider just the 64-bit registers for now.

The index for each register is defined by a simple pattern match case expression.

Monads are an algebraic structure with two functions ( ) and ( ) and three laws.

The compiler will desugar do-blocks of the form into a canonical form involving generic bind and return statements.

Monad is implemented as a typeclass indexed by a parameter , that when instantiated with a typeclass instances replaces the bind and return functions with a specific implementation of the two functions (like State or Reader).

The State monad is an instance of Monad with several functions for composing stateful logic.

For example a little state machine that holds a single Int value would be written like the following.

More common would be to have the state variable be a record with multiple fields that can be modified. For managing our JIT memory we’ll create a struct with the several fields.

This will be composed into our X86 monad which will hold the JIT memory as we assemble individual machine instructions and the pointer and memory offsets for the sequence of assembled instructions.

To start creating the JIT we first need to create a block of memory with executable permissions. Inside of C runtime we can get the flags needed to be passed to the various syscall to create the necessary memory block.

Then we simply allocate a given block of memory off the Haskell heap via mmap with the executable flags.

Haskell pointers can be passed to our JIT’d code by simply casting them into their respective addresses on the Haskell heap.

For example if we want allocate a null-terminated character array and pass a pointer to it’s memory to our JIT’d code we can write down a to synthesize this memory from a Haskell string and grab the heap pointer.

For C functions we simply use the dynamic linker to grab the function pointer the given symbol in the memory space of the process. The Haskell runtime links against glibc’s and so these symbols will all be floating around in memory.

When we’ve compiled our byte vector of machine code we’ll copy into executable memory.

Then we’ll use the FFI to synthesize a function pointer to the memory and invoke it.

Before we start manually populating our executable code with instructions, let’s look at assembly form of what we’ll write and create a small little DSL in Haskell make this process closer to the problem domain. Assembly is the intermediate human readable representation of machine code. Both clang and gcc are capable of dumping out this representation before compilation. For example for the following C program takes two integers passed in registers, multiplies them respectively and adds the result.

Internally the C compiler is condensing the Destructuring the expressions into a linear sequence instructions storing the intermediate results in scratch registers and writing the end computed result to return register. It then selects appropriate machine instruction for each of the abstract operations.

We can output the assembly to a file . We’ll use the Intel Syntax which puts the destination operand before other operands. The alternate AT&T syntax reverses this convention.

The generated code will resemble the following. Notice that there are two kinds of statements: directives and instructions. Directive are prefixed with a period while instructions are an operation together with a list operands. Statements of instructions are grouped into labeled blocks are suffixed with a colon for example is the label containing the logic for the function .

The assembler will then turn this sequence of instructions into either an executable or an object file containing the generated machine code. To disassemble the output we can use objdump to view the hex sequence of machine instructions and the offsets within the file.

The compiled program in memory is then a contiguous array of bytes, which is evaluated by moving the instruction pointer at the start address.

Instructions consist of two parts, an opcode and a set of operands which specify labels, registers, or addresses to memory which the CPU will execute over for the give instruction. We’ll consider a subset of interesting operations which operate over integers and manipulate the call stack.

To add to the JIT memory we’ll simply modify the state by appending an instruction to the field and adjusting the memory offset pointer by the length of instructions added.

Registers are identified as lowercase (i.e. , ). In our expression builder we’ll simply write down several functions which construct a register value type from an underlying Reg value.

Immediate operands are direct references to constants (literals or memory addresses) or labels. For example:

For immediate values we simply push the array of bytes for the number directly on the byte sequence.

The full instruction set for x86 is vast and including AVX, SSE and other specialized intrinsics there is an extraordinary amount of complexity and quirky specifications. Each of these abstract instructions can have multiple opcodes for each type of operands it may take. For example the instruction for register to register movement has opcode while moving immediate data into a register has opcode .

The reference for the most common operations the x86asm.net site has a very useful quick reference. For the full set of possible instructions on your modern Intel processor refer to the 1500 page Intel Software Developer’s Manual.

To lookup the numerical opcodes for a given instructions, we use a specific naming conventions for the operands.

So for example:

For opcodes that operate over a set of possible operands, these are demarcated with a slash, in the form .

For our limited set of instructions there are two types of opcodes.

On top of this opcodes may have an additional prefixes which modify the sizes of arguments involved. These were added to allow 32-bit compatibility in the transition between 32-bit and 64-bit systems and preserve the underlying opcodes of the 32-bit system. For instance the following instructions all operate over registers and perform the same action but over different sizes.

But translate into different opcodes depending on size.

Ok, let’s look at the full structure of an instruction. It consists of several parts.

The sizes of these parts depend on the size and type of the opcode as well as prefix modifiers.

The header fixes the first four bits to be constant while the next four bits indicate the pretense of W/R/X/B extensions.

The W bit modifies the operation width. The R, X and B fields extend the register encodings.

The Mod-Reg-R/M byte determines the instruction’s operands and the addressing modes. These are several variants of addressing modes.

In the case of mod = 00, 01 or 10

For example given the following instruction that uses register direct mode and specifies the register operand in r/m.

Scale is the factor by which index is multipled before being added to base to specify the address of the operand. Scale can have value of 1, 2, 4, or 8. If scale is not specified, the default value is 1.

Both the index and base refer to register in the usual index scheme.

Moving forward we’ll create several functions mapping to X86 monadic operators which assemble instructions in the state monad. Let’s do some simple arithmetic logic first.

Each of these functions takes in some set of operands given by the algebraic datatype and pattern matches on the values to figure out which x86 opcode to use and how to render the values to bytes.

The simplest cases is simply the return function which takes no operands and is a 1-bit opcode.

Add for immediate values extends the operand with a REX.W flag to handle 64-bit immediate data.

Register to register add uses the REX.W flag in the same manor but passes the source register in the ModRM.reg field using register direct mode. We do bitwise over the mode and then shift 3 bits to specify the register in register index in the bits.

Same logic applies for the mov instruction for both the register-to-register and immediate data cases.

The inc and dec functions are slightly different in that they share the same opcode but modify the ModRM bit to specify the operation.

Putting everything together we’ll JIT our function and call it from Haskell.

And running it we get the result.

Now let’s write some logic that uses control flow and jumps between labeled blocks of instructions. Consider the factorial function that takes the value to compute in the register and computes the result my repeatedly multiply the until reaching one. To do this we create a block and use the instruction.

Let’s look at the machine code for this assembly. Notice that the loop instruction takes a relative address in memory (i.e. go back 4 instructions) as it’s operand.

So let’s create a label function which simply reaches into the monad and grabs the current pointer location in the JIT memory that we’re at.

When given an memory address, the instruction then simply emits the instruction simply emits the opcode and calculates the delta of the source and destination and the emits it’s value as the immediate data for the instruction.

Now we’ll create the symbolic representation of this factorial assembly our in Haskell DSL and parameterize it by a Haskell integer to compute.

Putting everything together we’ll JIT our function and call it from Haskell.

And running it we get the result.

Final task is to be able to call out of the JIT into either Haskell runtime or a given C function pointer. To do this we need to look at the calling convention for moving in out of other logic and setting up the registers so we can hand them off to another subroutine and restore then when we jump back. In the 64 bit System V ABI calling convention, the first 5 arguments get passed in registers in order , , , , and . Subsequent arguments get passed on the stack.

For our call function we simply compute the delta of our given position and the address of the function we want to jump into.

Before and after we call the function we are responsible for handling it’s arguments and the push and popping the stack frame on entry and exit. On entry we call the function prologue and on exit we call the epilogue, in between lies the function logic.

So for example let’s call out to the libc function passing a string pointer to it from inside our JIT. To do this we use to grab the symbol reference and then pass it as an address to the instruction after pushing the string pointer on the argument stack.

Putting everything together we invoke it by grabbing the address and passing a pointer to Haskell string using our function.

Running it we get our friendly greeting by reaching outside the JIT.|||

{{description}}