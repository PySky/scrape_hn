In one of my current projects, I needed to be able to broadcast email announcements to all of the users in the system.

Here's what my looks like:

If you've read about enough patterns and principles, there's a decent chance you saw this line:

...and immediately thought to yourself:

I used to think that too, but over the last few years I've started to think differently.

An is just some words shouted into a crowd or printed in the newspaper. Words can't print themselves, that doesn't make any sense!

No, to broadcast an announcement you need something that actually can do the broadcasting, like an , , or maybe even an :

Does this sort of class look familiar? You may have also seen this class by its other known alias, the .

The fundamental misunderstanding here is thinking that methods are things an object can do.

If you believe that the methods on an object represent the abilities of that object, then of course an having a method sounds silly.

But what if methods weren't the things an object could do? What if they were the things you could do with that object?

If methods were the actions an object afforded us, then it would make perfect sense to be able to an , wouldn't it?

Ever used the method on the class before?

I bet you've never thought to yourself:

...because of course it's not "formatting itself."

By having a method, the class is telling us:

Just like a window can be opened, a car can be refueled, or an announcement can be broadcast.

If you take our from before and try to apply the same line of thinking to formatting dates, you might end up with something like this:

Imagine the consequences of this if you ever needed to format a date in a template?

Say we wanted to display a blog post with a formatted date.

Since has its own dependencies, we'd need to inject a pre-built instance into our controller:

Then we'd need to pass that through to our template to format our field:

Finally we could use the to format the field in our template:

All that because "a date shouldn't format itself," right?

objects are just simple self-contained value objects, right?

Being able to do is much more "dangerous" than , because it clearly depends on some globally available queue service or mail service.

Well, it turns out the class has global dependencies too!

Each object needs to know about the timezone database to know which timezones are available, and how to convert between them.

What if I wanted one instance to use one timezone database, and another instance to use a different timezone database?

I can't really do that, but does anyone really worry about it? Of course not!

It's not a practical enough concern to warrant completely throwing away the convenience of being able to convert between timezones without a complex dependency graph.

So why do we apply that level of paranoia to something like ?

Yes, has an implicit dependency on whatever queue service has been configured for the environment:

But why is our default reaction to automatically think this is "wrong"?

Why do we immediately jump to an even if this implicit dependency has no practical consequences in our application?

In this example, the job dispatcher is resolved out of Laravel's Service Container, so it's trivial to use a different implementation per environment, or when running our tests:

This is already a lot more flexibility than we have with the timezone database.

It's not until configuring the dispatcher at the application level becomes insufficient that this design actually introduces any challenges.

Even then, it's simpler and more flexible to accept a dispatcher as a parameter than it is to create an :

This lets you preserve the mental model that methods are things you can do with an object, and still lets you use a different dispatcher every time you call .

I'll admit, you can't always attach the behaviors that operate on an object to that object itself.

But more and more, I'm convinced it's worth striving for before turning what should be a method into an entirely new class.

Create an as a last resort, not by default.|||

