This document is intended to be used by Perl 5 programmers who are new to Perl 6 and just want a quick overview of the main differences. More detail on everything can be found in the language reference, which have been linked to throughout. In certain cases, you can also just use Perl 5 code in Perl 6 and compiler may say what's wrong. Note that it cannot recognize every difference, as sometimes old syntax actually means something else in Perl 6.

This list is currently known to be incomplete.

Where you used to say:

You would now say:

Or even use the operator, which replaces :

Note that the sigil for fetching a single element has changed from to ; perhaps a better way to think of it is that the sigil of a variable is now a part of its name, so it never changes in subscripting. This also applies to hashes.

For details, see "Names and Variables" in S02.

The curly-bracket forms still work, but curly-brackets are more distinctly block-related now, so in fact what you've got there is a block that returns the value "February". The and forms are in fact just quoting mechanisms being used as subscripts (see below).

Yes, a twigil. It's the second character in the variable name. For globals, it's a .

For details, see "Names and Variables" in S02.

The command-line arguments are now in , not . Note the twigil because is a global.

Number of elements in an array:

Index of last element in an array:

Therefore, last element in an array:

For details, see "Built-In Data Types" in S02

See "double-underscore forms are going away" in S02 for details. The twigil refers to data that is known at compile time.

There are still three main contexts, void, item (formerly scalar) and list. Aditionally there are more specialized contexts, and operators that force that context.

Apostrophes and dashes are allowed as part of identifiers, as long as the next character is alphabetic. In other words, any two valid identifiers may be joined with a single or character to form a longer identifier.

A comprehensive list of operator changes is documented at "Changes to Perl 5 operators" in S03 and "New operators" in S03.

Quoting operators now have modifiers that can be used with them (much like regexes and substitutions in Perl 5), and you can even define your own quoting operators. See S03 for details.

Note that as a subscript is now a sub call, so instead of you would write or (if you don't like plain ), that is).

String concatenation is now done with .

Regex match is done with the smart match operator , the perl 5 match operator is gone.

and as infix operators now construct junctions. The binary AND and binary OR operators are split into string and numeric operators, that is is binary string AND, is binary numeric AND, is binary string OR etc.

The bitwise operators are now prefixed with a +, ~ or ? depending if the data type is a number, string or boolean.

The assignment operators have been changed in a similar vein:

Parenthesis don't construct lists, they merely group. Lists are constructed with the comma operator. It has tighter precedence than the list assignment operator, which allows you to write lists on the right hand side without parens:

The arrow operator for dereferencing is gone. Since everything is an object, and derferencing parenthesis are just method calls with syntactic sugar, you can directly use the appropriate pair of parentheses for either indexing or method calls:

See S04 for the full specification of blocks and statements in Perl6.

Likewise for , , etc. If you insist on using parens, make sure there's a space after the , otherwise it's a sub call.

Using on a block is now replaced with .

CATCH provides more flexiblity in handling errors. See "Exception_handlers" in S04 for details.

Also, the way of assigning to something other than has changed:

This can be extended to take more than one element at a time:

See "The for statement" in S04 and "each" in S29 for details.

can also be used for infinite loops:

The modifier is there because the standard Perl6 syntax is rather different, and 'P5' notes a Perl5 compatibility syntax. For a substitution:

Notice that starts at now, and is gone in favor of the embedded closure notation.

Anonymous regexpes are now default, unless used in boolean context.

Also, if you still want to mark regexp as anonymous, the operator is now called (Mnemonic: regex) or .

For the full specification, see S05. See also:

The related Apocalypse, which justifies the changes:

And the related Exegesis, which explains it more detail:

Formats will be handled by external libraries.

Perl 6 has an object system built into the language, with key words for classes, roles, methods and attributes. Public attributes have the twigil, private ones the twigil.

Most built-in functions are now methods of built-in classes such as , , etc.

You can still say if you prefer the non-OO idiom.

Since both builtin functions and operators are multi subs and methods, changing their behaviour for particular types is as simple as adding the appropriate multi subs and methods. If you want these to be globally available, well, you can't, because everything is lexically scoped in Perl 6. You can, however, export multi definitions to any code that wishes to import it.

If you want to offer a type cast to a particular type, just provide a method with the same name as the type you want to cast to.

If you want to write a class whose objects can be assigned to a variable with the sigil, you have to implement the roles. Likewise, for the sigil you need to do the role. The sigil implies .

The roles provides the operators (Positional; for array indexing), (Associative) and (Callable). They are technically just functions with a fancy syntax. You can override these to provide the desired semantics.

See S13 for all the gory details.

For details, see "Changes to Perl 5 operators"/"The filetest operators now return a result that is both a boolean" in S03

A number of builtins have been removed. For details, see:

objects fill the ecological niche of references in Perl 6. You can think of them as "fat" references, that is, references that can capture not only the current identity of a single object, but also the relative identities of several related objects. Conversely, you can think of Perl 5 references as a degenerate form of when you want to refer only to a single item.

To pass an argument to modify by reference:

The "obsolete" reference above has the details. Also, look for Capture under "Names_and_Variables" in S02, or at the Capture FAQ, Perl6::FAQ::Capture.

This is a version of that auto-appends a newline:

Since you want to do that so often anyway, it seemed like a handy thing to make part of the language. This change was backported to Perl 5, so you can use after you will or better.

is gone. In Perl 6, context flows outwards, which means that a routine does not know which context it is executed in.

Instead you should return objects that do the right thing in every context.|||

