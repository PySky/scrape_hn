In order to take full advantage of Kotlin, we have to revisit some best practices we got used to in Java. Many of them can be replaced with better alternatives that are provided by Kotlin. Let’s see how we can write idiomatic Kotlin code and do things the Kotlin way.

A word of warning: The following list is not exhaustive and does only express my humble opinion. Moreover, some Kotlin features should be used with sound judgment. If overused, they can make our code even harder to read. For instance, when you create a “train wreck” by trying to squeeze everything into a single unreadable expression.

In Java, we have to write quite some boilerplate code to implemented certain idioms and patterns. Fortunately, many patterns are built-in right into Kotlin’s language or its standard library.

Among other advantages, functional programming allows us to reduce side-effects, which in turn makes our code…

In contrast to Java 8, Kotlin has way better support for functional programming:

These features allow writing functional code in a safe, concise and expressive way. Consequently, we can create pure functions (functions without side-effects) more easily.

Rule of thumb: Every time you write an consider if it can be replaced with a more concise expression.

is also a useful expression:

In Java, we often create static util methods in util classes. A direct translation of this pattern to Kotlin would look like this:

Kotlin allows removing the unnecessary wrapping util class and use top-level functions instead. Often, we can additionally leverage extension functions, which increases readability. This way, our code feels more like “telling a story”.

Back in Java, fluent setters (also called “Wither”) where used to simulate named and default arguments and to make huge parameter lists more readable and less error-prone:

In Kotlin, named and default arguments fulfil the same propose but are built directly into the language:

The extension function helps to group and centralize initialization code for an object. Besides, we don’t have to repeat the variable name over and over again.

is often useful when dealing with Java libraries in Kotlin.

Don’t overload methods and constructors to realize default arguments (so called “method chaining” or “constructor chaining”).

That is a crutch. For this propose, Kotlin has named arguments:

In fact, default arguments remove nearly all use cases for method and constructor overloading in general, because overloading is mainly used to create default arguments.

The Java way of dealing with nullability is cumbersome and easy to forget.

Every time you write an check, hold on. Kotlin provides much better ways to handle nulls. Often, you can use a null-safe call or the elvis operator instead.

The same is true for -check.

Using and we can check the type, (smart-)cast it and throw an exception if the type is not the expected one. All in one expression!

Sometimes, using can be a concise alternative for . But you have to use it with sound judgment in order to avoid unreadable “train wrecks”. Nevertheless, I really want you to consider using .

With , there is no need for an extra variable. So we get along with one expression.

With data classes, writing immutable value objects is so easy. Even for value objects containing only a single property. So there is no excuse for not using value objects anymore!

With single expression functions and named arguments we can write easy, concise and readable mappings between objects.

If you prefer extension functions, you can use them here to make both the function definition and the usage even shorter and more readable. At the same time, we don’t pollute our value object with the mapping logic.

Think twice before you define a constructor body ( block) only to initialize properties.

Note that we can refer to the primary constructor parameters in property initializers (and not only in the block). can help to group initialization code and get along with a single expression.

Kotlin’s comes in handy when we need to implement a framework interface that doesn’t have any state. For instance, Vaadin 8’s interface.

For further information about the synergies between Kotlin, Spring Boot and Vaadin, check out this blog post.

On the one hand, destructuring is useful for returning multiple values from a function. We can either define an own data class (which is the preferred way) or use (which is less expressive, because doesn’t contain semantics).

On the other hand, destructuring can be used to concisely iterate over a map:

, and the infix function can be used to create structs (like JSON) quite concisely. Well, it’s still not as compact as in Python or JavaScript, but way better than in Java.

But usually, we should use data classes and object mapping to create JSON. But sometimes (e.g. in tests) this is very useful.

You can find the source code in my GitHub project idiomatic kotlin.|||

This post shows how we can replace Java's best practices with idiomatic Kotlin code.