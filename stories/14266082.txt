Java 8 adds some interesting new features to Interfaces. In particular, Java 8 Interfaces can have default methods and static methods. Using these new features combined with Java 8 lambdas makes it possible to create Interfaces that are highly Functional.

In this example, we’ll model a Path that is made up of PathParts. The interesting thing is that this is all accomplished with Interfaces. There are no concrete classes (other than a class to test the results).

PathPart is a standard Java Interface with the addition of a static method of that produces a lambda that implements the Interface. Calling PathPart.of(“foo”) produces a lambda that implements PathPart.

Given PathPart, we can now model Path:

Here, we use a default method to have our Interface do work that would’ve required a concrete class prior to Java 8. In this case, it appends a child PathPart to the Path’s parts. The interesting thing is that there are no fields anywhere. The path part lists are contained in the lambdas produced by the Interface.

We also use a static field in the Interface (added in Java 7) to define the root Path.

We can now exercise these Interfaces:|||

