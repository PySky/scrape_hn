This article explains in short how we found, exploited and reported a remote code execution (RCE) vulnerability. It is meant to be a guide to finding vulnerabilities, as well as reporting them in a responsible manner.

While playing around with a wrapper of the math.js API ( ), we discovered that it appears to evaluate JavaScript, though with some restrictions:

In particular, it seems that was replaced with a safe version. and / didn't work, either:

There are four standard ways to evaluate strings in JavaScript:

In the math.js environment, these cannot be accessed directly, either because they aren't defined or because they have been redefined with safe functions. However, they can be accessed indirectly: notably, can be accessed indirectly as the constructor of an existing function - this was the key intuition that led to discovering the vulnerability.

We know that in the math.js environment is defined as a function, so we used that:

From here we could have simply -d some native modules and gained access to the OS, right? Not so fast: although the math.js API server runs in a Node.js environment, for whatever reason we couldn't use .

However, we could use , which has a few nifty features:

Though contains some bits of juicy info, it can't really do anything interesting: we need to go deeper and use , which exposes Javascript bindings to the OS. Though they are not officially documented and are meant for internal usage, one can reconstruct their behaviour from reading through the Node.js source code. For example, we can use to read arbitrary files on the OS (with the appropriate permissions):

We're almost done: now we need to figure out a way to open a shell and run arbitrary commands. If you have experience with Node.js, you may know about , which can be used to spawn processes with : we just need to replicate this feature using OS bindings (remember that we can't use ).

This is easier than it seems: you can just take the source code for , remove the code you don't need (unused functions and error handling), minify it, and run it through the API.

From here, we can spawn arbitrary processes and run shell commands:

Now that we found a vulnerability and exploited it to the largest extent possible, we had to decide what to do with it. Since we exploited it for fun and have no malicious intents, we took the "white hat" road and reported it to the maintainer. We contacted him privately through the e-mail address listed on his GitHub profile with the following details:

Over a course of two days, we worked with the author to help fix the vulnerability. Notably, after he pushed a fix in we found a similar workaround (if you can't use the constructor directly, use ) which was fixed in .|||

