This question gets asked again and again, by beginners and experienced designers alike.

at reddit some time ago, I liked the answer from user fft32 , so with his permission, I reproduce it here with some minor changes and additions. WhenÂ I saw it posted on the FPGA group at reddit

At the end of the day, the two languages are really able to achieve the same designs. I think it's good to understand code in both languages, but since mixed language support is common, I don't see an issue sticking with the one that you prefer.

To the comments from fft32, I would add that in my opinion, Verilog with its plain syntax is easier to learn and grasp for the beginner.

Well, none of the two, at least as these words are written. In the long run, as you advance in your HDL designer career, you will be probably using both, although also probably using one of them most of the time.

If you are wondering which one you should start with, take the one that you feel more comfortable with. Or, ask colleagues and teachers which one is most needed in the market niche you want to be part of. The important thing is to grasp the structures behind the language, and not the language itself.

To be honest, it seems that both fft32 and me mostly used VHDL, so this comparison could be a little biased. But, after all, both languages are Hardware Description Languages. So what really matters are the flip-flops and gates that give life to your design, and not so much how in what language you describe them.|||

