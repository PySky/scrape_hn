[Warning: This is a very long post. You might consider skipping the entire “Learning you for great good!” section, jumping directly to the “Well, what’s a Monad?” section]

My functional journey started with Javascript techniques, grew as I briefly explored a few functional languages, then bloomed as I got comfortable with Elixir. Going further has finally defined some long-nebulous terms and shown me the power of both algebraic data types and compiler assurance that a given function is truly pure.

Before you think anything else, let me first say that I still think Elixir is great. The concurrency primitives it inherits from Erlang/OTP are top-notch, and its own innovations like easy macro use via / are truly powerful. For example: Absinthe, a GraphQL library for Elixir, uses macros for compile-time validation that your schema is sound. I’ve written a good bit of Elixir code now, including custom Ecto and Absinthe data types.

But I am always trying to improve. And in my internet wanderings I encountered this excellent video about OCaml. A couple key points stuck out for me:

These points spoke directly to my real-world experiences. I wanted these features.

I was excited to try Dialyzer, having had a great experience with gradual typing in JavaScript via Flow. Flow’s disjoint unions give you something close to the expressive power of a language like OCaml. And so, I expected Dialyzer to give me a similar level of power. I slowly added type annotations to my entire project, pushed forward by Credo, a linter for Elixir.

The first surprise was that Dialyzer doesn’t work on files. And Mix understands only files in your directory when you run . So, no gradual typing for your tests. At least, not without jumping through some hoops.

Second, errors I expected did not materialize. This Elixir code has a few problems:

There are three errors I would like Dialyzer to catch for me here:

At least those statements are still useful documentation.

So I guess I’m looking for static typing. What language has that but also universal immutability and a functional design like Elixir?

Isn’t it pretty obscure? Like, not really used by anyone in production? And people who do use it have no problem injecting terms like ‘monad’ into everyday conversation. But I did hear that it is always immutable, like Elixir. And that it will draw nice lines around all of your I/O too.

First, it should be noted that it’s named after Haskell Curry, and currying is a pretty important concept in functional programming. They really reached for the stars in naming this thing! That level of gravity fits, because the language was designed by a working group that evolved out of a 1987 conference called “Functional Programming Languages and Computer Architecture.” In the words of one of the committee members:

An interesting outcome of #1 is that it is considered to be very academic. And because of #3 there are quite a few compilers available.

The good news is that at this point haskell.org is pretty clear about where you should start:

Okay, now what?

I had come across the “Learn You a Haskell for Great Good!” tutorial a couple times before, but never had the motivation to power through it. This time I was on a mission. Here are my notes - things I thought were surprising or particularly important as I went through each section.

From the introduction all the way to 7. Modules:

From 8. Types and Typeclasses to a bit of 9. I/O:

From a bit more 9. I/O to 11. Functors and Monoids:

We’re finally talkin’ 12. Monads! Today is also when we complete the tutorial.

Can be rewritten as this. We could even take that last line and turn it into a to make it simpler…

I now understand this difficulty. I understand why all the previous articles about Monads I’ve read were pretty much incomprehensible. The truth is that if you want to understand Monads as they really are, and not in metaphor, you need to start from a couple basic building blocks.

The functional concept of mapping an operation over the contents of something is now quite widely known thanks to libraries like Lodash. Lodash has the ability to map over JavaScript objects and arrays. A is anything that can be mapped over with . is the simplest form of this, replacing all values inside the with a single value:

is a which is more composable. We can create a new from a value with the function, for example. And we can apply functions that don’t know anything about the to the values inside:

Drumroll please. A is an which implements two new functions. is exactly like , assembling a from a raw value. is a new operator which takes a , extracts the value from it and gives it to the provided function, which is then responsible for returning a new . Take a look at these chained calls using lambda functions:

Notice how eliminates the need to specify the exact we want. This then allows us to change the meaning of the expression with a type hint. This expression works for any whose contents are compatible with and can be initialized with .

Now you’re probably wondering what the big deal is. Sure, it’s a collection of traits. And that thing is a , whatever. But there are a whole lot of others: , , , and so on. You can see the available set by typing into (more are added to this list as you import new modules). Explore these and get a feel for the ideas they encapsulate. Most aren’t as neatly described as , a container for another value (or ). Some are a whole lot more abstract. For example: encapsulating a future state ( ), or side effects ( ).

This wide applicability one of the reasons people have such a hard time explaining the concept. But at least now all those claims that JavaScript Promises are Monads make a bit more sense!

You’ll see this everywhere as you explore Haskell, so it’s worth covering. It only seems scary because the term is pretty scary. Two behaviors are specified: the ability to create an empty , and the ability to combine two different s into one final :

Haskell is incredibly powerful, and incredibly complex. I see now why it has the reputation it does. There’s a huge barrier to entry, and it really is vastly different from the set of languages primarily taught and used today. What might pull someone into this world? You can’t get a job doing it if you don’t know it yet!

I’m not really comfortable with it, but I do plan to practice. I’m drawn to the value provided by its type system and the restrictions around I/O, but I’ve also heard about its unpredictability regarding performance. I’m especially looking forward to exploring its concurrency capabilities. We’ll see!

I feel like I’m at a good stopping point in my functional programming journey. At least for now… who knows, maybe Idris is in my future!|||

