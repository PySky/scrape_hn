A more interesting way to find nth Fibonacci number.

Fibonacci sequence is a prime example in teaching recursion to newcomers, and a great opportunity to brag if your language supports Tail Call Optimization, but it often goes unnoticed that there is a closed-form expression which lets us find the nth Fibonacci number with great ease and in much faster way. This article will present the expression, and explain -step by step- its derivation using high-school mathematics.

Here is the expression (for \(u_1 = u_2 = 1\)):

 $$

 u_n = \frac{1}{\sqrt5}\left(\left(\frac{1+\sqrt5}{2}\right)^n – \left(\frac{1-\sqrt5}{2}\right)^n\right)

 $$

Let \(u_n = c \times k^n\) for some constants \(c\) and \(k\). Now substitute this into the recurrence relationship:

$$\begin{align}

 u_{n+2} &= u_{n+1} + u_n \\

 c \times k^{n+2} &= c \times k^{n+1} + c \times k^n

 \end{align}$$

Let’s simplify the expression by eliminating \(c\) and \(k^n\):

$$\begin{align}

 c \times k^{n+2} &= c \times k^{n+1} + c \times k^n \\

 c \times k^{n+2} &= c \times \left( k^{n+1} + k^n \right) \\

 k^{n+2} &= k^{n+1} + k^n \\

 k^2 &= k + 1

 \end{align}$$

Using quadratic formula to solve \(k^2 – k – 1 = 0\), we would find:

Hence it seems there are two possible solutions:

Let’s try to find \(c\) by using the predefined values \(u_1 = u_2 = 1\), starting with the first possible solution:

It’s clear that two sets of equations are inconsistent, that is, there is no value of \(c\) that can satisfy both equations. It would be also true for the second possible solution we found (though omitted to keep the article concise).

Another thing we can try is to use both solutions we found by substituting them into the recurrence relation itself:

Now if we try again for \(u_1 = u_2 = 1\):

Solving two equations simultaneously, we would find \(c_1 = \frac{1}{\sqrt 5}\) and \(c_2 = – \frac{1}{\sqrt 5}\). Hence, our closed-form expression is:

I used Python 3.6.1 x64 on Windows 10 x64 to perform the following benchmarks using the code below:

The closed-form version hold accurate for \(n < 72\) and is off-by-one when \(n = 72\). This is clearly because of the computational limits in handling floating-point numbers. 72 is not a magic number either, but 72nd Fibonacci number is equal to 498,454,011,879,264 which contains 15 significant digits, and all the constants in have 16 significant digits, hence some loss in accuracy is expected considering that the last digits of those constants are rounded off. For instance in Python \(\sqrt 2\) will give you 1.4142135623730951 while it is actually 1.4142135623730950488….

Lastly, here is the time vs \(n\) graph. (Due to the plotting plugin, time spent for closed-form for any \(n\) seems to be zero, as it is always less than 0.0001; sorry.)



As Michael Abrash said, “The Best Optimizer Is between Your Ears”. =)|||

