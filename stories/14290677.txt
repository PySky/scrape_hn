In my previous article, ngrx/store reuse reducer logic, i wrote about reusing reducer logic in your angular application. In this article we’re going one step further by adding async calls to an api. We do this by using the ngrx/effects library. I assume you already have some working knowledge about effects. If you don’t know what effects are, i recommend you to read this article.

In my previous article we did setup a reusable store for several pages that each display a list of users. On these pages we were able to select and sort users. If we assume that each action (e.g select, sort or fetch) requires an api call, we need three effects that get the data from the api and then dispatch a action with the new data. This data is then used to setup our new state.

Before we set up our actions i’d like to define a function that ensures that each action is unique. This prevents any double actions being dispatched in the future:

Then it’s time to define our actions. Lets first setup all actions for the administrator role:

Then we define the actions for our editor role:

For both roles we first define all possible , then we create a class that implements the action for each of them and at last we export each individual class. You might have noticed that we’re defining actions. The actions will be dispatched as a result of our API requests. Every request is initiated using a action. More about this when we set up our effects.

if you haven’t read about this reusable reducer pattern before, i recommend you to read my previous article.

In our reducer we define only the actions that are returning a new state. In this case that means we only need tot define the actions. The action is an exception to this rule as i think it’s also good practice to store the current sort state. Now that we have setup our actions and the reducer, let’s setup our API calls.

Since we’re dealing with async requests here, let’s define our api calls now. In order to make this reusable effect pattern work it’s important to name your calls as . For example would be the name of a function that fetches Administrators. The different API calls can possibly look like this:

Each function returns an observable with the response in JSON. We will call these functions from our effects.

We need an effect for each action that requires an API call. In this case that means we need an effect for , and  . Let’s first set them up for the administrator. Those effects can possibly look like this:

For each Effect we list to the action using  , then we the payload of the dispatched action using . After that we use the operator to get the payload and pass that as a paramater to the API functions. If API call returns a value, we dispatch a action with that value. If the API call does not return a value, we dispatch a action with an empty array. If something went wrong while doing the request, there is a catch which also dispatches an empty action.

Nothing really fancy so far. But right now we need to do the same for our editor role. It’s not really DRY to copy all the effect functions and replace the names with the names. Here comes the trick: we can wrap the effects into functions that return the inner effect logic. This can possibly look like this:

We first require the actions per role and store them in a property. Then we create the functions that have the effect logic. In these functions we populate all the actions and role variables that have been passed along. At last we setup the actual effects by only calling the defined functions and passing along the actions and the role. The name of the role has to correspond with how you named your API call functions. We named the functions as  , if you wan’t to change that. No problem! Just remember to change the function call in your effect logic as well.

Using this pattern we can reuse effect logic for all effects that essentially do the same, but for different entities. This pattern ensures your code stays DRY and thus more maintainable.|||

In my previous article, ngrx/store reuse reducer logic, i wrote about reusing reducer logic in your angular application. In this article we’re going one step further by adding async calls to an api…