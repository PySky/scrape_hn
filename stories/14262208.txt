If you’ve been following our stories closely, you would know that we had planned to implement the following three features for our little Rust web server.

With static file serving completed, implementing the CGI (Common Gateway Interface) Protocol was next on our plate.

For those who do not know what CGI is, it’s an age-old protocol for serving dynamic content on the web. Think Apache executing a PHP or a Ruby script and talking back to clients with dynamic responses. CGI is the intermediary protocol between the web server and the application scripts (cgi scripts) aimed at enabling anyone to write dynamic scripts to work with any web server (that implements the protocol).

Why we’d want to implement the CGI protocol at this time since it’s a pretty old standard?

The answer is simple, Every major web server has implemented it :D

With that solid rationale, we plunged in.

The CGI protocol is specified in great detail by the IETF RFC 3875. This was the first time we had read an entire RFC and to be fair it was not that long. The precision used and the way they don’t let any sentence or jargon remain unexplained is quite fascinating.

Specifically the use of BNF (Backus-Naur Form) to describe the protocol.

that’s how they specify the structure of a certain ‘meta variable’ (we’ll discuss about meta variables a little later in this blog).

After reading the CGI spec, we arrived at a solid understanding of the protocol including details like —

and much more.

We realised that we would not be able to match the specification word by word. We took a pragmatic approach since this is a learning project and not a server intended for production use.

Armed with this knowledge we took on the implementation side of things.

Before starting to code, we studied about how Apache and Nginx did CGI. We learned that over the years there were many advancements to the CGI protocol resulting in a few flavors of the protocol itself.

The basic CGI protocol as defined by RFC 3875 involves the web server executing the CGI scripts as child processes and making available the request details (requested path, query string, accepted content types, content length etc.) to them through environment variables. This means for every incoming request, there will be a new child cgi-script process spawned.

Then came FastCGI and SCGI which involve setting up an additional CGI server which maintains persistent cgi-script processes so they can be executed on-demand and thus improving performance greatly.

Communication between the CGI server and web server is over a Unix domain socket or a TCP socket. FastCGI specifies a binary protocol for communication between the web server and CGI server. It’s the fastest of the available flavors. SCGI is also similar to FastCGI but it is easier to implement and little less performant.

So which flavor do we go with? — We opted to go with the basic plain CGI protocol implementation as, again, our focus is not in building a production web server but to try to build a functional web server and learning a lot of Rust along the way.

Before we could start working on the CGI protocol implementation, we had one piece of the puzzle missing.

Till now we had not completely read the entire request packet. We wanted to read the entire incoming request.

After glancing through RFC 7230, we learnt the format of HTTP packet —

And this is the Rust code we used to read the request until the start of the message body —

And going through our code you’ll find out that we’re using this crate, httparse for the parsing job.

Now that we have the HTTP request in hand and we know how to execute the CGI scripts, we will need to figure out how to pass on the request details to the CGI script.

The CGI spec, like we saw before makes use of environment variables to pass on various details about the request to the script.

There were a number of meta variables defined by the spec. We decided to implement the following though —

We then wrote a function that took in the HTTP request struct and few other details and returned a vector of tuples —   — where the first element in the tuple holds the name of the meta-variable and the second element is the value of the variable.

We now have the meta-variables ready. Next step was to execute the CGI script from the rust program and pass all these as environment variables.

One of the meta variables that was needed to be sent to the CGI scripts was REMOTE_ADDR which is the IP address of the client sending the request.

We were using ‘s function to accept new connections to our TCP socket. It would be used this way —

But the function did not give us the IP address of the client.

Going back to TcpListener’s docs, we figured out that the alternate method gave us access to a which held the IP of the remote client.

But then the method worked a bit different from in that it does not return an like does and needed to be wrapped in a to make it run forever. Here’s what we have now —

And we now had access to the client’s IP and we were able to set the REMOTE_ADDR variable properly.

Once we had got the entire request and prepared the meta-variables from the request, all we had to do is find the script to be executed and do it.

From the docs we found out that Rust has this struct with beautiful interface that lets you spawn processes from your Rust program.

It follows the builder pattern and lets you specify so many aspects of child process spawning like the command line arguments, environment variables, stdin, etc. in an expressive manner.

Here is a simple example where we run the command —

In our case, we had to set a ton of environment variables (you’d do that using the  function) and since as per the builder pattern, each function call on the struct returns the struct itself, we were able to do something like so —

With our background as Ruby developers, Rust’s syntax most of the time doesn’t sit well with us. But the Command API is something we enjoyed working with, I must say.

Alright, all we had to do now was run the scripts, get their outputs and send it back to the client. And we’re done with our simple CGI server implementation.

We even have included a very silly and non-functional blog Ruby app in our repo here for fun.

Although we have a functional CGI server in our hands now, there are few things that we will need to take care of.

There was yet another Lifetime issue that took a really long time and help from Rust community for us to move ahead, we’ll elaborate on that in our next article.

Thanks for reading this. We will keep writing more about our project and developments. Stay tuned and do checkout our project on GitHub.

P.S

If you’re looking out for my Partner-in-Science, Preethi Kumar is her!|||

We have completed two of the three major features we wanted our Rust web server to support. This post is about how we implemented a CGI server in rust-httpd, the problems we ran into and what’s next.