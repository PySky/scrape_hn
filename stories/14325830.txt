At Talkdesk, we have this software component that provides a small but important data bridging functionality.

The main use case of this component is:

Although it looks like a fairly simple tool, there are some relevant non-functional requirements to be considered:

This component was originally written in Java 8 and use DropWizard as the foundation framework for the Web API. The code base had 1566 lines of code (LoC).

At Talkdesk, we use Ruby for most of our code base because we love its simplicity and expressiveness. But we do have a few applications running on the JVM that have been written in Java, Clojure and Scala.

After a few months writing this specific component in Java, we felt the shortcomings of the Java language when compared to modern languages (like Ruby, Rust or Kotlin). As such, we really wanted to find an alternate imperative and compiled language that could run on the JVM.

Considering that there are people at Talkdesk who have experience with Kotlin, we decided to give this language a try, because it would be a low-risk component to test such a migration.

Some (not all) of the factors that triggered the migration were:

Although we felt the need to modernize the code base, there were some items that we weren’t willing to let go:

So, we decided to migrate the code to Kotlin!

The tool that provides the best experience to write Kotlin code is IntelliJ IDEA (Kotlin was actually created by JetBrains, so… you get the point).

To support the code migration, we used an awesome feature of the Kotlin plugin for IntelliJ IDEA that provides automatic conversion of Java code to Kotlin code.

So, let’s get down to business:

First, we needed to update the to compile Kotlin. (There’s also instructions for updating gradle)

After adding Kotlin support to , we are able to compile both Java and Kotlin which gives us the benefit of having both code bases living side-by-side.

Then we started converting class by class by applying this simple process:

The converter is a bit conservative on the code conversion, so we needed to perform a few human-based tweaks.

The most relevant tweaks were:

Unless a variable is annotated with Java’s , the converter will make the assumption that the variable can be . As such, we need to manually check the variable’s possible values and make the changes related to null safety.

The converter will keep every annotation from the Java code. Unless, these annotations are being used for documentation, they can be removed.

When an instance variable is initialized on a Java constructor, the converter will generate a Kotlin and initialize the variable on it.

Most of the time, the variable initialization can be inlined along with the declaration, making the code more simple to read.

On a Kotlin class, all variables and methods are instance-scoped, so it does not allow declaring a variable or methods as . Static members must be declared on a companion object.

The converter always generates Java members as members of the .

But sometimes, these can be replaced by a compile time constant (for variables).

Because Java requires methods to explicitly indicate which exceptions are potentially thrown on the code using the keyword on the message signature, the converter will generate a annotation that is used for documentation.

Since Kotlin does not require explicit mention of the exceptions that can be thrown from a method, these can be removed from the code if not being used to generate documentation.

Methods on Java code that only have one line of code are converted to Kotlin methods with the converted code.

Kotlin supports Single Expression Functions which enable implementing one-line methods on a single line of code.

We were able to complete the migration in about six man.hours of effort: three man.hours for converting the code and three more man.hours for peer code review and tweaking.

The code base went down from 1.566 LoC to 1.128 LoC. That’s 23% less code base to maintain and work on! Not bad for a six hour investment :-)|||

At Talkdesk, we have this software component that provides a small but important data bridging functionality. Although it looks like a fairly simple tool, there are some relevant non-functional…