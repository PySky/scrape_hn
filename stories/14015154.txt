(There are some formatting issues in this post, will be fixed soon)

 This is an alternative way to use Redux by reducing some boilerplate and using flow.

 This will focus more on the Redux architecture and not much on the components and flow.

This is different than standard Redux because we separate between creators and dispatchers.

This will be at the very top of your react hierarchy.

The app will provide a function named to the context of every child so it can be used later on (it will be explained how to use it below).

Here the action dispatcher receives the and the function. Uses the action creator to create the function.

Notice that we can have async functions and there are no need for thunks.

The code with thunks would require an extra wrapper function that makes debugging more complicated and is unnecessary. Also there is no need for a middleware.

Below you could see the standard redux action dispatcher:

Did you noticed the nested function? â€“ Is not really necessary at all.

On top of it we dispatch an action that is a function that dispatches an action that is

Nothing exciting going on here, just some functions that creates some objects.

The most annoying issue is that we need to duplicate the action types strings between the javascript object and the flow type.

Here are the most important changes:

Will remain the same as standard Redux.

We can do even better than this, we could add a middleware that adds the argument on the action dispatcher.

Overall it seems that we can do complex stuff in Redux thunks.

If you find it useful, please retweet.

 Thanks for reading.|||

