Streaming fetches are supported in Chrome, Edge, and Safari, and they look a little like this:

This code is pretty readable thanks to async functions (here's a tutorial if you're unfamiliar with those), but it's still a little clumsy.

Thankfully, async iterators are arriving soon, which makes it much neater:

Async iterators are available in Chrome Canary if you launch it with the flag . Here's how they work, and how we can use them to make streams iterate…

Async iterators work pretty much the same as regular iterators, but they involve promises:

Both types of iterator have a method, which tells the iterator to end early, and do any clean-up it needs to do.

It's fairly uncommon to use iterator objects directly, instead we use the appropriate for loop, which uses the iterator object behind-the-scenes:

The for-of loop will get its iterator by calling . Whereas the for-await loop will get its iterator by calling if it's defined, otherwise it will fall back to .

For-await will give you each value once resolves. Because this involves awaiting promises, other things can happen on the main thread during iteration. isn't called for the next item until your current iteration is complete. This means you'll always get the items in order, and iterations of your loop won't overlap.

It's pretty cool that for-await falls back to . It means you can use it with regular iterables like arrays:

In this case, for-await takes each item from the array and waits for it to resolve. You'll get the first response even if the second response isn't ready yet, but you'll always get the responses in the correct order.

Just as you can use generators to create iterator factories, you can use async generators to create async iterator factories.

Async generators a mixture of async functions and generators. Let's say we wanted to create an iterator that returned random numbers, but those random numbers came from a web service:

This iterator doesn't have a natural end – it'll just keep fetching numbers. Thankfully, you can use to stop it:

Like regular generators, you values, but unlike regular generators you can promises.

Like all for-loops, you can whenever you want. This results in the loop calling , which causes the generator to act as if there was a statement after the current (or next) .

Using a web service to get random numbers is a bit of a silly example, so let's look at something more practical…

Like I mentioned at the start of the article, soon you'll be able to do:

…but it hasn't been spec'd yet. So, let's write our own async generator that lets us iterate over a stream! We want to:

Releasing the lock is important. If the developer breaks the loop, we want them to be able to continue to use the stream from wherever they left off. So:

The clause there is pretty important. If the user breaks out of the loop it'll cause our async generator to return after the current (or next) yield point. If this happens, we still want to release the lock on the reader, and a is the only thing that can execute after a .

And that's it! Now you can do:

Releasing the lock means you can still control the stream after the loop. Say we wanted to find the byte-position of the first in the HTML spec…

Here we break out of the loop when we find a match. Since releases its lock on the stream, we can cancel the rest of it & save bandwidth.

Note that we don't assign to . This would work – allowing us to iterate over streams directly, but it's also messing with objects we don't own. If streams become proper async iterators, we could end up with weird bugs if the spec'd behaviour is different to ours.

You don't need to use async generators to create async iterables, you could create the iterator object yourself. And that's what Domenic Denicola did. Here's his implementation:

You can play with all of the above in Chrome Canary today by launching it with the flag . If you want to use them in production today, Babel can transpile them.|||

