Purpose: Docker network tshooting can be difficult for network engineers. With proper understanding of how Docker networking works and the right set of tools, you can troubleshoot and resolve these networking issues. The container has a set of powerful networking tshooting tools that can be used to troubleshoot Docker networking issues.

Network Namespaces: Before starting to use this tool, it's important to go over one key topic: Network Namespaces. Network namespaces provide isolation of the system resources associated with networking. Docker uses network and other type of namespaces ( , , ..etc) to create an isolated environment for each container. Everything from interfaces, routes, and IPs is completely isolated within the network namespace of the container.

Cool thing about namespaces is that you can switch between them. You can enter a different container's network namespace, perform some troubleshooting on its network's stack with tools that aren't even installed on that container. Additionally, can be used to troubleshoot the host itself by using the host's network namespace. This allows you to perform any troubleshooting without installing any new packages directly on the host or your application's package.

Network Problems: Many network issues could result in application performance degradations. Some of those issues could be related to the underlying networking infrastructure(underlay). Others could be related to misconfiguration at the host or Docker level. Let's take a look at common networking issues:

To troubleshoot these issues, includes a set of powerful tools as recommended by this diagram.

Included Packages: The following packages are included in . We'll go over some with some sample use-cases.

tcpdump is a powerful and common packet analyzer that runs under the command line. It allows the user to display TCP/IP and other packets being transmitted or received over an attached network interface.

More info on can be found here.

Purpose: is a useful tool for checking your network configuration and activity.

Continuing on from example. Let's use to confirm that it's listening on port .

("Network Mapper") is an open source tool for network exploration and security auditing. It is very useful for scanning to see which ports are open between a given set of hosts. This is a common thing to check for when installing Swarm or UCP because a range of ports is required for cluster communication. The command analyzes the connection pathway between the host where is running and the given target address.

There are several states that ports will be discovered as:

Purpose: iftop does for network usage what top does for CPU usage. It listens to network traffic on a named interface and displays a table of current bandwidth usage by pairs of hosts.

Purpose: drill is a tool to designed to get all sorts of information out of the DNS.

Continuing the example, we'll use to understand how services' DNS is resolved in Docker.

Purpose: a simple Unix utility that reads and writes data across network connections, using the TCP or UDP protocol. It's useful for testing and troubleshooting TCP/UDP connections. If there's a firewall rule blocking certain ports, can be used to detect

is a simple script that will generate a packet of data between containers periodically using . It's purpose is to use the generated traffic to demonstrate different features of the networking stack.

will create a server and client listening and sending to the same port.

purpose: a collection of utilities for controlling TCP / IP networking and traffic control in Linux.

More info on here

Prupose: is a powerful tool allowing you to enter into any namespaces. is available inside but requires to be run as a privileged container. Additionally, you may want to mount the directory to be able to enter any network namespace including bridge and overlay networks.

With , docker uses 's network namespace ( including interfaces and routes) when creating . This approach is helpful for troubleshooting network issues at the container level. To troubleshoot network issues at the bridge or overlay network level, you need to enter the of the network itself. allows you to do that.

For example, if we wanted to check the L2 forwarding table for a overlay network. We need to enter the overlay network namespace and use same tools in to check these entries. The following examples go over some use cases for using to understand what's happening within a docker network ( overlay in this case).

Feel free to provide feedback and contribute networking troubleshooting tools and use-cases by opening PRs.|||

netshoot -  a Docker network troubleshooting swiss-army container