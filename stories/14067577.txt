Porta is an extension of Ecto (and, optionally, Phoenix) which provides an alternative, more SQL-oriented way of doing database stuff. Its most notable feature is Composable SQL. An example:

This merges the two queries and runs something equivalent to:

The merger above is less intelligent than it seems.

It first splits each query wherever a line starts with a clause keyword such as , and . Because of this, the newlines in the examples above are required. After that, it replaces all named parameters with positional parameters (or subqueries, or raw SQL). Then it groups and sorts all clauses on their type, maintaining the order of clauses of the same type. Finally, clauses of the same type are merged together if necessary.

While this approach supports all SQL dialects and allows for more expressive queries than most typical ORMs, there are a few problems:

Whenever a keyword list is used in place of an argument, it is assumed to be a subquery:

To insert raw SQL in the place of a named parameter, use a {:raw, param} tuple. This can be used to dynamically specify columns and table names:

A few SQL queries are included in Porta by default. An example is the query, which works as if you put in . These queries can be composed as well:

While the and default queries are very useful, it usually makes more sense to put subqueries in their own file under .

A feature that should see even rarer use is the ability to replace the atoms in the query list with strings:

This is equivalent to putting in and running:

I'll write up documentation for this and the other Mix tasks someday.

Most of Porta's features require a somewhat recent version of Ecto. Some require Phoenix. Other than that:|||

porta - Composable SQL for Ecto (and other experiments)