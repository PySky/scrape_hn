An introduction to the development of React applications with Atom and TypeScript

We are about to develop the famous TODO App from the TodoMVC project using React and TypeScript:

In this post you will learn about the following:

We will start by setting up the environment:

This plugin has some cool features like HTML to TSX:

Please visit the project’s page on GitHub to learn more about the atom-typescript features.

This extension helps us to debug React applications by displaying the value of the properties and state of a selected component.

By the end of this tutorial the project structure will be similar to the following one:

Then create new file inside the application’s root folder:

You can then install the project dependencies using npm:

This command should create a folder named inside the application’s root folder. The should contain 3 folders named: , and .

We will now install some TypeScript type definitions files.

Type definitions files are used to declare the interfaces of the public API of third party libraries like React. These interfaces can be used by the IDEs to help us during the development of TypeScript applications with features like IntelliSense.

The type definitions files are also used by the TypeScript compiler to ensure that we are using the third party libraries correctly.

We are going to need the React type definitions. We can install them using the following command:

The command above will create a file named and a folder named in the application’s root folder. The folder should contain a folder named .

We also need to manually download and save a file named under the folder.

Now, let’s create the file inside the application’s root folder:

At this point you should have the following files and folders in place:

You may have noticed that some of the JavaScript files referenced by our file are missing. We will now proceed to solve that problem.

Components are he main building block of a React application. A component represents a self-contained piece of UI. A component will usually display some data and be able handle some kind of user interaction.

A component can contain child components. The application that we are about to develop is really small, so we will only develop one top-level component named .

The component will be composed of multiple components, including one component and a list of components.

Components differentiate two different sets of data: properties and state.

When we declare a new React component using TypeScript we must declare the interface of its properties and state as follows:

Now that we have our project structure in place and we know the basics about components it is time to start developing our components.

Let’s create a new folder named under the application’s root folder.

We are going to create the following files:

Feel free to create them now or do it as we implement each one of them.

We will use this file to define all the interfaces in our application. We use the extension (which is also used by the type definition files) instead of because this file will not be transpiled into a JavaScript file. The file is not transpiled because TypeScript interfaces are not transformed into JavaScript code during the compilation process.

This file is used to expose some constants. The constants are used to store the numeric value of the keyboard keys ( and ) that we will use later to set some events listeners.

We will also use some values to identify the currently displayed list of tasks by its status:

This file contains a class named . The class is no more that a collection of utility static functions.

TodoModel is a generic “model” object. Since this application is really small it may not even be worth separating this logic out, but we do this to demonstrate one way to separate out parts of your application.

This file uses the extension instead of the extension because it contains some TSX code.

TSX is a typed superset of JSX. We will use TSX instead of HTML of client-side templates like Handlebars because TSX and JSX are used to generate an in-memory representation of the DOM. When the components state or properties change Reacts calculates the most efficient way to update the in-memory representation of the DOM and then proceeds to apply those changes to the real DOM. This process makes React highly efficient when it comes to DOM manipulation.

The footer component allows users to filter the lists of tasks by their status and displays the count of tasks. This component has no state (Note how is passed to as the interface of its state) but it has some properties ( ) that are set by its parent component (the component).

The component represents one of the tasks in the list of tasks.

This component has both properties ( ) and state ( ).

The component initial’s state is set in the component’s constructor by itself while the properties are passed as constructor arguments and are set by the component’s parent component (the component).

This file contains the application’s entry point and the declaration of the component which is the only top-level component in this application.

Make sure that the operator is pointing to the right element at all times. For example, you should use arrow functions:

To ensure that the operator is pointing to the component inside the function.

To compile our application we must add a file named under the folder:

If we check out the TypeScript compiler options we can find out how to use the file:

We can compile our application using the following command:

This should create the following JavaScript files under the folder:

These are the files that were referenced in our file:

We are now ready to run our application.

To run the application, we need a web server. We will use the npm module http-server.

We can install this package using the following commmand:

Use the following command to run the application:

If you open a browser and navigate to you should be able to see the application running:

Remember to open the chrome developer tools to take a look to the React developer tools extension for chrome and how the value of the properties and state of the components change as you interact with the application.

In this post we have learned how to set up a development environment and create a new project to work with TypeScript and React.

You can browse the source code online at GitHub.

Are you thirsty for more? If so, check out Typed React and Redux by Jack Hsu.

We will keep this blog updated and write more about React and TypeScript in the future. Don’t forget to subscribe if you don’t want to miss it out!

Please feel free to talk about this article with us via @OweR_ReLoaDeD and @WolkSoftwareLtd.|||

An introduction to the development of React applications with Atom and TypeScript We are about to develop the famous TODO App from the TodoMVC project using React and TypeScript: In this post you will learn about the following: 1. Setting up the... | Wolk Software Engineering | A group of young and ambitious people dedicated to creating cutting-edge applications in combination with beautiful and functional design.