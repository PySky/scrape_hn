This post was written by Jeff Sandquist, General Manager in the Azure Growth and Ecosystem team.

Today we launched our revamped Azure PowerShell experience for docs.microsoft.com. Improvements to this experience include module versioning, code syntax highlighting, easier-to-navigate table of contents, the ability to edit and improve docs, and more. We know from customer feedback that PowerShell content has been an area for improvement and this is the next step in our journey to improve the quality of our content. We've started with Azure, but will be moving all of our PowerShell content to this experience in the coming months.

The goal of our PowerShell Module reference docs is to provide a unified experience for all PowerShell modules shipped at Microsoft. This includes:

While we mentioned versioning for a specific module, some modules ship as a group of other modules, each with their own separate versioning scheme. For example, customers download Azure PowerShell through PowerShellGet. In the past customers had to manually decipher which versions of the docs applies to their installation. For example, if you installed Azure PowerShell 3.7, you would have to know each individual module that AzureRM 3.7 ships with AzureRM.Automation 2.7 and AzureRM.CognitiveServices v0.5.0 and look for those docs.

With our new experience you just have one version to pick and we will filter the correct modules based on what you have installed.

In addition to cmdlet reference, we added overview content, installation steps, getting started, and samples. For Azure reference, we also grouped cmdlets based on Azure Service.

You can easily filter the left TOC as you type for matching cmdlets or services matching that name.

PowerShell cmdlets are now nicely colorized and formatted for better readability.

While we previously grouped parameters by whether they were required or optional, the parameter list appeared unordered. Instead we added section headings to group required parameters and optional parameters and improved the colorization/style for parameter names.

A number of our PowerShell cmdlets code samples are prefixed with the text . When you click the Copy button for the code example, we will now strip away the prefix, as shown in Notepad screenshot below.

We hope that you see significant improvements with this release. We are not finished with our vision yet, so please send us your feedback via our Docs UserVoice.|||

