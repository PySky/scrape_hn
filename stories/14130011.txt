There's a lot going on in Rust, but let's talk about a few of the big things.

The most important thing we are doing right now is improving Rust's erogomics. Rust is a very powerful system, but it has some rough edges, and those especially impact new users. There are a number of changes coming up that will make Rust even more fun to use than it is today.

The next big thing is asynchronous I/O, via a project called "tokio". Async I/O is how you do fast I/O in the modern world. If you are familiar with node.js with it's callbacks, that's async I/O. We are hopeful that tokio is going to become the fastest and most robust async I/O stack there is. This is going to be a big enabler for Rust developers, and we expect to see some impressive software built on it. Alex is giving a talk on this tomorrow.

In Rust we value documentation. Already, we hear a lot of praise for the quality of our docs, but we're not going to let up. In the next year we'll be publishing a completed language reference, thoroughly documenting all the most important Rust libraries, and proving guidance on designing APIs the Rust way.

A programming language is not competitive today unless it has strong tooling. Developers have high expectations. We're creating a new program called the Rust Language Server, an IDE-agnostic server that provides the metadata and analysis required to fulfill the typical functionality of an IDE. And we're integrating that with Visual Studio Code.

That's going to be released this summer.

Finally, I've already spoken about the importance of interop, but it's not just with C and C++. Because Rust has no runtime, it's easy to embed in any language stack, and we see a lot of demand for that. When you have a Rails application that needs to be accelerated, and your choices are memory-unsafe C, and Rust, that choice should be easy. We think this is a major avenue for Rust adoption.|||

