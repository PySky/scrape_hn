Good engineering requires high awareness even in cases that may appear basic & straightforward. So-called good practice, if overdone or applied incorrectly can be very detrimental & in the same time may appear completely innocent & harmless, making us look for problems' root cause elsewhere. Using DI/IoC containers is a great example here - when misused, instead of reducing the coupling & increasing the testability, they can over-bloat code, make it far more brittle & harder to grok through.

Some time ago I've already committed a post about cargo cult in software delivery. It was mainly about copying patterns / tools & methods used (with success) by our industry giants, without really understanding whether you're facing the same problems in a similar context.

Today I'd like to cover another form of cargo cult - indiscriminate (over)use of certain code-level practices, usually in not 100% good way, w/o fully understanding their intended purpose & expected advantage to be gained. Why people do that? Because everyone else uses them, because they are in general considered a good practice, because the use case has "skewed" & degenerated over time, etc.

Examples? Omnipresent ORMs, code coverage worship, pre-mature or overzealous monolith decomposition (microservices everywhere!) & especially DI container extravaganza. Let's stick to this last one, as it's an illustrious case ...

Vast majority of programmers have heard about key advantages of using DI/IoC thanks to SOLID principles. In short words:

But not everyone really understands HOW & WHEN to apply this technique to truly achieve expected goal(s) - consequences tend to be quite grief, even if not strikingly visible since the very beginning:

All these disadvantages are even more visible (& painful) when devs overdo the modelling by introducing too many "helper abstractions" - you can easily recognize them by suffixes like "-Manager", "-Controller", "-Engine". These outbreaks of unintended (& unnecessary) coupling tend to spread like virus through your codebase & cause massive DI containers overdose.

How to keep your DI/IoC sane then? What are the good principles to follow?

OK, let's try to get there - step by step. Or rather - question by question.

Q1: How does in fact DI help with loosening the coupling? 

 In two ways:

Q2: Is DI container required if we want to depend only on interfaces? 

 Of course it isn't! You'll be perfectly fine ol' good GoF creational patterns like Abstract Factory, Builder or even Prototype: this is (& was always) their intended purpose - to encapsulate & contain complex (& in some cases polymorphic) object hierarchies construction.

Q3: Thanks to DI I don't have to pass my dependencies through whole hierarchies of calls - how can I achieve that w/o DI? 

 But what is the usual reason for that? It's because you're spawning too many abstract "helpers" (mentioned above) OR because you're (usually unnecessarily) mixing behaviour with state in such helpers (I don't mean domain objects, which are usually the lowest layer of calls' hierarchy). I don't want to sound like an FP zealot, but what usually helped in my cases was to:

Q4: So, where (& when) are DI containers really needed? Or should they be dropped for good? 

 DI containers are very useful ...|||

