The 4 Steps to Bringing Life to a Struggling Project

In the initial stages of a new business or a startup, when the future is unknown, people often opt for short-term solutions to product development. These short term solutions are often in the form of hiring and changing contractors, delivering code with technical debts, changing requirements often. When the product finally starts getting traction, by attracting users or paying customers, the business is now ready for investment and the product is ready to scale… or is it? The short term trade offs made at conception often come at a high price. With technical debts reducing the velocity of delivering new features, the business now has a dilemma. Does the business drop the initial product version and begin a rewrite that takes into consideration all the new knowledge? Or does the business continue to support the older product and fix its mistakes? They are hard decisions to make for not only the business owners, but also the investors, employees, and everyone involved. If the business decides to invest in improving and growing its existing solution, common issues in a project that often need to be addressed can be categorized as follows: Darkness: No plan, and no one knows what needs to be done. “Deja Vu”: A huge number of repeated bugs exist in the product. To move the project forward, each category needs to be permanently eliminated.

Cannot see progress in realtime; Developers do not understand the big picture, and cannot decide on new tasks. The practices we use to solve this are based on Lean and Kanban Methodology. They are simple and scalable, and are used by the best development teams across the world. Addressing the problem and introducing the methodology, we start from Kanban Board. At a quick glance, everyone has transparency in the project and can see the following: What state each task is in Who is working on what Where the bottlenecks are

Setting up New Production, Staging or Development instances takes too much time, especially for people new to the team; There are “experts” on your team who “are the only ones who understand the production configuration”. We expect that all development processes should be clear and simple for anyone, regardless of their expertise level. Clear documentation is essential way of ensuring developer productivity, ease of maintenance, and project longevity. When we ensure the processes for product delivery are sufficiently documented, and new team members do not require excessive guidance from their colleagues to set up a development environments, understand the technologies, and building the product. When routine tasks can be automated, we do so. For example, automatically checking a pull request for code style violations and disabling the Merge button if there are any, is far more efficient than a written instruction “check code style before merging”. We automated things such as: Setting Up Environments, Running Tests, Code Style Checking, & Auto-Deployment.

Delivering of new features takes excessive time to build, integrate and verify; There is a long list of partially done features. In software development, Rust is when you have stale issues that have not been updated for some time or issues that you cannot deliver. Creating smaller, more manageable tasks allows the project team avoid stress and procrastination and focus on high-quality development, testing, and collaboration. We should not hesitate and split tasks in the middle of work. In combination with Kanban, we can eliminate Staled Code by limiting Work In Progress of team members. Work In Progress Limits help teams focus on correct decisions, completion, and quality. Also highlight bottlenecks in a team’s delivery pipeline before a situation becomes dire. Our Limits: Each Person focuses on 2 Items only at a time. Changes on one part break another part of the application. This is incredibly frustrating. Persistent bugs not only frustrate customers that run into them, but frustrate team members who constantly address them. Unit and small integration tests are one of the best things you can do to reduce regression, which all this should be combined with Continuous Integration. In addition, all new changes need to be covered by tests. In addition, using a TDD approach can easily make changes to application — all without fear of ‘breaking’ the application and hamstringing their daily operations. Just like authors of novels, authors of software need their peers to review their work in detail to ensure their work is successfully published. Code Review is crucial and has been repeatedly shown to accelerate and streamline the process of software development. With Code Review, team members can verify the new changes under isolated testing environment. It makes verification much easier and the developer will not have to review broken, co-mingled code from other members’ changes on staging. As a result we can eliminate several problems and: We found useful: Heroku Review App and GitHub|||

In the initial stages of a new business or a startup, when the future is unknown, people often opt for short-term solutions to product development. These short term solutions are often in the form of…