Please report bugs on Bugzilla on kernel.org (requires registration) setting the component to Btrfs, and report bugs and issues to the mailing list (linux-btrfs@vger.kernel.org; you are not required to subscribe). For quick questions you may want to join the IRC #btrfs channel on freenode (and stay around for some time in case you do not get the answer right away).

Please use btrfs-progs somewhere in the bug subject if you're reporting a bug for the userspace tools.

Never use the Bugzilla on "original" Btrfs project page at Oracle.

If you include kernel log backtraces in bug reports sent to the mailing list, please disable word wrapping in your mail user agent to keep the kernel log in a readable format.

Please attach files (like logs or dumps) directly to the bug and don't use pastebin-like services.

First, update your kernel to the latest one available and try mounting again. If you have your kernel on a btrfs filesystem, then you will probably have to find a recovery disk with a recent kernel on it.

Second, try mounting with options -o recovery or -o ro or -o recovery,ro (using the new kernel). One of these may work successfully.

Finally, if and only if the kernel oops in your logs has something like this in the middle of it,

then you should try using Btrfs-zero-log.

See the next section.

If you have labelled your filesystem and put it in /etc/fstab, but you get:

or if one volume of a multi-volume filesystem fails when mounting, but the other succeeds:

Then you need to ensure that you run a btrfs device scan first:

This should be in many distributions' startup scripts (and initrd images, if your root filesystem is btrfs), but you may have to add it yourself.

Maybe. Any number of things might be wrong. The restore tool is a non-destructive way to dump data to a backup drive and may be able to recover some or all of your data, even if we can't save the existing filesystem.

does not defragment the contents of the directory.

This is by design. operates on the single filesystem object passed to it, e.g. a (regular) file. When ran on a directory, it defragments the metadata held by the subvolume containing the directory, and not the contents of the directory. If you want to defragment the contents of a directory, you have to use the recursive mode with the flag (see recursive defragmentation).

First of all make sure you have passed "compress" mount option in fstab or mount command. If yes, and ratios are unsatisfactory, then you might try "compress-force" option. This way you make the btrfs to compress everything. The reason why "compress" ratios are so low is because btrfs very easily backs out of compress decision. (Probably not to waste too much CPU time on bad compressing data).

You've just copied a large file, but still it consumed free space. Try:

You are missing the /dev/btrfs-control device node. This is usually set up by udev. However, if you are not using udev, you will need to create it yourself:

You might also want to report to your distribution that their configuration without udev is missing this device.

The preferred way is to use the wipefs utility that is part of the util-linux package. Running the command with the device will not destroy the data, just list the detected filesystems:

To actually remove the filesystem use:

ie. copy the offset number to the commandline parameter.

Note: The process is reversible, if the 8 bytes are written back, the device is recognized again.

Note: wipefs clears only the first superblock. If the first superblock is further invalidated the other ones could "resurrect" the filesystem.

Long time ago I created btrfs on /dev/sda. After some changes btrfs moved to /dev/sda1.

Use wipefs as well, it deletes only a small portion of sda that will not interfere with the next partition data.

There are three superblocks: the first one is located at 64K, the second one at 64M, the third one at 256GB. The following lines reset the magic string on all the three superblocks

If you want to restore the superblocks magic string,

First, check how much space has been allocated on your filesystem:

Note that in this case, all of the devices (the only device) in the filesystem are fully utilised. This is your first clue.

Next, check how much of your metadata allocation has been used up:

Note that the Metadata used value is fairly close (75% or more) to the Metadata total value, but there's lots of Data space left. What has happened is that the filesystem has allocated all of the available space to either data or metadata, and then one of those has filled up (usually, it's the metadata space that does this). For now, a workaround is to run a partial balance:

Note that there should be no space between the -d and the usage. This command will attempt to relocate data in empty or near-empty data chunks (at most 5% used, in this example), allowing the space to be reclaimed and reassigned to metadata.

If the balance command ends with "Done, had to relocate 0 out of XX chunks", then you need to increase the "dusage" percentage parameter till at least one chunk is relocated. More information is available elsewhere in this wiki, if you want to know what a balance does, or what options are available for the balance command.

Note: this has been properly fixed in btrfs-progs version 3.18.2. The workarounds below still apply but are not necessary anymore.

As per Marc's blog on how to fix btrfs cancel: Problem:

First case, if you get:

then this is probably because "emptydir" is actually a subvolume.

You can check whether this is the case with:

To delete the subvolume you'll have to run:

Second case, if you get:

then you may have an empty directory with a non-zero i_size.

You can check whether this is the case with:

Running "btrfs check" on that (unmounted) filesystem will confirm the issue and list other problematic directories (if any).

You will get a similar output (excerpt):

Such errors should be fixable with "btrfs check --repair" provided you run a recent enough version of btrfs-progs.

Note that "btrfs check --repair" should not be used lightly as in some cases it can make a problem worse instead of fixing anything.

This means that conversion will remove a degree of metadata redundancy, for example when going from profile or to

This means that a conversion has been attempted from profile to with earlier than version 4.7.

Under normal circumstances the generation numbers must match. A mismatch can be caused by a lost write after a crash (ie. a dangling block "pointer"; software bug, hardware bug), misdirected write (the block was never written to that location; software bug, hardware bug).|||

