React-inspired library for writing AppKit/UIKit UIs which are functions of their state.1

SwiftBox is used for layout.

Few.swift lets us express UIs as stateless, composable, immutable-ish values of their state. When their state changes, Few.swift calls a function to render the UI for that state, and then intelligently applies any changes.

To put it another way, the state is the necessary complexity of the app. The view is a mapping from state to its representation.

Here's a simple example which counts the number of times a button is clicked:

Or a slightly more involved example, a temperature converter:

{ defaultFahrenheit CGFloat fahrenheit defaultFahrenheit celcius (defaultFahrenheit) } ( : CGFloat) CGFloat { (c ) } ( : CGFloat) CGFloat { (f ) } ( : , : , : , : ()) { () . (. ) . ( ( : )) . ([ (label). ( ), ( : value, : label, : fn) Autofocus means that the Input will become the first responder when it is first added to the window. . (autofocus) . ( ), ]) } ( : Component<ConverterState>, : ConverterState) { numberFormatter () parseNumber CGFloat { str (numberFormatter. (str) . ). { ( ) } } () . (. ) . (. ) . (. ) . ([ Each time the text fields change, we re-render. But note that Few.swift is smart enough not to interrupt the user's editing or selection. ( , , ) { f ( ) { component. { ( : f, : (f)) } } }, ( , , ) { c ( ) { component. { ( : (c), : c) } } }, ]) }

This is super cool because the only thing that's mutating is the state. Few.swift is in charge of making an in-place changes to the UI when the state changes.

See FewDemo for some more involved examples.

A few of the most notable differences:

Swift's pretty buggy with concrete subclasses of generic superclasses: https://gist.github.com/joshaber/0978209efef7774393e0. This hurts.

Probably . See above about how it's not battle-tested yet. Pull requests welcome .

1. React, but for Cocoa. A reactive Cocoa, one might say.|||

Few.swift - Views as functions of their state.