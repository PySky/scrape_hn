Real-time LED strip music visualization using Python and the ESP8266 or Raspberry Pi.

The repository includes everything needed to build an LED strip music visualizer (excluding hardware):

To build a visualizer using a computer and ESP8266, you will need:

You can also build a standalone visualizer using a Raspberry Pi. For this you will need:

Limitations when using the Raspberry Pi:

Visualization code is compatible with Python 2.7 or 3.5. A few Python dependencies must also be installed:

On Windows machines, the use of Anaconda is highly recommended. Anaconda simplifies the installation of Python dependencies, which is sometimes difficult on Windows.

Create a conda virtual environment (this step is optional but recommended)

Install dependencies using pip and the conda package manager

The pip package manager can also be used to install the python dependencies.

If is not found try using instead.

ESP8266 firmare is uploaded using the Arduino IDE. See this tutorial to setup the Arduino IDE for ESP8266.

After installing the Arduino IDE and ESP8266 addon, use the Arduino Library Manager to install the "WebSocketServer" library.

The ESP8266 has hardware support for IÂ²S and this peripheral is used to control the ws2812b LED strip. This signficantly improves performance compared to bit-banging the IO pin. Unfortunately, this means that the LED strip must be connected to the RX1 pin, which is not accessible in some ESP8266 modules (such as the ESP-01).

The RX1 pin on the ESP8266 module should be connected to the data input pin of the ws2812b LED strip (often labelled DIN or D0).

For the NodeMCU v3 and Adafruit Feather HUZZAH, the location of the RX1 pin is shown in the images below. Many other modules also expose the RX1 pin.

Since the Raspberry Pi is a 3.3V device, the best practice is to use a logic level converter to shift the 3.3V logic to 5V logic (WS2812 LEDs use 5V logic). There is a good overview on the best practices here.

Although a logic level converter is the best practice, sometimes it will still work if you simply connect the LED strip directly to the Raspberry Pi.

You cannot power the LED strip using the Raspberry Pi GPIO pins, you need to have an external 5V power supply.

If you encounter any problems running the visualization on a Raspberry Pi, please open a new issue. Also, please consider opening an issue if you have any questions or suggestions for improving the installation process.

To install the ws281x library I recommend following this Adafruit tutorial.

For the Raspberry Pi, a USB audio device needs to be configured as the default audio device.

Set the file to the following text

Next, set the USB device to as the default device by editing

In , set the device to and configure the GPIO, LED and other hardware settings. If you are using an inverting logic level converter, set in . Set if you are not using an inverting logic level converter (i.e. connecting LED strip directly to GPIO pin).

The visualization program streams audio from the default audio input device (set by the operating system). Windows users can change the audio input device by following these instructions.

You can use a "virtual audio device" to transfer audio playback from one application to another. This means that you can play music on your computer and connect the playback directly into the visualization program.

On Windows, you can use "Stereo Mix" to copy the audio output stream into the audio input. Stereo Mix is only support on certain audio chipsets. If your chipset does not support Stereo Mix, you can use a third-party application such as Voicemeeter.

Go to recording devices under Windows Sound settings (Control Panel -> Sound). In the right-click menu, select "Show Disabled Devices".

Enable Stereo Mix and set it as the default device. Your audio playback should now be used as the audio input source for the visualization program. If your audio chipset does not support Stereo Mix then it will not appear in the list.

Linux users can use Jack Audio to create a virtual audio device.

On OSX, Loopback can be use to create a virtual audio device.

Once everything has been configured, run visualization.py to start the visualization. The visualization will automatically use your default recording device (microphone) as the audio input.

A PyQtGraph GUI will open to display the output of the visualization on the computer. There is a setting to enable/disable the GUI display in config.py

If you encounter any issues or have questions about this project, feel free to open a new issue.

This project was developed by Scott Lawson and is released under the MIT License.|||

audio-reactive-led-strip - :musical_note: :rainbow: Real-time LED strip music visualization using Python and the ESP8266 or Raspberry Pi