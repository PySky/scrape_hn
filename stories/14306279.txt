If you had been thinking of publishing a gem since long time, I’ll recommend stop thinking and get your hands dirty today. Even if you develop a small functionality, which can be useful to others, just go ahead and package it as a gem and share it. If you’re holding back because you feel the code can be refactored, made more modular etc, you probably won’t be able to make it.

Here is how I published my first gem final_redirect_url.

Just execute the quoted command in bold format in the detailed steps section below, and you’ll be good to go :)

3. A name for your new gem. I’ll use final_redirect_url for the demonstration purpose.

Your new gem can be bootstrapped using following bundler command:

Executing this command will do a heavy lifting for you.

Note the directory structure of the gem skeleton below. Also note, the VERSION of gem has a strong significance.

From Semantic Versioning, Given a version number MAJOR.MINOR.PATCH, increment the:

You should add a few details such as version, authors, summary etc in final_redirect_url.gemspec file.

This section will be mostly driven by the functionality you want to build. However, there are few caveats you must care about:

Here is the first version of final_redirect_url module:

Based on the details available in .gemspec file, you can create an installable build using following command(from gem root directory):

You can install your gem locally by:

Now you can try your gem using irb:

You can host your gem on your own server as well as on rubygems. Publishing it on rubygems.org is a always a good idea if you want to share your gem publicly.

Do not forget to replace your username in this command.|||

If you had been thinking of publishing a gem since long time, I’ll recommend stop thinking and get your hands dirty today. Even if you develop a small functionality, which can be useful to others…