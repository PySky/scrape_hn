Kelvin is a little helper bot who will automate the lights in your house. Its job is to adjust the color temperature and brightness in your home based on your local sunrise and sunset times and custom intervals defined by you. Think of it as f.lux or Apple's Night Shift for your home.

Imagine your lights shine in an energetic but not to bright blue color to get you started in the early morning. On sunrise your lights will change to a more natural color temperature to reflect the sunlight outside. On sunset they will slowly fade to a warmer and softer color scheme perfectly suited to Netflix and chill. When it's time to go to bed Kelvin will reduce the intensity even more to get you into a sleepy mood. It will keep this reduced setting through the night so you don't get blinded by bright lights if you have to get up at night...

If you want to give Kelvin a try, there are some things you will need to benefit from its services:

Got all these? Great, let's get started!

As an alternative to manual installation you can also pull the official docker image from docker hub. Just run

Kelvin will create it's configuration file in the current directory and store all necessary information to operate in it. By default it is fully usable and looks like this:

As the configuration file is a simple text file in JSON format you can display and edit it with you favorite text editor. Just make sure you keep the JSON structure valid. If something goes wrong fix it using JSONLint or just delete the and let Kelvin generate a configuration from scratch.

The configuration contains the following fields:

Each schedule must be configured in the following format:

After altering the configuration you have to restart Kelvin. Just kill the running instance ( or ) or send a HUP signal ( ) to the process to restart (unix only).

A Raspberry Pi is the perfect device to run Kelvin on. It's cheap, it's small and it consumes very little energy. Recently the Raspberry Pi Zero W was released which makes your Kelvin hardware look like this (plus a power cord):

But any other model of the Raspberry Pi will be sufficient. To setup Kelvin on a Raspberry Pi follow the installation guide here. Once your Pi is up and running (booting, connected to your network and the internet) just download the latest release and follow the steps in Installation.

If anything goes wrong keep calm and follow these steps:

Make sure the Philips Hue bridge is configured and working in your network. Kelvin will need it to communicate with your lights. If you got the hue app running on your smartphone you should be fine. Otherwise follow the Philips Hue manual to configure your lights. To identify the IP address of your bridge open this link in your browser. After you got the IP address enter into your browser. You should see the debug page of you hue bridge. If this fails please follow the Philips Hue manual to configure your bridge. Make sure the Philips Hue bridge is reachable from the computer Kelvin will run on. Enter the command in a terminal window or on a remote console. You should see packages reaching the destination IP address. If this fails you might have a network issue. Make sure you downloaded the latest release for your operating system and CPU architecture. If you are not sure stick to the most appropriate release or if you are using a Raspberry Pi. If all this doesn't help, feel free to open an issue on github.

In order to decide if Kelvin suits your needs and works in your setup, it helps to understand it's inner workings and behavior. In a nutshells Kelvin uses your Philips Hue bridge to talk to all the Hue lights in your home and will automatically configure them according to the schedules in your configuration file. In order to do this it will request the current state of every light every two seconds. For this state Kelvin differentiates three possible scenarios:

By following this scenarios you can expect these behaviors

If you want to tinker with Kelvin and it's inner workings, feel free to do so. To get started you can simple clone the main repository into your by executing the following commands:

Make sure you have set up your go development environment by following the steps in the official documentation.

If you have ideas how to improve Kelvin I will gladly accept pull requests from your forks or discuss them with you through an issue.|||

kelvin - Kelvin - The hue bot