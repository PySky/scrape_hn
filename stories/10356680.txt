A project I’m working on currently requires me to build a server side agent daemon. Due to the nature of the agent, a live connection requires to be open to the managing node server, using websockets. PHP is not very well suited to this kind of workload, so the obvious choice was to develop it using NodeJS. I will build a Docker image containing the application, as well as provide a standalone binary for people who don’t have Docker, but also don’t want the hassle of installing NodeJS.

For the purposes of this tutorial, or walk-trough if you will, we will create a very, very simple NodeJS application, which prints “Hello world from NPM”. And I will do it only with available Docker images - apart from them, there is no need to install node, npm or any other software on the server you’ll be working. All you need is Docker.

For your application, create a folder structure like this:

The file should contain only one line for this test, but basically, this is where you would write your application.

and the other file, , should contain something like this:

The settings under enable us to run the application with a common command: . This allows us to use any filename in the app, so we don’t need to know about when building a Docker image.

The first thing we should do is to run the application from a Docker image. There is an official build of node on Docker Hub, and we will use it to run the application.

So, just in case you didn’t know before, this is how you run a Docker image containing NodeJS, which runs your application. Just to make things slightly easier for running on various machines, we should still build a Docker image. In the root folder, the one which contains the folder , create a file named . I based mine of a gist I found here.

This is basically a recipe, which will create a Docker image with all the required dependencies, and will run your application on startup. Now that you have created this file, we can build a Docker image using the following command:

The docker build might take a few minutes, depending on how fast it will download all the packages (node has about 100+ packages as dependencies). After the docker build is finished, your docker image is created - you can list images using .

So, the image was created. Lets run it!

But, providing a 360mb docker image for a simple “Hello world” application tells us that this might not be the best use case for docker. You can package your application in this way, but it doesn’t really shine as the best example of using Docker.

Thankfully, we have an alternative: nexe

Lets use the Docker nexe image to try and build our app:

Success! The application was successfully packaged, weighing in at about 11MB, which is a great deal less than the Docker image. And we have 3 different ways to run our agent application on any number of servers:

Final notes - using Docker instead of a package manager is not the best thing. The Docker image for node is about 600MB. If you’re sensitive about space and run a double digit number of distinct Docker images, it’s worth keeping an eye on disk usage.

The plus side of using Docker instead of a package manager is obvious - it is incredibly clean. If you don’t use something, just wipe the container and the image, free up space instantly - and never worry if you need specific libraries for one piece of software, and other versions of the same libraries for another.

I still think it’s a bit of an elaborate way to achieve something, but when you want that something, whatever it is, to be repeatable, then it seems to be worth the effort very quickly.

I'm the author of API Foundations in Go and my latest book, 12 Factor Apps with Docker and Go. You should read both books if you want to learn more about Docker and Go. I write about technology, Docker, Go, Node, PHP and databases most of the time. I am always interested in implementing best practices in whatever I do. You can reach out to me on Twitter.

I'm available for consulting / development jobs. Fixing bottlenecks and scaling services to cope with high traffic is my thing. I specialize in back-end development with a focus on providing APIs for consumption in Angular, React, Vue.js and other front-end technology stacks.|||

