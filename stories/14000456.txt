In the previous article I showed you how we can run lua scripts inside Go applications. In real world scenarios you'd want to put in more effort to make sure that we are guarded against rogue scripts.

For example, if we're allowing third parties to pass arbitrary scripts to our application, we may want to ensure that this script has no access to networking or system libraries.

Another example of a malicious script, is a script that runs indefinitely. There could be an error in a loop causing the script to never finish. We may also want to ensure that we're having more control around how much memory can be allocated in the VM.

These are the topics I am going to cover in this post.

Let's say we have this script:

What this script does it prints one line to the screen and then prints the global environment. If we run this script we may see something similar to this.

As you can see there's a bunch of modules loaded. Here is the global environment table which tells what's available to you script. Lua is really awesome because it allows us to easily change this table. By changing this table we can expose new functionality to the script or make certain functionality unavailable.

Let's say we want to make only function available and nothing else. We're gonna start by writing our own implementation in Go. I'm going to borrow one from Gopher-Lua standard lib.

This function follows the signature. When we call a function, the parameters are passed via stack, we're just popping everything from the stack and printing them out. I also prefix each line with a timestamp. We return because we didn't push anything onto the stack ( returns nothing).

Next we have to define symbol table that we want to export and we need a helper function to set the global environment.

Here looks up where the global environment lives in the VM and exports functions under in that location.

We have our own function defined and we have export table ready. The function is a helper function that allocates new Lua VM. When we're creating a new state we specify that we should not load any libraries and we want to construct global environment ourselves. If we run our lua script again we're going to see the output of the first print statement and an exception because we no longer have available.

Gopher-Lua makes it really easy for us to guard against long running scripts. We can pass in a Context structure to cancel long running scripts.

Any script running for more than a second will throw an exception. An infinite loop script such as this one

We can also control VM stack and heap size when creating new VM.

Gopher-Lua has fixed stack and heap, however you may want to control these values depending on the type of tasks you're trying to perform.

We can combine these three techniques to completely isolate our Lua scripts inside Go applications. Entire source code is available on github.|||

Learn how to jail Lua scripts in your Go apps.