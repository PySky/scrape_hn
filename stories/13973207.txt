I was playing a lot with radare2 in the past year, ever since I began participating in CTFs and got deeper into RE and exploitation challenges. I found radare2 very helpful with many CTFs tasks and my solutions had shortened significantly. It’s sometimes also my go-to tool for malware analysis tasks such as configuration retrievals. Sadly, I believe that only few people are familiar with radare2. It might be because they’re afraid to break out of their comfort zone (IDA Pro, OllyDBG, gdb) or they have simply not heard of it. Either way, I honestly believe that you must include radare2 in your toolbox.

Because I got really enthusiastic about the project and I want more and more researchers to be familiar with it, use it and hopefully contribute to the project, I decided to create a series of articles and use-cases of r2. Since these articles aim to teach you the basics of radare2, its features and capabilities, I’ll explain much more than you actually need to know in order to solve each task.

radare2 is an open source framework for reverse engineering and binaries analysis which implements a rich command line interface for disassembling, analyzing data, patching binaries, comparing data, searching, replacing, visualizing and more. It has great scripting capabilities, it runs on all major platforms (GNU/Linux, .Windows *BSD, iOS, OSX, Solaris…) and it supports tons of architectures and file formats. But maybe above all of its features stands the ideology – radare2 is absolutely libre.

This framework is composed of a set of utilities that can be used either together from r2 shell or independently – We’ll get familiar with tools such as rahash2, rabin2, ragg2. Together they create one of the most powerful tools in the field of static and dynamic analysis, hex editing and exploitation (I’ll dive deeper in the following articles).

It is important to note that r2’s learning curve is pretty steep – although r2 have a GUI and a WebUI, none of them is quite enough to compete with the GUI or the convenience of IDA, IMHO. The CLI, however, including its Visual Mode, is still the core of radare2 and where its power lays. Because of its complexity I’ll try to make things as clear and simple as I can.

Before we begin you can check out the “Unfair comparison between r2, IDA Pro and Hopper” to get an idea of what we’re dealing with.

Radare2’s development is pretty quick – the project evolves every day, therefore it’s recommended to use the current git version over the stable one. Sometimes the stable version is less stable than the current git version!

If you don’t want to install the git version or you want the binaries for another machine (Windows, OS X, iOS, etc) check out the download page at the radare2 website.

As I said before, it is highly recommended to always use the newest version of r2 from the git repository. All you need to do to update your r2 version from the git is to execute:

And you’ll have the latest version from git. I usually update my version of radare2 in the morning, while watching cat videos.

I Can’t think of a reason for you to uninstall radare2 so early in the article but if you do have you can simply execute:

You can download the first challenge here.

Now that radare2 is installed on your system and you have downloaded the binary, we are ready to start exploring the basic usage of radare2. I’ll work on a Remnux machine but most of the commands and explanations (if not all of them) would be the same for Windows machines and others.

As most command line utilities, the best approach to reveal the list of the possible arguments is to execute the program with the   flag.

I won’t paste here the full output, Instead I’ll point out those which I usually use in my daily work:

Whenever I face a new challenge I first want to get information about the binary. Let’s extract it using one of the most powerful tools in r2 framework:  .

We’ll call rabin2 with the   flag which prints binary info such as operating system, language, endianness, architecture, mitigations (canary, pic, nx) and more.

As you can clearly see, our binary is a 32bit ELF file, not stripped and dynamically linked. It doesn’t have exploit mitigation techniques – a useful information for the next articles when we’ll learn to exploit using radare2.

Now let’s run it and see what the program does.

The first time we run it we receive a message saying “Nop, Wrong argument”. Assuming we need to provide an argument for the program we run it again, this time with ‘abcdef’ as an argument. We failed again. Obviously some password is needed in order to solve this crackme.

We spawned a radare2 shell and it automatically greets us with one of its fortunes. Some are very funny and some are actually useful, you can execute command to print a fortune. Now r2 shell is waiting for our commands and shows us the address in which we’re currently at (0x08048370). By default you’ll automatically be at the entrypoint address. Let’s see if it’s correct:

We used the command that prints the entrypoints of the binary. r2 commands are a succession of meaningful letters. In this example stands for info >> entrypoint. Hence the commands are easy to remember once you’re familiar with radare2 capabilities. But you don’t have to remember all commands – you can simply add after (almost) every letter to get information about the command and its subcommands.

The  command aim to get information from the opened file, it’s actually  (mentioned earlier) implemented in radare2 shell.

radare2 doesn’t analyze the file by default because analysis is a complex process that can take a long time, especially when dealing with large files. To read more about analysis and the choice not to perform analysis at startup you can read this post at radare2 blog.

Obviously analysis is still a possiblity and r2 has lots of analysis types. As I noted before, we can explore the analysis options by adding ‘ to command.

I usually begin with executing  (analyse all). The name is misleading because there is a lot more to analyze (check but it’s enough for most of the binaries I examined. This time we’ll start straight with to make things simpler and due to its small size. You can also run radare2 with the flag to analyze the binary straight at startup using (e.g ).

After the analysis radare2 associates names to interesting offsets in the file such as Sections, Function, Symbols, Strings, etc. Those names are called ‘flags’. Flags can be grouped into ‘flag spaces’. A flag space is a namespace for flags of similar characteristics or type. To list the flag spaces run  .

We can choose a flag space using  and print the flags it contains using . To pass several commands in a single line we can use a semicolon (i.e ).

As we can see radare2 flagged up the imports used by the binary – we can see the well-known ‘strcmp’, ‘strcpy’, ‘puts’, etc., along with their corresponding addresses. We can also list the strings flagspace:

We see that r2 flagged up some offsets as strings, some sort of variable names. Now let’s have a look at the strings themselves. There are several ways to list the strings of the file, and you should choose the one suits your goal the most.

– List strings in data sections

 – Search for Strings in the whole binary

We already know most of these strings – we saw them when we executed our binary, remember? We didn’t see the “Success” string though, this is probably our ‘good boy’ message. Now that we got the strings, let’s see where they’re used in the program.

This command reveals us more of radare2 features. The  command is used to “find data/code references to this address” (see ).  is like foreach iterator sign, used to repeat a command over a list of offsets (see ), and  is a wildcard for all the flags that start with . This combination helps me not just to list the strings flags but also to list the function name, where it’s used and the referenced instruction. Make sure to select the strings flagspace (default, use ) before.

As I mentioned before, all this time we were at the entrypoint of the program, now it’s time to move on. The strings we just listed are all referenced by ‘main’. in order to navigate from offset to offset we need to use the ‘seek’ command, represented by . As you already know, appending  to (almost) every command is the answer to all you problems.

So basically the seek command accepts an address or math expression as an argument. The expression can be math operations, flag, or memory access operations. We want to seek to the main function, we can do it by executing  but let’s see first what other functions radare2 flagged for us using the  command (Analyze Functions List).

Sweet! There are the imports we saw before, some .ctors, the entrypoints, libc, main and two interesting functions named ‘sym.beet’ and ‘sym.rot13;’.

It’s time to look at some assembly (yay!). We first need to seek to the function using  and then disassemble it using  (Print Disassemble Function). Pay attention how the address at the prompt changed to the address of .

From reading the assembly we can generate a quick pseudo-code:

radare2 is equipped with a very strong and efficient suit of Visual Modes. The Visual Mode is much more user-friendly and takes the reversing using r2 to a whole new level. Pressing   will bring us to the Visual Mode screen. Use / to change between modes. At the top of the screen you can see the command which was used to generate the view. Navigate to the disassembly view using .

You can go up and down using  and  respectively. Pressing whenever you’re on or will take you to the destination address. Next to each and  there’s a number inside square brackets, pressing the number on your keyboard will take you to the function/address.

As always in radare, pressing  will take you to the help screen, you can explore the commands of the Visual Mode.

Use /  to list the references to/from the function respectively. Use the numbers to jump  to a reference.

You can add or remove comment using .

can be used to mark specific offset with a key of your choice. Press  to go to your key.

As in similar disassemblers, radare2 has Graph view. You can access Visual Graph mode from your shell by running , move Left/Down/Up/Right using / / /  and jump to a function using  and the key shown next to the jump call (e.g ).

Use  to list all the commands and make sure not to miss the  command.

After a short break from disassembling. Let’s go back to it and now explore the function . As we saw earlier, our binary checks the result of  that is called with the argument we pass to the program. We can print  using several methods, here are some of them:

Here’s how  looks like in Visual Graph Mode:

We can see that the given argument is copied to a buffer. The buffer is located at . ‘local_88h’ is actually 0x88  which is 136 in decimal. We can see this by executing . To execute r2 command from inside Visual Graph mode use  and then write the command.

Hence, 128 bytes are allocated for the buffer in the stack, the next 4 bytes would be the saved pointer of the previous stack frame, and the next 4 bytes will be the return address, this sums up to 136.

After the buffer is filled with the given argument, it is then compared with the result of a function named . Rot-13 is a famous substitution cipher used a lot in CTFs and Crackmes. The function is called with 9 hexdecimal values that seems like radare failed to recognize as a string. We can do it manually using  on these addresess.

is used to set specific offset as string (see ).  is an iterator (see ) and the addresses are the ones from  which radare2 didn’t identify as contained string. After executing the command the graph will refresh (if it doesn’t, use ) and will look like this:

Great! Looks like the string that was hiding is “Megabeets” (pushed in reversed order due to endianness).

The binary performs rot13 on “Megabeets” and then compares the result with the argument we passed it using . Luckily we don’t need to work hard because r2 framework already include rot13 cipher in its  utility.

rahash2 performed rot13(“Megabeets”) and resulted with “Zrtnorrgf”. By using  we can execute shell commands from within r2 shell as in  . We can assume that “Zrtnorrgf” is compared with our input. Let’s open the binary in debug mode with “Zrtnorrgf” as an argument using  (check  ) and see what we’ll get.

Woohoo! We received the success message and solved the crack me. After getting the success message we can finally say that what the binary is doing is to take the first argument we pass it and compare it with rot13(“Megabeets”) which is “Zrtnorrgf”.

You can see the full source-code of the crackme here.

Here the first part of our journey with radare2 is coming to an end. We learned about radare2 just in a nutshell and explored only the basics of the basics. In the next parts we’ll learn more about radare2 capabilities including scripting, malware analysis and exploitation. I’m aware that it’s hard, at first, to understand the power within radare2 or why should you put aside some of your old habits and get used working with radare2, but I promise that having radare2 in your toolbox is a very smart step whether you’re a reverse engineer, a CTF player or just security enthusiast.

Above all I want to thank Pancake, the man behind radare2, for creating this amazing tool as libre and open, and to the amazing friends in the radare2 community that devote their time to help, improve and promote the framework.

Please post comments or message me privately if something is wrong, not accurate, needs further explanation or you simply don’t get it. Don’t hesitate to share your thoughts with me.

Subscribe on the left if you want to get the next articles straight in your inbox.|||

I was playing a lot with radare2 (also known as r2) in the past year, ever since I began participating in CTFs and got deeper into RE and exploitation...