No, it is not. You don't even need a testing framework for it.

 You don't even need to write the test in a separate file or class.

You just need to exit with code 1. This is enough to fail a Jenkins build and a Makefile!

Why is a unit test useful?

What do you test? when the logic is "complex enough" I know it could be broken 6 months down the line, due to "that one small change" - or that I'd spend time building it with print statements. Example from my own code.

Here, I'll show you the most basic way to unit testing with four languages: Bash, Python, Node.js, Scala, just to prove the point.

These examples are for a very basic piece of code and are intentionally minimalistic, to demonstrate that you needn't use a test framework to get started with - though one will be very necessary when you scale your application.

Here's a bash script with a basic assertion and some main code:

Exit code is 0. But if we broke the function, and put 2 instead of 1, we get:

This is easy to achieve in any language really. Python assertions:

Comes with assertions built in.

You can get started light with several assertions and work your way up to proper test suites.

To make testing more organised. You get:

Now you have no excuse for not writing at least a few tests in your code.|||

You don't even need a framework for unit testing. You don't even need to write the test in a separate file or class.