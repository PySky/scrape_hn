Pickaxe uses SQL statements combined with CSS selectors to pick out text from a web page. If you know SQL and a little about CSS selectors and want to capture data from the web, this is the tool for you.

Found here. It requires .NET framework 4.5. Pickaxe.zip contains the GUI editor and only runs on windows. The Pickaxe-Console.zip is the command line version that runs on non-windows platforms using mono as well as windows. See Command Line section below.

Download Pickaxe.zip from above and unzip the contents and double click on Pickaxe.Studio.exe to run the GUI editor. Below is a screen shot of the editor. A full runnable example that scrapes a forum I host is found here. Others can be found here.

Download page returns a table with columns url, nodes, date, size. The statement below downloads aviation weather information for airports in Texas.

Select the nodes we are interested in. To accomplish, set the nodes equal to a css expression. The css selector below gets all tr nodes that are under the table with class asos.

The pick expression picks out nodes under each node specified in the where clause. Pick takes a css selector. In this case, we are getting data in the td elements under each tr element. After the pick css selector, a part of the element can be specified.

We create a memory table to store state strings then we insert states into it. The nested download select statement allows the download page statement to download multiple pages at once.

A download page statement can use with (thread(2)) hint. The download page statement will then use the number of threads specified to download the pages resulting in much better performance.

Must be first statement in program. If the expression in the test block returns any rows, the proxy is considered good and all http requests will be routed through it. If more than one passes they are used in Round-robin fashion.

Specify type as identity and it will auto increment.

There are three different ways to store results. In memory, files, and sql databases. An example of each is listed below.

Store results in memory. The insert overwrite statement overwrites existing data in the buffer--if any--while insert into just appends to existing data.

Store results in Microsoft SQL Server. The mssql buffer definition must match the sql table structure.

If a page renders the HTML client side with javascript a simple js hint is all that is needed. Only use if needed as performance is slower.

For more control, specify the HTML element to wait for -- will wait until javscript renders the element -- and the time to wait before timing out (in seconds).

Run Javascript on the downloaded pages. Must return a javascript object or array of objects. The url variable is given by the framework and stores the url of the downloaded page.

Capture the commit information from this page.

The match expression uses regular expressions to match text. In this case, it is just taking the numbers of the ip address.

A match expression can be followed by a replace. In this case, we replace the dots with dashes.

Used mostly to generate urls.

The Pickaxe-Console.zip contains the command line version. Run pickaxe.exe without any arguments to run in interactive mode. Type in statements and run them by ending statement with a semicolon. Pass the file path to run the program. Command line arguments can be passed to the script.

Get command line values in program. The ?? is used to assign a default value if args are not passed on command line.

To run in interactive mode, run pickaxe.exe without any arguments. Now type in statements. When you want the statement to run, end with a semicolon. The statement will then be executed. See screen shot below:|||

pickaxe - SQL Based DSL Web Scraper/Screen Scraper that runs on C# / Mono