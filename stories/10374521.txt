I've been a Vim user for a few years now. Before then I used emacs and emacs-like editors (without ever going too deep into them), but recurrent wrist pain forced me to change my usage patterns. Vim, as it turned out, was great for my wrist, and where I would not be able to work after 4-6 hours, I could now work for way longer than 8 every day, which I still hope to avoid.

The first thing about vim that appealed to me was the use of modes. When you think of it, using as a prefix for file handling shortcuts in emacs, or just holding or is modal editing. The difference is that Vim has different ones, and the keys leading to them only need to be pressed once.

That's where, I think, the biggest part of the learning curve is spent. Going from that series of implicit modes based on a given shortcut or prefix ( , , etc.) to an explicit set that must be switched in and out of manually.

Where the fun begins is when you figure out Vim is its own language for the common shortcuts.

First of all, it has verbs, some of which are:

It has actions to move around, some being:

Commands that select words or directions ( and for example) can also take a length prefix, so that means '10 next words'.

There are also ways to search for the next instance of something, including:

The last 6 ones have to be followed by a character: will put the cursor before the next in the text, and will put the cursor on the next

It has a few modifiers that can be chained with verbs, notably:

You build your commands by chaining them together:

The commands become complex, but they're built from simple components expressing movements and specific actions.

You also have specific contexts, such as the visual mode ( ), which will let you select text, the same as if you were dragging a mouse around. For example will mean 'select ( ) 3 lines down ( ) and then 'till the letter f ( )'. That selection can then be passed to any of the verbs ( , , , , etc.) to operate on it. In this case, doing would delete the complex selection.

Vim commands look like arcane incantations, but they're just composing a smallish set of functions together. Once that is learned, remembering specific commands and committing them to muscle memory is the hardest part. After that, each new command discovered has large benefits and usability because if it works in one context, it likely works in all other ones.|||

