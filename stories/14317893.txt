I worked on a new feature for my Lisp this week: an explicit stack and stacktraces. Stacktraces make debugging easier by improving error messages. An explicit stack makes them possible, and is necessary to implement continuations later.

The stack is threaded through the interpreter with a StateT monad transformer. I chose to put entire functions inside callframes instead of just their identifiers, because this makes implementing continuations easier.

Before evaluating code, an empty stack is created. Afterwards, the action is extracted from the StateT transformer to be executed.

When a function is invoked, it is pushed onto the stack along with it’s arguments. Afterwards, it’s popped off the stack, and it’s result is returned.

Errors needed to be able to carry a call stack.

I also needed a new function to use with the monad, capturing the stack.

When printing an error, the message is displayed as before, while the callframes are printed line by line below it.|||

I worked on a new feature for my Lisp this week: an explicit stack and stacktraces. Stacktraces make debugging easier by improving error messages. An explicit stack makes them possible, and is necessary to implement continuations later....