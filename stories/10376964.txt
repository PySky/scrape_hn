Long awaited and now we´ve finished it! New major release of ArangoDB 2.7 is ready for download. First of all a big thanks to our community for your great support! We´ve implemented a lot of your ideas! After your feedback to RC1 and RC2 we are happy to bring a new major release to the world. With ArangoDB 2.7 we increased our performance even further and improved query handling a lot.

AQL Improvements – Ease of Use and Performance

Find a detailed overview in our blogpost about RC1.

Furthermore we fixed some issues and enabled Foxx apps to be installed underneath URL path , so they can be (intentionally) accessed without authentification. The extensibility for your data-centric microservices got even bigger.

Please find all details below or on github

added “special” password ARANGODB_DEFAULT_ROOT_PASSWORD. If you pass ARANGODB_DEFAULT_ROOT_PASSWORD as password, it will read the password from the environment variable ARANGODB_DEFAULT_ROOT_PASSWORD

added allowImplicit sub-attribute in collections declaration of transactions. The allowImplicit attributes allows making transactions fail should they read-access a collection that was not explicitly declared in the collections array of the transaction.

allow Foxx apps to be installed underneath URL path /_open/ , so they can be (intentionally) accessed without authentication.

read server configuration files before dropping privileges. this ensures that the SSL keyfile specified in the configuration can be read with the server’s start privileges (i.e. root when using a standard ArangoDB package).

fixed request statistics aggregation When arangod was started in supervisor mode, the request statistics always showed 0 requests, as the statistics aggregation thread did not run then.

additionally allow the following characters in document keys:

The syncCollection() function can be used as follows:

This allows synchronizing the data of a single collection from a master to a slave server. Synchronization can either restore the whole collection by transferring all documents from the master to the slave, or incrementally by only transferring documents that differ. This is done by partitioning the collection’s entire key space into smaller chunks and comparing the data chunk-wise between master and slave. Only chunks that are different will be re-transferred.

This should reduce the need to compact directly after loading a collection when a collection datafile contained many insertions and updates for the same documents. It should also prevent from re-compacting already merged datafiles in case not many changes were made. Compaction will also make fewer index lookups than before.

added extra AQL functions for date and time calculation and manipulation. These functions were contributed by GitHub users @CoDEmanX and @friday. A big thanks for their work! The following extra date functions are available from 2.7 on: : Returns the day of year number of date. The return values range from 1 to 365, or 366 in a leap year respectively. : Returns the ISO week date of date. The return values range from 1 to 53. Monday is considered the first day of the week. There are no fractional weeks, thus the last days in December may belong to the first week of the next year, and the first days in January may be part of the previous year’s last week. : Returns whether the year of date is a leap year. : Returns the quarter of the given date (1-based): DATE_DAYS_IN_MONTH(date): Returns the number of days in date‘s month (28..31). : Adds amount given in unit to date and returns the calculated date. unit can be either of the following to specify the time unit to add or subtract (case-insensitive): amount is the number of units to add (positive value) or subtract (negative value). : Subtracts *amount given in unit from date and returns the calculated date. It works the same as , except that it subtracts. It is equivalent to calling with a negative amount, except that can also subtract ISO durations. Note that negative ISO durations are not supported (i.e. starting with , like ). : Calculate the difference between two dates in given time unit, optionally with decimal places. Returns a negative value if date1 is greater than date2. : Compare two partial dates and return true if they match, false otherwise. The parts to compare are defined by a range of time units. The full range is: years, months, days, hours, minutes, seconds, milliseconds. Pass the unit to start from as unitRangeStart, and the unit to end with as unitRangeEnd. All units in between will be compared. Leave out unitRangeEnd to only compare unitRangeStart. : Format a date according to the given format string. It supports the following placeholders (case-insensitive): %yyyyyy: year (-009999 .. +009999), with sign prefix and padded to length of 6 %ss: second (00..59), padded to length of 2 %xxx: day of year (001..366), padded to length of 3

the function and the module used some internal library function that handled the sending of HTTP requests from inside of ArangoDB. This library unconditionally set an HTTP header in all outgoing HTTP requests. This has been fixed in 2.7, so is not set automatically anymore. Additionally, the header is not set automatically either. If client applications desire to send these headers, they are free to add it when constructing the requests using the function or the request module.

IMPORTANT CHANGE: the filenames in dumps created by arangodump now contain not only the name of the dumped collection, but also an additional 32-digit hash value. This is done to prevent overwriting dump files in case-insensitive file systems when there exist multiple collections with the same name (but with different cases). For example, if a database has two collections: and , previous versions of ArangoDB created the files This did not work for case-insensitive filesystems, because the files for the second collection would have overwritten the files of the first. arangodump in 2.7 will create the following filenames instead: These filenames will be unambiguous even in case-insensitive filesystems.

IMPORTANT CHANGE: make arangod actually close lingering client connections when idle for at least the duration specified via . In previous versions of ArangoDB, connections were not closed by the server when the timeout was reached and the client was still connected. Now the connection is properly closed by the server in case of timeout. Client applications relying on the old behavior may now need to reconnect to the server when their idle connections time out and get closed (note: connections being idle for a long time may be closed by the OS or firewalls anyway – client applications should be aware of that and try to reconnect).

IMPORTANT CHANGE: when starting arangod, the server will drop the process privileges to the specified values in options and instantly after parsing the startup options. That means when either or are set, the privilege change will happen earlier. This may prevent binding the server to an endpoint with a port number lower than 1024 if the arangodb user has no privileges for that. Previous versions of ArangoDB changed the privileges later, so some startup actions were still carried out under the invoking user (i.e. likely root when started via init.d or system scripts) and especially binding to low port numbers was still possible there. The default privileges for user arangodb will not be sufficient for binding to port numbers lower than 1024. To have an ArangoDB 2.7 bind to a port number lower than 1024, it needs to be started with either a different privileged user, or the privileges of the arangodb user have to raised manually beforehand.

When ArangoDB is started/stopped manually via the start/stop commands, the main process will wait for up to 10 seconds after it forks the supervisor and arangod child processes. If the startup fails within that period, the start/stop script will fail with an exit code other than zero. If the startup of the supervisor or arangod is still ongoing after 10 seconds, the main program will still return with exit code 0. The limit of 10 seconds is arbitrary because the time required for a startup is not known in advance.

Accessing a not-yet loaded collection will automatically load a collection on first access. This flag controls what happens in case an operation would need to wait for another thread to finalize loading a collection. If set to true, then the first operation that accesses an unloaded collection will load it. Further threads that try to access the same collection while it is still loading immediately fail with an error (1238, collection not loaded). This is to prevent all server threads from being blocked while waiting on the same collection to finish loading. When the first thread has completed loading the collection, the collection becomes regularly available, and all operations from that point on can be carried out normally, and error 1238 will not be thrown anymore for that collection. If set to false, the first thread that accesses a not-yet loaded collection will still load it. Other threads that try to access the collection while loading will not fail with error 1238 but instead block until the collection is fully loaded. This configuration might lead to all server threads being blocked because they are all waiting for the same collection to complete loading. Setting the option to true will prevent this from happening, but requires clients to catch error 1238 and react on it (maybe by scheduling a retry for later). The default value is false.

When CTRL-C is pressed in arangosh, it will now print a first. Pressing CTRL-C again will reset the prompt if something was entered before, or quit arangosh if no command was entered directly before. This affects the arangosh version build with Readline-support only (Linux and MacOS). The MacOS version of ArangoDB for Homebrew now depends on Readline, too. The Homebrew formula has been changed accordingly. When self-compiling ArangoDB on MacOS without Homebrew, Readline now is a prerequisite.

increased default value for collection-specific value from 1 to 8 Collections created from 2.7 on will use the new default value of if not overridden on collection creation or later using . The value determines the number of buckets to use for indexes of type , and . Having multiple index buckets allows splitting an index into smaller components, which can be filled in parallel when a collection is loading. Additionally, resizing and reallocation of indexes are faster and less intrusive if the index uses multiple buckets, because resize and reallocation will affect only data in a single bucket instead of all index values. The index buckets will be filled in parallel when loading a collection if the collection has an value greater than 1 and the collection contains a significant amount of documents/edges (the current threshold is 256K documents but this value may change in future versions of ArangoDB).

This function was introduced in older versions of ArangoDB with a less powerful query optimizer to retrieve data from a skiplist index using a clause. It was marked as deprecated in ArangoDB 2.6. Since ArangoDB 2.3 the behavior of the function can be emulated using regular AQL constructs, e.g. FOR doc IN @@collection FILTER doc.value >= @value SORT doc.value DESC LIMIT 1 RETURN doc the function for simple queries does not accept negative input any longer. This feature was deprecated in 2.6.0. In some cases JavaScript exceptions would re-throw without information of the original problem. Now the original exception is logged for failure analysis. based REST API method PUT on the cursor API and make it use AQL internally. The change speeds up this REST API method and will lead to additional query information being returned by the REST API. Clients can use this extra information or ignore it. Foxx Queue job success/failure handlers arguments have changed from to . added Foxx Queue job options , and to automatically re-schedule jobs when they are completed. added Foxx manifest configuration type to mask values in the web interface. fixed default values in Foxx manifest configurations sometimes not being used as defaults. fixed optional parameters in Foxx manifest configurations sometimes not being cleared correctly. Foxx dependencies can now be marked as optional using a slightly more verbose syntax in your manifest file. converted Foxx constructors to ES6 classes so you can extend them using class syntax. Use more madvise calls to speed up things when memory is tight, in particular at load time but also for random accesses later. The web interface now has a new design. The API documentation for ArangoDB has been moved from “Tools” to “Links” in the web interface. The “Applications” tab in the web interfaces has been renamed to “Services”.|||

