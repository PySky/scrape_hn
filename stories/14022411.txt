This article aims to acquaint web developers with the command line tool , which is usually available out-of-the-box on any Mac or Linux machine. Using windows, we recommend to run from Git bash, which comes with the official Git release package.

The examples I provide will use WordPress and our Universal App, so there is a focus on PHP developers, but the techniques can be applied to many other hosting environments easily.

A note on convention: When talking about the actual command line binary, I'll be using . When talking about the tool abstractly, I'll be using just rsync. Also: all commands are meant to be executed from your local machine from within your local project directory (=uppermost directory, where your web site or web application is located on your disk), unless explicitly stated otherwise.

Foremost, it's a synchronization tool. A tool to synchronize files over the network, to be exact. Hence the name rsync, which is a shorthand for remote synchronization. Of course, you can use it also to sync files between folders on your local machine. Either way, it is rather simple to get started and hard to master. Or maybe not hard, but there are a lot of optimization and edge-case options, which you might never, ever need - or maybe you do.

As every good open source tool, rsync builds open or connects with other open source software. rsync utilizes the command line SSH client (usually from OpenSSH) as a transport layer to synchronize files to remote machines without any other requirement then having an SSH server available and the binary installed. Again: Most Linux installations bring that out-of-the-box, so there is a very good chance that you can use it with about any machine you have SSH access to. Including your Universal App on fortrabbit.

In short: It's incredibly fast and has been proven reliable in over 20 years of service. Just to give you some numbers, here two benchmarks on uploading a recent WordPress (4.7.2, as of writing this article) via SFTP and via rsync. The unpackaged size is about 25MiB and I am using an uplink with 5Mbit upstream. Also I'll be using a command line SFTP client, so I can do without screenshots.

That took nearly 5 minutes. After cleanup of all remote files, now the rsync run:

As you can see, that only took about 30 seconds, which is about 10 times faster than the SFTP upload. How come? Well, in essence: SFTP is a file based protocol. This means: it works a bit like HTTP. Each file upload is a single "request", if you will, so all protocol overhead is applied to every transferred file.

rsync, on the other hand, doesn't work that way. Simplified: it first builds a local data set (all files which should be transferred) and a remote data set (all files which are already there) and then sends a stream of the missing or changed files from your local machine through SSH "in one operation" to a remote rsync process which then writes it to the disk. So there is no "per file" overhead whats-o-ever, which makes it pretty fast in this case.

In a sentence, utilizing the HTTP metaphor: SFTP makes one request per transferred file. rsync makes one request in total.

That's just the start. rsync performances becomes really, really impressive once you deal with only file changes in development.

Ok, let's dive in with the command I used above:

Let me break that down:

Before going into more detail, let me first show you three additional, simple examples on how to sync two local directories the reverse of the above command and how to sync two remotes:

Alright, this should give you an idea on simple it is to synchronize two locations.

In the above and following examples, I specify an SSH remote, using the schema . This way, will use the command line client automatically. rsync comes with it's built-in own "rsync protocol" for remote synchronization, which is more interesting for admins, than developers, so I won't elaborate on it more than that. Just so you have seen it and can identify it: the URL schema for rsync protocl would look like: .

Should you need to set specicic SSH options, for example, if you need to provide a specific private key, then you can use the option, which stands for "remote shell" and can be shortend to . Here an example:

You can add use any command line option(s) you want.

This is where rsync can play on it's real strengths. Say you have changed ten files in your local code set and want to deploy them now. With SFTP, unless your SFTP client has some kind of synchronization add-on, you would now copy each of those files manually. This can be quite annoying: Searching those files in your SFTP client, transmitting each. Lots of mouse pushing or repetitive command line. It also can be dangerous: Working for a couple of days on a larger patch, than forgetting about a single critical file. Not good.

Now, this is where comes in. As mentioned before, will first build a local set of files and directories and a remote set of files and directories. For each item in either set it will generate a check value. This check value, can be either the timestamp of the last change of a file, the size of a file, the current permissions or even a checksum (think MD5) of the file contents. Or any combination of those. Using the option (in detail explained below), rsync is gonna use timestamp + file size which is a good balance between performance and accuracy.

In short: rsync will detect those ten files you have changed over the days of development by checking their local timestamp and file size against the remote timestamp and file size. Then it will transfer only those changed (or new) files.

At this point, let me introduce you to the handy option, which can be shortened to just which can be merged with our other options to :

Now, running this will print out everything that would transfer, as shown above - without doing anything. I recommend to always execute a dry run before actually syncing. Same as missing a critical file, it can be equally bad to transfer a change prematurely. Using dry run, you can at least check whether that would be the case.

Once you're sure, that only files which you want to transfer are in the change set, you can just remove the again from the options and execute it normally:

On the other hand, if you spotted a file which should not be transferred (now or ever), you can:

Excluding files is really simple. In essence, you just add . Say we don't want the from the previous example to be transferred, you would just do:

The value of is actually not a file path, but a pattern. This pattern is matched against the files to be transferred. In this case, the following patterns would by synonymous:

Note: Where you put the initial character is important. and are not the same. The former means: Any path, which contains "404.php" is to be excluded. The latter means: Any path, which starts with "/404.php" is to be excluded.

That's not all for patterns, you can also use wildcard characters. For example:

Also, As you can see, in the JPEG example, you can add any amount of options to the command.

If you have a set of files which you always want to exclude or you just don't want to add all excludes on the command line, then you can create an file containing all exclusions and then use it via :

The file name I've used here, is just a hint for readers used to working with Git and it's file, which serves a similar purpose. You can name it however you want, though,.

There is still a lot more you can do with exclude, or rather filtering, patterns. Not only is there , which allows you to finely granulate previous patterns, but there is also . I'll leave you to explore what best fits your use-case. Here is a very interesting blog post by Ira Cooke, showcasing some edge-case scenarios which might give you a hint at what is possible.

Now you know how to synchronize changed and new files to your destination. You also know how to exclude parts of your file set easily. The next thing you probably want to know is how to remove obsolete files. The short answer is: add the option to your command line and you are done.

To give you and example, using the WordPress setup from before: say you deleted this pesky file locally. Now, if you run rsync without the option (and no other added or modified files), rsync would tell that it will do nothing:

Although it marks the folder , as there have been changes (the removal of ), but no changes which is gonna apply. Now, running with the option, then the file will be removed from destination. This is a feature, not a bug, meaning: rsync won't let you down by deleting files without your say-so.

Either way, the first delete run, as always, using the condensed form of the option, will show you exactly what would be deleted:

After you confirm that would only delete, what you want (otherwise: works also to exclude files which are not in your local file set but remote, and you don't want to remove them from remote), you can go ahead and remove the option and run again.

Now, rsync wouldn't be if it would give you not at least four different ways to handle deletes: Besides the flag, there is also , , and (and , but that's another special case in it's own). Those four variants of just let you control when files are remove. This is actually quite handy: When thinking larger amounts of changed files to a live website, you might want to use instead of , so that first all new files are in place, then obsolete files are removed, which makes it more likely that your website is not "interrupted", when handling a request during the synchronization, which relies on files which would be removed.. I think you get the gist.

In all the above examples, I used . Using those two options is a very good default. Here a detailed explanation what they do:

Besides the dry run, remote shell, exclude and delete options, which I've explained above already, here some where handy additional options which you might want to look into:

For an exhaustive list of all the possible options and more in depth info on the above options, check out the official rsync man page.|||

