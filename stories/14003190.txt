ShellCheck is a GPLv3 tool that gives warnings and suggestions for bash/sh shell scripts:

The goals of ShellCheck are

See the gallery of bad code for examples of what ShellCheck can help you identify!

There are a variety of ways to use ShellCheck!

ShellCheck.net is always synchronized to the latest git commit, and is the simplest way to give ShellCheck a go. Tell your friends!

Run in your terminal for instant output, as seen above.

You can see ShellCheck suggestions directly in a variety of editors.

While ShellCheck is mostly intended for interactive use, it can easily be added to builds or test suites.

ShellCheck makes canonical use of exit codes, and can output simple JSON, CheckStyle compatible XML, GCC compatible warnings as well as human readable text (with or without ANSI colors). See the Integration wiki page for more documentation.

If you want to use ShellCheck in Travis CI, setting it up is simple .

The easiest way to install ShellCheck locally is through your package manager.

On systems with Cabal (installs to ):

Using the Docker image can be done like so:

Here the local directory ( $(pwd) ) is mounted into the containers directory "/scripts". The script "myscript.sh" is checked.

This section describes how to build ShellCheck from a source directory. ShellCheck is written in Haskell and requires 2GB of RAM to compile.

ShellCheck is built and packaged using Cabal. Install the package from your system's package manager (with e.g. , , , , or ).

On MacPorts, the package is instead called , while native Windows users should install the latest version of the Haskell platform from https://www.haskell.org/platform/

Verify that is installed and update its dependency list with

this repository, and to the ShellCheck source directory to build/install:

This will compile ShellCheck and install it to your directory.

Add this directory to your (for bash, add this to your ):

Log out and in again, and verify that your PATH is set up correctly:

On native Windows, the should already be set up, but the system may use a legacy codepage. In , and Powershell ISE, make sure to use a TrueType font, not a Raster font, and set the active codepage to UTF-8 (65001) with :

In Powershell ISE, you may need to additionally update the output encoding:

So what kind of things does ShellCheck look for? Here is an incomplete list of detected issues.

ShellCheck can recognize several types of incorrect quoting:

ShellCheck can recognize many types of incorrect test statements.

ShellCheck can recognize instances where commands are used incorrectly:

ShellCheck can recognize issues related to data and typing:

ShellCheck can make suggestions for improving the robustness of a script:

ShellCheck will warn when using features not supported by the shebang. For example, if you set the shebang to , ShellCheck will warn about portability issues similar to :

Issues can be ignored via environmental variable, command line, individually or globally within a file:

Please use the GitHub issue tracker for any bugs or feature suggestions:

Please submit patches to code or documentation as GitHub pull requests!

Contributions must be licensed under the GNU GPLv3. The contributor retains the copyright.

ShellCheck is licensed under the GNU General Public License, v3. A copy of this license is included in the file LICENSE.|||

shellcheck - ShellCheck, a static analysis tool for shell scripts