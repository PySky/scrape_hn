We're going to a implement highly scalable single sign-on login flow for Facebook on a Django backend.

After completing the tutorial, you will be able to:

Authentication: It is the process of determining whether or not somebody really is who they claim to be. In our case, identifying users from requests.

Authorization: Check if the person is allowed to perform an action. For ex: Only users who are logged in can go to the checkout page.

JSON Web Token (JWT): A highly scalable way of authenticating users using tokens. For more information on how it works, watch the video below (not necessary to complete the tutorial)

When to use JWT and when not to?

Loosely speaking, JWT sacrifices control over invalidation in favour of scalability. So you should not use JWT if you need fine-grained control over when authentication tokens are invalidated. If JWT is not for you, you could work with a token based authorization mechanism. Here is an interesting HN discussion on JWT vs sessions. Check out this tutorial on how to set up token based authentication if you decide against JWTs. Alternatively, you could use Django's inbuilt session auth.

My django project is named . So my file system currently looks like this:

adds restful functionality to Django,

 adds JWT auth method and 

 is needed to for Facebook token validation.

To add Adding Facebook login to your webpage to fetch user's email and profile details (name, gender etc.) you need to create a Facebook developer account and a Facebook app. Here is a good resource on how to create Facebook app and get the app id.

Make sure you have Facebook app id (numeric code) before going to the next step. We'll refer to it as for the rest of the tutorial.

Note: If you want to test this on localhost, you need to follow some additional steps listed here.

Suppose you have a login/ sign up button like this on your webpage:

Add following javascript code to your webpage by method of your choice, say in a tag:

For it to work, make sure JQuery is imported. To do that, add following code within :

If everything is set up correctly, in function will have , and other requested fields.

Now you have Facebook access token of the user. You want to send this to the backend and get a JWT token of your app.

Facebook auth is just a way to sign up users without having them fill a form. Tomorrow, you might want to add Google+ sign in too. Thus, it makes sense to have your own login mechanism at the backend where you have control over authentication and authorization.

To do that we need to create a model which will hold user data (Facebook account detail), a view that verifies if the token is valid and stores data in the model. Additionally, you will also need configure Django a little bit to make your authentication system work.

Create a new app in your Django project that will handle user accounts. In your Django root, type:

Add following to your file:

Add entry to on which this view can be called.

How this works: If user creation is successful, we set a set-cookie header in the response. Browser sees the response and sets the cookie against your domain. All future requests to that domain will have that cookie. When Django sees a request, it checks the cookie. If the cookie is valid, user gets authenticated.

The view written in above step sets a cookie in the browser. You want Django to consider requests which have that as authenticated. To do that, you need to do a little configuration:

You are all set now. Endpoint will be used to register your user. All subsequent calls to your Django app will appear as authenticated.

Remember the Javascript function we wrote to get Facebook access token in step 3? If we send that token to , Django will automatically authenticate that and all subsequent requests till the token expires.

Modify method of your script in step 3 as follows:

We want to test if subsequent calls to Django backend are authenticated. Let's write a small endpoint, request some data, and verify if everything is working as expected.

Now open the browser, login via Facebook (with the same button that you built in step 3).

Open a new tab, and enter . You should see details of the user who logged in.

You will also notice that in your cookie store (Developer Console > Application > Cookies), there is a cookie by the name of .

Demo: Check out a working demo here. 

 Code: Find the code we wrote in this tutorial in this repo.|||

We're going to a implement highly scalable single sign-on login flow for Facebook on a Django backend using Json Web Tokens (JWTs)