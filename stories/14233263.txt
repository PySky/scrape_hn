Robert C. Martin (aka “Uncle Bob”) wrote about the OOP vs FP controversy a while back. He explained that at a fundamental level both OOP and FP are about functions that operate on data, so the debate between these two paradigms is rather silly. It borders on religion. Said Uncle Bob:

This was further clarified by Dan Grossman of the University of Washington who discussed OOP vs functional decomposition:

OOP and FP are really flip sides of the same coin. Even the much-touted feature of data immutability that FP adherents love to trumpet is not unique to FP. Java, for example, employs many immutable classes/objects.

Immutability is a technique or pattern, not a language feature. It can be applied in any programming language. JavaScript supports immutability through a special library. Smalltalk could support immutability by convention or discipline. That pure FP languages such as Haskell normally prevent mutability by not allowing assignment is neither here nor there. All FP languages must allow mutability in some manner or in some context if you want to get any real work done.

At the end of the day, OOP and FP each have their appropriate use cases. Neither is a panacea. So why are people debating this at all???|||

Robert C. Martin (aka “Uncle Bob”) wrote about the OOP vs FP controversy a while back. He explained that at a fundamental level both OOP and FP are about functions that operate on data, so the debate…