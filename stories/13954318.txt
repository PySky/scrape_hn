React can be slow. Well, I mean, any medium-size React application can seem slow. But before you start looking for alternatives, you should know that any medium-size Angular or Ember application is slow, too.

The good news is: If you care about performance, it’s fairly easy to make any React application super fast ⚡.️ Here’s how.

What do I mean by “slow”? Let’s take an example:

I’m working on an open-source project called admin-on-rest, which leverages material-ui and Redux to provide an admin GUI for any REST API. This application has a datagrid page, displaying a list of records in a table. When the user changes the sort order, or goes to the next page, or filters the result, the interface isn’t as responsive as I would expect.

The following screencast shows the refresh slowed down five times:

To see what’s happening, I append a  to the URL. This enables Component Profiling since React 15.4. I wait for the initial datagrid to load. Then I open the Chrome Developer Tools on the Timeline tab, hit the “Record” button, and click on a table header to update the sort order.

Once the data refreshes, I hit the “Record” button again to stop recording, and Chrome displays a yellow flamegraph with a “User Timing” label.

If you’ve never seen a flamegraph, it can look intimidating, but it’s actually very easy to use. This “User Timing” graph shows the time passed in each of your components. It hides the time spend inside React internals (you can’t optimize this time anyway), so it lets you focus on optimizing your app.

The Timeline displays screenshots of the window at various stages, this lets me zoom in to the moment I clicked on the table header:

It seems that my app rerenders the component just after clicking on the sort button, before even fetching the REST data. And this takes more than 500ms. The app just updates the sort icon in the table header, and displays a grey overlay on the datagrid to show that the data is being fetched.

To put it otherwise, the app takes half a second to provide visual feedback to a click. Half a second is definitely perceivable — UI experts say that users perceive an interface change as instantaneous when it’s below 100ms. A change slower than that is what I mean by “slow”.

In the flamegraph above, you can see many tiny pits. That’s not a good sign. It means that many components are rerendered. The flamegraph shows that the update takes the most time. Why did the app rerender the entire datagrid before fetching new data? Let’s dig down.

Understanding the causes of a rerender often implies adding statements in functions. For functional components, you can use the following one-liner Higher-Order Component (HOC):

In the example, when the user clicks on a header column, the app emits an action, which changes the state: the list sort order ( ) is updated. This state change triggers the rerendering of the page, which in turn rerenders the entire component. We want the datagrid header to be immediately rendered to show the sort icon change as a feedback to user action.

What makes a React app slow is usually not a single slow component (that would translate in the flamegraph as one large pit). What makes a React app slow is, most of the time, useless rerenders of many components.

You may have read that the React VirtualDom is super fast. That’s true, but in a medium size app, a full redraw can easily render hundreds of components. Even the fastest VirtualDom templating engine can’t make that in less than 16ms.

Here is the component method:

This seems like a very simple implementation of a datagrid, yet it is very inefficient. Each call renders at least two or three components. As you can see in the initial interface screencast, the list has 7 columns, 11 rows, that means 7*11*3 = 231 components rerended. When only the changes, it’s a waste of time. Even though React doesn’t update the real DOM if the rerendered VirtualDom is unchanged, it takes about 500ms to process all the components.

In order to avoid a useless rendering of the table body, I must first *extract* it:

I created a new component by extracting the table body logic:

Extracting the table body has no effect on performance, but it reveals the path to optimization. Large, general purpose components are hard to optimize. Small, single-responsibility components are much easier to deal with.

The React documentation is very clear about the way to avoid useless rerenders: . By default, React always renders a component to the virtual DOM. In other terms, it’s your job as a developer to check that the props of a component didn’t change and skip rendering altogether in that case.

In the case of the component above, there should be no rerender of the body unless the props have changed.

So the component should be completed as follows:

With this optimization, the rerendering of the component after clicking on a table header skips the table body and its 231 components entirely. This reduces the update time from 500ms to 60ms. That’s a net performance improvement of more than 400ms!

The optimization has removed a lot of pits in the graph, and reduced the overall rendering time. I can use the same trick to avoid even more rerenders (e.g. to avoid rendering the sidebar, the action buttons, the table headers that didn’t change, the pagination). After about an hour of work, the entire page renders just 100ms after clicking on a header column. That’s fast enough — even if there is still room for optimization.

Adding a method may seem cumbersome, but if you care about performance, most of the components you write should end up with one.

Don’t do it everywhere — executing on simple components is sometimes slower than just rendering the component. Don’t do that too early in the life of an application either — this would be premature optimization. But as your apps grow, and you can detect performance bottlenecks in your components, add logic to remain fast.

I’m not very happy with the previous change on : because of , I had to transform a simple, functional component to a class-based component. This adds more lines of code, and every line of code has a cost — to write, to debug, and to maintain.

Fortunately, you can implement the logic in a higher-order component (HOC) thanks to recompose. It’s a functional utility belt for React, providing for instance the HOC:

The only difference between this code and the initial implementation is the last line: I export instead of . is like , but without the extra class boilerplate.

I can even be more specific and target only the props that I know may change, using recompose’s instead of :

The function is pure, and I can even export it for unit tests.

The recompose library offers more performance HOCs, like , which does exactly the type of check I did in my own :

I warmly recommend recompose. Beyond performance optimization, it helps you extract data fetching logic, HOC composition, and props manipulation in a functional and testable way.

If you’re using Redux to manage application state (which I also recommend), then connected components are already pure. No need to add another HOC.

Just remember that if only one of the props change, then the connected component rerenders — this includes all its children, too. So even if you use Redux for page components, you should use or for components further down in the render tree.

Also, beware that Redux does the props comparison using strict equality. Since Redux connects the state to a component’s props, if you mutate an object in the state, Redux props comparison will miss it. That’s why you must use immutability in your reducers.

For instance, in admin-on-rest, clicking on a table header dispatches a action. The reducer listening to that action must pay attention to replace objects in the state, not update them:

With this reducer, when Redux checks for changes using triple equal, it finds that the state object is different, and rerenders the datagrid. But had we mutated the state, Redux would have missed the state change, and skipped rerendering by mistake:

To write immutable reducers, other developers like to use immutable.js, also from Facebook. I find it unnecessary, since ES6 destructuring makes it easy to selectively replace a component properties. Besides, Immutable is heavy (60kB), so think twice before you add it to your project dependencies.

To prevent useless renders in (Redux) connected components, you must also make sure that the function doesn’t return new objects each time it is called.

Take for instance the component in admin-on-rest. It grabs the list of records for the current resource (e.g. posts, comments, etc) from the state using the following code:

The state contains an array of all the previously fetched records, indexed by resource. For instance, contains the list of posts:

The function filters this state object to return only the records actually displayed in the list. Something like:

The problem is that each time runs, it returns a new object, even if the underlying objects didn’t change. As a consequence, the component rerenders every time something in the state changes — while id should only change if the date or ids change.

Reselect solves this problem by using memoization. Instead of computing the props directly in , you use a selector from reselect, which returns the same output if the input didn’t change.

Now the component will only rerender if a subset of the state changes.

As for recompose, reselect selectors are pure functions, easy to test and compose. It’s a great way to code your selectors for Redux connected components.

Once your components become more “pure”, you start detecting bad patterns that lead to useless rerenders. The most common is the usage of object literals in JSX, which I like to call “The infamous ”. Let me give you an example:

The prop of the component gets a new value every time the component is rendered. So even if is pure, it will be rendered every time is rendered. In fact, each time you pass an object literal as prop to a child component, you break purity. The solution is simple:

This looks very basic, but I’ve seen this mistake so many times that I’ve developed a sense for detecting the infamous in JSX. I routinely replace it with constants.

Another usual suspect for hijacking pure components is . If you pass a prop by value as second parameter, the cloned element will receive new props at every render.

This has bitten me a couple times with material-ui, for instance with the following code:

Although is pure, it was rendered every time was rendered. That’s because material-ui’s adds a special style to its first child to accommodate for margins — and it does so with an object literal. So received a different prop every time. I solved it using recompose’s HOC.

There are many other things you should do to keep your React app fast (using keys, lazy loading heavy routes, the package, using ServiceWorkers to cache app state, going isomorphic, etc), but implementing correctly is the first step — and the most rewarding.

React isn’t fast by default, but it offers all the tools to be fast whatever the size of the application.

This may seem counterintuitive, especially since many frameworks offering an alternative to React claim themselves as n times faster. But React puts developer experience before performance. That’s the reason why developing large apps with React is such a pleasant experience, without bad surprises, and a constant implementation rate.

Just remember to profile your app every once in a while, and dedicate some time to add a few calls where it’s needed. Don’t do it first, or spend too much time to over optimize each and every component — except if you’re on mobile. And remember to test on various devices to get a good impression of your app’s responsiveness from a user’s point of view.

If you want to read more about React performance optimization, here is a list of great articles on the subject:|||

React is slow — just like other frontend frameworks. But if you care about performance, it’s fairly easy to make any React application super fast. Here is how.