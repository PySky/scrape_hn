Online marketplaces have become one of the most popular types of internet businesses, attracting significant funding from venture capitalists. Some of today’s e-unicorns like Uber, Airbnb and EBay are good examples. Even with the success of the two-side ‘matchmaking’ model, the truth remains that these marketplaces are very hard to build and grow.

The most common problem marketplace startups face can be likened to the “chicken or the egg” conundrum, or how to get liquidity on both sides. Another closely-related, and often-overlooked aspect of a successful marketplace launch is the is the efficient management of supply availability.

Imagine you’re on Airbnb. You search through hundreds of listings and find something you like. You book the place and you’re good to go. After a few hours the host sends you an email and tells you the place isn’t available after all. As a first-time Airbnb user, how would you feel? Would you want to go through the same effort again or look for alternatives? Unfortunately such occurrences are commonplace in these types of marketplaces, leaving bitter taste in the user’s mouth.

To build an efficient marketplace, not only do you need to develop a liquid supply base, you need to know in real-time which of your suppliers are available to perform at any given time. Airbnb needs to know which properties are available, Upwork needs to know which freelancers are available.

There are two ways to solve this.

When suppliers are bound by a commitment, and there are repercussions for not following through with a commitment, they are less likely to disappoint buyers. In a supplier-commit model, for a ‘matching’ to take place, suppliers must commit that they are available. Let’s take a look at how this would work in a real-world scenario.

A buyer posts a request, which is seen by the supply base; suppliers who are available then respond. Here, one of two things can happen:

The buyer does the matching: The buyer sees a list of available suppliers and picks one. This is how most of the services marketplaces work like Upwork and Taskrabbit work. You post a job, you get bids from providers who are available, and you pick your favorite provider.

The marketplace does the matching: The marketplace sends the request to a number of select suppliers and the first one who responds gets the job. This is how Uber works.

In each case, when the matching happens, both parties are “committed” and available. Buyers, because they posted the request and sellers, because they responded.

The problem with buyers doing the matching is that it requires a lot of effort from both sides and it’s slow.  As a buyer, you have to visit the marketplace multiple times: once to post the request, and then again to pick the supplier. As a seller, you have to bid on requests without any certainty of landing the job.  If 20 providers bid on a job, 19 will have wasted their time.

Uber on the other hand solves the problem perfectly, but it comes at a cost. For Uber to work sustainably and for its users to be satisfied with the experience, there needs to be a high degree of standardization and strict quality-control protocols.

Here, suppliers communicate their availability in advance and buyers who want to work with a specific supplier simply book a free slot. This how Airbnb and gig marketplaces like Fiverr work.

The problem starts when suppliers don’t keep their availability information up-to-date, resulting in problematic bookings in which the seller is not available to perform. For the system to work, marketplaces must provide suppliers with a simple tool to set their availability, but this also isn’t enough.

Think of a supplier who took the time and effort to create a profile but is not getting enough sales from the marketplace. What happens? These suppliers soon lose interest and have no real incentive to update availability.

Let’s look at two very different scenarios.

It’s clear that no ultimate solution exists for the availability problem. If your online competition is low, you may benefit by providing the right tools. If not, implementing a supplier-commit model may be a good idea until you reach critical mass.|||

