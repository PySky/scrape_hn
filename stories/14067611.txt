Dagda is a tool to perform static analysis of known vulnerabilities in docker images/containers and to monitor running docker containers for detecting anomalous activities.

In order to fulfill its mission, first the known vulnerabilities as CVEs (Common Vulnerabilities and Exposures) and BIDs (Bugtraq IDs), and the known exploits from Offensive Security database are imported into a MongoDB to facilitate the search of these vulnerabilities and exploits when your analysis are in progress.

Then, when you run a static analysis of known vulnerabilities, Dagda retrieves information about the software installed into your docker image, such as the OS packages and the dependencies of the programming languages, and verifies for each product and its version if it is free of vulnerabilities against the previously stored information into the MongoDB.

Also, Dagda rests on OWASP dependency check + Retire.js for analyzing multiple dependencies from:

On the other hand, Dagda is integrated with Sysdig Falco for monitoring running docker containers to detect anomalous activities.

Finally, each analysis report of a docker image/container, included all static analysis and all runtime monitoring, is stored into the same MongoDB for having available the history of each docker image/container when it is needed.

Before Dagda usage, you must have installed the next requirements:

The requirements can be installed with pip:

You must have installed Docker for using Dagda. If you need instructions for Docker installation, see the How-to install Docker page.

In order to avoid having to use when you use the command, create a Unix group called and add users to it. When the daemon starts, it makes the ownership of the Unix socket read/writable by the group.

You must have installed MongoDB 2.4 or later for using Dagda because in MongoDB are stored both the vulnerabilities/exploits and the analysis results.

If you need instructions for MongoDB installation, see the How-to install MongoDB Community Edition page.

You can also run MongoDB using docker:

You must have installed the kernel headers in the host OS because Dagda is integrated with Sysdig Falco for monitoring running docker containers to detect anomalous activities.

This can usually be done on Debian-like distributions with:

After that, run the command is recommended for avoiding the next Sysdig Falco error trace:

Important to note: In some distributions it has been detected that Sysdig installation is required, so if you need instructions for Sysdig installation, see the How-to install Sysdig for Linux page.

You must run for starting the Dagda server. See the start sub-command in the wiki page for details.

After the Dagda server started and before the Dagda CLI usage, you must set the next environment variables as you need:

Although in this usage documentation only the CLI usage is shown, Dagda has a REST API for using it. See REST API documentation page for details.

For the initial run, you need to populate the vulnerabilities and the exploits in the database by running:

The previous command can take several minutes for finishing so be patient.

If you need repopulating your database for updating with the new vulnerabilities and exploits, you only need rerun the previous command.

Also, you can run queries on your personal database with . A usage example would be the next one:

The expected output for the previous query is shown below:

For getting all information about a specific CVE, you must run the next command:

The expected output for the previous query is shown below:

If you want to know more details about , type or see the vuln sub-command in the wiki page.

The database is called and there are 6 collections:

In the next subsections, both, performing static analysis of known vulnerabilities and monitoring running docker containers for detecting anomalous activities will be described in depth.

One of the main Dagda targets is perform the analysis of known vulnerabilities in docker images/containers, so if you want perform an analysis over a docker image/container, you must type:

See the check sub-command wiki page for details.

The expected output for the previous command will be the next one. In this output, Dagda responses with the analysis .

If you want review a concrete docker analysis, you must type:

For more details about , type or see the history sub-command in the wiki page.

The analysis can take several minutes for finishing, so be patient. If you typed the previous command, when you type , the expected output looks like as shown below.

Another of the main Dagda targets is perform the monitoring of running docker containers for detecting anomalous activities, so if you want perform the monitoring over a running docker container, you must type:

See the monitor sub-command wiki page for details.

The expected output looks like as shown below:

You can stop the monitoring when you want if you type:

The expected output when you stop the monitoring over a running container looks like as shown below:

If you want review all your reports, see the history command.

This section describes the installation of Dagda using Docker containers, including the Mongo database and a container for Dagda, using . The docker socket is shared with the Dagda container, so it is possible to check docker images and containers from the host where is executed.

Execute the following commands in the root folder of Dagda and then, the Dagda server will start listening at port 5000:

Typically, Dagda works fine, but some scenarios can cause problems. If you get some issue, check the Troubleshooting page for fixing it.

See the Change Log page for details.

For bugs, questions and discussions please use the Github Issues or ping me on Twitter (@3grander).|||

dagda - a tool to perform static analysis of known vulnerabilities in docker images/containers and to monitor running docker containers for detecting anomalous activities