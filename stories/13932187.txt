Step-by-step guide to packaging and continuous deployment of a Go application with AWS CodeDeploy and Semaphore.

This tutorial will illustrate how you can use AWS CodeDeploy, a scalable deployment service offered by AWS that lets you automate your deployment process. We will package and continuously deploy a Go application to an EC2 instance. The tutorial will use a sample application and walk you through the process of updating your existing setup, to allow for the continuous deployment of your application.

By the end of this tutorial, you will:

The application we will use in this tutorial is a very simple application that consists of four files:

The contents of these files are as follows:

The application is a simple web server that responds with the contents of . It passes two values to the template - one from the configuration file and another one that's the current day of the week.

The template uses the and values passed in from the application to display some content.

While this is an extremely simple application, it can be considered fairly representative of Go applications, which mostly consist of the main binary, configuration files, and templates.

Before we modify our EC2 instance and set up CodeDeploy, let's begin by setting up the project on Semaphore for continuous testing.

If you haven't already, sign up with Semaphore. Semaphore can use repositories hosted on Github or Bitbucket, so make sure that you push the application code to one of these hosts.

Once you have done this and signed into your Semaphore account, click on the button to add a new project:

Now, select the repository from the list:

Next, select the branch of your repository that you want to run tests against:

At this point, Semaphore will analyze your project and it will set it up using the default settings applicable to a Go project. This is where you can customize the build and the testing process if you want to. You can also change these settings later in the project's settings section. We'll just change the version of Go used to the latest available version and click the button at the bottom.

At this point, Semaphore will begin building and testing your project. From now on, whenever you push any changes to this project, Semaphore will automatically build and test your project.

Accessing the application in its current state should result in something like the following:

Now that we have continuous testing set up, let's move on and configure AWS to use CodeDeploy.

As mentioned in the prerequisites section, this tutorial assumes that you have an application already running on an EC2 instance. With this setup, we need to make the following changes in our AWS account in order to be able to use CodeDeploy:

Let's now go through each of these steps.

We want to create a user whose credentials will be used from Semaphore to continuously deploy the application. This user needs to be able to do the following:

To do this, we need to attach the following policies to the user:

Begin by visiting the section in your AWS console:

Enter the name of the user, select for access type and click the button.

On this screen, select the option to . From the list of the policies that appear at the bottom, select the and policies, and click the button to continue.

You should now see the review screen with the options you have selected. Click the button to complete the process.

This screen shows the and the for this user. Make a note of these values, as we'll need them when setting up continuous deployment on Semaphore.

When setting up CodeDeploy in a later step, we'll need to attach a role to it that gives it the appropriate permissions. In this step, we will create the role with the following permissions:

To do this, go to the section in your AWS console.

Enter the name of the role, and click the button.

On this screen, select from the section.

You should now see a screen with a list of policies. From these policies, select the following:

and click on the button.

Next, you'll see a review screen with the details of the role you are creating. Click on the button after you've ensured that the settings are correct.

We now need to modify this role to set the appropriate trust relationship. Click on the role name and select the tab.

Modify the policy document so that the key is set to .

Click on the button to complete this process. We now have a role, in our case named , that we will attach to the CodeDeploy setup.

To get the existing EC2 instance to work with CodeDeploy, we need to create and attach a role with the appropriate permissions to the instance.

To begin, go to the section in your AWS console.

On this screen, select the option to

Enter the name of the policy, this tutorial uses the name, and enter the following in the policy document:

Click on to create the policy.

Now that you have this policy, create a new role as we did in the previous step. In this case, apply the newly created policy to this new role instead of the three policies applied in the previous step.

This tutorial uses as the name for this policy and as the name for the role that uses this policy.

Now that we have created the role for the existing EC2 instance, let's attach it.

Open the section of your AWS console. Here, you should see a list of your instances.

Select the checkbox next to the instance that you're interested in and click on .

On this screen, choose the role that was created in the previous step.

Click on the button to attach the role to this EC2 instance.

When setting up CodeDeploy, we need to specify the machines a particular application should be deployed to. This is done by tagging the machines and specifying these tags in CodeDeploy.

While this might seem like an overkill for a single instance, it can be quite handy if you have multiple instances that you want to deploy to.

Open the section of your AWS console. Here, you should see a list of your instances.

Select the checkbox next to the instance that you're interested in and click on .

On this screen, enter some value in the and fields. These can be anything. In this case, we have set the key to and the value to .

Click on the button to apply the tag to this EC2 instance.

To deploy applications, CodeDeploy requires its agent to be present on all the concerned machines. In this section, we will install this agent on our EC2 instance.

To begin, log in via SSH to your EC2 machine.

Refresh the package list and sources on your system:

After carrying out these instructions, be sure to reboot your instance for the changes to take effect. With this, your instance is all set up to work with CodeDeploy.

As the final part of setting up CodeDeploy, we need to create a CodeDeploy application and a deployment group.

In your AWS console, go to the section and click on . You should see the following screen:

On this screen, enter the application name and the deployment group name. These can be set to any values of your choosing. We've set the application name to and the deployment group name to .

Choose as the deployment type. Note that in-place deployment incurs some downtime as your application is replaced with the new version. You can explore , which can deploy an application with zero downtime, but, we use in-place deployment in order to to keep things simple.

Scroll down a bit, and enter the tag of the EC2 instance, created in step 5 above. You should see your instance in the list of matching instances.

Finally, choose the role we created in step 2 above, as the service role in the final section and click on the button to complete the process.

With this, we have completed the setup required on the AWS end to use CodeDeploy. All that's left for us to do is configure Semaphore for continuous deployment.

To configure Semaphore to continuously deploy the application, we need to do the following:

Technically, the files created in step 2 and 3 could be part of your project. However, because these won't change often, we will create them right within Semaphore, instead of creating them in our project repository. This has the added advantage of preventing deployment details from being publicly available in case you have a publicly visible repository.

When deploying from Semaphore, we will use the credentials of the user created in step 1 of the previous section. We can set these credentials up as encrypted environment variables to keep them secure and prevent them from appearing in logs.

We want to set the following three environment variables:

You should have values for the first two from step 1 of the previous section. We set the value of to for this tutorial, but you can change this to suit your setup.

Open the section of your project on Semaphore.

Click the button to add an environment variable.

Enter as the , the actual access key as the and check the checkbox.

Click the button to complete the step.

After creating the remaining two environment variables in a similar manner, you should see something like this:

For using CodeDeploy, we will need scripts for the following tasks:

To create these scripts in Semaphore, open the page for your project.

Click on the button to add a configuration file.

Enter as the (so that the complete path then becomes ).

Enter the following in the section:

Similarly, create two additional files with the following values:

The file is a specification file in the YAML format that lets you configure the deployment process. It allows you to copy files, manipulate file permissions, and execute scripts at various stages of the deployment process.

We can create this file just like we created the script files in the previous section. Use as the file path and the following as the content:

If your setup differs, modify the values in this file accordingly.

The section identifies the files to be copied from the deployment package to the instance. is the name of our application's executable binary.

Note that for the files, the package root acts as the root. So, for example, refers to the file stored at the root of the package, not at the root of the file system.

The section configures the scripts that should run at various stages of deployment. The content of this section in our case configure the deployment process to:

Based on the current configuration, on Semaphore:

With this in mind, let's now configure Semaphore to start deploying our application on every successful build.

Go to the your project's home page on Semaphore.

Click on the (just below the branch name) button to begin the configuration.

Choose from the list of options.

Enter the following as the deploy commands:

The first command, , builds your project and creates the executable binary.

The next three commands copy the binary, and to the folder, which already contains the file.

The next command copies the entire folder, which contains the scripts we created earlier, into the folder.

At this stage, the folder contains:

The next command is:

This command uses AWS's command line interface , which is pre-installed on Semaphore, to:

In this case, we specify that we want to use the bucket named and name the package . Be sure to modify these values according to your setup.

This command initiates the deployment of the latest version of your application. Note that:

After entering these commands, click the button.

Enter the server name, this can be any value, and click the button.

This should complete your setup for continuous deployment. If you want, you can click the button to manually initiate a deployment.

With this, you have now configured Semaphore to continuously test and deploy your application.

To test the setup, let's begin by introducing a change that breaks one of the tests. Let's modify the key in to and push the change to our repository.

This will initiate a build on Semaphore, which will result in the following:

As you can see, Semaphore aborted the process because the build failed and didn't deploy this version.

Let's revert to its original version. Additionally, we'll also make a couple of other changes will help us use the advantages of continuous deployment.

Change the value of in from to .

Now when you commit and push these changes, you should see something like the following on Semaphore:

This shows that the project has passed all the tests and was successfully deployed. Visiting our application again shows us the following:

As you can see, our application is live with the latest changes and we didn't have to spend any effort on manually deploying these changes.

Congratulations! You've successfully set up AWS and Semaphore to continuously deploy a Go application to an existing EC2 instance using AWS CodeDeploy.

If you have any questions and comments, feel free to leave them in the section below.|||

