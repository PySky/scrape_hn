SQueaLy is an open-source, self-deployable application for developers. It is a micro service for business intelligence and analytics which uses SQL queries to generate reporting APIs with fine-grained security. It gives you the power to analyze your organizational data in an environment that is completely owned by you. Hence, making it the most suitable solution for generating charts and reports out of sensitive data.

When you want charts and reports but don't want to build the APIs

Using SQueaLy, creating APIs for your reports/charts and visualizing the output is super quick. Just write the query to fetch the data from your database and use the SQueaLy's authoring interface to visualize the output. Once satisfied, give your users the permission to view/edit the report and share the URL of your report. That's it!

When you want fine grained security in your reporting APIs

You can provide not only chart level view permissions but also user/parameter level permissions. To make that one liner straighforward, consider the following use case.

When you want scheduled emails embedded with reports

SQueaLy also provides you the interface to schedule emails with reports embedded in it. All you have to do is

Not just that. For white labling, you can even customize the look and feel of the email message by providing the HTML for it

Just click on the 'deploy-to-Heroku' button, login to your Heroku account, enter environment variables and the application will be deployed under your account and domain.

JSFiddle like interface to test and visualize the output

 SQueaLy provides you a user-friendly editor like interface to test and debug your queries/APIs.

Your data is always secure

All the database credentials and secret keys are stored as environment variables in your own server architecture (Heroku).

More than just SQL

SQueaLy uses JinjaSQL behind the scenes which gives you power to use JINJA inside the SQL query. For more details, check out JinjaSQL.

SQueaLy provides you the ability to assign view/edit permission to any user for each chart/report.

You can set up multiple database connections and specify the database to use while generating the chart/report.

SQueaLy comes with email solutions as well. You can schedule emails embedded with the charts/reports you had created by just writing a cron expression

The app is deployed and the first chart has already been created for you. Hit the Run button and you can see the data/visualization in the results section.

SQueaLy uses Django's default permission model for managing chart level authorization. Everytime a new chart is created, 2 permissions are added in the backend automatically corresponding to view and edit mode access.

For example, if the chart is named as 'foo' then, permissions 'can-view-foo' and 'can-edit-foo' are added automatically.

The administrator just needs to add the required permissions to users or groups from the Django admin panel. ( located at https://<your_domain>/admin )

Also, there are two other high-level permissions - can-add-chart and can-delete-chart that are required for creation and deletion of charts, respectively.

For non-Django folks: By default, the admin user has all permissions.

SQueaLy generates APIs in real-time corresponding to each chart. Just hit the API corresponding to your chart_url, NOTE: The chart_url is the chart name in lower case, replacing spaced by hyphen ('-')

This API will return the data in the format that is compatible with GoogleCharts.

To add a parameter, you need to use the keyword object "params" inside your jinja template. For example, to include a parameter named foo,

In the view mode, these parameter values would be extracted from the filters, but if you are using the API, then you need to pass these parameters in the url like this:

SQueaLy allows you to use user parameters inside the query template, the values of which would be extracted from the logged in user while running the query.

Use the keyword object "user" in the jinja template to access the request.user object provided by Django. For further details, checkout Django User Objects.

Swagger is an integrated, cloud based API development platform that combines the core capabilities of Swagger with advanced features to build, document, and deploy APIs.

Once you are done creating your charts, you can get a documentation of all the REST APIs for these charts. To view this documentation, got to

SQueaLy provides Filter APIs to add Dropdown options. You just need to write the query to get the data from the database. SQueaLy provides can_edit permission for filters. If user does not have can_edit permission, API will be available as a dropdown option only while adding parameters in the chart.

SQueaLy supports Parameterized filters also. For Example: you have two filters Country and City and you want to show all cities for selected Country.

Note: Order plays an important role for Parameterized filter. Parameterized filter should render after it's parameters. For above example, City filter should render after Country filter.

With every chart, you can attach another SQL query that would validate the API. The API would return a 403 Forbidden response, if the validation query returns no rows.

SQueaLy provides a mechanism to log in a user via an access token that would help in sharing some other application's user-base with squealy without the need to import the users in SQueaLy database.

Here is an example of hoe the request header should look like:

The scheduled emails can contain as many reports(charts) as you want. You just have to associate the reports(charts) you want in the email with the scheduled email.

To schedule emails embedded with reports, initialize the following variables in the environment:

Then, go to the Django admin and select the Scheduled reports model. On doing so you will see a form like this

This will be the subject of the email. This subject does not have to be hard coded. You can use the parameters in the query or any macro provided by squealy here. Just wrap the placeholders in {{}} to generate the subject dyanamically

You can customize the look and feel of the email body by writting HTML here. Do not forget to put {% include 'report.html' %} somewhere in the template otherwise there won't be any reports in the email.

Enter a valid cron expression to tell the schedule of the email. For examle, to schedule an email for 11AM everyday, the cron expression should be

This would contain all the values of the parameters used in the database queries. For example

This would contain the email address of all the recipients of a particular scheduled email.

To associate charts with scheduled reports i.e. to determine which report has to be sent inwhich email, go tho Django admin and select the Scheduled Report Charts model. On doing so you will see a form like this

Here, just select a chart and the scheduled report and hit save. Doing so will associate one chart with the selected scheduled report. Repeat this for as many charts you want to associate to a scheduled report

An Sqlite database setup already exists in SQueaLy's settings.py but if you want to use Postgres database, you can follow these instructions:

Create a database and a user with Create DB role. (To run test cases). Use the following command on psql to grant this access to a user:

Note the URL of this database for use in the next step. The URL will be of the following format:

For further help regarding postgres setup, click on one of the following links:

Setting up environment variables Before running the server, make sure to set the following environment variables using this command:

Now go to localhost:8000 and login with the credentials you have exported in the environment. If you haven't configured the ADMIN_USERNAM and ADMIN_PASS in the environment the following will be the default credentials for the admin:|||

Contribute to squealy development by creating an account on GitHub.