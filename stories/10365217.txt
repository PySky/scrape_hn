Passport is a library that provides a mechanism for easily setting up an authentication/registration system with support for several frameworks and auth providers. In this tutorial, we’ll demonstrate in detail how to integrate this library into a Node.JS/Express 4 application to provide user authentication through LinkedIn, Github, and Twitter using OAuth 2.0.

We will be using:

OAuth 2.0 is the successor of the OAuth protocol (open standard for authorization), which enables third-party applications, such as the one we’ll be building, access to an HTTP service without having to share secure credentials.

Start by downloading the project structure from the Github repo.

You should have:

Install Passport as well as the specific Passport Strategies:

Create an “auth” directory in the “server” and add the following files:

And add it as a dependency:

Add a _config.js file to the “server” and add the following:

Make sure to add this file to your .gitignore since this will contain sensitive info.

Then establish the connection to MongoDB within app.js:

Add a Mongoose Schema to a new file called user.js in a new folder, within “server”, called “models”:

Passport needs to serialize and deserialize user instances from a session store to support login sessions. To add this funcionality, create an init.js file within the “auth” directory, and then add the following code:

Before we test, add the following route-

Test this code to make sure all is well:

Once done, kill the server, and then commit your code and push to Github.

For almost all of the strategies, you will need to-

Navigate to LinkedIn Developers to register a new application. Just enter dummy info, make sure to add the callback - http://127.0.0.1:3000/auth/linkedin/callback - and update the config within the app:

Add the following code to linkedin.js:

Aside for the Passport magic, you can see that we’re either updating the user, if the user is found, or creating a new user, if a user is not found.

Add in the dependency as well:

Test this out. Be sure to use http://127.0.0.1:3000/ rather than http://localhost:3000/.

Now, let’s just duplicate that workflow for the remaining providers…

Again, create an app, adding in the correct callback URL, and add the given client ID and Secret Key to the _config.js file.

Create an app on the Twitter Developer page, and grab the Consumer Key and Secret.

Try adding some additional strategies, comment below if you have questions, and grab the final code from the repo.|||

Let's look at how to set up Social Authentication with Passport.