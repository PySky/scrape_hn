This is somewhat of a reference of all the stuff I had to gather, from various sources, about HTML5 and CSS.

If you know nothing about HTML and/or CSS, thankfully the web provides a lot of great tutorials. (See also: Khan Academy, MDN.)

The two major references on tags, attributes, and other info you might want when building a site are:

The latest version of HTML is called HTML5, and it’s the one you should use, as it brings several interesting features that makes it easier to create documents. (Together with CSS3.) We’ll go through an overview of some of the interesting features.

First, let’s have a look at a minimal HTML5 document:

Going through the elements one by one:

These four elements are the bare minimum you have to put in your header. Josh Buchea has a fairly exhaustive list of all interesting tags you can put in the header on GitHub. A lot of them are related to backwards compatibility and fixing weird browser behaviour, but there are a few that are interesting:

If you were taught HTML and CSS layout in the old school ways, you might just want to structure your with divs (and relevant CSS classes). It’s totally legit, but HTML5 introduced a neat thing called semantic tags, which is a collection of tags that describe the semantic structure of your document. You can go pretty far with only these—and this very blog uses them a lot.

should be used to denote the main content of your document, and it is special in that there should be one in the document. and are used to delimit respectively the header and footer of any part of your document. You can use them as many times as you want, fractally. So you can have something like this, with two headers at two different levels:

elements are meant precisely for the navigation part of your document, if your site has one. Some sites typically have a lot of links in the main footer as well; no need to replace it with a element: is more meant for the part that contains the major navigation elements. The standard is a bit vague on what this means though, so feel free to do as you fancy.

Inside the main part, the content may be subdivided further with and . An should wrap something that is independent and could be extracted from its surrounding context—basically, anything that would fit in an RSS feed, like a news article, a blog post, or even a comment. A is a more generic delimiter, and should typically contain (as its first child) a heading. So, for example, a long blog article could contain various sub-sections, each within its own tag pair.

Finally, can be used for content that is tangentially related to the main content. You can use it at several levels, for example to separate content in the margin or in a box, but you can also use it at a higher level to separate, for example the content inside from, for example, an automatically generated set of links to related articles.

There’s a wealth of tags between old and new HTML standards; I’ll just cover here a subset of the ones I’ve found the most useful.

For list of elements, you can use either or for (respectively) unordered and ordered lists. Within a pair, you’ll use pairs to delimit the elements of the list.

For dictionary-like lists, you can use the , and tags:

For general tables, you want to use the , and / elements (and possibly a few others).

Figures (like images or tables) can be embedded into a tag pair, together with a .

Another neat addition of HTML5, the and pair works together to give a collapsible element:

We can now have a look at some of the most useful inline elements. and are typically useful for (respectively) increasing levels of emphasis. is used to… that doesn’t necessarily have any importance. will strike through , while will typically set text in italic type, useful to differentiate some texte written in a different language. (Most Markdown renderers are unable to understand the nuance between that and emphasis, unfortunately.) should be used to represent either a clock time or a date and time in the Gregorian calendar.

Finally, you can use to quote inline ( ), and its bigger brother for separate block quotes—possibly with a wrapped inside to indicate the source of the citation.

Check out MDN for a full list of the possible elements.

CSS has several different roles: layout, typography, and general graphic design (colors, shapes, animations…). It can do all of these things, although the degree to which it can do them is barely satisfactory. (If not less.)

There are several ways to work with CSS; you can use a framework like Bootstrap (or Pure, Tachyons, …) which will handle (mostly) the layout part and then bend it to your will to customize the appearance and typography. This is perfectly fine, especially for large projects, but it comes at a cost; you’re paying in terms of bloat (for the end user), and in terms of complexity (for you, developer). For simple pages, a simple, hand-built CSS might very well suffice. As a bonus, learning to build a CSS from scratch can also help you debug CSS problems, including in other people’s frameworks.

CSS-Tricks has an nice intro if you need to learn or re-learn CSS selectors. MDN also has one.

A neat thing that’s possible with HTML5 structural elements is that you don’t need to define a class for everything. Instead of something like this:

You can simply forget the classes and use child and descendant selectors

There’s a good number of CSS pseudo-classes (as well as a few pseudo-elements). I’ve found that , and the various are the most useful classes, as well as the and elements. I won’t give examples here, as they are highly situational, but be aware that these exist.

Perhaps one of the most undersold CSS features is the ability to manipulate variables, or custom properties as they are sometimes called. Wherever you can put a property, you can put a custom property by prefixing the name of your choice with . You can then reuse that property (which really is just a variable) with the function.

Not only these variables alleviate the need for a CSS preprocessor, they are actually better than preprocessor variables with their ability to cascade (and be selectively overridden, much like general properties) and to be changed at runtime via JavaScript—the browser will make sure to repaint as needed. One of the simplest way to use them if you just want global variables is to simply declare them within the pseudo-class:

You can then use the variables everywhere.

Another very neat addition to CSS3 is the function, which allows you to set a property to be the result of a computation. It is extremely useful for laying out things. CSS-Tricks has an article with several examples.

Web browsers interpret the standards somewhat differently, and this results in very different defaults across both browsers and platforms. To fix this, web developers will never start a CSS from scratch but generally use either a reset or a normalize. A reset is just some CSS code that will reset CSS properties to a more practical set of default values, which you will generally want to override because, for example, some elements are completely unstyled. On the other hand, a normalize will set usable but arbitrary default values for everything. Here’s a Stack Overflow answer that explains the situation more in-depth.

I’m personally using a subset of the reset presented here. Since I don’t really care about supporting out-of-date browsers, I can get away with only a minimal set of reset rules. I don’t use the reset rules for the tags I don’t use, and I don’t use those reset rules that I will override later anyway. This makes the CSS file leaner, which is a benefit both for me as the developer but also for my users.

Matthew Butterick has written a very good free book called Practical Typography which I encourage you to read. It contains some CSS specific advice, and some general practical advice about typography.

Some of the most important takeaways (that I routinely see violated on the Internet in general): use bigger fonts, limit your line length, limit the amount of color and decoration on the page, and in particular limit contrast. These few simple rules will make the page incredibly more easy to read and look at in general.

Learn Layout offers a very nice introduction to the old-school art of laying out pages with divs, floats and the box model in general. It’s short and you should understand all the concepts there, only to use the superior flexbox for laying out the general structure of your page. Philip Walton has an amazing page called Solved by Flexbox which explains in detail how you can use flexbox for some of the most common page layouts out there. CSS-Tricks has a very comprehensive page about flexbox that explains visually all its properties. FreeCodeCamp has something similar, but with GIFs instead.

Media queries allow you to apply certain CSS rules depending on the output media for the page (display, printer, …) and on some other conditions (page width, orientation, …).

By far the most useful usage of media queries is to reorganize the layout of the page depending on the width of the output device. Typically, this allows you to choose from a stacked top-to-bottom layout (for mobile) into a two-column or more grid-like layout for desktop.

If you use flexbox, you can for example switch the orientation of the flex depending the width:

Check out Solved by Flexbox for more details.

You can choose to make your rules mobile-friendly and then add media-queried rules for desktop, or the other way around; there isn’t much of a difference if you don’t care particularly about backwards compatibility. If you do, it’s usually better to focus on mobile first, as mobile browsers tend to be older.

Google has a nice small guide on how to make a website responsive. There are a lot of contradictory opinions on the subject in the web development community in general (with regards to break points, units, whether responsive is worthwhile or not…)—you want to keep a critical spirit and choose what makes it easier for you to achieve your goals.

One of the first thing you will want to do in your reset (or normalize) is to change the box model used for all the elements.

This allows you to set a width and actually get it. CSS-Tricks has a more detailed explanation about the differences.

Google Fonts offers a lot of free fonts in the form of web fonts—that is, loadable externally from the CSS, and usually loaded from Google’s servers. Not all of them are created equal. Choose with great care and don’t go overboard. (Three fonts maximum should be good for most usages.)

A good font choice will make your website less dull and more recognizable, and it can also improve legibility—making it easier to distinguish different characters—and readable—making it easier to read words, sentences, and paragraphs. Like all good design, good typography should aim to be invisible, that is, it should give the reader with a pleasant feeling, but without grabbing their attention to the typography itself. Using a web font also makes it easier to control what your documents look like; system fonts have too much variability to be used within a single CSS file for all platforms.

Google Fonts isn’t your only choice when it comes to web fonts, though. You can also choose to license one or several fonts from some of the many type foundries (and solo type designers) in the world; most of them will have flexible licensing and usually affordable prices. A project’s visual identity will be greatly improved if you choose a set of lesser-known, high-quality fonts, so if you can afford to put some money in it, I’d definitely recommend it. Typewolf is a good resource to help you navigate the world of type on the web. Matthew Butterick’s aforementioned Practical Typography book has a whole section on choosing fonts, including a showcase of the author’s own fonts. Designer Tobias Van Schneider has a blog post with a nice list of type foundries.

Picking fonts is a delicate exercise. If you’re going for the free web fonts, sticking to the most widely used ones is a safer bet: in particular, Droid Sans, Open Sans, PT Serif & PT Sans, Ubuntu and all their variants are all very high quality fonts. Nobody will yell at you for using these. Don’t go overboard with fonts though—in general you shouldn’t need more than 3 fonts (text, titles, monospace).

Font rendering varies wildly both across browsers and OSes, even when rendering the same font. (You can read Smashing Magazine if you’re interested in knowing how font rendering works.) There’s no real solution for that, apart from choosing a font that was created and tested with the major platforms in mind.

Worse than font rendering variability though, the lack of control over basic typographic features, one of which is the very important baseline and its placement. The best thing you can do is tune the , but even that is not portable across platforms.

Laying out things in a grid can be fairly useful, and CSS introduced a feature called CSS Grids that’s designed to do just that—and replace the old float tricks of yore that were fraught with perils.

The sad reality though, is that browser support is very recent (as of April 2017); I wouldn’t recommend using it unless you have a very specific need. For general document layout, flexbox is actually more useful, as it matches a little bit better the way you’d want text and elements to flow in the page. If you really need grids though, or are just curious, check out CSS-Tricks’ complete guide to CSS Grids.

A cute yet less known CSS-property is : it allows you to draw lines around all the boxes, but isn’t part of the box model itself. Think of it as a “wireframe mode” for your 2D layout: not so much useful for the final result, but very useful as a debugging tool.

There’s a big debate about which units to use in CSS; the New Code has a good summary. In particular, font sizes may be expressed in either em (whose name comes from traditional typography) or rem. The difference between the two is that the em is relative to its parent, while the rem (which stands for root em) is absolute. Zell WK has a useful illustrated blog post about the debate.

Many old school web devs will wrap everything inside both within a global div tag—usually paired with a class. (There are good reasons for needing one or several global wrappers.) The minimalist, modern developer (that you are, now that you’ve read this document!), will remember that any valid HTML5 document contains not one, but two global wrappers for free: both and can fullfill this role. Remember them before readying your divs.

If you’re using a layout where all your elements are centered around the viewport, you may encounter the problem of having your layout shift slightly in the horizontal direction depending on whether your current page has a scrollbar (which happens if the content overflows vertically) or hasn’t. There are several solutions to this, but the most elegant uses the function. Ayke van Laëthem, the original discoverer of this trick, describes the solution in-depth, and has my eternal gratitude for this elegant fix.

Creating a whole layout from scratch can take a large amount of time, even more so if you’ve never really done it before. The most important guideline is to start from the layout, and then only fine tune. Doing any kind of fine tuning prematurely can waste vast amounts of time, in my experience. By fine tuning, I mean in particular, adjusting pixel borders, colors, nudging the font size by small amounts, or any other kind of tuning that may seem even too small to affect the general flow of the document.

Most of the time it’s easier to start from a very simple, widely used layout—the CSS box model can be very confusing at first, and there are plenty of resources that can explain how the basic layouts work. Only when you get a good understanding should you consider building more daring designs.

If you want to build a responsive design, you have to think about how you will structure things from the start, and in particular about how elements will flow when the screen size changes. You cannot fine tune out a design that’s flawed from the start. It is also important to define the limit at which you accept that things will be broken: browser / OS compatibility, special browser settings (user zoom, noscript, no CSS, external resources blocked via plugin…), network performance, and others. It’s important to test often at all stages of the design, especially later ones, where one seemingly innocent change in the CSS can for example completely break everything on mobile. Both Firefox (Responsive Design Mode) and Chrome (Device mode) offer special modes for testing the layout at difference screen sizes without having to constantly resize your browser window. Use them.

Having a short feedback loop is immensely helpful. I’d recommend using a hot-reload solution, and if possible, either splitting the screen or using a second monitor to avoid all kinds of context switches between the code editor, the build tools and the browser.

In addition to a short reset and potentially layout building elements, your CSS should also contain from the start the font sizes corresponding roughly to the final values you’d like, as these can make a massive difference in both the perception of your design and how the browser flows the elements through the page. Because font sizes are very much font dependent, choosing the fonts you’ll use from the start is also important. Not only can two fonts at the same font size render to a wide range of heights, but even if you adjust font sizes to obtain a similar rendered height, the width (and also perceived weight) of the font can vary wildly.

Almost every site whose design you like can be dissected by popping up the Developer Tools of your browser: don’t hesitate to have a peek when you see something you like but wonder how it is achieved. You’ll learn a lot of things that way.

There are plenty of options for live-reloading, but my favorite one is by far the pair of tools and . is a development server that monitors for local changes and sends reload events when necessary; it uses a connects to a websocket created by JavaScript code that is injected into every page served by . It can be used in tandem with , where will do the monitoring and execute the shell commands of your choice whenever a file is changed—making it possible to work with files that need to be preprocessed, like special JS or CSS compilers—and will then instruct to trigger a hot-reload. Check out the documentation for both these tools for more details.

is a family of completion tools available for pretty much every editor out there. There’s almost no learning curve, so using it is a no-brainer if you’re going to be dealing with HTML & CSS a lot. It gives you tab completion on a short hand syntax for HTML tags, properties, CSS selectors, etc., as well as more advanced features.

If you have any comments or suggestions about this article, feel free to send me a message at blog@lamarque.fr, reach out to me via Twitter.

Special thanks to members of the Recurse Center community for providing useful feedback on this post.

This article is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.|||

