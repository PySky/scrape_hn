Mal is a learning tool. See the make-a-lisp process guide. Each implementation of mal is separated into 11 incremental, self-contained (and testable) steps that demonstrate core concepts of Lisp. The last step is capable of self-hosting (running the mal implementation of mal).

Mal was presented publicly for the first time in a lightning talk at Clojure West 2014 (unfortunately there is no video). See examples/clojurewest2014.mal for the presentation that was given at the conference (yes the presentation is a mal program). At Midwest.io 2015, Joel Martin gave a presentation on Mal titled "Achievement Unlocked: A Better Path to Language Learning". Video, Slides. More recently Joel gave a presentation on "Make Your Own Lisp Interpreter in 10 Incremental Steps" at LambdaConf 2016: Part 1, Part 2, Slides.

If you are interesting in creating a mal implementation (or just interested in using mal for something), please drop by the #mal channel on freenode. In addition to the make-a-lisp process guide there is also a mal/make-a-lisp FAQ where I attempt to answer some common questions.

The simplest way to run any given implementation is to use docker. Every implementation has a docker image pre-built with language dependencies installed. You can launch the REPL using a convenience target in the top level Makefile (where IMPL is the implementation directory name and stepX is the step to run):

The Ada implementation was created by Chris Moore

The Ada implementation was developed with GNAT 4.9 on debian. It also compiles unchanged on windows if you have windows versions of git, GNAT and (optionally) make. There are no external dependencies (readline not implemented).

The GNU awk implementation was created by Miutsuru kariya

The GNU awk implementation of mal has been tested with GNU awk 4.1.1.

The BASIC implementation uses a preprocessor that can generate BASIC code that is compatible with both C64 BASIC (CBM v2) and QBasic. The C64 mode has been tested with cbmbasic (the patched version is currently required to fix issues with line input) and the QBasic mode has been tested with qb64.

Generate C64 code and run it using cbmbasic:

Generate QBasic code and load it into qb64:

Thanks to Steven Syrek for the original inspiration for this implementation.

The C implementation of mal requires the following libraries (lib and header packages): glib, libffi6, libgc, and either the libedit or GNU readline library.

The C++ implementation was created by Stephen Thirlwall (sdt)

The C++ implementation of mal requires g++-4.9 or clang++-3.5 and a readline compatible library to build. See the for more details:

The C# implementation of mal has been tested on Linux using the Mono C# compiler (mcs) and the Mono runtime (version 2.10.8.1). Both are required to build and run the C# implementation.

The ChucK implementation was created by Vasilij Schneidermann

The ChucK implementation has been tested with ChucK 1.3.5.2.

The Common Lisp implementation was created by Iqbal Ansari

The implementation has been tested with SBCL, CCL, CMUCL, GNU CLISP, ECL and Allegro CL on Ubuntu 16.04 and Ubuntu 12.04, see the [README][common-lisp/README.org] for more details. Provided you have the dependencies mentioned installed, do the following to run the implementation

For the most part the Clojure implementation requires Clojure 1.5, however, to pass all tests, Clojure 1.8.0-RC4 is required.

The Crystal implementation of mal was created by Linda_pp

The Crystal implementation of mal has been tested with Crystal 0.18.4.

The D implementation was created by Dov Murik

The D implementation of mal was tested with GDC 4.8. It requires the GNU readline library.

The Dart implementation was created by Harry Terkelsen

The Dart implementation has been tested with Dart 1.20.

The Emacs Lisp implementation was created by Vasilij Schneidermann

The Emacs Lisp implementation of mal has been tested with Emacs 24.3 and 24.5. While there is very basic readline editing ( and work, cancels the process), it is recommended to use .

The Elixir implementation was created by Martin Ek (ekmartin)

The Elixir implementation of mal has been tested with Elixir 1.0.5.

The Erlang implementation was created by Nathan Fiedler (nlfiedler)

The Erlang implementation of mal requires Erlang/OTP R17 and rebar to build.

The ES6 implementation uses the babel compiler to generate ES5 compatible JavaScript. The generated code has been tested with Node 0.12.4.

The F# implementation was created by Peter Stephens (pstephens)

The F# implementation of mal has been tested on Linux using the Mono F# compiler (fsharpc) and the Mono runtime (version 3.12.1). The mono C# compiler (mcs) is also necessary to compile the readline dependency. All are required to build and run the F# implementation.

The Factor implementation was created by Jordan Lewis (jordanlewis)

The Factor implementation of mal has been tested with Factor 0.97 (factorcode.org).

The Forth implementation was created by Chris Houser (chouser)

The Go implementation of mal requires that go is installed on on the path. The implementation has been tested with Go 1.3.1.

The Groovy implementation of mal requires Groovy to run and has been tested with Groovy 1.8.6.

The Guile implementation was created by Mu Lei (NalaGinrut).

The Haskell implementation requires the ghc compiler version 7.10.1 or later and also the Haskell parsec and readline (or editline) packages.

The Haxe implementation of mal requires Haxe version 3.2 to compile. Four different Haxe targets are supported: Neko, Python, C++, and JavaScript.

The Io implementation was created by Dov Murik

The Io implementation of mal has been tested with Io version 20110905.

The Java implementation of mal requires maven2 to build.

The Kotlin implementation was created by Javier Fernandez-Ivern

The Kotlin implementation of mal has been tested with Kotlin 1.0.

The Logo implementation was created by Dov Murik

The Logo implementation of mal has been tested with UCBLogo 6.0.

Running the Lua implementation of mal requires lua 5.1 or later, luarocks and the lua-rex-pcre library installed.

Running the mal implementation of mal involves running stepA of one of the other implementations and passing the mal step to run as a command line argument.

The Nim implementation was created by Dennis Felsing (def-)

The Nim implementation of mal has been tested with Nim 0.15.2.

The Object Pascal implementation of mal has been built and tested on Linux using the Free Pascal compiler version 2.6.2 and 2.6.4.

The Objective C implementation of mal has been built and tested on Linux using clang/LLVM 3.6. It has also been built and tested on OS X using XCode 7.

The OCaml implementation was created by Chris Houser (chouser)

The MATLAB implementation of mal has been tested with MATLAB version R2014a on Linux. Note that MATLAB is a commercial product. It should be fairly simple to support GNU Octave once it support classdef object syntax.

miniMAL is small Lisp interpreter implemented in less than 1024 bytes of JavaScript. To run the miniMAL implementation of mal you need to download/install the miniMAL interpreter (which requires Node.js).

For readline line editing support, install Term::ReadLine::Perl or Term::ReadLine::Gnu from CPAN.

The Perl 6 implementation was created by Hinrik Örn Sigurðsson

The Perl 6 implementation was tested on Rakudo Perl 6 2016.04.

The PHP implementation of mal requires the php command line interface to run.

The Picolisp implementation was created by Vasilij Schneidermann

The Picolisp implementation requires libreadline and Picolisp 3.1.11 or later.

The PL/pgSQL implementation of mal requires a running Postgres server (the "kanaka/mal-test-plpgsql" docker image automatically starts a Postgres server). The implementation connects to the Postgres server and create a database named "mal" to store tables and stored procedures. The wrapper script uses the psql command to connect to the server and defaults to the user "postgres" but this can be overridden with the PSQL_USER environment variable. A password can be specified using the PGPASSWORD environment variable. The implementation has been tested with Postgres 9.4.

The PL/pgSQL implementation of mal requires a running Oracle DB server (the "kanaka/mal-test-plsql" docker image automatically starts an Oracle Express server). The implementation connects to the Oracle server to create types, tables and stored procedures. The default SQLPlus logon value (username/password@connect_identifier) is "system/oracle" but this can be overridden with the ORACLE_LOGON environment variable. The implementation has been tested with Oracle Express Edition 11g Release 2. Note that any SQLPlus connection warnings (user password expiration, etc) will interfere with the ability of the wrapper script to communicate with the DB.

The Postscript implementation of mal requires ghostscript to run. It has been tested with ghostscript 9.10.

The PowerShell implementation of mal requires the PowerShell script language. It has been tested with PowerShell 6.0.0 Alpha 9 on Linux.

You must have rpython on your path (included with pypy).

The R implementation of mal requires R (r-base-core) to run.

The Racket implementation of mal requires the Racket compiler/interpreter to run.

The rust implementation of mal requires the rust compiler and build tool (cargo) to build.

The Skew implementation was created by Dov Murik

The Skew implementation of mal has been tested with Skew 0.7.42.

The Swift implementation was created by Keith Rollin

The Swift implementation of mal requires the Swift 2.0 compiler (XCode 7.0) to build. Older versions will not work due to changes in the language and standard library.

The Swift 3 implementation of mal requires the Swift 3.0 compiler. It has been tested with Swift 3 Preview 3.

The Tcl implementation was created by Dov Murik

The Tcl implementation of mal requires Tcl 8.6 to run. For readline line editing support, install tclreadline.

The TypeScript implementation was created by vvakame

The TypeScript implementation of mal requires the TypeScript 2.2 compiler. It has been tested with Node.js v6.

The VHDL implementation was created by Dov Murik

The VHDL implementation of mal has been tested with GHDL 0.29.

The Vimscript implementation was created by Dov Murik

The Vimscript implementation of mal requires Vim 8.0 to run.

The VB.NET implementation of mal has been tested on Linux using the Mono VB compiler (vbnc) and the Mono runtime (version 2.10.8.1). Both are required to build and run the VB.NET implementation.

The are over 600 generic functional tests (for all implementations) in the directory. Each step has a corresponding test file containing tests specific to that step. The test harness launches a Mal step implementation and then feeds the tests one at a time to the implementation and compares the output/return value to the expected output/return value.

To simplify the process of running tests, a top level Makefile is provided with convenient test targets.

Warning: These performance tests are neither statistically valid nor comprehensive; runtime performance is a not a primary goal of mal. If you draw any serious conclusions from these performance tests, then please contact me about some amazing oceanfront property in Kansas that I'm willing to sell you for cheap.

Every implementation directory contains a Dockerfile to create a docker image containing all the dependencies for that implementation. In addition, the top-level Makefile contains support for running the tests target (and perf, stats, repl, etc) within a docker container for that implementation by passing "DOCKERIZE=1" on the make command line. For example:

Existing implementations already have docker images built and pushed to the docker registry. However, if you wish to build or rebuild a docker image locally, the toplevel Makefile provides a rule for building docker images:

Mal (make-a-lisp) is licensed under the MPL 2.0 (Mozilla Public License 2.0). See LICENSE.txt for more details.|||

mal - Make a Lisp