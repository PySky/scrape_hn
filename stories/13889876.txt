The tech industry has grown at an incredible pace over the past several decades. Apart from the rapid overall industry revenue growth, in 2015, the total number of industry employees on payroll jumped by 200,000 to 6.7 million. That doesn’t even include the 1 million self-employed workers in tech. The industry as a whole accounts for 7.1 percent of the GDP in the United States. Most importantly, the growth in employment outpaced the country’s employment growth: 3 percent year-over-year in 2016 vs. 2 percent year-over-year in 2015.

What’s attracting this employment growth? To put it simply, money. The average tech industry wage in 2015 was $105,400. Compare that to the national average for the private sector, which sits at $51,600, and it’s easy to understand why more people are becoming interested in working in tech.

This disparity among industries isn’t going to change anytime soon. With a 17 percent employment growth rate expected by the Bureau of Labor and Statistics between 2014 and 2024, a tremendous appetite for jobs in the tech industry is slated for at least the next decade. In fact, by 2020, there will be 1.4 million computing jobs, but we’ll face an issue with only 400,000 computer science students.

The economic concept of supply and demand has a solution to this problem, and it’s already in the marketplace: Citizen Coders. According to Gartner, a Citizen Coder (a.k.a. Citizen Developer) is “an end user who creates new business applications for consumption by others using development and runtime environments sanctioned by corporate IT.” Companies like QuickBase are already finding that 68 percent of people designing apps for their platform don’t have any formal experience as a software engineer.

In an article in CIO.com, Karen Devine, vice president of marketing at QuickBase, said, “There’s such a big skills gap in the marketplace, and so much competition for the opportunities in the coding space. But what we were surprised to find is that only 8 percent of the respondents say they have formal coding experience, but nearly 70 percent [68 percent] develop apps as part of their day job.”

The technology industry has always been a support industry. Despite the rise of social networking and other technologies that have become synonymous with the industry, tech has always been married with something else in order to solve specific problems. Uber grew out of a consumer demand for increased efficiency and decreased cost in the transportation space. Airbnb is a new skin of an outdated hospitality industry. There are countless examples of companies arising out of disruption to solve everyday problems. The growth of the Citizen Coder is actually just an extension of this disruption. But instead of disrupting other industries, we’re disrupting the status quo within our own.

There are a number of advantages to using this new type of developer in organizations. The current age we’re in has introduced a number of tools that allow for low-code or no-code solutions to be utilized inside different departments. Unless an organization is developing artificial intelligence, neural networks, search engines or something equally as complex, a Citizen Coder can often take advantage of market-based low/no-code solutions to increase efficiencies using technology within their department. We’re all acutely aware that technology has become a requirement in most jobs. The notion of the Citizen Coder allows individuals to engineer market-based solutions for their immediate job functions.

Citizen Coders make sense inside many business units at enterprise organizations, including (but not limited to):

Building hybrid teams with traditionally educated developers and citizen coders isn’t as difficult as it may seem. There are a number of ways to integrate such diverse skill sets. One of the best ways is creating an engineering team mentorship program. Placing the more experienced developers (whether they be citizen coders or not) together with the inexperienced will not only allow everyone to learn from each other, it will bind the team together to become a cohesive unit.

It’s also important to encourage communication and debates within these hybrid teams, and emphasize communication during the architecting and ideation phases of technology development. The creativity that comes from diversity of thought and conversation between hybrid teams is incredibly powerful.

One more way to build culture among hybrid teams is to explore new technologies. Every engineer at their core is a problem-solver. But in hybrid teams the varying coding methodologies and experiences often lend themselves towards exploration. However, there’s a difference between exploring new technologies and adopting new technologies. The exploration alone is an excellent team-building exercise.

The citizen coder is a new and growing phenomenon. Over the next decade, companies are going to increasingly rely on those without formal engineering education. It’s imperative that we explore different team-building methods. But the most important thing is to focus on hiring the right people so that you can solve problems and implement solutions. If you build a team of professionals, no matter their background, you will be enabled to do great work.|||

The economic concept of supply and demand has a solution to this problem, and it’s already in the marketplace: Citizen Coders.