As simple as JPA annotations might be, it’s not always obvious how efficient they are behind the scenes. In this article, I’m going to show you what is the best way to use the JPA annotation when using Hibernate.

Assuming we have the following database tables:

A typical many-to-many database association includes two parent tables which are linked through a third one containing two Foreign Keys referencing the parent tables.

The first choice for many Java developers is to use a for Collections that don’t entail any specific ordering.

There are several aspects to note on the aforementioned mapping that are worth explaining:

Although the mapping is correct from a JPA perspective, from a database perspective, it’s not efficient at all. To understand why it is so, you need to log and analyze the automated generated SQL statements.

Considering we have the following entities:

So, instead of deleting just one entry, Hibernate removes all rows associated to the given and reinserts the remaining ones back afterward. This is not efficient at all because it’s extra work for the database, especially for recreating indexes associated with the underlying Foreign Keys.

For this reason, it’s not a good idea to use the for JPA associations.

Instead of a , we can use a .

The entity association will be changed as follows:

And the entity will undergo the same modification:

If you worry about the lack of a predefined entry order, then you can use either the or JPA annotations. does the sorting in-memory, after the entries are fetched from the database while materializes the element order in a dedicated column that is stored in the link table.

Now, when rerunning the previous test case, Hibernate generates the following SQL statements:

Much better! There is only one DELETE statement executed which removes the associated entry.

Using JPA and Hibernate is very convenient since it can boost developer productivity. However, this does not mean that you have to sacrifice application performance.

By choosing the right mappings and data access pattern, you can make the difference between an application that barely crawls and one that runs at warp speed.

So, when using the annotation, always use a and avoid the .

If you liked this article, you might want to subscribe to my newsletter too.|||

Introduction As simple as JPA annotations might be, it's not always obvious how efficient they are behind the scenes. In this article, I'm going to show you what is the best way to use the JPA @ManyToMany annotation when using Hibernate. Domain Model Assuming we have the following database tables: A typical many-to-many database association…