The longest increasing subsequence problem is to find a subsequence of a given sequence in which the subsequence‚Äôs elements are in sorted order, lowest to highest, and in which the subsequence is as long as possible. This subsequence is not necessarily contiguous, or unique.



 ¬†

 For example, consider below subsequence



This subsequence has length 6; the input sequence has no 7-member increasing subsequences. The longest increasing subsequence in this example is not unique: for instance,

 

 are other increasing subsequences of equal length in the same input sequence.

The idea is to use recursion to solve this problem. For each item, there are two possibilities ‚Äì



1. We include current item in LIS if it is greater than the previous element in LIS and recurse for remaining items.

 ¬†

 2. We exclude current item from LIS and recurse for remaining items.



Finally, we return maximum value we get by including or excluding current item. The base case of the recursion would be when no items are left.

Output: 

 

 ¬†

 The time complexity of above solution is exponential and auxiliary space used by the program is .

The problem has an optimal substructure. That means the problem can be broken down into smaller, simple ‚Äúsubproblems‚Äù, which can further be divided into yet simpler, smaller subproblems until the solution becomes trivial. Above solution also exhibits overlapping subproblems. If we draw the recursion tree of the solution, we can see that the same sub-problems are getting computed again and again. We know that problems having optimal substructure and overlapping subproblems can be solved by using Dynamic Programming, in which subproblem solutions are Memoized rather than computed again and again. The Memoized version follows the top-down approach, since we first break the problem into subproblems and then calculate and store values.

We can also solve this problem in bottom-up manner. In the bottom-up approach, we solve smaller sub-problems first, then solve larger sub-problems from them. The following bottom-up approach computes , for each , which stores the length of the longest increasing subsequence of subarray that ends with . To calculate , we consider LIS of all smaller values of (say ) already computed and pick the maximum where is less than the current element . It has the same asymptotic run-time as Memoization but no recursion overhead.

Output: 

 

 ¬†

 The time complexity of above solution is and auxiliary space used by the program is .

Above solutions only print the length of LIS but do not actually print LIS itself. To print the LIS, we actually have to store the longest increasing subsequence in lookup table instead of storing just LIS length.

For example consider

 

 ¬†

 The Longest Increasing Subsequence of subarray that ends with are ‚Äì

Output: 

 

 ¬†

 The time complexity of above solution is and auxiliary space used by the program is .

We will soon be discussing algorithm to find length of Longest increasing subsequence.



Please use ideone¬†or¬†C++ Shell¬†or any other online compiler link to post code in comments.

 Like us? Please spread the word and help us grow. Happy coding üôÇ

|||

Longest Increasing Subsequence is a subsequence of given sequence in which subsequence's elements are in sorted order & subsequence is as long as possible.