Abstractions that use Ramda lenses to interact with Redux store.

Version 1.0.0 is available by installing @next. It has breaking changes. If you are just getting started with Redux Lenses, I recommend using v1. If you are already using Redux Lenses, you can read the docs to see what you will need to do to upgrade.

Redux is an excellent tool for state management, but using the standard pattern of action creator to reducer to connect is tedious to do for each state variable. Often people fall back to using React state. Redux Lenses is an attempt to make redux state management easier than React state management by using Ramda lenses to mutate the redux state.

Although react is not in the title, this library currently has a peer dependency on React. Sometime in the future, I'll separate out the connect functionality to a separate library. For the time being, this library only supports using Redux with React.

redux-thunk is required for using the request method

To use redux lenses with another reducer, pass that reducer to lensReducer.

One area of state, such as auth, can be altered via the auth sub-reducer or Redux Lenses.

Declare the absolute path of the lens within redux state. Default is used if value is undefined or null.

Only path is required. Transform happens after default, so if the default value is being used, it will still run through the transform function.

Use view() to get the current value. Use set(value) to set the value. Set accepts a non-function value or an update function.

The redux action has this shape. It contains info about the lens that can be used in debugging.

Redux Lenses offers a method called 'request' for managing the state around async requests, such as API calls to the server. The request method accepts a promise as it's only argument. Make sure you've set the default value to an empty object in your lenses file.

There's no need to catch the errors. Errors and results are captured in state.

If you don't need to set the lens from within your component, you have the option of using the connect method from the react-redux package to put the value on to props. When doing this, there is not "view()" method. The value is available as the prop.

One caveat of doing it this way is that the value passed to connect may have been transformed by your transform function, which you specify when creating the lens. If you use a constructor in the transform, the value may appear as having changed when it hasn't, causing unnecessary renders. To avoid this, you can use the lensGroup.connect method, which compares values prior to transformation.

Class for interacting with a group of lenses.

Same as viewSet, but it gives you values for all the lenses in the group.

Class for interacting with one lens.

Removes result and error and sets state at that lens to:

Very similar API as EnhancedLens, except for connected lenses.

It may be cleaner to do requests in action creators, as demonstrated above. It is also available on the connect lens, if you want to use it in containers.

Note: The request method does not dispatch it's argument.

Removes result and error and sets state at that lens to:|||

redux-lenses - Abstractions for interacting with Redux state by using Ramda lenses.