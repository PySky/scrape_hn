We’re happy to announce the release of React 0.14 today! This release has a few major changes, primarily designed to simplify the code you write every day and to better support environments like React Native.

If you tried the release candidate, thank you – your support is invaluable and we've fixed a few bugs that you reported.

As with all of our releases, we consider this version to be stable enough to use in production and recommend that you upgrade in order to take advantage of our latest improvements.

Like always, we have a few breaking changes in this release. We know changes can be painful (the Facebook codebase has over 15,000 React components), so we always try to make changes gradually in order to minimize the pain.

If your code is free of warnings when running under React 0.13, upgrading should be easy. We have two new small breaking changes that didn't give a warning in 0.13 (see below). Every new change in 0.14, including the major changes below, is introduced with a runtime warning and will work as before until 0.15, so you don't have to worry about your app breaking with this upgrade.

For the two major changes which require significant code changes, we've included codemod scripts to help you upgrade your code automatically.

See the changelog below for more details.

We recommend using React from and using a tool like browserify or webpack to build your code into a single bundle. To install the two packages:

Remember that by default, React runs extra checks and provides helpful warnings in development mode. When deploying your app, set the environment variable to to use the production build of React which does not include the development warnings and runs significantly faster.

If you can’t use yet, we provide pre-built browser builds for your convenience, which are also available in the package on bower.

As we look at packages like react-native, react-art, react-canvas, and react-three, it has become clear that the beauty and essence of React has nothing to do with browsers or the DOM. To make this more clear and to make it easier to build more environments that React can render to, we’re splitting the main package into two: and . This paves the way to writing components that can be shared between the web version of React and React Native. We don’t expect all the code in an app to be shared, but we want to be able to share the components that do behave the same across platforms. The package contains , , , , , and the other helpers related to elements and component classes. We think of these as the isomorphic or universal helpers that you need to build components. The package has , , and . In we have server-side rendering support with and . The old names will continue to work with a warning until 0.15 is released, and we’ve published the automated codemod script we used at Facebook to help you with this transition. The add-ons have moved to separate packages as well: For now, please use matching versions of and (and the add-ons, if you use them) in your apps to avoid versioning problems. The other big change we’re making in this release is exposing refs to DOM components as the DOM node itself. That means: we looked at what you can do with a to a React DOM component and realized that the only useful thing you can do with it is call to get the underlying DOM node. Starting with this release, is the actual DOM node. Note that refs to custom (user-defined) components work exactly as before; only the built-in DOM components are affected by this change. This change also applies to the return result of when passing a DOM node as the top component. As with refs, this change does not affect custom components. With this change, we’re deprecating and replacing it with (see below). If your components are currently using , they will continue to work with a warning until 0.15. In idiomatic React code, most of the components you write will be stateless, simply composing other components. We’re introducing a new, simpler syntax for these components where you can take as an argument and return the element you want to render: // Or with destructuring and an implicit return, simply: These components behave just like a React class with only a method defined. Since no component instance is created for a functional component, any added to one will evaluate to . Functional components do not have lifecycle methods, but you can set and as properties on the function. This pattern is designed to encourage the creation of these simple components that should comprise large portions of your apps. In the future, we’ll also be able to make performance optimizations specific to these components by avoiding unnecessary checks and memory allocations. The package and browser file have been deprecated. You can continue using version of both, but we no longer support them and recommend migrating to Babel, which has built-in support for React and JSX. React now supports two compiler optimizations that can be enabled in Babel 5.8.24 and newer. Both of these transforms should be enabled only in production (e.g., just before minifying your code) because although they improve runtime performance, they make warning messages more cryptic and skip important checks that happen in development mode, including propTypes. Inlining React elements: The transform converts JSX elements to object literals like instead of calls to . Constant hoisting for React elements: The transform hoists element creation to the top level for subtrees that are fully static, which reduces calls to and the resulting allocations. More importantly, it tells React that the subtree hasn’t changed so React can completely skip it when reconciling.

In almost all cases, we change our APIs gradually and warn for at least one release to give you time to clean up your code. These two breaking changes did not have a warning in 0.13 but should be easy to find and clean up:

These three breaking changes had a warning in 0.13, so you shouldn’t have to do anything if your code is already free of warnings:

Each of these changes will continue to work as before with a new warning until the release of 0.15 so you can upgrade your code gradually.|||

