As an iOS developer, you’ve probably used the delegate pattern before.

But how about those times when you’re building your own classes, and you’re wondering how or when to incorporate the delegate pattern.

What’s really to gain when using delegation in your own code ?

The big advantage is to avoid subclassing whenever possible.

I mean there is nothing wrong with subclassing, but it’s just that it comes in limited quantity as you know. (a class can’t inherit from multiple classes)

For example let’s say we want to implement a class to represent a cool GridView, and distribute it as a cocoapod.

And let’s say another developer want to use your cocoapod. Part of that would be to specify what happens when a UITableViewCell gets selected.

One way the other developer can achieve that is by subclassing the class you wrote and add the custom behavior he wants.

But since he’s probably using a UIViewController for this, then he’s already using the single subclass opportunity.

As you have guessed , the clean way to implement your fancy GridView is by using the delegate pattern.

Basically we will tell the user of our cocoapod instead of subclassing, just point us at an object (a delegate) that implements a protocol (agrees to declare & implement certain methods) and we’ll make sure we call those methods, that way you can decide what to do when a cell gets clicked.|||

But how about those times when you’re building your own classes, and you’re wondering how or when to incorporate the delegate pattern. I mean there is nothing wrong with subclassing, but it’s just…