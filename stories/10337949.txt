DISCLAIMER: This post is about an untested, non-guaranteed method of detecting inefficiencies in the sports betting market. It is considered as an interesting mathematical and programming exercise, and I encourage the reader to view it strictly as that. I do not encourage anybody to use this system with real money, and if you decide to do so, do it at your own risk.

Some weeks ago I started a personal project in my free time. I wanted to check how accurately could a soccer match be modeled as a Poisson process. It turned out that it works surprisingly well, and thus the next step was to check if the market in a sports betting exchange thinks the same. I used Betfair, and it confirmed what I though... mostly. I developed a program to find the sparse discrepancies between the expected probabilities and those implicit by the marked, and I bet according to my results. In order to optimize this process, I found the optimal fraction to bet, considering the market depth, the lay/back betting system, the multiple outcomes and the market fees. To efficiently solve this equations (one to estimate the parameters in the Poisson process and one to estimate the optimal fraction to bet). I used out-of-the-box solvers provided by python-scipy. Since arbitrage opportunities are scarce and not very lucrative, I called recurrently the Betfair API in order to sweep these opportunities 24/7. Everything should work fine, except for a PERMISSION_DENIED error at the last moment. It turned out that in Germany the Betfair Exchange cannot operate. So I made my code open source.

The reader might be familiar with the betting exchange Betfair. For those who aren't I provide a little introduction (feel free to skip this section if you have experience with sports exchanges).

Betfair is a place where you can bet on the outcome of different sport events. Bets are placed between individuals, while Betfair remains as a middleman providing the infrastructure and logistics. This works like the Stock Exchange, being Betfair the exchange, and the betters are the traders.

When you enter the exchange you see something like this:

This is how the site looks for a particular football (soccer) event. You can bet on the match outcome (the most traditional way) or on more exotic scenarios, like who will score the next goal, the half-time result or the total number of goals scored. Each of these scenarios are called market, and each particular outcome is called runner (surely for historical reasons, since Betfair started with horse racing).

When you bet at a for a particular runner in a given market, you can either back -you pay one unit of currency and if that outcome happens you receive the value of the bet- or lay -you receive one unit of currency and if this event happens, you pay the price of the bet.  These concepts, while not conceptually hard, require a little of though the first time you encounter them, so don't hesitate to give yourself time to internalize them.

A slightly deeper analysis of the bet price show its resemblances with the stock market. When you back a runner you are essentially betting that a particular outcome will take place, and thus the price of this bet will rise. As an example let's consider an imaginary event, the Venus F.C. vs Mars F.C., and at a given moment the bets are as following:

Suppose you back Venus F.C.. You spend 1 unit of currency (to buy the "ticket"). If Venus F.C. wins, you earn 1.05 units (so a profit of 0.05 units, or 5%), and if it loses, you lose the unit you used to purchase the ticket. We can consider that we bought a ticket that has a chance of being 1.05 units worth and a chance of being 0 units worth (for the financially literate reader it surely sounds like the options market).

Now fast forward to the half-time. If Venus F.C. scored 3 goals and Mars F.C. none yet (and thus making it much more likely that Venus wins), the reward for backing Venus will not be 1.05 any more, but much lower, for example, 1.01.

There are two ways of looking at this new situation:

If we consider the second case, it is clear that the price of the ticket rose from 1 unit at the beginning of the match to 1.0396 units.

Conversely, if we were to lay on Venus F.C. we would expect the price of the "ticket" to drop. These mechanics are like those of long/short selling in the stock exchange, respectively.

There is some information one can extract from the value of the bets, as fixed by the market. The most obvious one is the implicit probabilities, i.e., the probabilities the market expect that would give an expected value of zero. Consider the same example as before:

If for each unit of currency bet on Venus F.C. I earn 1.05 units, the probability of winning that would give a zero expected value would be:

In general, the market-given implicit probability is the inverse of the odds. In the example above, there are 95% chances Venus F.C. to win, 5.89% chances Mars F.C. to win and 4% a draw.

Two things should catch your attention:

If we did the same for the Lay columns, we can get the market-given implicit probability of one event not happening. Ideally it should be exactly the complementary of the outcome happening, but what happens is slightly more complicated.

We got the implicit probability of Venus F.C. winning is 1/1.05=95%. If we do the same for Venus F.C. not winning, it would be 1-1/1.07=6.54%.

Again, we get that the market "inflates" the probabilities in order to increase the chances of being right.

Again, dear reader, these concepts, although not specially complicated, require a little bit of though the first time one encounters them. I would love to explain them in depth and to give more examples and anecdotes, but we still have ahead a little bit of mathematics, statistics, programming and integration with the Betfair API.

Imagine you are the manager of a call center and you are in charge of deciding how many operator you will need. You know that the incoming calls don't affect each other, and the expected number of calls for a given hour is λ. The probability of receiving k calls in a given hour follow the Poisson Distribution, and in case you are not familiar with it, I kindly invite you to read more about it in Wikipedia. It takes the form

Below the representation of the distribution for λ=1, λ=4 and λ=10 (from Wikipedia):

For example, according to the graph above, if your call center receives  λ=10 calls/hour, the expected probability of receiving exactly 5 calls in a given hour would be 5% (blue dots).

The calls in a call center in a given day, or the letters you receive in a given week both follow a Poisson distribution. Interestingly enough, the number of goals in a soccer match also follow it. The idea of modeling a soccer match as a Poisson process is not new, which shows that, in a professional match, the probabilities of scoring a goal is not affected by the current score. This effect is interesting by itself, since it shows that morale or other psychological factors do not affect the evolution of a professional match.

The challenge lies, still, in finding the appropriate λ value for each team. This parameter depends on both teams. Its intuitive explanation is the number of goals expected to score each one of the teams against the other.

The parameters to estimate lambda come from the following iterative process:

The steps 1-5 describe a function that takes as input two values (λ0 and λ1) and gives as output a single value -the error. What we want is to find the pair (λ0,λ1) that minimizes this error. This is a common mathematical problem and there are endless solvers out there to handle that.

I decided to go ahead with python and scipy.

Once you have the (λ0,λ1) that minimize the error, you essentially have the expected goals (according to the market) of each team. Now we have full information about the probabilities of any outcome we want.

The Kelly Criterion. How much should I bet to maximize profits.

Before we implement our algorithm, I need to introduce the Kelly Criterion. As usual, I give only a brief introduction, so the readers unfamiliar with this concept are encouraged to follow the Wikipedia link to find out more information.

In short, the Kelly Criterion tells the optimal amount of money you should bet considering the probabilities p of winning and the odds b. Kelly provides a simple formula for the case that:

Unfortunately these hypothesis do not hold for us.

We need to make a little of extra work in order to model the price of the bet respect to the amount bet (which ideally would be an horizontal line).

Here comes in play the market depth. If you look closely at the screenshot of Betfair exchange:

You can notice there are a little amount of money under each price. This is the quantity the market accepts at each price. Which means that, the more you bet, the worse are the payouts. This is something similar to the stock exchange, where if you place a large buy order, you will shift the price upwards.

Once an opportunity with positive expectancy is found (like a biased coin with a 51% chance heads) the next question is "How much should I bet in order to win as much as possible in the long run?". In order to answer this question there is the Kelly Criterion, which I encourage the reader to read about in Wikipedia, since in this article I will use a slightly modified version:

Now we can continue with the deduction of the Kelly Formula. Consider a game where we have a probability p of being payed b for each unit of money played. Let's calculate the optimal fraction of money f you'd need to bet each time in order to maximize your expected payout:

You play once, and suppose you win, your final money will be

Now you play again, suppose you win again:

And so on. Image we play 'n' times. Since we know the probabilities, for 'n' large enough we would expect to win n·p times and lose n·(1-p) times. So our final money will be:

At this point we can easily see two strategies that won't work:



1. Betting always all your money (f=1). It will ensure bankruptcy.

2. Betting none of your money (f=0). It will ensure M=M0.



Let's now divide both terms by the initial money (M0) and let's raise to the power 1/n

 The mathematically enthusiastic reader has surely noticed that we have just calculated the geometric average. Indeed, the Kelly Criterion aims to optimize the geometric average of the payouts.

At this point we can easily generalize for the case of many outcomes. If we look closely at each term of the equation above we see that (1+f·b) is the relation M/M0  if the outcome happens, and (1-f) is again M/M0 but if the outcome does not happen. That means, in order to get the geometric average of the payouts we take the relation M/M0 of each potential outcome, we raise it to the probabilities of it happening, and we multiply them all. So, if we wanted to generalize the previous equation for 3 outcomes, with:

Then the expected profit to optimize would be:

As an additional exercise for the enthusiastic reader you can try to get the expected profit when the outcomes are independent but not mutually exclusive, p(A|B) = P(A) and P(B|A) = P(B). And even further, if the outcomes are dependent on each other (you will need the Bayes Theorem). These cases, although mathematically interesting, don't apply for our process, so I won't go deeper.

The hypothesis here is that the payout per win b is constant, no matter how large f·M is. That means, I could bet 1000 units and still expect a payout of 1000·b if I won. Unfortunately this hypothesis does not hold in a betting exchange (nor in the stock exchange) and thus we need to account for the fact that b is not constant, but a function of f, or more exactly, the quantity bet, f·M. So, let's make b = b(f·M)



The last thing to consider is that we can both lay and back a bet. Laying is the same as "selling", or negative betting.

When solving this equation, we need to make sure that the bases (1+f·b) and (1-f) are kept positive. For one, raising a negative value to a fractional power is not defined in the real numbers, but also if the base is negative it means you are betting more than you have (or laying more than you can afford to lose), so these cases don't make sense in the real world anyway.

The nice thing about the equation above is that it always give coherent values, even if the odds are against you -in which case it would obviously say that the optimal action is f=0, or not betting at all.

The graph above was constructed with the values of the first screenshot (for Swindown). It shows the payout respect to the volume played. Positive volumes are back and negative volumes are lay. As expected, the more money we back, the less the payout will be. Conversely, the more money we lay, the more we'll need to pay if that outcome happens.

With an accurate price model and the theoretic odds, we can calculate the optimal fraction of money to invest in a given market.

The reader will quickly notice that in the source code provided there is an additional component, the fee of the exchange. This can be trivially added in the right place during the calculation and thus I decided not to further complicate this post with this data.

As before, I chose the python-scipy package to maximize that function. If we repeat the process for each market, we will get the optimal fraction of money to bet in each runner for each market.

The reader might be wondering what all this has to do with arbitraging. At first sight, we are simply optimizing a bet (or portfolio), and not leveraging inefficiencies in the market. Sure enough, this is indeed arbitrage, since the lambda parameter of the Poisson process have been calculated from the very same dataset we are using to bet. Ideally, if every market were correctly priced, the optimal fraction would be f=0. That happens most of the time, and that's why we need the next step. To use Betfair's API to automate this whole process.

The Betfair exchange provides an API to retrieve events and markets and to place bets. The interested reader can visit the Betfair's Developer Program to read the documentation and usage examples.

The file betapi.py is a wrapper for said API. It implements the methods to list events, list all markets in each event, all runners in each market and the price as a function of the volume played.

We are almost done. And what a journey! From how exchanges work to statistics, optimization and programming! I hope I sparked your interest in at least some of the subjects covered (all of them are exciting topics!).

In this last part I will describe the architecture of the program that automated the arbitrage, and at the very end I will give you a link to the code. So fasten your seat belt and let's go!

The program is composed of four main modules:

The main.py file initializes the manager and asks for a list of events (i.e matches). Since agility is important, it takes as many events as cores the computer has. If less, computing power is being wasted (idle cores), and if more, it will take too long, thus potentially losing the arbitrage opportunity. In order to tune this, it asks for the events in the following 0.5, 1, 1.5... hours, until number_of_events>=number_of_cores.

Now, each core will receive a different event. This is easy to parallelize using the multiprocessing library in Python. Special attention was paid to the fact that the Manager object needed to be duplicated (I must confess, dear reader, that I am not really proud of this decision, but consider that this program was at first expected to run in a single core).

The first thing in each event is to estimate the more accurate lambdas. As a quick optimization, if the error is 0 -i.e., the lambdas fit perfectly in all markets-, no further calculation is carried out, since there is no arbitrage opportunity (we could calculate it, but the Kelly Criterion would say that the optimal fraction would be 0). If that happens, the function will return None.

If the error for the optimal lambdas is not 0, then we proceed to call the Estimator module to ask for the optimal fraction for each of the markets. The Estimator module also gives the expected profit (as a percentage of the total money available). The function then returns the optimal fraction, the maximum expected profit across all the markets and some more data to the main thread.

When all the cores are ready calculating, we have a vector with the optimal bet, the expected profit and some more information for the most profitable market in each of the events. We take the maximum of them (so we are calculating the most profitable market of the most profitable event across all tested) and we compare against a threshold. If bigger, then call executeBet and bet.

The main program is called main.py, and you need to call it as follows:

(Please take a look at the file launch.sh for a cron ready script).

I am not giving more details about how to run it step-by-step, since anyway the sensible audience who is reading this will never execute a unread code which has their username and password for a money-handling service. Right?

You can find the source code in GitHub

I hope you enjoyed the journey to this point and in the way you learned a few things. This post is not intended as an in-depth manual of any of the subjects covered -which would take hundreds of pages-, but more like an in-breadth introduction to all of them, and specially on how we can leverage such different fields for a common goal. Again, I do not encourage anybody to use it with real money, and if you decide to do so, it is strictly at you own risk.|||

