Universal Links were introduced this year at WWDC '15, giving developers the power to integrate their app into even more user workflows.

For those that haven't dug into them yet: Universal Links let your app register to handle HTTP/HTTPS links for your domain. So when a user clicks a link to your web site, say from an email or link on Twitter, iOS checks to see if your app said it can handle that URL. If it can, your app will open instead of Safari.

Along with your app letting iOS know it can support specific URLs, you do also need to include a JSON file on your server giving specific app IDs permission to handle said URLs. This is Apple's way of verifying the owner of the URL endpoint is granting permission for apps to hijack links. So for example Tweetbot can't register to handle Twitter.com links, at least not without Twitter specifically granting them permission.

Third-party clients for popular services can find this annoying, no way Twitter will whitelist Tweetbot to handle their links, but there are valid security reasons as we'll see.

For your first-party iOS client, Universal Links aren't just for your brand or increasing engagement, they can also be used to greatly improve the user experience of previously annoying workflows.

The traditional password reset workflow goes like this:

With universal links we can remove Safari from that process entirely. Users can now reset their password in-app, allowing the app to also automatically log them in after the reset. This is all possible while still having the security of the reset password email to confirm identity.

Huge win for the UX. Check it out in action:

Surprisingly simple. You can read Apple's guide for supporting links or watch Session 509 from WWDC '15 for the full details, but really it came down to three code snippets.

On my web site I uploaded that previously mentioned JSON file to whitelist my iOS app to support the reset URL:

In my iOS app I'm taking advantage of JLRoutes (you can always do the URL parsing yourself, that library not required) to manage my routing and URL parsing, so I register that in my app delegate during startup:

And lastly I implement the Universal Link callback method on my app delegate to let iOS know if I handled the route request or not (this is the same method Handoff uses):

And that's it. Now I'm able to intercept those URLs from Safari and show my app's reset form instead.

Universal Links are great because they aren't some scheme-specific link (ex ) that won't work when the app isn't installed. If the app isn't installed, or the user is on their desktop computer, the forgot password workflow still behaves like it used to.

We really have no excuse not to improve workflows like password-reset and email-verification for our users. Apple made it pretty trivial.|||

