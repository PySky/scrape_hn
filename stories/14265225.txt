Let’s try to fetch the program names for a single order:

I previously wrote about the N+1 problem and this is a classic case. If we need two queries for each order, the number of queries for 100 orders will be 1 + 100 * 2 = 201 queries — that’s a lot!

Let’s use Django to reduce the amount of queries:

Great! Django performed a join between and and reduced the amount of queries to just one per order.

At this point instead of 201 queries we only need 101 queries for 100 orders.

Can we do better?

The first question that should come to mind is “why can’t we join the tables?”

If we have a foreign key we can use or use snake case like we did above to fetch the related fields in a single query.

For example, we fetched the program name for a list of prices in a single query using . We were able to do that because each price is related to exactly one program.

If the relation between two models is many to many we can’t do that. Every order has one or more related prices — if we join the two tables we get duplicate orders:

Orders 70 and 45 have multiple items so they come up more than once in the result — Django can’t handle that.

Django has a nice, built-in way, of dealing with this problem called prefetch_related:

We told Django we intend to fetch from the result set. In the second and third query we can see that Django fetched the through table and the relevant programs from . The results of the prefetch are cached on the objects.

What happens when we try to fetch program names from the result?

No additional queries — exactly what we wanted!

When using prefetch, it’s important to work on the object and not on the query. Trying to fetch the program names with a query will produce the same outcome but will result in an additional query:

At this point, fetching 100 orders requires only 3 queries.

Can we do even better?

At version 1.7 Django introduced a new object that extends the capabilities of .

The new object allows the developer to override the query used by Django to prefetch the related objects.

In our previous example Django used two queries for the prefetch — one for the through table and one for the program table. What if we could tell Django to join these two together?

We created a query that joins prices with programs. Than we told Django to use this query to prefetch the values. This is like telling Django that you intend to fetch both items and programs for each order.

When we talked earlier about the models we mentioned that the prices are modeled as an SCD table. This means we might want to query only active prices at a certain date.

A price is active at a certain date if it’s between and :

Using the Prefetch object we can tell Django to store the prefetched objects in a new attribute of the result set:

We can see in the log that Django performed only two queries, and the prefetch query now include the custom filter we defined.

To fetch the active prices we can use the new attribute defined in :

Prefetch is a very powerful feature of Django ORM. I strongly recommend going over the documentation — you are bound to strike a gem.

If you like Django optimization tips check out my other stories on medium:|||

I have recently worked on a ticket ordering system for a conference. It was very important for the customer to see a table of orders including a column with a list of program names in each order…