Deploying Lambda functions with Apex is fairly easy. Following their one page guide will set you up and running on Lambda in minutes. More than that, there a bunch of code examples available that will help you set up a proper Javascript environment for your functions.

The only thing I was missing is a tiny lib to handle APIGateway HTTP requests and routing. Every time I had to write helper functions that parse the incoming parameters and respond accordingly to the APIGateway or direct Lambda invocations. I finally managed to hide all this complexity in a small, reusable package called LambdaReq. I’m doing my best to keep the API and the examples up to date.

Parsing data from APIGateway and responding with the right format can’t get simpler than this. Each request handler gets a callback with direct access to the event parameters. will gather all the data from , and .

Shorthand REST methods are available for setting up routes.

Handling maintenance tasks (i.e. migrations, cronjobs) and internal Lambda happens through the method. Each proxy handler has a unique name, passed as a prop on the Lambda event.

calls other Lambdas on the same network.

A route handler can return any result on success that will be stringified as a body for APIGateway HTTP responses. results are also supported.

Handlers can throw errors or reject Promises, they will be properly parsed by the router. error types can set a message and a custom response status for the APIGateway.

Support for SNS and SQS is coming next. Any help and feedback is highly appreciated. More examples are here. A complete API is available on GitHub.|||

