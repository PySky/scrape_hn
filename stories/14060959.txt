I just read the article “Never Mix Promises and Callbacks in NodeJS” from the front-page of Hacker News and I found two errors that have nothing to say with what is explained in the article.

I do love promises and think that async/await are awesome, so I want to explain why it really fails. First let’s see the basics, you would not write this code for testing, as you know it will not work, right?

Here throws an Error when the expectation fails, so that example will never get to for that reason but won’t still be failed since it’s catched. The example in “Never mix Promises and callbacks in Node.js” is basically that:

In either way should be throwing exceptions as fetchFirstUser( ) expects a callback as the second parameter but it’s being passed as the first. This makes it to never be executed and thus timing out. Let’s assume though that it’s a typo/edition error, it will still not work right.

You should not be catching the error you want to see for testing. In the same way that the first example in this article doesn’t make sense, when you use .catch() you are swallowing the errors that expect() throws.

So the code could be refactored to use the two parameters of then for example, which won’t catch what is thrown in the callback. Also using standard Node.js signature:

The first and most obvious one is to learn more about the inner workings of the testing framework you are using. Make some tests and find out why they work/don’t work. It took me a while to get used to it, but when I stopped fighting them and started really poking at them I learned a lot.

The second and not always possible is to switch to Async/Await (disclaimer: I love those). It is supported out of the box with Node.js 7.6 and with those you can simplify the code above to this:

However if you are going to use ES7 please learn really well promises and async/await before doing so. This is a great resource for that.|||

I just read the article “Never Mix Promises and Callbacks in NodeJS” from the front-page of Hacker News and I found two errors that have nothing to say with what is explained in the article. I do…