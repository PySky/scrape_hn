Implicitly unwrap optional values and use default values whenever needed.

Add the following to your .

Burrito helps you to get your together and unwrap concisely and in a more readable fashion.

Given you're about to instantiate the following struct:

With pure Swift you're likely to see this code in you App:

Using Burrito the required type will be inferredyou can make your code as readable as this:

What doesn't look like saving a lot of code at first clearly brings a few advantages:

Please note that is just syntactic sugar and can effortlessly be omitted.

Unwrapping dictionaries shouldn't be painful, let Burrito help you unwrap:

As you can see, because is non-existent in the payload, when trying to unwrap it a default value will be used. This value can be returned in the closure.

By telling Burrito what type you'd like to unwrap and specify a default closure returning the value you'd expect if the object can't be unwrapped or casted:

Trying to cast an to a won't work e.g.:

But when providing the correct type you'll get it's value back e.g.:|||

Burrito - ðŸŒ¯ Unwrapping your Swift optionals in a type-safe manner, backed by default values.