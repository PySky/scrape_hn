Electron Forge unifies the existing (and well maintained) build tools for Electron development into a simple, easy to use package so that anyone can jump right in to Electron development.

Note: Electron Forge requires Node 6 or above, plus git installed.

With these goals in mind, under the hood this project uses, among others:

This command will generate a brand new project folder and install all your Node module dependencies, so you will be all set to go. By default we will also install the linting modules. If you want to follow the linting rules instead, use the argument.

You can also start a project with your favorite framework with the argument. E.g. .

Given an existing Electron project, this command will attempt to interactively navigate through the process of importing it to the Electron Forge format, so the commands listed below can be used. This includes being prompted to remove existing Electron build tools in favor of Electron Forge equivalents.

Any arguments after "start" will be passed through to your application when it's launched.

Yes, it really is that simple. If you want to specify platform / arch, use the and arguments.

This will generate platform specific distributables (installers, distribution packages, etc.) for you. Note that you can only generate distributables for your current platform.

This will your project and publish any generated artifacts. By default it will publish to GitHub but you can change the publish target with .

Once you have generated a project, your file will have some default configuration. Below is the reference structure for this config object:

You can set with any of the options from Electron Packager.

NOTE: You can also set your config property of your package.json to point to a JS file that exports the config object:

NOTE: If you use the JSON object then the and options are mapped to calls internally, so provide a path to a file that exports your hooks and they will still run. If you use the JS file method mentioned above then you can use functions normally.

You can make your own custom targets for the and targets. If you publish them as or you can then just specify as your make / publish target. The API for each is documented below.

You must export a Function that returns a Promise. Your function will be called with the following parameters.

Your promise must resolve with an array of the artifacts you generated.

You must export a Function that returns a Promise. Your function will be called with the following parameters.

You should use to indicate your publish progress.

Debugging your Electron main process through VS Code is ridiculously easy with Forge. Simply add this as a launch config in VSCode and you're good to go.|||

electron-forge - A complete tool for creating, publishing, and installing modern Electron applications