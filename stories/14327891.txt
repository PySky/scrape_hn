So maybe you’ve heard that AR and VR are hot topics. Facebook’s F8 developer conference this year focused heavily on AR/VR. Tim Cook is on record as being a firm believer in AR, and rumors abound (as always) of Apple dropping a bomb this June at WWDC to support this stance. Microsoft has released the Windows 10 Creators Update whereby they’re basically giving OEMs the inside-out tracking of the Hololens for free. As such, Acer and Lenovo are expected to produce $300 AR/VR headsets by the end of year. Google has vowed to merge Tango into Daydream. A lot is happening in a short period of time by all of the major players.

Perhaps you’re thinking now would be a great time to pick up some Unity. We’d tend to agree! It’s very approachable, it has multi-platform support, and it is the weapon of choice for most in the AR/VR space. That’s why we’ve put together this blog mini-series. That and we’ve found existing community tutorials and guides to be sparser than we’d like. As of this writing, the top google result for “learning unity for software developers” is an old Unity Answer that just links to the Unity docs. So if you’re coming from traditional software development, stick with us and we’ll show you the ropes.

The motivation for this blog series may be AR/VR, but we won’t touch any AR/VR SDKs until later in the series. This post in particular simply aims to familiarize the reader with Unity and a few common workflows.

Our goal is to give you a dev’s perspective on Unity. Unity’s tutorials will go deep and take you feature by feature. We want to go for breadth and show you what can be accomplished if you stay shallow but put a whole lot of things together quickly. (i.e. finding assets + simple components + coroutine timers + basic physics + directory structure + etc…) This way you can have an immediate sense for how everything fits together.

We’ll assume a healthy amount of technical competence, so we’ll assume you’ll have an easy time setting up environments and digging through docs when necessary. We also assume a minimum of 3D game terminology. We apologize in advance if we miss a step here or there though.

To give you a sense for Unity development, we’ll take you through the building of a simple Unity app which hits on most of the key points you’ll need to know while building apps of your own.

This app will be a simple fireworks simulator.

If you don’t have it yet, you can download the latest version of Unity here. It is version 5.6.0f3 as of this writing. Once you’ve downloaded it, you’ll want to fire it up, create a new empty project, save the default empty scene as , and quickly get acquainted with the layout of Unity:

Project Window — A view of the Assets directory. This will contain 99% of your project files.

Toolbar — Home to the translate/rotate/scale tools and preview/pause buttons.

These are all pretty straightforward windows. If you’d like to read more about them, you can find the docs here.

A typical workflow involves importing Unity Assets into the Assets directory, searching in the Project Window for objects you’d like to import into the scene, dragging said object into the Hierarchy Window to add it to the scene, choosing a tool from the Toolbar, manipulating said object in the Scene View with the chosen tool, and tweaking said object in the Inspector Window.

Now that we’ve created an empty project, the next question a developer invariably ask is: What is a good directory structure for our new project?

We recommend you quickly look at a handful of different open source Unity projects to get a sense for how projects are typically structured. One of our favorite open source AR apps for Unity is Microsoft’s Galaxy Explorer for the Hololens. Also check out KatVHarris’s GettingStarted_VR repo for a boilerplate GearVR app.

You’ll notice very quickly that at the root of the Assets dir you’ll typically find the following directories: Editor, Materials, Plugins, Resources, Scenes, etc… Some of these are per the conventional layout. Some of these are Special Folders. Special Folders are kind of like magic numbers. They sound really cool at first but ultimately have hidden gotchas that could make life great, or they could make life miserable for those caught unaware. The method Resources.Load, for example, resolves paths by looking through all directories named . This method also limits you to loading from said directories or subdirectories only.

You’ll also notice that certain top level directories under the root Assets dir also contain these Special Folders as sub-directories. The OVR directory in the GearVR repo is one such example. If you see something like this you’re typically looking at an imported asset/dependency where the author of the package exported nearly their entire Unity project. Another thing to note is that Unity imports assets into the root Assets dir, so most projects end up with pretty messy top level dirs if left unattended. You might ask: can’t you just shove all of these dirs in a directory called Dependencies? Unfortunately, some asset authors take advantage of being able to park their files anywhere in your project. For example, some assets will happily place files in , which is a special directory that has the advantage of running its scripts first. This is useful, but it can make dependency management a nightmare.

Finally, you’ll see that the Galaxy Explorer app doesn’t keep the majority of its textures, materials and prefabs in top level dirs like Textures, Materials or Resources. This is because the original authors opted for a predominantly component based directory structure where most files are organized by component (GalacticCenter, SolarSystem, etc…). Another common strategy is to employ a functional directory structure where files are organized by function. Both styles can work. We’re personally big fans of the component based structure as project size increases (in our Unity code, React projects, and elsewhere), but you’ll often see the functional organization strategy out in the wild, especially in smaller projects like asset store dependencies.

Now that we know a bit more about directory organization, let’s import some assets!

If you’re working with an artist, great. They should be able to supply you with meshes, textures, materials, and all sorts of other goodies to load into your app. If you’re looking to get something running quickly for the sake of a prototype, you can also import something from the Unity Asset store, which integrates directly with Unity.

Finding pre-existing assets can range from being incredibly easy to tear-your-hair-out stressful. You can usually find something that functionally works, but it’s often very difficult to find a pre-made asset that fits into your app’s art style. Or you may simply not be able to find assets that meet even the most basic quality bar. A search on the Unity Asset Store for “city skyboxes” doesn’t turn up anything approaching photo-realism. A search for just “skyboxes” returns tons of photo-realistic, empty skies, however.

For our fireworks app, we’ll want something like this free audio pack, this free particle effects pack, and this free ground pack. You can find these assets either on the website or through the assets tab in the same tab group as the Scene View of Unity. We find it easier to discover assets via the website, typically. Note, that the Unity asset store contains audio FX, sprite based animations, Unity specific files and more, in addition to generic mesh and texture files. You can find all sorts of great generic assets in the Unreal Marketplace and at TurboSquid, as well.

Also note that there are varied legal restrictions around some of these assets. You’re allowed to share Unity assets with your team. You’re allowed to use Unreal Marketplace assets in Unity, excepting those free assets released specifically by Epic. You can use certain TurboSquid assets royalty free, though some assets are limited to editorial use only. Be sure to read the fine print!

Now that you’ve found some assets through the website, click on Add to Downloads or Add to Cart and go through the purchase process if necessary. Then open Unity, ensure you’re logged into the same account you used to download or purchase assets, then click on the download manager icon. You can now Download and then Import all of the assets. This will bring each asset into your Assets directory, and you should see them listed in your Project Window. Great! Now you’re ready to put them to work.

The next thing we’ll want to do is to set the stage for our fireworks. We’ll create the ground by right clicking to create a plane in the Hierarchy Window. Congrats! You’ve just created your first GameObject. Name it HelloWorld so we can get that out of the way. Now click on the scale tool in the Toolbar. With the Plane selected in the Scene View, find the red/green/blue, 3-axis control and scale the plane up. By default Unity is configured to represent 1 meter as 1 unit. This is a good thing, don’t change this! Feel free, however, to tweak your plane to taste. You can exactly specify the scale of the plane via the Inspector Window.

When done tweaking your plane, you may want to add a simple texture to it to give it a more ground-like feeling. With the plane selected, go into the Inspector View and find the Renderer component. There should be a Materials array available to edit. Set the size property to at least 1, then click on the circle to the right of the text box associated with (it should say or ) to bring up the asset selection pane. From this pane, search to your heart’s content for a texture that brings you joy as your new ground.

By tweaking the materials array of the Renderer component, you’ve now configured yet another component on this GameObject, just like when modifying the scale of the object (thus modifying the transform component). Coding in the Unity universe consists of the creation and configuration of components, essentially.

Components are small, compositional chunks of code, and an arbitrary number of them can be added to your GameObjects. The Renderer component mentioned above deals with the rendering of the object. You’ll find components that manage the physical properties of the object like mass and collision handling. You’ll also write C# code and derive from a class called MonoBehaviour to create your own custom components. Providing custom methods to handle lifecycle events, physics events, and more is the bread and butter of coding in Unity. Custom derived MonoBehaviours represent the vast majority of entry points into code in Unity.

Given that arbitrary components can be bolted onto GameObjects, sometimes at runtime even, GameObjects can be viewed like objects in Javascript. They are essentially a hash of assorted components. Instead of assuming an overall type for a given GameObject, just check that the component exists on the object when attempting to access and/or use it.

If you want to use a more script-like language, you also have the option of using the Unity sanctioned Boo (Python-esque) or UnityScript (Javascript-esque). C# does a great job and is robust and well supported, however. We’d recommend sticking with C#.

Let’s create a custom MonoBehaviour now that we know about components. This script will be used to create a behavior for fireworks!

Drop this in and then switch back to Unity. You should notice a spinning icon in the bottom right of the entire application. This indicates that the app has picked up on your changes and is now compiling. If all went well, the icon should disappear and you shouldn’t see any errors in your console! You can find the console as a tab in the Project Window to verify this.

Now you can add this code as a component to anything in the Scene View/Hierarchy Window. Create a new 3D cylinder to represent your unique brand of fireworks and add it to the scene. Then use the search tool in the Project Window to search for . When you’ve located the file, drag and drop the file from the Project Window onto either the cylinder in the Scene View or the corresponding GameObject in the Hierarchy Window. Alternatively, you can click on your cylinder firework and then click on at the bottom of the Inspector Window and search for .

At this point, you’ve earned a quick play test given all your hard work. Hit play and see that.. your cylinder disappears? Check your console logs and you should see and are both printed to the screen. It looks like your call is working! Fireworks do blow themselves up after all..

This firework is the greatest thing since sliced bread! It’s absolutely amazing! Let’s package it up and sell it. We’ll corner the market. We’ll ship units from here to Timbuktu! We’ll…

Okay, so maybe you don’t share my excitement, but this firework is a big deal for your firework simulator. We’ll definitely want to reuse this particular configuration of GameObject and components. This is where prefabs come in. Once you’ve constructed an object hierarchy the way you like and configured it with components, you’ll want to capture this golden combination as a prefab. You can create a prefab from any GameObject by dragging the object from the Hierarchy Window into any directory in the Project Window. Go ahead and do this by dragging your object to (create this directory if you need to) and giving it a name like . Typically, prefabs end up in the directory, though if you later organize your code by component, you’ll want to stick this prefab in the appropriate component dir.

So what’s so great about prefabs? How do these lend themselves to reuse? Prefabs are great as they can easily be instantiated wholesale at runtime. They are also a great source for modularity. While editing, all instances of a prefab in a scene are synchronized to the ground truth prefab in the Project Window. Changes to the ground truth prefab get reflected immediately in all instances of that prefab. You also have the ability to override individual properties of a prefab for individual instances in the scene. These overrides persist even when the underlying ground truth prefab changes. You can read more about the specifics of prefabs here.

Next let’s create a firework spawner that both spawns Firework prefabs and shoots them off into space. Add a 3D cube to the scene and place it on the ground somewhere. This will be the magic firework box. Now add the following script to your dir:

Once Unity compiles this script, add this behavior as a component to the 3D cube you just added to the scene. Make note that the spawner is trying to programmatically access a component of the newly instantiated firework to set its velocity. We haven’t yet added this component to the Firework prefab. We’ll want to either edit the prefab directly or modify a Firework prefab that exists in the scene and remember to hit once we’ve made our changes. Go ahead and add a component to your amazing Firework prefab now.

Now click the run button to preview the app again. You’ll note that the firework first appears exactly 1 meter above the spawner. If you move the spawner around, the firework will still show up above it. We set the position of the instantiated object via the spawner’s position ( ) in world coordinate space. This is because the firework was instantiated without being attached to a parent and so needed a world coordinate position. We could have parented the firework to the spawner and the modified the of the firework to achieve the same effect.

Also note that the component has a public and can be modified in the Inspector Window after adding the component to the object.

At this point you should have a cube that shoots cylinders up into space. The cylinder should exist for a predetermined amount of time before disappearing into the aether, leaving behind only a debug trace of its existence. The cube should launch a cylinder every seconds. Check to see that you’ve got roughly this.

So does it work? Yes? Great! No? Here are some things you can do to debug what’s happening.

To really round out this fireworks simulator, we’ll want to add the fireworks effects we downloaded and imported earlier. If you downloaded the free particle effects pack up top, you’re in luck! Like any good asset package, the authors of Simple FX — Cartoon Particles have included a demo scene that contains examples of their particle effects in action. You can find that scene at . Save your current scene, open , and take a look at the Hierarchy Window. You should see an object called under the object .

Copy this object, open the scene you’ve been working on, and paste into the Hierarchy Window. Rename the pasted object to . Now drag your Firework prefab from the Project Window into the Hierarchy Window. Drag and make it a child of your firework prefab instance. Update the transform of so its position is zeroed out, and uncheck the top-left most checkbox in the Inspector Window so the object is disabled by default.

We will later enable this GameObject via code, which will allow us to trigger the explosion effect precisely when we want to because this particular particle system is configured to run on . Now update the prefab via clicking on the instance of , and remove said instance from the scene.

Finally, edit and add the following lines to the body of :

And voila! Preview in Unity and you should see the particle effect activate after a few seconds when the fuse timer elapses and kicks off the call to . If the explosion isn’t in view, you’ll need to adjust the orientation of if you haven’t already . Nice work!

Also note that you can access an object’s Transform from a GameObject and vice versa. We should also point out that the links that encode for the object hierarchy in the Hierarchy Window are stored on the Transform via Transform.parent. This is why you call on the Transform and not on the GameObject.

We’ll leave the addition of awesome sound effects as an exercise for the reader.

Things you might also want to do:

Hide the firework cylinder on the call to Explode. Hint: You may be tempted to make use of , but that path only ends in tears. You’ll want to take a look at doing something with the MeshRenderer for the cylinder instead.

Change the scene and setting so that it’s nighttime and not daytime. Hint: You’ll want to do something with the and also change some settings on .

Make the firework explode only when it has stopped vertical motion. Hint: Either calculate the fuse time as a function of initial velocity, or periodically check for negative velocity along the Y axis (i.e. the firework has started its journey back to Earth) in an override of MonoBehaviour::FixedUpdate.

Spice up the 3D models used for your firework launcher as well as the fireworks.

There is always opportunity for polish, so have fun!

We hope you’ve enjoyed this first dive into Unity. It most certainly goes much deeper, as evidenced by the fact that Unity still has a substantial roadmap. For now though you should have all the tools necessary to start tinkering or even start working on your own cool ideas.

The next couple of posts in this mini-series will try to shed light on how to incorporate Unity with the traditional Software Development Lifecycle. We will also speak to the breadth of what Unity can do so that developers can get a sense for what is possible. We will also introduce mental models that we find useful when working in a games environment. Finally, we’d like to dip our toes into some VR!|||

Perhaps you’re thinking now would be a great time to pick up some Unity. We’d tend to agree! Our goal is to give you a developer’s perspective on Unity. We’d like to show you the broad strokes.