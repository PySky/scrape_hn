MobX solves the problem of state management in frontend apps, in a declarative, simple and performant way. 

 It differs from other popular solutions by removing a lot of boilerplate, and allowing you to work with mutable data and OOP.

The best way to explain how it works is via a code example. 

 Our demo application is a tic tac toe game.

The basic flow in MobX is:

A store in MobX is just an object. It saves only the minimal state of our application. 

 In our case - a 3X3 array representing the board.

The @observbale decorator tells MobX it should track access to the board attribute.

Tell me your board, and I shall tell you who the current player is....

In our example, we will need a few other attributes of the game. 

 For example, who the current player is, who is the winner, how many moves left, etc. 

 All of these values can be derived from the board.

In MobX, this is called computed values:

Computed values are just declarative functions that calculate derived properties.

They are only recalculated if needed, and if they are being observed somewhere.

Changing the state in MobX is simple. It's simply setting attributes on plain objects:

The decorator tells MobX to run this function in a . 

 A is a block a of code that recalculates computed values only when the block finishes, and not immediately when observables are set.

This is actually the easiest part.

Use the store inside the component as a regular object:

The mobx-angular library offers a directive that automatically observes the values that we use inside our template.

The uses the computed value, and invokes the action. 

 Whenever a board cell is changed, MobX will recalculate the attribute, and update the component - telling it to re-render.

MobX wraps each value with custom getters and setters.

When we access for example, MobX adds this observable to a dependency tree of the current computed value.

Then, when we run something like: , MobX checks the dependency tree and recalculates all the relevant computed values.

Then, it runs all the reactions that are dependent on all observables and computed values that changed.

A good place to start is to read mobx and mobx-angular documentation.

Then, create a POC on your existing app. Choose a specific page of the app and move the state to a MobX store to see how easy and straightforward it is.|||

