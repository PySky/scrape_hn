In the two most recent  Lambda Island episodes I covered in-depth how to create command line utilities based on Lumo, how to combine them with third party libraries, and how to deploy them to npmjs.com.

However there’s a different way to create tools with ClojureScript and distribute them through NPM, without relying on Lumo. In this blog post I want to quickly demostrate how to do just that.

To recap, Lumo is a ClojureScript environment based on Node.js, using bootstrapped (self-hosted) ClojureScript. This means the ClojureScript compiler, which is written in Clojure and runs on the JVM, is used to compile itself to JavaScript. This way the JVM is no longer needed, all you need is a JavaScript runtime to compile and run ClojureScript code, which in this case is provided by Node.js. On top of that Lumo uses nexe, so Lumo can be distributed as a single compact and fast executable binary.

With Lumo you can wrap your ClojureScript code in an NPM package, and have it run on the fly. The benefit of this is that there’s no separate compilation step, so you don’t have to fiddle with ClojureScript compiler configuration. You get a fast feedback cycle during development, and your code runs exactly the same way during development as in production (or in this case: someone else’s computer.)

But there are also downsides to this approach. Compiling code and loading dependencies on the fly means the startup time of your app will suffer. It also means you need to have all dependencies available at runtime, instead of at compile time, and you don’t get to benefit from Google Closure’s advanced code optimizations, so all of this contributes to a bigger installed size on disk.

If you’re not afraid to mess with ClojureScript compiler options (which you shouldn’t be), then this is how you do it.

Here’s an exampl script. It turns its arguments into l33t sp34k

Now you need a way to compile this to Javascript. You could use Boot, or a small custom build script. I’m going to use lein-cljsbuild.

Notable here is , this is necessary to make the final script run on Node. I’m setting to , to get the full power of the Google Closure compiler, and to prevent all my code from getting optimized away, I’m setting to , the main namespace.

When you compile this with

It will create . Now create to look like this:

So this is what you have now:

Go into and do so you can test out the package.

The script runs, but it doesn’t output anything. The reason is that it tries to find , but because of the advanced compilation, this has been munged to something like . Externs to the rescue!

Comment out the line in , recompile, and you’re good to go.

Alternatively, you can include cljsjs/nodejs-externs as a dependency, so the whole Node.js API is immediately covered.|||

