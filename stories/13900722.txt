Ensuring code quality when your software team is growing rapidly is a huge challenge. But even with a constant number of software developers, maintaining code quality can cause headaches. Without tools and a consistent system, the whole project can accumulate a huge technical debt, causing more problems in the long-term than it solves in the short-term. The best thing is that you don’t have to be a rocket scientist to avoid this (sure, it’s not a problem if you are one). We put together a heavy guide that helps you radically improve the quality of code your team produces, no matter if you work with an in-house team or a software outsourcing company. Some parts of this post might seem obvious, but the value lies in how the parts connect and build up a working code quality assurance system.

Great authors write books with compelling stories that are easy to read and understand. From some aspects, the job of an author is similar to that of a developer. The main difference is that developers use different jargon. As the author’s writing has to be easy to read and comprehensive, so should a software developer’s code. I know it’s pretty hard to pay attention to code quality when you’re under pressure to meet your next deadline, but if you’re thinking long term, you definitely need to produce code that’s readable and maintainable. Here are three main reasons why code quality is important: Readability: Make the code more readable and easier to comprehend for everyone working on the project. It’s much harder to read and understand a bad quality code than to write it. Maintainability: It’s easier, safer and less time consuming to maintain and test quality code. Lower technical debt: Good quality code can speed up long-term software development since it can be reused and developers don’t have to spend that much time fixing old bugs and polishing code. It also makes it easier for new project members to join the project.

In this part, I will show you how we use version control, style guides and automated testing to make sure our code meets our predefined quality standards. By following these methods, you can easily replicate our system and radically improve the code quality your team produces. You just need to go through the following steps:

Version control tool is the foundation of our system. The most popular tool for version control is Git. It also offers a branching style guide called GitFlow that enables seamless collaboration between team members and makes it easy to scale up the development team. It provides an easy-to-track system that separates live product from the less stable developer branch with unpublished features. When a developer from our team finishes a feature, he/she sends a pull request on GitHub. This describes the content and the details of the request.

This system makes sure that no unreviewed code will be merged with the master branch. Here is how our process looks: One team member sends a pull request to the development branch. This will appear in a ready-to-review section waiting for a project member to review (peer review). A team member reviews the request, and if it meets the requirements, it will be merged to the development branch. This a great system for controlling versions and making everyone’s work fully transparent. There are lots of GUI extensions for Git, such as GitKraken, which supports Gitflow. Here you can see how easily can enable it. But how do you decide if the code is good enough? In the next part, I show you tools to track code quality and metrics that can be used to measure code quality.

A style guide is a collection of best practices and conventions. Using a style guide ensures that every developer's code looks exactly the same, making the code easier to review and work with. Fortunately, you don’t have to create your own style guide. There are many style guides available for free, focusing on different programming languages and scopes: Company: Cool companies like Airbnb and Google have already created and published their own style guides. Here is Airbnb’s JavaScript style guide. Project: There could be varying conventions across different projects or products within a company. We don’t really recommend project-based style guides since it makes it much harder for people switching between projects.

Many code editors have support for configurable linting, such as VSCode. Here is a guide how to set your own linter up. EditorConfig helps developers define and maintain consistent coding styles between different editors and IDEs. The EditorConfig project consists of a file format for defining coding styles and a collection of text editor plugins that enable editors to read the file format and adhere to defined styles.

Generally, we can say that you have to run lots of unit tests, fewer integration tests and even fewer end-to-end tests. With a unit test, you inspect one module of the software by mocking out dependencies. An integration test shows how different components work together while an end-to-end test checks the full client-server round.



Here are two funny visual examples why integration tests are necessary:

You really shouldn’t let quality tracking go after the product goes live. Tools such as Sentry and Newrelic real-time monitor errors so you don’t have to ask users to report crashes and bugs since you will be notified automatically. All you need to do is add a small piece of code to your app. Sentry (can be integrated with Slack and GitHub)

That’s it. This is how you can create a workflow for your team that makes sure everyone’s code follows the same style guide and goes through predefined tests to check functional quality. Apart from testing code quality before release, you also need to monitor what happens with your app when users start using it. We know that writing bug-free code is impossible, but following the process mentioned above will definitely improve the quality of your team’s code.





This post was written by Akos Szokodi, Balint Csak and Tamas Torok|||

Ensure code quality with industry style guides, learn what tools to use for software testing and how to create a code quality assurance system.