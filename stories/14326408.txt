Lua is a scripting language for embedding. It is implemented by and provides an API for C. Then there is the D programming language; A comprehensive language and a great host for Lua via the LuaD package. Even better than C itself as you will see.

For an example, we make a simple function available in Lua code. The function computes the sine. To do that it must convert a Lua argument into a number, apply the C-function, and return the result as a Lua value. Here is the necessary code with the C bindings.

Now compare this with the D version, where all the boilerplate happens implicitly.

With some compile-time metaprogramming, D can magically generate all the boilerplate. Let us go down the rabbit hole of LuaD, to understand how it works.

There is some syntactic sugar with the assignment, but ultimately what happens is . You can see the code in context in the LuaD repo.

If you do not know D, the line requires an explanation. This is a scope guard statement. Here it means to call at the very end if the function returns successfully (not throwing an exception). This mechanism is useful to keep the push and pop closer together. In C/C++ we would place the after the line.

The call to is equivalent to only passing the global table explicitly.

The leaves the function for the magic. Especially, the line with , because that has to wrap the boilerplate around the function.

First, can handly arbitrary types. How does that work? Look into the code.

It is a template function. In C++ the syntax would be . Inside is an if-cascade, which checks the template parameter type . The keyword before each means that this happens at compile time. This static-if mechanism was proposed to C++ multiple times, but so far it was always rejected.

You can see the case for the string (our with value "sin" in the example) maps directly to the Lua API .

The real magic happens where is some function. We are redirected to .

This function is simple but uses the more complex template. The template instantiation syntax for D is via , while in C++ we would write instead.

We see that LuaD is slightly inefficient at this point. It registers a closure instead of a function to pass the function reference into the boilerplate wrapper. Although, that should not change performance significantly.

Note that is not called here only instantiated. It is called by Lua it later. The body of the function is similar to the following, but I simplified the real code a little by removing special cases unnecessary for our example.

The first part checks that the number of Lua parameters matches the number parameters our function takes according to its type and calls if not. Then we pop the function reference we pushed for the closure. Due to the template parameter we still know the type of the function reference.

In the loop the parameters are pop'd from the Lua stack. The call redirects to getValue, which contains a similar static-if cascade as . It returns a value from the Lua stack with the correct static type. So, at this point half the boilerplate is created.

This leaves callFunction to explain. It looks very much like this:

You can even see some exception catching, which is not necessary for , though.

The pushReturnValues function is a template; Again with a static-if-cascade to handle the different types correctly. The template parameter is infered from the type of the argument, which we extracted from the template parameter via .

Now you know how LuaD does its magic. You know how D merges the power of templates and compile-time function evaluation with the convenience of inference and scope guard statements.

The content of this article will probably be used for my TopConf talk in October.|||

Lua bindings require lots of pushes and pops, but with D they are magically implicit