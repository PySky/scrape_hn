A easy and powerful way to maintain conversational context in chat bots. Using function closures. Blog post

Here we introduce a reactive approach to maintaining the context of conversations.

The elegant trick here is that when a callback is pushed on the stack, it captures the closure state of the callback function being pushed.

So when we match the context stack on recieving a message, the closure variables and data are maintained, allowing time travel!

This is a very basic pizza delivery bot, to demonstrate the usage of bot-context.

The set of actions to send the message:

Now, if a user after putting his address changes his mind to another pizza type, by just typing the type of the pizza.

WYSIWYG bot creators are the latest hot stuff. Almost all of them allow integration with external tools via http .

can easily be used with such bot tools. Please see the example, on how could you setup as a webservice.

returns an instance of the ContextMap, the following methods are available on it.

A map to hold contexts for all users/keys

Get Or Creates a context given the key.

A context uniqiue for each user. The following methods are available on the .

Matcher method called when matching contexts. It is called with the following params.

Returns, is there any context set.

Match an input text to the collection of currently set contexts.

Callback called when a context is matched, with the following values.|||

bot-context - Easy, powerful, functional way to maintain conversational context in chat bots.