Imagine that we need to store business contacts and track their status. It’s a typical CRM application feature. Let’s take a look at how AllcountJS framework could help us to solve this problem in 10 minutes. If you want to see the result right now - simply run the Demo

AllcountJS is an open-source rapid application development framework. It’s built on top of the MEAN (MongoDB, Express, AngularJS, NodeJS) stack. But “M” can be replaced with another database including SQL one.

Core part of AllcountJS application is a .js configuration file with mostly declarative description of application structure: entities, their fields, relations, views, roles and permissions.

All CRUD operations, default views, user management features are available out of the box.

Built-in Role Based Access Control allows to manage access rights based on user roles.

UI is generated automatically using AngularJS, Twitter Bootstrap, Jade and Font Awesome icons.

AllcountJS also provides JSON REST API to perform all operations available to users. If you need to add some specific functionality to your application you can use Dependency Injection mechanism.

You can start working with AllcountJS in several ways: as a standalone application, as a dependency of another Node.js application or run a demo app at allcountjs.com.

The easiest way to see the result is just to run the application on the demo page

If you consider to deploy application on your site you should install Node.js, MongoDB and Git. Then install AllcountJS CLI by invoking an “npm install” command and perform project init:

AllcountJS CLI will ask you to enter some info about your project in order to pre-fill package.json. Next, open file in the application directory and replace it’s contents with following piece of code:

To run it simply invoke in directory

It’ll use your local MongoDB instance to store data so please ensure it’s up and running.

Now let’s take a look at how it works.

The name and icon of the application are defined with the and properties. AllcountJS uses Font Awesome icons. You can select any icon and use it simply by referring to it’s name. When referring to the icon you need to remove prefix.

Authentication setting configured by property. It declares that only authenticated users may use this application.

There is also a property, but we’ll look at it after we define the entities and views.

Now we’re ready to describe our business entities. They’re defined in the property. Assume that contact will have two mandatory text fields: Name and Company, some text field with contact details, last contact date and current status.

Status field references to the entity. Which may have values like “Message Sent”, “Answered”, “Rejected”. Status entity has and fields.

Every entity can have many . View in AllcountJS is like SQL view: they doesn’t have special storage in database and you can operate with them like with entities. Most common use case for views is to provide custom behavior, UI and access rights.

In our case we will use only to provide specific UI for . UI template for view or entity is defined in property.

It refers to file containing template source code. AllcountJS uses jade template engine to generate resulting HTML for web view.

There is a card board template with drag and drop feature in AllcountJS. We will use it with some customizations. So let’s create file with this piece of code:

Now it’s time to describe our application menu. There is property of the app. It consists of links to application entities.

Imagine that you have another application and want to integrate it with your new CRM. It is not a problem, because all application functions could be accessed by the REST API.

First you need to get access token. If your CRM app located at https://localhost:9080 than you need to send HTTP POST request to https://localhost:9080/api/sign-in with

in the body. In response you will get token like this:

Next let’s try to get all contacts stored inside the CRM. Send HTTP GET request to https://localhost:9080/api/entity/FlowBoard or directly to https://localhost:9080/api/entity/Contact with

in header. And you will receive all your contacts in JSON. Also you can update, create, delete all your contacts thru API.

We just created simple CRM app based on AllcountJS. As you can see, it was easy and didn’t take too much time:

This example shows a tiny part of possibilities of AllcountJS. Want to know more? Explore our documentation and feel free to ask on gitter.|||

Creating Simple CRM with REST API in 10 minutes Imagine that we need to store business contacts and track their status. It’s a typical CRM application feature. Let’s take a look at how AllcountJS...