Create React App is a project generator for React apps, that sets up a build process for React and modern JavaScript with no configuration. It is a great way to get set up with all the tools necessary to write modern JavaScript. While it doesn't require any configuration if you deploy the React app as a static site, it does require some setup to integrate into a Django project.

Then generate the react app in a subdirectory:

Now we have a Django project with a React app in the subdirectory. To make them work together, we need to figure out how to let the React app talk to Django over an API, and how to serve the files for the React app itself in a way that makes sense within a Django project.

For development, will have to run two different servers -- one for Django, and one for React. Add to your (within the frontend directory). This will proxy requests from the React app to Django's runserver. Then start both servers in separate terminals:

Access the frontend like you do in a regular create-react-app project, at . Any API requests the frontend makes to will get proxied to Django. This works as long as the frontend uses only relative URLS, and doesn't follow links provided by the backend (Common with HATEOAS and Django Rest Framework (DRF)). If the frontend code does follow API links, they will be directly to runserver ( ), making them cross-origin requests. To make this work we'll need a way to add CORS headers only in local development.

We can do this by writing a middleware. In :

Make sure this is only used for local development. I do this by manipulating the value of in my :

Now the frontend will be able to make requests to both and , so the links generated by DRF will work. In production, we'll use a different solution that puts the React app and the API on the same domain.

In production, we can't use two different URLs and run the yarn server. We will need to run the create-react-build process to create a production build, then serve that through Django in order to get everything onto the same domain.

outputs its build artifacts into . We can configure Django's staticfiles to serve the JS and CSS from create-react-app's build with these settings:

Now collectstatic will automatically find the static build artifacts, and deploy them however you have configured staticfiles. The only thing left is to serve the entry point to the React app, . We can't use staticfiles for this because it needs to be served at the root of our site, not under .

We can do this with a Django view, in :

This view must be installed with a catch-all urlpattern in order for pushState routing to work. In :

Now once we configure out deployment process to run the create-react-app build script, users who visit our site will be served the React app. Other Django URLs like the API and admin will still continue to work, as long as their urlpatterns come before the catch all.|||

