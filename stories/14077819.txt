Writing unit tests for my code mostly follows this pattern

For one of my projects I was using jest. It’s fast now and it has several features that I highly value. Most of them integrated code coverage and Snapshot testing.

When I first saw the part about Snapshot testing, I wasn’t really interested. Okay, it was more that I thought, well, I don’t see a big advantage here over the traditional approach of testing my code. I’m calling functions and make sure that the result of those functions matches my expectations. That’s pretty simple with a function that returns a simple result

This is simple and doesn’t require much work.

How about this?

As expected, the output is telling me, that there is something missing. Yes, I didn’t write yet the expected object to compare the result with. I’m too lazy and I always want to avoid writing it. What I’m doing instead, is to call the function, copy the result and create my expected result object with this data. But for now, I’m not going to do it. Let’s see, how Snapshot testing will help solve this task.

Yeah, I was lazy and didn’t populate with all the fields I was expecting. This is the point, where Snapshot testing comes into play. It helps me lazy programmer to avoid writing uneccessary code only to verify my assumptions about the outcome of that function.

And here the result

What happened? Jest was taking a Snapshot for that test and was happy with the result. Under the hood, Jest created a directory in my directory and saved the output of the test result. The file is named after the file containing the test. In this case it’s . Here are the contents of that Snapshot file.

The key of the exports object is the name of the test itself. The value of it is the result from . That is great. I didn’t have to type a line of code for the expected result of this function. By doing a quick visual inspection of the output, I can confirm that this is the expected output.

Now it gets interesting. I’m going to change the return object of the function. The result object will have a new key and the flag will be removed. Let’s see how Jest handles the situation without making any change to the existing, and currently passing, test.

The output of the test run informs me, that the Received value does not match stored snapshot 1. That is correct and it was expected. But more importantly, Jest tells me to inspect my code changes or run the tests again with a specific flag to update the snapshot. Since it was an intentional change, I’m going to run the test again with to update the Snapshot.

The Snapshot got updated and reflects the current implementation of my function. Well done! No code written to create the expected result object. This is where Snapshot testing is really awesome.

I hope, that this example helped to understand the Snapshot testing capability of Jest. IMHO, this approach is great for two reasons:

Snapshot testing might not be necessary/wanted for all kind of tests. You might choose the traditiional way for simpler functions. To verify complex result objects, this is an efficient way for testing. Having to write less code is always a great way to improve efficiency.

Don’t hesitate to contact me, if you have questions or suggestions. You can leave a comment below or find me on the social networks mentioned at the top of this post.

Thank you very much for reading!|||

random thoughts about computer tech, web technologies, javascript, reactjs, nodejs, electron shell, webdev, process automation, jenkins, android and stuff that worked for me.