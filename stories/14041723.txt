In part one of this tutorial, we managed to generate an API-only Rails application, set up a testing framework, and use TDD to implement the todo API.

In this part of the tutorial, we'll implement token-based authentication with JWT (JSON Web Tokens). In this implementation, we'll proceed with our approach of using TDD principles to add the authentication features.

Our API should be able to support user accounts with each user having the ability managing their own resources. We'll adapt Hristo's approach with notable alterations.

If you're wondering why we have field instead of a normal field, hang tight, we'll go over this soon enough. :)

Users should be able to manage their own todo lists. Thus, the user model should have a one to many relationship with the todo model. We also want to make sure that on every user account creation we have all the required credentials.

Let's add a user factory. This will be used by our test suite to create test users.

User specs are failing as expected. Let's fix that by implementing the user model.

Our user model defines a 1:m relationship with the todo model also adds field validations. Note that user model calls the method , this adds methods to authenticate against a password. It's this mechanism that requires us to have a attribute. Thus, we need to have the gem as a dependency.

Install the gem and run the tests.

Model's all set up to save the users. We're going to wire up the rest of the authentication system by adding the following service classes:

We're going to implement token based authentication. We'll make use of the gem to manage JSON web tokens(jwt). Let's add this to the Gemfile and install it.

Our class will live in the directory since it's not domain specific; if we were to move it to a different application it should work with minimal configuration. There's a small caveat, though...

This is a huge concern for us since is part of auto-load paths. To counter this change, we'll add our in since all code in app is auto-loaded in development and eager-loaded in production. Here's a long discussion on the above.

Great, let's do this! Add the lib directory and the jwt class file.

This singleton wraps to provide token encoding and decoding methods. The encode method will be responsible for creating tokens based on a payload (user id) and expiration period. Since every Rails application has a unique secret key, we'll use that as our secret to sign tokens. The decode method, on the other hand, accepts a token and attempts to decode it using the same secret used in encoding. In the event token decoding fails, be it due to expiration or validation, will raise respective exceptions which will be handled in the module.

We've defined custom sub-classes to help handle exceptions raised. By defining error classes as sub-classes of standard error, we're able to them once raised.

This class will be responsible for authorizing all API requests making sure that all requests have a valid token and user payload.

Since this is an authentication service class, it'll live in .

The service should have an entry method that returns a valid user object when the request is valid and raises an error when invalid. Note that we also have a couple of test helper methods;

We'll define these helpers in .

We also have additional test helpers to generate headers. In order to make use of these helper methods, we have to include the module in . While we're here let's also include to all types (not just requests); remove . This way, we'll be able to reuse our handy helper.

At this point, if you attempt to run the tests, You should get a load error. You guessed it, this is because we haven't defined the class. Let's do just that!

The service gets the token from the authorization headers, attempts to decode it to return a valid user object. We also have a singleton to house all our messages; this an easier way to manage our application messages. We'll define it in since it's non-domain-specific.

Run the auth specs and everything should be green.

This class will be responsible for authenticating users via email and password.

Since this is also an authentication service class, it'll live in .

The service also has an entry point . It should return a token when user credentials are valid and raise an error when they're not. Running the auth specs and they should fail with a load error. Let's go ahead and implement the class.

The service accepts a user email and password, checks if they are valid and then creates a token with the user id as the payload.

This controller will be responsible for orchestrating the authentication process making use of the auth service we have just created.

The authentication controller should expose an endpoint that accepts user credentials and returns a JSON response with the result.

Notice how slim the authentication controller is, we have our service architecture to thank for that. Instead, we make use of the authentication controller to piece everything together... to control authentication. We also need to add routing for authentication action.

In order to have users to authenticate in the first place, we need to have them signup first. This will be handled by the users controller.

The user controller should expose a endpoint that accepts user information and returns a JSON response with the result. Add the signup route.

And then implement the controller.

The users controller attempts to create a user and returns a JSON response with the result. We use Active Record's method so that in the event there's an error, an exception will be raised and handled in the exception handler.

One more thing, we've wired up the user authentication bit but our API is still open; it does not authorize requests with a token.

To fix this, we have to make sure that on every request (except authentication) our API checks for a valid token. To achieve this, we'll implement a callback in the application controller that authenticates every request. Since all controllers inherit from application controller, it will be propagated to all controllers.

Cool, now that we have the tests, let's implement the authorization.

On every request, the application will verify the request by calling the request authorization service. If the request is authorized, it will set the object to be used in the other controllers.

Notice how we don't have lots of guard clauses and conditionals in our controllers, this is because of our error handling implementation.

Let's remember that when signing up and authenticating a user we won't need a token. We'll only require user credentials. Thus, let's skip request authentication for these two actions.

Run the tests and you'll notice, our Todo and TodoItems API is failing. Don't fret, this is exactly what we want; means our request authorization is working as intended. Let's update the API to cater for this.

In the Todos request spec, we'll make partial update all our requests to have authorization headers and a JSON payload.

Our todos controller doesn't know about users yet.Let's fix that.

Let's update the Items API with the same.

Awesome, our specs are now up to date! Phew!

Let's fire up the server for some manual testing.

That's it for part two! At this point, you should have learned how to implement token based authentication with JWT.

In the next part of this tutorial, we'll wrap up with , and . As always, hope to see you there. Cheers!|||

