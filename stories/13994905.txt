Some people are confused by CSS Specificity, especially with all of the (not-so) new CSS3 Selectors. The image below may help make sense of CSS Specificity. Download the PDF

You can download the PDF of fishy CSS specificity here

Specificity determines which CSS property declaration is applied when two or more declarations apply to the same element with competing property declarations. The most specific selector takes precedence. If specificity is equal, the last declaration in the source order takes precendence.By understanding CSS Specificity, you’ll understand how the browser determines which declaration is more specific and will therefore take precedence. Let’s take this paragraph as an example:

If you’re familiar with CSS, you’re probably very familiar with the CSS and specificity of these three lines:

The style block contains three style rules that have a selector that matches the paragraph. If cascade, or source order, were the only concern, the paragraph would be yellow. However, different selectors have different weights. An ID takes precendence over a class selector takes precendence over a type selector. So, the paragraph would be red.

With CSS3 Selectors, order is even more important, as is understanding specificity:

Had we declared the above three lines instead, source order would be relevant, as class selectors, attribute selectors and structural pseudo-classes all have the same weight in terms of the cascade.

If more than one selector have the same specificity, then adhere to the cascade: the last declared rule takes precedence.

To calculate the specificity of a declaration, count the element types, class/pseudo-class/attributes and ids in your declaration. Add each group up separately.

For example, if you have 1 id, 12 class/pseudo-class/attributes, and 5 types, you are over declaring your selectors, but the value would be 1-12-5. Note that the final value of X-Y-Z is not a number, but a matrix. No matter how many class, attribute and pseudoclass selectors you have, a single ID will overpower them. If you use the speciFISHity example, no quantity of plankton (elements) will ever beat out a fish (class). No fish will beat out a shark (id). Not Shark can win against an oil tanker (inline), and even an oil tanker will succumb to a nuclear blast. Yeah, I got political on you!

The * selector, or global selector, has no value. *.myClass will be overwritten by p.myClass, even if it is last in the cascade. Combinators, like ~, >, and + have no value in the weighting of selectors. Yes, they help you to be more specific in what you are targeting, but can be overwritten by another selector with the same weight. In the above example, your list items will be blue not read, as they both have the exact same value, and the blue is declared later. :not has no value, but the selectors without the negation selector do The above both have the same weight because we count the attribute selector and not the :not in the blue declaration. Specifity is not inherited. If you declare 27 values on a parent of a paragraph, and even add !important, but declare the paragraph separately, the property declared on the element will be applied. Inheritance does not trump such declarations. The paragraph will be blue not red, as although the first declaration is more specific, and colors are inherited, the second declaration is actually applied to the element, whereas the first is applied to the parent. The color is only inherited if not specifically declared on the descendant. And, in this case, it is declared.|||

