Poet helps you declare, manage and install dependencies of Python projects, ensuring you have the right stack everywhere.

The package is highly experimental at the moment so expect things to change and break. However, if you feel adventurous I'd gladly appreciate feedback and pull requests.

supports generating completion scripts for Bash, Fish, and Zsh. See for full details, but the gist is as simple as using one of the following:

Note: you may need to restart your shell in order for the changes to take effect.

For , you must then add the following line in your before :

is a tool to handle dependencies installation, building and packaging of Python packages. It only needs one file to do all of that: .

There are some things we can notice here:

will also detect if you are inside a virtualenv and install the packages accordingly. So, can be installed globally and used everywhere.

Packaging system and dependency management in Python is rather convoluted and hard to understand for newcomers. Even for seasoned developers it might be cumbersome at times to create all files needed in a Python project: , , , .

So I wanted a tool that would limit everything to a single configuration file to do everything: dependency management, packaging and publishing.

It takes inspiration in tools that exist in other languages, like (PHP) or (Rust).

Note that there is no magic here, uses existing tools ( , , , , ) under the hood to achieve that in a more intuitive way.

This command will help you create a file interactively by prompting you to provide basic information about your package.

It will interactively ask you to fill in the fields, while using some smart defaults.

However, if you just want a basic template and fill the information directly, you can just do:

The command reads the file from the current directory, resolves the dependencies, and installs them.

If there is a file in the current directory, it will use the exact versions from there instead of resolving them. This ensures that everyone using the library will get the same versions of the dependencies.

If there is no file, Poet will create one after dependency resolution.

You can specify to the command that yo do not want the development dependencies installed by passing the option.

You can also specify the features you want installed by passing the option (See Features for more info)

In order to get the latest versions of the dependencies and to update the file, you should use the command.

This will resolve all dependencies of the project and write the exact versions into .

If you just want to update a few packages and not all, you can list them as such:

The command builds the source and wheels archives.

This command builds (if not already built) and publishes the package to the remote repository.

It will automatically register the package before uploading if this is the first time it is submitted.

This command searches for packages on a remote index.

This command locks (without installing) the dependencies specified in .

The command will check if the file is valid.

This section describes the specifics of the package

The name of the package. Required

The version of the package. Required

This should follow semantic versioning. However it will not be enforced and you remain free to follow another specification.

The license of the package.

The recommended notation for the most common licenses is (alphabetical):

Optional, but it is highly recommended to supply this. More identifiers are listed at the SPDX Open Source License Registry.

The authors of the package. This is a list of authors and should contain at least one author.

Authors must be in the form .

The readme file of the package. Required

The file can be either or . If it's a markdown file you have to install the pandoc utility so that it can be automatically converted to a RestructuredText file.

You also need to have the pypandoc package installed. If you install via you can use the extra to do so.

An URL to the website of the project. Optional

An URL to the repository of the project. Optional

An URL to the documentation of the project. Optional

A list of keywords (max: 5) that the package is related to. Optional

A list of Python versions for which the package is compatible. Required

A list of patterns that will be included in the final package.

You can explicitly specify to Poet that a set of globs should be ignored or included for the purposes of packaging. The globs specified in the exclude field identify a set of files that are not included when a package is built.

If a VCS is being used for a package, the exclude field will be seeded with the VCS’ ignore settings ( for git for example).

If you packages lies elsewhere (say in a directory), you can tell to find them from there:

Similarly, you can tell that the directory represent the package:

Poet is configured to look for dependencies on PyPi by default. Only the name and a version string are required in this case.

Caret requirements allow SemVer compatible updates to a specified version. An update is allowed if the new version number does not modify the left-most non-zero digit in the major, minor, patch grouping. In this case, if we ran , poet would update us to version if it was available, but would not update us to . If instead we had specified the version string as , poet would update to but not . is not considered compatible with any other version.

Here are some more examples of caret requirements and the versions that would be allowed with them:

Tilde requirements specify a minimal version with some ability to update. If you specify a major, minor, and patch version or only a major and minor version, only patch-level changes are allowed. If you only specify a major version, then minor- and patch-level changes are allowed.

is an example of a tilde requirement.

Wildcard requirements allow for any version where the wildcard is positioned.

, and are examples of wildcard requirements.

Inequality requirements allow manually specifying a version range or an exact version to depend on.

Here are some examples of inequality requirements:

Multiple version requirements can also be separated with a comma, e.g. .

To depend on a library located in a repository, the minimum information you need to specify is the location of the repository with the git key:

Since we haven’t specified any other information, Poet assumes that we intend to use the latest commit on the branch to build our project. You can combine the key with the , , or keys to specify something else. Here's an example of specifying that you want to use the latest commit on a branch named :

You can also specify that a dependency should be installed only for specific Python versions:

This section describe the scripts or executable that will be installed when installing the package

Here, we will have the script installed which will execute in the package.

Poet supports features to allow expression of:

When installing packages, you can specify features by using the option:|||

poet - Poet helps you declare, manage and install dependencies of Python projects, ensuring you have the right stack everywhere.