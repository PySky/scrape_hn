C and C++ programmers already have many SSE intrinsics available to them. Most of those map straightforwardly to their matching hardware instructions, but there are holes where the hardware doesn't natively support a given operation or type. For instance, there's an intrinsic, but not an . The first one exists because there's a hardware primitive, the second one is missing because its implementation would have to be composite.

The set of intrinsics that we do have is quite rich, and can be combined in many ways to make up for the ones we don't. Because SSE programming is tricky enough as it is, I'm a big fan of building ever more small, self-contained "primitives" that are composited inline into ever larger functional units. We create the building blocks, forge them into subassemblies, and then let the compiler inline everything into an optimized function body.

This page contains some of the new "missing intrinsics" that I built on top of the existing ones, and gradually also on top of the ones defined earlier. I purposefully followed the existing naming conventions for type and operator names, so that these functions act as a kind of "polyfill" for the holes in the existing set (to use a JavaScript term). The naming convention probably violates a standard somewhere, but I think it's defensible: most of these functions are small enough to be considered almost-primitives, some of the original intrinsics are also implemented as composites, and most operate in the same way as the actual intrinsics, namely in vertical fashion. ( and form a pair, and form a pair, and so on.) With these new "primitives", SSE code becomes easier to read, test and reason about.

These are fundamental building blocks as far as I'm concerned, and I wouldn't want to claim any rights to these. For what it's worth, I declare that I place these in the public domain. Do what you want with this stuff.

There's a small GitHub repo for this code here, that also contains a small test harness for checking correctness.

Compare each of the 8-bit unsigned ints in to those in and set the result to where . Equivalent to taking the minimum of both vectors and checking where equals this minimum.

Compare each of the 8-bit unsigned ints in to those in and set the result to where . Equivalent to calling above with the arguments swapped.

Compare each of the 8-bit unsigned ints in to those in and set the result to where . Equivalent to checking whether is equal to the maximum of and , but not equal to itself.

Compare each of the 8-bit unsigned ints in to those in and set the result to where . Equivalent to calling above with swapped arguments.

Compare each of the eight 16-bit unsigned ints in to those in and set the result to where . Equivalent to doing the saturating subtraction of and checking where the result is zero (meaning was larger than or equal to ).

Compare each of the eight 16-bit unsigned ints in to those in and set the result to where . Equivalent to calling above with the arguments swapped.

Compare each of the eight 16-bit unsigned ints in to those in and set the result to where . Equivalent to checking whether is larger than, but not equal to, .

Compare each of the 16-bit unsigned ints in to those in and set the result to where . Equivalent to calling above with swapped arguments.

Compare each of the eight 16-bit signed ints in to those in and set the result to where . Equivalent to checking whether is either larger than or equal to .

Returns , the bitwise complement (inverse) of . Perform an of every bit with 1, because and . This function can usually be avoided by applying De Morgan's laws to your logic statements, so that they use the native .

Just like sets everything to zero, this function sets all bytes in the vector to the value without touching memory. A vector where every lane is can be useful for incrementing a set of counters or performing a shift. However, a will probably still be faster.

See above. Sets all words in the vector to the value without touching memory. A is probably faster.

Copies the bits from to the output where is not set, and the bits from where mask is set. Combines the values in with those in based on the bitmask. This is useful for replacing branching logic with masking logic, because the SSE truth operations return all-ones for the bytes where a given condition holds.

This function was introduced as a hardware primitive in SSE 4.1. For each of the 16 bytes, copy either the byte from or the byte from to the output, depending on whether the matching byte in has its most significant bit (MSB) set. If the MSB is set, the byte in is copied, else the one from is passed through.

In practice with older SSE versions, when you're using logic masks in which each byte is known to be or , it's faster to use .

Compare each of the eight 16-bit unsigned ints in to those in and place the one with the lowest value in the result. This demonstrates the use of defined above to sculpt the output based on a condition mask. This instruction was introduced as a hardware primitive in SSE4.

Compare each of the eight 16-bit unsigned ints in to those in and place the one with the highest value in the result. Equivalent to above with the inverse result. This instruction was introduced as a hardware primitive in SSE4.

Calculate the absolute difference between the 8-bit unsigned int in and . Use unsigned saturating subtraction for fast calculation. Saturating subtraction clamps negative results to zero. The absolute difference is . For example, the absolute difference between 16 and 7 is , or . Since at least one of the subtractions will be zero, we can use an to combine them.

Same as above, but for 16-bit unsigned ints.

Divides all eight 16-bit unsigned ints in by the constant value 255, using the formula .

"Alpha blend" the 8-bit unsigned ints in with the 8-bit unsigned "opacity" value in . Calculates , or scaling by the ratio in . Could be useful for image alpha blending.

Divide the 8-bit unsigned ints in by the (scalar, non-vector) 8-bit unsigned integer , accepting a slight error for 0.12% of the input space. This works on the principle that is equal to , where is some arbitrary constant. After rearranging parentheses, we have . This reduces the problem to two multiplications and one constant division. The trick is finding a properly sized constant such that does not alias (implying that should be at least ), but not so big that multiplying later by will overflow the result. And should be a power of two so that we can do the last multiply with a left shift.

For all 65280 possible inputs (256 numerators with 255 denominators, since zero is not a denominator), this function is wrong in just 78 cases, as compared to regular truncating integer division. In each of those cases, the error is the same, namely off by +1. If that is acceptable, this method is fast. Or we can correct the error at a small performance cost as shown below with .

Divide the 8-bit unsigned ints in by the (non-vector) 8-bit unsigned integer , doing back-substitution to check for and correct for the 78 error cases of the faster but inaccurate method above. Once we found the result the fast way, we multiply it with the divisor and check whether the result is close enough to the original numerator. If not, we splice in the result minus one. Surprisingly, this is just 10 to 20 percent slower than the fast version above.

Change endianness (reverse byte order) in each 16-bit word by exchanging the high and the low byte.

Change endianness (reverse byte order) in each 32-bit word by reversing all four bytes. Assume that the SSSE3 function plus a literal value does the job faster if available.

Change endianness (reverse byte order) in each 64-bit word by reversing all eight bytes.

Change endianness (reverse byte order) in the 128-bit vector by reversing all sixteen bytes.|||

