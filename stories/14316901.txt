Everyone is hot under the collar again. So-called serverless or no-ops services are popping up everywhere allowing you to deploy “just code” into the cloud. Not only won’t you have to login to a server, you won’t even have to know they’re there.

As your code is called, but cloud events such a file upload, or hitting an http endpoint, your code runs. Behind the scene through the magic of containers & autoscaling, Amazon & others are able to provision in milliseconds.

Join 32,000 others and follow Sean Hull on twitter @hullsean.

Pretty cool. Yes even as it outsources the operations role to invisible teams behind Amazon Lambda, Google Cloud Functions or Webtask it’s also making companies more agile, and allowing startup innovation to happen even faster.

Believe it or not I’m a fan too.

That said I thought it would be fun to poke a hole in the bubble, and throw some criticisms at the technology. I mean going serverless today is still bleeding edge, and everyone isn’t cut out to be a pioneer!

With that, here’s 30 questions to throw on the serverless fanboys (and ladies!)…

o Are you comfortable removing the barrier around your database?

 o With more services, there is more surface area. How do you prevent malicious code?

 o How do you know your vendor is doing security right?

 o How transparent is your vendor about vulnerabilities?

Also: Myth of five nines – Why high availability is overrated

o How do you do integration testing with multiple vendor service components?

 o How do you test your API Gateway configurations?

 o Is there a way to version control changes to API Gateway configs?

 o Can Terraform or CloudFormation help with this?

 o How do you do load testing with a third party db backend?

 o Are your QA tests hitting the prod backend db?

 o Can you easily create & destroy test dbs?

o How do you do zero downtime deployments with Lambda?

 o Is there a way to deploy functions in groups, all at once?

 o How do you manage vendor lock-in at the monitoring & tools level but also code & services?

 o How do you mitigate your vendors maintenance? Downtime? Upgrades?

 o How do you plan for move to alternate vendor? Database import & export may not be ideal, plus code & infrastructure would need to be duplicated.

 o How do you manage a third party service for authentication? What are the pros & cons there?

 o What are the pros & cons of using a service-based backend database?

 o How do you manage redundancy of code when every client needs to talk to backend db?

o How do you build a third-party monitoring tool? Where are the APIs?

 o When you’re down, is it your app or a system-wide problem?

 o Where is the New Relic for Lambda?

 o How do you degrade gracefully when using multiple vendors?

 o How do you monitor execution duration so your function doesn’t fail unexpectedly?

 o How do you monitor your account wide limits so dev deploy doesn’t take down production?

o How do you handle startup latency?

 o How do you optimize code for mobile?

 o Does battery life preclude a large codebase on client?

 o How do you do caching on server when each invocation resets everything?

 o How do you do database connection pooling?

Also: Is Amazon too big to fail?|||

