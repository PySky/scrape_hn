A basic user tool to execute simple docker containers in user space without requiring root privileges. Enables basic download and execution of docker containers by non-privileged users in Linux systems were docker is not available. It can be used to access and execute the content of docker containers in Linux batch systems and interactive clusters that are managed by other entities such as grid infrastructures or externaly managed batch or interactive systems.

The Indigo udocker does not require any type of privileges nor the deployment of services by system administrators. It can be downloaded and executed entirely by the end user.

udocker is a wrapper around several tools to mimic a subset of the docker capabilities including pulling images and running then with minimal functionality.

A development version with support for multiple execution methods is available in the udocker-fr branch on github. The development version supports the following execution engines.

udocker is a simple tool written in Python, it has a minimal set of dependencies so that can be executed in a wide range of Linux systems.

udocker does not make use of docker nor requires its installation.

udocker "executes" the containers by simply providing a chroot like environment over the extracted container. The current implementation uses PRoot to mimic chroot without requiring privileges.

Since root privileges are not involved any operation that really requires such privileges will not be possible. The following are examples of operations that are not possible:

If the containers require such capabilities then docker should be used instead.

The current implementation is limited to the pulling of docker images and its execution. The actual containers should be built using docker and dockerfiles.

udocker does not provide all the docker features, and is not intended as a docker replacement.

Due to the way PRoot implements the chroot environment debugging inside of udocker will not work.

udocker is mainly oriented at providing a run-time environment for containers execution in user space.

Because of the limitations described in the previous section udocker does not offer isolation features such as the ones offered by docker. If the containers content is not trusted then these containers should not be executed with udocker as they will run inside the user environment.

The containers data will be unpacked and stored in the user home directory or other location of choice. Therefore the containers data will be subjected to the same filesystem protections as other files owned by the user. If the containers have sensitive information the files and directories should be adequately protected by the user.

udocker does not require privileges and runs under the identity of the user invoking it.

Users can downloaded udocker and execute it without requiring system administrators intervention.

udocker via PRoot offers the emulation of the root user. This emulation mimics a real root user (e.g getuid will return 0). This is just an emulation no root privileges are involved. This feature enables some tools that do not require privileges but which check the user id. This enables for instance software installation using rpm, yum or dnf inside the container.

Due to the lack of isolation udocker must not be run by privileged users.

The installation tarball available from the INDIGO-DataCloud repositories at https://repo.indigo-datacloud.eu please check for the latest version.

Pull from docker hub and list the pulled images.

Pull from a registry other than dockerhub.

Create the container from a pulled image and run it.

Run mounting the host /home/u457 into the container directory /home/cuser. Notice that you can "mount" any host directory inside the container, this is not a real mount but the directories will be visible inside the container.

Put a script in your host /tmp and execute it in the container.

Run mounting the host /var, /proc, /sys and /tmp in the same container directories. Notice that the content of these container directories will be obfuscated.

Run as some user. The usernames should exist in the container

The accelerated mode of PRoot may exhibit failures in Linux kernels above 4.0 with some applications due to upstream issues, in this case use run with --noseccomp.

Documentation is available at gitbook.|||

udocker - A basic user tool to execute simple docker containers in batch or interactive systems without root privileges