I am an avid user of apps like Freeletics and Headspace which target the fitness of the body and mind. These apps have contributed a lot to my personal growth and now being on a sabbatical, I was looking to see if I could contribute something back.

I became interested in fitness while traveling to Silicon Valley for work. Being awake early as the result of the jet lag, I went to the only place open in Palo Alto at 5 a.m.- Equinox. There I was with an incredible group of people, including Tim Cook, preparing themselves for the day ahead in arguably the best way possible. It inspired me to follow the same morning routines as they did, no matter how early. Back in Zürich, I started to join many group fitness classes. Quickly I realized that while people were having a great workout together, the sense community was fairly low, despite the intensity of the shared experience. Can this be enhanced with technology? I partnered with the founders of a fitness program named athleticflow in order to build an experiment. Our app just got approved by the app store and in this story, I would like to share my experience building it.

Looking at how little you need to build a mobile app today is exalting. The barrier to entry has never been so low. With its “Learn once, write anywhere” approach, React Native has enabled the front-end community to build apps with a professional finish using virtually only JavaScript and CSS skills. It also dramatically reduced the development gap between iOS and Android. Novelties in programming languages such as ES6, Typescript, and Flow have enabled developers to write scalable JS codebases with low maintenance costs. On top of that, backend as a service products like Firebase provide all the necessary capabilities needed for a mobile backend with a bootstrap cost of zero dollars: database, storage, push notifications, middleware, and analytics. Innovations within these products are fast and substantial: Writing a React app today is much simpler than it used to be when I first got started. Cherry on top of the cake? The community and tools around these technologies are awesome. Hard to imagine a better time and place to write software.

When it comes of making your app development cost-efficient, the most overlooked technology is probably static typing. If you have no experience with it, it can be quicker to prototype something without it. However, as soon as you actually start to build something, you absolutely need them: The more pressure you put on the type checker, the better.

For athleticflow, I designed the data model of the app using the Firebase Bolt Language. The definition file is used to generate the database security rules and validation. It is also used to generate the TypeScript code that is used both for the React Native side and middleware.

Keeping a single source of truth prevents parts of the app from evolving separately: Firebase cannot have a type definition that is different from the React Native and vice versa. Your data model can be refactored quickly and with confidence: The type checker will let you know if you’ve made a mistake.

There are two type checkers available for JavaScript: TypeScript and Flow. I used TypeScript simply because I already had experience with it. If you are new to both type systems, I might recommend Flow since it works out of the box with create-react-native-app. However, I do not have much experience with it yet, so beware of that advice.

Use create-react-native-app to bootstrap your project. It allows you to run a “Hello World” on your iOS/Android device in a matter of minutes. The generated project uses expo. This means that you don’t need to install XCode or Android Studio to develop your app. You can test it on an iOS device without buying a developer account from Apple. The development app can be shared to beta testers very easily via a link or QR code. As you go further in the development of your app, you might want to “detach” the project in order to have your own built setup. This is useful if you need to write custom native code for instance.

However, expo covers a lot of mobile use cases and it is possible to publish a full-fledged app on the Apple App Store and Google Play Store without “detaching”.

Last but not least, expo enables you to update your app instantaneously without any app store update in the same manner as updating an HTML page. If your project is “detached”, you can use Microsoft CodePush to achieve the same effect. Last week a friend notified me about a typo in the athleticflow app. I pushed the correction to master and my continuous integration system in turn transparently pushed the update to all users. These types of seamless updates have always existed for the web and they are now possible in mobile apps. Overall, I find these new practices in mobile development quite disruptive.

Out of the box, create-react-native-app provides the boilerplate to write unit and component tests. For end-to-end testing, there is no de facto standard available yet. Appium has some popularity and a new project named Detox seems to be very promising (iOS only at the moment).

Many apps are built around a social layer. Social layers provide incredibly engaging experiences to the user. However, integrations with existing platforms such as Facebook or Instagram are very limited. Except for the login and shared functionality, there is not much going on. This leaves developers with not much choice but to re-invent the wheel on many social use-cases of their app. Use-cases include followers, feeds, likes, and comments. These are not trivial to implement. For example, something as simple as scrolling through a list of images can actually be complex to implement. On top of that, your users have extremely high expectations. Facebook, Instagram, and other social apps are setting an extremely strong benchmark that you are unlikely to pass. There seems to be a strong need for a “Stripe of social media”. Platforms like Facebook and Instagram only offer little to developers.

With its “learn once write anywhere” approach of React Native, web development skills can be leveraged to build a truly native app from boilerplate to app store release. And it can be done without touching XCode or Android Studio. The model to update your app is now as transparent as updates on the web. By using a type checker, you can write a highly maintainable codebase and dramatically reduce your development costs. Finally, backend as a Service products like Firebase provide all the necessary capabilities needed for mobile infrastructure with of bootstrap cost of zero dollars. It’s a new day, it’s a new dawn for mobile development.

I kept a journal of my journey going through React Native development via several stories. Some of the components I have built are open-sourced, other I’m currently packaging as turnkey solutions for mobile projects.|||

I am an avid user of apps like Freeletics and Headspace which target the fitness of the body and mind. These apps have contributed a lot to my personal growth and now being on a sabbatical, I was…