Locally is a localStorage manager that supports expirable items with timeout values and saves space by compressing them using LZW algorithm. W3C specification suggest 5MB of quota for every origin. Even though it's not a must, browsers tend to stay around that number thus giving our site an exhaustible storage in the long run. Locally's TTL support will take care of that. Locally works much like a caching software (e.g. Redis). Try the demo.

or if you are already using browserify

If compression for all values is wanted to be done as default, Locally can be initialized to indicate that.

Locally will compress all current and upcoming values. If you have compressed values but want to decompress them all and continue uncompressed, Locally will perform decompression on all currently compressed values once it's initialized as:

Since version v0.3.3 has a version that does not support compression and module for those who doesn't want these features and wants to save their size. You can initialize light version like below:

Assigns a to given . is a . Basic usage is as follows:

Value can be anything. If it's a , , , , , , or , will return the value in it's correct type instead of a string.

Time To Live (TTL) values can be given to keys so that defined values will be removed after given milliseconds. TTL can be included in parameter;

or can be given as the third parameter as a shorthand;

You can also specify TTL with string thanks to ms.js.

You can tell .set() to compress given value.

Returns the corresponding value of given key.

.get() can have it's first parameter as an array. In which case .get() will return an array of values assigned to given array of keys.

removes a value from localStorage using given key.

.remove() can have it's first parameter as an array. In which case .remove() will remove an array of values assigned to given array of keys.

It will wipe out all values from localStorage.

Returns key at the given index. Similar to same function of native localStorage.

Returns timeout for given key. If second parameter is .ttl() will return a logical reply using ms module.

It will return if the value has no TTL and persists or if there is no value associated with the key.

Remove timeout of given key, making the value non-expiring.

Adds timeout to key, making it expiring if it wasn't, or updating it's timeout value.

Queries given string among keys and returns the one that includes that string.

keyPattern can also be a RegExp, in which case that RegExp will be used when querying.

.keys() will return all values if keyPattern is not present or is .

Queries using keyPattern and runs function for values associated with keys matching keyPattern. keyPattern can be or .

Similar to property of native localStorage, .length is an integer that represents number of keys Locally is holding at anytime.

Locally by default does not compress values unless it's told to do otherwise. It can be configured to compress all values by giving parameter on initialization, or an extra parameter can be given to .set() so that .set() will compress only that value.

Locally holds an extra object in localStorage called to save TTL and type information. It automatically updates config on page load using current values in localStorage to make sure it doesn't miss any value added to localStorage without using Locally.

If you want to run unit tests yourself run command below after installing Locally.

This will run tests on all distributables. Last command will open default web browser and run mocha tests on the browser.|||

locally - Locally is a localStorage manager that supports expirable items with timeout values and saves space by compressing them using LZW algorithm.