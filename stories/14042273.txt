When learning a new technology, I really like it when I create a small and independent sample of my own. This helps me to comprehend things from scratch.

In this post, I’ll share the sample that I created when I first started to learn apollo. We are going to build a very simple to-do app with meteor and apollo.

As this app will be built with meteor, if you haven’t already installed it, you should install meteor first. You may also want to check out this tutorial if you currently have no experience with meteor.

That said, now we need to add an apollo package. Apollo is available as both an npm package and atmosphere package. In this example, I prefer atmosphere over npm in order to have less configuration steps.

After that, we need to install npm dependencies of this package, which can be installed via

Now we are good to go.

The first step is creating an Apollo Server. It enables us to test our mutations and queries via http://localhost:3000/graphiql

GraphiQL is a very powerful tool, especially for people like me who always need some visualization

In order to make work, we need to pass an executable schema. Thus, we should declare one.

To create an executable schema, method needs two arguments that are and (which we will create in a minute). TypeDefs can be considered as the structure of our database collections, queries and mutations. Resolvers are the functions that make our queries and mutations work the way we desire. So most of the logic needs to be implemented in the resolvers.

You can think of as the table of contents from an article or a powerpoint presentation. We basically create a structure first with , followed by the structure being elaborated with resolvers

First things first, let me emphasize an important point with a quotation from apollo’s official website:

For further information, please check the official website.

Since by default there is no scalar type for Date we need to define ‘scalar Date’ manually.

Now, let’s look at our first type, called Todo.

It has three fields that are , and . These fields correspond to the fields that we want our collection to have. The values for and fields are declared as String, while field is declared as Date

Let’s look the the structure of type Query and type Mutation

As you can see, both of them follow a similar pattern:

Let me briefly explain this structure.

First you need to give your function a unique name, such as or . After that, you need to decide which arguments should be passed to this function. For instance, you can say which basically means, in order to trigger that function, you must pass a value for id field which must be a string (since it is declared as ). You can also declare it as without  . In that case, passing a value to the id field is optional. Unless you don’t handle the missing parameter in your resolver, the function still works, however the result won’t meet your expectation

After naming our function and making a decision about the the arguments, we need to assign a type for the result of this function.

For instance will return a single record which has the form of a Todo.

On the other hand will return an array of records and each single record will have the form of a Todo.

Finally, we need to describe the schema

the schema has two fields: query and mutation. The values of these fields are type Query and type Mutation that we created.

Since we created our table of contents, called , it is time to continue with the details.

Now that we created a custom scalar called in our we need to define its behaviour in the resolvers. To be honest, I took the relevant code from the official page of apollo. You can check the page for further information.

As you can see, function names are exactly the same with the ones we described in typeDefs.

In our app, we only need args (at least for now). Since it is the second argument in the line, we should also pass obj to prevent mix-up.

Lets look at mutation both in and in

So in that case, args corresponds to the following object

Therefore you can either directly call the args object first and get the values of fields later, or you can use object destructuring property of ES6. Both work.

Since only contains information regarding the body field for this mutation, it is also required to assign the values for other fields before database insertion. Therefore, I created a new variable called . It has all the information that has in addition to fields where missing values can be set using the method such as . For the field, mongo takes care of it for us.

Upon success, mongo’s insert function returns the of the record, so I created a new variable to keep this . Then, I use to return this newly added record as a result of the mutation

For the queries, the logic is the same.

However, since we use queries only to fetch data, there should not be any insert, update or delete operations. Nevertheless, you can include additional controls for security reasons.

Taadaaaa, if everything went according to plan, you should now be able to play with your mutations and queries from the following url http://localhost:3000/graphiql

Don’t forget to add a String value before executing the mutation. Be careful though. For String values, it doesn’t accept ‘’. You should declare your Strings inside of “”.

The result should be similar to the following:

You see, our mutation returns a single Todo that is the one we just created.

For the queries, the pattern is very similar. Let’s copy the of our newly created item, and try whether our query works or not.

You see how similar it is to our mutation. Since variable of this query is declared as we must pass a specific id as a String to make it work. Otherwise it throws errors (play with it)

As it is expected, the result of the query is the following:

Don’t hesitate to experiment. Try to add new fields, new queries and mutations. Keep in mind that practice makes perfect.|||

When learning a new technology, I really like it when I create a small and independent sample of my own. This helps me to comprehend things from scratch. In this post, I’ll share the sample that I…