django-cra-helper is the missing link between Django and create-react-app. By adding this to your Django project, you can almost effortlessly inject your React components into your Django templates and initialize component props via Django context variables.

The ultimate goal of this package is to integrate these two projects with minimal changes to workflows that are typically used with either during development. From to , your commands should work as expected so you can forget about implementation and get back to development!

This package is available for installation via :

Once django-cra-helper is installed, will need to be added to in :

Additionally, the following list will also need to be added to :

The last necessary setting is the name of the folder containing the CRA project files, relative to the base directory of the Django project (the folder containing ):

If for some reason the CRA liveserver does not serve on port 3000, the following setting can be added to to specify its actual port:

Finally, run CRA's command once to generate a directory. django-cra-helper requires the file contained within to help load non-JS and non-CSS assets that might be used in any React components. This command should be re-run any time a new non-JS or non-CSS asset is added to the project.

Once everything is in place, django-cra-helper will make the following possible:

If the CRA project's liveserver is started via prior to starting Django's development server via , code changes in the React codebase will be updated immediately within Django views as well.

When the CRA liveserver is running, django-cra-helper adds a template variable that can be inserted into the Django view's template to load the liveserver's intermediate file containing all of the current JS and CSS. This file is recompiled on-the-fly by the liveserver whenever edits are made to the React code. This file can be added to a Django template as follows:

django-cra-helper also takes care of ensuring that Django's command pulls in production-ready bundles built by CRA's command.

First, prepare React files for production with the typical CRA build command:

This will output bundled, minified JavaScript and CSS, and assets to the folder within the CRA project folder.

Once this command is complete, run the following Django command to gather static files, including the compiled React assets:

React assets will be included with the other static assets in the directory, to be served as is usual in a Django production environment. An file will also get pulled in. The contents of this CRA-generated file are required by django-cra-helper to help reference React files that have had a unique hash added to their filenames during the build process.

Similar to the template variable mentioned earlier, django-cra-helper includes numerous other template variables when the CRA liveserver is not running. The two most important ones are and . These can be injected into the page via a typical call to in the template:

Other assets bundled by CRA, including image assets, can be accessed in templates by substituting for and (period). django-cra-helper adds every entry in to the base context, using these substitution rules to accomodate Django's tag.

For example, a logo.svg file in the CRA project can be included in a Django template as follows:

The CRA project will need to undergo a small bit of re-archiceture to prepare it to accept input values from Django when Django serves a view. The following is an example of how a couple of small tweaks to a CRA project's file will establish a simple API for Django to communicate with the bundled React codebase:

Basically, is updated to read values set to , , and and use these to render a component. Each of these three "inputs" will allow Django to easily specify which component to initialize on a per-view basis:

Now that the "API" is in place, Django Views can include values for these inputs via the context they pass to their template:

Below is the Django app's template that will render the context:

The context's and are bound to and respectively.

Note the use of the filter when setting ! provides this filter as a way to easily sanitize and convert a Python to a Javascript . The View context prepared above thus renders to the following typical Javascript Object:

Finally, specifies the container element that the React component should be rendered into. Setting a value for this is only required if the container's is not "root" (the same ID assigned to the container in the CRA project's .)

When all is said and done, React components should now render and be viewable in both the CRA liveserver and when served via Django. Here's an example of a slightly-modified CRA component displayed in Django (left) and CRA (right):|||

django-cra-helper - The missing piece of the Django + React puzzle