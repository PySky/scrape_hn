Looking back on the last 5 months, it’s sort of crazy how a small little thought about getting texted weather alerts grew into what now I have coined SMSforecast. Less than a year ago I considered myself anything but a web developer:

Things sort of just grow on you I guess. I’d like to say once I had my idea for my website all the puzzle pieces just fell into place, but I’d say a better analogy is I used a hydraulic press to force all the puzzle pieces into some square shape and it almost resembled a picture.

With my first big project now finished, there are a couple points I want to bring up that I feel others who were in my position 5 months ago could benefit from:

There is no best framework or language. No matter which technology stack you decide to use, there will always be pro’s and con’s to weigh. My recommendation is choose a tech stack you like, not one you think will look good to an employer.

When I chose to use Angular2+/NodeJs (let the hate flow hackernews) for SMSforecast, it was the same time I was applying for a PHP intern-developer position at Slickdeals (which I just got, woo!). At the time, I considered switching over to PHP, but in the end I made the decision that passion > applicability. Choosing tech that you find fun or interesting should be your biggest decision point, as it turned out Slickdeals was just as interested in my Angular2/NodeJS project, so I’m glad I stuck to my initial choice.

I know these repositories mean well, but I can’t recommend anything about them. I think one of the biggest pitfalls in getting into Angular2 development is holy freaking bloat. A lot of starter packs out there are filled with way too many integrations, and don’t seem to remember that often times simple is better. Worse yet, you get stuck with old dependencies and legacy code from the get-go.

I’d say I wasted a good 3–4 weeks of my 5 month project fiddling with starter packs until I found one that worked for me.

Even though it might seem like more work, getting the full experience will make you a better programmer. The whole reason I wrote angular4-barefuckinbones was because I wanted a frontend starter pack with the absolute bare minimum to start with.

From when I started to when I released SMSforecast, the idea itself changed pretty considerably. Being new the web development world, I took the learn-as-you go approach to building SMSforecast and found along the way that my idea needed to evolve with my technical skills.

Building a side project is a constantly evolving process from point A to point B. For your first website, point A probably won’t even be recognizable anymore once you reach point B, but don’t let that take away from enjoying it all. Take pride in your creation!

When I released SMSforecast, I didn’t expect venture capitalists to line up or my product hunt entry to hit front page (but it would have been nice if that happened). Don’t think too big, but don’t think too small is what I’d want to tell a beginner web developer like me.

My biggest goal was to convince one person that my service was worth paying for, and I accomplished that goal! I may have spent a couple hundred in advertising and will continue to be in the hole for server changes per month, but I am proud of the fact that one person found my service interesting enough that they want to pay money for it. How cool is that?

Hopefully, some of these points were helpful, and not just one large ramble. I wouldn’t call myself a writer, that’s for sure, but I wanted to help those who might be in the position I was in 5 months ago.|||

Looking back on the last 5 months, it’s sort of crazy how a small little thought about getting texted weather alerts grew into what now I have coined SMSforecast. Less than a year ago I considered…