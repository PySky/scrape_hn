Ever wondered what's making your ELF or Mach-O binary big? Bloaty McBloatface will show you a size profile of the binary so you can understand what's taking up space inside.

Bloaty works on binaries, shared objects, object files, and static libraries ( files). It supports ELF/DWARF and Mach-O, though the Mach-O support is much more preliminary (it shells out to / instead of parsing the file directly).

This is not an official Google product.

Bloaty depends on RE2, so the Makefile will download it (via a Git submodule) and build that also.

To run the tests (requires that is installed and available on your path) run:

Run it directly on a binary target. For example, run it on itself.

On Linux you'll see output something like:

The "VM SIZE" column tells you how much space the binary will take when it is loaded into memory. The "FILE SIZE" column tells you about how much space the binary is taking on disk. These two can be very different from each other:

The default breakdown in Bloaty is by sections, but many other ways of slicing the binary are supported such as symbols and segments. If you compiled with debug info, you can even break down by compile units and inlines!

Run Bloaty with to see a list of available options:

You can use Bloaty to see how the size of a binary changed. On the command-line, pass followed by the files you want to use as the diff base.

For example, here is a size diff between a couple different versions of Bloaty, showing how it grew when I added some features.

Each line shows the how much each part changed compared to its previous size. The "TOTAL" line shows how much the size changed overall.

Bloaty supports breaking the binary down in lots of different ways. You can combine multiple data sources into a single hierarchical profile. For example, we can use the and data sources in a single report:

Bloaty displays a maximum of 20 lines for each level; other values are grouped into an bin. Use to override this setting. If you pass , all data will be output without collapsing anything into .

Bloaty has many data sources built in. It's easy to add a new data source if you have a new way of mapping address ranges to some interesting higher-level abstraction.

While Bloaty works on binaries, shared objects, object files, and static libraries ( files), some of the data sources don't work on object files. This applies especially to data sources that read debug info.

Segments are what the run-time loader uses to determine what parts of the binary need to be loaded/mapped into memory. There are usually just a few segments: one for each set of permissions required:

Here we see one segment mapped (read/execute) and one segment mapped (read/write). A large part of the binary is not loaded into memory, which we see as .

Object files and static libraries don't have segments. However we fake it by grouping sections by their flags. This gives us a break-down sort of like real segments.

Sections give us a bit more granular look into the binary. If we want to find the symbol table, the unwind information, or the debug information, each kind of information lives in its own section. Bloaty's default output is sections.

Symbols come from the symbol table, and represent individual functions or variables. C++ symbols are demangled for convenience.

When you pass multiple files to Bloaty, the source will let you break it down by input file:

When you are running Bloaty on a file, the source will let you break it down by file inside the archive.

You are free to use this data source even for non- files, but it won't be very useful since it will always just resolve to the input file (the file).

Using debug information, we can tell what compile unit (and corresponding source file) each bit of the binary came from. There are a couple different places in DWARF we can look for this information; currently we mainly use the section. It's not perfect and sometimes you'll see some of the binary show up as if it's not mentioned in aranges (improving this is a TODO). But it can tell us a lot.

The DWARF debugging information also contains "line info" information that understands inlining. So within a function, it will know which instructions came from an inlined function from a header file. This is the information the debugger uses to point at a specific source line as you're tracing through a program.

You can filter the lists by using regular expressions. For example, to view by source file by group all re2-related sources together, you can write:

Note: this functionality is a bit under-developed and subject to change. For example, there is not yet a way to escape backslashes.

Here are some tentative plans for future features.

If we can analyze references between symbols, this would enable a lot of features:

One of the things we have to do in Bloaty is deal with incomplete information. For examples, which we use for the data source is often missing or incomplete. Refining the input sources to be more complete and accurate will make help Bloaty's numbers be even more accurate.|||

bloaty - Bloaty McBloatface: a size profiler for binaries