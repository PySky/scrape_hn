In case you missed it, Node now supports async/await out of the box since version 7.6. If you haven’t tried it yet, here are a bunch of reasons with examples why you should adopt it immediately and never look back.

[EDIT]: It seems that the embedded code on gist does not work on medium native app, but it works on mobile browsers. If you are reading this on the app, tap on the share icon and choose “open in browser” in order to see code snippets.

For those who have never heard of this topic before, here’s a quick intro

Assuming a function that returns a promise, and that promise resolves with some JSON object. We just want to call it and log that JSON, then return .

This is how you would implement it using promises

And this is how it looks with async/await

There are a few differences here

3. means that the call will wait until promise resolves and print it value.

Look at how much code we didn’t write! Even in the contrived example above, it’s clear we saved a decent amount of code. We didn’t have to write  , create an anonymous function to handle the response, or give a name to a variable that we don’t need to use. We also avoided nesting our code. These small advantages add up quickly, which will become more obvious in the following code examples.|||

In case you missed it, Node now supports async/await out of the box since version 7.6. If you haven’t tried it yet, here are a bunch of reasons with examples why you should adopt it immediately and…