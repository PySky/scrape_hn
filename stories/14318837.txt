End of April Johannes Wei√ü added custom toolchain support to Swift Package Manager. Johannes also provided a script which shows how to build an Ubuntu toolchain for x86-64.

So what we did is take that script and make it produce a Swift 3.1.1 cross compiler toolchain for the Raspberry Pi (armhf) Ubuntu Xenial port.

What this is good for? You can build Raspberry Pi Swift binaries on a Mac. Like this:

What we are going to do is build a Swift 3.1.1 cross compilation toolchain for ARM Ubuntu Xenial.

To do this, we need to install a recent version of Swift Package Manager. One containing the required support for 'destinations'. And the easiest way to do this, is to install a recent Swift snapshot. We tried , Download the Xcode package and install it on your Mac.

Note: Snapshots require macOS 10.12, they do not run on macOS 10.11.

Note: We are indeed building a 3.1.1 toolchain! We are just using the Swift Package Manager from the snapshot.

The next step is to enable the Swift tools from that snapshot. I use swiftenv for that, if you don't have it:

And then enable the snapshot (use to list the ones you have available):

OK, good to go :-)

First download our script and make it executable: build_rpi_ubuntu_cross_compilation_toolchain, e.g. like:

You can just call the script and it'll give you instructions, but let's just go ahead. Next step is to download Swift 3.1.1 tarballs. We need the macOS pkg for the host compiler and a Raspberry Pi tarball for the Swift runtime. We use the one provided by Florian Friedrich for the latter:

Those are a little heavy (~400 MB), so grab a or . Once they are available, build the actual toolchain using the script:

If everything worked fine, it'll end like that:

Check whether it actually produced an ARM binary:

Excellent! It worked. Now either copy your binary to a Raspi or test it using QEmu as described below.

If you are not using our Docker image, you may need to setup the , so that the dynamic linker finds the Swift runtime. E.g. like that:

Docker for Mac comes with QEmu support enabled, meaning that you can run simple ARM binaries without an actual Raspberry Pi.

This works for simple builds, more complex stuff does not run in QEmu. Use a proper Pi for that :-)

Lets build something very useful, an ASCII cow generator. The snapshot's produces a Swift 4 setup by default. We want to use 3.1, so we do the setup manually:

And you get the most awesome Swift tool:

Wanna have Server Side Cows on the Pi? Try this: mod_swift.

Having the cows on your Raspi is not enough? Get: CodeCows and ASCII Cows.

Brought to you by The Always Right Institute and ZeeZide. We like feedback, GitHub stars, cool contract work, presumably any form of praise you can think of. We don't like people who are wrong.

There is the swift-arm Slack channel if you have questions about running Swift on ARM/Raspberry Pi.|||

dockSwiftOnARM - Playing with dockerizing Swift for Raspberry Pi