CSS vendor prefixes are used in browsers to add support for new CSS features in their testing and experimentation period, that may not be part of a formal specification.

We face the challenge of supporting different kinds and versions of browsers when developing websites. In most cases, to use a more advanced CSS3 style property, you take the standard CSS property and add the prefix above for each browser. For example, if you want to add a CSS3 transition, you would use the transition property with the prefixes:

Adding these prefixes to CSS is a routine task for all web designers and frontend developers. It’s also hard to keep track of which prefixes are needed and where, as per browsers and their versions. Please keep in mind that the web browsers will continue changing and evolving over a period of time. It is inevitable that you’ll require some type of hack unless you’re keen on building web applications or webpages which are years behind than the ones created with modern methods.

When you use browser prefixes with the standard prefix listed last, you are setting your web pages up to be future proofed. Browsers that use the prefixes will use them and ignore the properties they don’t understand. Browsers that can support the standards based properties will apply them because they are listed last, in your CSS class.

It feels annoying and repetitive to write the properties 2–5 times to get it to work in all browsers, but it’s temporary. As browsers improve, they add support for the standards based version of the property, and you can remove the prefixed versions. For example, just a few years ago, to set a rounded corner on a box you had to write:

But now you only need the standards version:

Chrome has supported the CSS3 property since version 5.0, Firefox added it in version 4.0, Safari added it in 5.0, Opera in 10.5, iOS in 4.0, and Android in 2.1. Even Internet Explorer 9 supports it without a prefix (and IE 8 and lower didn’t support it with or without prefixes).

We have used mixin libraries that get shipped with pre-processors like Compass for SASS. They solve a lot of problems, but create other problems instead. For instance, they force us to use a new syntax, which often changes between major releases.

For example, to add a linear-gradient in SCSS:

It compiles to CSS as shown below:

These pre-processors iterate much slower than modern browsers. A stable release can have a lot of unnecessary prefixes and sometimes we need to create our own mixins.

Autoprefixer is a postprocessor. It doesn’t use any specific syntax and works with common CSS. It parses your CSS files and adds vendor prefix properties and values as per caniuse database. It will only add the necessary prefixes and not bloat your stylesheet. It even lets you specify what browsers you want to target(by default the last 2 versions). It will also remove existing prefixes which are no longer needed.

It can be Integrated with SASS, since it runs after CSS is already compiled. All you have to do is add it to your asset building tool and you can completely forget about CSS vendor prefixes. Just write regular CSS according to the latest W3C specifications without any prefixes. Like this:

Incorporate Autoprefixer into your project build system using autoprefixer-rails gem, gulp or grunt. There’s also an online compiler, if you want to try compiling CSS snippets with autoprefixer.

If you found this article useful, don’t forget to follow us on twitter to get updates on our posts. We’re looking for UI/UX experts to join us, so get in touch!.|||

Autoprefixer is a tool that adds vendor prefixes to CSS based on the usage patterns and current state of support. This results in clean code and smaller CSS files.