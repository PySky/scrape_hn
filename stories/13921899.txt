Today we are going to dive into the world of functional web testing with TestCafe.

Unlike the majority of other end-to-end (e2e) testing tools, TestCafe is not dependent on Selenium or WebDriver. Instead, it injects scripts into the browser to communicate directly with the DOM and handle events. It works on any modern browser that supports HTML5 without any plugins. Further, it supports all major operating systems and can run simultaneously on multiple browsers and machines.

We will be using:

Please review the Getting Started guide before beginning.

By the end of this tutorial, you should be able to…

Install the dependencies, and then fire up the app by running to make sure all is well. Navigate to http://localhost:3000/ in your browser and you should see a list of jobs in HTML. Experiment with the app. Add a job. Update a job. Delete a job. This is what we will be testing. Kill the server when done.

With that, you can start running tests.

Add a command to the in package.json:

Here, we specified the path to TestCafe in our “node_modules” folder along with a target browser, , and a path to where all tests will be located, .

Now, you can use to run TestCafe.

Let’s get a test set up. Add a “tests” folder to the project root, and add an index.js file to it:

Try this out! Run . If all goes well Chrome should fire up and execute the test. Once done, you should see something like this in your terminal:

Make sense? No? Continue to run the test and review the above steps until it does. Make sure you understand what’s happening before moving on.

Add a new file called jobs.js to the “tests” folder:

Then update the command in package.json:

ignores the example GitHub test found in index.js so that we can focus just on the tests added to jobs.js. The option is used to launch the Node app so that TestCafe can interact with it.

Try it. You should see the page load in Chrome. With that, let’s test each of our app’s CRUD functions.

What’s happening? Review the code above, line by line. It should be fairly straightforward. Turn to the docs for help, adding comments as necessary.

Before moving on, refactor out the selectors so that they can be re-used by other test cases:

Start by adding a new function to jobs.js:

Think about the steps an end user has to go through to add a job:

Now, try this on your own, step by step, before looking at the solution…

Make sure to add the selector to the top:

Test it out. Then remove the and test again:

What are we missing in this test?

Try testing for these on your own.

Again, start by adding the boilerplate:

Then write out the steps the end user has to take before writing any code:

What else should you test for? Write the test cases on your own.

Also, did you notice the code smell? There’s a lot of code duplication happening between those last two test cases. How could this be better handled?

Finally, did you notice that there are still four jobs in the table? Why? Could there be issues with testing the previous two tests together rather than in isolation? Probably not in this case, but if there are, you could always wrap the update in a new , since this restores the page to its initial state.

Run the app again with to review, from the end user’s perspective, what happens when you try to delete a job.

Did you notice the function? This tells TestCafe how to handle the alert.

What if we click “cancel” instead of “ok”?

Again, handle any edge cases on you own and clean up the code smell.

Aside for Chrome, TestCafe supports a number of browsers out-of-the-box. Further, if you don’t need to test browser-dependent functionality, then you can use a headless browser.

Start by installing the plugin, which is powered by Nightmare:

Run the tests, and you should see:

There’s also a plugin for cross browser support powered by SauceLabs.

Finally, let’s incorporate TestCafe into our Continuous Integration (CI) process with Travis CI.

After you enable Travis CI for the repository you are working with, add a .travis.yml file to the project root:

Here, we added the Node version along with some basic Chrome settings. Also, we have to use xvfb to fake a GUI so that Chrome thinks it’s running in a graphical environment.

That’s it. Grab the final code from the testcafe-example repo. Comment below if you have questions.|||

Let's look at how to write end-to-end tests with TestCafe.