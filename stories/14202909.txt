An illustrated guide to setting up your website using GitHub and Cloudflare

You want to setup custom redirects or other server configuration for free You want to get your site on HTTPS but donâ€™t know where to start Youâ€™re overwhelmed with the amount of choices out there (like Netlify, Surge, BitBalloon, Now) Easy to setup and get started with Github Pages It comes with out-of-the-box support for SSL (HTTPS). (Hereâ€™s why HTTPS matters.) Custom page rules for setting up redirects, always HTTPS, etc. Allows for setting up HSTS (HTTP Strict Transport Security) Before we get started you will need a fewÂ things: Access to a custom domain. You can buy it from any Domain Name Registrar like: Namecheap, GoDaddy, BigRock, etc. If all this piqued your interest, then letâ€™s get started! Select the option Project Site to find the instructions on how to create a basic page from scratch or a custom theme Go to Settings for your repository Choose to serve your website from the masterÂ branch Go to Settings for your repository. In the Github Pages section, choose the master branch to serve your website from. Once youâ€™ve done that, you can go to https://<yourgithubusername>.github.io/repository to see your website in action as shown below. Add the custom domain that you have bought and save it. Your website is now ready with your own custom domain ðŸ‘¯ WOOT! âœ¨ So, we have everything setup on Github. Weâ€™ll start with setting up Cloudflare to jazz up your website with all the powerful features I mentioned at the beginning of this post. Login to Cloudflare. If you are using it for the first time, you should see a screen like the image shown above. If you have used it before, you can click on the Add Site option in the navigation bar on the top right to add a new domain. Enter the domain you want to manage and click on Begin Scan.

In this step, we inform Cloudflare to point our domain to the Github Pages server using two A Record DNS entries:Â 

1. 192.30.252.153

2. 192.30.252.154 Once you have set this up, all requests to your custom domain i.e. yourcustomdomain.com will be routed to your website on Github on Step 3. Thereâ€™s one more step involved before we move on to the next stage. Oftentimes, you would want to use a subdomain like www for your website, i.e. www.yourcustomdomain.com For this, you will need to add a CNAME record DNS entry which will point your subdomain(www) to your apex domain(@). Once you have set this up, all requests to your custom subdomain i.e. www.yourcustomdomain.com will be routed to your website on Github on Step 3. NOTE: Donâ€™t try to go access your custom domain right away. It wonâ€™t work. We have only done the Cloudflare to Github setup. We still have to do the DNS Registrar -> Cloudflare setup. This will come up in Step 7. Click Continue to go to the next step. The Free plan for Cloudflare provides a lot of sophisticated options as discussed in the Why Cloudflare? section at the beginning. Click Continue to go to the next step. Copy these two highlighted nameservers to your DNS registrarâ€™s name serverÂ settings Once youâ€™re on this page, keep it open in one tab and open your DNS Registrarâ€™s (the place from where your bought your domain) site in another. If youâ€™re using one of the following registrarâ€™s then the links to understand how to change Nameserver are: You need to replace the existing Nameservers in your Domain settings with the oneâ€™s on the Cloudflare page that is open in the other tab.

In the Speed setttings, in the Auto Minify section, choose the option to auto-minify everything: Javascript, CSS, HTML. This will be done by Cloudflare on-the-fly once and then cached. Whenever any of your assets change, Cloudflare will do this again for you. The advantage of minification is that the size of the file delivered to your browser is a lot less since it strips off unwanted spaces and comments.

If you scroll down on the same page as Auto Minify, you will find the Browser Cache Expiration section. It should be set to 30 days/1 month, ideally, for WebpageTest to not give you a warning. What this time indicates is that, once your site is loaded in any browser, then the browser will not request any assets for a second time until the Browser Cache time period expires for those assets.

Before we move on to the next step, please check the Crypto settings on Cloudflare. It should say Active Certificate in the SSL section. (Note: Try reloading the page. Sometimes it doesnâ€™t update). In the next two steps, we are going to make your site serve via HTTPS always. For that to work without any problems, it is important that you have an active certificate on Cloudflare.|||

Easy to Setup, Instant Deploy, Free HTTPS, HTTP2/SPDY Suport, Custom Redirect, Browser Cache Expiration, HTTP Secure Transport Headerâ€Šâ€”â€ŠHSTS