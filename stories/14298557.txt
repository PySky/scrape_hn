As a developer, it is always a pain to test the payment gateways and other applications securely in our localhost. 💻 Anything and everything, including Google Chrome, now asks you to have a secure URL that starts with 🔒 , which is a pain for most of the developers, as there’s a cost involved in it. For those who don’t know, we can create a self-signed certificate and make it trusted locally, to test out things. 😎

I am working currently on setting up a local payment gateway 💰, so I need to secure my domain, in order to make it work. I needed , but due to the IP restriction, I am unable to get one. So instead, I thought what if I am the certificate authority that signs the certificates? I understand that’s a crazy feel. 😈

The main reasons to create a secure website is for:

There are a few things you need to do to get your http://localhost secured to https://localhost and without any warning (at least in your browser).

I am not sure if it is possible to create a Wildcard or Multi-Domain Validation Certificate at this point of writing this article. I am just going to do a demo of what I am doing currently with my Mac. 🖥

You need to have OpenSSL to create the certificates. This is installed with the system if you are using Mac or Linux. For Windows, please try Win32 OpenSSL.

Becoming an anonymous Root Certificate Authority is now made simple. 😜 Okay, jokes apart. You can't. This is local to your workstation or system, just to bypass some basic security validation! This is done only once.

This key is the base key. Now with this, we will be signing the others. If you want to protect the key with a password, you can do so by adding the parameter.

You will be asked for a password. Make sure you use the same password to create the other keys.

Both the above processes generate a file, , which can be used to sign the other certificates. Now let's create the first self-signed certificate using the above generated key:

The above command will be interactive, asking you a few questions. You can give the same as below:

Once you complete the above process, you will get a new file , which is the Root Certificate Authority. In the Mac, you can see it this way:

Now the tricky part is to install the Root Certificate Authority as a trusted certificate. Open Keychain Access in Mac and click on File » Import Items and add it to the Keychain. 🔐

Making Mac to trust your certificate has a bit extra process. Go into the Certificates section and locate the certificate you just added. Double click on it, enter the trust section and under "When using this certificate" select "Always Trust". 🔒

For Windows, you need to follow a different process, which I will post it later. And when you are using Firefox in Windows, you need to make Firefox "trust" your certificate by adding it into the repository, as Firefox maintains its own trusted list of certificates.

This process needs to be done once for every domain you have. Let's say, now we are going to use domain. These are the steps that are supposed to be followed.

After creating the key, you need to issue a Certificate Signing Request. This is the CSR, you will require to merge the and your certificate.

This asks you a series of interactive questions like before. Make sure you follow this step correctly, else it won't work for your domain.

Answer all the common questions like Country, State/Province, etc. but when it comes to the Common Name, make sure you give .

Now, with the help of the and , we will create a certificate. You should make sure that the certificate you create should be valid for less than the validity of the root certificate.

After the above process, you will have another file . This is the certificate encrypted with SHA 256-bit Algorithm and trusted and self-signed by you.

Finally, in the directory, you should have these files:

The main file we need now is the , which can be installed in servers to serve the page. For now, I am going to use a simple server using NodeJS.

Create a 📄 in the same directory with the following contents.

And voila! We have our very own 🔒 https://localhost/ secured! 😎

Hope the article was interesting and informative. Let's discuss more in the comments below and once again, until next blog post! 😊|||

Securing your localhost is now made simple. Everyone can use a valid https://localhost/ without any warnings.