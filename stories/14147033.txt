A two-button backlit mechanical keyboard that types ASCII values, one bit at a time.

Typing the backspace character, followed by switching between modes.

New animations added to '1/0' mode. (Still working on a name for that).

These libraries are used to drive the SSD1306 OLED display.

Because I could not locate a part to represent the SSD1306 OLED Display, I created my own. This can be found in the file for Eagle. A word of warning, this was my first time using Eagle. The part works, but could be improved.

Uses c0z3n/cherrymx-eagle library as well.

Each byte can either be typed from most significant bit to least significant bit (left to right), or least significant bit to most significant bit (right to left). This is configured before compiling and uploading to the board. After all 8 bits have been entered, it will type out the ASCII value equivalent of that binary value. The Pro Micro has USB HID support, which means it acts just like any other keyboard.

If both keys are held down, the keyboard will switch to "1/0 mode" / "single button press mode" (I'm bad at names). In this mode, each key will represent a '1' or a '0' just like on a traditional keyboard, no binary involved.

Initially I was going to use a DigiStump board for this, but I found issues with not having enough memory to work with after importing libraries and not enough I/O. I'm using an Arduino Pro Micro knockoff. The reason that there is electrical tape covering it is because I found that shorting the contacts with a finger would cause it to stop working. I'm still not really sure why.

This project relies on the Arduino Keyboard library to handle all USB HID support. It works great for printing standard characters and most operations, however, a downside of using this means that not all ASCII values are supported. Most of the values below are not actually supported.

User dtwilliamson added a feature that repurposes these values as control commands. Here is a list of some control key commands.

The functionality of Backspace, Tab, and Enter is still preserved by setting to .

Note that CTRL+H, CTRL+I, and CTRL+J function the same in a Unix command line as the keys do. Up to you which setting to use. works just fine in Windows and the GNOME desktop environment.

Please feel free to fork this project for your own purposes. If you build one, I would love to see it!

If you have suggestions/improvements/feedback/bug reports/etc., submitting a pull request or an issue through GitHub is the best way to contribute.

Special thanks goes to everyone in the UWB Makerspace that helped make this possible.

Please see the Binary Keyboard contributors page for a list of contributors. Many thanks to each of you for your support!|||

BinaryKeyboard - A two-button backlit mechanical keyboard with a screen that types in binary (or ones and zeros).