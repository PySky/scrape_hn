Sticky matching was added to JavaScript as a way of improving the performance of lexical analyzers in compilers, which heavily rely on regular expressions.

We can verify that the sticky matcher would work if we forcefully moved lastIndex with the next piece of code.

The following example illustrates the difference between the two. Given an input string like 'haha haha haha' and the /ha/ regular expression, the global flag will match every occurrence of 'ha' , while the sticky flag will only match the first two, since the third occurrence doesn’t match starting at index 4 , but rather at index 5 .

The sticky matching y flag introduced in ES6 is similar to the global g flag. Like global regular expressions, sticky ones are typically used to match several times until the input string is exhausted. Sticky regular expressions move lastIndex to the position after the last match, just like global regular expressions. The only difference is that a sticky regular expression must start matching where the previous match left off, unlike global regular expressions that move onto the rest of the input string when the regular expression goes unmatched at any given position.

ES6 also introduced a flag. The stands for Unicode, but this flag can also be thought of as a more strict version of regular expressions.

Without the flag, the following snippet has a regular expression containing an character literal that was unnecessarily escaped.

Using an escape sequence for an unreserved character such as in a regular expression with the flag results in an error, as shown in the following bit of code.

The following example attempts to embed the horse emoji in a regular expression by way of the notation which ES6 introduced for strings like , but the regular expression fails to match against the horse emoji. Without the flag, the pattern is interpreted as having an unnecessarily escaped character followed by the rest of the sequence.

The flag introduces support for Unicode code point escapes, like the horse emoji, within regular expressions.

Without the flag, the pattern matches any BMP symbol except for line terminators. The following example shows , an astral symbol that wouldn’t match the dot pattern in plain regular expressions.

When using the flag, Unicode symbols that aren’t on the BMP are matched as well. The next snippet shows how the astral symbol matches when the flag is set.

When the flag is set, similar Unicode awareness improvements can be found in quantifiers and character classes, both of which treat each Unicode code point as a single symbol, instead of matching on the first code unit only. Insensitive case matching with the flag performs Unicode case folding when the flag is set as well, which is used to normalize code points in both the input string and the regular expression.

For more details around the flag in regular expressions, read this piece by Mathias Bynens.

Up until now, JavaScript regular expressions could group matches in numbered capturing groups and non-capturing groups. In the next snippet we’re using a couple of groups to extract a key and value from an input string containing a key value pair delimited by .

There’s also non-capturing groups, which are discarded and not present in the final result, but are still useful for matching. The following example supports input with key value pairs delimited by in addition to .

While array destructuring in the previous example hid our code’s reliance on magic array indices, the fact remains that matches are placed in an ordered array regardless. The named capture groups proposal (in stage 3 at the time of this writing) adds syntax like where we can name capturing groups, which are then returned in a property of the returned match object. The property can then be destructured from the resulting object when calling or .

JavaScript regular expressions support backreferences, where captured groups can be reused to look for duplicates. The following snippet uses a backreference for the first capturing group to identify cases where a username is the same as a password in a piece of input.

The named capture groups proposal adds support for named backreferences, which refer back to named groups.

The reference can be used in tandem with numbered references, but the latter are better avoided when already using named references.

Lastly, named groups can be referenced from the replacement passed to . In the next code snippet we use and named groups to change an American date string to use Hungarian formatting.

If the second argument to is a function, then the named groups can be accessed via a new parameter called that is at the end of the parameter list. The signature for that function now is . In the following example, note how we’re using a template literal that’s similar to the replacement string found in the last example. The fact that replacement strings follow a syntax as opposed to a syntax means we can name groups in replacement strings without having to resort to escape codes if we were using template literals.

The proposed Unicode property escapes (currently in stage 3) are a new kind of escape sequence that’s available in regular expressions marked with the flag. This proposal adds a escape in the form of for binary Unicode properties and for non-binary Unicode properties. In addition, is the negated version of a escape sequence.

The Unicode standard defines properties for every symbol. Armed with these properties, one may make advanced queries about Unicode characters. For example, symbols in the greek alphabet have a property set to . We could use the new escapes to match any greek Unicode symbol.

Or, using , we could match non-greek Unicode symbols.

When we need to match every Unicode decimal number symbol, and not just like does, we could use as shown next.

Linked next is a full list of supported Unicode properties and values.

JavaScript has had positive lookahead assertions for a long time. That feature allows us to match an expression but only if it’s followed by another expression. These assertions are expressed as . Regardless of whether a lookahead assertion matches, the results of that match are discarded and no characters of the input string are consumed.

The following example uses a positive lookahead to test whether an input string has a sequence of letters followed by , in which case it returns the filename without the part.

There are also negative lookahead assertions, which are expressed as as opposed to for positive lookaheads. In this case, the assertion succeeds only if the lookahead expression isn’t matched. The next bit of code uses a negative lookahead and we can observe how the results are flipped: now any expression other than results in a passed assertion.

The proposal for lookbehind (stage 3) introduces positive and negative lookbehind assertions, denoted with and respectively. These assertions can be used to ensure a pattern we want to match is or isn’t preceded by another given pattern. The following snippet uses a positive lookbehind to match the digits in dollar amounts, but not for amounts in euros.

On the other hand, a negative lookbehind could be used to match numbers that aren’t preceded by a dollar sign.

When using the pattern, we typically expect to match every single character. In JavaScript, however, a expression doesn’t match astral characters (which can be fixed by adding the flag) nor line terminators.

This sometimes drives developers to write other kinds of expressions to synthesize a pattern that matches any character. The expression in the next bit of code matches any character that’s either a whitespace character or a non-whitespace character, delivering the behavior we’d expect from the pattern matcher.

The proposal (stage 3) adds an flag which changes the behavior of in JavaScript regular expressions to match any single character.

Often, when we have a regular expression with a global or sticky flag, we want to iterate over the set of captured groups for each match. Currently, it can be a bit of a hassle to produce the list of matches: we need to collect the captured groups using or in a loop, until the regular expression doesn’t match the input starting at the position property. In the following piece of code, the generator function does just that for a given regular expression.

One problem with this approach is that it’s tailor-made for our regular expression and its capturing groups. We could fix that issue by creating a generator which is only concerned about looping over matches and collecting sets of captured groups, as shown in the following snippet.

A bigger source of confusion is that mutates its property on each call to , which is how it can track the position after the last match. When there are no matches left, is reset back to . A problem arises when we don’t iterate over all possible matches for a piece of input in one go – which would reset to – and then we use the regular expression on a second piece of input, obtaining unexpected results.

While it looks like our implementation wouldn’t fall victim of this given it loops over all matches, it’s be possible to iterate over the generator by hand, meaning that we’d run into trouble if we reused the same regular expression, as shown in the next bit of code. Note how the second matcher should report but instead starts at an index much further ahead than , even misreporting the key as .

One solution would be to change so that is always when we yield back to the consumer code, while keeping track of internally so that we can pick up where we left off in each step of the sequence.

The following piece of code shows that indeed, that’d fix the problems we’re observing. Reusable global regular expressions are often avoided for this very reason: so that we don’t have to worry about resetting after every use.

The proposal (in stage 1 at the time of this writing) introduces a new method for the string prototype which would behave in a similar fashion as our implementation, except the returned iterable is a sequence of object as opposed to just the in the example above. Note that the sequence contains entire objects, and not just numbered captures. This means we could access named captures through for each in the sequence.|||

In this article we’ll take a look at regular expressions improvements in and after ES6. We’ll discuss the /y, /u, and /s flags, named capture groups, unicode property escapes, lookbehind assertions, and String#matchAll.