The operator in C tells us how much space the result of an expression would use if we were to evaluate it, but doesn’t actually evaluate the expression. For example, yields the size of the variable , but doesn’t increment . Many implementations of C provide a operator too, which provides the type of an expression without evaluating it.

That lack of side-effects is useful, for example in macro hygiene. Preprocessor macros have surprising behaviour when invoked with arguments that have side-effects:

Now that’s a pretty well known pitfall, and it’s common practice to use and to avoid side-effects this way. But C has one more surprise lying in wait for the unwary: sometimes and do have side-effects! C supports declaring arrays whose length is determined at run time, e.g.:

The length of the working array depends on the value of . And of course we can ask the compiler to tell us the size of a dynamic array, too: is equivalent to , and will be evaluated at run time.

We can use any integer expression to specify the length of the array, even one with side-effects. If we do that, the compiler has no (reliable) way to know the size without evaluating the whole expression, including its side-effects. So that’s what it does:

increments and prints “1”. More generally, will evaluate any array-size expression in its argument if the final size depends on the value of the expression. Worse than that, according to the spec, may evaluate such expressions even if it doesn’t have to:

Here, “unspecified” means the compiler may choose to do it or not and doesn’t even have to document which. That is to say:

isn’t in the standard but behaves similarly on compilers I’ve looked at. C is reaching PHP-like levels of confusion here, but luckily for us this combination (passing a type or cast to / , using arrays with run-time sizes, and using expressions with side-effects) is pretty hard to hit. I’ve never seen it in “real” code, though I can imagine a set of clever helper macros might combine to cause it somehow.|||

C is not your friend: sizeof and side-effects The sizeof operator in C tells us how much space the result of an expression would use if we were to evaluate it, but doesn’t actually evaluate the...