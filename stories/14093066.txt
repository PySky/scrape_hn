This conversation comes up in every training I do about testing. I know exactly when it will happen. I know what I’m going to say, what they will say, and I know no one comes out completely convinced.

We want to test some code. However, this code had started being written in the age of the dinosaurs, its size resembles some of the big ones, and the risk of changing the code is the risk of feeding a Jurassic beast.

There’s no point ignoring it, we’ll need to modify it in order to be able to test it. In fact what’s really bothering us is that some of the information in there needs to be accessed. I suggest changing the visibility of some members.

Curious person: “What do you mean make it public”?

 Me: You know, make it public. Or add a method that will enable us to set up the class easily, so we can test it.

 Curious person: “But that means breaking encapsulation”.

 Me: Might be. Is that wrong?

 Mildly suspicious person: “Well, the design is there for a reason. The member is private because it needs to be private, we can’t expose it”.

 Me: Remember that tests are first-class users of the code? That means that the design can change to support them too.

 Mildly angry person: “But you can’t expose everything, what if somebody calls it”?

 Me: That’s the point, that the test can call it.

 Angry person: “But you can’t ensure that only tests will call it. At some point, someone will call it and create hell on earth. We’ve all been there”.

 Mildly angry Me: Yes, it might happen, and we can’t predict everything and plan for everything, software is a risky business.

 Very angry person: “THESE RULES WERE WRITTEN IN BLOOD!”

Let’s ignore the fact that you’re defending a horrible untested design, with the argument that changing the accessibility of one member will make it so much worse.

Encapsulation is a great concept. Having public and private members makes perfect sense. Some things we want to expose, others we want to hide.

But the water becomes murky very quickly. If we were talking black and white, only private and public, that would be ok. But for those special times, when private is just not enough…

There’s “friend” (C++).

 Or “internal” (.net).

 Or implicit package visibiliy (Java).

 Not to mention “protected”.

 Or reflection that bypasses everything.

It’s like we’re breaking encapsulation, but not really breaking it, so we feel better.

Let’s face it, design can serve more than one purpose, and more than one client in different ways. The language giving us tools doesn’t solve all the problems. That’s the cool thing about software, it can be molded to fit what we need it to do.

That involves living with not-so-perfect designs. It also means “changing the code just for the tests” is ok, because that’s another good purpose.

Yes, somebody might call it.

That somebody might also look at the code and decide to change it, or add an accessor themselves.

 It’s silly, not to mention risky, to think that a language keyword is the only thing standing betweend us and a disaster.

In C everything is public, how do you prevent the “someone might call it” disaster waiting to happen there? Playing with .h files and custom linking can be a lot more risky.

We do that the way that’s always more effective than the code itself: Processes that involve humans, not relying on tools.

We need to understand the purpose of code – create value for someone. If the code is beautiful but cannot be tested,  you don’t get points for using the “right” encapsulation.

The value comes when functionality works. In order for it to work, we need to check it. If we discussed the risks involved, and decided value comes from testing, it usually outweighs the risk of “someone might do something bad with the code” (after many have abused it already).

And if you feel this risk is not negligable – do something about it. Do code reviews, document and share the knowledge, create architecture guidelines.

But don’t rely on a language feature as the first resort.|||

This conversation comes up in every training I do about testing. I know exactly when it will happen. I know what I'm going to say, what they will say, and I