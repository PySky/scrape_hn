How do you set up a product development environment for microservices? While the tooling and infrastructure for building traditional web applications has been highly optimized over time, the same cannot be said for microservices.

In particular, setting up a product development environment for microservices can be considerably more complex than a traditional web application:

These external dependencies add complexity to creating and maintaining a development environment. How do you set up your service so you can code and test it productively when your service depends on other resources and services?

This article discusses the various approaches to setting up a development environment, and the tradeoffs.

Using tools like minikube or Docker Compose you can spin up multiple services locally. For resources like databases you use Docker images that match them:

If you’re unable to use containers, Daniel Bryant outlines a number of other approaches for developing microservices locally with various tradeoffs.

You spin up a realistic cluster in the cloud, a staging/testing environment. It might not have as much nodes as the production system, since load will be much lower, but it is quite close. Your code also runs in this cluster.

graph LR subgraph Laptop source("Source code") end subgraph Staging cluster in cloud source-.->code code["Your service"] code---s2["Dependency service 1"] code---s3["Dependency service 2"] code---db>"AWS RDS PostgreSQL"] s2---s4["Yet another service"] s3---s4 s3---s5["Even more service"] s4---queue>"Cloud queue"] s5---queue end

As with option #1, all services run locally. However, cloud resources (AWS RDS etc.) are made available locally on your development machine via some sort of tunneling or proxying, e.g. a VPN.

graph LR subgraph Laptop source("Source code")-.->code code["Your service"] code---s2["Dependency service 1"] code---s3["Dependency service 2"] s2---s4["Yet another service"] s3---s4 s3---s5["Even more service"] end subgraph Staging in cloud code---db>"postgres Docker image"] s4---queue>"Cloud queue"] s5---queue end

You spin up a realistic cluster in the cloud, a staging/testing environment. But your service runs locally, and is proxied/VPNed into the remote cluster.

graph LR subgraph Laptop source("Source code") source-.->code["Your service"] end subgraph Staging cluster in cloud code---s2["Dependency service 1"] code---s3["Dependency service 2"] code---db>"AWS RDS PostgreSQL"] s2---s4["Yet another service"] s3---s4 s3---s5["Even more service"] s4---queue>"Cloud queue"] s5---queue end

At Datawire, we’ve elected to go with option #4. We develop services locally on our laptop, while shared services run in a cloud-hosted Kubernetes instance (we also use Amazon resources such as RDS).

We found that writing a simple, easy-to-use proxy to be fairly complex, so we open sourced the code so you can do the same in a few minutes. If you’re interested, visit our Telepresence page to learn more, or get started in just a few minutes.

We’re happy to help! Look for answers in the rest of the Microservices Architecture Guide, join our Gitter chat, send us an email at hello@datawire.io, or contact our sales team.|||

Development environments for microservices can be complex. We talk about the different options.