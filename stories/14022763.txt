This setup will allow you to easily send button events, including analog trackpad and trigger values, through the Vive Tracker to a PC running Unity.

I’ve written this tutorial for macOS Sierra (10.12.2). That is to say, my Vive Tracker is connected to a Mac via USB. However the receiving watchman dongle is connected to a PC running Unity. Support for other devices such as Arduino will be coming soon.

If you are using Windows to send feature reports to the Vive Tracker, this tutorial should be easily adaptable for your needs.

To simplify USB HID communication we’ll be using a Node library. So you’ll need Node.js and npm (Node Package Manager) installed. Both are available for Mac and Windows.

Installers for Node are available here. If you have Homebrew on your Mac you can simply run in terminal.

For this tutorial we’ll be using node-hid to send our feature reports to the Vive Tracker. If you have npm installed it makes it really easy to install other libraries like node-hid.

Since node-hid installs non-globally we’ll be creating a new project folder for our tutorial.

1. On your desktop create a new project folder called vive.

2. Open terminal and navigate to the project directory we just created , and run . This will create a new folder called

3. Still in terminal navigate to  , this folder contains a few example scripts that demonstrate how to use node-hid. For now we’ll just be using

4. Run the command this will output all HID devices that are connected to your Mac. If you have the Vive Tracker connected via USB cable you’ll also see it listed as below:

There are a couple important values that we’re going to need from here, namely vendorId and productId, as these uniquely identify each device. node-hid uses these values to open a connection to the Vive Tracker.

With node-hid set up, let’s move onto the script that will send the actual feature reports to the Vive Tracker.

5. Download simple-tracker.js and move it into the same src directory as above.

simple-tracker.js will open a connection to the Vive Tracker and continuously send both a and feature report. Notice the 4th byte of the report is , that specifies the trigger down event.

6. Back in terminal, run . If everything goes right you should see terminal start to log the report. Occasionally when I run this script it causes an error — in that case try running it again. You can exit the script by pressing .

Your Vive Tracker should now be sending trigger down events to whichever PC has the paired dongle connected.|||

This setup will allow you to easily send button events, including analog trackpad and trigger values, through the Vive Tracker to a PC running Unity. I’ve written this tutorial for macOS Sierra (10…