I’m constantly looking for ways I can improve my workflows and development environment. Before I could even call myself a programmer, I was fascinated with making my terminal look cool, even if I didn’t exactly know how to use it yet! That’s stuck with me over the years and I’d love to share some of my recent favorites:

Prettier will automagically format your code so you don’t have to. Spend less time arguing styles with your peers so you can spend more time writing your app.

Installation for NeoVim and Vim is very straight forward:

Why I personally like this:

I’m no longer worried about making sure I’ve got the right formatting in place. I’m getting used to letting the computer control my source code so I can optimize time spent on app-related changes instead.

See more at https://github.com/prettier/prettier

Select a part of your code and open it in a new buffer! When you’re ready to go back to the original file, just save it and your isolated changes appear instantly!

Install using the Plugin Manager of your choice. I like Vim Plug.

The commands I use most often:

Why I personally like this:

Sometimes I can get frustrated working with very large files. I like to focus on one part of that if I can. It’s easier on the eyes to see 5–15 lines instead of 150.

See more at https://github.com/chrisbra/NrrwRgn

By pressing you can swap windows around your screen without having to redo your layout.

Install using the Plugin Manager of your choice. I like Vim Plug.

Why I personally like this:

When my ADD is in overdrive, I’ve got like 15 panes open. Sometimes I want to move stuff around without having to close it out and re-open it. This allows me to do just that.

See more at https://github.com/wesQ3/vim-windowswap

A linting plugin for Neovim and Vim 8. This will automatically hook into your linter’s configuration and show you errors in the gutter!

Install using the Plugin Manager of your choice. I like Vim Plug.

Why I personally like this:

Prettier handles your source code styling, but there’s still a lot eslint can do for you! Stuff like accessibility and removing unused modules and vars should still handled by eslint. Pair with a library like prettier-eslint by Kent C. Dodds & friends makes this an awesome part of your workflow!

See more at https://github.com/w0rp/ale

This will add an autocomplete dropdown for your files. It works asynchronously. You *will* need Neovim and Python 3 installed for this to work.

Before continuing with the next steps, verify that you need to. Open up Neovim and run  If the return value is 1, you don’t have to do anything else! Otherwise, keep following along:

Add the following to your Neovim init.vim file:

See more at https://github.com/Shougo/deoplete.nvim

Love flow-type and wish you could use autocompletion? Wojtek Czekalski *just* created an awesome library to make it happen!

See more at https://github.com/wokalski/autocomplete-flow

Like I said, I’m constantly looking for ways to improve my own flows. Is there something I’m missing? Would you love to learn more?

Feel free to tweet me or check out ALL my Vim plugins here.|||

An awesome set of Vim plugins that will help make your life easier when it comes to Javascript