"They're doing everything right. The form is perfect. It looks exactly the way it looked before. But it doesn't work."

Microservices are awesome. We know this because of all the success stories that are circulating lately. The news is full of such stories, of people taking large, monolithic codebases, breaking them up, adding HTTP APIs and enjoying all the benefits.

As with all fashionable practices, it starts out innocently enough, someone tries it, it works out very well for them, they present it in an eloquent way that outlines all the advantages of the new practice, and everyone is excited and eager to try it out. Soon, you have a deluge of articles saying how well it works, and how more people tried it with great results. What you don’t hear, though, is the cases where it didn’t work, simply because people aren’t as motivated to write about their failures.

Before I continue with the article, I want to clarify that I’m not saying that microservices don’t work. As with everything, there are advantages and disadvantages, so I’m going to get into a bit of detail about the latter, since the former have been so thoroughly covered.

You’ve probably heard the phrase “cargo cult” by now. Metaphorically, it refers to trying to succeed at something by doing things you’ve seen other successful people do, although these things are either unrelated to the success or insufficient on their own.

In this context, it refers to implementing microservices because all the cool kids are doing it, without regard to whether it’s appropriate, or without actually doing the things that led to microservices being successful in the first place. As with any other tool, it’s good to know the strengths and weaknesses with microservices before you use them.

As we see above, microservices have some pretty big advantages, but they also come with big disadvantages. In terms of project size, all sizes will benefit from the cleaner architecture and the smaller codebase per service, but all sizes will also be hit by the data segregation and complexity penalties.

Smaller projects will be hit particularly hard by the overhead, but large projects will benefit very much from the scalability and the independent deployments, as it will give them flexibility and a lot of leeway in adding processing power to their stack for serving increased workloads.

Given the above, it seems clear that smaller projects will benefit the least from a microservice architecture. However, they can still reap the benefits of the cleaner architecture and smaller codebases, right?

Not so fast. There’s nothing that prevents monoliths from reaping these benefits as well, while also enjoying all the benefits of a monolith. In fact, this is exactly how a well-architected monolith should be structured, as semi-independent modules or libraries, with clearly-defined interfaces. The problem is that this takes discipline, whereas a microservice-based architecture enforces this at the system level.

It seems reasonable, therefore, to ask yourself and your team this question: Can you trust yourself so little that you need to incur the (rather large) deployment, instrumentation and speed penalties to ensure separation of concerns? In most cases, there are other things you can do, such as implementing clear and strict interfaces for the modules to communicate with each other, create rules about what can and cannot be called outside of modules and how, and use tooling to help you stick to them.

To help you navigate the labyrinthine maze of questions and consideration when it comes to deciding whether you need microservices, I’ve created a helpful flowchart (you’re welcome). Here it is:

Don't start out with microservices, they're the complicated way that you don't need in the beginning.

To sum up, the biggest advantage a microservice architecture brings to the table that is hard to get with other approaches is scalability. Every other benefit can be had by a bit of discipline and a good development process. On top of that, by choosing a monolithic approach, you’ll reap the rewards of reliability, easy deployment and monitoring, and speed. As long as your monolith is properly architected, it will be easy to later on split the bottlenecks off into their own services, potentially rewriting them in some other language, if that’s what’s required.

Verily, verily, I say unto thee, do not start out with microservices just because the cool kids are doing it, they’re the complicated way that you don’t need in the beginning. Enjoy the ease of development and agility of deployment that a single new app brings, and, when your business has been proven and growing and you can’t find servers big enough for it, only then split out parts of your infrastructure into their own services, connected by HTTP or a messaging queue.

To take part in the ensuing flame war, you can find me on Twitter or just comment on this page, lest there be collateral damage.|||

