Recently there has been quite a bit of talk about WebAssembly, a new format for code for the web. It is a compile target for languages like C and Rust that enables us to write, and run, code from these languages in our browser.

In the interest of learning more about this technology (and to avoid writing more Javascript) let’s explore together and get our hands dirty!

Before we start please make sure you’re using the current (or developer) version of Firefox or Chrome. You can check out or and make sure related things are enabled.

WebAssembly (or wasm) describes an execution environment which browsers can implement within their Javascript Virtual Machines. It’s a way to run code in place of, or alongside, Javascript.

WebAssembly can be thought of as similar to asm.js. Indeed, we can use Emscripten compiler to target both.

Most existing documentation discusses how to build C, C++, or Rust into wasm, but there is nothing excluding languages like Ruby or Python from working as well.

We’ll need two things to get started with WebAssembly and Rust, assuming you already have a functional development environment otherwise (That is, you have , XCode, or the like installed.)

First, Rust. You can review here for a more long winded explanation of how to do this, or you can just run the following and accept the defaults:

Open a new terminal or run , then we’ll add the compile target via as well:

We can use this command to install other targets, found via , as well.

Next we need to set up Emscripten via . We’ll use the incoming version of Emscripten in order to get the best output. Note: This may take awhile (an hour!).

At this point Emscripten is installed. The last command will instruct us how to add the binaries to our path for permanent usage, or we can just for temporary fun.

At this point should report something similar to this:

In our first experiment we’ll compile some Rust code into wasm and have it run in the browser console. We’ll try a basic code sample to ensure things are working as we expect. We won’t try to do any crate importing, DOM manipulation, or network access yet, but that’s coming later!

Let’s create our project, we’ll use this same project for our future experiments as well. We need to set this to nightly (at least at the time or writing) to have our demos work.

Then we’ll put our first code sample into :

Running this normally yields what we would expect:

Now, let’s get the same thing in our browser! We can build our executable for the wasm target by using the flag.

created several files in for us. Of primary interest are the and files.

Why do we get both a and a ? Wasn’t the whole point of this to not use Javascript? Turns out we need some Javascript glue code to fetch, initialize, and configure it.

At this point we can’t really use the created files, since we don’t have a webpage to import them into! Let’s work on that. We can create a with the following content:

Next we need to set up some way to get the generated files from the folder into the folder. is a good solution for this, so let’s make a . (Makefiles require tabs, not spaces!)

Let’s test our generated code by running , browsing to , and opening the browser console.

In the browser console you should see:

In our first example we just used a basic enum and some print statements, nothing too exciting. Let’s do something more exciting and work with iterators.

Building this code again with we can navigate to the page again in our browser. This should output:

Excellent! So importing things from seems to work okay. How about other crates? Let’s try using . Add the following to the :

Then we can go and try to use it.

Building and visiting the page again we see the following output:

Okay that was simple! What about something a bit more complicated, like , which lets us serialize and deserialize various formats? This will be important for an application which needs to parse responses from APIs!

Changing the and the :

Building, and viewing it in the browser console yields:

It’s also possible to use generated wasm as a library and call the generated code from within Javascript. This has its own set of complications though.

WebAssembly only supports a limited number of value types:

Notice how this doesn’t include strings or other more satisfying types. That’s ok! We can still use a function called to define the parameters and expected return values of the wasm exported functions.

Writing this interaction code means that on the Rust side of things we have to treat it as though we’re interacting with C. This can make some things a bit complicated, on the bright side it means writing more FFI (foreign function interfaces) later will be much easier.

So, let’s write a basic function which returns a String from Rust into Javascript.

First thing you might notice is that we have a function which is blank. This is on purpose, we’re going to define that in Javascript! We’ll edit the to write a bit of new code for this purpose.

The final argument of is an array of argument types, which we don’t use in this case.

It’s also possible to call the function via but you’ll notice that it returns a pointer to a memory location, not a string.

There isn’t a tremendous amount of writing about this topic, the best resource I was able to find was in the ‘Interacting with code’ section of the Emscripten documentation.

The basic concept is that when goes and does its job it includes a file which we can add functions to via the flag. These functions can return values, or do things like run .

In order to do this we need to create a file containing the following:

If we build this and load the page we’ll get an alert, and see printed out on the console.

The good thing is it works. The bad thing is that it is rather complex to do. Hopefully it will get better in the future.

As we’ve discovered by now, the barrier between our compiled code and Javascript is a bit annoying. It’d be quite handy if we could just write everything in Rust and avoid dealing with Javascript except where absolutely needed.

Luckly for us, there is a crate called that was started. It allows for convienent DOM manipulation and provides some helpers for doing Javascript. It’s still a bit rough around the edges, but the foundations are there.

To get started, let’s add to our dependencies. Then we can use some slightly modified sample code from the repo:

Building our project you should see:

Due to the youth of the library there isn’t much in the way of examples or documentation, so be prepared to fumble around in the dark. For example, I discovered the key to getting some events and working was to use .

The future of Rust on the web is quite bright! Much of the foundations already exist, as we’ve seen in this article, and the Rust community is actively interested in improving the experience. The Rust repository even has an tag for issues!

There are currently discussions about moving from to the nascent LLVM wasm backend which you can track here. This may make significant parts of this article obselete, which is very exciting!

The ecosystem around wasm in Rust is still young, and now is a great time to get involved and help shape the future!|||

Articles primarily relating to science and technology.