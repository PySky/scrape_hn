How does Angular teach you to be a better a Software Engineer

Over the last couple of years I took part in many software engineering interviews both in role of interviewee but lately mostly as an interviewer. With my colleagues, we have seen many very talented frontend developers while searching for the right teammate to join our forces and help us building our product.

As a general rule (there are always exceptions), most of these guys had background in web design / website development and while you may argue that you can’t really get much closer to the frontend than that, there is a slight problem with this approach. On the other hand, people with previous backend experience who switched sides and focused on frontend proved to have an non obvious advantage.

Most of us can still remember our humble beginnings when we tried to code for the first time. Web development is a huge domain and there is just so much to learn. That magical feeling when you created your first HTML document and you opened it in a browser and voila, it displayed your content in all its glory!

Fortunately, this wasn’t the end of story… You ventured deeper and started to deal with the dark arts of CSS (and browser inconsistencies ) with the goal to make things pretty and shiny and user friendly and all those things we strive for. But there was a problem, it looked nice but it didn’t really do anything.

The next natural step was to discover Javascript and start copying and tweaking small snippets of code from the internet to achieve the desired results. As time went on you probably discovered libraries like jQuery and frameworks like Ember, Angular or React. You learned their APIs and slowly mastered craft we know as frontend development. You could actually bring ideas into being, create webapps and for a time it was good…

After some years you probably asked yourself questions like these:

The projects you are now contributing to changed too. Instead of websites and simple CMS solutions you are now working on the full blown web applications with their complexity, unique problems and challenges.

At this stage, your skills are tested from different angles than previously and you have to start to thinking about more advanced concepts on the higher level of abstraction. Stuff like application architecture, performance and maintainability. Welcome! You entered the domain of software engineering.

And the good news is that you’ll meet quite some unexpected allies on your journey to software engineering mastery.

Software engineering is an unique domain where people actually share their know-how with others without expectation of any monetary compensation. You can learn from work of some of the brightest minds in the industry by following their open source projects and blogs.

In fact, these open source project represent crystallized state of the art know-how of the whole community. All the best practices and approaches tested by hundreds of teams across the globe who employ these solutions in their own projects.

All the time invested and people thinking very hard about how to improve current processes to push it to the next level bring us many great frameworks and libraries to use and learn from.

While it is very useful to understand whole stack and you definitely should, (you know, the vanilla.js stuff, DOM and whatnot), people created so many frameworks for a reason. We don’t want to spend our time dealing with everything on the lowest level possible.

What we want is to abstract away everything unessential so that we get to a level where we can focus on what really matters - delivering useful features to our users - while still preserving flexibility to get our hands dirty when necessary. Modern frontend frameworks are actually doing pretty good job and operate on level of abstraction that is just right to achieve exactly that.

Opinionated framework like Angular (other frameworks too for that matter, remember React is a library) can teach you many of the industry’s best practices and help you to adopt mindset necessary to successfully implement nontrivial web applications.

In practice, successful projects have tendency to grow quite large, like really large, like unmaintainable humongous large. This usually results in all sorts of problems with maintainability and we’re usually standing in front of challenge on how to split this SPA monolith into manageable logically independent chunks of code.

Angular has a concept of Module which can group and hide (encapsulate) its internal parts while clearly defining interface with imports /exports for the outside world. This can significantly reduce the amount of code you have to read and understand before you can see a big picture of the particular codebase because you don’t have to deal with unnecessary details. It will make you ask yourself questions about what functionality should you expose when creating a new module.

For some arcane spell from Java interviews, for others their daily bread and butter. Dependency injection (DI) is an implementation of inversion of control design pattern which sounds all fancy and complicated. In fact it’s a rather simple concept which boils down to the way we approach creating of new instances of components and services in our applications.

This has many positive implications on testing and maintainability. For instance, it becomes easy to mock network or database communication in our tests. Angular takes this concept one step further with support of multiple nested DI containers called hierarchical injectors.

One of the most important features of Angular router is that it supports lazy-loading of your routes out of the box. This has some interesting consequences. The code of the module which is loaded when navigating to lazy loaded route is physically not present in a browser until that navigation happens. Obviously this lead to less network traffic and faster load times but it also results in cleaner architecture!

Absence of the module’s code forces you to think about how are your modules (and their components and services) depending on each other and this results in architecture with one way dependency tree where whole large chunks of code become completely independent from each other. This enhances maintainability and testability of whole application and lowers cognitive load needed to reason about some specific part. More engineers can work on a project without stepping on each others toes. It also makes you think twice about what is the essential shared functionality which has to be accessible by all other modules of your application and lives in application’s Core Module.

Most of the times you will realize that there is a clearly defined subset of components and services which are independent from a particular business feature and are reused across the multiple parts of your application.

In fact, this kind of architectural requirements is present in most of the projects and therefore easily anticipated. Angular documentation deals with the concept too under the name Shared Module.

I would say that the ultimate killer feature of Angular is in fact it’s online documentation with all the best practices and recipes on how to optimally tackle your challenges when building an application. Officially defined style guide can bring much needed harmony on bigger projects where many engineers are required to work on many different parts of the application in parallel!

Don’t forget to recommend and share this article if you found it helpful and check out other interesting front-end related posts like…

Follow me on Twitter to get notified about the newest blog posts and useful front-end stuff.|||

How do Angular features like lazy loading of routes make you think about application architecture and help you to be a better software engineer….