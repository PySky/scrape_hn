Before we begin one thing I want you to engrave onto your brain is the dot i.e. “.”

Notice the “.” at the end of “ok”, that will be required whenever you complete a statement. Recall from your english class whenever you complete a sentence you end it with a dot ! Erlang can also be seen as a set of sentences each of which ends with a “.” It will become more and more clear when and where to put “.” by the end of this tutorial. But as of now just remember the sentence analogy I gave you.

This is the first thing we will deal with. Following are a few variable types that you will need as of now(in erlang comments begin with %),

There are a lot of other exotic variable types in Erlang but since we are beginning with Erlang we will start with some common ground.

Now that you have knowledge about variables types you would want to store them somewhere and do stuff to them ! Following is how you declare a variable

Another thing about variables is that …. they are immutable ! …. there I said it. You can't change the value of a variable once you assign it to something. Don't freak out you will survive it and then you will embrace it !

If you see above, it gave an error when we try to reassign the variable NewVar to the value “Testing”. Another thing to notice is the error, it says that “no match of right hand side value “Testing” ”, meaning that it was trying to compare them ! But you didn't ask it compare them. This is what Erlang does, for a variable which has been assigned a value it will try to compare or match it if you try to reassign it, and for a variable which is not assigned or unbound it will assign it the value. Have a look below

Here I will introduce another variable type called “atom”. I know I said we will start with some common ground but atoms are really at heart of what we are going to do next. Following is how to write an atom.

Notice that it begins with a small letter, this is the reason why in Erlang variables begin with capital letters because if it begins with a small letter then it’s an atom. So what to do when you want to write an atom with a capital letter, you will never need it but since this question is going to pop up in your head this is how to do it,

Notice the single quote, strings are written with double quotes and atom with single quotes.

So you might be wondering what is this variable type atom ?? Remember atoms from your physics class, yeah ! the variable type atom has nothing to do with that ! This variable type atom has no moving parts, i.e. the helloworld is just helloworld you can't manipulate it. Basically you can't do anything with it !

So you might be wondering what can one do with atoms ! To that, I would say hold on and thou shall see.

Now that we are through with writing variables, let’s learn how to create a module and write your first Erlang program. Create a file named “hello_world.erl” and add the following to it,

Now we write a few more functions in our hello_world.erl module:

So now our complete module looks like as follows

Let’s compile and run our first module,

to compile your module use the above in-built function c(module_name). Following is how you can access your functions from the module (we use module_name:funtion_name()),

Till now we have written some basic functions, now we will write something more complicated,

The simplest way to put pattern matching is that things that look similar will match and things that don't will not … huhh obvious, right ! for eg.

The above two sentence are same so they will pattern match !

Recall that we used a get a match error when we re-assigned a variable. Have a look below

You see this is match error ! It was trying to pattern match it, now you understand why it fails because the only thing that will match is “I love Erlang”.

Now we see a little more evolved example of pattern match,

If you reassess the above we can extract values using pattern match. But what if you don't want to get all the values from the list ?

Here I have extracted only the first two values and the rest of the list is available in “C”. You can extract any amount of values and leave the rest for example:

Notice here “D” is just an empty list. Another thing to notice here is line 4, you get an error here because there are only 3 values in the list after which you will get an empty list in the fourth variable (as discussed) after which there is nothing to match so it gives an error.

You can apply pattern matching to other things like tuples and list of tuples or anything reasonable you can imagine.

You can pattern match in functions too ! But how is that helpful you might ask. Ok let see some examples,

there are quite a few things that happened here let’s see them one by one (here “true” and “false” are atoms, so yet another usage of atoms !)

When you call this function Erlang tries to execute the first clause but as you can see the only way the first clause gets executed is when the argument is zero i.e. 0 . Since the pattern match for the first clause fails it will try to execute the second clause which will match because “N” is unbound. So argument value is now stored in “N” and the function executes and returns the last statement which is atom “false”.

All in all pattern matching works on function arguments which are nothing but variables. So all the pattern matching examples discussed previously apply here. Let’s discuss some examples,

We use it as follows,

I think with this you will be able to get off your feet and be able to dive deeper into Erlang.

Lastly I will leave you with some examples of clauses you will find while you are learning Erlang (I promised to do so right !). I will basically rewrite the is_zero/1 function using these different types of clauses:

So the case statements has clauses and if statements have clauses.|||

Erlang has long been criticised for its unintuitive syntax which introduces a lot of threshold for a new learner. I won't argue or challenge this widespread belief but through this article I will try…