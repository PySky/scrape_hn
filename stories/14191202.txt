There are dozens of Vim references online, but most of them either go ninja straight away, or start basic and don’t go much deeper.

The goal of this tutorial is to take you through every stage of progression—from understanding the vim philosophy (which will stay with you forever), to surpassing your skill with your current editor, to becoming “one of those people”.

In short, we’re going to learn vim in a way that will stay with you for life.

I believe people should use for the following three reasons:

In short, I believe you should consider competence with the way you consider competence with your native language, or basic maths, etc. So much in technology starts with knowing your editor.

Kana the Wizard says there are five (5) levels to vim mastery:

Level 0: not knowing about vim Level 1: knows vim basics Level 2: knows visual mode Level 3: knows various motions Level 4: not needing visual mode

I don’t know about that, but I thought it was worth mentioning. Kana’s a wizard, after all. My approach to showing you is based around four main areas:

In other words, if you’re already up and running you should be able to jump to Getting Stuff Done and start knocking stuff out. If you’re already solid on those bits, then head over to the Advanced section to learn Kung Fu. And if you’re here to solve a specific “forgot how do do that one thing”, check out the Frequent Requests area.

So, setup, basic usage, ninja stuff, and then frequently asked tasks—and you basically just go where you need to within those.

As I said, I’m not looking to turn this into the uber-vim-config piece. There are many of those out there. This is a primer / tutorial designed to make you strong with vim’s concepts, and to build a long-term power with the tool. But we’ll talk through some configuration basics as part of that.

First, I recommend you go with a (mostly) self-managed vim install. I used to be into Janus, but didn’t like the fact that I wasn’t sure what it was doing exactly. My favorite configs are simple and elegant, and it should be the same with vim.

So, to that end, I use a straight directory under home, and a file as my configuration.

Firstly, the key for leaving insert mode is, in my opinion, rather antiquated. Vim is about efficiency, and it’s hardly efficient to leave the home keys if you don’t have to. So don’t.

[ NOTE: Some like to change the <ESC> key to , but I don’t find that as natural as rolling from to . ]

The leader is an activation key for shortcuts, and it’s quite powerful. So if you are going to do some shortcut with the letter “c”, for example, then you’d type whatever your leader key is followed by “c”.

The default leader ( ) key seems rather out of the way as well, so I like to remap the leader key to .

Now when you’re executing your nifty shortcuts that you’re about to learn, you can do so with either thumb, since your thumbs are always on the bar.

[ NOTE: Thanks to Adam Stankiewicz for the Space as Leader recommendation. ]

This one isn’t in your conf file, but it’s an important deviation from the defaults. The key on a keyboard is generally worthless to me, so I remap it to at an operating system level. This way my left pinky can simply slide to the left by one key to execute .

Then there are just a few basics that are recommended by most and make things much easier overall.

Remember, you can spend a lifetime optimizing your file; these are just a few things to get you started. For full configs check out my setup or look at the links in the references section.

[ NOTE: If you’re not already familiar and comfortable with plugins, skip this section for now and come back to it another time. ]

I have upgraded to Vim 8.x, which now supports native plugin management. You simply drop your plugins under:

Done and done. Now you can play with any plugins you want using the method above and they will be loaded automatically when Vim starts. I much prefer this to the third-party plugin management options we needed with 7.x

One thing I do with my Vim setup is I keep my entire directory within a repository stored here. What this does is give me the ability to go to a shiny new box and say and have my entire vim environment exactly the way I want it.

You may want to do the same.

Simply clone to your new box and then symlink to and you’re done.

Arguably the most brilliant thing about vim is that as you use it you begin to think in it. vim is set up to function like a language, complete with nouns, verbs, and adverbs.

Keep in mind that the terms I’m going to use here are not technically correct, but should help you understand better how vim works. Again, this guide is not meant to replace a full book or the help—it’s mean to help you get what doesn’t come easily from those types of resources.

Verbs are the actions we take, and they can be performed on nouns. Here are some examples:

Modifiers are used before nouns to describe the way in which you’re going to do something. Some examples:

In English, nouns are objects you do something to. They are objects. With vim it’s the same. Here are some vim nouns:

You can also use nouns as motions, meaning you can move around your content using them as the size of your jump. We’ll see examples of this below in the moving section.

Ok, so we have the various pieces, so how would you build a sentence using them? Well, just like English, you combine the verbs, modifiers, and nouns in (soon to be) intuitive ways.

For the notation below, just remember RGB (red, green, blue, which I still remember as “roy-gee-biv”) is VMN (verb, modifier, noun):

# Change inside sentence (delete the current one and enter insert mode)

# Change to open bracket (change the text from where you are to the next open bracket)

Remember, the “to” here was an open bracket, but it could have been anything. And the syntax for “to” was simply , so I could have said or for “delete to the next period”, or “copy to the next semicolon”.

Isn’t that beautiful? Using this thought process turns your text editing into an intuitive elegance, and like any other language the more you use it the more naturally it will come to you.

Now that we’ve handled some fundamentals, let’s get tangible and functional.

Some quick basics on working with your file.

[ NOTE: While works I tend to use , which doesn’t require the “:” and just seems faster to me. You can also use ]

One of the first things you need to be able to do with an editor is find text you’re looking for. has extremely powerful search capabilities, and we’ll talk about some of them now.

One of most basic and powerful ways to search in is to enter the “/” command, which takes you to the bottom of your window, and then type what you’re looking for and press .

That’ll light up all the hits, as seen below:

Once you’ve done your search, you can press “n” to go to the next instance of the result, or “N” to go to the previous one. You can also start by searching backward by using “?” instead of “/”.

One thing that’s brutally cool about is that from anywhere you can search for and jump to specific characters. In this article, for example, because I’m editing HTML, I can always jump to the “<” character to be at the end of the sentence.

# Jump forward and land on the < character

# Jump forward and land right before the < character

You can think of this as “find” for the first one, which lands right on it, and “to” for the second one, which lands right before it.

What’s really sick, though is that you can use these as nouns for commands. So just a second ago while editing this sentence I did:

# Change to the next “<“

This works for whatever character, e.g. periods, open brackets, parenthesis, regular letters—whatever. So you can just look forward in your text and jump to things or you can know that it’s somewhere up there and just got to it wherever it is.

[ NOTE: You can use the “;” to move forward to the next instance of what you searched for—whether you used “t” or “f” to search for it. Also, a comma “,” does the same, but backward. ]

Getting around within your text is critical to productivity. With this is both simple and elegant, as it leverages the core principal of vim as language that we talked about above. First, some basics.

We start with use of the home row. Typists are trained to keep their right hand on the j, k, l, and “;” keys, and this is the starting point for using as well.

This is a bit strange at first, and it just takes a few minutes of practice to get functional with, but it’ll quickly become so natural that you’ll be doing it in Microsoft Word and Outlook (it doesn’t work there, by the way).

So your right index and middle fingers move you up and down lines, and your index and ring fingers move you left and right by one character.

You can easily move within the line you’re on.

[ NOTE: and will repeat the previous and jumps. ]

You can also move by word:

When you use uppercase you ignore some delimiters within a string that may break it into two words.

This uppercasing of a given command having different and more powerful effects is something we’ll see frequently.

While you’re in normal mode it’s possible to jump back and forth between two places, which can be extremely handy.

So let’s package that all up into one place:

[ NOTE: I map my CAPSLOCK to so I can use it for these various -based movements, among other things. ]

Ok, so we’ve done a bunch of moving within our text; now let’s make some changes. The first thing to remember is that the motions will always be with us—they’re part of the language (they’re modifiers in the vocabulary above).

The first thing we need to grasp is the concept of modes. It’s a bit counterintuitive at first but it becomes second nature once you grok it. Most guides start with this bit, but I find it a bit obtuse to lead with, and I think the transition point from Normal to Insert is a great place to introduce it.

There are some other modes as well, but we won’t mess with them here as they tend to live outside primer territory.

Let’s recall our language: Verb, Modifier, Noun. So we’re assuming we’re starting in Normal Mode, and we’re going to switch into Insert Mode in order to change something.

Our verb is going to start us off, and we have a few options. We can change (c), insert (i), or append (a), and we can do variations on these, as seen below.

Let’s start with the options here.

# Go to the beginning of the line and enter insert mode

# Start typing right after the cursor

As you can see, there are lots of ways to start entering text. There are also some shortcuts (shown above as well) for doing multiple things at once, such as deletion and entering Insert Mode.

# Delete the line from where you’re at, and enter insert mode

# Delete the entire line you’re on, and enter insert mode

You can change the case of text using the tilde ( ) command. It works as you’d imagine—either on the letter under the cursor, or on a selection.

It’s sometimes helpful to format text quickly, such as paragraphs, and this can easily be done with the following command:

works based on your setting, which means it’ll true up whatever you invoke it on to be nice and neat within those boundaries.

[ NOTE: The “ap” piece is the standard “around paragraph” text object. ]

Now that we know how to change text, let’s see how to do straight deletes. As you’re probably getting now, it’s very similar—just a different action to start things off.

You can’t have a text editor without undo and redo. As you’ve probably noticed, does its best to make the keys for the actions feel intuitive, and undo and redo are not exceptions.

[ NOTE: Remember that you should have already remapped your to so that you can do this quickly with your left pinky. ]

Both commands can be used repeatedly, until you either go all the way back to the last save, or all the way forward to your current state.

One of the most powerful commands in all of is the period “.”, which seems strange, right? Well, the period “.” allows you to do something brilliant—it lets you repeat whatever it is that you just did.

Many tasks you do will make a lot of sense to repeat. Going into insert mode and adding some text, for example. You can do it once and then just move around and add it again with just the “.” Here are a couple of other examples.

Whoa. And wait until you see it combined with Visual Mode.

Another text editor essential is being able to quickly copy and paste text, and is masterful at it.

[ NOTE: Another really powerful repeat command is , which repeates your last command. ]

does copying a bit different than one might expect. The command isn’t , as one might expect. If you’ll remember, is already taken for “change”. instead uses for “yank” as it’s copy command and shortcut.

Remember, just like with any other copy you’re not messing with the source text—you’re just making another…copy…at the destination.

Cutting text is simple: it’s the same as deleting. So whatever syntax you’re using for that, you’re actually just pulling that deleted text into a buffer and preparing it to be pasted.

Pasting is fairly intuitive—it uses the command as its base. So, if you delete a line using , you can paste it back using .

One thing to remember about pasting is that it generally starts right after your cursor, and either pastes characters/words or lines or columns—based on what you copied (yanked). Also remember that you can undo any paste with the universal undo command “ “.

This is a quick trick you can use to swap the position of two lines of text. The first part deletes the line you’re on, and the second part puts it back above where it used to be.

We’d be in pretty bad shape if we couldn’t spellcheck, and does it quite well. First we need to set the option within our conf file.

# Somewhere in your

When you have enabled within your conf file, misspelled words are automatically underlined for you. You can also enable or disable this by running and .

Either way, once you’ve got some misspellings you can then advance through them and take action using the following commands:

# Go to the next misspelled word

# Go to the last misspelled word

# When on a misspelled word, get some suggestions

I like to add a couple of shortcuts to my file related to spelling. The first just makes it easy to “fix” something:

This one gets rid of spellchecking when I don’t want to see it—like when I’m in creative mode. I can then re-toggle it with the same command.

Another powerful feature of is its ability to do powerful substitutions. They’re done by specifying what you’re looking for first, then what you’re changing it to, then the scope of the change.

The basic setup is the

# Change “foo” to “bar” on every line

# Change “foo” to “bar” on just the current line

[ NOTE: Notice the lack of the before the “s” ]

There are many other options, but these are the basics.

Brilliant. So we’ve covered a number of basics that any text editor should have, and how handles those tasks. Now let’s look at some more advanced stuff—keeping in mind that this is advanced for a primer, not for Kana the Wizard.

We talked a bit ago about being able to repeat things quickly using the period “.”. Well, certain types of commands are better for this than others, and it’s important to know the difference.

In general, the idea with repetition using the period “.” (or as Drew Neil calls it—the dot command) is that you want to have a discreet movement action combined with a repeatable command captured in the “.”.

So let’s say that you’re adding a bit of text to the end of multiple lines, but you’re only doing it where the line contains a certain string. You can accomplish that like so:

Now, whenever you press the “n” key you’ll teleport to the next instance of “delinquent”. So, starting at the first one, we’re going to append some text.

# Append some text to the end of the line

Ok, so we’ve done that once now. But there are 12 other places it needs to be done. The “.” allows us to simply re-execute that last command, and because we also have a search saved we can combine them.

# Go to the next instance and append the text to the line

Remember, the idea is to ideally combine a motion with the stored command, so you can jump around and re-execute it as desired.

Text Objects are truly spectacular. They allow you to perform actions (verbs) against more complex targets (nouns). So, rather than selecting a word and deleting it, or going to the beginning of a sentence and deleting it, you can instead perform actions on these…objects…from wherever you are within them.

Hard to explain; let me give you some examples.

Let’s look first at some word-based objects.

These are targets (nouns), so we can delete against them, change against them, etc.

[ NOTE: The difference between “inside” and “around” an object is whether it gets the spaces next to it as well. ]

Those work pretty much the same as with word objects, so imagine you’re knee deep into a sentence that you decide suddenly you hate. Instead of moving to the beginning of it and figuring out how to delete to the end, you can simply:

This nukes the entire sentence and puts you in Insert Mode at the beginning of your new one.

There are also a number of other object types, which I’ll mention briefly.

I use these constantly when editing code or HTML. Remember the key is that you don’t even have to be inside the section in question; you just tell it and it’ll delete everything inside the double quotes and drop you inside them in Insert Mode. It’s wicked cool.

The same works for a few other types of items, including parenthesis, brackets, braces, and tags (think HTML).

Think about editing an HTML link, where there is the URL within double quotes, and then the link text within tags; this is handled elegantly by by doing two commands: and then .

Here a list of the objects for your reference:

FWIW, the ones I use the most are word, double quote, and tag.

Many tricks of the wizard can attract attention, but few create as many pleasurable expletives as skillful use of Visual Mode.

Perhaps the best thing to say about Visual Mode is that it magnifies the power of everything you’ve learned so far. It does this by allowing you to apply commands to the text that’s currently highlighted.

So let’s start with how to enter Visual Mode and light up some text. You enter Visual Mode with the “ ” key, and there are three different options.

Often time you’ll be inside some content that is surrounded on both sides by something, such as . You can visually select these things by issuing commands like these:

You can also add a number to that to select two levels out (if you’re inside a nested set.

# Select everything inside the second tier braces

[ NOTE: You can also use to select around instead of inside. Remember not to burden your mind with these. They’re the same exact nouns and verbs we know from everywhere else. ]

Starting with character-based (using to enter from Normal Mode), you can use this to select characters, sets of characters, words, etc. I use this far less frequently than line-based ( ), but I still use it often.

The main thing to understand here is that now that you’re in Visual Mode, your motions are changing what’s being highlighted. This means you can do motions like or to expand your selection. The highlighted area is then going to become the target for an action.

You enter this mode by pressing the key from Normal Mode, and from here you then take the actions we’ll discuss in a moment.

Another option is to select text vertically, which is great for pulling columns of data.

It’s really your choice, but the most common operations are simply deletion, copy, and paste. Just think of it as highlighting with your mouse—back when you used such things.

# Enter visual mode, select two more words of text, and copy them

Then you simply go where you want to put them and type to paste them there.

Or you can do some line-based action.

# Enter line-based visual mode and delete a couple of lines below

You can also use text objects, which is seriously sick.

# Visually select an entire paragraph then paste it down below

Don’t panic about how big that command is. Remember, it’s language. You can rattle off:

…without any problem, and it’s the same with:

Another wicked thing you can do with Visual Mode is apply the command to execute a stored action against the selection. Let’s take the text below for example.

If we want to prepend a colon in front of every line, you can simply put one in front of foo, visually select all the lines below it, and then hit the key.

[ NOTE: One thing that makes this possible is having in my . ]

Not feeling it yet? How about this: your file is 60,000 lines, each with a line like the above, and you have to append the “:” to each of them. What do you do?

# Add the colon to the whole file

Ease up, killer. Here are the steps:

Done. For the entire file. And remember, you’re not going to have to remember to type “ALPHABET AMPERSAND GOBBLYGOOK 25″—no, it’s just going to come to you, like falling off a bike. Trust me.

People think macros are scary. They’re really not. They really come down to one thing: recording EVERYTHING you do and then doing it again when you replay. Here’s a simple reference:

Simple, right? You can have multiple macros stored in multiple registers, e.g. “a”, “b”, “c”, whatever. And then you just play them back with or or whatever.

You may be asking:

Great question, and the answer is complexity. Macros can do just about anything you can do, so check out this workflow:

That’s a lot of work, and if your file is 60K lines like the last one, it’s going to be somewhat painful. Try doing that in Microsof Word, for example.

With , however, you simply perform those actions once and then replay it on each line.

[ NOTE: You can actually replay a macro on a visual selection by executing (or whatever your macro register is) which will temporarily switch you into normal mode, for each line, and then execute the macro there. ]

Let’s go through a few tasks that get asked about a lot and/or just save a considerable amount of time.

Based on the type of file you’re in, you might have some line drama. Here’s how to delete those iannoying characters from the end of your lines.

# Delete the characters from the end of files

[ NOTE: To show the current filetype, run or put into your ]

Using the Surround Plugin you can do some seriously epic stuff in terms of wrapping text with markup.

So that’s it then. There are two things I’d like one to come away with from this guide:

If you are able to become even partially comfortable with the basics covered here I think you will simply enjoy text more—and that’s not a minor thing. The more comfortable you are dealing with text, the more comfortable you’ll be dealing with ideas, and I think that’s nothing less than epic.

More than anything else, this is why you should be competent with your text editor. You want to feel native and powerful when capturing ideas—not hobbled or encumbered.

Or you can sweep all that rubbish aside and just be one of those people who make others smile orgasmically when they watch you edit a config file—either way, I hope you found this helpful.

[ If you liked this, check out my other technical primers here. ]|||

A Vim tutorial and primer that takes you from competent to masterful in a way that cannot be forgotten. Learn Vim as language instead of as syntax.