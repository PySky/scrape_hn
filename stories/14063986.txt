Ghost is an awesome project. For me, its simplicity and laser-focus on content publishing has made it my go-to platform when a project requires an easy way for users to publish content.

This article walks through building a Ghost blog from scratch with nothing installed other than Nanobox, then deploying that blog to a live environment.

If you don't have it installed already, go ahead and create a Nanobox account (it's free) and download Nanobox (it's also free).

The Ghost Quickstart is preconfigured with everything discussed in this article. If you're just looking to get a Ghost blog up and running quickly, feel free to use the quickstart, then jump down to the "Deploy to Production" section of this article.

Create a new directory for your Ghost project and into it. The name of the directory is completely up to you, but for the purposes of this tutorial, I'm going to use .

Nanobox uses the to build and prepare your app's environment. Ghost is a Node.js project, so we'll want to use Nanobox's Node.js engine, which will provide the necessary Node.js runtime. Ghost also requires at least Node.js v6.9.

In the root of your project, create a file named with the following:

Using the in your project, Nanobox will automatically create a local, virtual Node.js development environment. Run the following from the root of your project:

This will create a virtual environment on your local machine, install Node.js and its dependencies, then drop you into an interactive console inside the virtual environment.

Yarn is a drop-in replacement for and is quickly becoming the dependency manager of choice for Node.js projects. For this tutorial, we'll use .

This will initiate a new Node.js project by creating a in the working directory and walk through some interactive prompts gathering information about the project. This information is stored in your which is also be used to define your project's dependencies.

I recommend installing Ghost as a Node module rather than simply downloading the Ghost source code and using that for the project. Ghost, when loaded as a module, is much easier to keep up to date ( will download and install the newest Ghost version). There are a few things you'll need to add to get Ghost running as a module, but we'll cover these next.

Use to add the current stable version of Ghost (v0.11.7 at the time of writing this article).

Ghost gets installed with a that can be used as a template for configuring Ghost. Ghost also comes with a pre-populated directory that includes the default "Casper" theme as well as other necessary directories. Since we installed Ghost as a Node module, we need to copy the and the directory inside to the root of your project.

Since Ghost is going to run out of the directory, we need to tell it to use the in the root of the project rather than in the module. Create a file named in the root of your project with the following:

Ghost pulls its configuration from the in the root of your project. There are a few updates you'll need to make to get Ghost running properly within the Nanobox context.

By default, Ghost listens on , but Nanobox requires apps to listen on . Update the config in both the and sections of your to the to listen on .

Ghost uses the config to determine where themes, images, apps, and possibly data are stored. Since Ghost is loaded as a module, by default, it will try to find these things in the directory. We need to update the to point Ghost to the directory in the project rather than the module.

Add the following to both the and sections of your :

Ghost uses the setting in the to build links for your site. Update the setting in the section of your to be whatever domain you're going to use in production.

Nanobox allows you to easily add and use DNS aliases when working locally. For the purposes of this tutorial, I'll use , but you can use whatever you'd like. This domain will be used later. Update the in the section of your to the following:

Be sure to include the port.

Allowing Ghost to send mail while in development is optional, but in production, email is used to add new team members to the app. Be sure to configure the settings in your with the credentials provided by your SMTP provider.

You have some options when it comes to what database to use with Ghost. By default, Ghost uses SQLite, but I prefer to use Postgres.

Nanobox automatically creates application components, such as a database or web server, included in your . To include a Postgres database in your app, add the following to your .

In order for Ghost to communicate with Postgres, you need to include the node module in your project. From inside your Nanobox console, run:

Nanobox automatically generates your database's connection credentials as well as environment variables for each. Update the config in both the and sections of your with the following:

For the sake of context-clarity, go ahead and exit out of your Nanobox console back to your OS's native console before continuing.

Ok, now we're ready to run Ghost locally using Nanobox. We'll first add a DNS alias which can be used to easily access the Ghost app from a browser (Be sure to use the development url you added earlier). Then we'll use Nanobox to run Ghost with the command.

Nanobox will spin up the virtualized local development environment, load all your app's dependencies, detect/provision/configure your Postgres database, then start Ghost using the development configuration.

You'll be able to access the app at ghost.dev:2368 

 (or whatever domain you've configured for development)

Your local codebase is mounted into your virtual development environment, so as you make changes to the code, they'll be reflected in the running app.

With Ghost running locally, you're ready to put the final touches on it before using Nanobox to deploy it to a live infrastructure.

It's generally recommended to run Ghost behind some type of proxy rather than connecting it directly to the public network. Nginx is a powerful, trusted, open-source web server that makes for a great proxy. To include the package in your project, add the following to the section of your :

In the root of your project, create a new directory and add an with the following:

This will be used to start the Nginx proxy in production.

Ghost allows you to upload images into a production app, requiring to be writable. In order for written content to persist between deploys, you need to add a persistent storage service that 1) will persist between deploys and 2) will act as a shared writable filesystem when running Ghost in a multi-node web cluster.

Nanobox makes this easy. Add the following to your :

This storage component will act as a persistent, shared, writable filesystem. Anything written to it will persist between deploys and be shared between nodes in a multi-node cluster. Configuring your app to write to this component is done in your web component config.

Web components provide publicly accessible web server(s) for your app in production. Add the following to your :

If you've followed this tutorial step-by-step up to this point, your should look something like this:

Ok, you're ready to deploy your Ghost app to live servers using Nanobox.

Go to your Nanobox dashboard and launch a new app. If you haven't already, you will need to configure a provider. Nanobox will deploy your app to your cloud provider of choice.

Once the app is created, use your app-name and the following command to add it as a remote to your local project:

With a live remote ready, go ahead and deploy:

Nanobox will package up your app's code and runtime, upload it to your cloud provider, then provision and start your app in your production environment on live servers.

With your app in production, there are a few things you might want to do next. The following links to Nanobox documentation will help.|||

How to use Nanobox to build and configure a Ghost blog from scratch, then deploy it to a scalable production environment.