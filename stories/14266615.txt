Data reporting is the art of transforming loads of data—sometimes not very well-structured data—into artifacts that people can easily understand, utilize, and act upon, from beautiful visualizations to CSV files and beyond. Reporting can be a challenge both technologically and organizationally because it requires you to craft these streamlined data interfaces for a variety of audiences, from end users to project managers to BI analysts.1

If you’re using relational databases—PostgreSQL, Amazon Redshift, MySQL, Microsoft SQL Server, or something else—we strongly recommend that you maintain a reporting layer within your database(s)—even if you opt to use a reporting platform like Reflect.

An extremely powerful way to build an in-database reporting layer is to create views. Views are an abstraction over SQL data that can greatly simplify queries and thus enhance the accessibility of your data across your organization.

Views are powerful data constructs because they enable you to interact with what are essentially virtual tables that wrangle the data in your “real” tables into whatever structure you’d like. Creating a view can transform a fairly unwieldy query like this…

…into a much more user-friendly query like this:

All you have to do is wrap the statement in a statement:

A great thing about views is that they incur little to no performance penalty compared to the queries that they implicitly wrap. So what exactly is the point? If the queries are effectively the same, why use them?

The answer becomes more clear if you imagine that query as one of hundreds, or even thousands, commonly used on an analytics team. Then imagine the difference in institutional memory and cognitive load required by the original query versus the and multiply that by the number of complex queries in your org. Using views may just lessen a huge portion of that load.

Let’s say that you’re running a company that publishes both books and pamphlets, and you store all your data in MySQL. You want to store info in two separate tables structured like this:

Now let’s say that you wanted to be able to easily assemble a list of all authors, not just authors of either books or pamphlets. You could run this query:

That query would yield a single list of authors:

Or you could create a view and never have to repeat that statement again:

So why not just use that statement again and again in your database? Well, usually you can, but remember that the purpose of a reporting layer is to make data more accessible to others. If everyone on your team can run rather than the much longer statement above,2 then you’ve just scored a big complexity win at very little cost.

So what happens if you want to further filter those results? One option is to modify the view. But what if you want to keep that view? The answer here is nested views. Since views act just like tables when you query them, you can create views that rely on other views.

Let’s say that you wanted to create a view that queries the view but includes only known authors:

Now, anyone in the publishing company with the right database creds can get a list of known authors using a simple query. They don’t need to know anything about how that result was obtained, which filters were applied, etc. Opacity has its downsides, of course, because you may not always want to obscure the logic of a query. But in many cases that will matter a lot less than producing a more user-friendly data interface.

These examples are extremely simple and may not make a super-compelling case for using views over plain old queries. But imagine making these queries just a little bit more complex—a handful of clauses, a smattering of s, a couple subqueries to boot, maybe some type casting, all of it spread across 25 tables—and the benefit becomes clear very quickly.

Thus far, I’ve discussed views as virtual tables. When you run a query against a view, you’re basically just running a query against data that lives in regular old tables. If you want to actually store views in tables, on disk, you can create materialized views. 



 A few databases support materialized views directly, such as Oracle and PostgreSQL. In others, such as Redshift, you need to use workarounds to create something like them (for example periodically triggering a operation). 



 We won’t cover materialized views in depth here, but the primary advantage of using them comes down to performance. Querying a “real” table rather than a virtual table is pretty much always the way to go if that’s your concern. So if you want to use views but have concerns about performance, you should really explore materialized views if you have access to database technology that supports them (or if you’re willing to explore workarounds).

There really aren’t any major, deal-breaking downsides to using views, at least from a technological perspective. But there are two things that you should bear in mind:

I think that there are two big takeaways here:

That’s it for part 1. In part 2 I’ll go over using database views with Reflect’s reporting platform. Until next time!

1 In fact, you may not always know in advance who will be consuming your data, which makes providing a sane, well-defined reporting system all the more important.

2 It’s also worth bearing in mind that a good reporting layer will make data more usable by people who may be less technical or less comfortable writing SQL. Enabling people to get what they need using simpler queries and tools means less organizational and technical debt.|||

Taming organizational complexity with easy-to-implement abstractions