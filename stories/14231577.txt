I’m currently working on a side project called consolecowboys. It’s a jobs board aimed at backend and DevOps engineers. A friend of mine had created a similar board for designers. It looks sleek and polished but most importantly, he’s actually making money off of it by using stripe to handle payments.

I started looking for articles on how to achieve the same functionality in Django (my friend used Node.js) and couldn’t find any that was good. I also didn’t want to use a pre-made library because I’m a Nerd like that. So in this post, I will be sharing with you my step by step guide on how to integrate stripe with your Django app to accept one off payments.

Grab a cuppa and let’s get to it.

If you don’t already have an account with stripe, go ahead and sign up for one (obviously). Once you’re logged in, you’ll be able to find your API keys in the dashboard under the API section. Copy both your secret and publishable test keys.

In your file, add the following lines:

takes two arguments: the environment variable it’s supposed to fetch and an optional fallback value in case the environment variable does not exist or is .

Please note that you want to keep your API keys secret. In production, make sure to set your live api keys to these two environment variables. Because we’re in sandbox (dev) mode, we don’t need to set the environment variables therefore our test keys will be used instead.

Assuming you have a route, in your views.py add the following:

In your template, copy and paste the form found under the checkout section of the stripe docs.

Notice we passed the stripe to the data-key attribute, by default, it will be populated with your actual public key, but I just find it better to use the variable instead.

We also set the action attribute of the form to which we’ll create in the next step. This route will process the checkout logic.

What’s actually happening is this: When a user submits the form (ie: pays), their bank account information is sent to stripe for processing. If the payment is accepted, stripe will issue a POST request to the endpoint specified in the action attribute of the form. The idea is to then capture that token and use it to charge the user’s card.

First we need to create a route in our file:

Then in your create the associated view function where we will charge the user and save the new object.

We process the payment like so:

If you get an error, make sure to install the stripe module via pip:

In your app, go ahead and visit the payment form page at /payment-form, you should see a blue button that reads “pay with card”. Clicking on it will display the stipe payment form, you can test it by entering any fake email address, and the test card info that can be found in the stripe docs.

After your test payments are validated they will show up in your stripe dashboard so you can review them.

Hopefully this was clear enough and easy to follow, you can now accept one time payments on your django app. If you have any questions or comments, feel free to ping me on Twitter.|||

I am a full stack developer located in Paris, France.  Specialised in Node.js and Python