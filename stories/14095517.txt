We all know about the glorious product presentations by some famous people — they are fascinating and inspiring. What we do not know is that there is always that one developer at the back who is giggling about the bug that only they understand.

The thing about software — and their developers — is that they are almost always flawed. Even the technology that we are most comfortable using ends up giving us a few hard days.

Over the course of the last couple of decades, we have built software upon software that does things that most of us cannot understand. Our generation has built our fancy technologies on top of a legacy that we have mostly forgotten. We could write up a website in minutes, but we spend hours trying to understand the problem when it happens not to be working.

Make no mistake, I do not mean to criticize all who write code. Software is complicated, and we would never be able to achieve as much as we have without making abstract assumptions and stealing ideas. An architecture is never asked to rebuild the structure of a house without changing the appearance in a day — and yet that is expected of those who engineer software. We have to move fast, often break things, and most importantly: deliver. Yet we are here, and that means that story is still unfinished.

Writing sustainable software, however, takes more than just long hours of thumping on your keyboard. It involves a lot of talking, a lot of researching, and far more confidence than arrogance.

Our machine learning products Marlowe and Goodwin are used by multiple customers with distinct needs. Therefore, as software engineers, it is our job to design systems that are generalized for all, and yet versatile enough to meet distinct customer needs.

While we published the Relink manifesto last year, here is a sneak peek of the practices we try to follow.

Often the code we seek out to write is not the code that we want in the end. Unless you write a lot of code, this problem is more prominent than most people would expect.

It is not just the functional needs that could potentially change, but once the pieces need to fit into the bigger picture, things tend to get ugly sometimes. It is very important to expect change and be prepared for it. To make sure that you are ready, it is good to plan possible delays into your calendar.

A good way to prevent unnecessary change is to focus on the system, and then go top-down into details. That way you know when something does not make sense, so you can change it early. It is then also important to iterate backwards to know if what you are moving towards is also feasible.

There are many tools and techniques out there for developers that do the same thing. It is very easy to move to the next funky buzzword when your current tool set cannot give you your solution. The problem with that approach, however, is that there will always be a new buzzword, and every tool set you use will not be perfect.

While it is very important to move fast as a startup, it is equally important that you do not end up staying right where you are by running around in all four directions. Using too many fancy tools without understanding either in depth has long term costs that we should try to avoid.

In code there is a famous principle called DRY (Don’t Repeat Yourself). What it means is that you should not write redundant code multiple times. While this works really well for code, the same idea can also be applied to other areas of process management.

At Relink, when we find ourselves doing the same thing too frequently, we try to think of a way to generalize and automate it, so we can save more of our own time - and instead give the tasks to a computer. This saves a lot of time in the long run, and also prevents against human error.

Just like the idea of DRY, there is also a famous idea regarding separation of concerns. Making a software - or a piece of it - do too many things in one place makes things more complicated than necessary. This leads to eventual failure that is hard to diagnose and even harder to fix.

The same goes for people. In long development cycles, it is important to delegate the responsibilities properly so people don’t end up stepping on each others’ toes. Our solution, right now, is to have a weekly planning session and clear out the basics, so we have time for more important things.

No matter how simple your use case might be, if you are building software for production, it is extremely important to note that eventually you will reach a point where you need to make it work for bigger data and a potentially larger audience.

We try to make our software follow the principles of distributed computing early on, so that we do not have to worry about scaling out every time a new partner joins the club.

This does not mean that we should overcomplicate simple things, but it never hurts to be prepared for for too many clients when that is exactly what you want to achieve.

I hope these techniques help you focus. Remember we can have results or excuses. Not both.|||

It's not easy writing sustainable code — many hours and dreams go into it. At Relink, we try to stick to some of the best industry standards to ensure our…