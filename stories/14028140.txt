First, install Yeoman and generator-create-redux-app using npm ( Youâ€™ll need to have Node >= 4 on your machine node.js).

Then generate your new project:

Once the installation is done, you can run some commands inside the project folder:

Runs the app in development mode.

 Open http://localhost:3000 to view it in the browser.

The page will reload if you make edits.

 You will see the build errors and lint warnings in the console.

Runs the test watcher in an interactive mode.

 By default, runs tests related to files changes since the last commit.

Builds the app for production to the folder.

 It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.

 Your app is ready to be deployed!

Allows you to auto-generate boilerplate code for common parts of your application, specifically s and s.

create-redux-app override create-redux-app folder structure. Once the generator runs your project folders should look like this:

For the project to build, these files must exist with exact filenames:

You can delete or rename the other files.

You may create subdirectories inside . For faster rebuilds, only files inside are processed by Webpack.

 You need to put any JS and CSS files inside , or Webpack wonâ€™t see them.

Only files inside can be used from .

 Read instructions below for using assets from JavaScript and HTML.

You can, however, create more top-level directories.

 They will not be included in the production build so you can use them for things like documentation.

Create Redux App use Redux DevTools Extension. It provides access to the most popular monitors, is easy to configure and to filter actions.

To Export Components or Containers there is an file in each root folder so you have to export it there first in order to import outside the root folder.

To import Components or Containers doit like follow:

We use Husky to create Git Hooks. There is a pre commit hook than run eslint to prevent bad commits. You can add more by editing the package.json.



And delete the scripts in

You can add/remove rules or even extend plugins if you want. We extend react-app ESLint rules.

The best option for routing is React Router specifically its new version for the web react-router-dom. 

 is the starter point of the app, where all the routes are specified and render the containers and components. Specify here all your routes, redirects, transitions, etc.

styled-components allow you to write actual CSS code in your JavaScript to style your components, removing the mapping between components and styles.

See the official documentation for more information!

This creates two react components, and :

You render them like so:

For further examples see the official documentation.

Can I use Sass with this boilerplate? yes, although we advise against it and do not support this. We selected over Sass because its approach is more powerful: instead of trying to give a styling language programmatic abilities, it pulls logic and configuration out into JS where we believe those features belong.

If you really still want (or need) to use Sass then...

Allows you to auto-generate boilerplate code for common parts of your application, specifically s and s. You can also run to skip the first selection. (e.g. ). This generators are outside yeoman so you can change them to fit your necessities, for this just go to , see plop documentation for more information.

To prevent useless renders in (Redux) connected components, you must also make sure that the mapStateToProps function doesnâ€™t return new objects each time it is called. The problem is that each time mapStateToProps runs, it returns a new object, even if the underlying objects didnâ€™t change. As a consequence, the component re renders every time something in the state changesâ€Šâ€”â€Šwhile id should only render if the part of the state we are requiring change.



Reselect solves this problem by using memoization. Instead of computing the props directly in mapStateToProps, you use a selector from reselect, which returns the same output if the input didnâ€™t change.

For further examples see the official documentation.

Note

 If you uninstall reselect, generating a container with a selector feature from the command line ( ) will throw an error.

Because a need of , sometime you have to transform a simple, functional component to a class-based component. This adds more lines of code, and every line of code has a costâ€Šâ€”â€Što write, to debug, and to maintain. Fortunately, you can implement the logic thanks to recompose. Itâ€™s a functional utility belt for React, providing for instance the HOC. Now instead of export the component we can do an this will be pure without transforming to a class-based component.

Component will only update for specific keys.

Be more specific and target only the props that I know may change

Make your component pure even if is not a class based component

Note

 If you uninstall recompose, generating a pure component from the command line ( ) will throw an error.

If you adopt Flux standard action (FSA) and you will, right ?, then you can also consider some libraries that are designed to work with it. redux-actions is the most popular. Then just export the function.

You can find the most recent version of the create-react-app guide here.|||

generator-create-redux-app - Add Redux âš›, styled-components ðŸ’… and other useful libraries like generators ðŸ”§ in top of create-react-app