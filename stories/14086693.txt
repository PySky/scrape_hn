A friend posted the following pipeline to find all the firmware files for a set of Linux kernel modules:



As an exercise in systems programming, I was curious how easily it could be recreated in Rust, and as a bonus, run in parallel on multiple modules using rayon. After doing so, I thought others might find it interesting as well.

Rust doesn't currently have bindings to the libkmod library, but we can recreate this particular bit of its functionality easily. Linux kernel modules store module information in the ELF section , as a series of null-terminated strings, each of the form . Firmware files (defined in kernel modules with the macro) appear as strings with the key and a filename as the value.

As a first pass, I wrote the following code to parse kernel modules (sequentially):

This worked, and already matched the performance of the pipeline invoking the C modinfo implementation.

Next, I tried to use rayon to parallelize this. WalkDir doesn't implement rayon's parallel iterator traits, so calling on it directly doesn't work. So, I tried collecting the directory walk results into a vector and processing that in parallel:

This also worked, but didn't produce any speedup.

I also wanted to try more parallelism, and in particular to run the directory walk and the processing in parallel. I dropped by the rayon Gitter channel and asked about how to handle iterators that don't support the parallel iterator traits. @nikomatsakis suggested that he had plans to implement a general-purpose iter-to-par-iter adapter that would allow using rayon on any iterator. But in the meantime, he explained how to manually spawn work in rayon's thread pool using the scope API, leading to the last version:

With the additional parallelism, this ran consistently 10-20% faster on my machine. (Profiling suggests that the directory walk takes the majority of the time, and the printing takes the rest, so any further speedup would likely involve making the directory walk itself parallel and eliminating the printing in favor of directly performing any subsequent processing.)|||

A friend posted the following pipeline to find all the firmware files for a set of Linux kernel modules:  

 find /lib/modules/4.9.0-2-amd64/ -name &#39;*.ko&#39; | xargs modinfo -F firmware &gt; /dev/null

As an exercise in system&hellip;