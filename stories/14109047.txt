If you got to see my talk about Human Driven Development at WDCNZ or LCA, you’ll remember that one of the concepts that I brought up was the idea of “That Guy”, the team member that has great technical knowledge but no one really wants to talk to.

This idea was one of the parts of that talk that resonated really well with a lot of people, where a lot of people could identify where they had had to work with That Guy, and where they had unfortunately ended up as That Guy.

I used an example of an architect from the late 1800s, and I’d like to talk more about more variants of That Guy within the tech industry, how it happens and why have a problem removing these elements, and how this is one of the mechanisms that derives from and reinforces contempt culture within tech.

So, who is That Guy? When I talk about That Guy, I’m specifically referencing the people in a team or group who are in some way horrible to deal with. These people show up not just in our workplaces but also with regularity in the broader open source culture.

The work environments where I’ve experienced That Guy have always been ones where my technical acumen wasn’t taken for granted, and that I was regularly required to prove my knowledge, expertise, and experience. That I belonged was always in question.

When I encountered problems with my code, the work I’d done to that point wouldn’t be taken into account when I’d ask for help. Instead I’d be offered simple solutions (that I’d tried), but in a condescending way, as though I should have already known better.

These person was extremely skilled and extremely knowledgable and I very quickly learned that asking them wasn’t going to result in a useful conversation, just the unease that I was building a case that I didn’t deserve to be there.

There are incredibly overt and overwhelming cases of That Guy like Linus Torvalds, but the vast majority of people who act like this are rarely so brash or visible or relentlessly toxic. Instead, they’re more like my experience. Questioning judgement, skills, and approach to a problem. Not working with your skills, but challenging that they exist at all.

In this environment we learn silence, to turn inwards and not ask for help or collaboration, because asking undermines our sense of belonging. Asking becomes, as I wrote in Impostor Syndrome, grounds to challenge your very right to belong.

That Guy becomes the overwhelming representation of contempt culture.

As I wrote in Contempt Culture, our culture demands that social capital be built on performing contempt, showing that we hold the right knowledge. But tech is also built on a foundation of hero worship, where we look up to the knowledgable and truly learned, people who have accrued the most social capital and greatest right to belong.

We called them wizards once upon a time, and the craft magic. We use different words now, like ninja or rockstar or 10x engineer. We act, then and now, as though programming is a secret skill that only those a cut above can even comprehend, let alone deserve to access.

This culture starts when the idols and luminaries we’ve chosen speak out, declare which magic they’ve learned through experience is the correct magic. We listen, because we want more access to magic, to be thought of as important like we think of them as important. We want to be seen as better, so we parrot what they say. We have received wisdom, and pass it on.

Inside we speak words like “I wish I was as good as that person, who knows so much”, and anyone who speaks against what they thought, what they said, what they know, well. They’re clearly not one of us. Instead, they’re a challenge, a threat, an interloper, and we challenge them, as of course you must! Are you truly one of us? Do you belong like we belong?

Those new people who didn’t know what we know, what we were told, what is true, either accept our gospel of truth or leave.

As I wrote in Impostor Syndrome, this is performative ignorance, but also the dawn of contempt culture.

The people who challenged the interloper are not called out for their behaviour, as why would they be? They’re just answering the same awful questions that are posted so many times, saving the luminary the effort of having to, once again, write out why something is correct.

And there’s so many of these people asking these bad questions, it’s not our fault if we get a little angry or short with them. It’s that there are so many of them.

Our culture is the behaviour we permit and the actions that we reward. We reward the treating of new users contemptuously because it removes a burden from our idols, because they are not like us, the wizardly few, the ninjas and rockstars, and our contempt means that fewer questions get asked. It’s a net win, right?

Everyone wants to be the hero, to be looked up to and asked their opinions. We hold up our idols as the singular minds that created great works. We learn to want to be them, to make something that becomes huge and important. We are taught that this is power, true wizardry and meaning.

This culture is carried in our hearts, and it joins us in new workplaces and new groups, and the true knowledge that we learned outside becomes the metric against which we judge the new team. A metric that, by definition, will show that this group is wanting. Their questions will be wrong, their opinions will be wrong, they will be wrong, and so we must perform contempt and establish a position as the most knowledgable, the holder of the right knowledge.

We enter new spaces, and contempt culture has taught us to recreate the culture of That Guy.

When I encounter a That Guy in a space, I tend to disengage. I refuse to interact with them, I don’t ask their input or insight or try to draw on their knowledge. It makes me anxious, it makes me question my knowledge and expertise, it makes my impostor syndrome run rife.

It makes being in tech at all very unpleasant.

I’m not the only one who does this. So many people have talked to me about how they’ve withdrawn and chosen to stop participating because of That Guy, because they don’t want to be mocked for their questions or background or alternative experiences. They don’t want to feel like nothing they do will ever be good enough, that their instincts or curiosity is something to be berated for.

So if we all dislike working with That Guy, if they’re so difficult to be around or work with, why are they in our communities? Why are they allowed to stay?

Why are they the ones that get to stay?

Because they have “great technical knowledge” and it would be “a loss” to not have access to that. That Guy’s are protected by community leaders for being great contributors, for producing so much code, for making the project really work on a technical level. They’re protected because they remember everything about the decisions that have been made, the knowledge of why something is the way it is.

They’re protected because they are so technically strong, that losing them is unthinkable. Because they have more merit.

Their contemptuous interaction style becomes the dominant interaction style. Their harmful, even predatory behaviours will be accepted, challenged as untrue, and conversation around it suppressed. A whisper network of the Missing Stair will spring up, trying to subtly warn people away from this community.

New people will come, see the power wielded by That Guy, and covet it, and begin to perform the same way.

The same way I did.

But some people choose not to stay, repulsed by the culture and behaviour and the unpleasantness of That Guy. The great technical knowledge of That Guy and the coveting of power that they imply means that growing the project becomes difficult. After all if it doesn’t all fit in my head anymore, do I still have relevance? Am I still important?

When belonging means an ability to demonstrate contempt, being unable to speak authoritatively on the entire project means needing those dreaded words of “I don’t know”, ceding status and the associated power and importance.

Those who leave take their knowledge with them. Those who stay are reluctant to challenge or appear like they’re trying to undermine That Guy.

That Guy becomes a point of failure. The importance of their Great Technical Knowledge grows, and they are even more likely to be excused, protected, their harms minimised or ignored.

The language of technology is one of magic, of control of the ephemeral and ineffable, of wielding the tools and knowledge that mere mortals could never understand.

I craved the elitism that this represented, to fit into the stories in every book of fiction I’d read, to be something more than I was and wield greater power, respect, admiration. I saw communities that worked this way and I wanted it too. I wanted to belong, because I didn’t belong elsewhere in my life, and the rules around belonging were obvious, simple, and easy to internalise.

The communities I saw did not act in positive ways. They took newcomers like me and taught contempt, taught “how to ask questions”, taught that our time is more valuable and that I should, if I was to deign to answer questions, remind the asker that they were wasting my time. Perhaps not explicitly, but remind them nonetheless.

You can still see the effects of this culture in terms like the error, or errors, or the entire concept of .

We built communities where the only people were those who were as meritorious we were would be welcomed, and that the newcomers would either prove their merit through behaving as we behaved, or, leave.

Together, we built a culture where “merit” was only belonging to this exclusionary and elitist model, where “merit” was not helping but contemptuously asking why the person questioning didn’t already know something. It was demanding that people read manuals, manuals that themselves are artefacts of the contempt culture and assert that those unable to understand are unworthy of understanding.

We were taught to care about “skill at coding”, at existing technical knowledge, mastery of esoterica. We were taught that social skills are worthless, less than worthless, and that empathy for users was weakness.

We force this culture on others. Every time a non-technical person apologises before asking for help, we can see our culture reflected back at us, where we have built fear and uncertainty and the positioning that they are not worth our time.

We built a community that, on purpose, creates That Guy, and teaches every new That Guy to teach others the same.

We chose to do this.

But, with awareness that we made this choice gives us the power to ask ourselves if this is truly who we are and want to be, truly what we want to experience in our lives, from our colleagues and friends.

With awareness, we can, and must, choose differently.|||

If you got to see my talk about Human Driven Development at WDCNZ or LCA, you’ll remember that one of the concepts that I brought up was the idea of