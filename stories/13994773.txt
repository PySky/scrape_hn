Crystal is a programming language invented by the last Gelfling to stop evil muppets from taking over his planet. It strongly resembles Ruby and shares many of its characteristics. It is statically typed and compiles to super fast native code. Basically it is a dynamic modern language but is also fast.

It looks like this:

In Crystal every thing is an object. The numbers are objects:

Even nil is an object:

In Crystal you will rarely encounter API that isn't a method call. For example, there is no new keyword in Crystal. To create a new instance of an object we call a method named like this:

The API for primitive data types like strings or arrays, are also methods:

This object oriented approach keeps the mental surface area of Crystal really tiny. Learning Crystal is often just a matter of learning the methods you can call.

The way we build Crystal programs is through objects and composition of those objects. We can construct a basic object like this:

This model becomes really powerful when we use libraries or frameworks. Instead of learning the API of an external system, we import it and compose it into our own objects. For example, if we want to build a web app we could require an external lib called Kemal and import it into our project:

Let's take a look at all the primitive types we have available in Crystal. We have our fundamental value types; booleans and nil:

Two things are in Crystal; nil and false. That is it. Everything else is true.

And finally we have a few other number type thingys:

Chars are done using single quotes like this:

Strings are immutable and every time you add to one you are actually creating an entirely new string:

You can place vars in a string using like this:

You can declare a multiline string by just letting it span multiple lines:

If you have a string with some double quotes you can wrap the string in instead of quotes:

Crystal has immutable constants just like ruby:

You need to make sure that you specify a type for an empty array because Crystal cant do type inference on an empty array:

You can use a range as an index:

We can add to an array using :

And remove items using pop and shift:

You can check if an item exists in an array using includes?:

If your array only consists of strings or symbols you can use a special syntax to eliminate those pesky commas and quotes:

You can create ranges of numbers with dots:

If you use two dots the range is inclusive, with three dots it is exclusive:

Hashes exist in Crystal. You can use any type as a key:

You must specify a type for empty hashes (just like with arrays):

You can lookup elements in a hash using :

Looking up a hash a non-existent key will throw an error:

You can get nil instead of an error by using a question mark:

Tuples are a fixed size, immutable, ordered list of values. They are constructed like this:

You can access values by index:

Accessing a value that doesn't exist will throw an error:

To check for the existence of a value by index use a question mark:

Crystal is not a very functional language but it does provide procs. Procs are objects with a method. (If you ask some programmers, they will tell you that is all a function is). Procs give you the ability to pass functions around and change their context. You can create one like this:

Crystal has all the typical control statements. They are closed with the keyword.

Crystal has ifs which look like:

You can inline an if:

It is important to remember that Crystal is a language with types, this means that control flow statements will influence how Crystal infers types. A varâ€™s type depends on the type of the expressions used:

can be used as an expression:

Crystal has loops for looping your loopy stuff. There are three forms; while, until, and each. is the most common one, as the enumerable protocol uses that form. When you have an enumerable object, it will provide an each method which expects a block to pass each item to:

The while form looks like this:

And the until form:

Functions in Crystal look like this:

You can call them like this:

Parentheses are optional when the call is unambiguous

The standard convention is to use exclamation marks when a method will modify the object instead of returning a new one:

All functions/methods have an implicit block parameter that we can execute with yield:

Blocks can be used like procs and have a call method:

You define a class with the class keyword:

We can use it like this:

And we can call the methods like this:

We can extend a class like this:

Modules are a way encapsulating a bunch of shared methods:

You can include these methods onto a class instance with the include keyword:

You can add the same methods to a class by extending it:

Crystal has try/catch like exception handling. Wrap the code the code that might error in a statement and then catch it with :

You can define a custom exception simply by extending exception:

Crystal supports destructuring arrays and tuples. You can destructure an array like this:

It works on functions to:

Splats are like destructuring but the reverse. It can take arguments and convert them into an array:

That does it! You should have a decent ground in the basics of Crystal now! Be sure to checkout awesome-crystal for a bunch more resources.|||

