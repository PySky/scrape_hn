Before we move on, you should have a good understanding of the keyword and how it works. If you want to learn, or need a refresher, read my post on the subject before continuing.

Unlike a regular function, an arrow function does not bind . Instead, is bound lexically (i.e. keeps its meaning from its original context).

An example should make this clearer. In your console lets create a constructor function then create an instance of it:

As you should know from my last article, with a constructor function the value of is bound to the new object being created, in this case, the object. That is why we can console.log and get

What if we want to increase the value of every second? We can use the function. is a function that calls another function after a set number of milliseconds. Let’s add it to our function:

Code looks the same as before, except we’ve added a variable, and set it equal to our function. Every 1000 milliseconds (one second) the code will run. will increment by one, then it will be logged to the console. Let’s try it out. In the console create an instance of Counter again:

As you’ll see, the function will log to the screen every second. But the result isn’t what we expect. (Not a Number) is being logged. So, what went wrong? First thing is first, stop they annoying interval by running:

Let’s back up. Our function isn’t being called on a declared object. It also isn’t being called with the keyword (only the function is). And lastly, we’re not using , , or . is just a normal function. In fact, the value of in is being bound to the global object! Lets test this theory by logging the value of :

As you’ll see, the object is logged out every second. Clear the interval by running:

Back to our original function. It was logging because was referring to the property on the object ( which doesn’t exist), and not the object ( ) we had just created.

So how do we fix this? With an arrow function! We need a function that doesn’t bind . With an arrow function, the binding keeps its original binding from the context. Lets take our original function and replace our with an arrow function.

As you’ll see, the console begins logging increasing numbers — it works! The original binding created by the constructor function is preserved. Inside the function, is still bound to our newly created object!

You can clear the interval with:

For proof of concept we can again try logging from within our arrow function. We’ll create a variable called in our function. We’ll then log out if the value of in our function is equal to the value of (via ) in the parent function:

As expected, we log true each time! Again, clear the interval with:|||

Last week I published this post on the keyword this for beginners. One of the topics that wasn’t covered in that article was arrow functions. The topic was simply too large to cover in that post, so…