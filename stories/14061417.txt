HappyFunTimes is a system for playing party games that are meant to be played with a bunch of people in the same room and 1 ideally large display.

People participate in the game using their smartphone by going to a webpage provided by the game. The webpage lets them use their phone as a controller. This lets you make games that support more than the typical 4 players.

I suppose theoretically there's no limit to the number of players.

It also lets you make games with unique controllers.

There's a Unity3D library if you'd like to make the game in Unity3D.

The smartphones end up just being smart controllers. As there is just one machine running the real game this means they are relatively easy to create. No crazy networking, state syncing, or dead reckoning required. JavaScript libraries for the browser and Unity3D libraries are provided This makes it easy to bang out a game. Use any JavaScript framework or Unity3D. For controllers the sky is the limit. Have a one button game. The user touches their screen. Have users choose answers to question like Jeopardy Access the camera, send selfies to the game. Use the device orientation API and rotate something in game to match Make a rhythm band where each device becomes an instrument. Make a rhythm game like Parappa but each person is a different color so that they each have to play their part at the right time Let the user draw something on their phone. Insert that drawing into the game. Show diagrams. Let the user plan out football plays. Have 2 dpads for the dual stick part of your game. Have a single button for the speed contest. Change to a 3 letter box to let a player enter their high score initials. The API is simple to use (for some defintion of simple :D). From that point on anytime a player connects the GameServer will emit an event It's up to you what to do when a new player connects. For example if you had a object you might do something like this // make a new Player anytime the 'playerconnect' event is emitted function createNewPlayer(netPlayer) { players.push(new Player(netPlayer)); } If the player disconnects or quits the will emit a event. If we want to handle that we might do something like Player = function(netPlayer) { this.netPlayer = netPlayer; // remember this Player's NetPlayer netPlayer.addEventListener('disconnect', Player.prototype.remove.bind(this)); }; Player.prototype.remove = function() { players.splice(players.indexOf(this), 1); // remove ourselves from our array of players. }; We can send events to the player's phone by calling For example That will cause an event to be emitted on the player's phone. The player's phone has a correspondiing function. When called an event will be emitted on that player's object. Add listeners for any events you make up Whatever data you pass to will arrive with the event. ... this.netPlayer.sendCmd('die', { reason: "So and so killed you", pointsToLose: 100, }); On the phone we create a Just like above we can listen for events. Similarly you can send events to the game It's up to you to decide which events to send and receive for your particular game's needs. There is also a synchronized clock across machines. If online is false when the clock is created it will create a clock that returns the local time.

The number of players that can connect to a game is limited by your networking equipment. With enough access points there's no limit to the number of player that could connect that I know of but of course 1000s of players would require lots of access points and lots of bandwidth and a game design that lets 1000s of people actually participate.

Another limit in the default mode is players must be on the same network behind a NAT. This is standard for most if not all home routers. It's probably less standard in office setups. In this mode you start HappyFunTimes, tell your users to connect to your WiFi and then have them go to .

HappyFunTimes has the option to run it's own DNS which is another option but requires configuring your router. This option is probably more suited to events, installations, and things like that. In this mode, players connect to the WiFi specificaly setup to run HappyFunTimes. iOS devices will automatically find HappyFunTimes once connected to the WiFi, no other interaction required by the user. Android devices require the user to first connect to the WiFi and then go to any random url like or .

Not at all. This is not a library for the internet. It's a library for running a game at a party, meeting, bar, etc... That said if there's anything easy and performant you'd like to suggest submit a pull request. Again, this is meant for games where everyone is in the same room watching the same display. If someone is off in the corner trying to hack the game through the net maybe you shouldn't have invited them to your party. That said if there's anything easy and performant you'd like to suggest submit a pull request. Does it work on Windows, OSX, and Linux? The controllers of course run in any modern browser. Games run in whatever environment you've created them for. Most of the samples here are HTML and so should run in any modern browser on any platform. As for happyFunTimes I've run it on OSX, Linux and Windows with no problems. WebRTC would possibly allow the phones to talk directly the game rather than through the happyfuntimes. happyfuntimes would need to setup a rendevous between the 2 machines but after that the conncetion should be peer to peer.... Or so I'm lead to believe. WebRTC still doesn't currently exist in iOS Safari as of iOS8. It does exist in Chrome.|||

HappyFunTimes - A System for creating 10-100+ player local games