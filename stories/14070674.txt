Uses WiFi signals and machine learning (sklearn's RandomForest) to predict where you are. Even works for small distances like 2-10 meters.

Your computer will known whether you are on Couch #1 or Couch #2.

The package access_points was created in the process to allow scanning wifi in a cross platform manner. Using at command-line will allow you to scan wifi yourself and get JSON output. builds on top of it.

If you want to delete some of the last lines, or the data in general, visit your folder.

Any of the functionality is available in python as well. Generally speaking, commands can be imported:

Generally it should work really well. I've been able to learn using only 7 access points at home (test using ). At organizations you might see 70+.

Distance: anything around ~10 meters or more should get >99% accuracy.

If you're adventurous and you want to learn to distinguish between couch #1 and couch #2 (i.e. 2 meters apart), it is the most robust when you switch locations and train in turn. E.g. 20 in Spot A, then 20 in Spot B then start again with A. Doing this in 100 in spot A, then 100 in spot B and then immediately using "predict" will yield spot B as an answer. No worries, the effect of this temporal overfitting disappears over time. And, in fact, this is only a real concern for the very short distances.

Height: Surprisingly, vertical difference in location is typically even more distinct than horizontal differences.

That project used to be in Python, but is now written in Go. is in Python with lessons learned implemented.

It's possible to locally run tests for python 2.7, 3.4 and 3.5 using tox.|||

whereami - Uses WiFi signals :signal_strength: and machine learning to predict where you are