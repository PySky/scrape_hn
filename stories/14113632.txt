C++11 introduces the  library helpful to work with time spans. In this post, I go through its most important parts and show some examples.

Duration is the simplest type comprising of a ratio (e.g. 1:1000 for milliseconds) and the number of ticks. A single object is guaranteed to hold a timespan nearing 300 years.

You can implicitly cast values to more precise types, and there’s duration_cast<> to handle unsafe casting to more general ones. Duration supports basic arithmetics, so you can quickly add durations, multiply them, etc. Many of these operations will be evaluated at compilation time.

There are predefined durations, from an hour to a nanosecond. C++14 introduces duration literals, what makes it even easier to express timespans in code.

We need the clock to get durations from the system. Chrono clock is a type containing some basic information: what type it returns, whether it is a stable clock (so that we avoid problems with system clock adjustments), and ability to get the current time.

The standard library provides three of them:

A clock returns a time point, from which we extract further information.

std::chrono::timepoint is a duration since the start of the epoch of the clock (Unix epoch is the de facto standard, at least for ). Every time point is associated with its clock and data from different ones is not interoperable.

Timepoints have basic algebra that returns durations. That makes it easy to calculate how long action took:

Here’s a quick diagram showing how these things work together:

We want to run input-update-render loop continuously, but it makes no sense to render scene trillion times a second since nobody would notice a change. Instead, loop allocates any free time to updates, so that game runs “no faster” than 60 frames per second.

Notice, that the third frame could squash one update more in 16ms.

Notice that timestamps could be different since there are two separate time reads in the code:

Unfortunately, our library does not support dates out of the box. That is by design (I think I saw some official explanation for this, will update when I recall the place). Good news is, Howard Hinnant wrote an excellent library (GitHub).|||

C++11 introduces library helpful to work with time spans. In this post, I go through its most important parts and show some examples.