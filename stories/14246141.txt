This post walks through the process of developing a CRUD-based RESTful API with Django and Django REST Framework, which is used for rapidly building RESTful APIs based on Django models.

By the end of this tutorial you will be able to…

Django REST Framework (REST Framework) provides a number of powerful features out-of-the-box that go well with idiomatic Django, including:

Plus, the documentation is easy to read and full of examples. If you’re building a RESTful API where you have a one-to-one relationship between your API endpoints and your models, then REST Framework is the way to go.

Install Django and set up a new project:

Your current project structure should look like this:

Start by creating the app and installing REST Framework inside your virtualenv:

Now we need to configure our Django project to make use of REST Framework.

First, add the app and to the section within puppy_store/puppy_store/settings.py:

Next, define global settings for REST Framework in a single dictionary, again, in the settings.py file:

This allows unrestricted access to the API and sets the default test format to JSON for all requests.

Your current project structure should now look like:

Let’s set up the Postgres database and apply all the migrations to it.

Once you have a working Postgres server on your system, open the Postgres interactive shell and create the database:

Install psycopg2 so that we can interact with the Postgres server via Python:

Update the database configuration in settings.py, adding the appropriate username and password:

Next, define a puppy model with some basic attributes in django-puppy-store/puppy_store/puppies/models.py:

Hop into again and verify that the has been created:

Before moving on, let’s write a quick unit test for the Puppy model.

Add the following code to a new file called test_models.py in a new folder called “tests” within “django-puppy-store/puppy_store/puppies”:

In the above test, we added dummy entries into our puppy table via the method from and asserted that the method returned the correct string.

Add an __init__.py file to “tests” and remove the tests.py file from “django-puppy-store/puppy_store/puppies”.

Great! Our first unit test has passed!

Before moving on to creating the actual API, let’s define a serializer for our Puppy model which validates the model querysets and produces Pythonic data types to work with.

Add the following snippet to django-puppy-store/puppy_store/puppies/serializers.py:

In the above snippet we defined a for our puppy model, validating all the mentioned fields. In short, if you have a one-to-one relationship between your API endpoints and your models – which you probably should if you’re creating a RESTful API – then you can use a ModelSerializer to create a Serializer.

With our database in place, we can now start building the RESTful API…

In a RESTful API, endpoints (URLs) define the structure of the API and how end users access data from our application using the HTTP methods – GET, POST, PUT, DELETE. Endpoints should be logically organized around collections and elements, both of which are resources.

In our case, we have one single resource, , so we will use the following URLS – and for collections and elements, respectively:

We will be taking a test-first approach rather than a thorough test-driven approach, wherein we will be going through the following process:

Once the test passes, start over with the same process for the new test.

Begin by creating a new file, django-puppy-store/puppy_store/puppies/tests/test_views.py, to hold all the tests for our views and create a new test client for our app:

Before starting with all the API routes, let’s first create a skeleton of all view functions that return empty responses and map them with their appropriate URLs within the django-puppy-store/puppy_store/puppies/views.py file:

Create the respective URLs to match the views in django-puppy-store/puppy_store/puppies/urls.py:

With all routes now wired up with the view functions, let’s open up REST Framework’s Browsable API interface and verify whether all the URLs are working as expected.

First, fire up the development server:

Make sure to comment out all the attributes in section of our file, to bypass login. Now visit

You will see an interactive HTML layout for the API response. Similarly we can test the other URLs and verify all URLs are working perfectly fine.

Let’s start with our unit tests for each route.

Start with a test to verify the fetched records:

Run the test. You should see the following error:

Update the view to get the test to pass.

Here, we get all the records for puppies and validate each using the .

Run the tests to ensure they all pass:

Run the tests. You should see the following error:

In the above snippet, we get the puppy using an ID. Run the tests to ensure they all pass.

Inserting a new record involves two cases as well:

First, write tests for it:

Run the tests. You should see two failures:

Again, update the view to get the tests to pass:

Here, we inserted a new record by serializing and validating the request data before inserting to the database.

Run the tests again to ensure they pass.

You can also test this out with the Browsable API. Fire up the development server again, and navigate to http://localhost:8000/api/v1/puppies/. Then, within the POST form, submit the following as :

Be sure the GET ALL and Get Single work as well.

Start with a test to update a record. Similar to adding a record, we again need to test for both valid and invalid updates:

In the above snippet, similar to an insert, we serialize and validate the request data and then respond appropriately.

Run the tests again to ensure that all the tests pass.

To delete a single record, an ID is required:

Run the tests. You should see:

Run the tests again. Make sure all of them pass. Make sure to test out the UPDATE and DELETE functionality within the Browsable API as well!

In this tutorial, we went through the process of creating a RESTful API using Django REST Framework with a test-first approach.

What’s next? To make our RESTful API robust and secure, we can implement permissions and throttling for a production environment to allow restricted access on the basis of authentication credentials and rate limiting to avoid any sort of DDoS attack. Also, don’t forget to prevent the Browsable API from being accessible in a production environment.

Feel free to share your comments, questions, or tips in the comments below. The full code can be found in the django-puppy-store repository.|||

In this tutorial we'll take a test-first approach to developing a RESTful API with the Django REST Framework.