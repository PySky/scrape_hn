Many Trojans employ anti-analysis techniques. Some of these, such as VM detection, can be cleanly defeated with our automated countermeasures. Others require a little elbow grease. Among the latter is the use of obfuscated strings, as seen in the recently discovered banking Trojan “Shifu”. In this post, we will follow a particular sample (MD5 371cdeb618d2170419f02fc3d644ef43) and shed some light on the process we used to deobfuscate these strings.

The first hurdle was to obtain a snapshot of the running process without triggering any anti-debugging or anti-virtualization traps that may be present therein. Fortunately, our True Bare Metal (TBM) analysis system automates this chore, allowing our human reverse-engineers to go straight to the part that matters: unraveling the functionality of Shifu’s payload.

Once we had the process dump, we noticed tell-tale signs of string obfuscation: in particular, blocks of garbage repeatedly referred to in the disassembly:

Shifu’s author made use of ordinary XOR. The key consists of one byte, given as an argument to the decryptor on each invocation:

More of the same:

This information proved sufficient for crafting a simple IDA Pro script, which decrypts the strings and annotates the disassembly. All we had to do was to walk the invocations of the decryptor and parse out the arguments, afterwards applying the XOR:

# table of irregular places. we did these by hand.

Certain locations in Shifu invoked the decryptor with programatically generated arguments, triggering the ‘sad’ message in the above script. The simplest possible approach was to decode the constants in question and enumerate these cases manually (the ‘irreg’ dictionary.)

The following is an excerpt of the strings found by the script:

From these annotations, it became possible to walk the disassembled process image and shed some light on the functionality of Shifu’s payload. In this fragment, you can see some hints of keylogging and communications with a command-and-control server. Other strings (not shown for the sake of brevity) suggest a wide variety of other potential features in this sample such as anti-analysis techniques, generating non-malicious network traffic as a smokescreen, searching for unencrypted Bitcoin and Litecoin wallets, and stealing data from various financial applications running on the machine.

Perhaps reflecting Shifu’s patchwork nature, we also found other encrypted strings not using the same decryptor above. We used similar techniques to handle these. One set of these strings was a list of security software, which presumably comes with mechanisms to defeat them. However, the most interesting one was this list of strings related to Italian banks:

Of course, decrypting strings is only the tip of the iceberg. Keep an eye on our blog for future posts as we delve deeper into this and other malware.|||

