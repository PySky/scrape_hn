This is a proposal for adding compile-time functions and first-class types to Go, written by Bryan C. Mills in September, 2016. This proposal will most likely not be adopted. It is being presented as an example for what a complete generics proposal must cover.

This is an alternative to an earlier proposal and subsequent drafts by Ian Lance Taylor.

This proposal is an attempt to drive that observation to its natural conclusion, by adding explicit support for running Go functions over types at compile-time. It results in a variant of Go with deep support for parametric types and functions, despite relatively little addition to the language.

This proposal is intended to be Go 1 compatible. If any incompatibilities exist, they are likely to be due to the extension of to include compile-time expressions and/or due to grammar conflicts with the expanded definition of .

We introduce a new builtin type, , which represents a type within Go program during compilation, and a new token which creates a constant of type from a .

We permit a subset of Go functions to be called at compile-time. These functions can accept and return values of type . The values returned from such functions can appear as types within the program.

, applied at the start of a , indicates a declaration of a compile-time function.

ℹ There are many reasonable alternatives to the token. We could use a currently-invalid token (such as or ), a new builtin name (such as ), or, in fact, nothing at all! In the latter case, any that meets the constraints of a compile-time function would result in a function which could be called at compile time.

The new builtin type represents a Go type at compile-time.

, used in place of a , , or the in a , represents "the type itself". It produces a constant of type .

The actual syntax for the token could be a currently-invalid token (such as or ), an existing keyword that cannot currently occur in this position (such as an unparenthesized ), or a new builtin non-keyword (such as , , or ).

The syntax already supported in type switches can be used as a general expression within compile-time functions. It returns the of the value to which it is applied.

In order to support defining methods on types within compile-time functions, we expand the definition of a to include and , with the restriction that method declarations must occur within the same scope as the corresponding type declaration and before any values of that type are instantiated. For uniformity, we also allow these declarations within ordinary (non-compile-time) functions.

ℹ As a possible future extension, we could allow conditional method declarations within a compile-time function before the first use of the type.

Expressions of type can appear anywhere a is valid, including in the parameters or return-values of a compile-time function. The compiler substitutes the concrete type returned by the function in place of the expression. parameters to a compile-time function may be used in the types of subsequent parameters.

ℹ In this proposal, functions whose parameter types depend on other parameters do not have a well-formed Go type, and hence cannot be passed or stored as variables with types. It may be possible to add such dependent types in the future, but for now it seems prudent to avoid that complexity.

Compile-time functions and expressions cannot depend upon values that are not available at compile-time. In particular, they cannot call non-compile-time functions or access variables at package scope.

ℹ As a possible future extension, we could allow compile-time functions to read and manipulate package variables. This would enable more functions to be evaluated at compile-time, reducing the run-time cost of package initialization (and allowing Go programs to load more quickly). However, it would potentially remove the useful invariant that all compile-time functions are "pure" functions.

The values returned from a call to a compile-time function are constants if expressions of the corresponding types are otherwise valid as constants.

It is an error to write a compile-time expression that depends on a value not available at compile-time.

Passed-in run-time functions cannot be called directly within the compile-time function to which they are passed, but they can be called by other (run-time) functions and/or methods declared within it.

⚠ Can / should we allow compile-time functions to accept and call other compile-time functions passed as parameters?

Run-time functions and methods declared within compile-time functions may refer to local variables of the compile-time function.

Calls to compile-time functions from within run-time functions are evaluated at compile-time. (This is a form of partial evaluation.) Calls to compile-time functions from other compile-time functions are evaluated when the outer function is called.

⚠ Should we allow compile-time functions that do not involve to be called at run-time (with parameters computed at run-time)?

Expressions of type can only be evaluated at compile-time.

ℹ There is an important distinction between "an expression of type " and "an expression whose type is an expression of type " (a.k.a. "an expression whose type is a ). The former is always a compile-time expression; the latter is not.

If an expression's type is a but the concrete type represented by evaluating the does not support an operation used in the expression, it is a compile-time error. If the expression occurs within a compile-time function and the expression is not evaluated, there is no error. expressions within type and method declarations are only evaluated if the block containing the type declaration is evaluated. (This is analogous to the SFINAE rule in C++.)

A on an expression or variable of type switches on the concrete type represented by that , not the type itself. As a consequence, a on a cannot bind an in the .

⚠ It would be useful in some cases to be able to convert between a and a , or to otherwise implement many of the methods on the type. For example, in the example below, the parameter could be eliminated by changing the and parameters to and reflecting over them to discover the key type. Is that worth considering at this point?

The name of a type declared within a function is local to the function. If a local type is returned (as a ), it becomes an unnamed type.

ℹ Local types introduce the possibility of unnamed types with methods.

Two unnamed types returned as are identical if they were returned by calls to the same function with the same parameters. If the function itself was local to another compile-time function, this applies to the parameters passed to the outermost function that returns the .

The extension of to include calls returning a introduces some minor ambiguities in the grammar which must be resolved, particularly when the argument to the function is a named constant rather than a or another call.

The following example illustrates an ambiguity in interface declarations. If is a type, it declares a method named with an argument of type . If is a constant, it embeds the interface type in .

The compiler can theoretically resolve the ambiguity itself based on the definition of , but package currently does not do enough analysis to determine the correct abstract syntax tree for this case. To keep the parser relatively simple, we can resolve the ambiguity by requiring parentheses for embedded types derived from expressions, which can never be valid method declarations:

ℹ In the above example, must be a constant or the name of a type, not a literal: the in would already remove the ambiguity.

ℹ This problem and the proposed resolution are analogous to the existing ambiguity and workaround for composite literals within , , and statements. (Search for "parsing ambiguity" in the Go 1.7 spec.)

The following example illustrates an ambiguity in expressions. If is a compile-time function that returns a , the expression is a of the expression to the type . Otherwise, it is a call to the function with .

Fortunately, the representation for both of these forms is equivalent: a nested .

ℹ As above, this case is only ambiguous if is a constant or the name of a type.

ℹ This ambiguity already appears in the existing grammar for the simpler case of : whether the subexpression is parsed as a of to or a applying a function to already depends upon whether names a type or a function or variable.

The ambiguities described here are low-risk: the result of misparsing is an invalid program, not a valid program with unintended behavior.

This proposal provides support for parametricity and metaprogramming using a language that is already familiar to Go programmers: a subset of Go itself.

The proposed changes to the compiler are extensive (in order to support compile-time evaluation), but the changes to the language itself and to the runtime are relatively minimal: extensions of existing declaration syntax to additional scopes, a token for indicating compile-time functions, a token for hoisting types into values, and the new built-in type . The programmer needs to think about which parts of the program execute at compile-time or at run-time, but does not need to learn a whole new language (as opposed to, say, the extensive surface area of the or packages or the entirely different language of ).

The potential applications cover a significant fraction of "metaprogramming" use-cases that are currently well-supported only in languages much more complex than Go, and that are not addressed by previous proposals that run closer to conventional "generics" or "templates". The specific language changes may be somewhat more complex than some alternatives (particularly when compared to tools that build on top of ), but the deployment overhead is substantially lower: instead of preprocessing source files (and potentially iterating over the outputs many times to reach a fix-point of code generation), the programmer need only run the usual command. That is: this proposal trades a bit more language complexity for a significant reduction in tooling complexity for Go users.

With a few additional modest extensions (e.g. compile-time functions), the same mechanism can be used to make Go program initialization more efficient and to move detection of more errors from run-time to compile-time.

The principles underlying this proposal are based on existing (if little-used) designs from programming language research: namely, higher-order types, partial evaluation12, and dependent function types.

With this style of metaprogramming, it would be difficult (perhaps infeasible) to add deduction for arguments in a subsequent revision of the language in a way that maintains backward-compatibility.

This proposal is intended to be compatible with Go 1. (The author has looked for incompatibilities and not yet found any.)

The implementation of is straightforward, especially if we decline to add conversions to and from . The detection and evaluation of compile-time expressions adds a new algorithm to the compiler, but it should be a straightforward one (a bottom-up analysis of expressions) and is closely related to common compiler optimizations (e.g. constant folding).

The export data format would have to be expanded to include definitions of compile-time functions (as I assume it does today for inlinable functions).

The bulk of the implementation work is likely to be in support of executing Go functions at compile time: compile-time functions have similar semantics to run-time functions, but (because they are executed at compile time and because they can have dependent types) would need support for a more dynamically-typed evaluation.|||

proposal - Go Project Design Documents