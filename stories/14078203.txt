A micro web server that replies "Hello world!" to every request

The idea is to show the basics steps to create a web server in Swift.

-- creates an endpoint for communication and returns a descriptor.

domain: Communication domain, selects the protocol family, in our case ipv4 (AF_INET). AF_INET6 if we wanted to use ipv6.

protocol: The protocol specifies a particular protocol to be used with the socket. Normally only a single protocol exists to support a particular socket type within a given protocol family

Returns -1 if there's an error otherwise the descriptor (a reference).

-- get and set options on sockets

level: To manipulate options at the socket level

option_name: The name of our the option, in our case we do not generate SIGPIPE, instead return EPIPE A SIGPIPE is sent to a process if it tried to write to a socket that had been shutdown for writing or isn't connected (anymore).

-- assigns a name to an unnamed socket.

When a socket is created with socket() it exists in a name space (address family) but has no name assigned. bind() requests that address be assigned to the socket.

The backlog parameter defines the maximum length for the queue of pending connections. If a connection request arrives with the queue full, the client may receive an error with an indication of ECONNREFUSED.

-- extracts the first connection request on the queue of pending connections,

Creates a new socket with the same properties of socket, and allocates a new file descriptor for the socket.

The argument address is a result parameter that is filled in with the address of the connecting entity, as known to the communications layer.

The address_len is a value-result parameter; it should initially contain the amount of space pointed to by address; on return it will contain the actual length (in bytes) of the address returned.|||

katan - Swift playground with a micro web server that replies "Hello world!" to every request