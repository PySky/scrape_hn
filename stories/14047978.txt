The other day, as my dad was guiding me on a tour of his metal manufacturing shop, we stopped at a computer numerical control (CNC) machine, like that seen in Figure 1 that’s just about as old as I am. After unscrewing a latch, he revealed none other than an RS-232 interface port. We wandered to another CNC machine that he had purchased just two years ago. He unscrewed its latch, and what do you know – another RS-232 port. “Some have a USB port, some don’t,” he said. “But they all have RS-232. I don’t understand why they don’t update to USB.”

This seems to be a common question. Why is RS-232 still being used and why should you care? Being one of the first serial interfaces, RS-232 has a wide, established base. Once it’s designed in, it doesn’t cost any extra time or money to upgrade. Aside from its incumbent status, RS-232 has also earned ubiquitous use because of its reliability. While newer interfaces like USB require complex hardware and software to function correctly, RS-232 requires simple hardware and minimal software for communication. And in some situations, RS-232 can solve problems that other interfaces can’t - like if your processor is hung, you need to debug a low level issue, or you need to update the firmware without risk. All of these are things that you simply cannot do with a USB interface. For that reason alone, I don’t see the RS-232 interface disappearing anytime soon.

RS-232 also offers simplicity in implementation. It is software agnostic, meaning that it can enable serial communication between systems with their own proprietary code, such as those in my dad’s CNC machines. This protocol’s flexibility opens up a cornucopia of possibilities to interface with many different systems. For those in the DIY community looking for a cost-effective, simple method of communication prototyping, RS-232 is your answer. With RS-232, you can wander into your garage or attic, pick up an old electronic device, and give it new life.

I myself had a little fun with the RS-232 interface recently, aiming to bring older devices into the 21st century IoT world. I started with prototyping how I could connect an offline device to the online world. As you can see in Figure 2, I used TI’s MSP-EXP430G2 LaunchPad™ development kit (the “offline device”) to communicate with the SimpleLink™ Wi-Fi® CC3200 LaunchPad kit (the “online connection”) via RS-232. The RS-232 Transceiver BoosterPack™ plug-in module made prototyping much easier. For example, the INVALID function is a simple jumper and line of code away. Now, I can monitor the RS-232 connection and send an alert via text if it becomes disconnected.

This is just one use case among many for the RS-232 interface. RS-232 can be like a “master key” of communication, opening up an endless world of new possibilities with legacy devices. What are your exciting new ideas for using RS-232? Please let me know in the comments below. And check out our RS-232 portfolio today to find the right device for your design.|||

Analog Signal Chain real world problem solutions: Technology and Tools