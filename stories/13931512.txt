The decibel has always confused me. Sometimes people use decibels as an absolute value where “0” is silence and anything over “120” is very loud. Journalists do this when describing how loud a band is. Sound engineers do it too, when boasting about the power of their speaker-setup. “It’s louder than a jet engine at 50 paces, man”. But when I look at the volume meter on a mixing desk, things are different. The desk shows the loudest value as zero, all the way down to silence at “-96” (or sometimes even “∞”). See what I mean? Confusing.

For a long time I’ve been at least tangentially connected to the world of “pro” audio. As such, I’d feel uneasy when I overheard a lay-person talking about volume. I would often catch myself thinking “I know they are getting it wrong, but I don’t know why”. So after years of pretty much taking the decibel for granted, I finally had enough. I did some research, and it turns out the decibel is actually pretty interesting.

Now that I’ve done my research, the dB markings on a mixing desk look far more logical. I can see now that using a simple low-to-high dB meter wouldn’t make any sense. Any dB scale requires a defined reference point, which doesn’t exist in this context. A mixer-channel cannot have a fixed frame of reference because it gets mixed. A mixer routes all channels to the “master bus” output channel, which has its own volume control. Knowing the value of a signal at the channel-level tells us nothing about the final output value.

But if we flip things around, a channel strip can have a fixed reference point. That fixed point is the maximum level that it can output. Because decibels are relative units, we can use them to express how far below the max-level a signal is. By putting 0dB at the top of the meter (and negative values on the downward scale) we can gain useful information about the level of the signal.

There is a technical term for this kind of decibel-usage – dBFS (decibel full scale). The highest possible level of sound produced by audio equipment is 0 dBFS. All other levels are then expressed in negative numbers. Absolute silence in dBFS is -∞ (minus infinity), but in practical terms -96 makes for a useable bottom point.

Much like a mixing desk, the Web Audio API does not use dBSPL. The final volume depends on both the level set by your operating system and the level of your speakers. Your computer has no way of knowing what your audio-out connects to (in an analogue setting, at least). It could be going to a set of tiny tinny earbuds, or a 500w amplifier and massive speaker stack. Providing a dBSPL reading of the level would be both meaningless and impossible. For this reason the Web Audio API uses dBFS.

In this scenario the dBFS value is useful information. It lets us know if a channel is “clipping”, and gives us the information we need to keep on top of our gain-staging. It also gives us a value to compare against other channels on the same system. We may not know the volume of the final destination, but we can compare the individual channels. If we look at a drum track and a guitar track, for instance, we can use the dBFS values to guide how we mix the levels of the two.

I’ve built this keyboard using the Web Audio API. Now I know how the decibel actual works as a unit, I was able to incorporate it into my project. The volume meters now show their values in dBFS.|||

After years of taking the decibel unit for granted, I finally did some research, and it turns out the decibel is actually pretty interesting.