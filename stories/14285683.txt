In Proc. 38th ACM Symposium on Principles of Programming Languages (POPL’11), January 2011

Alms is a general-purpose programming language that supports practical affine types. To offer the expressiveness of Girard’s linear logic while keeping the type system light and convenient, Alms uses expressive kinds that minimize notation while maximizing polymorphism between affine and unlimited types.

A key feature of Alms is the ability to introduce abstract affine types via ML-style signature ascription. In Alms, an interface can impose stiffer resource usage restrictions than the principal usage restrictions of its implementation. This form of sealing allows the type system to naturally and directly express a variety of resource management protocols from special-purpose type systems.

We present two pieces of evidence to demonstrate the validity of our design goals. First, we introduce a prototype implementation of Alms and discuss our experience programming in the language. Second, we establish the soundness of the core language. We also use the core model to prove a principal kinding theorem.

Alms is also available on Hackage and can be installed with , though it may not be the latest version and it hides the examples in an obscure location like version .

Alms requires GHC to build. It is known to work with GHC 7.4.1, and likely no longer works with GHC 6. (If you want to try it and can’t run GHC 7, let me know and I may be able to get it to work with 6.10.)

Provided that a recent is in your path, to build on UNIX it ought to be be sufficient to type:

This should produce an executable in the current directory,

If this fails, it may also be necessary to either install the editline package first or disable line editing (Please see Editline Trouble).

This produces an executable in .

Cabal should work on UNIX as well, but mixing Cabal and make leads to linker errors, so it’s probably best to stick with one or the other.

Examples from the paper and several more are in the directory. The examples from section 2 of the POPL submission are in:

Other notable examples include two implementations of session types, an implementation of Sutherland-Hodgman re-entrant polygon clipping (1974) using session types, and the tracked Berkeley Sockets API from our ESOP 2010 paper:

The echo server from our ESOP paper, which uses libsocketcap, is in . To try it, listening on port 10000, run:

To connect to the echo server, you can run

The examples directory contains many more examples, many of which are small, but demonstrate type or contract errors—the comment at the top of each example says what to expect. Run many of the examples with:

Or run the examples as regression tests (quietly):

Of course, you can also run the interpreter in interactive mode:

You can load libraries from the command line like this:

Or from within the REPL like this:

Finally, it may be helpful to know about the command for asking the REPL about identifiers:

The language as presented in the paper is faithful to the language as implemented, except for issues of pretty printing:

Line editing is enabled in the REPL by default, which depends on the editline Cabal package. If fails and says something about editline, then there are three options:

Installing editline can be kind of touchy. On my system,

seemed to install it, but Cabal still couldn’t find it when building this program. Installing editline globally made it work:

At this point, older versions of Cabal may give the installed library bad permissions, so something like this may help, depending on where it installs things:

If the cabal installation of the GHC package fails, it may be necessary first to install the C library that it depends on. The source is available at http://www.thrysoee.dk/editline/. On my Debian system, I was able to install it with:

“Practical Affine Types” paper © 2011 ACM. This is the author’s version of the work. It is posted here by permission of ACM for your personal use. Not for redistribution. The definitive version was published in Proc. ACM SIGPLAN–SIGACT 2011 Symposium on Principles of Programming Languages 46:447–458, 2011. http://doi.acm.org/10.1145/1925844.1926436|||

