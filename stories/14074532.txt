I'm a big fan of Rum / Sablono for my ClojureScript DOM templating needs. These libraries give me all the semantics I want, but I don't have much experience with performance tuning. Most of the React performance tips I've found are (unsurprisingly) JavaScript-specific, so I thought it'd be nice to create a ClojureScript-specific resource.

My goal with this repo is to establish a set of tested idioms to help folks keep the DOM part of their UI fast. Ideally, "fast" means re-renderable in under 16 ms, using a minimal amount of memory. A few notes:

I'd love your help in exploring all of this complicated stuff!

I'm writing up high-level performance questions I have about ClojureScript / React as issues on this repository. Feel free to open up issues with your own questions --- then we can come up with relevant tests together and close the issue when we figure out the answer!

This project uses Leiningen for Clojure/ClojureScript dependency resolution and Yarn for Electron/JS dependency resolution. I'm running everything on a 2013 Macbook Air 1.7 GHz i7 processor, 8GB RAM, OS X 10.9.5.

once to install Electron. (I'm using Electron so that we can pin down an exact environment and automatically run each benchmark in its own process.)

to actually execute the perf tests. EDN results are printed to stdout. You can specify benchmark names at the command line to only run those benchmarks. For example:

Runs benchmarks and and saves the results to an EDN file for later processing.

In terms of structure, there are only two source files:

I'm trying to keep all the infrastructure very minimal, so there's no error handling, core.async, Leiningen plugins, or anything fancy.

@r0man, the author of Sablono, explained to me that Sablono compiles hiccup markup in two ways:

In theory, the macro approach should be faster than the runtime interpretation approach.

For an overview of this architecture, see @gigamonkey's Practical Common Lisp chapters on an HTML generation library consisting of an interpreter and compiler.

In theory, Sablono should be faster when it knows more about your markup at compile time, and can emit React elements immediately rather than calls to the runtime interpretation machinery.

I ran these tests with 5,000 children to emphasize the runtime differences. Even then, the differences are minor. (Perhaps not even different, depending on your statistical affinities.)

Given the order of magnitude difference between 13/14 and 15/16/17, the real take away here is that runtime interpretation cost is negligible compared to the cost of a function call and map allocation.

In an app I'm currently working on, the slowest part is a list. Here are tests with lists of 1,000 children:

The advantage of #1 is that we can optimize re-renders with , but it's not obvious if/when that becomes faster than creating and diffing plain vectors. In the re-render timings above, though, the former is 16x faster than the latter. So it looks like we should prefer using components, even for simple list items.

Neither of these examples use React's keys, how do those affect performance? Using #1 with Rum's mixin, we get:

which is about twice as long as the unkeyed version, #1. Perhaps this isn't too surprising, since the extra overhead of checking keys has no benefit when nothing gets reordered. Lets explore what happens when the list items to be rendered are reordered between renders:

Well, it again looks like the overhead of keys aren't worth it when re-rendering minimal markup.

The sablono wiki suggests avoiding , as it macroexpands into a huge pile of code. However, at least in the simplest case, the performance of a list comprehension is not different than a lazy or eager :

In my app's list, each item corresponds to an entity in the domain that can be retrieved by id from the application state and queried for changes between renders. This gives me flexibility in how to set up event handlers.

The latter two seem faster (and I'd expect them to be), but the measurements of all three are indistinguishable within the error bounds. TODO: Is there a nice way to reliably measure fine memory usage (or, alternatively, bloat the event handlers to improve visibility in the tests?)

We've seen from #1 that React can happily re-render a flat list of 1000 items in around 7ms. How does it handle re-rendering nested items?

Unfortunately, 400 levels was the most I could do before getting "Uncaught RangeError: Maximum call stack size exceeded" errors. This happened both when defining the nesting recursively (#9) and when invoking the components manually within a loop (#10). So maybe Sablono or React itself is relying on recursion?

In any case, such nesting is a JS-engine limitation on what we can express in React, since this StackOverflow post suggests that modern browsers easily handle 10000+ nested elements.

React deps are specified in because that was the only way I could get to work. I'm pretty sure that the React being used is the one that's pulled in via Rum/Sablono from cljsjs.|||

cljs-react-perf - Performance experiments w/ CLJS React libraries and techniques.