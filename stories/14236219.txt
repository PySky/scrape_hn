Application monitoring space has been experiencing major renaissance in recent years. As illustrated in the popular graphic from BigPanda, there has been an explosion in the number of monitoring techniques, products and associated companies. In this post, we will describe a framework that we believe will be very helpful in understanding the fundamental techniques and value offered by various application monitoring products. But first, let’s review some empirical factors that are driving this renaissance:

With the understanding of strong driving factors for better monitoring products, let’s now focus on developing an easier framework to understand the many choices in this market.

When faced with a complex problem, business leaders, top consultants and bright minds across the globe have often relied on the famous “2x2” framework to establish a simpler perspective. We will follow suit and develop a 2x2 categorization of the monitoring landscape. Specifically, we will contrast and categorize along:

Before we discuss these categories, it is worth establishing a hierarchical view of modern applications (as shown in figure 2).

In this blog post, we will focus on the backend monitoring. As a result we are skipping techniques such as synthetic transactions, or methods used for monitoring user interfaces such as mobile apps.

The category is also referred to as Objective-oriented monitoring

For backend monitoring, the service-level monitoring approach starts by auto-discovery of services i.e grouping of functionally equivalent instances. The dependency among services is captured using techniques such as network communication analysis or distributed tracing. Once services and their dependencies are established, service-level monitoring is able to establish a topology map of the application (see figure 3).

Figure 3. An Example of Application Topology Map in Netsil Application Operations Center (AOC)

In an application topology map, each node represents the service and each edge represents the dependency between the services as determined by network communication. With this topology map, operations teams (Site Reliability Engineers (SREs), DevOps engineers, DBAs, etc.) can easily define Service-level Objectives (SLOs) for golden signals such as service latency, throughput, error rates and saturation. The importance of service-level monitoring has been highlighted by many famous SRE practitioners including Brendan Gregg at Netflix, Kyle Brandt at StackExchange and in the Google SRE bible.

The category is also referred to as Diagnostic-oriented monitoring

 This is the traditional monitoring which involves gathering logs and metrics from individual instances (application code, VMs, containers, etc.) and underlying hardware components. While service-level monitoring tracks SLOs, the instance-level monitoring is needed particularly for diagnostics. After all, services are an abstract grouping and for diagnosing the health of services we need metrics for underlying instances and their runtime environments.

The primary evolution in the instance-level monitoring has been the application of time-series database and stream processing techniques to handle the exponential growth in metrics, improve the metrics resolution to sub-second collection and deliver powerful real-time analytics engine.

Another categorization of monitoring approaches involves whether the monitoring technique requires changes to the application code or not. The techniques that require code changes, either at implementation or at run time, can be categorized as white-box monitoring. Some popular techniques in this category include:

As you might have guessed, these set of techniques do not involve changes to the code. That means neither code change at implementation nor at the run time. The options to gain insight into an application without any code change include:

We promised to boil all this complexity into the omnipotent 2x2 framework. Figure 4, captures the monitoring techniques categorized into: black-box vs white-box and service-level vs instance-level. Few important points to note:

Finally, a note on the companies mentioned in the framework. Companies and their products leverage a combination of monitoring techniques. So even though companies are mentioned as an example in one category, their offerings might deliver value from multiple techniques. Netsil, for example, uses a combination of network packet capture to auto-discover services and uses other agents to collect instance level metrics such as docker container statistics. So Netsil is able to provide both service-level as well as instance-level insights.

With the simple 2x2 categorization, let’s explore how it can be used by dev and ops personas to evaluate the many choices in monitoring techniques.

There are two simple factors that can help map the above framework to personas and select the right set of monitoring products.

In short, service-level + black-box monitoring techniques are ideal for ops teams focused on health and performance of many production services. Whereas instance-level + white-box techniques are more meaningful for dev teams interested in performance and health of individual services at the code-level. Both the personas can drill-down to instance-level metrics for diagnostics, capacity planning, etc. And both dev and ops teams can use white-box distributed tracing mechanisms for insights into individual transactions flowing through the application.

Our goal with this post was to provide a simple framework to help navigate and choose the right monitoring techniques. At Netsil, we have pioneered a powerful, elegant approach that is a combination of:|||

A framework that is helpful in understanding the fundamental techniques and value offered by various application monitoring products.