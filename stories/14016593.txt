If you follow emulation news, here's a story you've probably heard. Nintendo releases a brand new Legend of Zelda game for a young console. It is immediately heralded as one of the greatest games ever made. Reviewers give it perfect marks. It is, definitively, the best reason to own Nintendo's new hardware. And mere weeks after its release, when buzz was at its highest, a PC emulator was able to run that massively popular game—The Legend of Zelda: Ocarina of Time—making it playable without Nintendo's hardware.

Last week I wrote about the the authors of Wii U emulator Cemu have made in supporting Nintendo's new Zelda game, Breath of the Wild. In just a few weeks, they've solved the game's biggest problems and made Nintendo's latest hit playable in an emulator. And I've watched Cemu's amazing progress stir up debate about the legality of emulators and their connection with software piracy. Some fans seem more invested in the debate than usual, and that's understandable—Zelda is the Nintendo Switch's flagship launch game, and some see the emulator as a path to piracy robbing Nintendo of potential software and hardware sales.

This exact scenario played out in early 1999 with an emulator named UltraHLE and Nintendo's brand new Ocarina of Time, which was immediately the reason to own an N64. Then, the UltraHLE devs after just a few days and Nintendo later , but none was ever taken. So far, Cemu has faced no public legal threats, but there's a modern wrinkle that complicates the legal and ethical debate around Breath of the Wild's emulation: Cemu's $24,000 in monthly donations .

I decided to talk to people who make and work on emulators to get their perspective on the ethics of emulation today: emulation's relationship with piracy, open source vs. closed source development, and what happens when money enters the picture.

The eternal ethical dilemma for emulator developers is simple: if they build it, the pirates will come. The emulation experts I spoke with all considered this a negative, but didn't see piracy as a reason to stop developing emulators.

"Emulation does enable piracy, unfortunately. There's no denying that," author Byuu wrote to me over email. "But it also enables fair use. It's essentially the same argument as you'd make for a gun, a knife, or a car."

 Byuu pursues emulation development to preserve games, and has famously created an essentially perfect SNES emulator called bsnes (now rolled into higan). If you're not well-versed in emulation, that's more impressive than it sounds—it takes a modern 3+ GHz CPU to perfectly emulate the SNES's 3.58 MHz chip, which is why virtually every other emulator relies on hacks and tricks to emulate games at playable framerates on PCs. Only the eagle-eyed will spot differences between good and perfect emulation, but it's an important distinction for preservation.

Byuu has been collecting every Super Nintendo and Super Famicom game in existence for several years as part of his , which involves dumping games to ensure he has a collection of ROMs with no errors, and scanning boxes and manuals at high resolution. Preservation is also the focus of Frank Cifaldi, who once worked at GameTap and more recently helped produce and consult on the .

"Piracy is wrong," Cifaldi said when we talked over Skype. "It does hurt the industry. But I don't think blaming emulation is the way to go on that.… I can go buy rat poison right now. That doesn't mean I'm going to make someone drink it. So blaming the existence of emulation for piracy, I don't buy it. I don't buy that argument."

The Legend of Zelda: Breath of the Wild presents a high profile case the emulation world hasn't seen in years—since Ocarina of Time, really. With the launch of the Switch, some worried fans might argue that, ethically, emulator authors should wait until the game isn't on sale, when emulating it wouldn't have as direct a potential impact on Nintendo's software and hardware profits.

 Cifaldi disagreed. His counter to that argument? If developers wait 10 years, people might not be interested anymore.

"People are psyched to do it right now, and they might not be in 10 years," he said. "I have a hard time weeping for the financials of a gigantic publicly traded company. So I'm not upset that someone might emulate Breath of the Wild illegally."

Byuu said he finds it "far more ethically acceptable to emulate systems and games that are no longer for commercial sale," but ultimately had the same bottom line: emulation needs to start as early as possible to have the best chance at preserving a system's functionality and its games.

"Ethically, it's clear that copyright has been subverted for corporate interests and now acts against the public interest," he wrote. "I strongly agree with Harvard professor Rufus Pollock's analysis that the optimal length for copyright to serve the public interest is, at best, fourteen years. I do believe in civil disobedience, when the price of not doing so is the loss of our gaming heritage. I don't want to see gaming end up like movies, where most of the first fifty years' works have been lost to time. Yet with the way things have been going in recent years (DRM, DLC, required online components, etc), I do believe we are going to end up with a large gap of games that are just *gone* in the future."

It's impossible to prove how many people pirate games for the sake of emulation, but there are still countless ROM sites distributing games that have been on sale on Nintendo's Virtual Console or in re-releases like the Mega Man Legacy Collection. In Breath of the Wild's case, many illegal downloads could be headed for hacked Wii U consoles. developer Pierre Bourdon, who goes by the handle delroth, actually argued that a very small fraction of the gaming audience uses emulators. In the latest stable release of Dolphin, the development team added an opt-in dialogue that users encounter when they first run the emulator, asking to collect anonymous data. Obviously some users will decline, but Bourdon told me their numbers indicate around 50,000 daily users. For comparison, Nintendo sold around 20 million GameCubes and 100 million Wiis. If half of Dolphin's users opted in, that's still less than one percent of the console audience.

Cifaldi and Bourdon both argued that the games industry's villainization of emulation is why it's so closely linked to piracy. "Had we as an industry embraced it instead of fighting it, we could have sold it to consumers as the wonderful tool that it is as opposed to having to defend ourselves when we use it to republish old games," Cifaldi said. Bourdon made a more technical argument: when new console hardware arrives, emulation is not the initial tool that enables piracy. It always follows piracy.

"Having open access to a console is pretty much a requirement to make good progress on emulating the system. Without it, you can't do any advanced reverse engineering and figure out how the intricacies of the system behave. And, as it turns out, having open access to a console tends to lead to piracy extremely quickly (and it becomes easier and easier over time, with e.g. custom firmwares replacing modchips).

"Piracy on the Wii U has been doable for close to 1.5 years already. At that time Cemu was just getting started and hadn't released their 1.0.0 version yet. If you own the hardware, it's so much easier to pirate a game than to play it on an emulator. Less technical fiddling, more stability, etc. That's doubly true on extremely new emulator projects. Nobody serious would recommend doing your first playthrough of BotW through Cemu at this time, you'd be spoiling your experience."

Despite their staunch support for emulation as a whole, the developers I talked to had some serious ethical qualms about Cemu's closed source development. Cemu's sudden explosion of popularity creates a possibility, though a small one, that the rest of the emulation scene could be at risk.

During the life of the Wii, Dolphin was an active, high profile emulator that could often run new games with minor performance issues. The last major Zelda game, Skyward Sword, was in better shape on Dolphin weeks after launch than Breath of the Wild currently is on Cemu. Nintendo never threatened a lawsuit then, so why would they now?

Maybe they won't (a Nintendo representative did not respond to a request for comment for this story). But there are differences that make it more likely: money and openness. While some in the industry wring their hands over piracy, these are the ethical issues the emulation community grapples with internally.

 Bourdon told me that the Dolphin dev team prides itself on not taking donations, because as soon as money is involved, there could be pressure to solve a certain user's bug submissions first, or tackle a game a big donor really wants to see emulated. More importantly, though, Dolphin is open source, and entirely the product of "clean room reverse-engineering," which means none of Dolphin's code is based on technical information covered by Nintendo non-disclosure agreements.

Being an open source project may have saved Dolphin from legal threats in the Wii years. Anyone, including Nintendo, can see the entirely of Dolphin's source code laid bare, making it much easier to spot proprietary code or suspicious improvements illegally gleaned from private company material, rather than legally reverse-engineered.

"You can save a lot of time if you ‘cheat’ and look at proprietary documentation (console SDKs, leaks, etc.) while trying to understand how a console works," Bourdon explained. "This is in general frowned upon in many emulation projects: it puts the whole project at the risk of a lawsuit. It's one of the things where we have no doubts about the legality: it's clearly illegal. With open source projects the development process is usually very open. If I were to take Dolphin as an example, we talk about everything in public, we do code reviews in public, etc. That doesn't guarantee that our contributors don't look at this documentation in secret, but it makes it harder to do so. And we have a clear stance against it: I've personally banned multiple people from interacting with us because they made it clear when talking with us that they based their work on illegally obtained documentation."

This is what makes Cemu controversial, even in the emulation community. We don't know what the source code looks like, or what kind of information the developers have used to reverse-engineer the Wii U. And the developers aren't talking (a Cemu dev declined an interview for this story).

"For a closed source project, the only thing that can be seen from the outside is the end result," Bourdon said. "The process is completely opaque. And this leads to a lot of concern about whether these projects end up taking shortcuts by looking at proprietary documentation. After all, who is going to notice? This puts the project at risk: if they were to get sued, the lack of diligence in the process would almost certainly be found through discovery (which would expose their source code, communication logs, etc.). But also it is bad for the ecosystem because closed source alternatives could end up having an advantage on the open source alternatives. Users tend to not care about long term problems like 'is this emulator going to still work 5 years from now.'"

More than a year ago, Cemu developer Exzap explained why the project was closed source , claiming it makes it easier to progress quickly, and keeps the direction of the project under his control. Part of the explanation sounds noble: "online features are of low priority to avoid people using the emulator to cheat in online-play and ruin the experience for everyone." But other parts speak to the exact issue other emulation developers take with closed source development: "being slightly reluctant to share the code with people who have no respect for the effort and time it took to get this far."

That argument doesn't hold up when you consider who will be most interested in that code: other emulation developers.

Sharing knowledge is important in the emulation community, Bourdon said. Dolphin has shared code with other emulators, and he says he looks at the code of other open source projects for inspiration. "Many people contribute to multiple emulators and spread the good practices around. If you look closely, you'll find that many emulators share the same internal architecture. It's easy to say 'well, that's because it's the obvious architecture to use'—I'd argue it's only obvious because people standardized on it in the first place… Having closed source projects in that space breaks the symmetry of information sharing.

Suddenly, you have people that get all the benefits from what is shared by other projects, but don't give back to the community."

Byuu, whose emulator development is all open source, had harsher words. "Very few emulators are entirely independent works," he wrote. "Cemu may or may not enjoy that distinction, but most emulators do not. Most emulators are built on the work of dozens of people before them reverse-engineering hardware, writing documentation, and releasing source code. I find it incredibly selfish to benefit from all of the work done before, and yet not share in return. It reminds me of someone who would see a 'take a penny, leave a penny' tray, and decide to empty the entire tray into their pocket, just because they could."

The potential negatives of closed source development aren't entirely theoretical, either. Byuu wrote that Sega Saturn emulation "suffered for a decade" due to a cycle of closed source development, and Bourdon noted that many emulation projects that claim they'll go open source when abandoned or completed never make that transition, making it impossible for others to continue the work. covers just how difficult it can be to sort out open source licenses.

It's possible, of course, for a closed source emulator to achieve the same goal of preservation that emulator authors like Byuu strive for. It's just far less likely, and ultimately riskier for the emulation community. Likewise, closed source development can be completely above board, but right now only Cemu's developers know how clean their code is.

So let's say Nintendo decides Cemu is too big a threat to their profits to ignore and files a lawsuit. What happens then? In online discussions, the common wisdom is that emulators fall into a "legal gray area," but I wanted a more nuanced understanding of the law than that, so I asked lawyer Mark Lorbiecki to help me understand where emulators stand in the shaky world of copyright law.

Around the turn of the century, Sony tried to sue the makers of two emulators, Bleem! and Virtual Game Station, which were both sold as retail products. Sony lost both cases. In the first case, Sony v. Connectix, a district court initially found that Virtual Game Station tarnished Sony's brand and violated its copyright. A circuit court reversed those rulings and kicked the case back down to the district court, which dismissed most of Sony's charges, including violation of trade secrets and unfair competition.

These cases form the basis of how we understand the legality of emulation today: as long as an emulator does not reuse code and is the product of reverse-engineering, we assume it falls under fair use, which protects the unlicensed use of copyrighted work in very specific circumstances . Emulators like the PS2 emulator PCSX2 don't include the BIOS files needed to run games, because that's protected by Sony's copyright; you have to dump the files from your own console or download them (illegally) online. But the back-and-forth between the district court and the circuit court shows where the whole "legal gray area" claim is actually pretty true. The law isn't as cut and dry as you might expect.

As Mark Lorbiecki of explained to me over email, it's really important to understand the difference between copyright and patent law, and what applies here. As he wrote: "Software is copyrighted. Copyright protection extends only to the expression of an idea—not to the underlying idea itself. That is the difference between patents and copyrights. This distinction—commonly referred to as the 'idea/expression dichotomy'—is codified in § 102(b) of the Copyright Act, 17 U.S.C.S. § 102(b), which provides that in no case does copyright protection for an original work of authorship extend to any idea, procedure, process, system, method of operation, concept, principle, or discovery, regardless of the form in which it is described, explained, illustrated, or embodied in such work."

So if an emulator author can reverse-engineer the process or concept of the original code without using that code, they're likely in the clear. But courts have different outlooks on copyrighting computer code, and the Supreme Court has never given a ruling on these issues for lower courts to follow.

"Circuit courts have struggled with, and disagree over, the tests to be employed when attempting to draw the line between what is protectable expression and what is not," Lorbiecki wrote. "When assessing whether the non-literal elements of a computer program constitute protectable expression, the United States Court of Appeals for the Ninth Circuit has endorsed an ' ' test formulated by the United States Court of Appeals for the Second Circuit and expressly adopted by several other circuits. This test rejects the notion that anything that performs a function is necessarily uncopyrightable."

So, in other words, a court could rule that code counts as original expression, and original expression is protected by copyright. That's exactly what happened in Google closely mimicked 37 Java APIs in Android, and the court ruled those APIs were entitled to copyright protection. But the key difference is that the Oracle v. Google case was about the copyrightability of code rather than the fair use of that code. Google didn't reverse-engineer the Java APIs, but rather mimicked their structure.

When the court ruled those APIs were actually protected by copyright, Google had no choice but to argue fair use, which wasn't a great fit for a case about APIs . But it worked: in 2016, a jury found that Google's reimplementation of the API code constituted fair use, which meant Oracle's copyright couldn't be enforced. If the verdict had gone the other way, it would've had huge repercussions for the technology industry, as reimplementing APIs is a common practice.

An emulator hasn't faced a court case that dives this deep into the "original expression" analysis of a game console's code, but the protection of fair use was applied in Sony v. Connectix. Connectix didn't mimic the original code: they reverse-engineered the code to see how it functioned, which in legalese is called "intermediate copying," then wrote their own code to accomplish the same functions. This 2001 analysis of the case does a good job of explaining the reasoning and impact of a fair use decision:

"The Ninth Circuit's analysis supports the efforts of software developers who use intermediate copying and reverse engineering so long as their efforts meet certain minimum standards. First, the copying must be 'necessary' in order to be secure in the shelter of the fair use defense. This point was set out expressly in the Sega decision. Second, the end product must not contain any of the original work's protected elements. Where the end product contains protected expression a developer has moved from the safety of the intermediate copying category into 'direct' copying. This will likely result in the fair use factors shifting towards a finding of infringement.The work must also be transformative. The Connectix decision makes it clear that the transformative quality is critical to the analysis of statutory factors one and four. Transformativeness is especially important given the commercial nature of the products involved in these cases because it can be used to offset the commercial harm that results from the copying. The fair use defense will most likely fail where the product is found to be non-transformative. For example, a company that develops a clone of a competitor's product via reverse engineering will likely be determined to be infringing even where the copyrighted software was only used in an intermediate fashion."

As long as a finalized emulator doesn't include the original code, then, it would likely be considered fair use, as Connectix's Virtual Game Station was. Nintendo could easily look at an open source emulator like Dolphin and verify that it's not using the original code without ever launching a court case. But what about with a closed source emulator? That could require a lawsuit, and it's tough to know in advance whether fair use would apply.

If a closed source emulator like Cemu were actually created by studying Nintendo's Wii U documentation or source code, that would likely not be considered fair use. If "Cemu used actual code (if Nintendo can prove the use of Nintendo code), their emulator is illegal," Lorbiecki explained. "If Cemu were to argue that they saw the Nintendo code, studied it, and then changed it by writing different code that performed the same tasks, that would be derivation and carries the same penalty as copying. If Cemu simply derived the code by examining how the code functions without seeing the actual code and writing their own code to perform those same functions, that is probably legal."

Cemu's Patreon may matter from an ethical standpoint, then, but it doesn't make the emulator any more or less illegal; even if you argued early access to builds counted as "selling" the emulator, sale isn't necessary for Nintendo to go after a copyright claim. After all, Sony lost to Connectix, which was selling its emulator in stores: according to the above analysis, "the court acknowledged the potential for decreased sales of the Play Station but found that it was outweighed by the transformative nature of the Connectix product." The only likely effect of the Patreon is drawing attention.

Even if we knew the provenance of Cemu's code, we couldn't say for sure how a legal case would play out. Our understanding of copyright law in the US is still evolving, as the back-and-forth in the Oracle v. Google case shows. Oracle appealed the decision mentioned above, and a new ruling on fair use could have an impact on a future emulator case. Sony v. Connectix's interpretation of fair use seems like a strong protection for reverse-engineering console code, but it may not be forever.

Ultimately, that's the big fear in the emulation community. That a court case could go the wrong way, endangering not just one emulator, but all of them. For programmers in it for the technical challenge or the preservation of gaming history, you can see why the ethics of emulation are so important. Stay out of ethical trouble, and the rest of the emulation community can hopefully stay out of legal trouble, too.|||

If you follow emulation news, here's a story you've probably heard. Nintendo releases a brand new Legend of Zelda game for a young console. It is immediately heralded as one of the greatest games ever made. Reviewers give it perfect marks. It is, definitively, the best reason to own Nintendo's new hardware. And mere weeks after its release, when buzz was at its highest, a PC emulator was able to run that massively popular game—The Legend of Zelda: Ocarina of Time—making it playable without Nintendo's hardware.Yeah, this happened 18 years ago.Last week I wrote about the shockingly quick progress the authors of Wii U emulator Cemu have made in supporting Nintendo's new Zelda game, Breath of the Wild. In just a few weeks, they've solved the game's biggest problems and made Nintendo's latest hit playable in an emulator. And I've watched Cemu's amazing progress stir up debate about the legality of emulators and their connection wit