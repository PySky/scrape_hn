nudge4j is a piece of java code to let you hack your JVM from the browser.

There are many valid reasons to use it during development, and one, for sure, it’s because it’s fun.

But there are others.

Use nudge4j as an expression evaluator to explain your son / daughter / friend / colleague how a given class works.

Say you have written a Java library or API. Then write a snippet of code in nudge4j to see it in action. Better than that, invite your colleague at your desk and ask him or her to suggest changes and try things out, on the fly. No need to recompile any demo code, simply play from the browser.

Aside from your existing unit tests, regression tests, integration tests, … you can keep a snippet of nudge4j code to exercise some of the key functionality, maybe before pushing for the final release.

If it works, great. If it fails, you can hack your way because you are already in the JVM.

If you read 1, 2 and 3 you know that nudge4j can interact with any java object through its public API. But what if you want to get deeper than that ? What if you want to access private fields of an object ? It turns out that with a bit of ‘reflection’ you can easily get there. Sometimes you might not need to turn to a debugger after all.

Here we go, I gave you four reasons to use nudge4j that I thought of on a tube journey that ended up being longer than usual. Let me know if you can think of more.

Thanks for reading this.|||

Use nudge4j as an expression evaluator to explain your son / daughter / friend / colleague how a given class works. Say you have written a Java library or API. Then write a snippet of code in nudge4j…