This post is the second of a two-part series on using Vault in production. Both posts are slightly redacted forms of internal documentation. This post covers day-to-day usage of Vault, while the previous post covered our specific workflow.

Please note that some of the referenced tooling is not currently publicly available.

This is the tl;dr you were looking for…

Developers should expect credentials to live in environment variables that can be loaded into an app when needed. These credential names are specified within an manifest file, and Ops should be contacted to place their values in Vault. The deploy process currently uses the vault api to retrieve appropriate credentials for a service, transparent to the development staff.

The basic flow for reading or writing credentials is the following:

Secrets accordingly to the following convention:

Upon success, a Vault token will be stored at .

This will use the token at if it exists. Otherwise, you will need to login via first.

This will use the token at if it exists. Otherwise, you will need to login via first.

This will use the token at if it exists. Otherwise, you will need to login via first.

is used to bootstrap a new Vault cluster. This generates a number of keys and requires a majority threshold of these keys in order to unseal Vault (more on unsealing below).

For SeatGeek’s Vault cluster, has been run as follows:

Initializing Vault this way leverages its support for authorizing users to be able to unseal Vault via their private GPG keys. This method was chosen as we already using blackbox to encrypt secrets within certain repositories.

When vault is initialized, an unseal tokens are printed out for each pgp key specified. The order of these keys matches the order in which the pgp keys were specified, and each can only be decrypted by the corresponding pgp key. Those unseal tokens should be securely distributed to the corresponding operations engineer and stored in a secure fashion. Loss of keys exceeding the threshold will result in a loss of ability to unseal the cluster.

Vault should only need to be reinitialized if all of the data in lost, which for SeatGeek would be in a loss of the Consul Cluster.

Vault boots up in a state, and in this state no requests are answered. Each machine within a Vault cluster can be in a or state, and all must be unsealed before answering any requests. There is also a state, in which the machine is unsealed but not primary, and is ready for failover if the currently active primary dies.

A Vault machine can be unsealed via the following command:

The is specific to each user who was specified in the command. All unseal keys were distributed at the time of initialization.

An initial root token is created when the Vault Cluster is initialized. Other root tokens are created from this token, and as such, if a root token is needed it must be created by an existing holder of a root token.

A new root token can be created from an existing root token via the following command:

In the emergency case that a new root token needs to be created, the following command can be run:

This operation requires a majority of unseal key holders to execute.

When provisioning a new service, secrets can simply be written to the appropriate bucket ( ). Everything under is a “key” and all necessary paths will be created.

On first boot of infrastructure, the Jenkins Whitelist deploy job, a dependency of the Jenkins Configure job, will be run. If not already, the new application will be created and its corresponding IAM Role will be whitelisted. This job also ensures all other IAM Role whitelists are up to date in Vault.

To ensure that Jenkins has the correct permissions, a special role allowing it access to write auth and policy documents should be written to Vault. The following can be used to create the policy, which is stored with all other custom vault policies:

Policies must be audited on a regular basis, consistent with all other internal auditing processes.

When used in contexts that do not easily support passing roles, you can create a vault token for this or any policy. The following creates a renewable token that is valid for 60 seconds:

Vault’s usage of unseal keys is based on Shamir’s secret sharing algorithm.

The command allows for the recreation of unseal keys as well as changing the number of key shares and key threshold. This is useful for adding or removing Vault admins.

The command is used to change the encryption key used by Vault. This does not require anything other than a root token. Vault will continue to stay online and responsive during a operation.

In the case of an emergency, Vault should be sealed immediately via:

This will prevent any actions or requests to be performed against the Vault server, and gives time to investigate the cause of the issue and an appropriate solution.

If you think these kinds of things are interesting, consider working with us as a Software Engineer at SeatGeek. Or, if backend development isn’t your thing, we have other openings in engineering and beyond!|||

This post is the second of a two-part series on using Vault in production. Both posts are slightly redacted forms of internal documentation. This …