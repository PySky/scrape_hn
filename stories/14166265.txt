While I love Elixir and Phoenix, my current daily, pay-the-bills language at Planning Center is Ruby and Rails. We create a lot of React.js components as well and I really like working with React. So it is an obvious transition for me to want to use React components in my Phoenix applications as well.

Every time I started a new Phoenix application, it took me quite a while to remember how to get everything set up in Phoenix in order to display a React component. Beyond that, most of the tutorials I found that dealt with React and Brunch (vs Webpack) only rendered a single component. I’m more interested in React sprinkles in my app and the global rendering on every page load wasn’t working for me. I saw a hole in the current offerings of packages dealing with Phoenix and React and I decided to fill it.

I created a package named react_phoenix to make it so much easier to get React components into your Phoenix views. It is heavily inspired by the react-rails gem that I use every day. I wanted something with as little installation pains as possible and that got out of my way when all I wanted to do was render a component in a view. Here’s how it works.

To begin with, your Phoenix app should already have React installed as a dependency. Beyond that, I recommend that you have a couple of Babel presets installed and active as well in order for brunch to know how to compile those javascript component files.

Activate the presets in by adding this to your file.

I tried to make the README for the package detailed as I could in this part, but I’ll mirror it here. I should state that as of this writing (and the official public unveiling), the package is at version 0.3.0, which is what these steps pertain to. It is unlikely this part will change much in the future, but just in case, you may want to check that README if things don’t seem to be working. Also, we will be using Phoenix 1.2. I haven’t tested this in Phoenix 1.3 quite yet.

Add ReactPhoenix as a dependency in your file.

Add the included javascript helper to our file (in the dependencies section).

Import the javascript file into our bundle.

Sometimes it’s nice to be able to call just the function name and not the full name of the function that includes the module name. In order to do so, edit your file and add an for ReactPhoenix.

Now that we have everything set up, let’s render some React components. Create a simple component we can use to make sure things are hooked up correctly. In :

Let our javascript environment know that this component exists and we’d like to make it available in .

Use ReactPhoenix to render this component in a Phoenix view:

Here we are telling ReactPhoenix that we’d like to render a component registered as (which we did in ) and pass it props of .

And that’s it! You should be able to reload your view and see your React component lovingly rendered with the specified props.

I took a quick video of me setting up a new Phoenix app and getting React in it with ReactPhoenix. I go from to getting a React component rendered in a view in 4 minutes (including typos!).

I’d love to keep expanding this and making it better. I’ve already got it working in a Phoenix app that does server-side React component rendering (using a couple of other packages and the option in ) but there are ways I can make this even better. PLEASE reach out to me with any issues or suggestions you have to make it better, easier, more robust, faster, whatever. I’d love to hear them.

You can check out the hex docs at https://hexdocs.pm/react_phoenix/readme.html and see the code on GitHub at https://github.com/geolessel/react-phoenix.

Get in touch with me on twitter at @geolessel and @geo in the Elixir slack group. I also have a newsletter that I’d be grateful if you signed up for below. I have some fun ideas brewing that I’d love to keep you informed about in the future. Thanks!|||

