Soon our cars will be semi- or fully autonomous. That will require the best minds on the planet, engineers and A.I. experts, to write highly error proof and secure code. Current computer languages are close, but earn no cigar and weren't designed for Apple's needs. What better than for Apple to invent its own language, Swift, and get the whole world to test it first?

Let me tell you a story....

One of my favorite military aircraft of all time was the Lockheed F-104 Starfighter. Take a great aluminum airframe, insert a powerful (for its time) J-79 turbojet engine, add analog instruments and radios, and include a 20 mm cannon, and you had a Mach 2 beauty of an air superiority fighter. But that was 1958.

Lockheed F-104 from the 1950s. Not a computer on board. But fast.

Today, the Lockheed Martin F-35 Lightning II has over 8 million lines of code to debug and certify. That has caused many, many delays in the operational status of this aircraft. But this kind of evolution was inevitable in aircraft and is now coming to our cars.

For example, in 1969, a Ford Mustang Mach I had a V-8 engine with a simple carburetor, a 4-speed transmission, drum brakes and a few instruments on the dash. (Zero airbags. Zero computers.) Lately, however, computers have been more and more a part of our automobiles. The article I'll link to next mentions that a current day Ford F150 truck has 150,000 lines of computer code. One can imagine an autonomous car from Apple in 2020 having several million lines of code. Hopefully, it'll all just work. ::gulp::

One has to wonder, I do, if Apple's Swift programming language was a necessary precursor to the "Titan" electric car Project. See, for example. "Interview: How to Write Secure Software, Guaranteed."

In that interview, I asked the CEO of Galois, Dr. Rob Wiltbank, whether some languages are better for secure code.

Dr. Wiltbank: There are definitely better languages. We happen to use one called Haskell. The reason is that Haskell is a very strongly typed language that forces constraints, and it checks for things along the way that have to do with how you express your intentions to the system. [emphasis added.] As a result, there are certain expressions that you cannot communicate to Haskell in an unclear manner. Martellaro: I read that Apple's Swift language has some of its roots in Haskell. Dr. Wiltbank: Yes. And Apple is definitely doing more and more with this kind of stuff. That is, eliminating design bugs very, very early in the process. Before you've even written a single line of code.

Of course, it's just a theory. But I ran across a CES article that makes me think it's a good one. Here's an article that echoes my thinking on computer technology and cars. "Self-driving cars won the week at CES 2016, with AI and big data the unsung heroes." To quote:

It's a whole new game, and Apple appears to be betting that is can be one of the companies whose DNA can be included in the short list above along with Google and Tesla. Some traditional car companies won't have the technical and financial resources to keep up and will fade from view.

Future highly computerized autonomous cars will look the same on outside,

 but be very different on the inside.



However, Apple's unique technology history and expertise puts it into a perfect position to forge a new marriage between computers and cars, just as aerospace companies already have done with computers and jet aircraft. [Note, Apple has James A. Bell, former president of the Boeing Company on its board.] That evolution would include, I surmise, creating a much improved programming language, Swift, and getting thousands of developers write and test millions of lines of code before it ever appears in an Apple car.

Next: The Tech News Debris for the Week of January 11th. Science, analysis and bozos.|||

Soon our cars will be semi- or fully autonomous.  That will require the best minds on the planet, engineers and A.I. experts, to write highly error proof and secure code. Current computer languages are close, but earn no cigar and weren't designed for Apple's needs. What better than for Apple to invent its own language, Swift, and get the whole world to test it first?