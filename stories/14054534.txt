Well, you’ll be pleased to know, this has already been done and is being done. It was an idea put forward by GE many many years ago. Decades ago. With a view to improving performance. The aim is to fire the bottom 10% or so, lowest performing staff. However, the effect is definitely not what you think it is. It is a false economy.

Microsoft did this under Steve Balmer. It became a horrific place to work! The results are not what you think and Microsoft lost so much ground! The worst years of Microsoft’s life were under Balmer. Never give operational control to a salesman, ever, on anything. Or more pertinently:

Any time someone has imposed such a scheme, people start to panic. What panicking does over time is encourage horrific, disingenuous, back-stabbing behaviour from staff. In the melee, some good staff, the ones you don’t want to lose, will also leave citing the pressure culture and dishonest behaviour, because they know they can get work elsewhere.

How does that happen?

You, as a boss, like I, as a boss, have to evaluate the work of people to determine what “average” performance means. In addition, there are people out there who are constant scaffolding to everyone else. You have to watch out for them, but not because they’re trouble. Because you could be trouble :)

Their individual productivity looks poor, but they’re natural givers. You fire them, as Microsoft did, then the teams they are in, literally collapse overnight. You actually fired the most productive member of the team, who is shoring up everyone else. Plus, we haven’t started with the politics yet :) If you need more info on the psychology behind this, I recommend watching this TED talk by Adam Grant. The most accurate thing I’ve seen to date on the matter.

As time progresses, people need to find ways of staying out of the bottom 10%. They have to learn stuff faster than than they can outstrip the bottom 10% line catching up with them. Sounds easy right? Not so. New developers who are top rung create a step change in capability which shifts the average up by some margin. Let’s do the math to exemplify.

Fire below average. That is everyone until 43. So 6 people. You now have a dev team of 4 instead of a team of 10.

New average = 60.25 (Mr/Ms 43 - 52 are looking pretty ominous now)

This creates a massive step change from the original 41.6. You think “great! Better performance”. Not so fast.

Where 360 degree reviews have been used in such a context, together with the threat of dismissal, what has been found is the bottom half will start to throw the average or even most capable, under the bus, to save themselves. They game the system through tactical voting. After all, there are very few top end developers and a basic, unweighted 360 process is one person, one vote, which immediately becomes non-meritocratic. The mob of mediocrity votes against the elite in an attempt to save itself.

If you have ever watched the Weakest Link, it is literally that sort of tactical voting. This happened to Microsoft and initially led to people being poached by Microsoft’s competitors. The way Microsoft solved that, wasn’t to get rid of 360’s and improve its culture, it was to add anti-poaching/anti-competitor clauses to their contracts [allegedly]. So if anyone was fired through this 360 process unfairly, they could not take up a role at another large tech company! Which added even more pressure on to staff, as poor developers who knew they were poor, knew they couldn't get work elsewhere and startups wouldn't hire them either. Also, that is unfair practise on a grand scale. Something that would be shot down here in Europe and the UK (for as long as the UK is in Europe) as it breaches workers rights.

In any event, it’s counterproductive, as it leaves organisations that tried this with all the weakest developers! If this happens, your very best developers may also leave in disgust (I’ve done that before myself). Furthermore, as you get past 50% of the market average, it get harder to recruit. It is, after all, a statistical (usually normal, but often skewed) distribution. That means you have to find more and more people, from a smaller and smaller pool, in a general population which stays roughly the same, or increases at a slower rate. Hence, you have to offer significantly higher salaries every time.

Sadly, some managers who employ this technique think developers are two a penny, and they're all equally capable, which they're not! The frequency of top end developers (say, the top 3%) in the population is low. After all, why are they firing below average if everyone is the same and replaceable? It is a totally absurd position. They're all equally capable, so the average is the same, but they want to fire the below average? Who's the below average if everyone is 50%?

Hence, you’re then stuck with your worst developers who will form a clique and do anything to protect themselves, including vote out new developers. It decimates teamwork and leads to what’s called the Dead Sea Effect.

"Many large IT shops... work like the Dead Sea. New hires are brought in as management deems it necessary. Their qualifications... will tend to vary quite a bit, depending upon current needs, employee departure, the personnel budget, and the general hiring ability of those doing the hiring. All things being equal, the general competency of the IT department should have roughly the same distribution as the incoming hires. Instead, what happens is that the more talented and effective IT engineers are the ones most likely to leave -- to evaporate, if you will. They are the ones least likely to put up with the frequent stupidities and workplace problems that plague large organizations; they are also the ones most likely to have other opportunities that they can readily move to. What tends to remain behind is the 'residue' -- the least talented and effective IT engineers."

Your organisation is going to suffer badly for that, as Microsoft did. Not least because of…

New Developers and the Productivity Hit

The problem with new developers, however technically competent they are, is they do not have knowledge of the platform, the code style, or the business domain your organisation operates in, on the day they start and for the short-term. The weak developers you’ve fired, for no misconduct, do and you threw them out. Research has time and time again, proven that the productivity hit to the company, of replacing a lost average employee, is a third of their salary (in unproductive time, recruitment costs, management time etc.). Effectively, the organisation and the work go through a context switch and as we know, there is no such thing as a zero-cost context switch.

Hence, in our previous example, if developers are fired, each earning $100,000, they will each cost $30,000 to replace. Hence $210,000 in lost productivity. If this happens every month, not only may you fire developers who are new and thus, leave a clique of people, you will also lose $2.52 million just in the productivity hit, as well as delay your projects by the net effect of 3 months or so each time. In turn hitting your rate of return and hence, the return on investment.

So you can see, it isn’t a productive way to run a business. It’s a minefield! It’s also totally rubbish, even as a theory, because it isn’t grounded in anything useful, so was always bound to fail.|||

