TypeORM is an Object Relational Mapper (ORM) for Node.js written in TypeScript that can be used with TypeScript or JavaScript (ES5, ES6, ES7). Its goal to always support latest JavaScript features and provide features that help you to develop any kind of applications that use database - from small applications with a few tables to large scale enterprise applications. TypeORM helps you to:

TypeORM uses the Data Mapper pattern, unlike all other JavaScript ORMs that currently exist, which means you can write loosely coupled, scalable, maintainable applications with fewer problems.

The benefit of using TypeORM for the programmer is the ability to focus on the business logic and worry about persistence only as a secondary problem.

TypeORM is highly influenced by other ORMs, such as Hibernate, Doctrine and Entity Framework.

Also make sure you are using version 2.1 or greater of the TypeScript compiler, and you have enabled the following settings in :

You'll also need to enable in the section of compiler options, or install from .

TypeORM was tested with Node.js version 4 and above. If you have errors during app bootstrap, try to upgrade your Node.js version to the latest version.

TypeORM works in the browser and has experimental support of WebSQL. If you want to use TypeORM in the browser then you need to instead of . More information about it is in this page. Also take a look at this sample.

In TypeORM, tables are created from Entities. Entity is your model decorated by an decorator. You can get entities from the database and insert/update/remove them from there. Let's say we have a model :

Now we have a table, and each table consists of columns. Let's add some columns. You can make any property of your model a column by using a decorator:

Perfect. Now the ORM will generate a photo table for us with all its properties as columns. But there is one thing left. Each entity must have a primary column. This is requirement and you can't avoid it. To make a column a primary you need to use decorator.

Now, let's say you want your id column to be auto-generated (this is known as auto-increment / sequence / generated identity column). To do that you need to change your column's type to integer and set a in your primary column's options:

Now your photo's id will always be a generated, auto-increment value. Since creating a generated auto-incrementing primary column is a common task, there is a special decorator called to do the same. Let's use it instead:

Next, let's fix our data types. By default, string is mapped to a varchar(255)-like type (depending on the database type). Number is mapped to a float/double-like type (depending on the database type). We don't want all our columns to be limited varchars or excessive floats. Let's setup correct data types:

Now that our entity is created, let's create an file and set up our connection there:

We are using MySQL in this example, but you can use any other database. To use another database, simply change the type in the driver options to the database type you are using: mysql, mariadb, postgres, sqlite, mssql or oracle. Also make sure to use your own host, port, username, password and database settings.

We added our Photo entity to the list of entities for this connection. Each entity you are using in your connection must be listed here.

Setting makes sure your entities will be synced with the database, every time you run the application.

Later, when we create more entities we need to add them to the entities in our configuration. This is not very convenient, so instead we can set up the whole directory, from where all entities will be connected and used in our connection:

Now if you run your , a connection with database will be initialized and a database table for your photos will be created.

Now let's create a new photo to save it in the database:

Let's take advantage of the latest TypeScript features and use async/await syntax instead:

We just created a new photo and saved it in the database. We used to save it. Using entity managers you can manipulate any entity in your app. Now let's load our saved entity:

will be an array of Photo objects with the data loaded from the database.

Now let's refactor our code and use instead of . Each entity has its own repository which handles all operations with its entity. When you deal with entities a lot, Repositories are more convenient to use than EntityManagers:

Let's try to more load operations using the Repository:

Now let's load a single photo from the database, update it and save it:

Now photo with will be updated in the database.

Now let's remove our photo from the database:

Now photo with will be removed from the database.

Let's create a one-to-one relation with another class. Let's create a new class in . This PhotoMetadata class is supposed to contain our photo's additional meta-information:

Here, we are used a new decorator called . It allows us to create one-to-one relations between two entities. is a function that returns the class of the entity with which we want to make our relation. We are forced to use a function that returns a class, instead of using class directly, because of the language specifics. We can also write it as a , but we use as convention to increase code readability. The type variable itself does not contain anything.

We also add a decorator, which indicates that this side of the relationship will own the relationship. Relations can be unidirectional or bidirectional. Only one side of relational can be owner. Using this decorator is required on the owner side of the relationship.

If you run the app, you'll see a newly generated table, and it will contain a column with a foreign key for the photo relation:

Now let's save a photo, its metadata and attach them to each other.

Relations can be unidirectional or bidirectional. Currently, our relation between PhotoMetadata and Photo is unidirectional. The owner of the relation is PhotoMetadata, and Photo doesn't know anything about PhotoMetadata. This makes it complicated to access photo metadata from the photo objects. To fix it we should add an inverse relation, and make relations between PhotoMetadata and Photo bidirectional. Let's modify our entities:

is a function that returns the name of the inverse side of the relation. Here we show that the metadata property of the Photo class is where we store PhotoMetadata in the Photo class. Instead of passing a function that returns a property of the photo, you could alternatively simply pass a string to decorator, like . But we used this function-typed approach to make your refactoring easier.

Note that we should use on one side of a relation only. Whichever side you put this decorator on will be the owning side of the relationship. The owning side of a relationship contains a column with a foreign key in the database.

Now let's load our photo, and its photo metadata in a single query. There are two ways to do it -- either with or . Let's use first. The method allows you to specify an object with the interface. Using this you can customize your query to perform more complex queries.

Here photos will contain an array of photos from the database, and each photo will contain its photo metadata.

is a required property of . It's your own alias name of the data you are selecting. You'll use this alias in your , , , and other expressions.

We also used to inner join and select the data from . In , is an alias you used, and is a property name with relation of the object you are selecting. : is a new alias to the data returned by the join expression.

Let's use for the same purpose. allows us to use more complex queries in an elegant way:

We can setup cascade options in our relations, in the cases when we want our related object to be persisted whenever the other object is saved. Let's change our photo's decorator a bit:

Using allows us not to separately persist photo and separately persist metadata objects now. Now we can simply persist a photo object, and the metadata object will persist automatically because of cascade options.

Let's create a many-to-one / one-to-many relation. Let's say a photo has one author, and each author can have many photos. First, let's create an class:

contains an inverse side of a relation. is always an inverse side of relation, and it can't exist without on the other side of the relation.

Now let's add the owner side of the relation into the Photo entity:

In many-to-one / one-to-many relation, the owner side is always many-to-one. It means that the class that uses will store the id of the related object.

After you run the application, the ORM will create the table:

It will also modify the table, adding a new column and creating a foreign key for it:

Let's create a many-to-one / many-to-many relation. Let's say a photo can be in many albums, and each album can contain many photos. Let's create an class:

is required to specify that this is the owner side of the relationship.

Now let's add the inverse side of our relation to the class:

After you run thr application, the ORM will create a album_photos_photo_albums junction table:

Don't forget to register the class with your connection in the ORM:

Now let's insert albums and photos to our database:

You can use QueryBuilder to build even more complex queries. For example, you can do this:

This query builder will select all photos that are published and whose name is "My" or "Mishka". It will select results from position 5 (pagination offset), and will select only 10 results (pagination limit). The selection result will be ordered by id in descending order. The photos' albums will be left-joined and their metadata will be inner joined.

You'll use the query builder in your application a lot. Learn more about QueryBuilder here.

Take a look at the samples in ./sample for examples of usage.

There are a few repositories which you can clone and start with:

There are several extensions that simplify TypeORM integration with other modules:

Learn about contribution here and how to setup your development environment here.|||

typeorm - Data-Mapper ORM for TypeScript and JavaScript (ES7, ES6, ES5). Supports MySQL, PostgreSQL, MariaDB, SQLite, MS SQL Server, Oracle, WebSQL databases. Works in Node.js and Browser.