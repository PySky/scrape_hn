In my previous post, I created Breakout in my custom assembly language, Consolite Assembly. Writing a game in assembly was a fun challenge, but I am used to writing code at a higher level of abstraction. To make it easier on myself, I created a compiler that takes source code in a C-like language and converts it to Consolite Assembly. The source of the Consolite Compiler, written in C++, can be found here. A rough specification for the language, which I will refer to as Consolite C, can be found here.

A compiler is a program that takes in source code in one language and outputs target code in another language. In this case, the source code is written in Consolite C, and the target code is Consolite Assembly. To give a contrived example, the compiler takes in code like this:

And turns it into code like this:

One of the primary advantages of the former is that everything is more human-readable. You can have descriptive variable names, complex mathematical expressions, if-else statements, loops, and many other features that would otherwise need to be tediously hand-coded in assembly. For a full list of language features, take a look at the spec.

The Consolite Compiler works in two stages. In the first stage, it parses the source code into a syntax tree, checking for errors along the way. For example, suppose the compiler is parsing a function like the following, which sums the values in an array:

The parser knows that this is a function because the first three tokens it finds are: "uint16", a type; "sum", a name; and "(", an open parenthesis that distinguishes a function from a global variable declaration. It saves the return type and function name, then parses the comma-separated parameters until it reaches a closing parenthesis. Next it consumes the opening brace "{" and begins parsing statements in the function body, until it reaches a closing brace "}".

Statements within a function body can take many forms. In the example above, there are two local variable declarations, one of which has an initial value. Next, there is a for-loop, which is of the form:

The parser goes through the following steps to parse the for-loop:

The resulting syntax tree for the for-loop in the example above would look like the following:

After the syntax tree has been constructed, if there were no errors the compiler proceeds to the second stage. In the second stage, it traverses the syntax tree and outputs the linear assembly code equivalent for each function, statement, expression, etc. Since there are no explicit loop constructs in assembly, linearizing the above for-loop would result in something like the following in Consolite C:

When we actually run the original for-loop through the compiler, we get the following assembly (annotated for clarity):

Consolite has 16 registers, and groups of these registers are reserved for specific purposes by the compiler. The register is special because it is the stack pointer, so it is modified by , , , and instructions. The register is the frame pointer, and this stores what the value of the stack pointer was at the beginning of the current function. This is used for getting parameters and local variables that are not stored in registers, because they are at a certain offset from the frame pointer.

Registers through are used to pass values of the first four parameters to a function call. If there are more than four parameters, they are stored on the stack prior the return address.

Registers through are used to store the values of local variables. If there are more variables than can fit in these registers, they are stored on the stack after the return address. Array contents are always stored on the stack.

Registers , , and are scratch registers, used for storing intermediate calculations in mathematical expressions. Additionally, register is used to store the return value of a function.

Good question! The answer is: not very. Hand-written assembly code is pretty much guaranteed to run faster than the output of this compiler, with far fewer memory accesses.

One optimization I have made is that whenever the compiler would have output a instruction directly followed by a instruction, it instead outputs a single instruction or nothing at all. For example:

In order to simplify the coding of the compiler, I cut a few corners in the design of the language. As of this writing, the following is an (incomplete) list of the shortcomings of the language:

Click the emulator screen below to run the emulator. Click off the screen to pause the emulator. Source code for this example can be found here.

Mobile users: touch controls are not supported. Sorry!

Now that I have written the emulator, assembler, and compiler, I would like to begin work on the hardware side of the console. As I have mentioned in previous posts, I purchased a Mimas V2 FPGA board over the summer. That $50 board should have enough resources to support the microprocessor and display controller for a hardware version of Consolite. However, I may take a hiatus from this project to work on a few of my other ideas, so my next post may be about something entirely different. Stay tuned!|||

