What does ‚ÄúCode is Data‚Äù even mean? ü§î

In short: when language syntax and its abstract syntax tree (AST) looks the same.

What does it give us? If syntax is the same as its AST it means that somehow code is defined in terms of itself. Since AST is a structured representation of code as data, which is used by compilers to manipulate programs and generate different code, then the program written in such language should be able to manipulate itself.

Let‚Äôs look at this snippet of code written in JavaScript:

In order to transform this code (for example ES2015 into ES5) we would need a source-to-source compiler, such as Babel, which would parse program text into its AST, transform it into another AST and then generate a new code. It means that to transform JavaScript code we need a representation of it which can be manipulated by the language, in this case code text is being transformed into JSON.

Here‚Äôs AST of the above program in JSON format:

But how would look like a language syntax where AST is code and code is AST? Most certainly we don‚Äôt want to write programs using the above representation because it is overly verbose. However this JSON representation can give us a hint on where to start looking for such language syntax. We know already that AST is a structured representation of code, which means that the code should be also structured. If we look at above AST it is clear that there‚Äôs nodes which correspond to certain syntax tokens.

For example the following is AST of expression, where both and are of type and form a single :

Let‚Äôs encode those AST nodes back into their textual representation but preserve AST structure (imagine we have Babel plugin for this). We‚Äôll use Array literals instead of objects to represent structure and drop unnecessary syntax:

The original program would look like this in our made up language:

Looks like we ended up having properties of a language described at the beginning: the code is AST and AST is the code (where in this case AST is encoded into keywords using Babel).

Now if we encode the entire JavaScript like this we could write a program that can transform itself üí°. Let‚Äôs write a program that transforms ES2015-ish variable declaration into its ES5 analogue.

Having a language like this doesn‚Äôt require to have a specialized compiler to transform code, you just write transformation in the language itself. Lisp is a family of such languages and this property of a language is known as homoiconicity. Here‚Äôs an example of code transformation written in ClojureScript:

In Lisp languages a code that manipulates code is called . A macro is a function that is executed at compile time against other code. Macros are heavily used in Lisps to build DSLs and introduce new language constructs (pattern matching, async/await, etc.), which means that you can invent new syntax in your programs. In fact most Lisps itself are built on macros, the baseline of a language is usually less than 30 forms and everything else is a macro or a function. Here's some examples and their macro definitions:

Now it should be clear what does ‚ÄúCode is Data‚Äù mean. üôÇ

If you are interested to dig into Lisp more, I‚Äôd recommend to go through a great comment left here by Rainer Joswig.|||

What does it give us? If syntax is the same as its AST it means that somehow code is defined in terms of itself. Since AST is a structured representation of code as data, which is used by compilers‚Ä¶