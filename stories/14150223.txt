GraphQL is an incredible API technology that lets consumers describe their data requirements with a simple, declarative query language. Even though GraphQL servers are easy to query via a simple HTTP request, GraphQL’s well-specified nature enables us to go beyond just making basic requests. The structure of the schema and queries enables sophisticated client libraries to do data fetching and management for you.

Yesterday, Lee Byron, Yuzhi Zheng, and Joe Savona announced the first release candidate for a rebuild of Relay designed to be simpler, faster, and more extensible than ever before. Read their announcement here. It’s a really big deal for the GraphQL community that within the space of a few weeks both of the most popular client libraries — Relay and Apollo Client — are coming out with 1.0 releases.

I’ll give you fair warning: I’m a pretty big GraphQL client nerd. As part of working on Apollo Client, I’ve spent the last year or so thinking about every part of the problem of fetching, caching, and updating GraphQL data. This is going to get pretty in depth, but if you’re looking for extensive discussion and lots of examples about the new Relay release, this post is for you.

We’ll go over the following important topics:

If you want to jump right into code, check out the example on GitHub.

Throughout this post, I’ll refer to versions of Relay prior to 1.0.0, which is being called “Relay Modern”, by the name “Relay Classic”. Special thanks to Joe Savona for looking over this post before it went out!

Relay is a GraphQL client framework. In general, a GraphQL client framework or library enables developers to eliminate data fetching boilerplate, and declaratively pass data from a GraphQL API into UI components. In a React application, it would live in a similar place to something like Redux or MobX, and can often replace those systems entirely. Relay also has several direct competitors in the frontend GraphQL fetching space, including our own Apollo Client library for React. These share many of the same goals and features but make different tradeoffs.

The main premise of Relay is that your data fetching should be just as modular as your UI. This is accomplished by encouraging fine-grained use of GraphQL fragments. Relay is designed to enable developers to put each React component together with a small GraphQL fragment in the same file, which makes it very easy to ensure that you always fetch exactly the data you need for that component. These fragments can be composed into larger fragments and finally queries, to get all of the data required for a particular view with the minimal number of requests to the server.

One way that Relay has always stood out in the JavaScript GraphQL client ecosystem is that it uses a build step to precompile queries. Originally with , and now also with the , Relay adds a step to your build process which takes in all of the queries in the app and your GraphQL schema, and outputs runtime artifacts with additional data and helpers. Because this build process contains schema knowledge, it can also check your queries for errors and inject type information, which enables the framework to do more under the hood to optimize data fetching and reduce the amount of code to be written by the application developer.

Relay Modern takes this one step further. While Relay Classic only processed one query at a time, adding some useful metadata and converting to a runtime format, the new works on all of the queries in your app at once, enabling it to do a larger set of transformations. See the complete list in the source code.

One thing to note is that while this opinionated approach has benefits for performance and developer ergonomics, requiring queries to be precompiled makes it difficult or impossible to integrate into some architectures. Taking this tradeoff of requiring a specific build step is one of the primary differentiators of Relay.

Relay Modern is a redesign of the core and API of Relay to achieve the same main principles of declarative fetching and modular data requirements, while trimming some of the features that made the original implementation more complex and harder to optimize. One nice thing is that even though there are a lot of changes, there’s a handy compatibility mode to help you migrate incrementally.

So what are the biggest changes from Relay Classic?

Several features of Relay Classic relied heavily on runtime query manipulation, and the particular syntax of the containers and fragment composition didn’t lend itself well to static analysis. For the full details of why this matters, check out my blog post about all of the benefits of having statically-analyzable GraphQL queries. At a high level there are three main benefits to avoiding dynamic query generation:

Here’s an example of two Relay Classic fragment containers, one of which uses a fragment from the other:

If you’re a GraphQL build tool, there’s a problem here — if you look at the statement from the second component, it just says . Let’s say you wanted to validate that the fragment is being used in the correct place. You would have to understand JS syntax to track down the component, look inside its dictionary, and extract the type condition on the fragment. If the component was in a different file, you’d also have to figure out the imports and get the right file. It’s definitely not impossible, but pretty hard.

To improve the situation and make it easy to develop a tool to accomplish the above goal, Relay Modern doesn’t use interpolation style syntax for fragments. Instead, it looks like this:

You can see how this is much easier to work with from a build tooling perspective. All you need to do is pick out the template literals marked off by , throw them all together, and run normal GraphQL validation.

All native mobile GraphQL clients, both those used internally at Facebook and ones written by community, work this way, and it’s good to see the JS community move in the same direction. I’m also excited that this way of declaring fragments is similar to the approach we’ve been encouraging in Apollo Client, where we also suggest unique fragment names to enable better tooling.

When people talk about GraphQL, they usually start with the queries. Building a UI with read-only data using GraphQL is an absolute dream, since you can super cleanly declare the data you need and it shows up almost magically. But mutations are a bit more complex, because the client needs to do two extra things:

While working on Apollo Client over the last year, we’ve spent the overwhelming majority of our time working with the community to figure out how to make mutations nice in the general case, and let me tell you — it’s no walk in the park. This turned out to be the case in Relay Classic as well. Here’s how the two points above worked before Relay Modern:

Note: There was also an API called that allowed skipping part (1) above, and directly specifying the data to be refetched without the fat queries.

OK, so that description was quite a mouthful. You can see a complete mutation example in the Relay Classic guide. The intentions of the Relay Classic mutation API were in the right place: It was designed to make mutations as reusable and declarative as possible. You didn’t have to think about the different parts of your app when writing a fat query — you could just select as much data as you want and Relay would filter it down for you. The configs felt declarative, because they allowed you to operate on the level of adding and removing result objects.

However, armed with our understanding of the benefits of static GraphQL queries from above, we can see the same issues here. The mutation query was dynamically generated, meaning the server couldn’t predict what would be selected on the result. And the mutation configs could often end up feeling less declarative and more like a small window through which you had to tell Relay everything you wanted to happen to the store.

Thankfully, mutations in Relay Modern are much simpler, closer to “regular” GraphQL mutations, and more powerful. Just check it out:

OK, so what are the answers to our questions above?

If it sounds much simpler, that’s because it is!

As an aside, I’m really happy that there is a lot of convergence here — the API is quite similar to the most recent mutation API for Apollo Client. That’s because we didn’t come up with it in a vacuum. Everyone in the GraphQL community, including the team at Facebook and our team at Apollo, is talking all the time and sharing these ideas. We were intrigued by a presentation by Greg Hurrell from Facebook, and called out the genesis of the idea in our announcement post for the new feature.

One really neat feature of the new core is that and are now decoupled from the UI integration, which lives in . This means you can now more easily build your own integrations, or use Relay with other view technologies, like Angular, Vue.js, Ember, and others! The Relay team intends these components to stay decoupled, and enable their reuse in other toolsets and libraries.

A final note, before we move on, let’s pour one out for . The new Relay Modern docs have a guide for how to migrate away from it. Essentially, was somewhat of a catch-all API for changing the data requirements on a fragment after the initial page load, and handled aspects as diverse as pagination, fetching more data, setting arguments, and more. It could also sometimes result in hard-to-analyze query manipulations. In Relay Modern, the recommended approach is to use the right kind of container for your data needs, by mixing and matching , , , and .

Those are the changes I think will affect current Relay developers the most. The “what’s new in Relay Modern” page has a more complete list of changes and improvements. Not all of them are fully documented yet, but I look forward to trying them out as soon as I can:

I’m really excited to see how people use all of these new features.

No post about a new library is complete without a small example you can download and run. So let’s do just that! Without further ado, here’s a very small app you can download and run to have Relay Modern working right away:

It’s not much to look at, it just displays a basic list from the new repositories feed on GitHunt, our example app server:

If you’ve gotten this far, definitely clone the code and give it a run. You can get all of the details in the repository README, but here’s a quick rundown of the different parts:

If you want to see what a similar query looks like with Apollo Client to compare, check out the similar example on our home page.

Relay was announced right alongside GraphQL at React Conf in February of 2015, and the initial version was publicly released in August of 2015, a little while after the reference GraphQL implementation. In the meanwhile, a lot of exciting stuff has been going on in the GraphQL community. Now, almost a year and a half later, Relay Modern is here — a reinterpretation of the same principles with a simplified interface, better performance, and more.

I couldn’t be more excited about all of this great stuff happening in the GraphQL community. On the Apollo team, we have one main goal: Facilitate the adoption of GraphQL in the best way we can so that more people can benefit from it. Having several really awesome options in the JavaScript GraphQL client space, with different tradeoffs and benefits, is the best possible place to be. It’s the sign of a healthy ecosystem that people are racing to build the best possible tools. There are dozens of GraphQL server implementations in every conceivable language, and I hope to one day see the same kind of diversity on the client.

This post is primarily made up of first impressions from trying out the library and reading the documentation, and I can’t wait to learn more, share ideas, and collaborate on cool stuff. If you’re excited about Relay Modern, I encourage you to provide feedback about the RC and even contribute some fixes!

If you like reading about GraphQL, follow the Apollo team here on Medium, and stay tuned for our upcoming posts with more details about Relay and thoughts about the future roadmap for Apollo Client!|||

GraphQL is an incredible API technology that lets consumers describe their data requirements with a simple, declarative query language. Even though GraphQL servers are easy to query via a simple HTTP…