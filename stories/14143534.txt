Born deep inside Facebook labs, React gained a huge popularity among the developers who make web applications with complex user interfaces. Being widely used in single-page application projects that require easy scaling, simple maintenance and fast performance, React has become a de facto standard for the JavaScript developer community. Companies like Facebook, Netflix, Airbnb and many others use React as a main framework to build the UI for their services.

React uses a component-based approach to the application structure offering users to build the application UI by combining components that possess their own behavior, state and view. With this, React adds another abstraction layer for HTML elements. To enable React developers to stay in the component-based paradigm while writing e2e tests, we at TestCafe team made – a plugin that introduces a native approach to testing React applications.

In this article, we will use TestCafe to test the React TodoMVC application.

To deploy the Todo MVC app for testing, clone the Redux repository at https://github.com/reactjs/redux and open the TodoMVC example directory (/examples/todomvc). Install the dependencies and run from this directory to build the application in the development mode.

The application will be deployed at http://localhost:3000.

It has the following component structure.

Let’s create a page object that corresponds to the JSX markup above. We will use the ES6 class syntax to define the components structure with which you will interact in tests.

Create a file and import the module. In this file, create a class that represents the TodoMVC application page. Use the ReactSelector constructor to create selectors for the required page elements.

We have created selectors for a field where a new task is entered and the list of the current tasks.

Create a fixture file and specify http://localhost:3000 as a start page. To work with the application page, import a module with the page object and create a page class instance.

is a wrapper around the object, so we can use the full power of TestCafe selectors when working with the resulting elements.

Let’s write a test that adds a new element to the Todo list

To learn more about TestCafe assertions, see Assertion API.

allow you to get the state and props of a React component using the method. This method returns an object that contains the component state and properties. Alternatively, you can pass a function that selects a specific property to return. Consider the following example: we need to mark a task as completed and test that the respective component has changed its property.

Run the test from the console using the following command:

TestCafe will run the test in Google Chrome and output the following report:

To test in multiple browsers in parallel, you can use a comma-separated list like or the alias to run tests in all locally installed browsers.

You can also define the command that will run TestCafe tests. Note that you need a locally installed TestCafe module to launch tests from an npm script. To introduce the command, add the following code to the project’s file.

You can find more information about the TestCafe command line interface here.

Learn more about the TestCafe ecosystem here. If you need more functionality in test code, you can use any node.js module. TestCafe also provides the extended capabilities to use portable and remote browsers and customize the test run report format.

If you have question regarding TestCafe — feel free to ask on our forum or GitHub page!|||

Born deep inside Facebook labs, React gained a huge popularity among the developers who make web applications with complex user interfaces. Being widely used in single-page application projects that…