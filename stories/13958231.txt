With iOS 9, Apple wants developers to upload LLVM Bitcode to iTunes Connect (the App Store’s backend). Apple would then optimize the LLVM IR and generate the binaries for each platform. In practice, the LLVM Bitcode is compressed and packed into the Mach-O binary that is uploaded to iTunes.

If you’re curious about how Bitcode is packed into application binaries when uploaded to the App Store, I suggest you the following article:

Even though the three stages compilation infrastructure appeared to be designed to be platform independent. It appears to be very different in practice.

In a lengthy write-up in 2011 on the LLVM-dev mailing list, (ex-)Apple engineer Dan Gohman argued about why IR would be “a poor system for building a Platform, any system where LLVM IR would be a

format in which programs are stored or transmitted for subsequent

use on multiple underlying architectures”.

Chris Lattner, primary author of the LLVM project and now director of the developer tools at Apple responded:

It’s clear that nobody claims that LLVM IR is actually portable. Once the LLVM-IR has been generated from a specific front-end, you can’t just plug another backend and hope that your application will just work.

This exchange being from 2011, has anything changed since? I compiled a simple App with Bitcode to see. You can find the AppDelegate.m and the associated LLVM-IR in the following Gist. Unsurprisingly, the IR is highly dependent on a specific target (casts, word sizes …).

Bitcode will enable support for better microarchitecture support but gets nowhere close to target independence. Applications compiled for the armv7 target could still run on armv7s devices but additional optimisations make applications faster if they contain a armv7s slice. The advantage that Bitcode provides on top of app thinning is negligible in my opinion since it will only provide a slight speed up until the developer uploads a new build with the optimized slice.|||

At Apple’s annual WWDC developer event, the compiler infrastructure team unveiled “Bitcode” and recommended iOS developers to opt-in , even requiring it for Apple Watch applications. Multi…