If you have never heard of triple-based ontologies, you could think of them as mindmaps or graphs with labeled edges. Each edge is called a triple and connects three symbols: An entity with a value via an attribute. Natural languages use the same concept but call it a sentence with subject, predicate and object instead of a triple with entity, attribute and value. The visualizer below aggregates all triples which share the same entity in boxes in order to display the common entity only once in the top row. Below follows the list of the aggregated triples with the attributes on the left and values on the right. This should be familiar to you as this representation of attribute-value-pairs is common in many OOP languages. Furthermore each symbol has a virtual address space which allows them to have a bitstream containing literals like strings and numbers or even entire files. I call them blobs and they are inlined graphically, so they don't have to be explored explicitly. All in all, ontology engines can be seen as a kind of graph database.

The biggest project in this direction is the so called semantic web. But it has some annoying issues like being composed of too many technologies: OWL, SPARQL, RDF, RDFS, Turtle, Notation3 etc. and a quite broken design. I somewhat blame the semantic web for stigmatizing the idea of ontologies with negative associations. Symatem does many things differently to address these issues. As you can see above the triples are completely symmetrical, so every symbol can be used in each position of a triple. Also literals are not part of the triples but are blobs which bind to the symbols instead. Such blobs work much more like byte-streams in filesystems with the symbol being the inode.

This is a technical demo which shows what can be done using WebAssembly today. In the future I want to make Symatem a distributable and easy to use version controlled ontology engine, which works the same on servers as well as browser clients. It can already be run as POSIX-process, WebAssembly in the browser and probably in Node.JS soon too. The API and code base might change a lot, but feedback and questions are welcome everytime: AlexanderMeissner [at] gmx.net|||

Reinventing Software from Scratch