A single instruction set processor architecture

 This is my first time using Github.

 Currently only preliminary specifications are given and may be further refined.

 Suggestions and requests are welcome.

 When I figure out how to do it I would like to list proposals and have a vote on which to implement.

 Implementing this might be a good project for a processor design course.

 VHDL code to follow when specs are firm.

NISC is my particular brand of One Instruction Set Computer (OISC) with Transport Triggered Architecture (TTA).

 The operation it performs is Move.

 I call it NISC for Null Instruction Set Computer because the set of all opcodes is the null set.

 There is no instruction which tells it to Move. It just Moves.

 It is not related to No Instruction Set Computing.

 I didn't want to call it SISC for Single Instruction Set Computer because SISC sounds like CISC and I like to avoid confusion. I wasn't sure how to pronounce OISC. I also ruled out Mono-Instuction Set Computer (MISC) because I didn't want it filed under Misc.

 Although there is no opcode, instructions take two (or three) arguments.

 The arguments are source address, destination address, and immediate data.

 The source address and destination address are always present but the immediate data is optional.

 NISC is an entire family with a scalable architecture.

 What will be described is NISC6 because data and addresses are 2 to the 6th power (64 bits). NISC5 has 32 bit data and addresses.

This is the VonNewman version with unified code and data address space. Using a Harvard architecture with separate code and data spaces would double throughput but would require instruction invalidation for Jumps and Calls. I wanted to keep it simple. Making data and address widths equal allows us to fetch an address in a single cycle. If the data width is less than address width then multiple cycles are needed to fetch an address. With a wider data width, both addresses may be read at once saving a cycle.

The state machine controller normally cycles through 4 states:

Before it gets to state 1 the machine looks for Int and DMA Requests and will go to other states to acknowledge them. Once state 1 starts Int and DMA Requests will not be accepted again until state 4 finishes. Block instructions also alter this cycle by repeating state 3 and/or state 4 a counted number of times.

Processor addresses start at the beginning of memory. 128K Words Reserved for processor internals.

 Peripherals should be mapped following the processor addresses.

 RAM is mapped after the peripherals and before ROM.

 ROM is expected at the highest part of memory.|||

NISC - A single instruction set processor architecture