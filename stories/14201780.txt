This is the first article in the Ruby's Dark Corners series.

Here are a few question this article will try to answer:

In everything that follows we make the distinction between parameters (or formal parameters): the parameters as they appear in method definitions; and arguments (or actual parameters): the value passed to method calls.

A method definition admits the following types of parameters:

You can get a list of a method's parameters with , which will show the type of each parameter. Here it is, running over our method.

Note that this glitches for array decomposition parameters, indicating just .

You can't mix match these parameters as you please. All types of parameters are optional, but those that are present must respect the following ordering:

As a matter of best practices, you should not mix required and optional parameters: put all required parameters first. You should also avoid post-required parameters, and using both optional parameters and a splat parameter. If you require default values, use keyword parameters instead.

See some rationale for these practices.

The real complexity of Ruby's methods is determining how arguments are mapped to parameters.

Here are the different types of arguments you can pass to a method call:

You can substitute (and , ) with almost any expression, as long as you respect operator precedence.

Keyword arguments are equivalent to hash arguments whose key is a symbol. If you are using keyword arguments with the intent to fill keyword parameters, you should use the keyword syntax. In what follows, when we say keyword arguments we alway refer to keyword argument and hash arguments with a symbol key: the two are indistinguishable. Hash arguments will be aggregated into a hash that will be assigned to one of the method's parameters. Keywords argument may or may not be added to this hash (see below). If the splat argument is an or an object that supported the method, it is expanded inside the method call: is equivalent to . Otherwise the splat expands to a regular argument. A double splat works the same, but for hashes: is equivalent to . It performs implicit conversion to for objects that support the method. Note in passing that by convention represents implicit conversion to a , while represents explicit (on-demand only) conversion. A block conversion argument must be a , or an object that can implicitly converted to one via . Finally, a method can be passed a block explicitly. The block will appear after the argument list. We'll touch on the difference between the two block syntaxes in the section about blocks.

Again, arguments cannot be supplied in any order. All regular and splat arguments must appear before any keyword and double splat arguments. A block conversion or block argument (only one allowed) must appear last.

If the order is not respected, an error ensues.

Where an error is mentionned, it is most likely an . I haven't re-checked everything, but it should always be the case.

Here is the full procedure for figuring out how arguments are assigned to parameters:

Expand any splat or double splat arguments. The expanded content is taken into account when we talk about regular, keyword or hash arguments later on. First, we handle all keywords and hash parameters. If there is exactly one more required parameters than there are regular arguments, all keyword and hash arguments are collected into a hash, which is assigned to that parameter. If there were any keyword parameter, an error ensues. If there was a double splat parameter, it is assigned an empty hash. Otherwise, if all of the following conditions hold, implicit hash conversion is performed. There are keyword or double splat parameters. There are no keyword or hash arguments. There are more regular arguments than required parameters. The last regular argument is a hash, or can be converted to one via and that method doesn't return . Implicit hash conversion simply consists of treating all the (key, value) pairs from the last regular argument as additional keyword or hash arguments. These new arguments are taken into account in the rest of the assignment procedure. We now assign keyword arguments to the corresponding keyword parameters. If a keyword parameter without default value cannot be assigned, an error ensues. If there is double splat parameter, assign it a hash aggregating all remaining keyword parameters. If there remains keyword or hash arguments, aggregate them in a hash, which is to be treated as the last regular argument. Note: if two values are supplied for the same key, the last one wins and the previous one disappears. However, if the two values are visible in the method call (e.g. ), a warning is emitted. We now consider regular arguments, which by now consists of the supplied regular arguments (including the result of splat expansion), minus the last argument if implicit hash conversion was performed in step 2, plus a final argument containing a hash if arguments remained in step 2. If there are less regular arguments than required parameters, an error ensues. Otherwise, let be the number of regular arguments and the number of required and optional parameters. If , the last optional parameters get assigned their default values, while the remaining parameters get assigned the regular arguments. If , the first arguments are assigned to the parameters. The remaining arguments are collected in an array, which is assigned to the splat parameter. If there is no splat parameter, an error ensues. If a block or block conversion argument is passed, make a proc from it and assign it to the block parameter, if any â€” otherwise it becomes the implicit block parameter.

The following is in general much better understood than assignment from arguments to parameters.

Procs are higher-order functions, while blocks are a syntactic notation to pass a proc to a method. It's not quite that simple however. You can pass procs as regular arguments, but the block parameter is special. All methods can accept a block implicitly, or explicitly via a block a parameter. This parameter must be assigned a (syntactic) block (which becomes a proc) or a "regular" proc marked with .

Other than with blocks, procs can be instantiated with , , or (lambda literal or dash rocket or stab operator). The three first forms simply take a block argument, while the last form looks like this:

When a method accepts an implicit block, you can call it with (you can also call the explicit block parameter with ). Somewhat peculiarly, the notation cannot be passed a block of its own. A proc or block parameter named can be called using , or .

A less known trick is that you can also get a reference to the proc backing the block argument by using or (without passing them a block) inside the method.

and are used to create regular procs, while and create lambdas.

It seems possible to convert between proc and lambda like this: or . However, these conversions don't do anything: returns , and the regular proc behaviour is preserved. The converse is true for the reverse conversion.

There is no semantic difference between both forms.

There is one syntactic difference because the two forms have different precedences:

If you don't need to use this particularity, there are two popular ways to choose on form over the other:

Thanks to Benoit Daloze, who pointed out many small mistakes in the article, as well as the fact that the proper names for what I called regular and default parameters were required and optional parameters. He also mentionned , and inspired me to improve the section on blocks and procs.

Following a conversation with Tom Enebo on Twitter, I realized that I forgot to account for hash arguments with non-symbol keys! This lead to some more investigation and the uncovering of a few errors. The assignment procedure has been revised and is now much simpler.

Reader A Quiet Immanence pointed out in the comments that a conversion between regular proc and lambda doesn't do anything, and that an array argument to a regular proc with multiple parameters is auto-splatted.

Will Spurgin pointed out in the comments that you can have array decomposition, splat and keyword parameters in the same method, as long as you respect the parameter ordering.|||

