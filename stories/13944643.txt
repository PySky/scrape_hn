If you are using CocoaPods:

Add the following to your Podfile:

If you are using Carthage:

Then add the following line to your :

Dispatch is a Flux-like implementation of the unidirectional data flow architecture in Swift. Flux applications have three major parts: the dispatcher, the stores, and the views.

These should not be confused with Model-View-Controller. Controllers do exist in a Dispatch/Flux application, but they are controller-views — views often found at the top of the hierarchy that retrieve data from the stores and pass this data down to their children (views).

Dispatch eschews MVC in favour of a unidirectional data flow. When a user interacts with a view, the view propagates an action through a central dispatcher, to the various stores that hold the application's data and business logic, which updates all of the views that are affected.

This works especially well with Render's declarative programming style, which allows the store to send updates without specifying how to transition views between states.

The dispatcher is the central hub that manages all data flow in your application. It is essentially a registry of callbacks into the stores and has no real intelligence of its own — it is a simple mechanism for distributing the actions to the stores. Each store registers itself and provides a callback. When an action creator provides the dispatcher with a new action, all stores in the application receive the action via the callbacks in the registry - and redirect the action to their reducer.

As an application grows, the dispatcher becomes more vital, as it can be used to manage dependencies between the stores by invoking the registered callbacks in a specific order. Stores can declaratively wait for other stores to finish updating, and then update themselves accordingly.

The dispatcher can run actions in four different modes: , , and .

Additionally the trailing closure of the method can be used to chain some actions sequentially.

Stores contain the application state and logic. Their role is somewhat similar to a model in a traditional MVC, but they manage the state of many objects — they do not represent a single record of data like ORM models do. More than simply managing a collection of ORM-style objects, stores manage the application state for a particular domain within the application.

As mentioned above, a store registers itself with the dispatcher. The store has a that typically has a switch statement based on the action's type — the reducer is the only open class provided from the framework, and the user of this library are expected to subclass it to return an operation for every action handled by the store.

This allows an action to result in an update to the state of the store, via the dispatcher. After the stores are updated, they notify the observers that their state has changed, so the views may query the new state and update themselves.

Redux can be seen as a special Dispatch use-case. You can recreate a Redux configuration by having a single store registered to the Dispatcher and by ensuring state immutability in your store.

First we need a state and some actions associated to it.

Now we need a that implements the business logic for the actions defined in . The reducer will have to change the state (that is owned by the ) and to do that in a synchronised fashion we use the function.

: { ( : Counter.Action, : Store<Counter, Counter.Action>) ActionOperation<Counter, Counter.Action> { action { . ( : action, : store) { operation, , store store. { state In this example we are implementing our state as an immutable state (a la Redux) - but 'Dispatch' is not opinionated about it. We could simply mutate our state by simply doing 'state.count += 1'. State immutability is a trade-off left to the user of this library. state state. ( : ) } operation. () } . ( : action, : store) { operation, , store store. { state state state. ( : ) } operation. () } } } }

Now let's see how to instantiate a with our newly defined and how to register it to the default .

Dispatching an action is as easy as calling:

Any object can register themselves as a observer for a given store by calling .

A convenient way to have type-safe references to all of your stores is to expose them as a synthesised getter in your . That way you have a centralised unique entry-point to access all of your stores.

Dispatch takes advantage of Operations and OperationQueues and you can define complex dependencies between the operations that are going to be run on your store.

Also middleware support is available allowing you to quickly add some aspect-oriented feature to your design.

Any object that conforms to the protocol can register to the . This provides a third-party extension point between dispatching an action, and the moment it reaches the reducer. You could use middleware for logging, crash reporting, talking to an asynchronous API, routing, and more.

The recorder middleware is probably one of the most interesting feature of Dispatch.

Voilà, if your states are immutable you simply have to press to navigate back through your past states and to move forward again. Try it in the TodoApp demo!

You can make sure that an action will be dispatched right after another one by using the method trailing closure.

Similarly you can achieve the same result by dispatching the two actions serially.

Also calling dispatch with would have the same effect but it would block the thread that is currently dispatching the action until the operation is done - so make sure you dispatch your actions in mode only if you are off the main thread.

Views in this model are simple function of your state. This works especially well with Render's declarative programming style.

Checkout the TodoApp example to see how to get the best out of Dispatch and Render.|||

Dispatch - Multi-store Flux implementation in Swift.