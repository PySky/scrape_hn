Requiring modules in Node.js: Everything you need to know

Node uses two core modules for managing module dependencies:

You can think of the module as the command and the module as the organizer of all required modules.

Requiring a module in Node isn’t that complicated of a concept.

The main object exported by the module is a function (as used in the above example). When Node invokes that function with a local file path as the function’s only argument, Node goes through the following sequence of steps:

In this article, I’ll attempt to explain with examples these different stages and how they affect the way we write modules in Node.

Let me first create a directory to host all the examples using my terminal:

All the commands in the rest of this article will be run from within .

Let me introduce you to the object. You can check it out in a simple REPL session:

Every module object gets an property to identify it. This is usually the full path to the file, but in a REPL session it’s simply

Node modules have a one-to-one relation with files on the file-system. We require a module by loading the content of a file into memory.

However, since Node allows many ways to require a file (for example, with a relative path or a pre-configured path), before we can load the content of a file into the memory we need to find the absolute location of that file.

When we require a module, without specifying a path:

Node will look for in all the paths specified by  — in order.

The paths list is basically a list of node_modules directories under every directory from the current directory to the root directory. It also includes a few legacy directories whose use is not recommended.

If Node can’t find in any of these paths, it will throw a “cannot find module error.”

If you now create a local directory and put a in there, the line will find it.

If another file existed in any of the other paths, for example, if we have a directory under the home directory and we have a different file in there:

When we from within the directory — which has its own , the file under the home directory will not be loaded at all:

If we remove the local directory under and try to require one more time, the file under the home’s directory would be used:

Modules don’t have to be files. We can also create a folder under and place an file in there. The same line will use that folder’s file:

Note how it ignored the home directory’s path again since we have a local one now.

An file will be used by default when we require a folder, but we can control what file name to start with under the folder using the property in . For example, to make the line resolve to a different file under the folder, all we need to do is add a file in there and specify which file should be used to resolve this folder:

If you want to only resolve the module and not execute it, you can use the function. This behaves exactly the same as the main function, but does not load the file. It will still throw an error if the file does not exist and it will return the full path to the file when found.

This can be used, for example, to check whether an optional package is installed or not and only use it when it’s available.

Besides resolving modules from within the directories, we can also place the module anywhere we want and require it with either relative paths ( and  ) or with absolute paths starting with .

If, for example, the file was under a folder instead of the folder, we can require it with:

Create a file and add a line there to identify it. Also, the object itself:

Do the same for an file, which is what we’ll be executing with the node command. Make this file require :

Now execute the file with node:

Note how the main module is now listed as the parent for the module. However, the module was not listed as a child of the module. Instead, we have the value there because this is a circular reference. If Node prints the module object, it will go into an infinite loop. That’s why it simply replaces the reference with .

More importantly now, what happens if the module required the main module? This is where we get into what’s known as the circular modular dependency, which is allowed in Node.

To understand it better, let’s first understand a few other concepts on the module object.

In any module, exports is a special object. If you’ve noticed above, every time we’ve printed a module object, it had an exports property which has been an empty object so far. We can add any attribute to this special exports object. For example, let’s export an id attribute for and :

When we now execute , we’ll see these attributes as managed on each file’s object:

I’ve removed some attributes in the above output to keep it brief, but note how the object now has the attributes we defined in each module. You can put as many attributes as you want on that exports object, and you can actually change the whole object to be something else. For example, to change the exports object to be a function instead of an object, we do the following:

When you run now, you’ll see how the object is a function:

Note how we did not do to make the object into a function. We can’t actually do that because the variable inside each module is just a reference to which manages the exported properties. When we reassign the variable, that reference is lost and we would be introducing a new variable instead of changing the object.

The object in every module is what the function returns when we require that module. For example, change the line in into:

The above will capture the properties exported in into the constant. When we run now, the very last line will output:

Let’s also talk about the attribute on every module. So far, every time we printed a module object, we saw a attribute on that object with a value of .

The module uses the attribute to track which modules have been loaded (true value) and which modules are still being loaded (false value). We can, for example, see the module fully loaded if we print its object on the next cycle of the event loop using a call:

The output of that would be:

Note how in this delayed output both and are fully loaded.

The object becomes complete when Node finishes loading the module (and labels it so). The whole process of requiring/loading a module is synchronous. That’s why we were able to see the modules fully loaded after one cycle of the event loop.

This also means that we cannot change the object asynchronously. We can’t, for example, do the following in any module:

Let’s now try to answer the important question about circular dependency in Node: What happens when module 1 requires module 2, and module 2 requires module 1?

To find out, let’s create the following two files under , and and have them require each other:

When we run we see the following:

We required before was fully loaded, and since required while it wasn’t fully loaded, what we get from the object at that point are all the properties exported prior to the circular dependency. Only the property was reported because both and were exported after required and printed .

Node keeps this really simple. During the loading of a module, it builds the object. You can require the module before it’s done loading and you’ll just get a partial exports object with whatever was defined so far.

We can natively require JSON files and C++ addon files with the require function. You don’t even need to specify a file extension to do so.

If a file extension was not specified, the first thing Node will try to resolve is a  file. If it can’t find a  file, it will try a  file and it will parse the  file if found as a JSON text file. After that, it will try to find a binary  file. However, to remove ambiguity, you should probably specify a file extension when requiring anything other than  files.

Requiring JSON files is useful if, for example, everything you need to manage in that file is some static configuration values, or some values that you periodically read from an external source. For example, if we had the following file:

We can require it directly like this:

Running the above code will have this output:

If Node can’t find a  or a  file, it will look for a  file and it would interpret the file as a compiled addon module.

The Node documentation site has a sample addon file which is written in C++. It’s a simple module that exposes a function and the hello function outputs “world.”

You can use the package to compile and build the  file into a  file. You just need to configure a binding.gyp file to tell what to do.

Once you have the file (or whatever name you specify in ) then you can natively require it just like any other module:

We can actually see the support of the three extensions by looking at .

Looking at the functions for each extension, you can clearly see what Node will do with each. It uses for  files, for  files, and for  files.

Node’s wrapping of modules is often misunderstood. To understand it, let me remind you about the / relation.

We can use the object to export properties, but we cannot replace the object directly because it’s just a reference to

How exactly does this object, which appears to be global for every module, get defined as a reference on the object?

Let me ask one more question before explaining Node’s wrapping process.

In a browser, when we declare a variable in a script like this:

That variable will be globally available in all scripts after the script that defined it.

This is not the case in Node. When we define a variable in one module, the other modules in the program will not have access to that variable. So how come variables in Node are magically scoped?

The answer is simple. Before compiling a module, Node wraps the module code in a function, which we can inspect using the property of the module.

Node does not execute any code you write in a file directly. It executes this wrapper function which will have your code in its body. This is what keeps the top-level variables that are defined in any module scoped to that module.

This wrapper function has 5 arguments: , , , , and . This is what makes them appear to look global when in fact they are specific to each module.

All of these arguments get their values when Node executes the wrapper function. is defined as a reference to prior to that. and are both specific to the function to be executed, and / variables will contain the wrapped module’s absolute filename and directory path.

You can see this wrapping in action if you run a script with a problem on its first line:

Note how the first line of the script as reported above was the wrapper function, not the bad reference.

Moreover, since every module gets wrapped in a function, we can actually access that function’s arguments with the keyword:

The first argument is the object, which starts empty. Then we have the / objects, both of which are instances that are associated with the file that we’re executing. They are not global variables. The last 2 arguments are the file’s path and its directory path.

The wrapping function’s return value is . Inside the wrapped function, we can use the object to change the properties of , but we can’t reassign exports itself because it’s just a reference.

What happens is roughly equivalent to:

If we change the whole object, it would no longer be a reference to . This is the way JavaScript reference objects work everywhere, not just in this context.

There is nothing special about . It’s an object that acts mainly as a function that takes a module name or path and returns the object. We can simply override the object with our own logic if we want to.

For example, maybe for testing purposes, we want every call to be mocked by default and just return a fake object instead of the required module exports object. This simple reassignment of require will do the trick:

After doing the above reassignment of , every call in the script will just return the mocked object.

The require object also has properties of its own. We’ve seen the property, which is a function that performs only the resolving step of the require process. We’ve also seen above.

There is also which can be helpful to determine if the script is being required or run directly.

Say, for example, that we have this simple function in :

The function takes a numeric argument and a string argument and it prints that header in a frame of stars controlled by the size we specify.

We want to use this file in two ways:

Passing 8 and Hello as command line arguments to print “Hello” in a frame of 8 stars.

2. With . Assuming the required module will export the function and we can just call it:

To print the header “Hey” in a frame of 5 stars.

Those are two different usages. We need a way to determine if the file is being run as a stand-alone script or if it is being required by other scripts.

This is where we can use this simple if statement:

So we can use this condition to satisfy the usage requirements above by invoking the printInFrame function differently:

When the file is not being required, we just call the function with elements. Otherwise, we just change the object to be the function itself.

Caching is important to understand. Let me use a simple example to demonstrate it.

Say that you have the following file that prints a cool looking header:|||

You can think of the require module as the command and the module module as the organizer of all required modules. The main object exported by the require module is a function (as used in the above…