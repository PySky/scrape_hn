I’ve been a developer on the Microsoft stack for many years, and primarily that’s the reason I’ve used Microsoft’s tools to illustrate my point below, but this could easily apply to any number of camps within the developer community.

The first work-for-hire freelance work I ever took on was a Windows application written in Visual Basic 6 in the late nineties, as I had a tight timeframe, and the included GUI builder was a big help when trying to ship small applications quickly.

I also secretly quite liked Visual Basic as a language (what!!??) mostly because it harkened back to my earliest experiences of writing basic to a cassette tape on the humble ZX spectrum, albeit without the need to explicitly number code lines. The syntax was pretty verbose, and there was “magic” gluing your UI to the code files, but for it’s time it was a uniquely well-suited tool for getting work turned around in short order.

I’ve stayed around the Microsoft world since, for two reasons.

Reason the first is that professionally it was just a lot easier to find well paid work in my part of the world with Microsoft experience, so the scales were always increasingly tilted in that direction due to the history I had behind me. I’ve heard this attributed to lock-in in the past, but that doesn’t really reconcile with my own personal experience; its simply the case that the opportunities afforded me by working in this space were usually much more compelling, so I had no reason to believe the grass was any greener elsewhere, and in many cases it was demonstrably less so.

The second reason for staying around is that I actually think that historically Microsoft doesn’t get nearly enough credit for putting the developer experience front-and-center of their offerings. Steve Ballmer videos on YouTube notwithstanding, this is a company that has always firmly understood where it’s support base is.

Even so, I’ve come to appreciate how critical it is to keep one eye on what’s happening elsewhere.

The .NET Common Language Runtime may have originally been an in-house take on Oracle’s (at that time Sun’s) Java Runtime Environment, but the advances made to the C# language, and the changes required in the CLR to support them, have made C# a much stronger proposition than would have seemed likely at its inception.

As C# has continued to advance (and import quite a few concepts from functional programming languages along the way), Java made it’s own advances at a more gradual pace, but has also notoriously languished at Oracle.

Nonetheless, if you’ve worked in the industry for any amount of time, you’ll have become aware of an unspoken stigma that goes hand-in-hand with being in the .NET world among folks outside of that community. Ironically, if you don’t involve yourself in the wider community, you could well not even be aware of it at all.

Similarly, working inside the Microsoft sphere for a long time, I’ve noticed that quite a few career .NET developers have little understanding of, and in some cases outright disdain for, anything outside of that world.

It’s always seemed strange to me that there should be these lines within our industry. Historically, this may well have been due to the licensing of Microsoft’s tooling putting folks off, and the frameworks being closed and proprietary. Certainly in the earliest versions of ASP.NET, for example, it was much harder to selectively integrate external tooling than it is today.

In the intervening years, Microsoft has gone to a lot of effort to open their frameworks and tooling (and has surprised even me with the announcement at Connect 2016 that they are now the top open-source contributor on GitHub). This is good not just for developers in the Microsoft stack, but for the industry as a whole.

The purpose of this article is not to espouse the virtues of .NET over other prominent frameworks, or to try to convince anyone that they should be using any one tool over any other. Every conceivable part of that argument has been had a million times.

This is an attempt to highlight that the other camps in our industry are almost certainly pushing the envelope in ways that we aren’t, and vice versa.

To me, there are a great many pieces of technology from outside my comfort zone that I’m really excited by these days, and I want to mention two quickly that there’s a possibility some folks I know may not yet have heard of (I’d hope its safe to assume that people are familiar with ubiquitous tools like Node.js already).

Rust is a systems programming language and a minimal runtime that’s been in development for some time over at Mozilla. The intention is to rival C++ for speed with efficient ahead-of-time compilation, while providing the memory safety of higher level languages that are backed by

automated garbage collectors (Rust utilizes RAII, which provides guarantees of memory impermanence, removing the possiblity of resource leaks caused by objects beyond their own lifetime). The language also comes with a terrific package manager right out of the gate, Cargo, which is a simple drop-in executable.

The second is a little more complicated to explain, as the reason I find it so compelling is as much to do with the stack it’s built on as the framework itself.

BEAM is the runtime from Erlang. It has a number of really beneficial features, the most touted of which are it’s strong concurrency (owing to it’s architecture of having everything execute as a strongly-isolated process with asynchronous message passing) and it’s reliability (owing in part to the ability to hot-swap code, preventing live applications from needing to go down even during deployments).

Elixir is an alternative programming language to Erlang that runs on top of BEAM. Syntactically, it is quite similar to Ruby, albeit with syntax to leverage the features of BEAM and it’s concurrency model.

Finally, Phoenix is a web framework that is influenced by Ruby on Rails. Just leveraging BEAM actually removes two of the larger Rails pain points that developers tend to complain about, namely performance and concurrency.

Phoenix obviously doesn’t have the long track record or the community support of Rails (at least not yet), but I believe it shows great promise.

This has been a big year for Microsoft’s developer tools and .NET as an offering.

Visual Studio Code has really come into it’s own this past year. Initially, the editor’s main draw was the integrated terminal, git and debugging, without the heft of a full IDE. Since being released last year, though, the extensions library for Code has grown massively, both in quantity and quality, such that it’s become a lot of folks editor of choice even for projects that are neither on Windows, nor have any .NET components at all. The real stand out for me personally is the TypeScript support, which I find in my own experience is second to none in rival tools (I might be a little biased, though).

Just last year, the Core CLR was open-sourced, removing one of the final hesitations a lot of folks had about evaluating this micro-framework version of .NET.

I could have chosen a bunch of different examples from just this year of new and exciting work happening within the Microsoft camp, and probably hundreds from other parts of our industry, but the point I’m hoping to make here is that you don’t need to be moving wholesale to a different technology in order to get some benefit from evaluating it.

I’m glad my own curiosity lead me to look into Erlang and BEAM. I might have the understanding of a novice, but even understanding (and empathizing with) the problem it attempts to solve helps me understand how to write better code for that use case when it enivtably comes up in my own work.

I was cheering when ASP.NET MVC was first announced (a long time back now, I know) as it borrowed so many of the concepts championed by Rails, and I’ve noticed more than a few of the advanced debugging tools that emerged in that pre-dot-net era of Visual Basic making their way to other languages and frameworks in the years since. Good.

I spend a fair chunk of time in my week tracking what’s happening on Hacker News and the Programming sub-reddit.

It helps of course that I find tech really interesting, so I look forward to catching up with what’s going on.

I also try to write articles like this one when I can, and contribute to community projects whenever able. In both cases, I find that I learn a lot more from the appraisal of my peers than from toiling away by myself in obscurity. I also receive really novel suggestions in both cases that would never have occurred to me otherwise.

I would urge you to try to find the time to involve yourself actively in the wider community if you can.

You’ll appreciate the feedback, you’ll meet some great people, and you’ll learn a lot faster than you would otherwise.

We should be applauding the sharing of ideas. It’s how we all move forward.|||

I’ve been a developer on the Microsoft stack for many years, and primarily that’s the reason I’ve used Microsoft’s tools to illustrate my point below, but this could easily apply to any number of…