A Node.js script for AWS Lambda that uses the inbound/outbound capabilities of AWS Simple Email Service (SES) to run a "serverless" email forwarding service.

Instead of setting up an email server on an EC2 instance to handle email redirects, use SES to receive email, and the included Lambda script to process it and send it on to the chosen destination.

SES only allows sending email from addresses or domains that are verified. Since this script is meant to allow forwarding email from any sender, the message is modified to allow forwarding through SES and reflect the original sender. This script adds a Reply-To header with the original sender, but the From header is changed to display the original sender but to be sent from the original destination. For example, if an email sent by to is processed by this script, the From and Reply-To headers will be set to: From: Jane Example at jane@example.com <info@example.com> Reply-To: jane@example.com To override this behavior, set a verified fromEmail address (e.g., noreply@example.com) in the object and the header will look like this. SES only allows receiving email sent to addresses within verified domains. For more information, see: http://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html Initially SES users are in a sandbox environment that has a number of limitations. See: http://docs.aws.amazon.com/ses/latest/DeveloperGuide/limits.html

Modify the values in the object at the top of to specify the S3 bucket and object prefix for locating emails stored by SES. Also provide the email forwarding mapping from original destinations to new destination. In AWS Lambda, add a new function and skip selecting a blueprint.

Name the function "SesForwarder" and optionally give it a description. Ensure Runtime is set to Node.js 4.3 or 6.10. For the Lambda function code, either copy and paste the contents of into the inline code editor or zip the contents of the repository and upload them directly or via S3. For Role, choose "Basic Execution Role" under Create New Role. In the popup, give the role a name (e.g., LambdaSesForwarder). Configure the role policy to the following:

In AWS SES, verify the domains for which you want to receive and forward email. Also configure the DNS MX record for these domains to point to the SES endpoint provided. If you have the sandbox level of access to SES, then also verify any email addresses to which you want to forward email that are not on verified domains. If you have not configured inbound email handling, create a new Rule Set. Otherwise, you can use an existing one.

On the Recipients configuration page, add any email addresses from which you want to forward email. On the Actions configuration page, add an S3 action first and then an Lambda action. For the S3 action: Create or choose an existing S3 bucket. Optionally, add an object key prefix. Leave Encrypt Message unchecked and SNS Topic set to [none]. For the Lambda action: Choose the SesForwarder Lambda function. Leave Invocation Type set to Event and SNS Topic set to [none]. Finish by naming the rule, ensuring it's enabled and that spam and virus checking are used. If you get an error like "Could not write to bucket", follow step 7 before completing this one If you are asked for SES to attempt to add permissions to access lambda:InvokeFunction, agree to it.

By loading aws-lambda-ses-forwarder as a module in a Lambda script, you can override the default config settings, change the order in which to process tasks, and add functions as custom tasks.

The overrides object should may have the following keys:

See for a demonstration of providing configuration as overrides.

Test the configuration by sending emails to recipient addresses.

Based on the work of @eleven41 and @mwhouser from: https://github.com/eleven41/aws-lambda-send-ses-email|||

aws-lambda-ses-forwarder - Serverless email forwarding using AWS Lambda and SES