Authenticate against a MySQL server without knowing the cleartext password.

This PoC shows how it is possible to authenticate against a MySQL server under certain circumstances without knowing the cleartext password when the Secure Password Authentication authentication plugin (aka , the default method) is used.

Note: This is not a bug nor a vulnerability in MySQL (this is hardly an exploit actually), it is just a direct consequence of how the authentication protocol works. If an attacker is able to satisfy the above points then the whole system is probably already compromised. Yet this exploit may offer an alternative approach to obtain a proper authenticated access to a MySQL server.

By default, passwords are stored in the table and are hashed using the function which is just a two-stage SHA1 digest:

After the TCP connection phase, initiated by the client, the MySQL authentication handshake continues as follows (simplified):

the client replies with a packet containing the session password ( ), computed as follows: where is the cleartext password as provided by the user and is a mere string concatenation operator; the server can verify the challenge and authenticate the client if: where is the two-stage SHA1 digest of the password, stored in the table; the server does not know the cleartext password nor its SHA1 digest.

With enough information an attacker is able to obtain and therefore to solve the server challenge without the knowledge of the cleartext password.

The first-stage SHA1 can be obtained as follows:

To ease the reproducibility of the exploit, this PoC provides two tools:

To build just run (or to produce a statically linked executable). The Makefile will look for the file in this directory and will download it if not found.

Run without arguments to display the usage message.

In accordance with the previous example:

Once a successful authentication handshake is captured the output will be like:

If no account information are provided, the tool will only display the salt and the session password.

Building the MySQL client may take some time and requires a certain amount of free disk space:

Use as the original MySQL client, just remember that the option now requires a 40-digit hexadecimal SHA1 string.

In accordance with the previous example:

and is the hashed password stored in the table.|||

mysql-unsha1 - Authenticate against a MySQL server without knowing the cleartext password