Let's admit it – speaking to other people is so last century. Today, we might talk to our machines (Siri, Alexa, etc.), but, if we want to communicate with people, we use text. We SMS rather than call or chat via Slack rather than video via Skype. Even things like one-on-one customer support seem to be increasingly chat rather than call.

This desire to text rather than talk has led to the increasing utility of bots to the degree that banks can now understand emoji. That's right – who needs words even!

However, creating bots isn't necessarily easy. You have to be able to receive text (or in some cases, convert voice commands to text), parse it and match it to a response. This is complicated by the fact that there are a hundred ways to say any one thing. In some cases, you may even want your bot to understand the nature of a conversation, so that every input isn't looked at in a silo, completely disconnected with what has previously been communicated.

This is where a tool like SuperScript comes into play. SuperScript is an engine for creating bots using JavaScript and Node.js that helps overcome some of these difficulties by offering a way to do things like normalize user inputs and build complex conversations. It was something that personally fascinated me and, in this article, I hope to introduce you to how SuperScript works by discussing a sample project I created with it.

A conversational bot is arguably a simplistic form of artificial intelligence in that it mimics a human behavior while appearing to understand both language and context within a conversation. Of course, AI has been the subject of endless science fiction, which is where I took the inspiration for my demo project.

MUTHUR is the AI that runs the Nostromo in the movie Alien. One of the interesting things about MUTHUR compared to other computer AI in science fiction movies is that every interaction with her on screen is done via text.

If you watch the scene above, the MUTHUR AI clearly understands the context of conversation. For instance, she knows that the "enhancement request" is related to the question about special order 937 and so on.

Alien being one of my favorite movies, this inspired me to see if I could recreate MUTHUR as a chat AI. Admittedly, there is limited direct interaction with MUTHUR in the movie (most occurring in the scene above), but there is quite a bit of implied interaction. So, much of the chat bot I ended up creating is more "inspired by" rather than direct recreation of the movie.

Keep in mind that the bot I created is still a work in progress – there were a lot of interactions I had planned that I simply haven't been able to complete yet and improvements to existing interactions that I'd like to see. You can find the project on GitHub here. Let's take a deeper look at some of the features and how SuperScript makes them possible.

I won't regurgitate the nicely done SuperScript installation guide here other than to reiterate that you will need both Node.js and Mongo installed to get started.

Once everything is installed, you can create a new bot project via:

This will create a default project and install the necessary dependencies. For the purposes of my MUTHER bot demo, I have only created a telnet client. However, SuperScript does support other clients, including Slack.

If you want to follow along with the code, feel free to clone the repo. Once you have, you'll need to run through the parsing of the text, building the project and starting the telnet client.

Before we can do that though, we need to make sure Mongo is running. In a Terminal/Command Prompt tab, start Mongo.

Now in a separate Terminal/Command Prompt tab, let's get the project ready to run and run it.

Below you can see the result of my running these commands on the project.

Our telnet server is now running. So, in another Terminal/Command Prompt tab, we can connect to it.

You can see what it looks like if this connects properly below.

The welcome message is obviously customizable ("interface 2037" is straight out of the Alien movie after all and not a SuperScript default). This is set within script that runs the telnet server. For the most part I've used the default script, with one exception we'll get into later, but it is important to note that you can customize how the telnet server functions.

Here is the code from the method where the welcome message is set:

Now that we have our basic telnet interface set, let's start by building a simple command-and-response type interaction.

We define our communication with the bot within the chat/main.ss file. Within that file, any line starting with a is a statement by the user (aka trigger), and the lines beginning with are a response from the bot (aka reply).

So a super simple trigger and reply might look like…

However, there are a lot of ways that you can customize how even simple trigger/replies are handled. Let's look at an example from MUTHUR.

In this case, I have specified three replies to the trigger. Under normal circumstances, SuperScript would just randomly choose one, but I have used the flag to indicate that I would like it to use all three responses in order. The result looks like this:

It's important to point out that in the normal course of conversation with the bot, it will throw out duplicate triggers. This means that if I were to keep throwing the trigger at the bot, it would stop responding once it had run out of replies. SuperScript keeps the last ten triggers sent from a user and is designed to stop replying to repeated use of the same trigger. However, you can override this behavior by using the flag.

There are plenty of other ways to make triggers more flexible, including things like wildcards and optional text. We'll explore these a bit as we go on. You can learn more about basic replies in the documentation.

Let's look at how to do some slightly more advanced conversations using SuperScript.

A typical conversation would involve multiple levels of discussion that build upon one another. For example, in the scene from Alien where Ripley has a conversation with MUTHUR about how to destroy the alien shown earlier.

Using this example, when Ripley enters the emergency command override, MUTHUR knows that it has to do with Special Order 937, which was from the prior trigger and response. Let's see how we can recreate this conversation within SuperScript.

As you can see, we can tie one trigger to a prior reply by using and specifying the reply that the trigger is connected to. Multiple triggers can be tied to a single reply. For example, the last trigger was set as a catch all using in the case someone enters the wrong emergency command override.

I should state that, in this case, my conversation was very fixed to specific statements in order to recreate the exact movie dialogue, but you'd likely want to use SuperScript's wildcards, alternates optionals and other tools to make the triggers much more flexible.

At times, as you learn things about the user that are pertinent to the conversation, you'll want to retain that information. For instance, if the bot asked my name and I answered, I'd expect it to know my name from that point on rather than need to ask again. This can be done easily within SuperScript.

SuperScript has the concept of user knowledge, which will allow us to store and retrieve information about them. First, let's look at storing the information.

The in the trigger indicates that I expect one "word" to follow the access code statement. This wildcard is then captured by SuperScript. In my reply I save that captured item (i.e. ) using the method, and I've given the saved item a key of .

Technically, I could retrieve this key as easily as follows.

First, I am using some new things in the trigger: alternates and optionals. This means that this specific trigger could be one of the following:

With a few simple changes, I've made the trigger way more flexible. Meanwhile the response is simply using the function and passing the key that I used to save the access code. Simple.

Of course, I wanted to make it even more flexible. What if the bot doesn't know your access code yet? I wanted it to respond differently in this case. Doing this requires using a SuperScript plugin. So, let's look at how to do that.

A SuperScript plugin is essentially just functions living within a JavaScript module in the folder of your project. Let's look at how we can use this to create a more advanced version of our access code response.

First, let's call the plugin in our reply.

In this case, I've replaced the reply text with a call to a method called that lives within a plugin (accesscode.js) in the directory.

Here is the code for my plugin.

The result looks like this:

Now, because it is accessing an internal function ( ) within SuperScript, this plugin is slightly more complicated than typical. Under most circumstances you would simply call the callback function (i.e. the value that was passed in) with the text you want returned to the user. For example, you might call an external service. Let's look at another example that does just that.

As part of my MUTHUR bot, I created a plugin that actually calls two external APIs to try to a) figure out your location based upon your IP and then b) get the sunrise based upon your location.

The trigger and reply are simple.

Now let's look at the method (I've placed this in a file named sunrise.js).

Whao! That's it?! Well…no. All I'm doing here is passing along the callback function to another internal function in our plugin called . This method will use the FreeGeoIP API to try to determine the location (of the telnet server in this case, which is running locally anyway). This uses the module in Node, which was imported in the earlier code.

Now that I have the latitude and longitude, I am passing that information, along with the callback, to the next method: . This method uses the Sunrise/Sunset API to try to determine the time of the sunrise based upon the latitude and longitude.

Once I get a response, I finally send a message back to the user via the callback function. Here's what it looks like in use.

Ok. I know I've covered a lot of ground here, but bear with me for one more fun (and slightly experimental) idea for what you can do with a plugin.

Under normal circumstances, the bot is designed to speak only when spoken too. However, to recreate the countdown timer, I needed to have the bot speak on it's own once the countdown was triggered.

Calling the plugin is no different than previous examples.

To create the countdown itself, I used a module called node-timers. The countdown would trigger an event on a customizable interval. The issue is that we can only use the callback once.

To overcome this, (with advice Rob Ellis, the creator of SuperScript) I tweaked the method within my telnet server.

The key here is the parameter to the method. Basically, this passes the socket being used as a data parameter so that I can then access it within my plugin using the property of .

In my method, I create an event listener based upon the timer, which is set to the time that the user passed in their trigger. At each poll interval, MUTHUR replies with the time remaining using the websocket connection until the timer runs out and she responds with "engines overloaded."

Before I leave you to start off creating your version of WOPR from WarGames, I wanted to share a few helpful tips to overcome some stumbling blocks I ran into while building a bot with SuperScript.

I covered a lot here (and you made it all the way to the end, congrats!), but, honestly, there is a lot more to SuperScript than I show here. The project's documentation details many of these other topics.

Obviously, recreating classic movie AI, while critically important, isn't the only use for bots. Personally, one future I see for bots is as a way to simplify input and interaction. For instance, forms can sometimes be overwhelming, with multiple pathways all represented in a single, complex form page. But bots potentially present a more comfortable way of data collection that could potentially hide the complexity of a form via a naturally branching conversation. That's just one idea, I know there are many more…so go out and have some fun creating your own.|||

Brian Rinaldi explores creating a chat bot using JavaScript and Node.js built upon the SuperScript framework that can carry on complex conversations.