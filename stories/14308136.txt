More thoughts on what Redux requires, how Redux is intended to be used, and what is possible with Redux

This is a two-part series, intended to explain why specific Redux usage patterns and practices exist, the philosophy and intent behind Redux, and what I consider to be "idiomatic" and "non-idiomatic" Redux usage.

In Part 1 - Implementation and Intent, we looked at the actual implementation of Redux, what specific limitations and constraints it requires, and why those limitations exist. From there, we reviewed the original intent and design goals for Redux, based on the discussions and statements from the authors (especially during the early development process).

In Part 2 - Practice and Philosophy, we'll investigate the common practices that are widely used in Redux apps, and describe why those practices exist in the first place . Finally, we'll examine a number of "alternative" approaches for using Redux, and discuss why many of them are possible but not necessarily "idiomatic".

There's a long list of common approaches and "best practices" that are used in Redux apps. Many of the frequent complaints about "boilerplate" involve these concepts. Let's walk through these practices and review the reasons why they're common and usually encouraged.

These three concepts are probably the ones most commonly referred to in complaints about "boilerplate". I was going to cover each of these separately and in detail, but then I realized that there's already a well-written document that addresses why these concepts exist and why they're a good thing: the "Reducing Boilerplate" page in the Redux docs.

As mentioned in Part 1, many of Redux's conventions are inherited from the original Flux Architecture concepts, and the Flux Actions and the Dispatcher section of the Flux docs does describe these ideas. My earlier post in this series, Idiomatic Redux: Why Use Action Creators?, also gives further thoughts on why use of action creators is a good practice.

There was also an interesting Twitter thread last year, where Dan responded to an article about "no action creators needed":

Plain object actions are a core design decision for Redux. Use of action constants and action creators is up to you as a developer, but both of those are derived from good software engineering principles like encapsulation and the ever-popular mantra of "Don't Repeat Yourself".

As mentioned in the Redux FAQ on file/folder structure, Redux itself doesn't care at all how you organize your files. That's entirely up to you, and you should feel free to do whatever works best for your project.

Defining different types of code in different files is a natural pattern for a developer to follow. At a minimum, you'd probably want to write your Redux-related code in separate files from your React components. Reducers are their own thing, so it's reasonable to put them in one file. If you've chosen to use action creators in your project, those are a different kind of thing, so they would go in a second file. From there, you would need to make use of the same action type strings in both the action creators file and the reducers file, so it makes sense to extract them into a separate file that can be imported in both places. So, this approach isn't a requirement in any way, but it's a very natural and reasonable approach to follow.

The community-defined "ducks" pattern suggests putting action creators, constants, and reducers all together in one file, usually representing some kind of domain concept and logic. Again, Redux itself doesn't care if you do that, and it does have the benefit of minimizing the number of files that have to be touched if you update a feature.

To me, there are a couple conceptual downsides to the "ducks" pattern. One is that it guides you away from the idea of multiple slice reducers independently responding to the same action. Nothing about "ducks" prevents you from having multiple reducers respond, but having everything in one file somewhat suggests that it's all self-contained and not as likely to interact with other parts of the system. There's also some aspects of dependency chains and imports involved - if any other part of the system wants to import action creators from a duck, it will kind of drag along the reducer logic in the process. The reducers may not actually get imported elsewhere, but there's a dependency on that one file. If that doesn't bother you, feel free to use "ducks".

Personally, I lean towards a "feature folder"-type approach, where one folder contains the code for a given feature, but with separate files for each type of code. I previously wrote some of my thoughts in Practical Redux, Part 4: UI Layout and Project Structure.

This is based on the original Flux idea of having multiple "Stores" for different types of data. Also, in Flux, each Store registered itself with the Dispatcher, and each time an action was dispatched, the Dispatcher would loop through each Store to give them a chance to respond to the action.

Given the desire for Redux to store a variety of data in one tree, the straightforward approach is to have a top-level key or "slice" for each different category of data in the state tree. From there, the concern is how to initialize that state, and how to organize the logic for updating the state.

As discussed in the Structuring Reducers - Basic Reducer Structure section I wrote for the Redux docs, it's important to understand that your entire application really only has one single reducer function: the function that you've passed into as the first argument. That root reducer is the only one that is required to have the signature. It's entirely possible to have that one function be directly responsible for initializing all the slices of the state tree and keeping them updated, but this once again leads us to basic software engineering principles: we split up large sections of code into smaller sections for better maintainability.

There's a natural mapping from having a Store class that manages some data and is notified when an action is dispatched, to having a plain function that is responsible for handling some data and is called when an action is dispatched. Since Flux Stores were turned into slices of state, it follows that the equivalent Redux function would be responsible for managing that slice of state. This results in a nicely recursive structure. Each slice reducer can have the same signature as the root reducer, and as far as a slice reducer is concerned, its parameter is the entire state - it doesn't need to know that it might be a small part of a bigger tree, and could in theory be reused in another context. It's even possible, if perhaps unlikely, that a reducer used as a slice reducer in one application could be used as the root reducer in another application.

This pattern is a direct result of the transformation from Flux to Redux, and is absolutely the encouraged and idiomatic approach.

Ah, the dreaded statement. For some reason, this is one of the most disliked aspects of typical Redux code, and I have yet to figure out why.

Reducers need to examine actions and use some kind of conditional logic to determine whether it's something they care about. You could use statements, but those get repetitive pretty quickly, especially when you're only looking at a single field. A statement is simply an that's focused on possible values for a single field, so it's the most straightforward approach for looking at the contents of .

Switches and if statements are semantically equivalent, and so are lookup tables keyed by action constants. The Reducing Boilerplate docs page explicitly demonstrates how to write a function that accepts a lookup table of reducers to handle various cases, and this concept is also discussed in Structuring Reducers - Refactoring Reducers Example. (There are a couple structures that lookup tables don't handle well, such as running reducer logic in a switch's case, or keying behavior off something other than the field. Dan gave some examples in redux#1024.)

Despite that, somehow the Redux community seems to think that this is a wheel that needs to be re-invented, again and again and again. To expand on a tweet that I posted last year:

Switch statements are fine. If/else statements are fine. Lookup tables are fine. Just pick one and keep going :)

This is another topic that's been covered in detail in existing documentation and posts. In particular, the Redux FAQ question on async logic and Dan Abramov's two Stack Overflow answers on why middleware are used for async behavior and how to handle async logic like timeouts explain things very well.

Summarizing the ideas: you can put your async logic directly into your components. However, for reusability, you probably want to extract that logic out of the components and into separate functions. Connected components potentially have access to , but can only access the state that has been extracted via . Separate functions could only access or if the store is directly imported and referenced. That means that async logic that has been extracted into functions needs some way to interact with the store.

As discussed in Part 1, some Flux libs like Flummox had various forms of async handling built-in, but you were limited to whatever was included. For Redux, middleware was explicitly intended as a user-configurable way of adding any kind of async behavior on top of Redux.

Because middleware form a pipeline around and can modify/intercept/interact with anything coming through that pipeline, and are given references to the store's and methods, they form a loophole where async behavior can occur but still interact with the store during the process.

There are dozens of existing libraries for managing side effects in Redux. That's because there's a lot of ways to write and manage asynchronous logic in Javascript, and everyone has different preferences and ideas on how to do so. As stated previously, you don't need middleware to use async logic in a Redux app, but it's the recommended and idiomatic approach.

From there, it's a question of what use cases you have, and what your preferences are for writing async logic. Side effects approaches can generally be grouped into five-ish categories. I'll link to the relevant sections of my Redux addons catalog, and point out the most popular libraries for each category:

There's a particularly good comparison of many Redux side effect libraries at What is the right way to do asynchronous operations in Redux?.

All of these are viable tools and approaches for managing side effects in Redux. The two most popular at this point are thunks and sagas, but it really is up to you to decide what you want to use. (For what it's worth, I use thunks and sagas, but haven't needed anything else.)

It's pretty common to see Redux applications dispatching multiple actions while making AJAX requests, such as , , and . This relates to the React world's emphasis on describing as much as possible in terms of explicitly tracked state (which carries over to Redux).

If you want to show some kind of "loading..." spinner, a React app shouldn't just go call . Instead, it should update some kind of state, and use that to determine that it needs to show the spinner. Similarly, with Redux, you're definitely not required to dispatch actions like this when you make AJAX requests, but having those actions and the corresponding state values can be useful for updating the UI or other aspects of the application.

I covered the main reasons and benefits of normalization in the Structuring Reducers - Normalizing State Shape section of the Redux docs. I'll paste the most relevant section here.

A normalized state shape is an improvement over a nested state structure in several ways:

Note that a normalized state structure generally implies that more components are connected and each component is responsible for looking up its own data, as opposed to a few connected components looking up large amounts of data and passing all that data downwards. As it turns out, having connected parent components simply pass item IDs to connected children is a good pattern for optimizing UI performance in a React Redux application, so keeping state normalized plays a key role in improving performance. (I talked more about how normalization matters for performance in my post Practical Redux, Part 6: Connected Lists, Forms, and Performance.)

It's perfectly legal to write code that accesses nested portions of the state tree directly, such as . However, the standard software engineering principles of abstraction and encapsulation once again come into play. If looking up certain fields can be complicated, than it's probably a good idea to encapsulate that work in a function. If other parts of the application shouldn't be concerned with the exact structure of the state, or exactly where to find a particular piece of data, it's probably a good idea to encapsulate that lookup process in a function. "Selector functions" are thus simply functions that read in some portion of the state tree and return some subset or derived data.

The use of selector functions with Redux was originally inspired from the idea of "getters" in NuclearJS, which allowed you to subscribe to changes in certain keys of state, and derive data. A similar approach was proposed during Redux's development, and the concept was turned into the Reselect library.

Selector functions can simply be plain functions, but Reselect generates selector functions that can easily use multiple other selector functions as inputs, and memoize them so that the output selector only runs when the inputs change. This is an important factor for performance in two ways. First, expensive filtering or other similar operations in the output selector won't re-run unless needed. Second, because the memoized selector will return the previous result object, it will work nicely with the shallow equality/reference checks in (and possibly or ).

It's possible to import the store directly into every component file, write the code to have the component subscribe to the store, extract the data it needs whenever the store is updated, and trigger a re-render of the component. None of that process is "magic". But, repeating one of the themes of this post, it's good software engineering to encapsulate the process so that Redux users don't have to deal with writing that repetitive logic themselves.

A function is basically a specialized selector function, which always receives the entire state as one argument, may receive the wrapped component's own props as a second argument, and must always return an object. The returned object's contents are, per the name, turned into props for the wrapped component.

A function allows injection of the store's method, enabling the creation of logic and functions that dispatch actions from the component. If no function is provided, the default behavior is to inject itself as a prop so the component itself can dispatch actions. Otherwise, the object returned by is also turned into props. Since the most common use case is to wrap up action creators so their returned actions are passed straight to , allows an "object shorthand" syntax - an object full of action creators can be passed instead of an actual function.

If you think about it, and the wrapper components it generates act like a lightweight Dependency Injection mechanism (especially via use of React's mechanism for making the store reference available to nested components). This enables easier testing, since the component isn't reliant on a specific store instance, but also opens up potential advanced use cases like using separate stores in different parts of the component tree, or even overriding/wrapping the store functions that are exposed to nested components.

Overall, these common patterns and approaches generally can be seen as the result of either core Redux design decisions, or straightforward software engineering principles like encapsulation, de-duplication, and reusability. Other than plain action objects, all of these concepts are indeed optional, and if you don't want to use them you don't have to, but there are good reasons why they exist.

I've looked at a lot of different Redux-related code. I've read through hundreds of libraries, applications, tutorials, and articles, and I've seen a huge variety of styles, approaches, and implementations. Between that and my status as a Redux maintainer, I think it's fair to say that I'm an expert on how Redux is used. It also means that, as I said in the intro, I Have Opinions about what "good Redux code" looks like, and what qualifies as "idiomatic Redux "code". We've now reached the part where I'm going to express those opinions. (You have been warned :) )

So, in this last section, we'll look at several variations in how Redux can be used, and I'll offer my thoughts on whether these things are or are not in keeping with the spirit of Redux.

As discussed earlier, the primary intended reducer structure is slice reducers composed together. However, since reducers are just functions, there's an infinite variety of ways to write and structure reducer logic. I discussed some alternate approaches in the Structuring Reducers - Beyond docs section, including some examples of sharing data between slice reducers, sequencing dependencies, and use of higher-order reducers to wrap existing reducers with additional functionality.

One complaint I've seen is that having many separate slice reducers responding to the same action makes it harder to figure out what actually gets updated for that action. An example of this is the article Problems with Flux, written shortly after Redux was released. A couple quotes:

I can see that point, and would say there's some truth to it. One the other hand, one of the reasons to have action constants is that it makes it really easy to "Find All Usages" in your codebase, so it doesn't seem like it's that much more work to see what's happening.

I would say that composed slice reducers still qualifies as more idiomatic, but if you'd rather structure your reducer logic oriented around the actions, that's fine, and another example of "do whatever works for you".

This is a topic that has resulted in very long, very complicated, and very pedantic discussions, from people who care deeply about this sort of thing (and especially those who have experience with related concepts like Event Sourcing and CQRS). I actually don't have too many opinions in this area, but I'll try to highlight some of the areas of discussion.

There's been considerable debate over what verb tense to use when writing Redux action constants. Past tense, such as , can be seen as saying "here is something that occurred, how do you want to respond to it?". Present tense, such as , can be seen as more of a command - "go do this". This apparently ties into differences between Event Sourcing and CQRS, which I am only vaguely familiar with.

As a related example, take the idea of buying a pizza combo that gives you a pizza and a bottle of soda. Is it better to dispatch , or is it better to dispatch and ?

In a Twitter thread about issues with thunks, Dan Abramov said:

I see Dan's point, and he's not wrong, but there's a whole lot of gray area in here.

On the one hand, you can dispatch an action with whatever contents you want, and if no part of the reducer logic cares about it, it will sail through the system and no state will be updated. On the other hand, there usually is an implicit contract between the code that formats/dispatches the action, and some portion of the reducer logic that is specifically interested in that action. If the action isn't formatted correctly, then the reducer that's looking for that specific action type will either ignore it, or try to access a non-existent field and break.

In that sense, Redux is just like any other event-based / pub-sub style system. Triggering events or dispatching actions acts like a "function call at a distance", and if you don't provide the right parameters to whatever code is on the other end, it won't work.

Following on from that, there usually is an expectation that a certain chunk of the reducer logic is interested in this specific action. For example, if you have , , and in your state, and each of those is managed by copies of the same slice reducer function, dispatching needs some kind of additional info to differentiate which list it's supposed to apply to, whether it be dispatching type instead, or adding to the action. We frequently toss out the idea of "treating the store like it's a client-side database", and certainly an SQL update query would normally give specifics on what rows should be updated.

Ultimately, I don't think there is an absolute "right" answer here. I think this is a topic where it's really easy to get caught up in bikeshedding, and I'd rather spend that time building something useful :)

This topic carries on from the previous one.

In the couple applications I've worked on, I've found myself putting together a number of generic "primitive actions" that are usually dispatched as part of a larger sequence. In Practical Redux, Part 8: Form Draft Data Management, the logic for "stop editing a Pilot and save the changes" involves dispatching three actions: a specific action that resets a flag, a generic "apply changes from draft to current for this item type+ID" action, and a generic "delete this item type+ID from draft" action. I certainly could handle all three steps in a single action, but as I was putting together the logic it made more sense to build the primitives first and then compose them together, especially because I needed to repeat the "draft data" behavior multiple times for any kind of item.

I addressed some of the concerns regarding multiple dispatches in my post Idiomatic Redux: Thoughts on Thunks, Sagas, Abstraction, and Reusability. Quoting myself:

A "cursor" is (roughly) a function that offers read/write access to a particular nested piece of data. For example, if I had a notional cursor library and created a cursor like: , the returned cursor object would let me manipulate without having to worry about the intermediate layers myself.

A number of people have tried to apply that approach to updating Redux state, either directly through an actual cursor library, or via reducers that allow you to specify a state keypath and new value in the action. I've also seen people try to write "simplified reducers", where the only action in the entire application is along the lines of , and the only reducer function is simply .

There was an extended discussion on how Redux relates to cursors in redux#155. Dan had some great comments in that thread, and actually anticipated people trying these approaches. I'll quote some of his comments here.

First, he describes why Redux avoids write cursors:

Later on, he addressed the idea of -style reducers:

Both of these are things that are certainly possible with Redux, but do go against the intended spirit of "semantically meaningful actions that can be traced through the system".

As discussed in the Redux FAQ entry on "where do I put business logic?", there's valid tradeoffs with putting more logic in action creators vs putting more logic in reducers. One good point that I saw recently is that if you have more logic in reducers, that means more things that can be re-run if you are time-travel debugging (which would generally be a good thing).

I personally tend to put logic in both places at once. I write action creators that take time to determine if an action should be dispatched, and if so, what the contents should be. However, I also often write corresponding reducers that look at the contents of the action and perform some complex state updates in response.

I generally try to minimize the number of places I do . That approach is definitely helpful if I'm doing something like updating multiple possible fields in a form and don't want to write separate / / handlers for each field.

I would say neither is more "idiomatic" specifically and are perfectly valid choices, but there are some benefits of erring on the side of more logic in reducers.

I've seen several cases where people put "reducers into their actions". The code that dispatches the action includes a reducer or state update function, and the root reducer simply calls . This seems like a bad idea for a couple reasons. It not only loses traceability in the same way as write cursors, but also will break time-travel debugging because the functions won't serialize properly.

As discussed throughout these two posts, the core values of Redux are things like:

Functional programming can be a tough concept to adjust to for many programmers that only have experience with OOP. (I myself am still somewhere in the middle of that spectrum - I'm fine with basic use of FP, but high-level FP usage is still mostly over my head, and there's aspects of OOP that I still find more comfortable.)

As a result, some people have tried to build various OOP layers on top of Redux. This includes libraries like Radical, React-Redux-OOP, Tango, Conventional-Redux, and many others. These libraries tend to follow similar patterns - things like defining classes whose methods are action creators and reducers, domain models to insert into the Redux store, "state classes" that wrap around state values, or "dispatching functions" instead of plain action objects.

These libraries generally wrap up and hide aspects of Redux's behavior, mostly for the sake of doing things in an OOP fashion. A common theme is that these libraries only support a 1:1 relationship between dispatched actions and reducers, when many reducers responding to one action is a core intended use of Redux.

There's an excellent slideshow called Reactive, Component-Based UIs that lays out some principles for "Thinking in React", and I think these principles totally apply to Redux as well. Quoting slide 3:

It's also worth noting that any framework or library has certain idioms and expectations for how code is written and structured. When you start writing code that goes against those idioms, there are fewer people who are going to be familiar with your approach, and it's less likely that it will pick up any traction. I wrote an HN comment a while back about why a particular OOP Redux wrapper library wasn't getting attention, and went into more detail on that topic.

Overall, these OOP wrapper patterns may work at the technical level, but they definitely go against the intent and spirit of Redux.

There's an apocryphal story about an experiment where scientists taught monkeys to not climb up a ladder by spraying water at them, and later on, older monkeys would slap newer monkeys who tried to climb the ladder. Searching suggests that story is fake, but we understand the moral involved - many times people are told to do things without understanding why, and it becomes "received wisdom" that is passed down the chain. Eventually someone complains about the situation thinking the behavior is pointless, and it's because they don't understand the original reasoning for doing things that way in the first place.

I'd say that a lot of people's complaints about Redux follow this sort of category. They've seen "action creators" and "immutability" and folders named and dozens of different side effect middlewares, complain about the apparent excess baggage involved in using Redux, and "why do I need any of this stuff in the first place?".

Well, turns out that if you look at the history of Redux and how it's intended to be used, and then apply some pretty straightforward software engineering principles to its use in larger applications, you wind up with the common patterns and practices that we now can identify as "idiomatic Redux usage": plain action objects and action creators, slice reducers and switch statements, async middleware and connected components, selectors and normalized state. (For a great example of how these pieces fit together in practice, check out the recent article by Mapbox on Redux for state management in large apps.)

As I've said throughout these posts, in the Redux FAQ, and in comments on Reddit and HN and elsewhere: ultimately, it's your application, and your codebase. If you don't like these patterns, you don't have to use them. Redux is simple and flexible enough that you can twist it in a myriad of other "unintended" directions. But, like Chesterton's fence, you should at least understand that these idiomatic usage patterns exist for good reasons!

I hope this journey through the history and usage of Redux has been informative, and helps you and your team go forth and build better applications.|||

