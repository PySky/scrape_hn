Effect starts with a very simple idea: instead of having a function which performs side-effects (such as IO):

you instead have a function which returns a representation of the side-effect:

We call objects like an intent – that is, the intent of this effect is to read a line of input from the user. Ideally, intents are very simple objects with public attributes and no behavior, only data.

To perform the ReadLine intent, we must implement a performer function:

To do something with the result of the effect, we must attach callbacks with the method:

A (sometimes) nicer syntax is provided for adding callbacks, with the decorator.

Finally, to actually perform these effects, they can be passed to , along with a dispatcher which looks up the performer based on the intent.

This has a number of advantages. First, your unit tests for become simpler. You don’t need to mock out or parameterize the function - you just call and assert that it returns a object with the correct ‘prompt’ value.

Second, you can implement in a number of different ways - it’s possible to override the way an intent is performed to do whatever you want. For example, you could implement an HTTPRequest client either using the popular requests package, or using the Twisted-based treq package – without needing to change any of your application code, since it’s all in terms of the Effect API.|||

