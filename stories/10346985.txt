The Jai primer has moved to GitHub, where it will be easier to maintain. This version will no longer be updated. Click this link to find it at its new location. 4 Further Notes 4.1 Why not use ... ? 

 creator of indie games Braid and any-time-now-to-be-released The Witness. It is an imperative static/strongly typed C-style language, but with a variety of modern language that C lacks. Blow began work on Jai in late September 2014. It  is still in development and as of yet is unavailable to the general public. Blow developed it with an eye towards video games, but in fact it’s a general purpose programming language that could be used for any task. 

 DISCLAIMER: I have no association with Jon Blow. As of this writing there are no public compilers for Jai, so all information in this text is collated from Jon Blow's YouTube videos. Therefore nothing in this post is official. There may be information more up to date than what is available on this page. That said, I believe everything in this post to be up to date as of this writing. (If you are Jon Blow and want me to correct anything in this post, I would be happy to.) Everything in this document, unless otherwise noted, is implemented and currently working in Blow's private prototype, but as it is not yet released, everything is subject to change. In short, Jai could be described as a modern replacement for C. Some of the coolest features: Arbitrary compile-time code execution - Any function of the program can be made to run at compile time with #run Syntax-facilitated code refactoring - The language syntax facilitates code reuse by making it easy to move code from local block → local function → global function Integrated build process - The build process and parameters are specified by the source code itself, for consistency Data-oriented structures - Automatic conversion between Structure of Arrays and Array of Structures, avoids classes and inheritance Reflection and run-time type information - Static type information for every structure available at runtime A new approach to polymorphic procedures - Polymorphism at the function level, with programmer control by special procedures Low-level memory management tools - Better control over how libraries allocate memory, automatic ownership management, no garbage collection Explicit control over optimization and performance characteristics - Explicit control over things like inlining, bounds checking, and initialization At some point after programming for many years, the line between “exciting programming adventure” and “please not another code refactoring” can start to disappear. Having to update the function declaration in the header when you change its signature gets old fast. When C was originally written in 1973, there was a good reason for all that header stuff, but today there isn’t. Quality of life improvements afforded by the language can have quantifiable benefits to the productivity of the programmer using the language. (If you aren’t convinced of that, try programming anything in Brainfuck.) Compiling should be fast if not instantaneous, refactoring code should require a minimum of changes, and error messages should be helpful and pleasant. Blow believes that an improvement of the tools that programmers use can produce more than a 20% increase in productivity, and this was a primary motivation in creating a new language. Video games are, as Blow puts it, machines that fill memory. The majority of the time, game programmers are thinking about how to fill memory with huge reams of data in ways that allow the data to be efficiently accessed and processed. Hundreds of megabytes of memory must be moved from the hard disk into main memory, and from there into the video card or the processor cache to be processed and returned back to main memory. Because video game players don't like to wait, all this must be done as fast as is allowable by laws of our universe. The primary purpose of a programming language is to allow the specification of algorithms to manage data. Language features like garbage collection and templated data streams and dynamic string classes may help the programmer write code faster, but they don't help the programmer write faster code. 

 Another major design goal of Jai is to reduce what Blow calls friction in programming. Friction happens when the syntax of a language interferes with the programmer's workflow. When Java requires that all objects be classes, forcing programmers to put the global variables they need into global classes, that's friction. When Haskell requires that all procedures be functions and have no side effects, that's friction. When C++'s lambda function syntax is different from its class method syntax is different from its global function syntax, that's friction. Java Haskell and C++ are examples of what Blow calls "big agenda" languages, where the idealism (and in C++’s case, lack of a consistent vision) of the language gets in the programmer’s way. Blow has a low tolerance for friction in his language, especially when the friction is unnecessary. 

 Blow wants a language that is designed for good programmers, not against bad programmers. Languages like Java were marketed as idiot-proof, in that it’s much more difficult for programmers to write code that can hurt them. The Jai philosophy is, if you don’t want idiots writing bad code for your project, then don’t hire any idiots. Jai allows programmers direct access to the sharp tools that can get the job done. Game programmers are not afraid of pointers and manual memory management. Programmers do make mistakes and cause crashes, perhaps even serious ones, but Blow argues that the increase in productivity and reduction of friction when memory-safe mechanisms are absent more than make up for the time lost in tracking down errors, especially when good programmers tend to produce relatively few errors. If as a programmer you care about user experience, (which you should) then you should care about the performance of your program. You should reason about your code's behavior on the range of machines that you're shipping on, and design your data and control structures to use that hardware's capability most efficiently. (Here I'm describing Mike Acton's "Data-Oriented Design" methodology.) Programmers who care about the performance of their software on their target hardware are inhibited by programming languages that sit between them and the hardware. Mechanisms like virtual machines and automatic memory management interfere with the programmer’s ability to reason about the program’s performance on the target hardware. Abstractions like RAII, constructors and destructors, polymorphism, and exceptions were invented with the intention of solving problems that game programmers don’t have, and with the result of interfering with the solutions to problems that game programmers do have. Jai jettisons these abstractions so that programmers can think more about their actual problems - the data and their algorithms. The syntax “ ” specifies that a variable named is of the type and is to receive the value . It was proposed by Sean Barrett. Some examples: 

 

 If the type is omitted then the compiler infers it based on the value: 

 

 If the value is omitted then you have a declaration without an initialization. 

 

 All of this is probably backwards from what you’re used to, but the learning curve is shallow and you get used to it quickly. Function declarations look like this: 

 // A function that accepts 3 floats as parameters and returns a float 

 and structure declarations like this: 

 Arrays can be created like this: Arrays do not automatically cast to pointers as in C. Rather, they are "wide pointers" that contain array size information. Functions can take array types and query for the size of the array. Retaining the array size information can help developers avoid the pattern of passing array lengths as additional parameters and assist in automatic bounds checking (see  Walter Bright - C's Biggest Mistake Suppose I want to write a function in C that converts a linear color value to sRGB. This involves the   function, which is on the expensive side. We can avoid   by doing the calculation ourselves instead and distributing the results as part of our program. So we write a table of values and return those. 

    // Find the index in our table for this SRGB value,    // assuming f is in the range [0, 1] 

 (Note: The above is bad code, only used for example. For better code, try stb_image_resize’s sRGB functions.) So far so good, except how will we get the values for the  ? We can write another small program that outputs values. For example: 

 

 We can compile this small program, which will output a table of sRGB values, and then we can copy the output into our actual program. 

 This is a big bucket of problems with it. For example, notice how   is defined twice, once in the actual program and once in the helper program. So we now have to maintain two separate source codes. This can get unwieldy for large programs. 

 In Jai, the same task looks like this: 

 

 The   directive instructs Jai to run the function   at compile time. Jai’s compile time function execution runs the command at compile time and returns a table of values, which is then compiled directly into the binary as  . When the program is run, the   function no longer exists. Only the table it generated exists, which is used by  . 

 The compile-time function execution has very few limitations, in fact you can run arbitrary code in your code base as part of the compiler. In Blow’s first demonstration he shows how to run an entire game as part of the compiler, and bake the data from the game into the program binary. (I hope   is shipped with the language.) The compiler builds the compile-time executed functions to a special byte code language and runs them in an interpreter, and the results are funneled back into the source code. The compiler then continues as normal. 

 Here are some examples of things that a compile-time function could do: 

 Dynamically generate code and insert it to be compiled Download the OpenGL spec and build the most recent gl.h header file Talk to your Mars probe on Mars and wait for the packets to come back and get a photo of what Mars looks like All code begins its life in some kind of code block like this before moving on to be used in more general cases. Jai has some special syntaxes that can assist the programmer in moving code from specific cases out into general cases, to facilitate code reuse. 

 As an example, let’s say you’re writing some code like this: 

        // Inside for loops the "it" object is the iterator for the current object.        // m is a global object that helps us build meshes to send to the graphics API 

 These mesh generation calls are actually a special case of some general quad rendering, so they can be factored out into another function so they can be used in other places. Jai makes this refactoring very straightforward. The first step is to enclose the code in a new scope with a special capture syntax. 

 

 (Disclaimer: This step hasn't been implemented by Blow yet. It's one of his planned features.) The notation is a capture that prevents any object not in the capture from being accessed inside the inner scope of the new bracket. Notice that we had to change “ ” to “ ” and add “ ” to the capture list -- “ ” is not captured and is unavailable inside the inner scope. Captures help in refactoring code as we’re seeing here but they can also help in other ways. For example, when programmers are moving code from being singlethreaded to multithreaded, captures could enforce that only thread-local data is accessed. Captures are an insurance policy that the code inside the capture only reads or writes the state specified in the capture. 

 Now we’ve identified all of the parts of our code that depend on external things, so we’ve improved our code’s hygiene and made it easy to pull this code out into its own function. Now we want to continue so that we can use the quad drawing code in other places. So we create a function out of this block capture: 

 

 

 Notice how the only change we needed to make was to add the function syntax . The capture remained intact. So we went from a blocked capture to a function with very little effort. Now if we like we can move the vectors to be function parameters: 

 

 With parameter names we’re able to change the names of the variables inside the function’s scope to match their new function. Now we can use this function to draw any type of quad, not just particles. The capture retains because is a global object that doesn’t need to be passed as a parameter. And now we have an anonymous, locally scoped function that can be used in our draw code: 

        } (origin, particle_left, particle_up);  // Call the function with the specified parameters

 

 Anonymous functions are useful for passing as arguments to other functions, and this syntax makes them easy to create and manipulate. The next step is to give our function a name: 

 

 Now we could call it multiple times in the local scope, if we like. But we want to access our quad drawing function from the global scope. Moving the function out of the local scope requires zero changes to the function’s code: 

 

 The strength of Jai’s function syntax is that it doesn’t change whether the function is an anonymous function, a local function (i.e. lives inside the scope of another function) a member function of a class or a global function. This is in contrast to in C++, where a local function is called a lambda, and has completely different syntax than a member function, which must have a class name and and so on, which is slightly different syntax than a global function which has no class name or . The result is that as code matures and moves from a local context to a global context, the work of refactoring can be done with minimal edits. 

 Here is Jai’s the code maturation cycle in full: 

 All information for building a program is contained within the source code of the program. Thus there is no need for a "make" command or project files to build a Jai program. As a simple example:         // Jai will automatically build any files included with the #load directive, but other files can also be manually added When the program is built, the establishes all of the build options for this project. No external build tools are required, all build scripting is done within Jai, and in the same environment of the rest of the code. Modern processors and memory models are much faster when spatial locality is adhered to. This means that grouping together data that is modified at the same time is advantageous for performance. So changing a struct from an array of structures (AoS) style:         // ... many other members here         // ... many other members here can improve performance a great deal because of fewer cache misses. However, as programs get larger, it becomes much more difficult to reorganize the data. Testing whether a single, simple change has any effect on performance can take the developer a long time, because once the data structures must change, all of the code that acts on that data structure breaks. So Jai provides mechanisms for automatically transitioning between SoA and AoS without breaking the supporting code. For example: Getting back to our previous example, in Jai:         // .. many other members here Now the only thing that needs to be changed to convert between SoA and AoS is to insert or remove the   keyword at the struct definition site, and Jai will work behind the scenes to make everything else work as expected. Jai stores a table of all type information in the data segment of each compiled program. It can be examined like this: // it is the iterator, it is the Type being examined. it_index is the iteration index, it is an integer // type is an enum, INTEGER, FLOAT, BOOL, STRUCT, etc Full introspection data is available for all structs, functions, and enums. For example, a procedure may look something like this: The preceding code could print something like, " ". An enum can be examined like this: Reflection data such as this can be used to write serialization procedures, commonly used e.g. in network replication of entities and save game data. Current C/C++ methods for this involve heavy use of operator overloading and preprocessor directives. 

 Jai's primary polymorphism mechanism is at the function level, and is best described with an example. When is called, the type is determined by the which is preceded by the symbol. In this case, the symbol precedes the a variable, and so the type of is determined by the first parameter. So the first call to is float + float, and the second call is int + int. In the third call, since the first parameter is  , both parameters and the return value become  . The second parameter is converted from , and the variable is deduced to be as well. Jai has a type called Any, which any other type can be implicitly casted to. Example: ... this section is not written yet! Sorry. (The directive emits a function with a combination of arguments baked in. e.g. becomes equivalent to .) Jai does not and will never feature garbage collection or any kind of automatic memory management. 

 Marking a pointer member of a struct with   indicates that the object pointed to is owned by the struct and should be deleted when the struct is deallocated. Example: 

 delete example; // owned_a and owned_b are also deleted. 

 Here,   and   are marked as being owned by node, and will be automatically deleted when the node is deleted. In C++ this is accomplished through a  , but Blow thinks that this is the wrong way to do it because the template approach now masks the true type of the object. A   is no longer a node, it’s a   masquerading as a node. It’s preferable to retain the type of  , and retain the properties of  -ness that go along with it, because we don’t really actually care about    for its own sake. ... this section is not written yet! Sorry. (Jai provides mechanisms for managing the allocations of an imported library without requiring work from the library writers.) You can replace these with default initializations: Or you can block the default initialization: You can also block default initialization at the variable declaration site: By explicitly uninitializing variables rather than explicitly initializing variables, Jai hopes to reduce cognitive load while retaining the potential for optimization. // Compiler decides whether to inline this // Always inlined due to "inline" above // Never inlined due to "no_inline" above Additionally, there exist directives to always or never inline certain procedures, to make it easier to inline or avoid inline  Things that C/C++ should have had a long time ago: operator for both struct membership and pointer dereference -- no more A defer statement, similar to that of Go Here’s a short list of features that Blow has expressed interest in for Jai. 

 Automatic build management -- the program specifies how to build it A virtual machine (at least, not usually - see below) A preprocessor (at least, not one resembling C's - see below) If it sounds odd to you that Jai is a modern high-level language but does not have some of the above features, then consider that Jai is not trying to be as high-level as Java or C#. It is better described as trying to be a better C. It wants to allow programmers to get as low-level as they desire. Features like garbage collection and exceptions stand as obstacles to low-level programming. 

 A compelling argument for not writing an entirely new language for games is that the momentum and volume of C and C++ code in current game engines is too high, and switching to a new language is too much work for the amount of benefit. Blow argues that engines periodically rewrite their codebase anyway, and since Jai and C are so closely related, C code and Jai code can live side by side while the rewrites that would normally happen anyway take place. Since C and Jai interoperate seamlessly, Jai code can be built on top of existing C libraries. In fact, Blow uses the C interfaces to the OpenGL and stb_image libraries for his Jai test code. So, replacing C and C++ can be done with no added cost to development. Meanwhile, the benefits of replacing C with a language that has all of C’s benefits but fewer drawbacks means that programmers will be happier, and thus more productive. Why not use ... ? WHY NOT USE C++/RUST/GO/D/SWIFT/HASKELL/LISP/ETC? 

 Those are strong languages, but none of them contain the right combination of features (or lack of features) that game programmers need. Automatic memory management is a non-starter for game programmers who need direct control over their memory layouts. Any interpreted language will be too slow. Functional-only languages are pointlessly restricting. Object-oriented-only languages are overly complex. Blow preferred to develop a new language with the qualities that game programmers need, and without the qualities they don’t. These are a few features that Blow has proposed but not yet implemented. To my knowledge they’re not yet in the language. Syntax is preliminary and likely to change. 

 The first is joint allocations: 

 

 Here we want to avoid multiple memory allocations, so we have the compiler do a joint allocation between positions, indices, and uvs, and divide the memory up accordingly. Currently this is done manually in C, and is prone to errors. 

 

 

 The idea here is to prevent one of the most common causes of crashes, null pointer dereferencing. The ? in the above code means that we don’t know whether or not the pointer is null. Trying to dereference the variable without testing to see if it is null would result in a compile time error. 

 

 

 Here Blow is providing markup for his data structures that indicates to the compiler what version of the struct each member was present in. These versioning schemes would be used as part of an automatic serialization/introspection interface, but he’s not gone into details on that other than that the language should have some capability of introspection. Polymorphic function can contain also 'internal' polymorphic type but they can only be used after 'baking' them. Compilation keyword #modify is used to make constraints/transformations on polymorphic types. For example, it allows to define default output polymorphic type, make only one implementation functions for different type u8..32-->u64, complex mapping to reduce the number of generated functions NdT: Powerful, but can be used to build function difficult to understand. It uses parameters names as input. Compilation keyword #body_text takes the parameters types, then return a string contain the body of the function  It's planned to have another keyword #body_if for 'inline' compile time code generation. #bake_values: a compile time specialisation of some function with some (or all) parameters hardcoded. Useful to control inlining, somewhat duplicate (force) inline, but easier to use with functions with lots of arguments. $$: an autobaker for function parameters prefixed by $$ and called with literals (currently no analysis to check if the parameter is known at compile time). End of new features, demonstration of map which show 'high-levelness' of Jay, but requires to free the allocated memory or there is a memory leak (no GC). And of map taking an allocator param which allow usage of stack (faster than heap) for 'inline map'. In the Q&A video, Blow think that 'l ibraries' will be pre-parsed code but not binary, to allow these features working. 04/08/2015 Demo: Bounds check, here strings, overloading. [renox, I didn't have the patience to listen to the full Q&A]

 

 * Array Bound Checking (ABC):

 By default arrays(both SoA and AoS) and strings are bound checked, for optimisation there is a 'no array bound checking' directive: #no_abc (which works either on a statement or on a block),

 you can also disable globally ABC, or enforce always ABC (ignoring the #no_abc directive).

 

 SoA pointers are also bound checked as they're 'fat pointers' aka arrays.

 

 

 * Here strings:

 # string <end keyword>

 ...

 <end keyword>

 Currently no indentation support and the <end keyword> must be at the beginning of the line.

 Strings are Unicode strings. Can be empty.

 

 * overloaded function:

 Overloading works as usual (and also with 'inheritance': Jai 'using' feature).

 One main improvement: with integer literals, the smaller int type which can support the literal is called.

 Works with multiple parameters.

 If there are several possible overload with the same level of conversion, it's a compilation error.

 Integer conversion are preferred to float conversion.

 

 There are 'surprising' features related to overloading on which JB ask feedback:

 1) overloading is scoped: if you can find a match in the local scope, it is selected, even if there is another better match in the outside scope

 baz :: (a: u8) { ... }

 {

     baz :: (a: u16) { ... }

     baz(100) // this use the u16 version.

 }

 

 2) overloading only work on constant function definition (not on functions pointers, lambda).

 

 3) overloading induce a 'file scope'? [renox. I didn't catch this point]

 

 In the Q&A: parametrized type cannot be overloaded currently.|||

