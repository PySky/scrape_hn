Connectable enables you to quickly and effeciently attach actions preformed by one object, to actions of another:

connectable Connectable ( ): signals ( , ) ( , ): .name name ( , ): to: ( Hi , this is .format( to, .name)) : ( .format( .name)) .emit( , .name) speaker Person( ) room (Person( ), Person( ), Person( ), Person( )) heckler Person( ) person room: speaker.connect( , person.say_hello) speaker.connect( , heckler.say_hello, ) speaker.say_hello()

QT has a pretty good write up on the general merits of a signal / slots approach.

To make an object Connectable, all you have to do is inherit from the Connectable class and define your signals at the class level:

Then to signal any of your defined signals, simply emit the signal name, optionally with a value:

Then any Python method or function can be connected to that action, via the connect command:

If you emitted a value and the provided slot method accepts one it will be passed as the first argument to that method.

Connectable adds some additional benefits over a vanilla port of the signal / slots pattern

Installing connectable is as simple as:

I've always loved the simplicity and expressiveness of QT's take on the observer pattern, and wanted to bring a similar experience to Python.

Thanks and I hope you find this connection helpful!|||

connectable - A very simple implementation of QTs signal / slot pattern in Python