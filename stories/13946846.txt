In this blogpost, I introduce the ostinato project: a Chess engine written in Scala.

It’s not the fastest engine around, nor the hardest AI to beat. However, it enables some use cases that I haven’t found good free online sources for, like parsing notations into matches, converting between notations, playing against the AI from a given step in a parsed match, as well as the ability to solve chess puzzles and problems via elegant one-liners on the Scala REPL.

By cross-compiling into JS using ScalaJS, the same Scala code can run in the browser as a JavaScript library, which is great for two reasons:

There is an ostinato Docker image available on Docker Hub (or it can be built locally) which exposes the same API as the JS library via an Akka HTTP server.

Because ostinato is 100% stateless, it’s a perfect candidate for Kubernetes deployments: each individual API request (e.g. an AI move) can be load balanced over a set of pods, and pod count can be auto-scaled based on CPU load average. This makes it attractive for AI research and as a backend for chess sites.

Tool to paste any chess match in any known notation and browse through the moves via Chessboard. Also play from any board state against the AI, or convert to any other notation.

Convert any pasted chess match between the following notations: PGN, Algebraic, Figurine, Coordinate, Descriptive, ICCF, Smith and FEN (with variations).

Two AI’s playing each other (making random moves).

I’ve recently upset some good people of the Scala community with this blogpost that became a language war. Partly, for me, working on this blogpost means showing some of the nice use-cases Scala enables, in particular one that Golang can’t do: solving complex domain-specific problems with elegant one-liners. Hopefully we can focus on the engineering this time. Sorry that I didn’t foresee or do more to prevent this on the previous blogpost.

A quite unique feature of ostinato is that it leverages the Scala differentials in terms of succintness and elegance for actually solving problems. As a result, it becomes feasible to solve chess brain teasers directly in the REPL with only a few one-liners.

Let’s try a checkmate in two moves. Here’s an example puzzle:

White moves first and it should make checkmate in the second move.

First, we need to compile the jar so we can play with it in the REPL. This should be easy: (alternatively, just download the latest jar from Releases)

We should be able to start a REPL with the ostinato jar in the classpath (the exact path could change over time so just the folder and find the ostinato_2.12-*.jar):

Import the core, so we can use the chess classes:

OK. Let’s generate a identical to the one in the puzzle:

All the methods return a , because parsing could fail. In this case, I know it’ll work so I just , and get the board from it.

Note that the Unicode symbols were made with the assumption of black foreground and white background. In the REPL, this is often times backwards. This might confuse you as to which colour is which. Use this as a safe copy-paste.

We’re gonna need to ask ostinato to be optimistic. If we calculate all actions on this board, ostinato will include and , which we’re not interested in. Same will apply for the next moves. Let’s create a instance and pass it around:

Here’s the meaty part. We need to express the following statement in code:

If the puzzle was constructed properly, there should be only one action that satisfies those conditions:

Yes! There’s exactly one in the resulting !

Let’s extract the action so we can apply it to our . That can be accomplished by appending to our previous line (i.e. getting the first action in the history).

Let’s apply the action on the board. Not all actions can be applied on a board, so doAction returns an . For brevity we’ll just it here:

Profit! Do compare with the puzzle site, but the solutions match.

Within the REPL, ostinato becomes a swiss-army knife for chess-related queries.

If you’re gonna be playing around with advanced cases in the REPL, you’ll probably need some time to get used to the code (you should know Scala; no chance otherwise). These examples, the Scaladoc and the hundreds of tests are good starting points, but I’d be happy to help you on my spare time so let me know; my details are at the top of the page and/or post a comment below. There’s a very reduced set of voodoo code overall, and I’m not proud of it (anymore, that is).

Although ~97% of the ostinato codebase is written in Scala, it leverages ScalaJS as a facade to enable JS use cases. By cross-compiling the code, ScalaJS produces an ostinato.js file. This strategy makes all the free tools feasible.

Most of the demos also leverage the popular and solid ChessboardJS library for UI. Because ChessboardJS’ notation conventions make a lot of sense, ostinato’s API was exposed in a way that is compatible with it.

The best part of JS support is that JS developers can use the chess engine without any Scala knowledge.

Just download the latest js file in the releases section.

Using ostinato.js is really simple and easy. For a great working intro, check the auto-play demo.

Here’s the meaty part. You’ll have to pardon my js, but I think it should be quite clear:

The only ostinato line in there is . The rest is ChessboardJS and plain JavaScript.

Here’s what’s available at the moment from JavaScript: Js.scala

From here, you should be able to go to the other examples. If you’re interested in developing an advanced use case, I’d be happy to help you on my spare time. Find my contact details at the top of this page and/or post a comment below.

Running ostinato on the JVM has several pros:

Try starting the server via sbt:

You can check if it’s working by trying the healthcheck:

Or get an initial board to start playing from:

And then make the computer play from it:

This site provides “mate in one move” puzzles. Here’s one example:

Ostinato server expects the input boards in “ostinato notation”, which is simply FEN notation plus (optionally) the history in ICCF notation.

I’m too lazy to translate a board to FEN manually, so I looked around (for way longer that it would have taken me to just do it manually -.-) and I found this Android app that OCRs the board and producess the FEN, which was:

I would expect the basic AI to want to win as soon as possible, so let’s see if it finds the checkmate:

Luckily, the AI didn’t disappoint me :). It recommended advancing the pawn on the g file (above the white king), and it seems adamant that it’s a checkmate.

From a geeky perspective, I find it useful to have this decoupled mini-tool at my disposal.

Also, I recently switched the JSON engine to spray-json which patiently reminded me of the JSON object names and types I was supposed to provide to the API call until I got them right. Props to Mathias. If somebody could please ask him how can I unmarshal the request’s JSON payload when the is not , I’d really appreciate it. I’ve asked around on Gitter and SO and couldn’t get a good solution.

Simply use the provided demo chess game and add the following query parameters:

I’m not a particularly good chess player, but depth 3 beats me. I was so happy when I reached that milestone <3

You can start an ostinato container right from Docker Hub with:

Once it’s up, you can try the healthcheck and other examples described above. Note that Docker may not open the port on ; this depends on your Docker installation.

If you want to experiment with the code and build the image locally (for which you will need sbt & Docker), you can use the provided script on the root folder:

The script will kindly ask you to run if you haven’t done so, or if the last produced artifact was last modified half and hour ago or more.

The script always builds the image with the tag . If you want to specify a custom tag, you can do it like this:

As previously mentioned, ostinato is 100% stateless. The server doesn’t save any state from previous requests, and all the information necessary to respond to a request is present in the request itself.

Thus, load balancing strategies become very simple with ostinato. Some popular solutions right now are:

At least with Kubernetes, there’s also the possibility of dynamically increasing the number of ostinato container replicas when the CPU usage exceeds a given threshold; this is called auto-scaling.

Ostinato doesn’t use any disk and doesn’t have any special configurations so you don’t need to mount anything. As a JVM application, though, it’s not the cheapest in terms of CPU, memory, and image size. It’s using the smallest base image I could find that has a JVM: the alpine-java one.

Here’s a deployment manifest to get you started:

The rationale behind low requests and high limits is that ostinato aggresively parallelises requests but they arrive infrequently, so bursts of usage can be multiplexed on the same Kubernetes minion. Mileage may vary; greater depths are memory hungry.

You’ll need a service to expose the server to your client code. Here’s a service manifest:

Your ostinato instances should be reachable via the Kubernetes proxy API, e.g.:

Developing ostinato was an amazing experience. I got to learn a lot about chess, a lot about Scala, a lot about OSS and a lot about software engineering.

I believe ostinato has enabled some free and open source chess-related use cases that were unavailable before; if you find them useful I’d be very happy to hear about it.

One thing I wanted to learn was how much I was profiting from OOP (after reading Lawrence Krubner’s famous OOP blogpost). Seeing chess as a poster child for OOP, I started the library as a “turn-based game library” rather than just a “chess library”, where extended and extended and so on. The resulting code scares me still.

Another thing I’ve learnt is that OOP and immutable design meet the hardware in a blurring mist, and while the succintness and elegance can aid in real-life problem solving, they also hide big O complexity greatly. At some inflection point, the indirection trade-off is not worth it. While not proud about it, I must link you to some compromises I’ve made to gain acceptable response times.

During extensive refactorings, I’ve learnt to love IntelliJ’s renaming features. If just for that, and with its shortcomings, I think IntelliJ has raised the bar in that respect. I’ve found it as convenient as Sublime Text’s multiple cursors.

I’ve learnt to beware of implicits. While they enable important use cases, they are used way more than they should be. I wasn’t able to completely get rid of them in the ostinato codebase (partly because I was bound by the superclass’ method signatures; thanks OOP), but overall I believe I’ve tamed the beast and learnt a valuable lesson.

Big thank you to Cecilia Fladung for designing the logo, and to the elite reviewers: @echojc, @therealplato and @chris_d_barret.

Thank you for reading this blogpost. KISS!|||

A chess engine that solves several use-cases that there are no good free online sources for, and a good candidate for AI research or for a backend for chess sites.