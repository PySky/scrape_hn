Do you use Dependency Injection? Of course you do, you’re a responsible programmer, and you care about clean, maintainable, SOLID code with low coupling. You know perfectly well that New is Glue, and you understand the value of programming to interfaces, not implementations.

So do I, but please note that none of this means you should pair each and every one of your domain classes with a more or less identical interface. I suggest that you should prefer working with your concrete domain classes instead. This may sound like a dirty hack to you, but my claim is that doing this will in fact improve the quality of your code. Pairing every class with an interface, on the other hand, is an anti-pattern.

Programming to interfaces means you should try to use the most generic abstraction available to you when you program. If you have a queue of people and you need a utility method to find the tallest person, you should not do this:

That method does not need to care whether the collection of people is a or something else, so you follow ReSharper’s advice and do this:

However, this does not mean that if you have a domain class that you need to handle somewhere, you must first create the interface and handle that:

Perhaps you do this because you think it is dictated by SOLID, DDD or DI, but the reality is that you are in fact introducing unnecessary complexity and duplication of code, violating YAGNI, and lowering readability and maintainability of the codebase.

So what’s actually the problem? Well, the thing is that all classes already expose interfaces to begin with. The set of all non-private class members is an interface. If you decide to create an definition that matches the public members of , you will simply have duplicated the interface of and added no real abstraction and zero value. Browsing code like this is no fun whenever you go to a definition, expecting to get to a class implementation, and just ending up in an interface, where you need to do another step to go to the implementation.

But I need this interfaces to make Dependency Injection work, I hear you say. No, you don’t. Let me demonstrate. Let’s say you have a method that needs to call a domain object in order to create an order:

Now, you don’t want to do in there, and I totally agree with you on that. So you decide to pass an interface using constructor injection like this:

Then you just need to register your actual domain class with the container, and you’re good to go:

Guess what? All you need to do in order to get rid of that superfluous is to, well, remove it. In your constructor, receive the concrete class instead:

As for the registration, it just gets easier:

That’s it. You’ve now cleaned up some code. But what about unit testing? By replacing all those interfaces with concrete classes, surely I must have given up the ability to unit test my domain classes in isolation? Not at all, and I’ll show you.

Imagine that the calls a class to save the new order, and that both these classes make use of a class to report progress. Let’s say you want to test the method, but without the class talking to the database. You do, however, want to use the real .

The method that we want to test looks like this:

The method that we want to mock out looks like this:

If only you had used interfaces, then you could easily have mocked out the dependency to . Well, guess what? You can just as easily mock out a concrete class. Here’s how this works using Moq:

So why do people keep making all those interfaces? There is quite a bit of discussion about it on the Internet, and if you’re interested in more arguments in favor or against, see here, here or here.

Please note that I’m not saying that interfaces are always bad. When they add value, they are useful. I’m only saying that interfaces that mirror one and only one class implementation is waste. Here are some cases where interfaces may be useful:

The next time you are tempted to take a single class, extract a single interface from it, and name it the same as the class with an in front, think twice.

Does this make sense to you, or do you disagree? Please share your opinion in the comments below.

The sample source code used in this article is available here: https://github.com/torhovland/dependency-injection-without-interfaces|||

Dependency Injection using concrete classes