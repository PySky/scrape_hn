Softwares are subject to change all the time, and one aspect that contributes to defining the quality of a code is precisely how easy it is to be altered. But what makes it be like so?

“Gather together the things that change for the same reasons. Separate those things that change for different reasons.”

Be those things functions, classes, or modules, they can apply to the single responsibility principle and the separation of concerns. Designing software based on these principles starts out with the architecture.

In software development, a responsibility is a task that a unity is committed to achieving, for example: represent the concept of a product in an application, handle network requests, persist a user in the database, and so on and so forth.

Did you notice that these three responsibilities aren’t in the same category? It’s due to the fact that they belong to different layers, which in turn can be divided into concepts. As per the above example, “persist a user in the database” relates to the “user” concept and also to the layer that talks to the database.

In general, architectures correlated to the above concepts tend to be split off into four layers: domain, application, infrastructure, and input interfaces.

In this layer, we may define units which play the role of entities and business rules and have a direct relationship to our domain. For example, in an application of users and teams, we would probably have a entity, a entity, and a to answer whether a user is able to join a given team or not.

This is the most isolated and important layer of our software, and it may be used by the application layer to define use cases.

The application layer defines the actual behavior of our application, thus being responsible for performing interactions among units of the domain layer. For example, we can have a use case which receives instances of and and passes them on to ; if the user can join in, it delegates the persistence responsibility to the infrastructure layer.

The application layer can also be used as an adapter to the infrastructure layer. Let’s say our application can send emails; the class responsible for talking directly to the email server (let’s call it ) belongs to the infrastructure layer, but the one that actually sends the emails ( ) belongs to the application layer and uses internally. Therefore, the rest of our application does not know details about specific implementations— it only knows that is able to send emails.

This is the lowest layer of all, and it’s the boundary to whatever is external to our application: the database, email services, queue engines, etc.

A common feature of multilayer applications is the use of the repository pattern to communicate with the database or some other external persistence service (like an API). Repository objects are essentially treated as collections, and the layers using them (domain and application) don't need to know which persistence technology lies underneath (similarly to our email service example).

The idea here is that the repository interface belongs to the domain layer, and the implementation, in turn, belongs to the infrastructure layer — i.e. the domain only knows about methods and parameters accepted by the repository. That makes both layers more flexible, even with regards to testing! Since JavaScript doesn’t implement the concept of interfaces, we can imagine our own, and based on that create a concrete implementation on the infrastructure layer.

This layer holds all the entry points of our application, such as controllers, the CLI, websockets, graphic user interfaces (in case of desktop applications), and so on.

It should not have any knowledge about business rules, use cases, persistence technologies, and not even about other kinds of logic! It should only receive user input (like URL parameters), pass it on to the use case and finally return a response to the user.|||

Softwares are subject to change all the time, and one aspect that contributes to defining the quality of a code is precisely how easy it is to be altered. But what makes it be like so? “Gather…