When I originally built the first edition of this with the Arduino Uno, it involved loading a text file into the program which was quite a manual processâ€Šâ€”â€Šthis wasnâ€™t very â€˜smartâ€™ (hey, it was only a prototype!). With the Internet of Things, you expect a device to be a bit â€˜smarterâ€™ than thisâ€Šâ€”â€Šso it was obvious that the the approach this time around needed to be automated, or somewhat less-manual. Rather than the loading of this text file, I thought it would be a nice idea to display some form of informative data to the user. One of my favourite ideas that came to mind was to allow users to read some latest news articles in brailleâ€Šâ€”â€ŠI came across News API and this felt like the perfect API for me to get something up and running fast. Using this API I could fetch a collection of news articles from a desired source and simply them to the user ðŸ™‚ Initially, I originally had a single key requirement when it came to creating BrailleBox: It needed to display a news article in the form of braille as requested by the device But with a little bit of thinking, there were a few more things I had to think about in-order to improve the UX of the device: Should the device fetch the news automatically? This is automated, but I might not be at the device when it displays the article. This could also be quite alerting for the user if the device randomly starts clicking out of the blue. Instead of the above, the box could have a button which when pressed fetches and displays a news article in braille. Provided the box is placed in a location that the user is comfortable with, this will allow for The rate at which the news article is read could be either too fast or too slow for users. To solve this, it would be worth adding a potentiometer to allow changing of the rate at which the letters within each of the words in the news article text are displayed. (I didnâ€™t actually end up putting that in this version, next time though ðŸ˜‰) With that it mind, this is what I ended up with: Itâ€™s only here to act as a prototype, so itâ€™s not currently the most beautiful looking thing on this planet but it works, right! Hereâ€™s a little clip of it doing its job: Just to cover some foundations (Iâ€™m not a master in braille either, so I canâ€™t give you a full lesson here Iâ€™m afraid), but braille is a system that allows the visually impaired to read sequences of patterns that represent letters, words and symbols. Each individual braille character consists of a combination of raised â€˜pointsâ€™, this is best represented in the graphic below: You can see here that each letter and each number is represented by its own unique representation of braille â€˜pointsâ€™. With this in mind, itâ€™s actually quite a simple system (probably not so simple to learn however)â€Šâ€”â€Šfrom this system we can create complete word representations by piecing together combinations of letter representations. Once we have these â€˜wordsâ€™, we then need some way of displaying them in the physical world. But how can we recreate this in the physical world? Current solutions have been pretty expensiveâ€Šâ€”â€Šdynamic braille displays are nothing new, except they cost thousands of pounds to build and purchase. The whole point of this project originally was to be able to do it for a fraction of the price, making this kind of technology accessible to many (thatâ€™s one of the things I love about Android after all). But how do these braille points get shown when it comes to BrailleBox? Well, in relation to the Android Things platform, we have access to whatâ€™s known as GPIO (General Purpose Input Output), weâ€™ll come onto this more later in the articleâ€Šâ€”â€Šbut if you look at the image on the left, youâ€™ll notice that we can arrange the output of these pins to look very similar to the braille sequences above. Saying this, we can use GPIO and position 6 outputs to recreate the same representation of the braille characters that we previously looked at. For this, I used what are called Solenoidsâ€Šâ€”â€Ša solenoid allows us to pass in a current, creating an electromagnet that can pull in our magnet, as well as pop it back out. You can read more about solenoids here, but the ones that Iâ€™m using look a little something like this:

I decided the little plastic hook wasnâ€™t very user friendly for hands, so I pulled them off and fixed some little wooden balls to the end. But back to the pointâ€¦ this little metal rod will be pulled into the solenoid when a current is passed in, and pushed back up by the help of the spring when the current is released. This action allows us to â€˜show and hideâ€™ braille points, popping them out of the enclosure and making the only â€˜touchableâ€™ braille points the ones that make up the sequence of the letter that weâ€™re currently displaying. Looks cool! How did you makeÂ it? The BrailleBox was actually pretty simply to build, all it consists of is: A project box (mine is sized 150 x 80 x 50â€Šâ€”â€Šmake sure your breadboard fits in here if you want it to!) Male-to-female connector cable (for connecting the GPIO pins of the raspberry pi to the breadboard) x 7 The great thing is that this list isnâ€™t too extensive and all of these components can be found for pretty cheap. The most expensive are the solenoids, but 5V ones can be picked up for around Â£2.50 each ðŸ™‚ And with the electronically components from this put together into a circuit, the schematics for the complete circuit isnâ€™t too complex either:

Iâ€™m no expert in electronic engineering, but nothing has caught on fire yet so I think itâ€™s doing good enough for a prototype so far ðŸ˜… Itâ€™s probably quite overwhelming to look at, so letâ€™s break down each of the parts and what theyâ€™re doing. The solenoids are the part of our circuit which allow us to display the braille sequences to the user. As previously mentioned, we can pass a current into them to enabled the magnet (bringing the rod in) and release the current to in turn release the rod. Without going too much into the technical details, letâ€™s take a quick look at how the solenoids are hooked up to our raspberry pi: This connection shows the grounding of our solenoid to a grounding point on our breadboard. Here, this connection is coming directly from a GPIO pin on the raspberry pi. So whenever we send a signal using that GPIO pin, this is the entry point for the communication with the solenoid. Here Iâ€™ve placed a resistor to limit the current in the circuit, this is just for safety measures. It also conveniently prevents the solenoid from being pulled down so strongly, this reduces the â€˜clickâ€™ sound which usually occurs without this resistance. Because solenoids hold the current they receive (acting as a capacitor in a way), a diode is placed here to ensure that the current can only flow in a single directionâ€Šâ€”â€Šmeaning that the current will never be sent in the direction of the raspberry pi (safety first!) Now that our current has gone through the resistor and diode within our circuit, we can route it to the solenoid to give it power, pulling the solenoid â€˜downâ€™ into a retracted state. We use a switch in the circuit to allow the user to request the display of a news article on the BrailleBox. The circuitry for this switch is also pretty straightforward: This connection shows the grounding of our switch to a grounding point on our breadboard. This is the connection that routes back to our GPIOâ€Šâ€”â€Šthis is how we send the signal that the button was pressed. This connection is routed to a point of power on our breadboard. Here Iâ€™ve placed a resistor to limit the current in the circuit, this is just for safety measures in regards to the circuit. Finally, this is the connection for the positive connection point of the switch. If youâ€™re not aware already, GPIO stands for General Purpose Input Outputâ€Šâ€”â€Šit essentially acts as an interface to provide a way for us to communicate with the raspberry PI. You can read more about GPIO here. Hereâ€™s a quick look at what the pins on the raspberry pi 3 have to offer (this will differ depending on the device which you have):

You can see from this that we have access to pins such as: 5V power pins to provide power to our circuit Ground pins that can be used to provide a ground for our circuit Numbered GPIO pins for communication to and from the raspberry pi In the case of BrailleBox, we use the GPIO pins for two different parts: To send a signal to each of the required Solenoids when we wish to display a letter using the Braille pins. In the diagram below we use GIPO pins 17, 27, 22, 23, 24 and 25 for this. To receive a signal when the push button is pressed so that we know when to fetch a new article from the api. In the diagram below we use GIPO pin 6 for this. We can then organise the output from the GPIO pins to create the same layout and representation as the braille letters that we previously looked at. This allows us to display any given letter (or symbol) from the alphabet that makes up a word which we are currently showing:

And what about theÂ box?! The box was actually pretty fun to put together, even if a bit difficult (getting the solenoids to sit at the right heightâ€¦). I havenâ€™t done any DIY in sometime, so I was a little rusty with the drill (I messed up the first box so I had to order a second). But the completed product looks a little like so: I began by measuring a drilled 6 holes into the project box. Be sure to leave enough space on all 4 sides of the solenoids so that the other solenoids can fit in place comfortably. You can use a countersink drill head to smoothen our your holes, they look a lot cleaner and smoother if you do decide to do this ðŸ™‚ I also drilled a hole for the push button (this was a little bit bigger than the solenoid holes) and also one to feed out the wires for the solenoids. Next, you need to align each of the solenoids up with their corresponding hole. When doing this, you also need to ensure that the solenoid heads (the wooden balls) both pop-out of the hole enough and also fall-back in deep enough when operating. To get the right height it was a bit fiddlyâ€Šâ€”â€Što do this I ended up using a flat 4x4 lego piece as the base (I had to sand off the lego circle heads ðŸ˜…) but these worked a treat! Now they were at the right height, I used some â€˜No More Nailsâ€™ that I found in the shed to stick these in place. And voila! Other than screwing the base onto the project box, that was pretty much it! It wasnâ€™t much work at all to put this little box together and it made the project feel a lot more complete than just being a bunch of components hanging off a breadboard. The BrailleBox project can be found over on GitHub here: hitherejoe/BrailleBox

Contribute to BrailleBox development by creating an account on GitHub.github.com The project itself is pretty straight forward, essentially all it does is: Convert the string representation into a series of braille sequences Display that sequences one at a time Iâ€™m going to run through how BrailleBox was built, weâ€™ll look at some basic setup points also for Android Things projects but wonâ€™t go too into depth as itâ€™s a bit out of focus for this article ðŸ™‚ To begin with, youâ€™ll need to add the dependancy for the Android Things support library to your project. This gives you access to Android Things related APIs that arenâ€™t a part of the standard Android SDK. After creating the activity that will be used for the home activity, youâ€™ll need to declare this as the launcher activity for the android things project. This means that when the device is booted, this activity will be launched by default. This is a great addition for Android Things as it allows us to build screen-less devices and easily launch our application upon boot ðŸ™‚|||

On one side of my family runs a genetic condition known as Retinitis Pigmentosa â€” this is essentially a condition that causes your eyesight to deteriorate over time. Often, this makes me think aboutâ€¦