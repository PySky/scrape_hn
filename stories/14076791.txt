First of all, you will need to have Node installed on your machine. To check if you do, open up a command prompt and type . The version number of Node you have installed will be shown as output on the command line. If not, you do not have Node installed on your machine. Not to worry, head over to Node’s official site to get started.

All done? Now you’re set to install the necessary tool regarding the actual task automation. Go back to your command prompt and run:

Note: Linux and Mac users will most likely need to run this command with sudo, to enable the required permissions.

You’ve now installed Gulp globally on your machine. This step is important as it is required for Gulp to be visible in your command line regardless of which directory you are in. The more technical explanation would be that Gulp has now been added to the PATH.

You’re now ready to get started with writing tasks.

There are three main commands Gulp provides:

The backbone of using Gulp at all lies in the interaction between and with the  method as a bridge.

The  method is a default method in Node.js, not to delve deeper into this particular subject, view it as a means to copy files from one directory to another.

What does this mean?

Gulp by itself only provides the basis needed for task automation. The bulk of the work you would need in a development workflow lies in the vast plug-ins created for Gulp. Without them, you only have a shell. Of course, you could write your own, but with more than 3000 available for download on npm, I would advise against this. Do not reinvent the wheel. Use the resources which are already at your disposal. Feel free to take a look here, or just Google “gulp whatever” and witness the magic.

Let’s code up a very basic backbone, just to wrap our heads around the concept. We’ll incrementally progress further down this article.

First of all create a new directory giving it a super inspiring name, something like super-awesome-gulp-tutorial should be fine. Once you’ve done this open up a command prompt within this directory. As Gulp is a package on npm you will need to initialize npm to have a link to the package manager.

Not familiar with npm — the Node Package Manager? Take a look here.

After you’ve done this, you will also need to install Gulp locally. Why? Gulp will always use the local version of itself in project folders.

Installing it with the --save-dev flag will include it in the package.json beneath the development dependencies. Great job, ready for some code? Let’s jump in. Create a new file, name it gulpfile.js. This file is the entry point for Gulp, here’s where you will be writing all the code to automate tasks. Go ahead and write this in your gulpfile.js:

Congratulations. You’ve just written your first Gulp task. I bet this seems familiar to you, an event listener followed by a callback function. Let’s try it out. Jump back to your command prompt, and just type:

Hit enter and you will see something like this get logged back to the command line:

By using the keyword you told Gulp to interpret a particular task, and as nothing was written after the keyword, the ‘default’ task was run. Let’s say you have a task named ‘build’ and you wish to run it. Writing will trigger that particular Gulp task. You can even run multiple tasks, which is also perfectly fine. It looks like this.

Have you been following along? Great, you’re now ready to code some serious stuff. Let’s get a development environment up and running.

I’ll start by outlining a basic folder structure of a sample project. One of many best practices is to have three main folders, src for all of your source files, dist for the bundled and minified files, and finally a tmp directory which will be used as the sandbox for our local web server.

Create the src folder, but do not create the dist nor the tmp folder yet. You will see a bit further down how you can create it dynamically and incorporate it into an automated task. Let’s add some files to the src folder, to finally have something to play with. An index.html, a script.js and a style.css should be more than enough. These will serve as your source files, the only files you will be editing. Gulp will handle everything else.

Let’s get started with the Gulping of all the things!

First of all you need a paths variable to store all the file and directory paths of your project. Place this right under where you required gulp.

Specifying the part is equivalent to including all files within the folder and any possible subfolders.

Now you need to create a task to copy all HTML files from the src directory to the tmp directory where you’ll be running the web server.

Same thing for the CSS files.

Yup, same thing for the JavaScript files.

This part is fun. Gulp allows you to combine tasks, and add tasks to other tasks as dependencies. This feature is incredibly useful because you can tell Gulp to run and complete certain tasks before even starting other tasks.

Try it out! Here’s what you’ll see after running .

Jump back to your project folder and take a look. Now you have a tmp directory. It was created dynamically. Magic! (Just kidding, not really.)

The tmp directory contains the same files you have in the src directory. The  command has copied files from the source to the given destination.

What’s this? Well, you’ve copied the files over to the tmp folder. Now you need to tell the index.html which CSS and JavaScript files you want to reference. This is done quite easily with a Gulp plug-in called . Go ahead jump back to the command prompt and run:

Now, you need to add a reference in the index.html where you wish to inject the files.

After has been run, there will be files between these comments. Keep in mind they need to look exactly like what is written above.

Jump back to the gulpfile.js and add this:

Keep in mind, you’ve already added the reference to the files within the tmp folder. It should look like this:

Now you’re ready to add another task to inject the files.

Look at this now. You’ve added the ‘copy’ task as a dependency for the ‘inject’ task. Gulp will first copy all the files to the tmp directory, only then will it do the injecting. Let’s break this down. You’re placing the of the files copied to the tmp folder into two respective variables. One for the CSS, the other for the JavaScript files. In the return statement you grab the index.html which has already been piped to tmp with the ‘copy’ task and  the function with the variables where you placed the respective files from the tmp directory. The second parameter you pass to the function is an options object. Here, means that the file paths to be referenced in the index.html will be relative. You want this. Trust me. It’ll save you so much headache.

Toggle back to the command prompt and run . The index.html within your tmp directory should now look like this.

I bet you’d like to see the fruits of your labor. I would too. Let’s get a server up and running to quench that thirst.

Go ahead and switch back to the command line and run:

This is a Gulp plug-in which allows you to run a web server on your local machine. Exactly what you need. After you’ve installed it, go ahead and require it at the top of your gulpfile.js.

Great! Let’s get the ‘serve’ task coded up.

Once again you need to include a dependency. Here you want the ‘inject’ task to finish before running the web server. Simply reference the tmp directory and  it to the web server. The plug-in takes an options object as a parameter. You will need to specify the port on which it will run, and tell the server to reload if it senses any changes. Once you get used to this. There’s no going back.

Let’s test this out. Add some lines of code to the files in the src directory. Here’s a simple example:

Jump back to the command line and run . You should see this get logged back to you.

By running the serve task all of the tasks specified as dependencies have been run first. Exactly what you want. Head over to your browser of choice and open up http://localhost:3000. Hopefully, you’ll see something like this.|||

Have you ever been tired of hitting the F5 key once too often? Yeah, I understand the pain. Here’s where task automation shines. Writing scripts to continuously handle the time-consuming tasks you…