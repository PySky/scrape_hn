In this guide we’ll create a starter application that uses routes with code splitting.

For big web apps, it’s not efficient to put all of your code into a single file. Large apps should only download the JavaScript required to boot the app. We want to be able to break a single file into many fragments. Splitting your code into multiple chunks is what we refer to as “code splitting”. Chunks will be loaded as the user navigates around.

Neutrino, will be used to see how we can achieve code splitting with React, Webpack, and React Router. Neutrino is an awesome tool that harnesses the power of Webpack to let you create and build modern JavaScript applications with zero initial configuration. It works by allowing us to inject shared presets or configurations. We will be using the React preset. The latter requires you to be on Node.js v6.9+. According to the Neutrino documentation, the React preset features:

The entire source code of this post is available on GitHub. Without further ado, let’s get started.

First, we need a directory to start working from. From your terminal, create a new directory and change into it. Then we are going to install , and as development dependencies. We will also need , and for actual React development. is the latest version at the time of this write-up.

By default, the React preset looks for source code in a directory with the main entry point being .

Let’s edit with a simple hello world example. We’ll be changing that file later but for now, we will keep it simple for the sake of testing the bare minimum.

Now edit your project’s to add commands for starting and building the application:

Start the app then open a browser to the address in the console.

Great, we’re now ready to split code like real ninjas :-)

To support Hot Module Replacement (HMR), change , the previously created file to the following:

We added to specify which part of the app we want HMR, and an statement to activate it in development mode. We also imported which we will create next.

imports and returns the Router component with the injected.

From your terminal, create routes to use. We will also need to lazily load components.

We’ll fill in the bare minimum for the routes.

We’re almost done. Our last task is to write logic to lazily load components. We will do that through .

Start the app with , then open a browser to .

Open the network tab to see the individual chunks being loaded lazily.

The React preset builds static assets to the build directory by default.|||

For big web apps, it’s not efficient to put all of your code into a single file. Large apps should only download the JavaScript required to boot the app. We want to be able to break a single file…