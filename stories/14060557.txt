The longest repeated subsequence (LRS) problem is the problem of finding the longest subsequences of a string that occurs at least twice.

The problem differs from problem of finding common substrings. Unlike substrings, subsequences are not required to occupy consecutive positions within the original sequences. ¬†

 For example, consider the sequence



 Length of Longest Repeating Subsequence is 4

 Longest Repeating Subsequence is ATCG

Note that repeated characters holds different index in the input string.



The Longest Repeating Subsequence problem is classic variation of Longest Common Subsequence (LCS) problem. The idea is to find LCS of given string with itself i.e. calland excluding the cases when index are sameas repeated characters holds different index in the input string.

The LRS problem has an optimal substructure. That means the problem can be broken down into smaller, simple ‚Äúsubproblems‚Äù, which can be broken down into yet simpler subproblems, and so on, until, finally, the solution becomes trivial. The problem can be recursively defined as ‚Äì

Below solution finds the length of longest repeated Subsequence of sequence X recursively by using optimal substructure property of LRS problem.

Output: 

 

 ¬†

 The worst case time complexity of above solution is and auxiliary space used by the program is . The worst case happens when there is no repeated character present in X (i.e. LRS length is ) and each recursive call will end up in two recursive calls.



The LRS problem exhibits overlapping subproblems. A¬†problem is said to have overlapping subproblems if the recursive algorithm for the problem solves the same subproblem over and over rather than always generating new subproblems.

Let us consider recursion tree for sequence of length 5 having all distinct characters whose LRS length is .

As we can see, the same sub-problems (highlighted in same color) are getting computed again and again. We know that problems having optimal substructure and overlapping subproblems can be solved by dynamic programming, in which subproblem solutions are memoized rather than computed again and again. This method is illustrated below ‚Äì

The time complexity of above solution is and auxiliary space used by the program is .



Above Memoized version follows the top-down approach, since we first break the problem into subproblems and then calculate and store values. We can also solve this problem in bottom-up manner. In the bottom-up approach, we calculate the smaller values offirst, then build larger values from them.

The time complexity of above solution is and auxiliary space used by the program is . The space complexity of above solution can be improved to as calculating LRS of a row of the LRS table requires only the solutions to the current row and the previous row.

How to extend above solution for printing Longest Repeating Subsequence?

The idea is very similar to printing Longest Common Subsequence of two strings. Refer this post for details.

Please use ideone¬†or¬†C++ Shell¬†or any other online compiler link to post code in comments.

 Like us? Please spread the word and help us grow. Happy coding üôÇ

|||

The longest repeated subsequence (LRS) problem is the problem of finding the longest subsequences of a string that occurs at least twice.