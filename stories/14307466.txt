Table views are a fundamental piece of almost all iOS apps.

Still, most developers get them wrong, especially using Swift.

This happens in two different ways:

I wrote this guide to address all these problems.

A couple of years ago I joined a project at the last moment to fix the last bugs in an app.

It soon became clear though that these were not simple bugs: the code of the app was completely wrong.

What do I mean by completely wrong?

In the end, my client had to throw away all the code and hire a second company to rewrite the whole app.

Of course, they also made their client unhappy because of the extra delay.

Finally, they spent all the budget they had left for the app, making no profit after all the time they spent on the app.

But what caused such serious problems that they had to start from scratch?

There were many architectural mistakes in that app, which were evident even after a superficial inspection.

But what struck me the most were the how even basic things were wrong. Many standard UIKit classes were not used the way they are supposed to.

The most glaring mistake was the complete lack of table views, even if the app had many screens showing lists. This is the typical place where you use a table view in iOS.

To my surprise instead, the developer used a simple scroll view.

What made thing even worse was that each view inside the scroll view had a view controller attached. This showed that the author had no idea what view controllers are for.

I already wrote about the role of view controllers in iOS in the past, which explains why this was a mistake.

What surprises me, again and again, is that many developers seem to ignore the existence of table views, or they use them in a wrong way.

Many developers seem to opt for simple scroll views when they should use a table view or a collection view instead.

And even when they pick the right option, they bloat view controllers with data source and delegate code.

This has to stop.

You need to get the fundamentals right if you want to be a professional iOS developer. Or even if you want to create apps on your own.

So in this article, we will have a look at:

If you are serious about iOS development, you should get familiar with Apple’s iOS Human Interface Guidelines ASAP.

These not only help you creating the right interfaces for a mobile app but also tell you clearly which iOS component you should use for each task.

Just looking at the images on some sections of this guide, it is clear what each component is meant for.

Their content is unstructured, which means there are no repeating elements or patterns.

When we look at table views, the difference is clear:

Table views are for vertical lists of repeating elements.

Here the word vertical is important. Table views are only used when the list of elements is arranged in a single column of elements.

There is no such thing as a horizontal table view. For any horizontal arrangements of elements, you need a collection view, even if that collection only scrolls vertically:

In fact, both table view and collection views are scroll views. The UITableView and UICollectionView classes are both subclasses of UIScrollView.

So why should we use table views and collection views over scroll views?

Table views and collection views are made for repeating, discrete elements.

But in fact, I recommend using them for almost any type of scrolling content, even if it looks like such content is neither structured nor repeating.

To be honest, the images in Apple’s HIG don’t do table views much justice. You can use them for much more than the simple ones you see in Apple’s examples.

Have a look at this small collection of table view designs I put together on Dribble:

In this article, I will only cover table views, but collection views are even more flexible, so they share the same advantages and allow you to create more complex layouts than table views.

So, let’s see what advantages table views offer over scroll views.

For these reasons, I recommend using table views for almost all kind of scrolling content.

If your content does not have repeating elements, your table view will not enjoy reusing cells. But you still get all the other benefits.

Scroll views are still useful in some cases though. For example, when you want to display something with a wide area that can be scrolled in different directions or zoomed. Think of photos or maps.

The cells of a table view are instances of or subclasses of UITableViewCell, which is itself a subclass of UIView. The table view takes care of adding cells to, removing cells from and vertically arranging cells in the view hierarchy.

When a cell goes out of the screen because of scrolling, the table view can reuse it to display a new item. In this way:

The table view does all this automatically and does not need any extra calculation on your part like a simple scroll view would.

All the cells in a table view are created from prototype cells, so they are all like each other. A table view can have just one prototype cell if it displays a homogeneous list of elements or more than one for heterogeneous lists.

For example, in a social network app where you can publish text posts, pictures, and videos, a table view would have a prototype for each one of these types of items.

This allows the table view to reuse a cell for another element of the same type. A table view with a thousand elements might need to instantiate just 4-5 cells to work.

It might seem intuitive that, for a table view to work, you would need to configure it with the list of all the elements at once.

But to further optimize memory use and performance, a table view does not need all the elements at once.

In this way:

Both of these might be useless and you might waste resources to load elements that are very far down the list and the user would never see.

Let’s see how this works.

To function, a table view needs two external objects: a data source and, optionally, a delegate.

These objects must conform to the UITableViewDataSource and UITableViewDelegate protocols respectively, but can be instances of any class.

These two protocols specify all the methods a table view might call to perform its functions.

There are two protocols instead of just one because the methods they contain are different in nature:

A basic table view that only displays a list of items and does not allow any interaction, needs only a data source.

The UITableViewDataSource protocol has only two required methods, that you must implement to make the table view work:

You can have a simple working table view by just implementing these two methods.

One thing you have to keep in mind though is that there is no guarantee of how many times they will be called.

As the user scrolls through the whole content, these methods get called again for the elements and the section as they come on the screen.

A table view does not remember such information, even if it asked for it already. This means that these methods can be called for the same element or section more than once. Keep this in mind.

There are many architectural mistakes iOS developers make when working with table views.

These are all related to misunderstanding how the MVC pattern works.

As I discussed in this other article, the MVC pattern has four layers, and not three:

According to this model, we can see what are the common mistakes related to table views.

As an example for our working table view, we will create a small app that displays a list of quotes.

All the cells will look the same, showing the author of the quote and the text.

First, we will start laying out the user interface in Interface Builder. We need a view controller for this and luckily any Xcode project comes already equipped with one.

We also want to have the navigation bar at the top of our screen. Our example app has no navigation, but a more complex app would.

But even without navigation, the app looks better with a top bar with a title.

To have a navigation bar at the top of the screen, we need to use a navigation controller.

This is because simple view controllers don’t have navigation bars. The navigation bar belongs to the navigation controller. I talked about this more in another article on the principles of iOS development.

We could use a table view controller instead of a normal view controller, but I don’t recommend it.

The UITableViewController class (which is a UIViewController subclass) was created by Apple to automate a few common tasks. Although this removes a bit of boilerplate code, I personally don’t use table view controllers.

Finally, the UITableViewController class does not really do much, so there is not much we lose anyway.

If you still want to use a table view controller, one option is to add it as a child view controller of another view controller.

I honestly don’t see much advantage in doing that, but it might be useful to organize code in a much more complicated app.

When using a standard view controller, we have to add our table view to the interface manually.

We want this table view to cover the whole screen, so we have to set Auto Layout constraints to pin its edges to the ones of the view controller’s view.

I will not go over setting Auto Layout constraints in detail since I covered this in my example of the fundamental concepts of iOS development.

We now need a prototype for the cells of the table view. All the cells will come from this prototype.

First of all, we have to add one prototype cell to our table view in the inspector panel:

We then can create the interface of our cell prototype.

Our cell will need two labels: one for the quote and one for the author.

The quote label needs to have more lines and expand vertically to adapt to the text of the quote, since different quotes will have different lengths.

For this to happen we have to set its number of lines to be 0 in the inspector panel. Zero here means that the label does not have a fixed number of lines but will expand to adapt to its text.

Placing labels in our cell prototype is not enough, though.

We know that cells will have to adapt to the width of the screen on different devices and to the height of the text of the quote.

Horizontally we set constraints to pin the edges of our labels to the edges of the cell. In this way, as the cell adapts to the screen width, the labels take their space in the cell.

Vertically we will do the same, but it will have another effect.

Since a cell is not constrained vertically by any edge, our constraints will “push” the cell to expand as the content of a cell grows.

This is how you should set the auto layout constraints in the cell prototype:

We will have to do one more step in our code to make this work. We will see that in a moment.

As we have seen above, this cell is not a plain UITableViewCell, so it needs its own class if we want to properly architect our code.

First, create the class in a new Swift file. This class needs to be a subclass of UITableViewCell.

Then set the class for the prototype cell in Interface Builder.

We are not done yet. Cells in a table view need a reuse identifier.

This will be used by the table view to recycle the cells that go out of the screen. This identifier is just a string and can be anything you want.

I usually use the class name, since this helps me avoid misspelling it in my code.

We now have to connect our labels to outlets in the class, to be able to set their text from our code.

If you don’t know how to do this, you can check my other article that shows it step by step.

Now, many would stop here and use these outlets to set the text in the labels from outside of the QuoteCell class (doing it inside of the data source).

This works and you can even find in in Apple’s Table View Programming Guide, but it’s not the correct way.

This is because the data source would be tied to this specific implementation of the quote cell.

What if later we want to change how the cell displays the author and the text? What if we remove these outlets completely?

This would break also the code in the data source.

Always remember that changing the internal implementation of a class should not affect any other external class.

What we want instead is the data source to only know that it has to pass the author and the quote to the cell as simple strings.

What the cell will do with these strings is not a concern for the data source.

To achieve this we have to create two more properties in the QuoteCell class, for the author and the quote text. Both properties have a simple QuoteCell class, for the author and the quote text. Both properties have a simple String type.

We then add a property observer to both, to set the text in the corresponding label whenever each property gets set.

If you want to use a more advanced solution, you can use the MVVM pattern, which is a variant of the MVC pattern.

I cover how to this in detail in my Ultimate Course to Making Professional iOS Apps

We now need a model class for the quote.

There in not much needed for our example here: just a struct that carries the author name and the quote text.

We now need the data source for the table view. As we discussed above, we need a separate class for it which implements the UITableViewDataSource protocol.

This is why.

This protocol has many methods, although we only need two of them to make our table view work. All These methods would make the code of the view controller grow too much if we put them there.

Moreover, the UITableViewDataSource protocol defines a lot of functionality that should not be a concern of a view controller in the first place.

The data source needs to receive the quotes that will populate the table view. This is the only things that it needs in our example.

We simply pass an array of quotes to the data source through an initializer:

We now need to implement the two required UITableViewDataSource methods.

Since elements are identified by a pair of indexes, table views use the IndexPath class to represent such pairs.

So, for example, the third element in the fourth section would have an index path of [4, 3].

If a table view has no section separations, like in our case, it is assumed to have only one section at index 0.

The first required method of UITableViewDataSource is tableView(_:numberOfRowsInSection:).

As the name suggests, this method tells the table view how many elements there are in total in a section.

This method is straightforward to implement since it just needs to return the count of the quotes array. We ignore the section parameter because it is always 0 since our table view has only one section.

I usually use Swift extensions to adopt protocols in my classes, which makes my code more organized and readable.

The second required method is tableView(_:cellForRowAt:).

Through this method, the table view requests a cell for an element at a specified index path. This method has to return a fully configured cell for the table view to use.

The first thing this method needs to do is to request a cell from the table view.

This is done through the dequeueReusableCell(withIdentifier:) method of  UITableView. This method returns:

After this, we just need to retrieve the quote for the row in our array of quotes and configure the cell before returning it.

As you can see, there is not much code in this method.

This is good and is exactly how it should be. We spread responsibility into the appropriate classes instead of putting all the code in the data source.

Up to this point, we created all the separate parts of our table view architecture:

We now have to connect all of them together.

The central connection point will be the view controller.

In the MVC pattern, this is exactly the role of a view controller: acting as a glue object that passes data between the other layers of the MVC architecture.

First, we create an instance of our data source in the initializer of our view controller. We pass this instance some quotes we hard code here for simplicity.

In a real app, these quotes might come from a file or from the network. We covered a lot of concepts already in this article, so I kept this simple.

Be aware that creating this data in the view controller, as I did here, is also not correct.

Usually data retrieval or creation goes into a separate model controller.

We do this in the viewDidLoad() method when all the user interface has been loaded and the table view is available. See my article on the lifecycle of a view controller for more details.

Here we did the following:

We can now run the app and see our quotes inside the table view.

We have seen in this article how a table view works and how to configure it. This is a simple example but already involves different classes and concepts.

You can get the whole project for this app on Github.

When these concepts are clear, it becomes easier to implement the rest of the UITableViewDataSource or UITableViewDelegate methods, in case you want to add more functionality to your table views.

This is a simple example and indeed it might be all that is needed in a simple app. But it’s likely that you will want more out of your table views in a real world app. These are a few common paths you might want to explore:

You can find all this in my free course on building professional iOS apps|||

Table views are a fundamental piece of iOS apps. In this guide I cover the advantages of table views, data sources, cells, and the correct MVC architecture