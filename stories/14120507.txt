One of my favorite makefile debugging tricks is this rule for printing out the value of a variable:

Throw this into a GNU make makefile and then print any variable you like by invoking targets like :

You can imagine how handy this is when diagnosing issues with your makefiles. Here’s how it works:

The rule is a slick hack, but it’s a nuisance to have to modify a makefile just to use it. Worse, you might not even be able to modify the makefile. Fortunately, there’s a solution: the command-line option. You’re probably familiar with it — that’s how you tell gmake to use a different makefile than the default when it starts. For example, if you have a makefile named :

What you may not know is that you can use multiple options on the command line. GNU make will read each file in turn, incorporating the contents of each just as if they were included with the directive. We can create a simple makefile called containing nothing but our rule, then inject it into any makefile we want like this:

The combination of the rule and the command-line option is powerful, but it’s unwieldy — too many characters to type. The solution is a shell script wrapper:

Save that in a file called somewhere on your and you can do things like this:

Beyond simply printing the value of a variable, GNU make 3.81 has three built-in functions that allow introspection on variables, which you can add to the rule for additional diagnostics.

First is the function, which tells you how a variable was defined. For example, if a variable was inherited from the environment, will give the result . Variables defined in a makefile will give the result , and so forth.

Next is the function, which tells you the flavor of the variable, either or .

Finally is the function, which gives you the unexpanded value of the variable. For example, if you have variables like this:

will give the result , rather than the fully-expanded that you might expect.

With these additions, the rule now looks like this:

And here’s how it looks in action:|||

