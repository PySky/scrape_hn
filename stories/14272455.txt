We would like to define a custom datatype and implement its instance. Let's start with the datatype:

The operator indicates that this is a sum type, and the presence of in the data constructor indicates that this type is recursively defined. This information will be relevant later. For now, let's test our type by making sure we can actually use it to create the values we expect:

We forgot to derive an instance of for our datatype. This looks like a trivial mistake, but it's exactly the sort of error a beginner is likely to make. Actually, seasoned programmers also make these sorts of mistakes all the time, but for a Haskell newbie, it's at least an easy error message to parse and an easy bug to fix:

When we reload our source file and try again:

It works! Next, let’s scaffold a instance for our :

This also compiles. But what if we tried to break this instance on purpose?

Since our datatype is a , it may seem sensible to implement for , too. But when we try to compile this code, we get another informative error:

Depending on where you (or your fellow study group members) are in your exploration of Haskell, this is either an opportunity for a discussion of kinds or the premature introduction of an advanced topic. But one useful aspect of Haskell is the ease with which you can explain any given concept by analogy with other, simpler concepts. Since “everything is a function,” and there are few arbitrary language constructs, you can learn unfamiliar ideas using what you already know as a basis — and do so effectively. The above error is not too hard to contend with, even for beginners. So how should we explain it?

A kind is the “type of a type.” Think of the type as just another function that takes an as an argument, but at the level of types. That is, takes an as an argument and returns a type , just as a regular function, takes an argument of type and returns a value of type . is a typeclass for datatypes with kind . That pretty much looks like a function. So we can presume that a functor instance "takes" a function-like-thing (that is, a type constructor) with kind as an argument and returns a functor with kind , just as we might have a function at the value level that takes a function and returns a value of type . We can examine kinds as easily as types in the REPL:

The unapplied constructor has kind , which is what we want, while a fully applied , here made concrete with , is only kind , which doesn't work for . That's why we declare our instance with alone and not the fully-parameterized .

The type signature of provides similar information:

The it takes as its second argument and the it returns are just function applications at the level of types. So and match, just as, for example, matches . In the first case, we must apply the type constructor to the type variable in order to create a type. In the second, we apply the data constructor to in order to create a value of that type. can only be implemented for types with kind , because given a type constructor, such as , and a type variable, such as , it needs to work for any type that might inhabit that . If you made that concrete in the definition of your , it would no longer be polymorphic. In fact, you couldn't do anything at all with it. Much like the data constructor, it would stand only for itself—and that's not what we want.

As a side note, this is a good place to point out that it is understandable if people learning Haskell become confused as to the distinction between kinds, types, and values. But don’t confuse terminology for complexity. The designers of the language had to assign names to things just so we could talk about them. And they really are just names. There is already a proposal to eliminate the distinction between types and kinds, and some languages dispatch with the barrier between types and values, too. As far as the Haskell compiler is concerned, everything really is a function. But we humans need to distinguish between different sorts of functions. The analogy between value-level and type-level functions should be enabling, not obfuscating. Address incomprehension and despair with patience and explication, and the language will help you.

Moving on to the actual implementation of our functor, we should start by returning to the type of . Remember from above that it is  . Reading the type informs us that the arguments to our own function must be a function and some value that is a functor, indicated by the type constraint on . Let's fill that in:

If we can’t figure out what to do next, we can plug in a “hole” and see what the type checker tells us:

Attempting to compile that, we get a nice error:

As the error message indicates, our hole has the type , which is what we expect, since that's the return value of the entire function. The two parameters we defined, and , also have the types we expect: and , respectively. The key here is the type of the entire function, specialized to our type: . If we need visual reinforcement during our exercises, we can go ahead and use a compiler extension and insert that right into our code:

Making those higher-kinded types more concrete can really help us when writing these implementations. Here, we want to apply the function to the trapped inside of so we can transform it into a . So we need to get to that somehow. When Haskell gurus talk about "type tetris," this is what they mean—i.e., it isn't rocket science even if it feels like a puzzle. This is a good place to demonstrate destructuring:

Now that we’ve broken down the second parameter into its constituent parts, the data constructor and its two arguments and , standing in respectively for the and in our data declaration, we compile again and get a new error:

This looks similar to the error above, but now we see that we have successfully extracted the from and bound its value to . With this information, we can easily rewrite our definition to get rid of the hole:

This definition seems plausible. We have a function of type and we have a variable of type . So we apply to and remember to wrap the whole thing in a new in order to match the data constructor . We stick the on the end, because maybe we're not sure what to do with that yet. Try it out:

Let’s focus on the most informative part of this lengthy compiler complaint:

We got a as output, but it's a with elements of type , not type . Why? We transformed the from an into a , but we didn't do anything with the . They could contain the same type as , but they aren't necessarily the same given the definition of , which specifies a transformation from to . That is, could be the same type as , but it doesn't have to be, and we need to allow for that possibility. We have to write our function in a way that allows, therefore, for the transformation of . Since we defined our type recursively, we must also recursively define what it means to map over that type. Recur, rinse, repeat:

And that will compile. Now we can test it:

Oh no! Just when we thought we had figured out the hard part, the compiler reminds us that we still have work to do. Notice where the exception kicked in. We actually did apply the function successfully to our three list elements, but then the compiler didn't know what to do with the it encountered. We have to deal with that case, which is the base case of our recursion. So:

Let’s try that same test one more time:

Huzzah! We have successfully implemented for our datatype. Take a time out to appreciate all those compiler errors. They were probably annoying at first. A lesser programmer might have complained about that last one, in particular, because naturally we can always account for "edge cases" ourselves. More likely, anyone going through this process will see the value in working with a compiler that forces you to be as correct and comprehensive as possible at the outset, not later on when you won't even remember what you were thinking when you wrote this code.

If you really want to check your work — or if you just couldn’t figure this one out — there is even a way to have the compiler solve the problem for you. Simply add another language pragma to the top of your file and derive your instance automatically:

Then, when you reload the file into ghci (or compile it with ghc), use the

 flag:

Almost like magic (actually, with an algorithm), the compiler generates a instance all by itself. Although the code looks a bit obscure, it is identical to what we wrote ourselves above, just a tiny bit less readable. The first line is the same as ours, except this one is fully scoped. Whereas we take for granted in our own code, because it's an identifier that is either part of the Prelude or one which we've explicitly imported, the compiler specifies the entire chain of dependencies for everything. So becomes and our becomes , since the file where lives is considered the module. In the following three lines, is likewise the same as the bare in the instance we derived, and precedes both constructors, and . The various variables that begin with are congruent with the variables we use to represent the first argument to —obviously, the compiler follows the same naming conventions we do! The rest of the pattern should be straightforward enough to disentangle:

is the same as

is the same as

You may have to squint, but you can see it: the compiler agrees with us. This trick won’t work for every typeclass, since some of them allow for more than one possible instance, but it’s worth knowing about for when it does — and, for this reason, worth learning the basic ins and outs of the compiler, too.

Now, if we want to be pedantic (and who doesn’t want to be pedantic), we can replace the parameter in the base case of our newly compiler-approved instance with a wildcard, because we only really care about the pattern match on :

And that still works. We can also mess around with the infix version of to demonstrate how coding style is a matter of taste:

And why not practice using and while we're at it? Here's a version with a declaration:

And here’s one with a expression:

Early on when learning Haskell, it pays for us to review the difference between the two, so we can just go ahead and invent opportunities for doing so. The clue is in the difference between an expression, which is part of an equation and can therefore be reduced, and a declaration, which creates one or more bindings in a separate scope.

That will work. And so will this:

And also this:

This will not:

And neither will this:

Each of the last two examples will elicit a parse error. The error itself is vague, but it will tell you where exactly you went wrong, so you’ll at least know that syntax is the culprit. Indeed, your best bet, when learning syntax, is to learn a clean and correct style, too, so your code not only compiles but is legible and feels familiar to the broader developer community. Which style looks best to you?

Finally, we can test our implementation against the functor laws — identity and composition — to make sure that, even though it compiles, it is actually correct:

It works! Probably! But we only tried a few inputs that we chose ourselves. That doesn’t provide for very much confidence. But this is pretty much what a typical unit test looks like, right? The vague assurance provided by a statistically insignificant test input or set of inputs may be good enough for some developers working in some languages, but we’re Haskellers now, and we can do better. We have QuickCheck:

Without getting too bogged down in details, we have essentially created two functions, and , to test whether a given functor satisfies the laws of identity and composition. We also created an instance of for our custom so QuickCheck knows how to generate random values of that type. In this case, we're arbitrarily generating either empty lists or lists of two elements, the latter three times as frequently as the former. This is not the best way to test this sort of data structure, but it's fine for demonstration purposes. Let's fire it up:

Note that to create working tests, we have to make a concrete type, otherwise QuickCheck won't know what values to generate. By specifying the type of the input as , we are able to pass the identity test. Doing the same and making up some function arguments, we can pass the composition test. These tests are a little contrived, but they do demonstrate that, in principle, our instance obeys the functor laws. Using the checkers library, we can do better still. We just need to write a little more code:

All we added was a few import statements, a derived instance for , an instance for of a special typeclass called , and a simple test function. provides a means to customize how values are compared for testing purposes. This is especially useful for instances, such as , that might generate infinite data structures if you don't customize their testing apparatus. For , this will do. The function entails certain idiosyncrasies of checkers that aren't worth getting into here. The important point is that we're checking against the laws of and having the library generate random data for doing so. Let's try it out:

Having learned, through this exercise, a bit more about how the type system works, it should be a trivial matter to invent random types yourself and then try to write various implementations for them. For homework, you can try writing instances for these:

Try not to cheat! If you get stuck, at least cheat using the compiler and type checker to help you. And if the above problems were too easy, what other instances can you write for these fictional datatypes? Can you test them? For the truly desperate, you may refer to the code for this article. I haven’t included every possibility, but you can use it for inspiration.

Many people claim that there are different learning styles. Personally, I only know one: practice, practice, practice. The osmotic methodology is more entertaining, but if you actually want to learn Haskell, you need to roll up your sleeves and do the dirty work. You’ll be saving yourself effort down the line if you invest more in your education upfront, at the beginning of your Haskell journey.|||

This article is meant to accompany What a Haskell Study Group is Not, where I offer what wisdom I have on how best to collaborate on learning this many-layered language. Here, I broadly outline what…