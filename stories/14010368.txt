Some people, when confronted with a problem, think "I know, I'll use regular expressions." Now they have two problems. - Jamie Zawinski

Regular Expressions are difficult to write and maintain. Instead of harping about the problems, I want to explore what Emacs offers to make writing them easier. In particular, I want to tackle the rx macro, the regular s-expression or lispy regular expression.

' All we need is =s-matches-p= ' this-file-name s-matches-p bol eval this-file-name space group one-or-more digit group one-or-more digit space group zero-or-more anything eol Produced regexp, I do not want to write or maintain this by hand

Although it is less concise, the example above illustrates the selling point of writing regular expressions at a higher level: it is more understandable, comfortable to write and easier to maintain. Rather, the "lispyness" of the expressions is more appropriate in the style and heart of Emacs, working with symbolic expressions.

The builtin macro has no obvious manual but it has a symbol documentation found via . For a powerful idea, it doesn't have strong examples in the wiki or web to promote it. Hackers before users. To be fair, reading the documentation is enough but examples or recipes would hasten comprehension. This is what this article explores, thus the following sections are exploring some syntax or construct. (Aside, the problems I use are found in Regular Expression Cookbook and if you found them intriguing, support the author and buy the book.)|||

Regular ExpressionSome people, when confronted with a problem, think