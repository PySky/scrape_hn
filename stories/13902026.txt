This project encourages an exploration into the limits of decorators in . While decorators might by new to beginners, they are an extremely useful feature of the language. They can be similar to Lisp Macros, but without changes to the AST. Famous decorator examples are and . This repository is made from scratch, just using Python's Standard Library, no dependency!

INFO: we need some people to do support for Python2, only Python3 for now. Check #3

Public decorators on the API of decorators :

Using as decorator and mixed with context-managers

Another project of mine called MAL which is a basic command line interface for MyAnimeList. The decorator @writing can be used by just adding 3 lines of code! Check out the awesome effect:

The develop mode creates a .egg-info (egg-link) as a symlink in your standard / directory. Don't worry with the , it's only information for the package egg to link with your . For that, the usage is dynamic, you can modify the code in test on the command line always using absolute imports in anywhere (like the first example)

Please make sure the code passes lint and tests before sending a pull request. You can set up pre-commit to make this easy.

In the root of git repository, run these commands after cloning the project:

If you don't know about pre-commit, check the pre-commit website.

Now you can create a new branch based on the (or other you want to improve, like ) and send a pull-request to me!

If you just want to know something or give me a suggestion, create a new issue!

Because good things need to be free.|||

decorating: Literally decorating your terminal with decorators