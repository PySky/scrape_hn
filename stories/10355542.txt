Until recently, you needed to use a Java decompiler and all of them were either unstable, obsolete, unfinished, or in the best case all of the above. And, if not, then they were commercial. The obsoleteness was typically proved by the fact that they can only decompile JDK 1.3 bytecode.The only so-so working solution was to take the .class file and pre-process it, so it becomes JDK 1.3 compatible, and then run Jad over it (one of those older, but better decompilers).But recently, a new wave of decompilers has forayed onto the market:Here's a list of decompilers presented on this site:open-source, https://bitbucket.org/mstrobel/procyon/wiki/Java%20Decompiler Author: Mike StrobelUpdated in 2015. Handles language enhancements from Java 5 and beyond, up to Java 8, including:Free, no source-code available, http://www.benf.org/other/cfr/ Author: Lee BenfieldUpdated in 2015. CFR is able to decompile modern Java features - Java 8 lambdas (pre and post Java beta 103 changes), Java 7 String switches etc, but is written entirely in Java 6.free for non-commercial use only, http://jd.benow.ca/ Author: Emmanuel DupuyUpdated in 2014. Has its own visual interface and plugins to Eclipse and IntelliJ . Written in C++, so very fast. Supports Java 5.open-source, https://github.com/fesh0r/fernflower Author: Egor UshakovUpdated in 2015. Very promising analytical Java decompiler, now becomes an integral part of IntelliJ 14. ( https://github.com/JetBrains/intellij-community/tree/master/plugins/java-decompiler Supports Java up to version 6 (Annotations, generics, enums)given here only for historical reason. Free, no source-code available, jad download mirror Author: Pavel KouznetsovProbably, this is the most popular Java decompiler, but primarily of this age only. Written in C++, so very fast.Outdated, unsupported and does not decompile correctly Java 5 and later.|||

Java decompilers online: *JAD, *JDCore, *Procyon, *Fernflower, *CFR.  ✓ A user interface to extract source code from .class and .jar ‘binary’ files.