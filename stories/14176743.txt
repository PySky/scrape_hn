void audit_arg_sockaddr(struct kaudit_record *ar, struct vnode *cwd_vp, struct sockaddr *sa)

 {

   int slen;

   struct sockaddr_un *sun;

   char path[SOCK_MAXADDRLEN - offsetof(struct sockaddr_un, sun_path) + 1];

 

   ...

   bcopy(sa, &ar->k_ar.ar_arg_sockaddr, sa->sa_len);

   switch (sa->sa_family) {

 

     ...

     case AF_UNIX:

       sun = (struct sockaddr_un *)sa;

       slen = sun->sun_len - offsetof(struct sockaddr_un, sun_path);

 

       if(slen >= 0){

          /*

         * Make sure the path is NULL-terminated

         */

         if(sun->sun_path[slen] != 0){

           bcopy(sun->sun_path, path, slen);

           path[slen] = 0;

           audit_arg_upath(ar, cwd_vp, path, ARG_UPATH1);

         }   ...

 }



/*

   * Make sure the path is NULL-terminated

   */

   strlcpy(path, sun->sun_path, sizeof(path));

   audit_arg_upath(ar, cwd_vp, path, ARG_UPATH1);

char path[SOCK_MAXADDRLEN - offsetof(struct sockaddr_un, sun_path) + 1];

 

 bcopy(sa, &ar->k_ar.ar_arg_sockaddr, sa->sa_len);

 

 case AF_UNIX:   sun = (struct sockaddr_un *)sa;

   if (sun->sun_len > offsetof(struct sockaddr_un, sun_path)) {

      /*

     * Make sure the path is NULL-terminated

     */

     strlcpy(path, sun->sun_path, sizeof(path));

     audit_arg_upath(ar, cwd_vp, path, ARG_UPATH1);

   }

 ...

Disable SIP 

Boot into Recovery Mode, open a terminal and type: , then reboot # csrutil disable

 Successfully disabled System Integrity Protection.

Please restart the machine for the changes to take effect.

 

 Enable Debugging in the Debuggee 

 In a terminal on the machine you are going to debug (I use a VM), type: 

 

Then reboot. 

 Download & Install Apple's 'Kernel Debug Kit'

 This requires an Apple Developer ID, and can be downloaded from here. This should be installed on the host machine. 

 Start 

 On the debugger machine (i.e. the host, not the VM) launch in a terminal. Then execute the following: 

 Generate a 'Non-Maskable Interrupt' (NMI)

 On the debuggee machine (the VM), hit (all at once) to generate a non-maskable interrupt. This will trigger a catchable debug event! 

 Connect to the Debuggee

 Hop back to the debugger machine (the host) and type: 

 This will establish a remote debugging session! 



int bind(__unused proc_t p, struct bind_args *uap, __unused int32_t *retval) {

    //paths greater than 128

   // ->invoke getsockaddr to dynamically allocate via the heap

   if (uap->namelen > sizeof (ss)) 

   {

     error = getsockaddr(so, &sa, uap->name, uap->namelen, TRUE);

   } else {

     error = getsockaddr_s(so, &ss, uap->name, uap->namelen, TRUE);

   }

 .... 

 

 static int getsockaddr(struct socket *so, struct sockaddr **namp, user_addr_t uaddr, size_t len, boolean_t translate_unspec)

 {

   ...

   MALLOC(sa, struct sockaddr *, len, M_SONAME, M_WAITOK | M_ZERO);

   error = copyin(uaddr, (caddr_t)sa, len);

 

|||

