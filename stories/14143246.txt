I was truly impressed by workflows in the beginning. It is like an event listener. You specify a condition and if that happens to be true after an object save, the steps you define get executed. Suppose, you define the condition ISCHANGED(GENDER_OWNER), set TITLE as Mr. or Miss depending on the gender of the owner.

This might seem a reasonable use case but you yourself might not know when and how you are changing the gender field. May be you wanted this to execute only when edited manually. Or you encounter a special case where the owner is a female but care taker is a male and hence you want the title to be Mr. Well, workflows won't allow you unless you introduce an extra column to specify that you need to override this condition. So the condition becomes AND(ISCHANGED(GENDER_OWNER), OVERRIDE? <> TRUE). Using an extra column will surely induce human errors into the system.

Realisation comes late about the size of Salesforce project one develops. Imagine having a bunch of workflows and you need to update certain set of override conditions in each of them. You are bound to make mistakes, period.

Instead, maintain an Apex class with all conditions related to override written in a well mannered OOPs pattern. Evaluate the object post save using Triggers and then display error, modify the object or simply save based on the condition. This solution is far more test driven and clean as compared to workflows.

Similarly, it is almost impossible to pause or suspend a workflow, of course without using an extra column. I am sure maintaining Apex classes is a better solution.

Debugging workflows requires a different level of talent and I lack it currently. Console is bad. Tons of stuff happen and finding the exact execution is finding a needle in haystack.

Another issue is that since it is event based, it is very difficult to figure out which workflow gets executed at what point of time. One may assume that only a single workflow might get fired but that might change another field which can instantiate an update trigger or fire another workflow. It is totally possible that you might end up in an infinite loop with two workflows triggering each other one after another.

I would prefer my systems to be in control rather than shooting guns in random direction. Define your actions using custom buttons and implement logic using Apex Classes and control the flow.

Process builders are no less of a menace but then the flow can be split into trees of decisions making one dependent on another. It looks better and is easier to control. I personally prefer performing small tasks and updating petty fields using process builder.

Process builders suck when you have a complex mathematical formula with conditions. I hate the logical syntax of process builders that is IF(CONDITION, EXECUTE IF CONDITION TRUE, EXECUTE IF CONDITION FALSE). It is a very bad form of ternary operator specially nested ones. You are bound to mix up brackets.

The best way to maintain and control the project is to create custom button or links and perform each and every task using Apex class. If you have a custom button for each action, you will eliminate the need for triggers too since object knows what has changed and will act upon any related actions internally.

This also means no random triggers executing when you changed something. Only you decide what gets executed. This requires a humongous effort though but gives you extreme control of the application.

Huge advantage is that it is a test driven approach and any JAVA programmer can code the logic. It is only the ORM part which needs to get overriden (and it should be easy to that).

Formula field is the most attractive piece of functionality. Imagine defining the UnitPrice of the product and referring the same field everywhere. Benefit is that you get the price of the product everywhere such as Quotes, Contracts, Opportunities and other objects where you define the price field using formula without writing any extra code separately but it comes at a cost. Have you ever wondered the implications of storing logic directly?

Naturally, it affects the old existing data as well. Once you update the price of product lets say two years later, the prices gets updated in the past orders too. All the numbers get screwed once you change the value of the root field.

Similar case occurs when referring the value of formula field inside Apex class. The value might change during execution and could differ at each line of Apex class as formula field gets calculated instantaneously each time.

Unit price and Sales price kinds of fields should be safely copied from existing copy of products from pricebook. Once you copy them and store them in a static field (not formula field), your data remains safe no matter how many times you update the price of the products in pricebook.

Overall, I found the platform not developer friendly. I had to debug a lot of silly bugs to understand all of this. There are many more hidden secrets around this wonderful platform and I would be happy to listen to your experiences in comments.

If you are a non salesforce programmer and are yet to implement Salesforce in your system, my advice is go away as far as possible from this software and implement one on your own. If you have already implemented, you can proceed with this post.Salesforce is deemed is one the greatest tool when it comes to sales CRM. But surely it is a hell for developers to integrate their billing systems. Standalone use cases echo better experience where Salesforce is used to generate invoices, but integrating SAAS workflows tastes bitter.No doubt Salesforce eases functionalities such as custom object creation, custom layouts, ACL, quote management, order management and integration of various services such as DocuSign, ZenDesk. But it lacks features like multiple product handling, proration, automated calculation of duration, date management etc. These are very important resources when it comes to SAAS industry.It gets further complicated when you can implement a particular functionality in multiple ways without knowing the right way. Workflows, Triggers, Javascript, Process Builder and formula field are some of the tool sets in Salesforce which implement certain logical procedures. You can implement a functionality using these tools. Once you implement using your favourite tool without knowing its implications, Salesforce screws back really hard.|||

what to avoid in salesforce, dos and donts of salesforce, avoid workflow salesforce, avoid salesforce, reasons to avoid salesforce, reasons to avoid workflows, reasons to avoid formula fields