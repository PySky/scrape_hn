Ketchup is a CMS that aims to be...

If you’re interested in using Ketchup, please check out the documentation at ketchuphq.com/docs (which is itself built with Ketchup — dogfood!).

If you want to download the latest release, visit the Releases page.

If you'd like to see some screenshots, see here.

This readme will focus on how to build and develop Ketchup.

These instructions assume you're using OS X, but they should work on Linux as well. The only exception to this is that Homebrew is used to install on OS X. You won't need unless you're planning to modify the API (see the Protobuf section below).

To get started, you’ll first need to install Go and Node. They are used to compile the backend and frontend respectively.

Then, run the following to download frontend and backend dependencies:

Now you should be able to compile the binary:

This will first run the frontend compilation (a Gulp task), then embed the frontend assets into , and finally run . The result will be a binary in the top-level.

If you want to modify the API, see below for instructions for how to update the proto files and regenerate the corresponding Go structs and Typescript classes.

For ongoing development, it can be a hassle to keep recompiling. There's a task which you can run in the folder to recompile Typescript and SASS and output on changes to frontend code.

For backend code, there's , which will start a Ketchup server and recompile/restart it on changes to files.

This section is for completeness; you probably won't have to do this.

Ketchup uses to create and release new builds. The config file is dynamically generated in order to interpolate into the config, which is used to remove the that would otherwise appear in stack traces.

The version of the release is read from the latest git tag.

Protobufs are used to describe the API as well as the serialization for data stored in BoltDB.

To change the API, you’ll need to install the protobuf compiler, . If you have Homebrew, running will install it using , as well as a custom plugin for generating Go output.

You should never edit and directly. Instead, you should edit the relevant protobuf file, and then regenerate those files:

After regenerating, you can recompile the frontend and backend to view your changes.

This is a work in progress. The long-term goal is to make it easy to swap out, configure, or add modules, using a custom file. The following features are intended to be pluggable:

The module system is documented here.

A brief run through of the things without which this project would not exist:|||

ketchup - A simple CMS :tomato: