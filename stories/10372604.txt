Once upon a time, too many years ago more than I am willing to admit. I set out to become a webmaster (that alone dates me). In the early stage, it was HTML, CSS was in diapers, Javascript was just plain ugly and mean, ohhhhh and I can’t forget sweet Java, it was the bee’s knees and ever so mind bending.

The web grumbles started showing yet another flocking to the idea of Macromedia Shockwave, and most notable, its sexier sibling, Flash. It broke me. Animation was not a strong suit. There I was, learning how to tween and program in ActionScript. I identified as a static designer. Not an animator.

The best part of this great new lovable tech was it’s heavy weight data usage and the fact that I was only ever going to reach 60% of audiences that

a.) Had a stable dial-up connection and a lot of patience while the app loaded up

Right away, web development quickly showed rapid growing pains. I started shooting photography for a lot of my motion visual projects. My love affair of the camera won. I became a photographer and left web development in the garage to collect dust. I can’t say that entirely. For the last ten years, I have used HTML, CSS and PHP mostly on Wordpress websites specific to my photography and personal projects. It was handy being able to manage my own web presence.

Recently, I decided to refactor my career plan, I evaluated my skill set and decided that I would shift focus back into web development again. The key deciding factors.

Eight months later, I am spending a great deal of time yelling at my screen. I paid attention to the demands of the web market, what was being sought after skill wise by potential employers. Yet, after learning all of this, I should feel confident right? Yet, I curse at my screen. Why you ask?

Here is what I know today. Consider it, jack of all, master of none kind of knowledge. I don’t use this stuff every day.

Adobe Photoshop, Illustrator — Almost 20 years experience (I’m not that old, I swear)

Frameworks — Ruby on Rails (Ruby), Slim 2, Lumen and Laravel (PHP), AngularJS, Angular 2.0, Express, Meteor, EmberJS, VueJS, RiotJS and Polymer(All Javascript), Bootstrap, Foundation, Skeleton, PureCSS, Ionic(CSS)

I have crammed all of these languages, frameworks and tools as well as many other technologies not listed into these noodles I call a brain. All, are current and trending technologies. Exception to AngularJS, which is now stalling with the confusion of Angular 2.0, this is another screaming point altogether.

Happily, I have started to send out resumes to web firms feeling solid in what I do know and that I could bring value to a team. Don’t worry. I know you’re still waiting to find out why I was screaming. Cover your ears.

I got a call, a company wanting to review my candidacy. Yippee! First question. “Do you know ReactJS?” My answer, “No” (truth, I’ve been avoiding it). The prospective employer, sorry we’re looking for someone with ReactJS knowledge. My response, what about all the other tech stacks swimming confusingly in my brain. No, they preferred someone with my knowledge AND ReactJS. ReactJS experience wasn’t mentioned in the ad by the way.

With that setback newly implanted, I purchased three courses specifically related to ReactJS. Over the past weekend, I committed to focusing deeply on the topic because I know it’s the “IN” crowd fashionable need to know stack. I’m a smart boy, I know it’ll take more than a weekend to learn anything. It’s enough to get started, put the feelers out and get comfortable with the fundamentals at least. Well, at least that was what I fooled myself into believing.

The weekend started with lots of coffee, I filled the air with melodic and energetic trance music while starting the tutorials. The weekend ended quickly with lots of beers, angry metal music and me shouting at my screen.

ReactJS does not compute. It’s an ugly mess to a heavily invested MVC adoptee that truly believes in separation of concerns, follows SMACSS and BEM naming convention to the letter. I use RiotJS or VueJS for simple components, Polymer for already baked easy to toss in components, AngularJS for complex components. I’ve got many component stacks embedded, frameworks that I feel are more elegantly designed and easily palatable to my learning abilities.

Don’t get me wrong, I realize React is fast and support its relevance to the web development community. I realize that Facebook created it and also uses it. Great selling points for a framework. I also realize that Facebook needed to develop a complex solution to a complex problem. Therefore I wouldn’t imagine their creation to be an easy tool. Of course it’s blazing fast to the average developer. Most of us aren’t developing to a mass of 1.6 billion users on our web projects. I am sure that Facebook is still looking for methods faster than ReactJS to compete with its current load. I have much respect for the challenges that Facebook developers deal with on a day to day basis.

I will say that ReactJS as of late has become more of an ego problem amongst developers, not just focusing on it being a solid technology solution, because it is stunningly fast. It is not the only solution. It is one tool among many available to us as developers. AngularJS, RiotJS, VueJS and Polymer are all fast component frameworks in their own rights. Not perfect by any means. Perfectly acceptable frameworks nonetheless. While speed is important, I also support developer sanity.

However, in every AngularJS or WebDev forum, you see the React supporters thumbing their noses at us non believers. There is a point when you do have to say no. I’ve tried to learn stacks that resemble closely as possible for syntax harmony. ReactJS (notably JSX which is the ‘best practice’ we are told to adopt) betrays all of that for me. I’m positive that my capabilities thus far would be advantageous to any employer without having to take on this framework.

I’m already disappointed as I watch the AngularJS mess play out, given its hype and the number of companies wanting this framework. I invested a lot of time and money into it. I’m afraid to take on yet another trendy framework because of this recent setback.

I know people will say, if you can’t keep up, this isn’t the right industry for you. However, my argument is, there is a difference being in a fast paced environment and overburdening the environment with too many tools. Really, unless we’re working in a team environment on large projects. How many of us actually really get to use these technologies frequently enough to embed them into memory?

I love the open source community and appreciate the numerous donated hours into creating these projects and frameworks that we’ve become reliant on. The web is a beautiful place because of these awesome people. I kind of wish the community could practice our most important development criteria for code. DRY — Don’t Repeat Yourself. There are currently too many trending tools that repeat others. (Twig, Swig, Smarty, Moustache, Handlebars, Liquid, Blade anyone??) Each one only has slight minor variances that sets it apart. Some are complete radical departures like ReactJS which I am sure is part of its charm. It’s implementation is naughty and rebellious in comparison to what we’ve been taught.

I’m seeing this create a lot of frustrated developers and some badly implemented glitchy projects, it’s impossible for us to specialize in any one stack right now, so, I don’t blame the developer’s wholly for glitches these days. Most often they’re implementing while learning at the same time.

Recently, I had a conversation with a number of seasoned developers, the general consensus, we have become heavily reliant on our editors of choice because of the difference in platforms that we are working with. Making sure our Linters, Snippets and automation tasks are up to speed. We all admit to borrowing code, I’ve known this to be common practice within the industry for years. Yet, job placement interviews put incoming developers under the microscope for coding challenges without their usual development environment. We do rely on our development tools, the way we’ve built them to work for us is what makes us good at what we do. I can’t sit down and build a Ruby on Rails project, code jQuery or build a Gulp task without pulling skeleton snippets from my archive. I don’t pull code out of my head like black magic.

This rapid influx of new technology and early adoption is making it difficult for newcomers like myself to get their feet in the door because there is too much to take in. Worst yet, most of these trends don’t last long enough for newcomers to use proficiently. In reality, at the newcomer stage, how often do we get to implement these technologies on a daily basis? We don’t. At best, we can practice with it, unless we get into an environment driven by these tools on a daily basis it won’t become routine for us. For now, we know what’s out there, most of the time, we really only use HTML and CSS with some jQuery here and there to practice our skills, maybe if we’re lucky we’ll get a PHP or Wordpress gig. When it comes to interview crunch time. Don’t slam the door on us because we don’t have all the absolute latest and greatest completely under our belt or seem very shaky. We’ll get there.

Off I go, thus ends my screaming rant. I’m going to go create a Hello World in HTML, I might even be sassy and just plain old school echo something in PHP without using Twig for a change. Then, I’m going to apologize to my iMac for all the profanities that I threw at it. I think I turned its aluminum shell into a rose coloured shade. I must return it to its former sexy silver glory.

“I’m sorry baby”. I promise never to touch ReactJS again!|||

Once upon a time, too many years ago more than I am willing to admit. I set out to become a webmaster (that alone dates me). In the early stage, it was HTML, CSS was in diapers, Javascript was just…