Since I started studying and working on a Clojure project, I've been using the library. It's a really simple and powerful way of dealing with concurrency, which is also used in the Go language. It's an implementation of Communicating Sequential Processes, and now with ES6 generators we can use it in Javascript too! In this post, I'll be using js-csp. Check out my Introduction to CSP in Javascript - it can be considered "Part 1" of this post.

When I came across Quiescent's TodoMVC implementation, I saw the power of CSP as a front end application framework itself. This post describes an expanded version of the architecture of that TodoMVC app.

The application has an object called state. The state holds the information needed to render the screen.

There's a render process, that triggers a React render (or whatever view framework you want to use) whenever a new state object is put into the render channel.

There are update processes, that transform state according to the data put into the update channels. After transforming the state, the update processes put the new state in the render channel.

There are complex actions processes, that are asynchronous processes that can trigger multiple update processes. It usually involves communication with the server, or any action that takes time to complete.

It's that simple. Those are the basic processes in the framework. Of course, it is possible to run more processes, like a router or websocket process, but let's start with the basic ones.

First of all let's create the application config object. An example would be:

The config object has the , the render channel , and the and channels and consumers. I'm going to explain those later.

The function loads the config, and will start all the processes. I like to put the loaded app in the object, so I can play with it in the browser console, very much like Clojure's command line.

Get your build flow running (I like to use npm as a build tool) and let's dive into the update processes.

Let's pick one functionality in our app: adding a new word to the list. First, let's implement the function that receives the old state and the word to add, and then returns the new state with the word added:

Every update function will receive two parameters: the state and the data used in the transformation. Then it will return a new state. Since it's a pure function, it's very simple to unit test.

Now let's write a function to initiate a process that takes data from the channel, and transforms :

And we can call it in the function:

Let's test it in the browser. Write in the console:

But we'll have many update processes. In this application we have three: , and . The first changes the word being shown in the screen (by changing ), and the second adds a new word. First, the functions:

And let's change to , which loads a process for each update:

In the console, use to put data into channels and check the transformations being done in !

Sometimes one action cannot be translated in a simple update function. Take, for example, an action that inserts data into a db through a web server. It will set loading to true, make the request, update the state, and set loading to false.

These are what I'm calling complex actions: functions that call more than one update over a period of time. They also receive two parameters: the update channels and the data required for the action.

For instance, let's think of the complex action that changes the nickname of person with a given person ID:

It's not as simple to unit test a complex action, but it's not complicated either. You just create the update channels and check the values passed to them.

And now let's take a look at the , which is very similar to :

Now go to the browser console and type:

And that's exactly what we wanted.

Let's start with number 3. That logic is ready for us in the library (and in too). Change the definition of to:

This means that the channel will hold 1 value at a time, and, if another value is put in the channel, the last one will be discarded and the new value will be available. This is the sliding strategy.

Now, to the render process:

The first thing the process does is to take a value from the render channel. Then, the channel is created. This is a trick so the process wait for the and functions to continue.

Both functions are async, and don't block the main thread when called. That means that right after is called, the expression will be evaluated. That way the process will be paused until any value is put in the channel.

accepts a callback, and then calls . This function waits for the next browser rendering frame and calls another callback.

Whenever the render is started, it waits for the next animation frame to get a new state to render. This way we make sure no unnecessary renders are triggered! Cool, isn't it?

A little modification is needed in the process: the new state should be put in the render channel:

We start by calling it in the function:

Go to the console and write the following command to add a thousand new words, and see how efficiently it's rendered:

The code for the final application can be seen here, and it can be seen running here. Be sure to open the console, inspect the object, and play with the channels!

CSP is a simple, powerful and time-tested way of dealing with asynchronous programming. Using it as an application framework is very rewarding. The architecture is robust, and seems to scale well. I'm certainly going to use it in other projects, and I encourage everyone to try it!

I'd like to battle test the framework within a bigger project, to really get a sense of how it will behave.

Most client-side application demands could be translated as an update or complex action, at least the ones triggered by the user. But some could be implemented as ever running processes, initiated in the function. For instance, a simple router could be written as:

I would also like to experiment this way with web sockets.

If any of you want to exchange some ideas about using CSP as a framework with javascript, or any other flavor of front end programming, feel free to email me at lucasmreis@gmail.com.|||

