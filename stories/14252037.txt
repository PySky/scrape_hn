In this tutorial we are going to build an application with flask. We will setup management commands, a sqlalchemy model and an API rest to access and modify the model.

We are going to use pyenv + virutalenv plugin. For python package scaffolding we will use cookie cutter. If you want to know how to setup pyenv, please pyenv+virtualenv tutorial. In particular we will use Python 3.

CD into the new directory and open the file requirements_dev.txt and paste the following:

In this tutorial we are going to use Flask-SQLAlchemy, Flask-Migrate, Flask-RESTful and Flask-Script.

We are going to start with two new directories: static and templates.

In the directory where you setup.py was created, execute the follwoing commands:

On the flask_app/app.py we are going to add the code for app initialization. We will import the views, so flask can add those views.

Next we will add the index route and show a "Hello, World!" messaga. Add the following content to the views/init.py file:

Add the following code to the flask_app/scripts/start.py. This code will start the flask application in debug mode

Now test your application running the file:

In this simple tutorial we are going to show animals and colors form a model. We are not going to add authentication to make this tutorial simple. Here is the model we are going to show and create records. Open the file flask_app/models.py and add the following content:

Open the settings.py and add the following:

Change the settings as you need, in this example we will use sqlite. For more information on how to setup the url see sqlalchemy engince docs.

Now we are going to create a manage script for the migrations. Open the file flask_app/scripts/manage.py to append these content:

Now initialize the empty database schema using:

This will create a directory called migrations. You need to save this directory in your git in order to have historical model schema changes. At this point we have enable migrations for our model.

To access the model we just created we are going to use Flask-RESTful.

Now for testing the API we first are going to create a new animal using curl:

You can get the list with:

Get one animal by id:|||

In this tutorial we explain how to build a REST API using flask. We try to create an environment similar to django (with management commands to migrate the database using flask).