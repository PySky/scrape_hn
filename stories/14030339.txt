A good sign of a philosophically sound interactive Unix tool is the facilities it offers for interacting with the filesystem and the shell: specifically, how easily can you run file operations and/or shell commands with reference to data within the tool? The more straightforward this is, the more likely the tool will fit neatly into a terminal-driven Unix workflow.

If all else fails, you could always suspend the task with Ctrl+Z to drop to a shell, but it’s helpful if the tool shows more deference to the shell than that; it means you can use and (even more importantly) write tools to manipulate the data in the program in whatever languages you choose, rather than being forced to use any kind of heretical internal scripting language, or worse, an over-engineered API.

is a good example of a tool that interacts openly and easily with the Unix shell, allowing you to pass open buffers as streams of text transparently to classic filter and text processing tools. In the case of Vim, it’s particularly useful to get to know these, because in many cases they allow you to avoid painful Vimscript, and to do things your way, without having to learn an ad-hoc language or to rely on plugins. This was touched on briefly in the “Editing” article of the Unix as IDE series.

By default, will use the value of your environment variable as the shell in which your commands will be run. In most cases, this is probably what you want, but it might pay to check before you start:

If you’re using Bash, and this prints , you’re good to go, and you’ll be able to use Bash-specific features or builtins such as comfortably in your command lines if you wish.

You can run a shell command from with the command. This is inherited from the same behaviour in . A good example would be to read a manual page in the same terminal window without exiting or suspending :

Or to build your project:

You’ll find that exclamation point prefix shows up in the context of running external commands pretty consistently in .

You will probably need to press Enter afterwards to return to . This is to allow you to read any output remaining on your screen.

Of course, that’s not the only way to do it; you may prefer to drop to a forked shell with , or suspend with to get back to the original shell, resuming it later with .

You can refer to the current buffer’s filename in the command with , but be aware that this may cause escaping problems for files with special characters in their names:

If you want a literal , you will need to escape it with a backslash:

The same applies for the character, for the alternate buffer.

And for the character, which expands to the previous command:

You can try to work around special characters for these expansions by single-quoting them:

But that’s still imperfect for files with apostrophes in their names. In Vim (but not ) you can do this:

The Vim help for this is at .

Also inherited from is reading the output of commands into a buffer, which is done by giving a command starting with as the argument to :

This will insert the output of the command after the current line position in the buffer; it works in the same way as reading in a file directly.

You can add a line number prefix to to place the output after that line number:

To put the output at the very start of the file, a line number of works:

And for the very end of the file, you’d use :

Note that redirections work fine, too, if you want to prevent from being written to your buffer in the case of errors:

To run a command with standard input coming from text in your buffer, but without deleting it or writing the output back into your buffer, you can provide a command as an argument to . Again, this behaviour is inherited from .

By default, the whole buffer is written to the command; you might initially expect that only the current line would be written, but this makes sense if you consider the usual behaviour of when writing directly to a file.

Given a file with a first column full of numbers:

We could calculate and view (but not save) the sum of the first column with , to see the expected value of 538 printed to the terminal:

We could limit the operation to the faithless electoral votes by specifying a line range:

You can also give a range of just , if you only want to write out the current line.

In Vim, if you’re using visual mode, pressing while you have some text selected will automatically add the range marks for you, and you can write out the rest of the command:

Note that this writes every line of your selection to the command, not merely the characters you have selected. It’s more intuitive to use visual line mode (Shift+V) if you take this approach.

If you want to replace text in your buffer by filtering it through a command, you can do this by providing a range to the command:

This example would capitalise the letters in the first two lines of the buffer, passing them as input to the command and replacing them with the command’s output.

Note that the number of lines passed as input need not match the number of lines of output. The length of the buffer can change. Note also that by default any is included; you may want to redirect that away.

You can specify the entire file for such a filter with :

As before, the current line must be explicitly specified with if you want to use only that as input, otherwise you’ll just be running the command with no buffer interaction at all, per the first heading of this article:

You can also use as a motion rather than an command on a range of lines, by pressing in normal mode and then a motion ( , , , etc) to select all the lines you want to pass through the filter. Doubling it ( ) filters the current line, in a similar way to the and shortcuts, and you can provide a numeric prefix (e.g. ) to specify a number of lines from the current line.

This is an example of a general approach that will work with any POSIX-compliant version of . In Vim, you have the command available to coerce text to uppercase, but this is not available in vanilla ; the best you have is the tilde command to toggle the case of the character under the cursor. , however, is specified by POSIX–including the locale-aware transformation–so you are much more likely to find it works on any modern Unix system.

If you end up needing such a command during editing a lot, you could make a generic command for your private bindir, say named for uppercase, that forces all of its standard input to uppercase:

Once saved somewhere in and made executable, this would allow you simply to write the following to apply the filter to the entire buffer:

The main takeaway from this is that the scripts you use with your editor don’t have to be in shell. You might prefer Awk:

Or Python, or Ruby, or Rust, or …

Incidentally, this “filtering” feature is where ‘s heritage from ends as far as external commands are concerned. In POSIX , there isn’t a way to filter buffer text through a command in one hit. It’s not too hard to emulate it with a temporary file, though, using all the syntax learned above:|||

