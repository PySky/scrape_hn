At Beamery we follow Microservices Architecture which has various advantages from it being easier to scale, deploy independent services to elimination of any long-term commitment to a technology stack. However, Microservices Architecture also has its fair number of disadvantages as testing and inter-services communication become harder.

We currently have a good 50+ git repository. Developing features affect very often more than one of these repos. Changing branches, syncing and development is hard as you have to keep flipping between multiple terminal tabs to make sure all the repos are in order. Beamery Micro-services Helpers are shell helper functions that will automate and facilitate manipulating micro-services repos and in general any multiple folders in a certain directory.

These helper functions are configured out of the box to work bash-it plugins framework for bash and oh-my-zsh plugins framework for zsh.

You can install the helpers using the installation script by executing .. the script will then prompt to select the type of shell you are using, check for the existence of any shell helper and then install the relevant helpers accordingly.

You can install this pugin via the command-line with either curl or wget:

The manual installation details for these are:

bash-it separates plugins, aliases and completion functions into three separate folders. To install the completion you will need to copy to which is usually is in .

To Install the plugin, you need to copy both the main plugin in and the plugins folder in to which is usually is in

Activating now the plugins and completion is done via executing both and in the terminal and then reloading the sherll either by which is a bash-it alias or by sourcing or depending on your OSX by executing

oh-my-zsh have all their plugin in the plugins folder inside the installation directory of which is usually in .

Installing oh-my-zsh beamery plugin is done by copying beamery folder in to oh-my-zsh plugins directory and then activating the plugin by editing your and adding to the list of plugins so that you have something similar to:

If you do not use any shell halpers but still want to take advantage of these helper functions, you can still install them manually. Basically all what you need to do is source the main entry file which is in from your or depending on your OSX. Basically, i create a new folder in my and i call it so thats its hidden, and i copy the contents of inside so that i have:

then i add the line inside my as i am on OSX but can be inside your as well. Simply, reload by re-sourcing these files and you are good to go.

Currently the helper functions configured are:

For git functions, there are default params set for and which are for your remote and for local branch. However, these can be easily overridden by passing the desired names to the appropriate function call. Example:

Autocompletion is enabled by default and supports both zsh and bash. For zsh, hitting tab immediately after will show the list of supported plugins to execute. Hitting a tab afterwards will add the flag which will show the help docs for that plugin.

There is a dedicated function that will be triggered by that will show the help docs for each plugin.

The most common prerequisite before executing any "helper" function is to be able to execute that function on every repository you have. Adding new plugins is very easy, you just need to create a new file with the desired function name inside the folder. Then, you need to make sure that the file will have:

Execute takes a folder type as an argument. This tells the function to verify the folder contents before executing the function. For example, you only want to execute a if the folder processed is a valid git repo. The supported flags passed are:

Adding new plugins is fairly straightforward. You just need to create a new plugin in the folder. The guidelines for creating plugins are:

Since the plugin links itself to bash-it, oh-my-zsh and sits as a git repo, updating it to pull any new plugins or changes is as easy as executing or simply going to your installation folder and pulling the latest from remote.|||

micromanage - A Micro-services Helpers Framework | Easily manage multiple repositories and projects