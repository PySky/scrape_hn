I’ve recently been learning Elixir, a functional programming language that leverages the Erlang VM. I’ve found a number of aspects of the language and its documentation to be both interesting and powerful. This post is a brief exploration into some of those elements.

If you’re unfamiliar with arity, Wikipedia offers a good definition. In short, the arity of a function is the number of arguments that are expected or accepted by a function.

Functions are commonly listed in the Elixir docs in the form of . For example, the count functions in the Enum module would be listed as:

This indicates that there are two count functions: one which takes one argument, and a second that accepts two.

If a function takes no arguments, for example the new function in the Map module, it would be listed as:

Elixir offers a beautiful shorthand for function chaining. Somewhat similar to promises in JavaScript, the pipe operator in Elixir automatically passes the value of the expression evaluation to the next function. If the function call on the right has an arity > 1, those arguments can still be provided, while the first argument is not necessary to provide explicitly, as it has been provided by the pipe operator.

Here are two identical operations — the first without the pipe operator, and the second refactored with use of the pipe operator.

This example is very basic and chains only once. Even at this level, it’s saved us a line of code without sacrificing readability. When chaining at several levels, the pipe operator really starts to shine. Look at this example from the official docs:

Elixir allows you to create the same function with different clauses, utilizing the clause in its definition to determine which version of the function gets called.

In the above example, I’ve defined function and set a default value for the arg of . If that function is called without an argument, a message is printed indicating such:

Otherwise, the value of the arg is interpolated and printed:

Elixir allows documentation for public functions to be created by the developer within the code itself.

When running this module in IEx, Elixir’s interactive shell, we’d have access to this documentation the same as any other, accessible with the (help) command:

Even better, unit tests can be created within this same documentation:

When running , the two tests listed under will be run with all other tests in the test suite. To ensure this happens, the tests in the documentation need to be prefaced by and be indented by four spaces, and in our file we need to list :

That’s it. We now have tests that will run with AND provide helpful examples as part of our documentation:

Last but certainly not least is pattern matching, an extremely powerful aspect of Elixir. This topic could be a blog post of its own (and, in fact, does already exist as an excellent blog post), so this section will be a very brief introduction.

In Elixir, the operator is officially the ‘match operator.’ This is because it’s actually performing a comparison of its left and right sides. Variable assignment still works as expected:

But flipping sides can show us how comparisons are taking place:

It’s actually comparing the left and right sides to confirm a match. Note that, for variable assignment to occur, the variable must be on the left side of the match operator.

Pattern matching is more commonly used with tuples:

On the surface, this looks very similar to assigning multiple variables in Ruby:

But keep in mind that matching is still taking place, allowing us to only assign variables when certain conditions are met:

As mentioned, pattern matching is worth diving into in more depth. In addition to the basic use case explored above, it can also be used with data structures and functions. If you’re interested, check out the official site (where the final code example came from) or the aforementioned blog.|||

A brief, beginner-friendly look at five interesting aspects of the Elixir programming language.