Dictionary is a really useful data type built into Python, basically it is a number of objects that are indexed by keys, the key here must be hashable. Here is one simple dictionary usage:

We retrieve the value a lot of times, the retrieval of one object by the key must be a very fast operation. For the CPython itself, several language features are supported with the help of dictionaries, for example, class instances use a dictionary to store attributes, the performance of the dictionary is essential.

Inside the CPython, dictionary is a C structure, :

The fields in the data structure are:

Two keys could hash to the same slot, that's called a collision. When a collision happens, Python use open addressing to solve it: if the slot doesn't contain the key, find another slot, for example, here is one simple approach, if slot i doesn't contain the key, try i+1, i+2, and so on. For every hash, we now have a defined list of slots that could contain it, if we delete one of the keys from it, our list would be broken, that's why we need a dummy entry here. The simple open addressing linear algorithm could end up with linear pile-up, that causes poor performance because we need to scan all these slots everytime we look up a key, in real life, CPython use the following algorithm:

If we keep adding keys to the dictionary, there won't be enough space to hold all the keys, now we need to resize the hash table. The CPython would check for the table size everytime we add a key, if the table is two-thirds full ( ), CPython would resize the hash table. If a dictionary has 50000 keys or fewer, the new size is , otherwise, it is . The table won't be resized if we delete a lot of keys from the dictionary, this means your hash table size is not going to be smaller, this isn't a big issue because mostly we use the dictionary for a while and then we discard the whole dictionary. If you build a really large dictionary and then delete many keys from it, you should build a new one with the remaining keys.

Many dictionary instances are created and destroyed frequently, in order to reduce the number of creation and destruction, a array is used to hold dictionary objects that are not in use anymore, it is simply one cache. If we need a , it would be taken from the free list if available.

The dictionary uses more memory than is necessary when used as an object attributes container as the keys are the same and they are replicated for each instance. Since Python 3.6, attribute dictionaries share keys with other attribute dictionaries of instances of the same class, for example if you have a class like this:

The attribute dictionary would be stored like this:

The CPython Dictionary implementation is very straightforward and easy to understand. The code is beautiful, and it performs well, all variables are chosen by experiments, for example, the size of and the size of . I love it.|||

