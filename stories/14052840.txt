I’m gonna solve a complexity analysis problem today. The objective of this process is to get a result of the complexity of the given algorithm in the O notation. Mastering the concepts here demonstrated enables one to measure the cost of any algorithm for any given input.

For starters, the O notation demonstrates the theoretical cost of some algorithm, not the real one. Its goal is to get a generalizable approach to access complexity of algorithms. So the O notation discards every aspect that is specific to a given machine in which the algorithm is running on. It measures only the amount of “work” necessary for processing a bunch of data. With that, one is able to know the cost of the algorithm as the size of data grows.

Some examples of the O notation you might find everywhere are:

Means that the time for some function to return the data does not grow with the size of the input.

Means that the time to compute the function increases in a logarithmic magnitude in comparison to the input.

Means that the time to compute some function increases linearly as the input increases.

Means that its computing time increases by factorial terms (exponentially).

I built a comparison of the growing curves for the above notations.

Where the X axis is the size of N, and the y axis is the cost of processing.

Now let’s take a look at the algorithm we will access complexity.

This algorithm prints a boolean table given the TABLE_SIZE. If it has a size of 2, the output will be like this: 0, 0, 0, 1, 1, 0, 1, 1.

So, the first step is to find the recurrence relationship. The recurrence relationship is an mathematical approximation of the time taken by the algorithm.

The recurrence relationship above is demonstrating that the cost to compute an input of size is two times the size of , since the function is calling itself two times inside the algorithm. But at each recursive call the iterator is decremented, so the cost must be . So we got . For the part, it composes the rest of the processing (without recursive calls and without the else.

For the last part of the formula, that is executed when , the have . Which implies that the cost to execute the loop is equal to the size of the input, so .

We are not done yet . With the recurrence relationship we get a math approximation of the algorithm itself. But to get a good notion of cost we need a more generalized version of it. For that we use something similar to a proof by induction.

We have to find a value for to see if we can infer a pattern of its output. So let's assume a value for n and simplify it until we get a proper sequence of . Let's start with 4.

So, to know we need to know . More exactly, we need to know . So let's place it on the left side of our formula and apply the necessary modifications on the right.

So two times is two times plus . Now we need to know the value of 2^2T(2) , let's repeat the operation.

Once again we repeat the operation, until we get on which we already know the value .

So let’s cancel the duplicates in both sides to get our proper sequence.

So in the end we get a proper growing sequence.

With this pattern in hand we can generalize the cost per increment of n.

And we can simplify the sum like the following:

So we got:

Finally we got an interesting generalization. We just have to extract the O notation from it. We want to know the theoretical cost of running the algorithm as the input grows. For that we just need the most costly part.

And in this case the most costly part of the function is 2^n n. In technical terms 2^n n grows asymptotically the rest of the function. So for the sake of complexity analysis the result is O(2^n n).

This cost is exponential so we may say properly that the algorithm is inefficient.

I plotted the time cost of the function for 20 iterations. Take a look:

And the complete equation compared with it’s O notation relevant part. Note how they practically don’t diverge, since the 2^n n is much more expensive then the rest.

That’s all, for questions please comment below.|||

I’m gonna solve a complexity analysis problem today. The objective of this process is to get a result of the complexity of the given algorithm in the O notation. Mastering the concepts here…