Semantic versioning can be misleading. While F# 4.1 is backwards compatible with F# 4.0, it is by no means a minor release.

With both Microsoft and the larger community contributing, several more features were introduced since the F# 4.1 preview in the areas of performance, interoperability, and convenience.

The headliner for this release is the ability to use structs, also known as value types, instead of reference types. The ability to stack-allocate values, and embed them inside other objects, can have huge performance ramifications when used correctly.

At the top of the list are Struct Tuples. Tuples are very important to idiomatic code in F# and other functional programming languages.

A major criticism of F#’s implementation, known as , was that it is a reference type.

This means potentially expensive memory allocation is needed each and every time a tuple is created. Being immutable objects, that can happen quite frequently.

This was solved in .NET by the introduction of the type. Also used by VB and C#, this value type will improve performance in scenarios where memory pressure and GC cycles are an issue.

Care has to be used, however, as repeatedly copying more than 16 bytes in size may introduce other performance penalties.

In F#, you can use the annotation to declare a struct tuple instead of a normal tuple. The resulting type works similarly to a normal tuple, but is not compatible so switching is a breaking change.

If you are using this for performance reasons, testing is important. Because tuples are so often used in F#, the compiler has special optimizations for them that may eliminate the tuple entirely.

This optimization may not necessarily apply to a struct tuple.

That said, Arbil wrote in the original proposal “according to my tests short struct tuples perform up to 25x faster than default ones if the cost of garbage collecting is taken into account”.

A possible extension to this feature was something called “structness inference”. Consider this line:

In F# this would be a compiler error because origin is a struct tuple and the expression represents a reference tuple. Had structness inference been implemented, then the stuct keyword would have been implied.

Since is it a compiler error, this feature may be implemented in a future version without introducing a breaking change. However, there are numerous sematic and compiler repercussions, so it is by no means guaranteed to happen.

Another important concept in F# programing is the use of records types. Records types are in many ways like tuples such as being immutable and of a fixed size. The main difference is that each field in a record has a distinct name, unlike a tuple where only the position is actually meaningful.

Generally speaking, a library developer is going to want to use records instead of tuples for public APIs, as the named fields are going to be much easier for the application developer to understand.

Unfortunately records suffer from the same problem as Tuples, namely they are always reference types. Or rather, they were. Based partially on the struct tuple work, contributor Will Smith (a.k.a TIHan) created Struct Records.

To indicate a type should be a struct record instead of a normal reference style record, you must use the  attribute. You may be wondering why this doesn’t use the struct keyword. Dsyme writes,

Warning: Struct records are not compatible with F# 4.0. There is a flaw in that compiler which causes it to see struct records as reference types instead of value types. Do not use this feature if your library may be consumed by someone using the older compiler.

Continuing the theme of structs in F#, we see the introduction of Struct Discriminated Unions. A discriminated union is essentially equivalent to a union type in other languages such as C++, but with some extra syntactical tricks. For example, you can effectively define new types within a discriminated union in the form of “case identifier”.

In this example, the union Shape has three sub-types: Rectangle, Circle, and Prism. These only exist in the context of a Shape, and a given instance of a Shape can only contain one of the three.

If you are unfamiliar with the F# syntax, individual fields in type declarations are separated by an asterisk (*). So Rectangle has two fields, Circle one, and Prism three (one of which isn’t named).

When a given case identifier has more than one field, it is implemented as a tuple. Which brings us back to the purpose of this feature; to allow discriminated unions to be implemented as value types instead of a reference types.

Warning: As with struct records, the F# 4.0 compiler will not correctly interpret struct discriminated unions.

C# 7 added a new feature called ref locals. This allows for a safe pointer to a value. That value could be in inside an object, a by-ref parameter, or in some cases on the stack. Consider this simple example,

The same code in F# would look like this

In the announcement and RFC for this feature, it incorrectly stated that F# already had support for ref locals via Reference Cells. This is understandable because the syntax looks like C#’s ref local:

However, once you look at the source code for a reference cell it becomes clear that it is really just a way to box a mutable value.

So in this example, the variable named y isn’t really a reference to an element in the array a. Rather, y is merely a copy stored in an FSharpRef<int> object. This would lead to confusion if not for the fact that the syntax for ref locals wasn’t so different from ref cells.

Another aspect of F# 4.1 is an emphasis on ensuring that F# code interacts well with libraries written in other languages. And with .NET having deep hooks for C, COM, and dynamic languages, this means more than just consuming C# libraries.

This feature only matters to developers who are calling into C libraries from F#. If you pass a data structure to a C library, and that library needs to hold onto the structure, you can run into some serious problems. Unlike the .NET languages, C doesn’t expect a garbage collector to come behind it and move everything around.

The solution to this is to “pin” an object in memory. This prevents the GC from moving it; though one has to be careful not to abuse this as it can have a negative impact on memory usage.

This is done in F# using the fixed keyword in conjunction with the use keyword. This may be confusing to some programmers, as the use keyword is traditionally used for IDisposable objects much like C#’s using keyword. In this case, the use keyword just provides scope for the associated variable and a guarantee that the memory will be unpinned outside of that scope.

In .NET, Caller Information is provided via the use of optional parameters decorated with the attribute CallerFilePath, CallerLineNumber, or CallerMemberName. This is primarily used for logging, but you’ll also see it in other scenarios such as supporting property change notifications in WPF/XAML applications.

There isn’t much to say about this feature in F#. According to the RFC, implementing this wasn’t optional as it is needed for F# to conform to .NET standards.

Simply put, .NET style optional parameters in F# didn’t work. Theoretically you could put a on a parameter and get the same optional parameter behavior that you see in VB or C#. However, F# 4.0 and earlier didn’t compile the attribute correctly. This meant that it was ignored in all languages.

A related problem is that while F# can consume compiled optional, default arguments from other libraries, it couldn’t consume them from code within the same assembly. This only affected .NET style optional parameters, F# style optional parameters worked as expected.

Both bugs were solved in RFC FS-1027 - Complete Optional and DefaultParameterValue Implementation.

While primarily an interoperability issue, there are potentially significant performance ramifications as well. .NET style optional parameters are essentially free. The compiler simply passes in a constant specified by attribute.

If you use F# style optional parameters instead, each optional argument supplied needs to be wrapped in a object. Thus, if a method has 5 optional parameters, and you supply values for 3 of them, then you need to make 3 memory allocations.

So while it is significantly more verbose, .NET style optional parameters will give you better performance than F# style optional parameters.

Another consideration is interoperability. F# style optional parameters are not understood by languages such as VB and C#. So those languages are going to have to manually wrap parameters in objects or pass nulls for missing values.

Moving on, there is also the issue of documentation. The default value for F# style optional parameters are not exposed in the public API. In fact, F# doesn’t really have the concept of a default value. (This is somewhat odd considering its inspiration, OCaml, does.) Instead, there is an optional design pattern idiomatic code should follow, but is in no way obligated to.

Formally referred to as Enable FSharp.Reflection functionality on Portable 78, 259 and .NET Standard 1.5 profiles, this feature solves a longstanding and unnecessary limitation when using F# on limited platforms. From the RFC,

Unlike the other RFCs, this was deemed simple enough that no discussion period was granted.

No major release would be complete without some features that, while not strictly necessary, make the developer’s job easier.

Have you ever seen the number and found yourself counting zeros to determine what it actually means? If so, you’ll probably find this feature to be useful. With F# 4.1, you can now write instead.

Coincidentally, the ability to put underscores in numeric literals was also added in C# this year.

F# has a design problem that developers who primarily use VB, C#, Java, etc. probably didn’t even know was possible: the inability to reference one type or module from another.

In F#, projects are compiled file-by-file rather than all at once. This means a given type or module normally cannot reference another type or module unless it appears earlier in the compilation order. In practical terms, this means you cannot have mutual references between two types.

For example, say you have a class and a Node class. If Node appears before in the compilation order, then can have code that refers to its collection of Node objects. However, since Node is first, it can’t have a property pointing back to the that owns it.

In earlier versions of F#, this restriction can be lifted by creating a “recursive scope” using the . This very limited though; it can only be used for a group of functions or a group of types in the same file. You cannot, for example, have a type and a module refer to each other. Nor can you have an exception contain a reference to a type capable of throwing the exception.

With the so-called Mutually Referential Types and Modules Within the Same File feature, this restriction has been relaxed somewhat. You can now use the rec keyword at the namespace or module level, allowing an entire file to be mutually referential, if it is limited to a single namespace.

The reason for this keyword is philosophical rather than technical. In idiomatic F#, there is a belief that cyclical dependencies lead to spaghetti code. In order to reduce this, they intentionally make it difficult to introduce cyclical dependencies. To be fair, this often does result in easier to understand dependency chains. But the downside is you get very large files when cyclical dependencies are necessary.

It should be noted that philosophy isn’t the only reason that F# doesn’t allow mutually referential types to span multiple files. From the RFC:

One annoyance in VB and C# is you occasionally find yourself wanting to have a type and a module (C# static class) with the same name. This usually comes up when designing extension methods or other utility libraries that work on a given class.

F# solves this by automatically adding the suffix “Module” to the module’s name if there is a type with the same name. Previously this required the use of the attribute, but now module renaming is implied.

One does have to question the logic of this design. Say you publish a library with a module named Foo. Then later you add a type named Foo. This will cause the compiler to automatically rename the module from Foo to FooModule, a breaking change. Since this will now happen without the attribute being present, there is no warning.

When F# was created, a lot of keywords were reserved for future use, especially ones found in other ML-based languages. After 12 years of development, they have concluded many of the reserved words are never going to be used.

If you find you need to use an identifier that is still reserved as a keyword, you can surround it using double back-ticks ( ). This works like brackets in VB ( ) or the @ symbol in C# (@private).

There were also several API changes. Here are a couple of the more notable ones.

In many functional programming languages, functions that have a problem can return an error value instead of throwing an exception. In F#, this was occasionally done using the Option type, but that has a serious problem. Option has no way of telling you why an operation has failed. It can only say whether a value exists.

To work around this, F# developers could create their own discriminated unions that return either a result value or a detailed error value. That leads to inconsistencies across different libraries, so in F# 4.1 we see the introduction of an official result type.

As you can see, this uses the new struct discriminated union feature.

Normally we wouldn’t be covering such a minor API change, but this one has some interesting ramifications. For the core .NET languages, there is a separation between the compiler and the framework classes. This means you can usually target an older version of the .NET runtime using the latest C# or VB compiler.

In F# the rules are a little different. Since F# was meant to be backwards compatible with ML and OCaml, at least enough to make porting easy, it has its own set of framework classes that need to be shipped with the compiler. Or rather, its own set of framework libraries.

With this feature, it wasn’t enough to just add the missing interface implementation. They also had to gate it with conditional compilation directives so they could continue building .NET Portable Class Libraries where that interface doesn’t exist.

A side-effect of adding the IReadOnlyCollection<'T> interface was that it broke JSON.NET. Though quickly fixed, it prompt JSON.NET’s creator, James Newton-King, to ask,

The answer lies in how , a.k.a. , is defined. Rather than being a normal class, it is a discriminated union (see above) consisting of either nothing or a value and another . So basically it is a linked list, without a wrapper class, compatible with F#’s pattern matching syntax.

Because of this design, is not allowed to have a constructor. Also, each node in the linked list is a separate I with its own count that ignores any item coming before it in the list. This is an O(n) operation, something that concerned the developers when implementing the interface.

Contrast this with .NET’s class, which is a wrapper for . Since almost everything is done through the wrapper, can offer constructors and maintain metadata such as the current count.

Features are already in development for F# 4.2 such as a ToString override for discriminated unions and records. You can watch the progress on the F# 4.2 folder of the fslang-design GitHub repository.

Jonathan Allen got his start working on MIS projects for a health clinic in the late 90's, bringing them up from Access and Excel to an enterprise solution by degrees. After spending five years writing automated trading systems for the financial sector, he became a consultant on a variety of projects including the UI for a robotic warehouse, the middle tier for cancer research software, and the big data needs of a major real estate insurance company. In his free time he enjoys studying and writing about martial arts from the 16th century.|||

Semantic versioning can be misleading. While F# 4.1 is backwards compatible with F# 4.0, it is by no means a minor release. With both Microsoft and the larger community contributing, several more features were introduced since the F# 4.1 preview in the areas of performance, interoperability, and convenience.