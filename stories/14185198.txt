The next generation of location-based services uses live location to make assignments, track orders, track miles, personalize experiences and power great product experiences. A fleeting glimpse by product managers and developers might lead to a false view that maps platforms are sufficient to build these features. This post covers what maps do and don’t.

Say you want to build an in-app tracking view of an order. It needs to be a smooth experience (think animated icons) with accurate location (route polylines maybe), live ETA (that updates every minute), user/order information (a drawer to reference) and trip status (why is it stuck there). To build this, what can developers count on maps for and not? Read on for the answers.

Let’s first talk about what maps do well. Of the world of things that maps do, this is a list of capabilities that are most relevant for developers building live location features.

Google Maps is the API of choice with a generous free tier for starters and then a steep price increase, sometimes in steps of tens of thousands of dollars depending on the APIs you use. Mapbox is an awesome alternative with richer visual experiences and a whiter box to play with. For the brave of heart, the services listed above can be built and hosted in-house using OpenStreetMap or other data sets available locally. In full disclosure, HyperTrack uses all three for different purposes. We love each of them for what we use them for.

Now, let’s talk about what maps don’t do well or don’t do at all. The first step to building out live location features is to generate location data. Turns out, you go to maps with a set of locations but you are on your own to generate them in the first place.

Tracking miles for the day is not as useful as tracking miles of a sales person for customer visits or tracking miles of a cab ride to bill the customer for it. Tracking real-time location of a user is not as useful as tracking the order, or visit, or pickup, or drop-off – especially if running late or dealing with the unexpected. Tracking current location of a number of service professionals in an area is not as useful as finding the nearest available one who is eligible to service the job request. Tracking live location of friend is not as useful as knowing how far they are from getting to where you are or a mutually agreed location for the meet up. Context is everything. Location data and maps need to work for the business rather than the other way around. Business context must be an essential part of the architecture of your location stack and not an after-thought.

This way, data is generated in the context of business actions (e.g. visits, rides, orders, pickups, drop-offs, jobs, meet-ups) and maps are used in the context of the same actions. Data is then queried, analyzed and visualized in the context of business actions. It is critical to connect up location data and maps with business workflows as part of the software design. This makes the data feature-ready for your application and enables developers to quickly build simple and useful features for your business.

Besides data, it gets important to manage the costs in terms of the business actions as well. Both, device-to-cloud location libraries and maps libraries charge per API call or technology interaction. They offer per device pricing at best. The responsibility to comprehend and manage the cost per business action is left to the developer. This may lead to developers cutting corners in using the technologies right, or use it in ways that comes back to bite them (or someone else in the organization) in unpredictable ways in the future.

HyperTrack has built infrastructure on three layers – device, cloud and maps. The device stack sits on top of the goodness that the OS powers and is sure to stay current with the latest and greatest. The maps stack sits on top of the goodness that maps power and is sure to stay current as well. It all comes together packaged as actions in the cloud. Actions map cleanly with business workflows. Each use case – order tracking, live location sharing, mileage tracking, location-based assignments, user profiling – is a few lines of code using actions. That way, individual developers can independently build features with all the control and none of the hassle.

To keep things simple and transparent, the HyperTrack pricing maps cleanly with business actions so customers retain control of cost regardless of number of features, amount of data, number of API calls with device or maps, and length of tracking. Go ahead and give it a spin.|||

