When people talk about SQL JOIN, they often use Venn Diagrams to illustrate inclusion and exclusion of the two joined sets:

While these Venn diagrams are certainly useful to understand (and remember) SQL JOIN syntax, they’re not entirely accurate, because SQL JOIN is a special type of a cartesian product, the CROSS JOIN.

In a cartesian product between two sets A and B, the result is the multiplication of each set, meaning that each element is combined with each element to form a set of tuples .

Ordinary SQL JOINs do precisely this. When you join BOOK to AUTHOR, you will probably get a combination of every with each , such that for each combination , the author actually wrote the book.

The true meaning of Venn diagrams is much better described by the operations

In the following sections, we’ll see that these operations match exactly the semantics of operations that can be illustrated by Venn diagrams, even if you will be able to “abuse” operations to achieve the same result.

The operation is the most well-known among these set operations. It is often also referred to as “concatenation” of two sets of tuples, where the result is the concatenation of a set to a set .

In the following example, we’ll see that we might be interested in all the different people from our database, given their first and last names, regardless if they’re or :

The original Venn diagrams used to model the “same” concept, although the two things are not strictly same. Consider the following query, which we’ll run against the Sakila database:

The result looks like:

Now, run the following “equivalent” query:

The result will again yield:

This only works because we’re using the clause, which not every database supports natively. If we did our JOIN with the more commonly used ON clause, we’d have to write the more tedious:

In this case, most people probably default to using already, as it is a much better known operation than .

All of jOOQ’s currently supported RDBMS support and (the latter doesn’t remove duplicates).

In the following, we’ll see that equivalent comparisons can be made with other set operations:

The operation is really useful when you want to keep only those tuples that are present in both sets that are combined using :

As you can see, we may want to retain only those customers that are also actors. Let’s run this query:

One of our customers is also an actor. The same query could have been written with an as such:

… or with the syntax

This time, no is needed, as retains only those tuples from the cartesian product, which are present on “both sides” of the , so we can pick any of the tables to prefix our columns.

You may even decide to use a semi-join instead, which would yield the same results:

or, using the more verbose, yet equivalent predicate:

All of the above, again, yield:

The operation is useful when you want to keep only those tuples that are present in one set, but not in another:

According to the original Venn diagrams, this can be tweaked using and a predicate:

or with an clause:

This is completely unreadable and doesn’t communicate the fact that we’re removing tuples from a set , given their presence in another set .

An equivalent version using anti-join might be more readable (watch out for in predicates, though!):

, , and are very simple, yet very useful operations that can add a lot of value every now and then in your daily SQL tasks. While operations are much more versatile, they are also more complex for the simple tasks that can be solved by , , and

Did you like this article? It’s part of the Data Geekery SQL Training – a 1-day workshop helping you to get the most out of the awesome SQL language.

Read more articles about awesome SQL here:|||

When people talk about SQL JOIN, they often use Venn Diagrams to illustrate inclusion and exclusion of the two joined sets: While these Venn diagrams are certainly useful to understand (and remember) SQL JOIN syntax, they're not entirely accurate, because SQL JOIN is a special type of a cartesian product, the CROSS JOIN. In a…