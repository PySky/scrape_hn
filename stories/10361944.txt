Channels are queues, you can things onto them and things off, in a first-in-first-out way. Channels can be closed, after which, they will not receive or deliver values. and are both asynchronous actions, and return promises. promises simply resolve to if it was able to successfully add its value to the channel, or if the channel is closed. promises resolve either to whatever was next in the channel queue, or to the constant if the channel is closed. For example:

The strategy with which a channel handles an excess of s is implemented as a . The default channel does not allow for any buffered values, so if you without a waiting for the value, it will not resolve the until a corresponding is added. For example:

An example of a different buffer would be a "fixed" buffer, which has N slots for values to wait for a . For example:

The other included buffers are, "dropping", which allows N puts, then begins "dropping" them, causing the put to resolve successfully but the value is not added to the channel, and "sliding", which allows N puts, then begins shifting the buffer, dropping the oldest buffered value and adding the newest to the other end.

Of course, you may need to filter or modify values as they are put onto the channel. Transducers are the best option here, and are fully supported using Ramda, Transducers, etc.

Things get much more interesting though when we use async/await to better coordinate our channels.

So we have a number being generated every second, and put onto the channel. This is consumed and tested for "oddness", and if it passes, then it is put onto the channel where it is simply console.log'ed.

What if we want to keep track of the percent odd vs. even? We can put a bit of local state in the process that checks for oddness. However, mutating state sucks, so, we use the function to both act as a loop and manage state immutably!

And now we see that, indeed, our universe isn't broken and over time our cumalitive chance of an odd number closes in on 50%.

We can even take our function one step further, and use , since that is exactly what we are doing.

So we just change the signature a bit, and our local "repeat" state is passed as the second argument instead of the first.

More documentation is coming, but the core functionality is ~160LOC, so it should just take a single cup of coffee to read through. I wanted to be sure that the API was built deliberately, and not just a port from some previous effort.

Creates a channel. All arguments are optional. numOfBuffer - Any number or buffer. A number is a shortcut for . xducer - a transducer to process/filter values with.

Puts a value onto a channel. Returned promise resolves to true if successful, or false if the channel is closed.

Takes a value from a channel. Returned Promise resolves to taken value or CLOSED constant if the channel is closed.

Creates a promise that will resolve successfully after milliseconds.

A constant, which all takes on a closed channel receive instead of a value.

Makes a new channel, same as the old channel.

can be a channel to take from, a promise to resolve, or an array to put data onto a channel, like .

If none of them have a pending value, it will resolve with whichever channel receives a value next. If one of the channels has a pending value already, it will simply resolve to that. If more than one channel has a pending value, it selects one in a non-deterministic fashion.

Always resolves with a double of .

All non-winning actions will be canceled so that their data does not go missing.

I don't love loops, so I use this instead.

As a bonus, you can track state without mutations! Return a value other than false, and it will be available as the argument to your callback async function. Pass in a value as the second argument to repeat.

This is jsut like above, except that before it repeats, it waits for a successful on the given channel. Then it passes this taken value in as the first argument, with any local state being passed as the second argument.

See the ping/pong example above to see this in action.

Creates a new channel that will receive all puts to the received channels.

No buffer space. The default choice for when first argument to is falsy.

Buffer has space of . Any extra s are parked.

Buffer simply slides across pending puts as a window of width. So, oldest puts are dropped as new ones are added.

Buffer drops, and resolves, any extra puts beyond .|||

medium - A functional CSP library using ES7 async/await keywords