This post is going to be an introduction to Angular 2 language, which is Google’s new baby and beloved one by most of the developers around the world.

In this post, a classic “Hello World” application will be done from beginning to end. Which means, we are going to start with setting up the environment together.

And then write our first application.

Hang on tight, this is going to be a long tutorial!

We need to be aware of some introduction information about Angular 2.

Angular is newly assigned name to Angular 2, it is not being called as AngularJS 2.

Here is the note from Docs:

So we can say that, while 1.x versioned applications are going to be called as AngularJS apps, the 2.x versioned applications are going to be called as Angular apps.

Unlike AngularJS, Angular is using TypeScript which is a primary language for developing Angular applications.

The TypeScript is a superset of JavaScript which is migrated to TypeScript and code written in TypeScript makes less prone to runtime errors.

To setup development environment, follow the below steps:

This is  a TypeScript configuration file for your project to guide the compiler as it generated JavaScript files. Because browsers can’t execute TypeScript directly. Typescript must be “transpiled” into JavaScript using the tsc compiler, which requires some configuration.

For more information about tsconfig.json, see here.

Many JavaScript libraries, such as jQuery, the Jasmine testing library, and Angular, extend the JavaScript environment with features and syntax that the TypeScript compiler doesn’t recognize natively. When the compiler doesn’t recognize something, it throws an error.

Let’s take a look at the headers we added in our typings.json.

es6-shim: Provides compatibility shims so that legacy JavaScript engines behave as closely as possible to ECMAScript 6 (Harmony).

It is highly recommended to add this header always into your typings.json file.

jasmine: It is the typing for Jasmine test framework.

There are some other headers too. I suggest you to take a look at them.

The package.json will contain the packages that our apps require. These packages are installed and maintained with npm (Node Package Manager).

Node.js and npm are essential to Angular development.(2)

Get them now if they’re not already installed on your machine.

Verify that you are running node v4.x.x or higher and npm 3.x.x or higher by running the commands node -v and npm -v in a terminal/console window. Older versions produce errors.

Consider using nvm for managing multiple versions of node and npm. You may need nvm if you already have projects running on your machine that use other versions of node and npm.

After running the above code block in your command line, you will recognize that there are newly generated files in your project file.

A component is the fundamental concept of Angular. A component is a class that controls a view template – a part of a web page where information to the user is displayed and user feedback is responded. Components are required to build Angular apps.

Right now, our project structure is similar to below screenshot.

Or, you can simply create new folder from your IDE.

Now, it is important for you to follow a project structure. I would suggest you to create a “ts” directory under your “app” directory. This directory will contain TypeScript files, which we will be playing with %90 of our time.

Hang on, very small part left, keep reading!!

Now, create a file called environment_app.component.ts in your app/ folder with the below code:

Let’s try to understand the lines.

We are importing angular2/core from the built-in library of angular. We can see these files under the node_modules directory if we want.

Component decorator allows you to mark a class as an Angular component and provide additional metadata that determines how the component should be processed, instantiated and used at runtime.

Components are the most basic building block of an UI in an Angular application. An Angular application is a tree of Angular components. Angular components are a subset of directives. Unlike directives, components always have a template and only one component can be instantiated per an element in a template.

We can put lots of properties under @Component tag. I would suggest you to take a look at here for more information on this:

But in our case, selector is working as CSS selector that identifies this component in a template.

And template – inline-defined template for the view

The export specifies that this component will be available outside the file.

Actually, this is the first file that encounters with compiler when you first hit run.

We need to be sure that we have this main file if we want to run our application.

Angular will launch the app in the browser with our component and places it in a specific location on index.html.

The above command runs two parallel node processes as listed below:

Congrats, you have your first fancy web page that runs Angular 2!|||

This tutorial examines building "Hello World" application example from the beginning of setting up Angular2 environment.