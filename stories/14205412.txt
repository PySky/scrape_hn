Whenever we want to compute x^n (x raised to n) in a standard (x*x*x…x n-times) iterative/recursive manner, one of the two problems may occur when n is reasonably large:

1. Timeout: Due to large number of multiplications.

2. Garbage Output: Due to exceeding the range of native datatypes (int, long etc.) of the programming language.

For example: Computing 2¹⁰¹⁸ via the following code would fail:

Note that above basic approach (or equivalent iterative one) has:

Time Complexity: O(n)

Space Complexity: O(n) (due to function stack of n recursive calls, O(1) for iterative)

We can solve it by reducing time complexity via binary exponentiation, this will reduce Time Complexity from O(n) to O(logn).

While calculating x^n, this approach relies on whether n is even or odd:

If n is even: x^n can be written as: (x²)^n/2 ( 3⁸ equals (3²)⁴)

If n is odd: x^n can be written as: x*(x^n-1) ( 2⁹ equals (2*2⁸))

and then n-1 becomes even.

So, now the computation steps (x*x*x…x n-times) is reduced to n/2.

Eg: 2¹⁰ => (2²)⁵ => 4⁵ => 4*(4⁴) => .. and so on.

Often large-exponents are needed, especially in cryptography. Data-type size limit issues can be solved via modular exponentiation.

In addition to (1.), We can solve (2.) by modifying the above binary exponentiation approach to modular + binary exponentiation.

In this way, you can handle large exponents in code via Modular (& binary) exponentiation.|||

Learn to handle large exponents in code using less computation time and space.