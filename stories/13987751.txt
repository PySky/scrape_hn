This repository hosts — a library that provides a Scala domain-specific language for declarative concurrency. is a framework-in-planning that will build upon to enable creating concurrent applications declaratively.

is based on the chemical machine paradigm, known in the academic world as Join Calculus (JC). JC has the same expressive power as CSP (Communicating Sequential Processes) and the Actor model, but is easier to use. (See also Conceptual overview of concurrency.)

The initial code of was based on previous work by Jiansen He (2011) and Philipp Haller (2008), as well as on Join Calculus prototypes in Objective-C/iOS and Java/Android (2012).

The current implementation is tested under Oracle JDK 8 with Scala and .

This talk was given at Scalæ by the Bay 2016. See also these talk slides revised for the current syntax.

This is a complete runnable example. The logic of "dining philosophers" is implemented in a completely declarative and straightforward code.

The library is in alpha pre-release, with very few API changes envisioned for the future.

The semantics of the chemical machine (restricted to single-host, multicore computations) is fully implemented and tested on many nontrivial examples.

The library JAR is published to Maven Central.

Extensive tutorial and usage documentation is available.

Unit tests include examples such as concurrent counters, parallel “or”, concurrent merge-sort, and “dining philosophers”. Test coverage is 100% according to codecov.io.

Performance benchmarks indicate that can schedule about 10,000 reactions per second per CPU core, and the performance bottleneck is in submitting jobs to threads (a distant second bottleneck is pattern-matching in the internals of the library).

The tests will print some error messages and exception stack traces - this is normal, as long as all tests pass.

Some tests are timed and will fail on a slow machine.

To build the benchmark application as a self-contained JAR, run

Then run it as

This will create the file in the current directory. Open that file with (Oracle's "Java Mission Control" tool) to inspect Code and then the "Hot Methods" (places where most time is spent).

is published to Maven Central. To pull the dependency, add this to your at the appropriate place:

To use the chemical machine DSL, add in your Scala sources.

See the "hello, world" project for an example.

This will prepare JAR assemblies as well as their Scaladoc documentation packages.

The main library is in the JAR assembly ( ). User code should depend on that JAR only.

This drawing is by Robert Boyle, who was one of the founders of the science of chemistry. In 1661 he published a treatise titled “The Sceptical Chymyst”, from which the framework borrows its name.|||

chymyst-core - Declarative concurrency in Scala - The implementation of the chemical machine