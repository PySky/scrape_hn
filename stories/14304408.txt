Password management should be simple and follow Unix philosophy. With , each password lives inside of a encrypted file whose filename is the title of the website or resource that requires the password. These encrypted files may be organized into meaningful folder hierarchies, copied from computer to computer, and, in general, manipulated using standard command line file management utilities.

makes managing these individual password files extremely easy. All passwords live in , and provides some nice commands for adding, editing, generating, and retrieving passwords. It is a very short and simple shell script. It's capable of temporarily putting passwords on your clipboard and tracking password changes using .

You can edit the password store using ordinary unix shell commands alongside the command. There are no funky file formats or new paradigms to learn. There is bash completion so that you can simply hit tab to fill in names and commands, as well as completion for zsh and fish available in the completion folder. The very active community has produced many impressive clients and GUIs for other platforms as well as extensions for itself.

The command is extensively documented in its man page.

We can list all the existing passwords in the store:

And we can show passwords too:

Or copy them to the clipboard:

There will be a nice password input dialog using the standard (which can be configured to stay authenticated for several minutes), since all passwords are encrypted.

We can add existing passwords to the store with :

This also handles multiline passwords or other data with or , and passwords can be edited in your default text editor using .

The utility can new passwords using the venerable utility internally:

It's possible to generate passwords with no symbols using or , and we can copy it to the clipboard instead of displaying it at the console using or .

And of course, passwords can be removed:

If the password store is a git repository, since each manipulation creates a git commit, you can synchronize the password store using and , which call or on the store.

You can read more examples and more features in the man page.

To begin, there is a single command to initialize the password store:

Here, is the ID of my GPG key. You can use your standard GPG key or use an alternative one especially for the password store as shown above. Multiple GPG keys can be specified, for using pass in a team setting, and different folders can have different GPG keys, by using .

We can additionally initialize the password store as a git repository:

If a git repository is initialized, creates a git commit each time the password store is manipulated.

There is a more detailed initialization example in the man page.

The password store is available through the Homebrew package manager:

You may browse the git repository or clone the repo:

All releases are tagged, and the tags are signed with 0xA5DE03AE.

The password store does not impose any particular schema or type of organization of your data, as it is simply a flat text file, which can contain arbitrary data. Though the most common case is storing a single password per entry, some power users find they would like to store more than just their password inside the password store, and additionally store answers to secret questions, website URLs, and other sensitive information or metadata. Since the password store does not impose a scheme of it's own, you can choose your own organization. There are many possibilities.

One approach is to use the multi-line functionality of pass ( or in ), and store the password itself on the first line of the file, and the additional information on subsequent lines. For example, might look like this:

This is the preferred organzational scheme used by the author. The / options will only copy the first line of such a file to the clipboard, thereby making it easy to fetch the password for login forms, while retaining additional information in the same file.

Another approach is to use folders, and store each piece of data inside a file in that folder. For example would hold bookreader's password inside the directory, and would hold a secret question, and would hold something else related to bookreader's account. And yet another approach might be to store the password in and the additional data in . And even another approach might be use multiline, as outlined above, but put the URL template in the filename instead of inside the file.

The point is, the possibilities here are extremely numerous, and there are many other organizational schemes not mentioned above; you have the freedom of choosing the one that fits your workflow best.

In order to faciliate the large variety of uses users come up with, supports extensions. Extensions installed to (or some distro-specific variety of such) are always enabled. Extensions installed to are enabled if the environment variable is Read the man page for more details.

The community has produced many such extensions:

The community has assembled an impressive list of clients and GUIs for various platforms:

To free password data from the clutches of other (bloated) password managers, various users have come up with different password store organizations that work best for them. Some users have contributed scripts to help import passwords from other programs:

was written by Jason A. Donenfeld of zx2c4.com and is licensed under the GPLv2+.

This is a very active project with a healthy dose of contributors. The best way to contribute to the password store is to join the mailing list and send git formatted patches. You may also join the discussion in on Freenode.|||

Pass is the standard unix password manager, a lightweight password manager that uses GPG and Git for Linux, BSD, and Mac OS X.