Inspired by Kubernetes DNS, Kubernetes' cluster-internal DNS server, ExternalDNS makes Kubernetes resources discoverable via public DNS servers. Like KubeDNS, it retrieves a list of resources (Services, Ingresses, etc.) from the Kubernetes API to determine a desired list of DNS records. Unlike KubeDNS, however, it's not a DNS server itself, but merely configures other DNS providers accordingly—e.g. AWS Route 53 or Google CloudDNS.

In a broader sense, ExternalDNS allows you to control DNS records dynamically via Kubernetes resources in a DNS provider-agnostic way.

The FAQ contains additional information and addresses several questions about key concepts of ExternalDNS.

ExternalDNS' current release is . This version allows you to keep selected zones (via ) in Google's CloudDNS or AWS' Route 53 synchronized with Ingresses and Services of in your cluster.

From this release, ExternalDNS can become aware of the records it is managing (enabled via ), therefore ExternalDNS can safely manage non-empty hosted zones. We strongly encourage you to use with enabled and set to a unique value that doesn't change for the lifetime of your cluster. You might also want to run ExternalDNS in a dry run mode ( flag) to see the changes to be submitted to your DNS Provider API.

Make sure you have the following prerequisites:

Next, run an application and expose it via a Kubernetes Service:

Annotate the Service with your desired external DNS name. Make sure to change to your domain.

This should output the DNS records it will modify to match the managed zone with the DNS records you desire. Note TXT records having value embedded. Those are used to ensure that ExternalDNS is aware of the records it manages.

Once you're satisfied with the result, you can run ExternalDNS like you would run it in your cluster: as a control loop, and not in dry-run mode:

Check that ExternalDNS has created the desired DNS record for your Service and that it points to its load balancer's IP. Then try to resolve it:

Now you can experiment and watch how ExternalDNS makes sure that your DNS records are configured as desired. Here are a couple of things you can try out:

The tutorials section contains examples, including Ingress resources, and shows you how to set up ExternalDNS in different environments such as other cloud providers and alternative Ingress controllers.

ExternalDNS was built with extensibility in mind. Adding and experimenting with new DNS providers and sources of desired DNS records should be as easy as possible. It should also be possible to modify how ExternalDNS behaves—e.g. whether it should add records but never delete them.

Here's a rough outline on what is to come (subject to change):

Have a look at the milestones to get an idea of where we currently stand.

We encourage you to get involved with ExternalDNS, as users as well as contributors. Read the contributing guidelines and have a look at the contributing docs to learn about building the project, the project structure, and the purpose of each package.

Feel free to reach out to us on the Kubernetes slack in the #sig-network channel.

ExternalDNS is an effort to unify the following similar projects in order to bring the Kubernetes community an easy and predictable way of managing DNS records across cloud providers based on their Kubernetes resources:

This is a Kubernetes Incubator project. The project was established 2017-Feb-9 (initial announcement here). The incubator team for the project is:

For more information about sig-network, such as meeting times and agenda, check out the community site.

Participation in the Kubernetes community is governed by the Kubernetes Code of Conduct.|||

external-dns - Configure external DNS servers (AWS Route53, Google CloudDNS and others) for Kubernetes Ingresses and Services