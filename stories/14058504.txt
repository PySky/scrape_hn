Today I was working on a php development environment using docker on MacOSX (you might run into the same problems on windows, too!). The osxfs in Docker for Mac is painfully slow and the company behind docker is actually aware of that. At #77 they track the issue at docker-for-mac right now. At the time of writing the ticket is still open.

If you happen to use symfony as PHP framework or in particular composer as package manager for php projects, you end up with a very big directory called .

In symfony standard edition I am counting 10259 files and folders.

For this blog post I put a vanilla symfony 3.2.7 project at DracoBlue/symfony-composer-docker-performance-test. With this commit I added a and a to run on and on .

If you run a quick benchmark against app_dev.php:

you end up with response times for a vanilla symfony project of round about 319ms.

looks better (86ms), but is not very convenient for development.

Let's tune this with a simple trick down to 46ms (-85%) for app_dev.php and down to 9ms (-88%) for app.php.

Given that in case of the container the directory can be considered readonly, why might solve it with an always up to date in-docker data volume for just the vendor directory.

Now I ran the benchmarks again. First in dev mode with app_dev.php:

Down from 319ms/request to 46ms/request!

Down from 86ms/request to 9ms/request!

The is mounted from the host system (e.g. by docker with osxfs) into php-cli and the php-fpm container.

The relevant filesystem looks like this:

After the modification, the subfolder is over-mounted as docker volume (with no reference to the host). This way the data volume is docker only and very fast.

But at the beginning the vendor folder is empty:

By adding an additional lsyncd container with:

to inherit the volumes from for the container sets up a sync from to .

We have now this setup:

Whenever a file is changed on the host in the vendor folder, the lsyncd will sync the files from to . I tested this on my local box and had a lag of max. 1 second.

To end up with this solution, I read lots of posts in dockers forum, blogs or on stackoverflow. Additionally I tried most of the existing solutions. That's why I want to share them here, so you might have a starting point of the lsyncd' volume is not sufficient for your usecase.

With Version 17.04.0-ce (currently in edge, not yet stable! Thanks to eyeohno for the info) there will be a cached flag for volumes. See 17.04.0-ce release notes for further information.

So you can use:

Results on the same hardware (app_dev.php):

So we end up with stats like these:

That looks like a decent performance boost from 321ms/req to 84ms/req with ! Even though my lsyncd ad-hoc container is still slightly faster, it might be an option to go for once 17.04.0-ce is released stable.|||

Today I was working on a php development environment using docker on MacOSX (you might run into the same problems on windows, too!). Theosxfsin Docker for Mac is painfully slow and the company behind docker isactually aware of that. At#77 they track th...