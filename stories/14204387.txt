In Golang, is an interesting value. You may be familiar with Go’s philosophy of making the “zero value” meaningful.

Uninitialized variables and fields are set to the zero value. For example, if you have a uninitialized variable of an integer type, its value will always default to 0. An uninitialized string will be the empty string. Likewise, the zero value for a pointer is .

pointers works the way you would expect. Trying to access a nil pointer is an error. When comparing values, a pointer . This matches the way things work in pretty much any language with or values. So far things seem sane. However, a pointer is not the only type of value that can be in Go. Most kinds of values that involve a pointer under the hood can also be .

Go sometimes makes clever use of the values. For example, a slice will work when passed to the function. Appending to a slice works, too.

works on maps, too. Testing if the map contains keys works. Of course, it always returns false, but it works. Sadly, assigning to a map doesn’t. At least the error message explains the problem:

Channels can also be . Here we start to see some sources of real bugs. Writing to and reading from a channel blocks forever. In those cute examples, there is only one goroutine so you do get a useful message: , but larger programs might appear to continue working.

Remember when I said that a pointer ? That’s true for pointers. It’s also true for all the other types I mentioned. But the really devious thing is that it is not always true.

In addition to pointers and structure and maps and slices, Go has a concept called an interface. An variable of an interface type (including the all-encompassing empty interface: ) can hold any value that implements that interface. All values implement the empty interface, because there is nothing that they need to implement. When you cast a value to an interface, it looks like you have the same value.

An interface is actually a fat pointer. It stores a pointer to the value, plus information about the type it points to. As it turns out, the information about the type is actually just another pointer. This is where things get interesting. What if one pointer is but not the other? As far as I know, it is impossible to construct an interface value where the type pointer is but the data pointer isn’t. This leaves two options: either both pointers are , or just the data pointer is. These values are not the same.

Assuming you haven’t already clicked the link above, what do you think this prints? True in both cases, right? Well, since I phrased it that way, you know something tricky is going on, and you are right:

This is dangerous. You can check for and then get when you try to call a method on . To make matters worse, both values print out as !

Although awkward, there are ways around this. It is possible to construct another value that will compare as equal to that: (this creates a pointer to , then casts it to ). It’s also possible to check for either kind of using reflection.

If you are feeling adventurous, you can inspect the difference between the two values with .

and compile it with . The “-gcflags ‘-N’” argument prevents the compiler from optimizing away the variables we want to look at.

Here we have proof that in one case, both pointers are and in the other, just the data pointer is.|||

