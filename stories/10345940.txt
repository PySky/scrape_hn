This is the piece of the site we want to get in the face of humans immediately. That’s not just limited to blogs or other content distribution sites, web apps should also strive to serve the content above the fold as fast as possible to their users, and inlining critical CSS is an excellent way of shaving milliseconds from your load time.

First off, we have to identify the critical content of a page. In my case, what’s visible below constitutes the critical content, also known as the content that’s “above the fold”.

Now that we’ve identified the critical content of a page we can move onto the next step: identifying the bare minimum set of CSS rules that allow visible content to be rendered exactly as seen on the screenshot. There’s tools that can help automate that away (as we’ll see in a minute), so let’s move on. What’s next?

Well, once the critical CSS has been identified, it should be placed inline inside a tag, as shown below (see also the source code for this web page).

What we just did means that the top of the muffin would be immediately readable to the user, without any extra request being made for a CSS file. That means that, unlike in the traditional approach on blocking on that extra CSS request before rendering any content, the content is displayed immediately. Problem is, if you haven’t removed the tag pointing to the rest of your CSS, it’s still as slow as ever. If you did remove it, the rest of the page would be unstyled. To fix this, we simply defer loading of the tag for later.

That’s it! Let’s recap the steps we should be taking.

There’s a few ingredients we’ll need to make that recipe work.

With Node.js installed and a ready, head over to the command-line, jump into your project directory, and enter the following command to install and . The flag is an alias for , is short for .

With both those dependencies in your project, we can now get started. Let’s also add a script entry to our . I typically place my build scripts inside a directory, and name them by environment. I usually also have smaller scripts that I reuse across environments.

With that out of the way, we can now create our script. Remember to make it executable so your OS won’t complain!

Okay, okay. Finally we get to business, let’s look at the snippet below. Note how I’m calling with the custom script and passing in the parameters that requires, namely an endpoint where they can visit your app, and a CSS file to analyze. Your app has to be running, naturally. Once that’s done we save the critical CSS into a file. I usually place files generated during builds into a directory, but you can place them where you want.

Note that you probably want to automate the server starting and stopping. To do that, you could start the server as a background job before using , and kill it afterwards using some insults with – which kills the last backgrounded job.

If you think is a lousy way of waiting for the app to begin listening, you could use the following loop to replace it – in unix systems. It checks whether an app is listening on the provided TCP every , and continues when it finds a listening process. If you wanted to do the same in Windows systems, check out the code for .

Now that you have the minified critical CSS for your homepage safely stored in a file, you could add it to your layout. Let’s assume you have Mustache templates for your views.

What about the rest of the styles? You can defer them with a snippet like the one below. The hack forces the styles to be loaded asynchronously and prevents render-blocking.

By critical content we’re talking about the content that’s immediately visible when your page loads. The content usually depends on which page you’re looking at, but the CSS and layout isn’t that different across pages if we’ve architected it properly, in such a way that it’s made out of small reusable components that make up the CSS for the entire site.

Nevertheless, we have to draw the line somewhere. Critical CSS rules seldom vary across different endpoints for the same route in a web app, – all of my articles share the vast majority of their CSS rules. For example, and both have the navigation bar, the article’s title, an introduction, an ad, and then the article. However, compare that to my home page.

The home page is radically different, featuring a column layout and whatnot, and attempting to identify critical CSS for both of these pages at the same time would be kind of a moot point. If you went that road you’d eventually end up inlining the CSS for your entire site! In order to address that, I’ve found routes to be a good parameter. I’ve identified a few key areas in my site, and adjusted my script to build multiple critical CSS files, one for each key component in the site. The Bash function below gathers critical CSS from a given endpoint in my app and saves it into a file named by the component that endpoint represents.

Next, I picked a few components in my site: the landing page, the login page, any article, the history, search, and the 404 page. I gather critical CSS for each of those and places that in different files.

My server then decides what component it’s rendering, and inlines the CSS for that component. If the component doesn’t exist, then CSS blocks rendering. This is useful for those cases where you don’t want to go through the trouble of inlining CSS since it’s not worth it for you, like when a page is behind authentication and you think most users will have cached your CSS by then. The code below inlines critical CSS, defers the rest, and provides a fallback through a tag.

If no critical CSS is available for our component, then we fall back to the blocking tag.

We just saved humans visiting our site from having to download all of our CSS before being able to see some content.|||

During the redesign I was faced with a problem and I had to rethink the way I inline CSS in my blog, so I figured it’d be a good time to write about it in more …