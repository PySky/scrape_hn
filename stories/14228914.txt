When I first started learning RxJS, I could instinctively see that observable streams offered all kinds of possibilities in solving many of the problems I encountered day to day in front end web application development. I’d already been using the flux architecture for a while, and had been blown away by the clarity of organisational structure and separation of concerns it brought to my web apps. I’d read that RxJS could do the same, and was keen to learn about how. The elegant handling of HTTP requests seemed like the obvious starting point for this learning journey.

However, I quickly became frustrated at how little information I could find in one place regarding good practices around this topic (error handling in particular), and had to find out most things piecemeal though reading around, a lot of browsing Stackoverflow and Github issue threads, and personal experimentation. This article serves as a catalogue for what I have learned so far.

I’m going to explain some handy ways of doing the following:

I’m going to assume some knowledge of the absolute basics of creating and subscribing to observables, as this is easy to find online, and is where I was at when I started experimenting with RxJS and HTTP requests.

To demonstrate all of these techniques we’ll create a example mini app that consumes github user api. It will enable the user to type a github username in a box and if valid, display their avatar underneath. I’ll use many variations of the app to demonstrate the different ways of using RxJS. To keep things simple the app only uses RxJS, bootstrap and a little bit of jQuery to glue the page together.

Note: the github user api, has a rather pathetic rate limit of 60 requests per hour if used unauthenticated. So if you get too trigger happy with the examples, they might stop working for a bit.

To kick us off, let’s create a text input, and create an observable from its ‘keyup’ event.

Type in the box and hit the search button to see an alert containing the text input value. Notice the extra chained after the observable. This enables us to map the current input value of search input box to our observable, replacing the default event object that would normally be emitted.

OK, we now have an observable we can work with that will emit the user’s input when they hit the search button. To fire off our HTTP request, we’re going to create an observable stream we can subscribe to using our as a source:

Have a go at typing your github username into the box and hitting search, you should see your avatar appear underneath. Be aware that currently, if you search for an invalid user name, it will break the app. Don’t worry about this right now; we’ll sort that out in a bit.

We have chained after our first observable, subscribed tothe resulting observable, and writen some of the received data to the DOM.

We have carried out the request using a standard jQuery get, which we have wrapped in RxJS’ helpful to turn it into an observable.

Take a look at the use of `flatMap` in the example. I must admit, when I first looked at a few examples of this kind of thing, it confused the hell out of me. At first glance it looks like we should just be able to call like we did for the click event, after all, we’ve already converted the promise into an observable by calling right?

In actual fact, what returns is an observable stream of promises, not a stream of the objects that the promise would emit when it resolves. allows us to flatten all of those promise resolutions into a single observable stream, and when we subscribe to it, we get just the response object that jQuery would originally emitted on .

Earlier I mentioned that the app currently breaks if you search for a invalid user name (try searching for some gibberish followed by something perfectly valid). This obviously sucks, and initially, it is not at all obvious why this is happening. To understand why, let’s look at the order of events that takes place as the promise resolves:

This has the unintended side effect of making our search button useless every time we get an error response. This isn’t very good, so how can we deal with this problem?

Here’s the app again, but this time with error handling:

Now, we catch and handle the error before it travels upstream, and replace the observable with an empty completed one that will get flattened in it’s place. For this we use the handy .

Let’s alter the example a bit. Suppose instead of clicking a button to search, we want the user to be able to type into the box, and have their search be carried out as they type. For this we will need to replace the observable with a observable like so:

We now find that because each of our requests are fired in quick succession, we can no longer guarantee that they will complete in the order they were initiated. This could cause our searches to result in a non matching avatar being displayed underneath. This isn’t great, so to solve this problem, we will use .

is a lot like except it will preserve the order of the source emissions, even if the observable it is flattening emits in a different order. For example, if I search for ‘Elle’, and immediately afterwards for ‘Ellen’, and the ‘Ellen’ request happens to complete first, will wait until the ‘Elle’ request has completed, before emitting both results in immediate succession in the order ‘Elle’ ‘Ellen’.

Here’s the code, amended to use ‘concatMap’.

At the moment, our app fires a request every single time the user types a letter into the box. This seems like overkill, given that the user isn’t really interested in seeing a result until they’ve typed at least several letters into the box. Why hammer the server when it add nothing to the user experience? Using RxJS, we can ease this problem with a simple extra function call to ‘debounce’.

In this example, it’s worth looking in the network tab of the console window as you type in the box to see that many fewer requests are sent than in the previous example.

‘Debounce’ accepts a number parameter that represents the number of milliseconds the observable should wait after the previous emission before emitting again. After the time has elapsed, the observable will emit the last emission from within the time period only, ignoring any others. I’ve found this to be very helpful for live text based search features.

Note: if you need it to emit the opposite, i.e. the first emission from within the time period, you can use the method instead.

The above techniques will handle most HTTP request use cases, but there are some other cool things you can do to ease some of the pain that comes from asynchronous request handling:

Sometimes, you’re only interested in the first 1, 2 or n user interactions. For these situations RxJS provides the ‘take’ method. In our search button example, lets say we wanted to only show the first valid result:

Now, the first search performed will work, but anything subsequently typed into the box will be ignored.

Sometimes we want to filter out certain observable emissions based on a condition. To demonstrate, let’s use to make our text search example ignore searches until they are at least 5 characters long:

Sometimes, it is useful to merge more than one observable into a single observable. To demonstrate, let’s use to give our search app two inputs which you can search by typing into either one:

A potential issue with all of the examples above is that when we are in the latter stages of the observable stream, after the request has completed, we’ve lost the reference to the original payload (in this case, our search term text). We can get around this bundling the original payload in with the response payload while we still have access to it via lexical scoping. For example, let’s say we wanted to write the search term to the page again as a part of the function:

One of the best features of RxJS is how easy it is to combine multiple streams into one. To demonstrate, let’s adapt our example to carry out two searches and allow the user to compare the resulting avatars next to each other, but only after both searches have a result:

There are many ways to get the most out of the power of RxJS to handle HTTP requests, and we’ve touched upon a few of these. However, the RxJS API is a complex beast and we’ve only scratched the surface on the many different ways RxJS methods can do cool stuff with HTTP streams. Once you’ve got your head round a few, it’s well worth checking out the docs to experiment with a few more that might help out in more specific use cases.|||

When I first started learning RxJS, I could instinctively see that observable streams offered all kinds of possibilities in solving many of the problems I encountered day to day in front end web…