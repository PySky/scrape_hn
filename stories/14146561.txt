At skyline.ai, we are managing a heavy duty Salesforce operation. We offer our qualified investors access to a proprietary platform site on mobile and web, where they can manage their investment portfolio with skyline and followup on existing and new investments vetted by our technology.

Since the investor relations team is using Salesforce for managing clients and deals, we need a way of accessing Salesforce’s DB from within our own platform, and vice versa (some actions on the platform may trigger changes on Salesforce).

When it was time to look at the “Salesforce” part (marked by a red rectangle), we found that we were not very satisfied with the standard Salesforce REST API.

We found a super awesome project called JSforce which allowed us to do pretty much whatever we wanted with Salesforce from Node.js, which was a perfect fit for our need.

But JSforce in itself is a library, and in order to consume it as a microservice, one needs to wrap in up in some manner. In our case most microservices in the platform site communicate over HTTPS using REST APIs built with Swagger for Node.js over express (read more about swagger here and here).

Why not use Salesforce API directly? Well, there are a couple of benefits to wrapping up Salesforce API with Swagger:

may be used to easily and automatically create a REST API containing CRUD operations covering Salesforce entities. The generator connects to your Salesforce instance (for example, your sandbox environment) using credentials supplied as env vars and proceeds to automatically generate an entire swagger project (controllers, configuration, etc.) over an express.js API server.

You can choose to auto generate controllers for all your Salesforce entities, or you can configure a white or a black list of entities.

Get the project and install it’s dependancies

Build the project (this will run the gulpfile)

Set required env vars — credentials for Salesforce (mandatory) and login URL (this value is optional, the value https://test.salesforce.com should be used in order to connect to sandbox envs). see configuration section for more available config options

Finally, generated your swagger project and run it. The project uses ES6 syntax and therefore needs to be transpiled in order for node to run it (at the time of this post the latest dev version of node still doesn’t support things like ES6 ). By default, the babel configuration will create an output at directory. The output is the generator in ES5 code that node can run. This is the actual generator code that you need to run in order to create the final swagger project. By default the dist node app will create your new swagger project at the directory under .

If you want the generator to only create controllers for specific entities, use a white list. Configure the location of the list as the env var :

If you want the generator to dismiss specific entities and create controllers for the rest, use a black list. Configure the location of the list as the env var :

The list should be a UTF-8 text file where every line contains the name of the entity in lower case. For example, the following list is set to tell the generator to only create a controller for the account entity:|||

At skyline.ai, we are managing a heavy duty Salesforce operation. We offer our qualified investors access to a proprietary platform site on mobile and web, where they can manage their investment…