This tool allows you to time and get summaries of how long async functions took. By default, it assumes you want to measure event loop latency, but as this example shows, you can use it for a simple ping pong setup with Promises too. This code works in both browsers and node.js and will do its best effort to use as accurate a timer as possible.

We use to pick when to run the next test. We do this so we can add in some randomness to avoid aligning our events with some external event (e.g. another timer that triggers a slow event). When we are monitoring event loop latency (i.e. no async function provided), then we simply record how long getting the callback really took. When we measure an async function, we only time how long that async function took to call the passed in .

When used in a browser, this tool disables itself if the page is hidden because of restrictions with how often we can call setTimeout see this.

When monitoring event loop latency, we add in 1ms to all measurements. is not more accurate than 1ms, so this ensures every number is greater than 0. To remove this offset, simply subtract 1 from all stats. TLDR; event loop latency monitoring does NOT have sub-millisecond accuracy, even if the emitted numbers show this.

We also host a copy of the browser event loop latency detector on jsdelivr. To use this, you can include the script in a src tag, or simply load it in Chrome DevTools. You should expect to see the same output as documented above in usage.

Load via in JavaScript (paste in your devtools - e.g. Chrome DevTools):

Load via (if you have loaded on the page already, paste this in Chrome DevTools or in your code):

Note: Remember to change 0.2.1 above to whatever is the latest version of latency-monitor.

We use debug. In node set env variable or in a browser to see debugging output.

This is a reasonable attempt to make a latency monitor. There are issues such as:|||

A generic latency monitor for node/browers