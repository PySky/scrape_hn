Last week, I finally started working on my „Get noticed” project called gifty. If you have absolutely no idea what I’m writing about you can go read my introduction to the project which I link here 😉 Anyway, one of the first things I wanted to do was to create some kind of ServiceBuilder for every microservice, since all of them (or at least majority) will have to go through some steps before they actually run. The steps are:

Now, for that kind of job, using some kind of a builder seems a natural solution (well, at least for me). What is important, is the fact that some steps need to be in the proper order to make the whole builder work. For instance, we can’t subscribe to the commands first and then instantiate the queue because that would cause null reference exception, and so on. One of the most common solutions for that kind of problems is using nested classed which are not accessible rather than via builder. But honestly, I’m not a big fan of nested classes (even though they’re handy in some cases). For my builder, I used interfaces and the „C# mechanism” which I described a few months ago – explicit implementation.If you have never heard about it, please read it since it’s important to understand the later code. Now, just to be clear, I’m not writing that my approach is better than others. It’s just different and for me personally – more clear. Ok, enough writing for now, let’s see the implementation 🙂

The trick is simple. After each phase, we implicitly cast builder to another interface so its methods can be visible for us. That guarantees that we can’t, for instance, subscribe to command if autofac registrations were not specified in the previous phase, and so on. One thing that some of you might spot is that Build method is placed inside IRabbitMqServiceBuilder. Well, that because subscribes methods return their own interfaces which cause circular invoking. That’s why I decided to do this that way. Yet, another solution might be doing some „marker” method for moving to next phase like:|||

