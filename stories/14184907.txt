We all know that C is one of the best languages for many reasons and especially the ANSI C89 standard (old and solid as fuck) but it also has itâ€™s own drawbacks. There are many situtations in software development where inbuilt data structures canâ€™t suit the programerâ€™sÂ needs and in a language like C, where there are not as many options to choose from (without relying on glibc or similar) as you can have in python or javascript, sometimes the solution can getÂ really hard to figure out.



TheÂ data structure covered in this post isÂ called associative array o dictionary (read more), a collection of key â€“ value pairs of data, easy to access and easy to use. Today we will talk aboutÂ a pretty basic implementation of it. Real-world applications should use more complex and performant approaches such as hash tables.

From loading a configuration file to fetchingÂ the enviroment variables; to be able (in pure POSIX compliant ANSI C) to use retrieved key-value pairs accessing itâ€™s value directly with its name might look tricky, but itâ€™s actuallyÂ easier than you may think.

Many programs use config files where data are stored as a list of key-values, HTTP requests are full of key-value information and even C main function is fed (in UNIX systems) with an array of key-value strings as third argument (environment variables). Most of those cases use the same standard, one entry for row (one for each element in the arrays case) with the key and the value separated by a character (usually = or : )

C is a statically typed language, so in order to keep the examples easy to read, we will keepÂ key and value as string (without casting to other types)

We will define a structure to hold our pairs, in this case, as we said, key and value are strings.

 Since we are parsing an unknown number of elements, weÂ also need a list, a list is an array of key values.

We have our basic data structure, letâ€™s parse.

 In this exapmle we are going to parse theÂ environ extern variable, It contains an array with the systemâ€™s enviroment variables, we will use this method to get environment variables instead of the third argument in the main function since this is POSIX compliant, its content looks like this:

So, in order to split this we will have to run throught the array splitting each entry by the delimitier, in this case â€˜=â€™.

To do this, thereâ€™s an ANSI C function, strtokÂ who will do exactly what we want (be careful with this, strtok will modify the original string, in this particular case we donâ€™t care , but in real life, strings passed to strtok should be duplicated beforehand to keep the original source inmutated).

 So, we have to initialize a List element and for each entry in the array, resize the list, split the string by the â€˜=â€™ andÂ store both fragments as key and value in the new keyValue structure, easy ðŸ™‚

Note: In real life dynamic arrays should be managed in a more efficient way (2*n dynamic arrays will have itâ€™s own post soon ðŸ˜€ ), the approach here shown is orientative and will work well but its prone to heap segmentation and long term failures.

Of course, the code above is orientative, itâ€™ll work just fine but errors should be handled and some performance improvements should be made in order to achieve the best result before using it in the wild.

After splitting the strings into pairs we will have a list of key-value pairs, but we need to be able to use them, so letâ€™s write a simple find function that returns the value associated with a given identificator:

With this function we can ask for the key and have its value inÂ return, great, lets code an example:

With this method you now have easy access to configurations or variables ðŸ™‚|||

We all know that C is one of the best languages for many reasons and especially the ANSI C89 standard (old and solid as fuck) but it also has it's own drawbacks. There are many situtations in software development where inbuilt data structures can't suit the programer'sÂ needs and in a language like C, where thereâ€¦