The API follows the data model and every resource is identified with a unique URL.

Usage of HTTP methods other than GET and POST to signify the wanted action : PATCH / PUT / DELETE.

… and specially HTTP “status codes” to summarize the operation’s result.

Of course, 4xx errors can contain a body with additional information.

Use the right vocabulary and avoid smurf APIs.

Hypermedia is one of the principal rules of Fielding’s thesis.

The idea behind this is to find in ReST APIs the same Hypermedia logic we can find in HTML for example. Today, this sums up to the presence of links in the resources allowing us to establish the relationship between that resource and other resources.

Most of the time, the Level 3 of Richardon’s maturity model is presented as the H.A.T.E.A.O.S. acronym : Hypermedia As The Engine Of Application State.

Supposing the following HTTP requests scenario. Does this sound “stateless” to you?

In general, we can compare the stateful and the stateless approaches using the geographic destination metaphor.

Which one of these two instructions sounds more precise?

The client indicates the API version he is willing to use using the  header :

The API returns the data using the right media type and sets the  to that value.

Resource have a unique id field which is named “id” by convention.

Sometimes, a collection resource can contain multiple resources which are slightly different : books and movies.

Given the following resource:

We could create create a collection resource that represents these links.

It’s simply based on the utopy (or the future?) of the Semantic Web. This needs canonicalization standards and an important adoption.

For the moment, there are only few attempts for this and they look more like an HTMLization of ReST APIs. They are associated with familiar names like : Richardson, Amundsen and Foster.

Interesting but quite far away from ReST conventions and the pragmatism we are looking for.

In addition to genericity, readability and ease of use, these best practices allows us to write generic libraries and connectors without even knowing what the API is about.

From the beginning of the conception of our simplest ReST APIs, we have to make lots of important choices and we feel like kids at “Tous R Us”.

Swagger is a framework that helps you define and generate documentation for your ReST APIs.

Postman is a ReST API client which comes handy to analyze, experiment and debug your ReST APIs.

You should definitely try the Chrome extension that allows you to analyze the traffic and replay requests or scenarios.

Best playground ever to create mock ReST APIs.

JSON Generator allows you to easily generate JSON data for your unit tests for example.

Modern and distributed architectures including ReST APIs are exposing us to new security risks.

It’s just the same for some modern authentication and authorization mechanisms where specifications are not strict enough.

OAuth 2 suggests 4 different flows and here is the most common one:

OpenID Connect provides the following additional features:|||

A white paper covering all the best practices and security concerns about ReST APIs.