A simple makefile-based build system for C / C++ programs

Build is a simple build system destined to make it easy to build C or C++ programs without having to write lengthy makefiles or going through the complexity of tools such as or . It is well suited for relatively small programs, although it has been used for at least one much larger program.

To use , you create a . A minimal makefile only needs to specify the name of the , the name of the build , and include the file, which contains the makefile rules:

That's all you need to get started. There is a small sample in this distribution.

Note that the variable requires a trailing . This is a general convention in for variables that denote directories (Rationale: You can leave these variables empty for the current directory).

For consistency across projects, it is recommended to leave in the subdirectory. You can typically add as a submodule in your project using:

In order to get a summary of the available build targets, use .

If you simply type , a default build is launched. This is what you should see if you do that in the directory itself:

The output of the build will be located by default in . There are subdirectories corresponding to the build environment and the build target, so the final product could be for instance under . This is explained below.

The log files will be located by default in , the latest one being called .

You can clean the build products with and force a clean build with .

Use to test the product. The simplest possible test is to simply run the generated program. You can do this by adding a variable to your :

If you run (or ) on the sample makefile found in the distribution directory, you will run the program, after building it if necessary:

As you can see in the sample , it is easy to add tests, simply by adding a rule that ends in . In the sample file, it is called .

The default build is an optimized build similar to what you would achieve by running . It is well optimized, but still retains some debugging capabilities.

If you need more debugging capabilities, you can create a debug build by using . This disables most optimizations, making it easier for the debugger to relate machine code to source code.

If you want to remove all debugging symbols, you can generate a release build by using .

Finally, you can build for profiling using and benchmark the result using . This is still only partially tested and supported.

This list is likely to evolve over time, most notably with support for Valgrind and other debug / analysis tools.

To install the product, use . This often requires super-user privileges.

Several built target modifiers can be used to modify the meaning of a following target. For example, the prefix disables output filtering, so that you can see the complete build commands:

Note that this is not normally necessary, since the build commands are preserved automatically in the build log every time you use .

The build targets can be used also as build modifiers. For example, if you do , you only clean objects since this is the default target. If you want to clean debug objects, use . Similarly, you can do a release install with .

(Note that you can make your default target, see below).

Several environment variables control the behavior of . The variables that can be configured are found at the beginning of . Some of the most useful include:

Often, a project is made of several directories or libraries. In , this is supported with two makefile variables:

Subdirectories are re-built everytime a top-level build is started, whereas libraries are re-built only if they are missing. It is possible to force a re-build of libraries using the or prefix for builds, for example .|||

A simple makefile-based build system that I split from ELFE / XL