One of the most under-appreciated things that makes the Ruby ecosystem awesome is Bundler. It is painless dependency management at its best. It never breaks our builds, updates stuff only when we want it to, and does so in a predictable and consistent way. All of its competitors (with the exception of crates.io and lein, maybe) fall short of doing these basic things.

Rubygems and Bundler also were the biggest winners when it came to the upgrade process. The first thing I did for the upgrade was update the Rails version in the and run and it threw out all the dependency errors that it could find. Next few steps were basically running with the names of the gems which ought to be upgraded.

For us, the major upgrades were and (more on this later).

The next step was running and let Rails do its thing. This step produced the new initializers required by Rails 5 and introduced the binary instead of . This went by smoothly as well, except that I discovered that Rails wasn’t automatically adding stylesheets to the asset pipeline for precompilation. I needed to add the glob for the files to the initializer like so:

And it was all fine again. I confirmed that by first running and then to verify everything was autoloaded as expected.

Since Rails 5 deprecated a considerable chunk of the existing API, removing deprecation warnings became a critical issue as the increased amount of deprecation warnings that were thrown to the were slowing down our test suite. A lot of these warnings were coming from the gems we were using instead of out own app code. To simplify this process, I pieced together a bash oneliner:

It does depend on being installed, but you can easily swap out for it to get the same result.|||

When Rails 5 was finally released, I was right in the middle of my first internship with AdWyze. Since this was a breaking release, Ankur Gupta thought it was a good idea for us to board the upgrade…