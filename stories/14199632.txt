You just have to decide your program name and CLI fragments.

And you are almost done! The output will be like this:

Let's think we have a executable file with the name githubber, in a global path.

And in our program, code will be:

is the completion replier. You must pass the options into that method.

You can use Template Literals to define your completion with a simpler (super easy) API.

Let's make the example above with ES6 TL:

Also you can still use lambda functions to make more complex template literals:

You can use as autocompletion definitions:

Installing, and making your users install the autocompletion feature is very simple.

You can use simply use function.

If you use Bash, it will create a file at and append a loader code to file.

If you use Zsh, it appends a loader code to file.

If you use Fish, it appends a loader code to file.

TL;DR: It does the Manual Install part, basically.

In zsh, you can write these:

In bash, you should write:

In fish, you can write:

Now you have an autocompletion system for your CLI tool.

There are some useful additions for omelette.

You also can be able to listen all fragments by "complete" event.

You also can listen events by its order.

You can create completion tree to more complex autocompletions.

Now you will be able to use your completion as tree.

You can seperate your autocompletion by importing objects from another file:

You can set short name of an executable:

In this example, is long and is shorter examples.

Now, you can try it in your shell.

option generates a function called . ( in this example).

When you run , it will create aliases for your application. ( and in this example).

Then you can start easily.

Windows Azure uses Omelette to support autocompletion in azure-cli.

I need your contributions to make that work better!|||

omelette - Omelette is a simple, template based autocompletion tool for Node projects with super easy API. (For Bash, Zsh and Fish)