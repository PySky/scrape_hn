A password manager that can be used conviniently from the command line. I prefer the command line over the GUI, and the lack of password managers that serve this use case, motivated me to write my own. It also comes with a browser extension in order to conviniently but securely fill out logins on the web.

A package is available from the author's PPA, which can be installed by running following commands (as root):

Make sure you have Python 3, pip and git installed. Then run following command (as root):

When you run most of the commands below, you will be prompted for the passhprase to decrypt/encrypt the credentials with. If the encrypted file doesn't exist yet, it will be created when you store any credentials for the first time. By default, a daemon is spawned and shuts down after 30 minutes of inactivity, so that you don't have to enter your passphrase again when performing multiple actions within that period.

Stores credentials for the given context.

The context can be any unique keyword which you relate to these credentials. But if the credentials are for a website, it is recommended to use the corresponding domain as context, so that the browser extension finds the credentials, see below.

The username is optional, but specifying a username if there is any, allows you to store multiple username/password pairs for the same context. Also, if a username is given, it will be used by the browser extension when filling out web forms.

If password is omitted you will be prompted for the password. Passing the password on the command line is NOT recommeded, except for import scripts, as it will end up in your shell's history.

Same as , but stores a new random secure password and prints it.

Prints the credentials for the given context.

Prints each context (one per line) that any credentials have been stored for. In order to filter the list, just pipe the output to programs like .

Deletes credentials from the encrypted storage. If username is given, only this username and the associated password is removed. If username is omitted, the whole context is wiped.

Moves credentials around within the encrypted storage.

Changing the username for example.com from john to rose:

Adding a username to a password which has been stored without an associated username:

Prompts you for a new passphrase. Existing credentials are re-encrypted using this passphrase.

Forces the daemon to immediately shutdown, if it is running, so that you'd have to enter the passphrase again, from now on.

Optionally, you can create a config file under , in order to override any of the following presets:

If you installed on Debian/Ubuntu from the PPA above, next time you start Chromium or Firefox, the extension should be active. You can also install the extension from the Chrome Web Store. Note that while the browser extension is optional, it cannot be used standalone but requires the command line utility to be installed as well.

The extension adds a button to the browser bar that when clicked, fills out login forms in the active tab, if the document's domain and path (partially) match the context of any stored credentials. If the document's URL is for example, credentials from following contexts are considered, in this order:

The browser extension is intentionally kept simple and doesn't provide functionality to manage credentials. Please use the command line utility therefore.|||

mypass - Command line password manager and Chrome extension