Over the last several years, we’ve seen the rise of fast, ordered, transactional key-value stores such as , , and . These are all very cool projects in their own rights, but perhaps even more notable are the projects built on top of them, such as MyRocks, SQLite4, CockroachDB, and Google’s F1.

To better understand how these work, I’ve been hacking together a basic relational database on a key-value store named voodoo. Interestingly, many of the concepts are applicable to everyday usage of a normal SQL database, especially in understanding query plans and indexes.

A relational database is centered around the concept of a , which is comprised of and . Notably, all tables have a column labeled as a , which is used to uniquely identify each row. In the example table below, is the .

If we had a key value store that implemented the interface:

we could map each row of the above table onto it by setting keys for each primary key, making sure to include the table name:

And in doing so, could set and retrieve rows of our table by primary key.

What would we do if we wanted to look up where ? We have no way to see what keys exist if we just have the above interface. Luckily, all of the aforementioned key-value stores implement an interface that looks more like:

which allows us to traverse the keyspace by prefix. So with some code like:

We could find the key associated with by iterating through all of the keys until we find a matching row (or all matching rows if the column isn’t marked unique). This is known in RDBMS terminology as sequential scan, something you may have seen in the output of a SQL before (probably marked ). Unfortunately, while this strategy will work, it’s not particularly fast. To make this query fast we’ll need what’s known as a , a mapping of all emails to the keys in which they belong, akin to the SQL . This is fairly straightforward, changing our keyspace to look like:

With this change implemented, our pseudo-go-code to look up becomes:

As one might imagine, this indexing does not come for free, as it both takes up more space on disk, and means we have to insert two keys for every one row we want to write in a table.

The same concept we used to create a single-column secondary index applies to the creation of composite indexes - mapping the SQL to keys like .

The above techniques allow a relatively powerful mapping of a simple relational database onto a key-value store, while not holding us back as we pave the way for more complex features ( operations, “real” parsing, executing, and planning, etc.).|||

Over the last several years, we’ve seen the rise of fast, ordered, transactional key-value stores such as leveldb, rocksdb, and lmdb. These are all very cool projects in their own rights, but perhaps even more notable are the projects built on top... | simple made difficult | if err != nil