A Ruby framework for interacting with Amazon Alexa. Designed to work with Sinatra, although can be used with a few other web frameworks.

An example application implementing the gem can be played with here.

Add this line to your application's Gemfile:

Or install it yourself as:

First, you've gotta pass the request from Sinatra to Ralyxa. Add a single route to your Sinatra application, with the following:

Second, you've gotta define your intents. To define a new intent, create a directory called 'intents'. Inside there, create a file:

Third, define your Intent and Utterance on the Alexa Developer portal. You can then test your application in the Service Simulator (either by pushing the Sinatra app somewhere with HTTPS or, more easily, using ngrok to tunnel the application).

There are two kinds of responses you can send to Alexa: s and s. An should ask the user a question, and expect them to reply. A should end the conversation.

When defining intents, you can use the and methods in place of to keep the session open, or close it:

You can persist data to an Alexa session:

If, for some reason, you want to end a session in some other way than with a , you can:

You can start conversations over, which clears the session attributes:

You can use Speech Synthesis Markup Language to directly control Alexa's pronunciation:

You can send cards to the Alexa app. Ralyxa will automatically figure out if you're trying to send a 'Simple' or 'Standard' card type:

intent simple_card card( , ) ask( What do you think of the Simple card I just sent? , simple_card) intent standard_card card( , , ) ask( What do you think of the Standard card I just sent? , standard_card)

After checking out the repo, run to install dependencies. Then, run to run the tests. You can also run for an interactive prompt that will allow you to experiment.

Bug reports and pull requests are welcome on GitHub at https://github.com/sjmog/ralyxa. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the Contributor Covenant code of conduct.

The main areas of focus are:

The gem is available as open source under the terms of the MIT License.|||

ralyxa - A Ruby framework for interacting with Amazon Alexa.