Start by creating a new HTML page called index.html and pulling in Vue from a CDN:

Next, add a tag with an of to the :

This creates a new Vue instance, which is bound to the DOM element via the CSS selector. Vue is now aware of anything that we add to the tag.

We can use the directive to obtain user input.

Try this out.

The value of the input is now bound to the . So, when you update the input, you should see the text update as well. Notice how we used a property called to display the actual

The directive is used for handling events.

Add a new input box along with a button to your HTML page:

Then add the method and the to our Vue instance:

Try it out.

You can also use a shorter version with the . Simply update:

Vue makes handling conditional logic simple with the and directives.

Start by creating a new instance of Vue:

Mount it to the DOM:

Try this out.

is used for rendering lists. Create a new Vue instance for this:

Mount it to the DOM:

Want to grab the index value? Update the like so:

Components are used to encapsulate reusable code. Create new HTML and JS files.

Use to create a new component, which takes two properties - component name and options. The latter is similar to the properties we used in the constructor. Add the following to the JavaScript file above the constructor.

To use this components, add the element. Test this out. Essentially, the value of the template property replaces the element.

If you have more HTML, you can use the HTML5 template tag, which does not render on page load:

Each component has it's own isolated scope, in order for child components to get access to a parent component's data you have to use props.

This component now expects to receive a from it's parent.

You can also add validation to the props like so:

Let's look at another example - a blog post. Update the property:

Add the component to the page:|||

vue-intro - intro to vuejs