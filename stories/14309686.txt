And we know how to apply a function to this value:

Simple enough. Lets extend this by saying that any value can be in a context. For now you can think of a context as a box that you can put a value in:

Now when you apply a function to this value, you'll get different results depending on the context. This is the idea that Functors, Applicatives, Monads, Arrows etc are all based on. The data type defines two related contexts:

In a second we'll see how function application is different when something is a versus a . First let's talk about Functors!

When a value is wrapped in a context, you can't apply a normal function to it:

This is where comes in. is from the street, is hip to contexts. knows how to apply functions to values that are wrapped in a context. For example, suppose you want to apply to . Use :

Bam! shows us how it's done! But how does know how to apply the function?

A is any data type that defines how applies to it. Here's how works:

So we can do this:

And magically applies this function, because is a Functor. It specifies how applies to s and s:

Here's what is happening behind the scenes when we write :

So then you're like, alright , please apply to a ?

Like Morpheus in the Matrix, knows just what to do; you start with , and you end up with ! is zen. Now it makes sense why the data type exists. For example, here's how you work with a database record in a language without :

If returns a post, we will get the title with . If it returns , we will return ! Pretty neat, huh? is the infix version of , so you will often see this instead:

Here's another example: what happens when you apply a function to a list?

Lists are functors too! Here's the definition:

Okay, okay, one last example: what happens when you apply a function to another function?

The result is just another function!

So functions are Functors too!

When you use fmap on a function, you're just doing function composition!

Applicatives take it to the next level. With an applicative, our values are wrapped in a context, just like Functors:

But our functions are wrapped in a context too!

Yeah. Let that sink in. Applicatives don't kid around. defines , which knows how to apply a function wrapped in a context to a value wrapped in a context:

Using can lead to some interesting situations. For example:

Here's something you can do with Applicatives that you can't do with Functors. How do you apply a function that takes two arguments to two wrapped values?

pushes aside. "Big boys can use functions with any number of arguments," it says. "Armed and , I can take any function that expects any number of unwrapped values. Then I pass it all wrapped values, and I get a wrapped value out! AHAHAHAHAH!"

And hey! There's a function called that does the same thing:

How to learn about Monads:

Monads apply a function that returns a wrapped value to a wrapped value. Monads have a function (pronounced "bind") to do this.

Let's see an example. Good ol' is a monad:

Suppose is a function that only works on even numbers:

What if we feed it a wrapped value?

We need to use to shove our wrapped value into the function. Here's a photo of :

Here it is in action with a !

And if you pass in a it's even simpler:

You can also chain these calls:

Cool stuff! So now we know that is a , an , and a .

Now let's mosey on over to another example: the monad:

Specifically three functions. takes no arguments and gets user input:

All three functions take a regular value (or no value) and return a wrapped value. We can chain all of these using !

Haskell also provides us with some syntactical sugar for monads, called notation:

What is the difference between the three?

So, dear friend (I think we are friends by this point), I think we both agree that monads are easy and a SMART IDEA(tm). Now that you've wet your whistle on this guide, why not pull a Mel Gibson and grab the whole bottle. Check out LYAH's section on Monads. There's a lot of things I've glossed over because Miran does a great job going in-depth with this stuff.

This post has been translated into:

If you translate this post, send me an email and I'll add it to this list!

For more monads and pictures, check out three useful monads.|||

Aditya Bhargava's personal blog.