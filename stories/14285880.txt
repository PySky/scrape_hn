Many beginning Python users are wondering with which version of Python they should start. My answer to this question is usually something along the lines “just go with the version your favorite tutorial was written in, and check out the differences later on.”

But what if you are starting a new project and have the choice to pick? I would say there is currently no “right” or “wrong” as long as both Python 2.7.x and Python 3.x support the libraries that you are planning to use. However, it is worthwhile to have a look at the major differences between those two most popular versions of Python to avoid common pitfalls when writing the code for either one of them, or if you are planning to port your project.

Python 3.x introduced some Python 2-incompatible keywords and features that can be imported via the in-built module in Python 2. It is recommended to use imports it if you are planning Python 3.x support for your code. For example, if we want Python 3.x’s integer division behavior in Python 2, we can import it via

More features that can be imported from the module are listed in the table below:

Very trivial, and the change in the print-syntax is probably the most widely known change, but still it is worth mentioning: Python 2’s print statement has been replaced by the function, meaning that we have to wrap the object that we want to print in parantheses.

Python 2 doesn’t have a problem with additional parantheses, but in contrast, Python 3 would raise a if we called the print function the Python 2-way without the parentheses.

Printing “Hello, World” above via Python 2 looked quite “normal”. However, if we have multiple objects inside the parantheses, we will create a tuple, since is a “statement” in Python 2, not a function call.

This change is particularly dangerous if you are porting code, or if you are executing Python 3 code in Python 2, since the change in integer-division behavior can often go unnoticed (it doesn’t raise a ).

 So, I still tend to use a or instead of a in my Python 3 scripts to save the Python 2 guys some trouble (and vice versa, I recommend a in your Python 2 scripts).

Python 2 has ASCII types, separate , but no type.

Now, in Python 3, we finally have Unicode (utf-8) ings, and 2 byte classes: and s.

The usage of is very popular in Python 2.x for creating an iterable object, e.g., in a for-loop or list/set-dictionary-comprehension.

 The behavior was quite similar to a generator (i.e., “lazy evaluation”), but here the xrange-iterable is not exhaustible - meaning, you could iterate over it infinitely.

Thanks to its “lazy-evaluation”, the advantage of the regular is that is generally faster if you have to iterate over it only once (e.g., in a for-loop). However, in contrast to 1-time iterations, it is not recommended if you repeat the iteration multiple times, since the generation happens every time from scratch!

In Python 3, the was implemented like the function so that a dedicated function does not exist anymore ( raises a in Python 3).

Another thing worth mentioning is that got a “new” method in Python 3.x (thanks to Yuchen Ying, who pointed this out). The method can speedup “look-ups” in Python 3.x significantly for integer and Boolean types.

Based on the results above, you see that the execution for the “look up” was about 60,000 faster when it was of an integer type rather than a float. However, since Python 2.x’s or doesn’t have a method, the “look-up speed” wouldn’t be that much different for integers or floats:

Below the “proofs” that the method wasn’t added to Python 2.x yet:

Some people pointed out the speed difference between Python 3’s and Python2’s . Since they are implemented the same way one would expect the same speed. However the difference here just comes from the fact that Python 3 generally tends to run slower than Python 2.

Where Python 2 accepts both notations, the ‘old’ and the ‘new’ syntax, Python 3 chokes (and raises a in turn) if we don’t enclose the exception argument in parentheses:

The proper way to raise an exception in Python 3:

Also the handling of exceptions has slightly changed in Python 3. In Python 3 we have to use the “ ” keyword now

Since ( ) is such a commonly used function (method), this is another syntax change (or rather change in implementation) that is worth mentioning: where you can use both the function and method syntax in Python 2.7.5, the function is all that remains in Python 3 (calling the method raises an ).

Good news is: In Python 3.x for-loop variables don’t leak into the global namespace anymore!

This goes back to a change that was made in Python 3.x and is described in What’s New In Python 3.0 as follows:

“List comprehensions no longer support the syntactic form . Use instead. Also note that list comprehensions have different semantics: they are closer to syntactic sugar for a generator expression inside a constructor, and in particular the loop control variables are no longer leaked into the surrounding scope.”

Another nice change in Python 3 is that a is raised as warning if we try to compare unorderable types.

Fortunately, the function was fixed in Python 3 so that it always stores the user inputs as objects. In order to avoid the dangerous behavior in Python 2 to read in other types than , we have to use instead.

As we have already seen in the section, some functions and methods return iterable objects in Python 3 now - instead of lists in Python 2.

Since we usually iterate over those only once anyway, I think this change makes a lot of sense to save memory. However, it is also possible - in contrast to generators - to iterate over those multiple times if needed, it is only not so efficient.

And for those cases where we really need the -objects, we can simply convert the iterable object into a via the function.

Some more commonly used functions and methods that don’t return lists anymore in Python 3:

Python 3 adopted the now standard way of rounding decimals when it results in a tie (.5) at the last significant digits. Now, in Python 3, decimals are rounded to the nearest even number. Although it’s an inconvenience for code portability, it’s supposedly a better way of rounding compared to rounding up as it avoids the bias towards large numbers. For more information, see the excellent Wikipedia articles and paragraphs:

Here is a list of some good articles concerning Python 2 and 3 that I would recommend as a follow-up.|||

This is the personal website of a data scientist and machine learning enthusiast with a big passion for Python and open source. Born and raised in Germany, now living in East Lansing, Michigan.