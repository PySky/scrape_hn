A few days ago, I needed to extract a script from a git repository maintained by another team and import it into my own repository.

The first thing I did was to copy paste the script in a new repository and start from here. However, I later realized that I also wanted to keep the changesets of the script from the old repository. To complicate things, the script was also modified in the new one.

For the purpose of this post, let’s call the script I want to import, the new repository I created to hold this script and the repository where it was previously maintained.

The first step was to extract the changesets in the old repository that modified my script. To do so, I first created a new branch to work on.

Then, I used command from git to only extract the commits I was interested in.

Basically, the command will loop over every commit of the current branch and execute the command provided. The command I used will delete all the files whose name is not . Then, thanks to the option, it will remove the empty commits, which are basically the ones that don’t alter .

This has the same result as if you manually checkout all the commits one by one, execute the command and perform a . However, this is much faster and much more powerful.

You can always rollback your changes by doing if your parent branch is . Also, the current branch is backed up under the name . So in this case you could do:

To add a little more fun, the repository contained a submodule. In that case, you first need to unregister the submodule with the following command.

Then, you can remove the submodule folder from all the commits. Because a submodule is not a regular file, it needs to be removed with the command.

The advantage of the is that it doesn’t need to checkout the files before executing the command, making it much faster. However, it is limited to the git commands, that’s why I didn’t use it before. Finally, the flag allows you to remove the backup from the previous run of the command.

If you need to extract a folder instead of a file, there is a very simple way to do so. You just need to run the following command:

After this command, the directory becomes the new root of the repository and all your commits are rewritten to reflect this change.

You can also use the command which is even more straightforward. In fact, the following command will directly create a new branch whose root is the directory.

The command is much more powerful as it allows you to keep the subdirectory in the original repository and merge your changes back and forth. You can read more in the official subtree documentation.

Finally, I need to import the history in our repository. To do so, I will import the old repository content in the new one.

Then I will reapply all the commits of my repository on top of the branch I just imported. I will do that on a new branch called .

Git will recalculate all the diffs between commits. The consequence is that the commit corresponding to the copy pasting of from to should be empty. This can be verified with a .

I can now reset your master branch to your branch and do some cleanup.

This article should give you a glimpse at the power of git. If you want to learn more about git, I recommend you the Pro Git book, especially chapter 7 in which you will learn some advanced tricks. Chapter 10 is also interesting as it explains how git works internally.|||

