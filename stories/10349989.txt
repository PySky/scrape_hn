How do you make a real impression on potential API customers? Use our Bookmarklet system and customers will be stunned.

Ziggeo has invented a new way to demonstrate to customers the effectiveness of its API — customers actually see the technology at work on customers’ own sites — or so they think. Our system simulates what their site would look like if our technology were installed. And sometimes think we’ve messed with their site — it freaks them out.

Ziggeo has developed code to overlay onto a a customer’s website/platform to create a working mockup — a demo in which the API appears to be fully integrated into the customer’s site/platform.

Here are the technical details for creating this working mockup:

Instead of copying the target page, we create a so-called bookmarklet that modifies the page in-place on the client-side.

A bookmarklet is a bookmark that contains javascript instead of a url. When you click on a bookmarklet while being on a website, the javascript is injected into the website and executed in the context of the website.

This javascript code can now load other scripts and files dynamically and modify the page in-place, similar to a single-page app.

There are a couple of caveats that you need to be aware of when developing a bookmarklet:

You need a webserver that can serve additional assets and scripts that you want to load into the host site. This can be an Apache webserver, nginx, some Heroku-hosted thingamajig, a Github page, a Dropbox public page, really any kind of webserver.

Let’s assume for the purpose of this tutorial that the url to your webserver is webserver.com.

Also, let’s call the very first script that we’ll be loading into the host website by the bookmarklet scripts.js, i.e. http://webserver.com/scripts.js will serve up that script. Note that if the host website is using https, your server needs to support https as well, otherwise we might not be able to inject the script.

The bookmarklet code’s objective is to, once injected into the host site, to load an additional javascript. Our code will add a script element to the body in order to load the file.

Since our bookmarklet is like a url (strictly speaking), we need to encode the javascript once we are done and prefix it with “javascript:”. We can use a service like this one:

Our remote script file can now really do anything on the host site. We should use closures so we don’t interfere too much with the host website.

If you want to load additional javascript files in your script, you need to load them dynamically. Since dynamically loaded javascript files are loaded asynchronously by the browser, you’ll need to provide a callback function that will be called once the remote script has been loaded:

You can use it as follows:

In most cases, you probably want to use jQuery for modifying the host page in-place. There are three possible scenarios: a) the host page does not use jQuery itself; b) the host page does use jQuery and the version works well for you, too; c) the host page does use jQuery but you don’t like the particular version of jQuery.

The first two cases are easy: you either load jQuery yourself using the method described previously or just use the jQuery provided by the host page.

If the host page already uses jQuery but an inconvenient version, you need to load jQuery yourself using jQuery’s no conflict option, allowing you to use to jQuerys at the same time in different namespaces:

Loading additional css is very similar to loading additional javascript:

You can use it as follows:

Note that in most cases, you don’t need to specify a callback function for loading styles, since your javascript code normally doesn’t really depend on the actual presence of the styles.

Assuming that jQuery is present, you can load additional html as follows:

And use it e.g. as follows:

All that is left to do is to create a page for folks to install the bookmarklet. It should contain a setup description like this:

So the next time you want to make an impact potential customers — sometimes even freak them out (in a good way) — try Ziggeo’s bookmarklet system.|||

