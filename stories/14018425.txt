A pack of framework-agnostic, easy-to-integrate and well tested mixins for SQLAlchemy ORM.

Here's a quick demo of what out mixins can do.

SQLAlchemy's Data Mapper pattern is cool, but Active Record pattern is easiest and more DRY.

Well, we implemented it on top of Data Mapper! All we need is to just inject session into ORM class while bootstrapping our app:

We all love SQLAlchemy, but doing CRUD is a bit tricky there.

For example, creating an object needs 3 lines of code:

Well, having access to session from model, we can just write

that's how it's done in Django ORM and Peewee

update and delete methods are provided as well

And, as in Django and Eloquent, we can quickly retrieve object by id

and fail if such id doesn't exist

See full example and tests

As in Flask-SQLAlchemy, Peewee and Django ORM, you can quickly query some class

Also we can quickly retrieve first or all objects:

See full example and tests

If you use SQLAlchemy's eager loading, you may find it not very convenient, especially when we want, say, load user, all his posts and comments to every his post in the same query.

Well, now you can easily set what ORM relations you want to eager load

or we can write class properties instead of strings:

Sometimes we want to load relations in separate query, i.e. do subqueryload. For example, we load posts on page like this, and for each post we want to have user and all comments (and comment authors).

To speed up query, we load comments in separate query, but, in this separate query, join user

Here, posts will be loaded on first query, and comments with users - in second one. See SQLAlchemy docs for explaining relationship loading techniques.

For simple cases, when you want to just joinedload or subqueryload a few relations, we have easier syntax for you:

See full example and tests

It means you can filter and sort dynamically by attributes defined in strings!

So, having defined model with relationship to model, you can write

For DRY-ifying your code and incapsulating business logic, you can use SQLAlchemy's hybrid attributes and hybrid_methods. Using them in our filtering/sorting is straightforward (see examples and tests).

See full example and tests

Well, as does auto-joins for filtering/sorting, there's a sense to tell sqlalchemy that we already joined that relation.

So that relations are automatically set to be joinedload if they were used for filtering/sorting.

So, if we write

then no additional query will be executed if we will access used relations

See full example and tests

In real world, we want to filter, sort and also eager load some relations at once. Well, if we use the same, say, relation in filtering and sorting, it should not be joined twice.

That's why we combined filter, sort and eager load in one smartest method:

See full example and tests

As developers, we need to debug things with convenient. When we play in REPL, we can see this

Well, using our mixin, we can have more readable output with post IDs:

Even more, in model, we can define what else (except id) we want to see:

Now we have

And you can customize max __repr__ length:

See full example and tests

Some mixins re-use the same functionality. It lives in (session access) and (inspecting columns, relations etc.) and other mixins inherit them.

You can use these mixins standalone if you want.

There're a lot of extensions for SQLAlchemy, but most of them are not so universal.

We found several implementations of this pattern.

Cool, but it forces you to use their own way to instantiate SQLAlchemy while to use you should just make you model to inherit it.

Framework-agnostic, but lacks of functionality (only method is provided) and Readme.

There exists sqlalchemy-django-query package which does similar things and it's really awesome.

sqlalchemy-repr already does this, but there you can't choose which columns to output. It simply prints all columns, which can lead to too big output.

Other changes in :

It didn't return columns inherited from other class. Now it works correct:

Fixed bug in : it crashed for objects without ID (newly created ones, not added yet to the session).|||

sqlalchemy-mixins - Active Record, Django-like queries, nested eager load and beauty __repr__ for SQLAlchemy