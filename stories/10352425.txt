Update 12/16:This post has been verified with Swift 3, minimal changes were required.

Swift is a language still slightly in flux, with new functionalities and alterations of behavior being introduced in every release. Much has already been written about the functional aspects of Swift and how to approach problems following a more “pure” functional approach.

Misterious but correct depiction of the monadic bind

Considering that the language is still in its infancy, often, trying to understand some specific topics you’ll end up reading a lot of articles referring to old releases of the language, or worst, descriptions that mix up different releases. Sometimes, searching for articles on , you could even fortuitously find more than one really good articles explaining Monads in the context of Swift.

Add to the lack of comprehensive and recent material the fact that many of these concepts, even with examples or daring metaphors, are not obvious, especially for someone used to the imperative way of thinking.

With this short article (part of a series on Swift and the functional approach) I’ll try to give a clear and throughout explanation of how and especially work for different types, with references to the current library headers.

Map has the more obvious behavior of the two *map functions, it simply performs a closure on the input and, like , it can be applied to Optionals and Sequences (i.e. arrays, dictionaries, etc..).

For Optionals, the map function has the following prototype:

The map function expects a closure with signature , if the optional has a value applies the function to the unwrapped optional and then wraps the result in an optional to return it (an additional declaration is present for implicitly unwrapped optionals, but this does not introduce any difference in behavior, just be aware of it when map doesn’t actually return an optional).

Note that the output type can be different from the type of the input, that is likely the most useful feature.

Straightforward, this does not need additional explanations, let’s see some real code from the playground for this post:

Using map on optionals could save us an if each time we need to modify the original optional (map applies the closure to the content of the optional only if the optional has a value, otherwise it just returns nil), but the most interesting feature we get for free is the ability to concatenate multiple map operations that will be executed sequentially, thanks to the fact that a call to always return an optional. Interesting, but quite similar and more verbose than what we could get with optional chaining.

But it’s with like arrays and dictionaries that the convenience of using map-like functions is hard to miss:

This time we are calling the .map function defined on as follow:

The transform closure of type is applied to every member of the collection and all the results are then packed in an array with the same type used as output in the closure and returned. As we did in the optionals example, sequential operation can be pipelined invoking on the result of a previous operation.

This basically sums up what you can do with , but before moving to , let’s see three additional examples:

Not every String can be converted to an Int, so our integer conversion closure will always return an Int?. What happens in the first example with that Int??, is that we end up with an optional of an optional, for the additional wrapping performed by map. To actually get the contained value will need to unwrap the optional two times, not a big problem, but this starts to get a little inconvenient if we need to chain an additional operation to that map. As we’ll see, will help with this.

In the example with the array, if a String cannot be converted as it happens for the 4th element of the that element in the resulting array will be nil. But again, what if we want to concatenate an additional map operation after this first map and apply the transformation just to the valid (not nil) elements of our array to obtain a shorter array with only numbers?

Well, we’ll just need intermediate filtering to sort out the valid elements and prepare the stream of data to the successive map operations. Wouldn’t it be more convenient if this behavior was embedded in ? We’ll see that this another use case for .

The differences between and could appear to be minor but they are definitely not.

While is still a map-like operation, it applies an additional step called right after the mapping phase. Let’s analyze ’s behavior with some code like we did in the previous section.

The definition of the function is a bit different, but the functionality is similar, as the reworded comment implies:

There is a substantial difference regarding the closure, expects a this time.

With optionals, flatMap applies the closure returning an optional to the content of the input optional and after the result has been “flattened” it’s wrapped in another optional.

Essentially, compared to what did, also unwraps one layer of optionals.

The last snippet contains and example of chaining, no additional unwrapping is needed using .

As we’ll see again when we describe the behavior with Sequences, this is the result of applying the flattening step.

The operation has the sole function of “unboxing” nested containers. A container can be an array, an optional or any other type capable of containing a value with a container type. Think of an optional containing another optional as we’ve just seen or array containing other array as we’ll see in the next section.

This behavior adheres to what happens with the operation on Monads, to learn more about them, read here and here.

Sequence provides the following implementations of :

applies those transform closures to each element of the sequence and then pack them in a new array with the same type of the input value.

These two comments blocks describe two functionalities of : sequence flattening and nil optionals filtering.

Let’s see what this means:

While the result of the first example doesn’t differ from what we obtained using , it’s clear that the next two snippets show something that could have useful practical uses, saving us the need for convoluted manual flattening or filtering.

In the real world, there will be many instances where using will make your code way more readable and less error-prone.

And an example of all this is the last snippet from the previous section, that we can now improve with the use of :

I may look just a minimal improvement in this context, but with longer chain it would become something that greatly improves readability.

And let me reiterate this again, in this context too, the behavior of swift flatMap is aligned to the operation on Monads (and “flatMap” is usually used as a synonym of “bind”), you can learn more about this reading here and here.

Learn more about Sequence and IteratorProtocol protocols in the next article in the series.|||

Swift is a language still slightly in flux, with new functionalities and alterations of behavior being introduced in every release. Much has already been written about the functional aspects of Swift and how to approach problems following a more functional approach.<br/>This short article will try to give a clear and complete explanation of how <i>map</i> and especially <i>flatMap</i> work for different types in Swift 2.0 and 3.0, with references to the current library headers.