This git command "clones" an external git repo into a subdirectory of your repo. Later on, upstream changes can be pulled in, and local changes can be pushed back. Simple.

This command is an improvement from and ; two other git commands with similar goals, but various problems.

It assumes there are 3 main roles of people interacting with a repo, and attempts to serve them all well:

The command benefits these roles in the following ways:

The best short answer is:

The complete "Installation Instructions" can be found below.

All the subrepo commands use names of actual Git commands and try to do operations that are similar to their Git counterparts. They also attempt to give similar output in an attempt to make the subrepo usage intuitive to experienced Git users.

Please note that the commands are not exact equivalents, and do not take all the same arguments. Keep readingâ€¦

Add a repository as a subrepo in a subdir of your repository. This is similar in feel to . You just specify the remote repo url, and optionally a sub-directory and/or branch name. The repo will be fetched and merged into the subdir. The subrepo history is squashed into a single commit that contains the reference information. This information is also stored in a special file called . The presence of this file indicates that the directory is a subrepo. All subsequent commands refer to the subrepo by the name of the subdir. From the subdir, all the current information about the subrepo can be obtained. The option will "reclone" (completely replace) an existing subdir. The command accepts the and options. If you want to expose a subdirectory of your project as a published subrepo, this command will do that. It will split out the content of a normal subdirectory into a branch and start tracking it as a subrepo. Afterwards your original repo will look exactly the same except that there will be a file. If you specify the (and optionally the ) option, the values will be added to the file. The option is the upstream URL, and the option is the upstream branch to push to. These values will be needed to do a command, but they can be provided later on the command (and saved to if you also specify the option). Note: You will need to create the empty upstream repo and push to it on your own, using . The command accepts the and options. Update the subrepo subdir with the latest upstream changes. The command will attempt to do the following commands in one go: In other words, you could do all the above commands yourself, for the same effect. If any of the commands fail, subrepo will stop and tell you to finish this by hand. Generally a failure would be in the rebase, where conflicts can happen. Since Git has lots of ways to resolve conflicts to your personal tastes, the subrepo command defers to letting you do this by hand. Like the command, will squash all the changes (since the last pull or clone) into one commit. This keeps your mainline history nice and clean. You can easily see the subrepo's history with the command: The set of commands used above are described in detail below. The command accepts the , , and options. The command requires a branch that has been properly merged/rebased with the upstream HEAD (unless the upstream HEAD is empty, which is common when doing a first after an ). That means the upstream HEAD is one of the commits in the branch. If you don't specify a branch to push, one will be created for you using the same techniques as a pull (except it won't be committed locally). Otherwise you can name a properly merged branch to push. Often times you can use the branch commit from the last pull, which is saved as . After that, the command just checks that the branch contains the upstream HEAD and then pushes it upstream. The option will do a force push. Force pushes are typically discouraged. Only use this option if you fully understand it. (The option will NOT check for a proper merge. ANY branch will be force pushed!) The command accepts the , , , and options. It will create a Git reference called that points at the same commit as . It will also create a remote called . These are temporary and you can remove them easily with the subrepo command. The command accepts the , and options. Scan the history of the mainline for all the commits that affect the and create a new branch from them called . This is useful for doing and commands by hand. Use the option to write over an existing branch. The command accepts the and options. This command is generally used after a hand-merge. You have done a and merged (rebased) it with the upstream. This command takes the HEAD of that branch, puts its content into the subrepo subdir and adds a new commit for it to the top of your mainline history. This command requires that the upstream HEAD be in the branch history. That way the same branch can push upstream. Use the option to commit anyway. This "plumbing" command finds a common ancestor between two branches. It will look at the referenced tree hash in the commits to see if it can locate a common one. This is used for pull and push before the rebase step. In this case we look at all the local commits and then try to find a tree hash that is available in the subrepo. Note: This is different from the command which looks at the object structure. Use the option to list all possible common ancestors. (This differs from other commands which use to apply the same command to all subrepos). Get the status of a subrepo. Uses the option by default. If the flag is used, just print the subrepo names, one per line. The option will show all the recent local and upstream commits. The command accepts the , , and option. The and operations (and other commands that call them) create temporary things like refs, branches and remotes. This command removes all those things. Use to remove refs. Refs are not removed by default because they are sometimes needed between commands. To remove all subrepo artifacts: The command accepts the , , and options. Same as . Will launch the manpage. For the shorter usage, use . This command will display version information about git-subrepo and its environment. For just the version number, use . Use for more version info, and for less.

Show a brief view of the commands and options. Gives an overview of the help options available for the subrepo command. Print the git-subrepo version. Just the version number. Try the command for more version info. If you have multiple subrepos, issue the command to all of them (if applicable). If you have subrepos that also have subrepos themselves, issue the command to ALL of them. Note that the option only works for a subset of the commands that works for. Use a different branch-name than the remote HEAD or the one saved in locally. Use this option to force certain commands that fail in the general case. Use this option to fetch the upstream commits, before running the command. Use a different remote-url than the one saved in locally. If or are used, and the command updates the file, include these values to the update.

The command exports and honors some environment variables:

There are currently 3 ways to install . For all of them you need to get the source code from GitHub:

The first installation method is preferred: the file. Just add a line like this one to your shell startup script:

That will modify your and , and also enable command completion.

The second method is to do these things by hand. This might afford you more control of your shell environment. Simply add the and directories to your and :

See below for info on how to turn on Command Completion.

The third method is a standard system install, which puts next to your other git commands:

This method does not account for upgrading and command completion yet.

This command is known to work in these Windows environments:

Let us know if there are others that it works (or doesn't work) in.

The repository comes with a extensive test suite. You can run it with:

or if you don't have on your system:

If you used the method of installation, just run this to upgrade :

If you used method, then run this again (after ):

The command supports -based command completion. If you don't use the script (see Installation, above), you'll need to enable this manually to use it.

If your Bash setup does not already provide command completion for Git, you'll need to enable that first:

On your system, the Git completion script might be found at any of the following locations (or somewhere else that we don't know about):

In case you can't find any of these, this repository contains a copy of the Git completion script:

Once Git completion is enabled (whether you needed to do that manually or not), you can turn on completion with a command like this:

In the Z shell (zsh), you can manually enable completion by adding the following line to your , before the function is called:

The git-subrepo command has been in use for well over a year and seems to get the job done. Development is still ongoing but mostly just for fixing bugs.

Trying subrepo out is simple and painless (this is not ). Nothing is permanent (if you do not push to shared remotes). ie You can always play around and reset back to the beginning without pain.

This command has a test suite (run ), but surely has many bugs. If you have expertise with Git and subcommands, please review the code, and file issues on anything that seems wrong.

If you want to chat about the command, join on .|||

Contribute to git-subrepo development by creating an account on GitHub.