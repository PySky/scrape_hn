Writing SD cards for the Raspberry Pi is something that every member of the Pi community has attempted. Some are old hats and tackle the task with aplomb, but for some it strikes fear into their hearts.

In this article, I look at two different ways to write an SD card. First using the latest application to offer a simple GUI, Etcher. Then, I take a look at dcfldd, a Linux terminal command that expands on the popular dd command and offers much more functionality.

Why did I choose these two applications? There are many options to use to write SD cards, such as NOOBS, Win32 DiskImager, dd, and the new SD card creation tool built into the Raspbian operating system. But the two that I have chosen for this post, not only offer an easy way to write an SD card, but these applications also provide extra features that are accessible to everyone.

Let's take a look at the first application.

Etcher came out of nowhere in 2016 and has since become the best cross-platform SD card creation experience. Why? Well, the short answer is consistency. Regardless of what operating system it is used with, it works in exactly the same way. Downloading the application is a breeze, and running the application is equally easy, even on Linux, thanks to it using AppImage to create a simple executable file.

Etcher running on Windows 10 (identical to the Ubuntu application).

Regardless of your operating system, all you need to do is point Etcher to the image that you would like to write. Next, insert a blank microSD card into your computer. Etcher will detect the card and check that it is ready to be used. After it completes that check, click on Flash to start the process. For Linux users, you'll need to provide a sudo / root password in order to start the Flash process.

Etcher writes the card at the best speed possible for your system. Here we see it will take approximately eight minutes to write an image.

Etcher has some great features. First, the image written to the SD card is verified, ensuring that your card is written correctly. Second, by default, Etcher will only write to SD cards and will ignore large hard drives. However, you shouldn't take this capability for granted and you should always check you're using the correct drive. Etcher gives you the option to write multiple cards using the same image. All you need to do is supply the cards and Etcher will do the rest.

When I need to write a new SD card, I use Etcher, because it is fast, easy, and efficient. It is a truly great application that offers so much for all levels of users.

Let's turn to dcfldd, which is an enhanced version of dd that works in much the same manner, but it also offers more forensics and security-focused features. With a similar syntax to dd, dcfldd requires the location where your microSD card is mounted and the location of the image to flash. Typically, I would use df -h to locate the drive containing my microSD card. In this example, you can see that I have an SD card in my laptop SD reader that it is mounted at /dev/mmcblk0.

In order to write an image to the microSD card, I need to make sure that the drive is unmounted. Remember when you try this to change the location to match your own machine.

Because the syntax for dcfldd is, again, very similar to dd, a typical command is as follows.

The term if relates to the input file, the image that I wish to write to my card, whereas of is the output file, the location of my SD card. You’ll notice that sizeprobe is used, which will take the size of the image file and use it to calculate and display the progress of the application. For example, if I wanted to write the latest Pixel image to my microSD card, I would type.

Why should I use dcfldd over dd? For me, the killer feature is the ability to write to multiple output devices. In other words, I can write many cards at once.

Let’s say that I need to write three cards for my friends. Using USB card readers and my internal SD reader I can run the following command:

You can see of=/ is used three times. These three occurrences mean that I can write three cards at once using just one image file. The more powerful your machine, the more cards you can write at once. It is as powerful and dangerous as dd, but with the ability to easily write multiple cards at once. It is a power tool for those comfortable with the Terminal.|||

Get a look at two different ways to write an SD card to a Raspberry Pi.