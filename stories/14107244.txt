In this tutorial, I’ll walk you through how to create your own YouTube-like app. The final application will allow users to upload and share videos to the public.  We will use React for the client side, Node.js for the server side, and Filestack to upload and transcode the videos.

Although I’re highlighting YouTube-like apps, this tutorial will be helpful if you are building any type of application in which users upload and share videos, whether that be a social network, an educational platform, or anything else!

Please note, this tutorial will use Filestack’s V3 File Picker. If you are still using V2 for any reason, please use this tutorial instead.

If you are not familiar with Filestack, it provides a fully customizable file uploader accessible through javascript in the client side.

 As a developer there are several reasons why I like it:

In this specific tutorial we will provide users a file uploader and the video transcoding, two features that usually would require a lot of development time which becomes a matter of minutes with Filestack.

The following tutorial is essentially a Javascript app written in React and Node.js so I assume:

But don’t be afraid! The codebase is pretty easy to follow along.

Since the tutorial is focused on Javascript I am going to skip all webpack and babel setup part, you can clone the repo on my github profile and copy the webpack related files.

Finally, I deployed the app on Heroku for you guys to try, you can find it here.

From my repository let’s take a look at the `package.json` file:

– The devDependencies are just a set of packages to help writing modern Javascript, loaders and plugins for webpack, eslint for code styling etc.

 – Notice nodemon, this is an exception as we are going to actively use it to run our server in development mode (watch-dev command) and it automatically restart the server whenever a change to the backend codebase is applied.

 – The dependencies section is what we are going to rely on to write backend and client. The server packages are express, body-parser, cors and morgan while the client ones are react, react-dom and react-router. Throughout the tutorial we will see them in action.

Plus, , the new picker V3 API.

So, if you are using yarn package manager, in the terminal move to the cloned folder and run

to create the folder and install all the packages inside.

Before starting with the server we need to grap the api key that grant us the permission to communicate with Filestack API. Go to the official website and login/register:

Once we completed the process we should be redirected to the developer portal where we can get a free API key. Let’s store it for later and checkout the panel on the left, the last option is webhook:

This is where we can set the endpoint Filestack will use to send the transcoded URL for the video a user uploaded. let’s set it up with the endpoint of your app:

For simplicity I added the url and chose all so all the webhooks points to the youtube app on heroku.

NB: We are using a free API key so we have a limited amount of montly conversion, more than enough for the current tutorial but for a commercial app it is definitely not enough.

We are finally ready to play with the server.

Our express server is very easy, it consists of four routes:

The last route GET /convert is actually optional but it helps understanding the transcoding process:

In particular, once the process is completed, the response body is gonna be similar to this example:

Of all the returned information take a look at the following properties:

The equal to completed is what we are going to compare to know the file is transcoded, provides the new URL for the video and is a unique identifier for the video:

 1. Before saving the video to Database we make a GET request the Filestack process API with the video handler to request the transcoding.

 2. Filestack returns the uuid we are going to save along with the video information sent by the user.

 3. We get back the uuid again after the transcoding completion, so we use it search in the DB for the completed video, then update the URL and show it to the users in the homepage!

Trust me, it’s easier to write the code than explain it!

Now, to complete the backend part we just need to create the file containing the default videos. In create and paste the following code:

And the Server side is done! Let’s start the server by running

and try to make some requests with Postman

Notice we receive all the videos in the DB.

I tried to send fake videos information to the server and apparently the video was created and stored.

 Let’s make another GET request to /api/v1/videos and see if it was really added to the collection:

Awesome, it shows as first one! Don’t forget we revert the DB order so that the latest video is always at the top of the list.

The remaining routes of /convert are not for read and write the DB but just to accept Filestack responses.

first of all, let’s take a look at the two views:

Let’s start by creating in and paste the following code:

We defined our Router that renders the Layout component at path / which includes /add too. In fact, for / we render Layout along with Home container as it is the component prop of the .

Time to create the other components! Let’s start by Layout, in create and paste the following code:

This is just a stateless functional component that renders and the children as expected.

 Let’s now create in and paste the following code:

Again, this is just a navigation bar created with bootstrap and self-explanatory.

I like to export my components at once and import them within a single import, so let’s create in and paste the following code:

We are going to update this file throughout the remaining part of the tutorial in order to export all the created components.

It’s now time to work on the two containers `Home` and `Add`.

The Home component is in charge to fetch the videos from the server and show them in homepage of our app.

 Obviously it has a few children components, take a look at my choice:

Let’s create in and paste the following code:

That’s a typical container where we set the state in the constructor and populate through fetch in .

 Notice that the URL comes from as we are going to use it in container as well. In fact exports all the constants we need throughout the app, the URL of the endpoint as well as Filestack API key.

 Let’s create it in and paste the following code:

is a global variable I defined with a plugin in webpack because while in development we serve the client from webpack-dev-server, in production on heroku I instead serve the client directly from Node.js. Obviously the URL endpoint is going to be slightly different.

NB: Don’t forget to substitute with the real key you received from Filestack.

Let’s continue writing the children components of , in create and paste the following code:

We miss the component, let’s create a file in and paste the following code:

This is another stateless function component that shows the video and its information to the users.

 Notice that I used the video HTML5 element which shows the video inside a player. In case the Browser does not support the element it will unfortunately show the string your browser does not support the video tag.

The last child component for the Home container is , let’s rapidly create in and paste the following code:

Feel free to write your own information inside the footer!

Finally, let’s update to export the latest components we created:

We need an file for the containers as well, if you remember in we imported them this way:

it’s now time to move to the last container, !

This is where users can upload their favorite videos. When they click on submit we first ask for transcoding and then save the video information along with the uuid returned by Filestack.

 How does this process actually work?

Filestack provides the so-called process API to apply different enhancements on the uploaded files.

 In the documentation Filestack shows 2 possible ways:

pic11

 The difference is just that with the first method there is no need to send the API key as it only processes files uploaded on Filestack, while the second method can process any file given the URL.

In our case we are going to use the second method. To apply video processing, the conversion task is . Again, the documentation provides a clear example:

We are going to use the same structure in our app and once we receive the response the video is sent to the server to be stored.

Enough talking, let’s create in and paste the following code:

As last step, let’s update to export :

And we finished the app! To try it locally just start the api with

And serve the client with

Now open the browser to https://localhost:8080 and the homepage should show up!

However I suggest you to deploy it to really see Filestack transcoding in action.

In this tutorial, we created a YouRube like app where users can upload and share their favorite videos. The process consists of uploading and transcoding the video using the Filestack API.

We used Node.js (express) to write the server side while we wrote the client side with React. In both cases we entirely wrote Javascript code which is great as we don’t have to move from more than one language when writing an app.

Moreover we have seen the new Filestack V3 in action. We leveraged its ability to apply transformation to the uploaded files to transcode videos.

Lastly, we integrated the uploader and customized it to limit the upload to videos only.

I hope this tutorial went well for you! Please share the apps you create with Filestack. We’d love to see what you make!|||

In this tutorial, we will create a YouTube-like app to allow your users to upload and share videos at scale using React, Node, and Filestack.