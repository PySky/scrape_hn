These two frameworks are both part of the new generation cross-platform mobile frameworks that are NOT using the browser to package it into native app. They are _actualy_ using the native UI components from the native OS. This have a very positive effect on the UX of the app. It also allows for faster app implementation because the final polish required for the app is of magnitudes smaller that the work required to the same with any PhoneGap, browser-based app.

Now to your question. There are a lot of differences - both technical and non-technical.

NativeScript is delivered by Telerik ( a Progress company) - a very well known developer company and NativeScript framework is part of their core business. ReactNative is built from Facebook, which as we all know is not a developer tools company. Why this is important? When you rely on Telerik you have the option to get support (developer or production) which is a requirement for most of the serious software shops out there. Also if you work on the enterprises you expect a certain stack of tools, services and solutions. Code encryption and security for example. You get all of this with Telerik/NativeScript, but this is not a priority for Facebook/React.

It is worth noting also that NativeScript is already version 2.0, while ReactNative is still in its early days of maturity. This also should be calculated when evaluating the risk when choosing the proper framework. With NativeScript you have the entire stack available to you for both iOS and Android. For RN, as it is today there are still a lot of gaps in the cross-platform story. These gaps are being filled every day and according to FB team this is one of the major priorities for the RN team in the next one year. There are also a lot of paid productivity tools, services and components already available for NativeScript. This plays a major role when deciding which framework to use when building any commercial software.

The last non-technical thing is the community size. Both frameworks are open source and free. ReactNative is an extension of React.js so you can assume that the whole react.js community will bet on it. On the other side NativeScript is backed by Google and is targeting the AngularJS community. Both communities are very large (millions of developers) and these two frameworks are in good hands. This also plays a major role in the risk evaluation.

Now on the technical side

Tons of differences. The approach ReactNative and NativeScript are taking are dramatically different which affects the developer experience and also the ability to use and reuse native libraries result. Both deliver a very good performance on both iOs and Android. 60fps most of the time. There are still scenarios that needs to be polished in both frameworks, but even today they behave as truly native apps.

Speaking of architecture - ReactNative as I mentioned above is an extension to React.JS so they follow the same principles for updating the UI as in ReactJS. E.g. using a virtual DOM. In very short - they are calculating the changes that needs to happen to the UI on a _background thread_ and are applying those changes in batches. The fact that they are doing this on a background thread has its pros and cons. On the positive side of course is that the UI thread is not touched (which leads to very responsive UI), but on the negative side this is limiting their ability to communicate _fast_ with the underlying native OS. This means that if you have a component that makes a lot of calls to the native OS the app will be very slow, really slow. The good thing is that this is not needed for most of the cases.

The bad thing is that if you need to use custom native components or native APIs you need to know ObjC for iOS and Java for Android to access these components and APIs. This can be a deal breaker for many JS developers. you don't need to know ObjC/Java to achieve this in NativeScript, read below.

There is a very good article on the ReactNative website explaining this in details and they are mentioning there that they are planning to changes this architecture so that more stuff is being done on the UI thread for this reason. Here is a quote from the article:

I recommend to read the article here.

NativeScript core team developers are taking a more classic approach here. They are using the UI thread to execute the UI which is the same model used on most of the popular frameworks - Android, Windows, etc. This allows for a much simpler way of developing apps - you as a developer always have access to the UI tree of your application. It is worth noting that if you need to execute something on a background thread this is also possible. Some of the more core components like http, image, sql lite database are actually performing a lot of their operations on a background thread to reduce the load on the UI thread. This approach have a tremendous benefit of allowing you to access _any_ native API directly from JavaScript.

Please read this article which explains NativeScript threading architecture in-depth - http://developer.telerik.com/fea....

Basically you access the entire native APIs untouched which have a lot of benefits especially when you have to support the app in the long run. There aren't any wrappers for the native APIs and this makes the whole experience more simple and less error prone. You can literally write things like - com.android.button.init(). This also have the benefit of reusing the entire stack of 3rd party native libraries directly without the need of any modifications. This allows for easier consumption and creation of extensions. Currently there are more than 220 extensions available from the community. The other benefit of this approach is that the animations in NativeScript that are created by using CSS and JavaScript will run much more smoothly because they are executed on the UI thread.

As I mentioned above NativeScript is backed by Google, so if you are an Angular developer you will feel at home if you use NativeScript - the entire Angular 2 API are supported and you can reuse your code between a NativeScript and a web app.

The above architecture allows NativeScript to offer 0-day support for new OS releases. Currently NativeScript have support for the, still in Alpha stage, Android N release.

JS Engines used to execute the app code

It is worth mentioning that both frameworks are leveraging existing JavaScript engines to execute the JavaScript code at runtime. ReactNative is using JavaScriptCore on iOS and Android. NativeScript is using V8 on Android and JavaScriptCore on iOS. Just recently Microsoft added support for Windows Universal in ReactNative and are using their own Chakra JS engine. I'm not sure how this will be merged with the rest of the ReactNative code as it (I suspect) will imply a lot of changes to the tooling - different debugger, profiler, to name a few.

Software changes a lot, so it is important to rely on standards to reduce the risk when choosing the right framework for your scenario.

Both frameworks use standards-compliant ECMAScript code which allows for code reuse between web and mobile apps, which leads to a very good ROI when using them.

Pros for NativeScript is that it also uses a standard-compliant CSS declaration. This allows for a much bigger skills/code reuse story between mobile and web app. It even support describing animations using CSS keyframes. All this goes down to native code so the CSS declarations are translated to native experience. See how to use CSS for writing native animations.

In both frameworks you can have declarative syntax for describing the UI of the app. ReactNative as using the notation found in React for inlining the UI declaration in a single file. NativeScript again is using a more classic approach by allowing you both building the UI with code or via a separate file for the UI implementation allowing you to use the classic MVC/MVVM patterns. I would not say which one is better - it is a matter of personal taste. For me the separation between the UI and the code is better with MVVM, but this is what I'm used to write so I'm biased.

If you know CSS in NativeScript will be much easier for you to style the applications using external stylesheets or inline styling. ReactNative is using their own notation for styling based on JSON declarations. Again similar to CSS, but different.

Both ReactNative and NativeScript are using modern JavaScript. They both support Babel in order to use the latest and greatest of JS.

As NativeScript is more mature it have also more options here. NativeScript have a tight integration (tooling, IDE, etc) with TypeScript. This is giving an additional integration with Angular 2 and is boosting the productivity and is making the long term support of these apps a lot easier.

Both frameworks offer the ability to developer applications in a fast manner - they both offer hot reload functionality - this is the ability to see the code changes immediately on the device without the need to reload the app (in most of the cases).

In terms of developer experience and IDEs since the entire app stack is JavaScript you can use any IDE available. Facebook are working on their own IDE which is still not released at the time of this writing, NativeScript is promoting Visual Studio Code as the recommended editor. Microsoft have an implementation for both NativeScript and ReactNative for their VS Code debugger.

Since it is all standards-compliant JavaScript you can use any of the available tools to write unit tests. Both frameworks support the most popular tests framworks like Karma, Jasmine, Mocha.

For functional testing, since the UI is entirely native you can use any test tool that works with the native frameworks like Appium.

See how to write tests in NativeScript. In ReactNative.

As I mentioned several times above on the performance side you will be satisfied with both frameworks. It is a huge improvement over the well-known PhoneGap apps. The final apps are no different from real native apps. The use of the real native UI components is a huge benefit for both frameworks.

Both frameworks have an exceptional performance on iOS - both in terms of loading time (less than a second for both) and in terms of FPS (60fps in most cases) at runtime.

On Android the performance is still good but due to the underlying native OS architecture the overall performance is not as good as on iOS. The loading time and the runtime behavior is not as polished as on iOS. But this is valid for the pure native apps too, so don't be too picky on NativeScript and ReactNative. ReactNative have a slightly better (faster) loading time on Android compared to NativeScript (1.4s vs 2.2s). NativeScript team is addressing this with the introduction of memory heap snapshots, but this feature is still experimental.

For some real apps you can see follow these links for NativeScript kitchen sink app:

Or you can check the apps from the NativeScript showcase gallery.

For ReactNative I'm not aware of any kitchen sink apps, but you can check any of the showcase apps. Make sure to check the apps done by Facebook for the best implementation.

Happy coding, and I hope that the above helps :). Please feel free to ask me for any more details. Certainly there are a lot of things that are not covered here, but I can go further and explain everything above in more deeper details. You can reach me on twitter - @ValioStoychev.

Disclosure: I work as a PM for NativeScript, but I tried to be completely unbiased. I hope you will appreciate the content above. In case you think there are incorrect facts, please do let me know and I will apply edits!|||

