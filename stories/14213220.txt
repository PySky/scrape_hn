The Rust team is happy to announce the latest version of Rust, 1.17.0. Rust is a systems programming language focused on safety, speed, and concurrency.

If you have a previous version of Rust installed, getting Rust 1.17 is as easy as:

If you don’t have it already, you can get from the appropriate page on our website, and check out the detailed release notes for 1.17.0 on GitHub.

The story of Rust 1.17.0 is mostly one of small, quality of life improvements. For example, the lifetime is now assumed in statics and consts. When writing a const or static like this:

Rust 1.17 will allow you to elide the , since that’s the only lifetime that makes sense:

In some situations, this can remove lots of boilerplate:

Another similar improvement is “field init shorthand.” Similar to ECMAScript 6, which calls this “Object Literal Property Value Shorthand”, duplication can be removed when declaring structs, like this:

That is, the form will assume that its values are set to a variable with the same name in its scope.

For another small quality of life improvement, it’s common for new Rustaceans to try to use to add two s together. This doesn’t work, you can only add . As such, a new error message was added to help users who make this mistake:

When using Cargo’s build scripts, you must set the location of the script in your . However, the vast majority of people wrote , using a file in the root of their project. This convention is now encoded into Cargo, and will be assumed if exists. We’ve been warning about this change for the past few releases, and you can use to opt out.

This release marks the removal of the old based build system. The new system, announced in Rust 1.15, is written in Rust and primarily uses Cargo to drive the build. It is now mature enough to be the only build system.

As part of that change, packages from crates.io can now be used within Rust’s build system. The first one to be added was mdBook, and it’s now being used to render our various book-like documentation:

In addition, see those links to their respective repositories; they’ve been moved out of tree. Also, we’ve added a fourth book, still in-tree: The Unstable Book. This provides an overview of unstable features by name, contains links to their tracking issues, and may contain initial documentation. If there’s a feature you want to see stabilized, please get involved on its tracking issue!

A few releases ago, stopped installing documentation by default. We made this change to save some bandwidth and because not all users want a copy of the documentation locally. However, this created a pitfall: some users did not realize that this changed, and would only notice once they were no longer connected to the internet. In addition, some users did want to have a local copy of the docs, regardless of their connectivity. As such, we’ve reverted the change, and documentation is being installed by default again.

Finally, while this release is full of improvements, there is one small step back we want to regretfully inform you about. On Windows, Visual Studio 2017 has been released, and Microsoft has changed the structure of how the software is installed. Rust cannot automatically detect this location, and while we were working on the neccesary changes, they did not make it in time for this release. Until then, Visual Studio 2015 still works fine, or you can run on the command line. We hope to make this work in a seamless fashion soon.

See the detailed release notes for more.

19 new bits of API were stabilized this release:

In other changes, used to require that for many of its methods, but this has been relaxed significantly.

now implements over a dozen new conversions with .

and have some new conversions as well. Previously, you may have written code like this:

Now, you can write

This removes some unnecessary run-time parsing, and is roughly as readable, depending on your preferences.

Backtraces now have nicer formatting, eliding some things by default. For example, the full backtrace:

is now instead

By default. You can set the environment variable to get the full backtrace. We may be able to do more cleanup in the future; see this bug for more.

See the detailed release notes for more.

Other than the previously mentioned changes, Cargo has a few new improvements. and are two missing flags that are now supported.

You can now opt in to ignoring SSL revocation checks. The default is still to check, of course.

A new field in , , lets you specify specific features that must be set for a target to be built. Here’s an example: let’s say that we are writing a crate that interacts with databases, and that we support multiple databases. We might have this in our :

The feature allows us to include extra tooling, and the and features control which databses we want to support.

Previously, would attempt to build all targets, which is normally what you want. But what if we had a , that would only really be relevant if the and features would be enabled? Previously, we would have to write something like this:

This is a lot of boilerplate to work around ’s behavior. It’s even more unfortunate with , which are supposed to show off how to use your library, but this shenanigans is only relevant within the package, not if you were to try to use the example on your own.

With the new key, we can add this:

Now, will only build our if we have the two features set, and so we can write a normal without all the nonsense getting in the way.

See the detailed release notes for more.

Many people came together to create Rust 1.17. We couldn’t have done it without all of you. Thanks!|||

Words from the Rust team