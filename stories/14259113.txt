This started out as a personal project to build a very small Linux based operating system that has very few moving parts but is still very complete and useful. Along the way of figuring out how to get the damn thing to boot and making it do something useful I learned quite a lot. Too much time has been spent reading very old and hard to find documentation. Or when there was none, the source code of how other people were doing it. So I thought, why not share what I have learned.

This git repo contains a Makefile and scripts that automate everything that will be explained in this document. But it doesn't necessarily do everything in the same order as it's explained. You can also use that as reference if you'd like.

The kernel is the core component of our operating system. It manages the processes and talks to the hardware on our behalf. You can retrieve a copy of the source code easily from kernel.org. There are multiple versions to choose from, choosing one is usually a tradeoff between stability and wanting newer features. If you look at the Releases tab, you can see how long each version will be supported and keeps receiving updates. So you can usually just apply the update or use the updated version without changing anything else or having something break.

So just pick a version and download the tar.xz file and extract it with . To build the kernel we obviously need a compiler and some build tools. Installing on Ubuntu (or on Arch Linux) will almost give you everything you need. You'll also need to install for some reason.

The next step is configuring your build, inside the untarred directory you do . This will generate a default config for your current cpu architecture and put it in . You can edit it directly with a text editor but it's much better to do it with an interface by doing (this needs on Ubuntu) because it also deals with dependencies of enabled features. Here you can enable/disable features and device drivers with the spacebar. means that it will be compiled in your kernel image. means it will be compiled inside a separate kernel module. This is a part of the kernel that will be put in a separate file and can be loaded in or out dynamically in the kernel when they are required. The default config will do just fine for basic stuff like running in a virtual machine. But in our case, we don't really want to deal with kernel modules so we'll just do this: . And we're done, so we can simply do to build our kernel. Don't forget to add with the number of cores because this might take a while. When it's done, it should tell you where your finished kernel is placed. This is usually in the linux source directory for Intel computers.

Other useful/interesting ways to configure the kernel are:

You can check out for more info.

All these tools you know and love like , , , and and so on are commonly referred to as the 'coreutils'. Busybox has that and a lot more, like utilities from so we can do stuff like and even a complete init system. Basically, it contains most tools you expect to be present on a Linux system, except they are a slightly simplified version of the regular ones.

You can get the source from busybox.net. They also provide prebuilt binaries which will do just fine for most use-cases. But just to be sure we will build our own version.

Configuring busybox is very similar to configuring the kernel. It also uses a file and you can do to generate one and to configure it with a GUI. But we are going to use the one I provided (which I stole from Arch Linux). You can find the config in the git repo with the name . Like the version, this has most utilities enabled but with a few differences like statically linking all libraries. Building busybox is again done by simply doing , but before we do this, let's look into first.

The C standard library is more important to the operating system than you might think. It provides some useful functions and an interface to the kernel. But it also handles DNS requests and provides a dynamic linker. We don't really have to pay attention to any of this, we can just statically link the one we are using right now which is probably 'glibc'. This means the following part is optional. But I thought this would make it more interesting and it also makes us able to build smaller binaries.

That's because we are going to use musl, which is a lightweight libc implementation. You can get it by installing on Ubuntu or simply on Arch Linux. Now we can link binaries to musl instead of glibc by using instead of .

Before we can build busybox with musl, we need sanitized kernel headers for use with musl. You get that from this github repo. And set in your busybox config to to use them. Obviously change to the location where you put the headers repo, which can be relative from within the busybox source directory.

If you run now, the busybox executable will be significantly smaller because we are statically linking a much smaller libc.

Be aware that even though there is a libc standard, musl is not always a drop-in replacement for glibc if the application you're compiling uses glibc specific things.

Installing an OS on a file instead of a real disk complicates things but this makes development and testing easier.

So let's start by allocating a new file of size 100M by doing (some distros don't have so you can do instead). And then we format it like we would format a disk with . It automatically creates an MBR partition table for us and we'll create just one partition filling the whole image by pressing 'n' and afterwards just use the default options for everything and keep spamming 'enter' until you're done. Finally press 'w' exit and to write the changes to the image.

In order to interact with our new partition we'll create a loop device for our image. Loop devices are block devices (like actual disks) that in our case point to a file instead of real hardware. For this we need root so sudo up with or however you prefer to gain root privileges and afterwards run:

The loop device probably ends with a 0 but it could be different in your case. The makes sure the partition also gets a loop device, in my case. Let's make a filesystem on it.

If you want to use something other than ext4, be sure to enable it when configuring your kernel. Now that we have done that, we can mount it and start putting everything in place.

And while we're at it, we can create the rest of the file system hierarchy. This is actually standardized and applications often assume this is the way you're doing it, but you can often do what you want. You can find more info here.

We'll copy our binaries over.

You can call every busybox utility by supplying the utility as an argument, like so: . But busybox also detects by what name it is called and then executes that utility. So you can put symlinks for each utility and busybox can figure out which utility you want by the symlink's name.

These symlinks might be incorrect from outside the system because of the absolute path, but they work just fine from within the booted system.

Lastly, we'll copy some files from to the image that will be of some use to us later.

These are the basic configuration files for a UNIX system. The .script file is required for running a dhcp client, which we'll get to later. The keymap file is a binary keymap file I use for belgian azerty.

The next step is to install the bootloader - the program that loads our kernel in memory and starts it. For this we use GRUB, one of the most widely used bootloaders. It has a ton of features but we are going to keep it very simple. Installing it is very simple, we just do this:

Ubuntu users might need to install first if they are on an EFI system.

The tells grub to use the simple msdos MBR bootloader. This is often the default, but this can vary from machine to machine so you better specify it here. The options tells grub to install the grub files in /boot inside the image instead of the /boot of your current system. is a workaround for a bug in Ubuntu's grub. When you use , grub doesn't detect the root device correctly and doesn't think it needs to support msdos partition tables and won't be able to find the root partition.

Now we just have to configure grub and then our system should be able to boot. This basically means telling grub how to load the kernel. This config is located at (some distro's use ). This file needs to be created first, but before we do that, we need to figure something out first. If you look at on your own machine you might see something like this:

These are the arguments passed to your kernel when it's booted. The 'root' option tells our kernel which device holds the root filesystem that needs to be mounted at '/'. The kernel needs to know this or it won't be able to boot. There are different ways of identifying your root filesystem. Using a UUID is a good way because it is a unique identifier for the filesystem generated when you do . The issue with using this is that the kernel doesn't really support it because it depends on the implementation of the filesystem. This works on your system because it uses an initramfs, but we can't use it now. We could do , this will probably work but it has some other problems. The 'a' in 'sda' depends on the order the bios will load the disk and this can change when you add a new disk, or for a variety of other reasons. Or when you use a different type of interface/disk it can be something entirely different. So we need something more robust. I suggest we use the PARTUUID. It's a unique id for the partition (and not the filesystem like UUID) and this is a somewhat recent addition to the kernel for msdos partition tables (it's actually a GPT thing). We'll find the id like this:

Then we drop the 0x and append the partition number as two digit hexidecimal. An MBR only has 4 partitions max so that it's hexidecimal or decimal doesn't really matter, but that's what the standard says. So the grub.cfg should look like this:

The kernel is actually a debug build so it's very verbose, so to make it shut up you can add the option. This stops it from being printed to the console. You can still read it with the utility.

specifies the first process that will be started when the kernel is booted. For now we just start a shell, we'll configure a real init while it's running.

So now we should be able to boot the system. You can umount the image, exit root and start a VM to test it out. The simplest way of doing this is using QEMU. The Ubuntu package is , and just on Arch Linux.

And if everything went right you should now be dropped in a shell in our homemade operating system.

Side note: When using QEMU, you don't actually need a bootloader. You can tell QEMU to load the kernel for you.

Where points to the kernel you built on your system, not the image. and specifies the kernel arguments (don't forget the quotes). This could be useful when you would like to try different kernel parameters without changing every time.

The first process started by the kernel (now ) has process id 1. This is not just a number and has some special implications for this process. The most important thing to note is that when this process ends, you'll end up with a kernel panic. PID 1 can never ever die or exit during the entire runtime of your system. A second and less important consequence of being PID 1 is when another process 'reparents', e.g. when a process forks to the background, PID 1 will become the parent process.

This implies that PID 1 has a special role to fill in our operating system. Namely that of starting everything, keeping everything running, and shutting everything down because it's the first and last process to live.

This also makes this process very suitable to start and manage services as is the case with the very common and the more modern . But this isn't strictly necessary and some other process can carry the burden of service supervision, which is the case with the runit-like that is included with .

Unless you passed the kernel parameter the root filesystem is mounted as read-only. So before we can make changes to our running system we have to remount it as read-write first. Before we can do any mounting at all we have to mount the pseudo filesystem that serves as an interface to kernel.

provides only two ways of editing files: and . If you are not confortable using either of those you could always shutdown the VM, mount the image again, and use your favorite text editor on your host machine.

If you don't use a qwerty keyboard, you might have noticed that the VM uses a qwerty layout as this is the default. You might want to change it to azerty with . You can dump the layout you are using on your host machine with in a virtual console (not in X) and put this on your image instead.

First, we'll create a script that handles the initialisation of the system itself (like mounting filesystems and configuring devices, etc). You could call it and put it in the directory (create this first). Don't forget to this file when you're done.

The next file is the init configuration . The syntax of this file is very similar to that of 's but has several differences. For more information you can look at the file in the busybox source.

The entry is the first command will execute. We'll put our script here. You can specify multiple entries of this kind and they will be executed sequentially. The same goes for the entry, which will obviously be executed at shutdown. The entries will be executed after and will be restarted when they exit. We'll put some 's on the specified tty's. These will ask for your username and execute which will ask for your password and starts a shell for you when it's correct. If you don't care for user login and passwords, you could instead of the 's do . does the same as but asks you to press enter first. If no tty is specified it will figure out what the console is. The infront of means that the shell is started as a login shell. usually does this for us but we have to specify it here. Starting the shell as a login shell means that it configures certain things it otherwise assumes already to be configured. E.g. it sources .

We can now start our system with . You can remove the entry in because it defaults to . If you reboot the system you should see a login screen. But if you run , you'll notice it won't do anything. This happens because normally tells the running to reboot. You know - the that isn't running right now. So we have two options, we could run which skips the , or we could do this:

Because the shell we are currently using is PID 1 and you could just replace the shell process with and our system should be properly booted now presenting you a login prompt.

The root password should be empty so it should only ask for a username.

In the last part of our OS building adventure we'll look into setting up some services. An important thing to note is that we are using runit for service supervision, which is quite different from how the more common does things but it'll give you a feel for which problems it's supposed to solve and how.

A basic service consists of a directory containing a executable, usually a script. This script usually starts the daemon and doesn't exit until the daemon does. If exits will think the service itself has stopped and if it wasn't supposed to stop, will try to restart it. So be careful with forking daemons. Starting the service is done with . This is the process that actually monitors the service and restarts it if necessary. Usually you won't run it manually but doing so is useful for testing services.

The first service we are going to create is a logging service that collects messages from other processes and stores them in files.

It's that simple, but we have to make sure doesn't fork or else will keep trying to start it even though it is already running. That's what the option is for. The command can be used to control the service.

To make sure that our new service is started at boot we could create a new entry for it but this isn't very flexible. A better solution is to use . This runs for every service in a directory. So running would do the trick but this way we can't disable services at boot. To solve this issue we'll create a separate directory and symlink the enabled services in there.

If we add to all the services symlinked in will be started at boot. Enabling and disabling a service now consists of creating and removing a symlink in . Note that monitors this directory and starts the service when the symlink appears and not just at boot.

implements the well known protocol for logging. This means that it creates a UNIX domain socket at for daemons to connect and send their logs to. Usually it puts all of the collected logs in unless told otherwise. You can specify filters in to put certain logs in different files.

This will put everything the kernel has to say in a separate log file . But doesn't read the kernel logs like does. We need a different service for that.

Now we should see kernel logs appearing in . The line makes sure is started before . This is how we add dependencies in . If hasn't been started yet will fail and will exit. will attempt to restart after a while and will only succeed when has been started. Believe it or not, this is what the runit documentation says about making dependencies.

The very last thing we will do is provide our system with a network connection.

Now we're done. Yes - it's that simple. Note that udhcpc just asks for a lease from the DHCP server and that's it. When it has a lease it executes to configure the system. We already copied this script to this location. This script is included with the busybox source. These scripts usually use , , and write to . If you would like a static ip, you'll have to write a script that does these things.

That's it! We're done for now. Thanks for reading. I hope you learned something useful. I certainly did while making this.|||

build-linux - A short tutorial about building Linux based operating systems.