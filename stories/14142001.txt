This blog will serve as a tutorial on how to transmit and visualize the temperature data coming from your Raspberry Pi over to your GridDB server. We will be using GridDB as our backend database and then the KairosDB GridDB Connector to gather the data and visualize. The scope of the tutorial will go over how to install both GridDB and KairosDB and how to automatically transmit the temperature data.

There are many tutorials which cover the first portion of the project – the buying, building, and implementing of temperature sensors – so we will not go over that here. The tutorials used to get started can be found here and here. The first link goes over the physical portion — parts needed to be purchased/how to physically put together the temp sensor — and the second delves into more detail on the software side. To follow along with this GridDB tutorial, you will need to get through the first page of Harry’s tutorial, which will get you as far as having a python script printing out the temperature sensor reading.

A Raspberry Pi 3 was used for this project, but any of them will do as none of this is very intensive.

With your Pi properly reading and printing out the temperature, we need to build our GridDB server. Fire up a CentOS 6.7 machine (6.8 works too) and download GridDB’s community edition rpm and install.

It is recommended to run the sample app from GridDB’s github page to make sure your GridDB is operational.

Once we confirm GridDB works, we can focus on installing and implementing KairosDB. After KairosDB is installed it’s simply a matter of using the REST API to POST the sensor data to GridDB.

Switch back to the root user to download and install both KairosDB and the GridDB Connector.

After all of this, your KairosDB Connector should be able to run.

If you’ve been following along step-by-step, your GridDB cluster should already be running. Now we want our KairosDB up and running as well. To do this, run the following command in the KairosDB directory

The screenshot above shows KairosDB successfully running in my CentOS Virtual Machine.

Congrats, all of the backend work is now done. The last thing we need to do is modify Harry’s python script to POST via the REST API and then use Harry’s cron job to POST new thermal readings to our server every 5 minutes.

Before we modify our python script, we need to install the requests python library so that we may send HTTP requests. The latest release of Raspbian has pip installed, so simply SSH back into your Pi and run:

An HTTP response of 204 is good, it means the POST was successful. You can be sure your data is being correctly sent to your server by opening up your browser and visiting the following link

Next we’ll borrow from Harry’s Tutorial part 3 and use Unix’s built-in task scheduler: cron.|||

