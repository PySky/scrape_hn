It’s day two of the Wolfram Language in the Classroom series, and I’ll be bringing coding into an English class today. For the most part, educators and administrators consider programming a tool only for STEM courses. While coding in the Wolfram Language is excellent for STEM, it is an invaluable tool for many other subject areas as well.

Using the Wolfram Language in an English class supports a computational approach to critical thinking, which allows students to collect and analyze data to become reflective writers. In the following lesson, educators can prompt students to write just a little bit of code to reflect on their written work.



Lesson title: Becoming Reflective Writers

 Grades: 6–12

 Student goals:

 - Formulate problems in a way that enables students to use a computer to help solve those problems

 - Logically organize and analyze data

 - Discover insights on individual writing styles

Procedure:

 - Have students import their essays into the programming environment

 - Have students code and analyze the length, average word size, and the Automated Readability Index (ARI) of their writing

 - Lead the students in a discussion on insights discovered through their analysis

The first step is to have the students import an essay into either a Mathematica notebook or a cloud notebook. I used a sample ACT essay:

An easy first step in the analysis of the essay is to have the students compute the number of words in the essay:

Have the students create a word cloud to visualize the most frequent words. Is there anything surprising about the most frequent words? It seems like in the sample essay, the writer used the words “you,” “to,” “school,” and “that” most often. Depending on the type of essay, it might be worthwhile to have the student rephrase a few sentences that contain the word “you”:

To get at specific details of the essay, students can tally the words and sort them in descending order by frequency:

Have the students visualize the word frequency in a bar chart. This would be another opportunity to prompt students to reflect on their writing. Do certain words or word phrases appear frequently? Is there a way to rephrase to reduce high word frequencies?

There are other text analyses available besides word frequency, such as word length. Compute the mean word length to determine if a student’s words are on average long or short:

For older students, educators can introduce the Automated Readability Index (ARI) to determine the approximate grade level of a student’s essay:

The first step is to compute the number of characters:

We’ve already found the number of words in the essay:

Walk the students through creating a function for the ARI:

Compute the ARI for the essay:

The final result above indicates that the readability of this essay is nearly grade 6.

Depending on how familiar the students are with programming in the Wolfram Language, educators might want to structure the activity such that all the code is available, and perhaps the students can change a few things here and there. If the students have had an introduction to the Wolfram Language, I would suggest giving them hints on what functions they should use, but let the students come up with the code to accomplish these tasks.

This type of inquiry-based programming allows students to make informed decisions about their writing. With this activity, educators are providing students the opportunity to be reflective writers. I hope you enjoyed this installment of the Wolfram Language in the Classroom series. Stay tuned for tomorrow’s post on integrating Wolfram technologies into a chemistry course.

To see more posts in this series, please click here.|||

Sample English classroom lessons to help students use the Wolfram Language to collect and analyze word frequency data to become reflective writers.