It is rare as a white, british, middle class, straight, oxbridge educated man to find an adversity to succeed in spite of. Dates, times and timezones are my adversity, I suppose I should be grateful for the challenge, but I’m not, I’m sad and confused.

You see when you build an application which makes heavy use of timezones on London (as TutorCruncher does), you spend half the year (October to March) in glorious conviction everything is ok, then March hits and odd things start going wrong. No sooner have you smoothed out those problems (and finished apologising to the effected customers) than October arrives and somehow something else goes wrong.

From October to March the London timezones is (or as it's affectionately known), but from March to October we're on British Summer Time (or maybe , at this point I've lost all clue). March-October lulls one into being lazy and assuming there's no timezone offset, October-March breaks that but not by enough to always be immediately obvious. And it's always the bugs which don't jump out at you that end up screwing you.

If I was American, or Japanese or even French these things wouldn’t happen to me. As a developer I’d have grown up knowing you can never assume the timezone offset was zero. I’d be a better person.

Okay enough fluff, lets talk about some specific non sequiturs with datetimes.

I’m a massive fan of python, I realised why recently when I read the transcript of a speech by Guide Von Rossum: he explains he doesn’t think programming languages are a way of communicating with computers (“computers can take care of themselves”), but rather a way for progammers to communicate with each other (and their future selves). To me that explains why python is so elegant, simple and communicative.

However unfortunately I would say dates & times are python’s ugly side: an area where you might expect it to excel but where it comes up significantly short.

The canonical way to apply a timezone to datetimes is with the argument, but don't you dare use it with timezones which have day light saving time.

Using a timezone with a dst offset fucked everything right up.

Joking aside this is real problem with python. Either timezones should work when used with the key word argument, or they should throw a dirty great exception. The current status quo of silent failure really isn't good.

The zen of python is that there should be one and only one clear way of doing any given task. Two minutes on StackOverflow shows that there are at least 4 commonly used approaches to converting a datetime to a unix timestamp (number of seconds since 1970–01–01). What’s worse they’re subtly different, and easy to make a mistake with:

As you might imagine the situation doesn’t get any better if has a timezone.

Changing timezones for datetimes is another minefield, there are four ways of changing the timezone on a datetime.

Their names , , , have absolutely no meaning for me. I end up either experimenting with which to use or resorting to reading the docs yet again.

At least some of these actually raise exceptions when things go wrong. Other than that I’m even more confused now than when I started writing this blog, again we see that breaks completely and silently.

Using django you’d be forgiven for thinking that with timezones “enabled” ( ) datetimes saved to the database would hold timezone info. In fact they don’t.

All that’s saved in the database is a timestamp. Save a date in to the database and then get it back from the database and it'll be in django's default timezone ( ). If you want to save information about what timezone the datetime was originally it; that's your responsibility.

Theunix timestamp example above hints at another big problem: to many standard libraries related to dates and times:

All the problems above (and a lack of functionality for advanced timezones and datetime parsing) has lead to the rise of a host of external libraries:

So what’s the solution to all this? Perhaps yet another library? Please no.

First: agree which external external libraries you need. I would say and .

Then agree on sane and consistent ways of doing common tasks:

If you need extra human readable dates eg. “an hour ago” and your not using django I would recommend leaving all that stuff to momentjs. If you’re not building a web application and/or need such stuff in python I guess you’ll need arrow, pendulum or maya, but I’ve no idea which is preferable.

Need any more evidence that datetimes in python are not all well:|||

It is rare as a white, british, middle class, straight, oxbridge educated man to find an adversity to succeed in spite of. Dates, times and timezones are my adversity, I suppose I should be grateful…