HTML templates have never been this easy. Type safe using plain TypeScript with a minimal runtime footprint. No need to learn a template language, if you know TypeScript, you're set.

Although we're configuring the compiler to use React, this is not what is being used. Instead, we redirect all jsx element to typed-html's .

Now create a *.tsx file. For example: with the following content:

However, the following piece of code will NOT compile:

All template scenarios are supported with plain TypeScript.

All HTML elements and attributes are supported, except for the svg.

Missing an element or attribute? Please create an issue or a PR to add it. It's easy to add.

Void elements (elements without closing tags) are supported, however you should close them in TypeScript.

In the example above, closing the image tag is required for valid TSX code:

See this code for a list of supported void elements.

All HTML attributes support a string value, however some attributes also support a or type:

You can add custom elements by adding them to the intrinsic elements yourself:

Now you can use it:

Custom attribute names are already supported out-of-the-box for attributes with a dash ( ) in the name. For example:

As a browser is case insensitive when it comes to element and attribute names, it is common practice to use kebab case for this. However is not allowed in TypeScript. Therefore will transform to .

This transformation also works for custom attributes you define on a custom element yourself. For example:

The way this works is by using TypeScript's jsx support, but not for jsx/react interoperability. Instead, it defines the normal html tags as in the JSX namespace.

At runtime, the function is called for every html tag. It simply converts the given element to a string with minimal overhead.|||

typed-html - TypeSafe HTML templates using TypeScript. No need to learn a template library.