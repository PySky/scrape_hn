You don't even need lambda to motivate closures.

Think in Python for the moment.

Lexical scope is an important principle in program design. It is a prerequisite to WYSIWYG programming (known more formally as equational reasoning).

Now, think about how to implement lexical scope by compiling to C.

C doesn't have nested functions, so must become top-level; perhaps:

But, there's a problem here: by hoisting the definition of , the value of moves from the argument of to being a global , if any such even exists.

Some are tempted to solve the problem by creating a global version of and setting it before returning :

The troubling aspect of this solution is that it works most of the time. But, all we have to do is create two instances of the return value for to mess things up:

According to lexical scope, yields 10, while yields 20.

The naive "global" solution returns 20 for both.

We should return a new function from , every time it is called.

But, C doesn't let you define new functions at run-time.

Clearly, function pointers alone are not sufficient.

What we need are closures.

Conceptually, a closure consists of an open lambda term, plus an environment dictating the values of its free variables.

On open lambda term is one like the following:

In this term, the meaning of is not fixed.

If is 10, then the function returns 10. If it's 20, then it returns 20.

So, by itself an open lambda term is not a function.

If we pair an open lambda term with an environment that maps variables to values, it determines a function.

wherecould have been defined as:

A closure is an open lambda term paired with an environment that gives values to all of its free variables.

Under the hood, a closure is a struct with two fields: one for code and one for an environment.

Suppose you still want to compile a high-level language with nested first-class functions or lambda terms down to C (or assembly).

We need to hoist all functions to the top level.

But, even with closures, the lambda terms within still have free variables

Closure conversion solves this problem by adding a new environment parameter to a lambda term, and pulling the values of its free variables from that structure.

That is, given a term like this in Python:

it will become something like:

In this code, is roughly equivalent to in other languages or in C.

Now it's safe to perform a "lambda-lifting" transformation, where a lambda term gets hoisted to a top-level definition.

We can replace the lambda term with a fresh symbol like , and add the following top-level definition to the program:

Of course, this doesn't quite work.

There are two problems: (1) all function calls need to pass an additional parameter---the environment---but (2) the call sites don't even have access to that environment.

To solve the second problem, we'll turn lambda forms into closure-creation forms, so that they return a pair containing the procedure and the environment.

In this case, is a constructor for closures, and is a special form for building environments.

At every application site, we'll know that the procedure to be applied is no longer a procedure, but a closure. Thus, call sites like:

will become (equivalent to) something like:

And, extend it with forms for closure conversion:

The form marks a lambda term as already closure-converted.

The form is used to indicate that a call site is invoking a closure rather than a procedure.

In Racket, it's straightforward to define a procedure that closure converts a single lambda term:

as long helper functions for constructing substitutions and computing free variables are available:

If we apply closure-conversion in a bottom-up fashion, then variables end up getting copied between environments each time a closure is created.

The advantage to this approach is that it takes only a single field look-up to get the value of a variable. The disadvantage is that environments become larger, since every environment has to contain every free variable:

If space is a concern, we can apply the closure conversion in a top-down fashion to yield shared environments:

With top-down conversion, accesses to variables get chained through outer environments.

Thus, this approach sacrifices speed for space:

There's a minor caveat here. Top-down closure conversion doesn't implement shared environments exactly as expected. Some variables may still get copied if there are multiple direct child lambda terms for some lambda term.

To avoid this duplication, it's necessary to perform single-argument conversion. That is, all procedure should take one argument---a vector containing their parameters---and references to parameters should be converted into lookups in that structure.

For an implementation of closure conversion, see closure-convert.rkt.

Appel's Compiling with Continuations and Queinnec's Lisp in Small Pieces are both excellent references.

For related blog posts on compilation, see:|||

