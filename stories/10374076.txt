In the previous tutorial, we created database migrations files and also seeded some dummy data into our database. This tutorial builds on the previous one and introduces you to models in CodeIgniter. If you have not yet read the previous tutorial then I recommend you read it.

By the end of this tutorial, you will know who to work with models in CodeIgniter like a pro. You will also learn about best practices will make you write cleaner and concise code.

We will cover the following topics in this tutorial

This tutorial assumes you are familiar with;

The common myth when working with MVC frameworks is to make your models skinny and your controllers skinny. This makes models God Objects and this is an anti-pattern. The rule of divide and conquer tells us all classes should be skinny.

We will create a model base class that will extend CodeIgniter model and put all common functionality in the model base class. This will help us to write DRY (Don’t Repeat Yourself) code and make our models thin

One of the things that ruby on rails developers love about the framework is conventions over configurations. This means the framework has default conventions that it automatically applies and assumes you are following them. Other PHP frameworks such as Laravel have also embraced this concept.

This approach has two main advantages

We will also adopt some of these conventions. The following lists the conventions that we will be using

The following code shows an example of a typical model in CodeIgniter.

We don’t just want skinny controllers, we want skinny models too. We will create a base class that will have the following six (6) functions. We will apply the agreed upon conventions in this section.

For CodeIgniter to auto load our base model, we will need to save it in as

One of the things that I love about programming is I AM ALLOWED TO BE LAZY. Why waste time writing boiler plate code when I can automate the process? In the previous tutorial, we created a command line tool that helped us generate models. We will add one more function to generating models boiler plate code. Open

Now that we have our command line tool in place, let’s auto generator our first model

Run the following command to browser to the project root. Note: the project root should point to wherever you created the project

Run the following command to generate the model for brands

Note: the model name is singular. This is in accordance with conventions over configurations

You will get the following message

You will get the following

Just like that, our model is ready for use. Since we are taking advantage of conventions over configurations, we don’t have to write a single code. Our model is skinny too : ). The next section shows you how to use our new model. Keep calm and reading

This section shows you how to load a model in CodeIgniter. In the previous tutorials, we created controllers for our brands, categories and products tables. Open

Modify the constructor method to the following

HERE, loads the brand model in the constructor method. This will make the model available to all methods in Brands controller.

Add the following route for testing purposes

Load the following URL in your browser

You will get results similar to the following

We got the above results from the database with almost zero (0) coding on our part.

We already generated the model for Brand. Let’s now generate the models for Category and Product

Run the following commands. Make sure you are in the root of your project

That was it, we are done with creating the models.

Let’s now modify our controllers to pass the data to views

For the sake of brevity, we will not include the code for the views in this tutorial. You should download the attached tutorial files. The views have been updated to display data

In this tutorial, we have learnt how to create skinny models and take advantage of conventions over configurations. We also added common fields to our database for auditing purposes that the base model is taking care of.

The next tutorial will be on CodeIgniter Authentication. We will restrict access to our admin panel and define user roles.

If you found this tutorial useful, support us by using the social media buttons to like and share the tutorial. If you didn’t find it useful, please use the comments section below to let us know how we can do better next time.

Each week, a new CodeIgniter tutorial is added to our collection. Subscribe to our newsletter, like our Facebook fan page or follow us on Twitter to get free updates when the collection is updated.|||

This tutorial introduces you to CodeIgniter model conventions over configurations to speed up development using a real world example