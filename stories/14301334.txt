Much more accurate subtype and type intersection algorithms. Method sorting and identification of equivalent and ambiguous methods are improved as a result.

Implicit type parameters, e.g. Vector{<:Real} is equivalent to Vector{T} where T<:Real , and similarly for Vector{>:Int} ( #20414 ).

New syntax Array{T} where T<:Integer , indicating a union of types over all specified values of T (represented by a UnionAll type). This provides behavior similar to parametric methods or typealias , but can be used anywhere a type is accepted. This syntax can also be used in method definitions, e.g. function inv(M::Matrix{T}) where T<:AbstractFloat . Anonymous functions can have type parameters via the syntax ((x::Array{T}) where T<:Real) -> 2x .

Type parameter constraints can refer to previous parameters, e.g. type Foo{R<:Real, A<:AbstractArray{R}} . Can also be used in method definitions.

"Inner constructor" syntax for parametric types is deprecated. For example, in this definition: the syntax actually defined a constructor for , i.e. the case where the type parameters are specified. For clarity, this definition now must be written as (#11310).

The keywords used to define types have changed (#19157, #20418). In 0.6, and are still allowed as synonyms without a deprecation warning.

Multi-line and single-line nonstandard command literals have been added. A nonstandard command literal is like a nonstandard string literal, but the syntax uses backquotes ( ) instead of double quotes, and the resulting macro called is suffixed with . For instance, the syntax is equivalent to (#18644).

Nonstandard string and command literals can now be qualified with their module. For instance, is now parsed as . Previously, this syntax parsed as an implicit multiplication (#18690).

For every binary operator , is now automatically equivalent to the call . Hence, one no longer defines methods for etcetera. This also means that "dot operations" automatically fuse into a single loop, along with other dot calls (#17623). Similarly for unary operators (#20249).

Newly defined methods are no longer callable from the same dynamic runtime scope they were defined in (#17057).

is now parsed as an infix operator with the same precedence as (#19677).

is now parsed as , and can be used to add dots to every function call, operator, and assignment in an expression (#20321).

The identifier can be assigned, but accessing its value is deprecated, allowing this syntax to be used in the future for discarding values (#9343, #18251).|||

julia - The Julia Language: A fresh approach to technical computing.