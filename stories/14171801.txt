Mass assignment or over posting is an attack on websites that binds models to request. This is where active record pattern in a web application is abused to modify data items that the user should not normally be allowed to access such as password, granted permissions, or administrator status. Because the attack is use to set or alter values that the developers does not expect to be by the user.

To demonstrate how mass attack work, take for instance a web application, that has many users with different level of privileges and roles on the website. Each user is restricted on some point on what and what not to do while on the website, with the admin as the only user that have absolute role to control and do all things in the website. With mass attack a user can simply take over the role of the admin in the website and start doing things that is outside his roles and privileges.

For Instance, Let say you have a model:

The model has two properties but you only want the user to edit the property. While the IsAdmin property is used to determine the type of markup to serve depending if the request is coming from a user or and admin.

In this scenario, you want your website to serve a particular markup on normal user and a different one when the request is coming from an admin. The website is cool, when a user submits a form only the sent to the server and when model binding occurs, only the UserName field is set while field remains unset. Everything looks ok, until a malicious user sets the with little HTML manipulation, at this point, the malicious user can now do things that were exclusive to only Admin, takes control of your website and probably revokes your admin privilege and makes you a normal user. Lol but don’t worry i will show quickly ways to avoid that.

Is it possible to stop this attack? Sure, there are ways that this attack can be stopped and there are a whole lot of them and i will show you some options that can be applied to stopped this attack.

Use [Editable] on the model

In this case, you make use of are used to provide additional metadata on model and also used for validation for instance the This approach will make model binder to ignore any posting to

While this approach is good but it has a downside, in situation where you will want to update the field, this will make it difficult and brings unnecessary complexity to your code base.

Use separation of Concerns in models

This approach involves separating concerns by using two different models, that encapsulates different parts of the system. This approach is better, because it provides opportunity to stops mass assignment while also making it easy to update your

In this scenario, there’s separation of concerns because our is the model that’s providing the data needed for model binding while another model is used by View for generating markup. This approach will stop mass assignment because targeting the will not yield any result as it does not have the

While this approach is cool, it also has it’s downside. The downside is duplication of property, that means any time a change it’s made to any of the model, that same change needs to be replicated on the corresponding model. While these seems trivial, it can be a pain in the ass in large applications.

This approach involves inheriting from a base class in situations you have a common property.

This approach also involves separation of concerns that solves the problem of mass assignment and also solves the problem of duplication of field that have common property.

This approach also involves separation of concerns, that will stop mass assignment, with an approach of solving the issue of replication of Dataannotations. It does this by allowing you to defer  Dataannotations and other metadata to a different class.

One thing to bear in mind in this approach, there is relationship between this two model now, a change to will also require same change to be made to the If a change is make to the latter while same change has not been replicated on the former, though it won’t generate an error but the Dataannotations and other metadata won’t be applied again.|||

