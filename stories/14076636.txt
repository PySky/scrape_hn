Guys, you're awesome! My first coding challenge has been a major success and I hardly managed to read all of the solutions. For those of you who haven't seen the original challenge, the task was to implement a simple Tic-Tac-Toe game in the console, with the goal of delivering the best, clean design possible. Out of the stunning number of 1 submission — big thanks to Robert Brautigam — I have chosen a lucky one to analyze today.

The code structure of the lucky project looks like this:

We can easily infer a few things from the structure itself:

That's a pretty expressive package structure. The   interface next to the game's first-class citizens like   or  is a little bit surprising to me, but we'll get to it in a moment.

In general, the class looks pretty sleek. The main algorithm looks like this:

Two players make moves until the board is full or... contains a row? I suppose this method was supposed to check that there are enough players marks in a row:

The next player logic is based on an array of players and is a bit too "brilliant" to me:

Everybody knows what it's supposed to do and trusts the author that it works, but trying to understand it and reason about its correctness requires too much time and effort. To me, clean code should be obvious, not "brilliant":

The class also contains two comments, which I, personally, absolutely hate. They add no value for the reader. In this case, one of them can be misleading and another one mislocated:

Since the author made the game support other boards than 3x3, we're talking about an m,n,k-game here, not necessarily Tic-Tac-Toe (it's a minor thing, but a game nerd like me does not forgive! :) ). The game shouldn't end when there is a full row; it ends when one player has taken a full row.

I don't like this comment either. Why is the starting player in the documentation of the constructor, while the choice of the starting player is spread between   and  ? As the first part of the comment doesn't add much value, I'd delete it altogether.

You can see the full class here.

The   interface turned out pretty surprising for me. First, besides the two methods that we've already seen in action, it contains two other methods that return   s:

Knowing the game's rules, I don't know can't there be a single view for both players. I'd just use different marks for each of the players.

Second, the nasty comments are there again. Come on! The naming is so good in this project that there's no need to duplicate things in the comments.

You can see the full interface here.

This interface name and purpose is still cryptic to me. The comment says that it represents a player's view of the board.

A view can tell you what cells it contains and draw itself on the UI, but not the   you've seen in the code structure. It's an inner interface at the bottom of the  .

That could explain why we have two different views for different players. There are no "absolute" marks like Xs and Os and instead, we're talking about my marks and my opponent's marks.

The   interface also has another inner interface named  . Again there are the unneeded comments for well-named methods, but also there are two other things worth mentioning.

First, there are two unused methods:

Dead code is bad. It clutters things and there's almost no cost in removing it.

Second, it contains a particularly surprising   method:

Does that mean that the player is making moves in the game by talking to  , which are parts of the  ? And what's with the exception when the cell is not empty? Does the game blow up with an exception just because a player tried to make a bad move? (I tried to check but the game blows up with an NPE for me, just after it begins).

You can see the full interface here.

This class basically controls the whole game using   logic. With just a look on the first few lines, you know that you never want to be tasked with fixing a bug in there.

Maybe it works, but again, it's too "brilliant" for me.

The class also contains two inner classes that implement     and   respectively. As we inferred from the previous interface, the moves in the game are done via a   method:

It basically makes the   responsible for calculating some score, deciding if a move in the game is valid, user interaction (in the form of blowing off the application with an exception) and marking the cell as taken. Not bad for a method that takes 15 lines of code.

In my opinion, we should make the Game class more powerful instead:

That's it. These were the most interesting classes in the project. If you want to see the rest, you can check out the full source code here. Although this article mostly focused on the things to improve, the code was pretty clean with a particularly good naming. Even though I didn't get the coding concept by just looking at the structure, the code was good enough for me to finally grasp how it works. On the negative side, I'd delete the comments that add no value and make the code more obvious. Last but not least, again, big thanks to Robert Brautigam for participating in the challenge!|||

The Tic-Tac-Toe code challenge is over! Now, it's time for our zone leader to go through the code to point out what worked and what needed some polish.