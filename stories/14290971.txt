When it comes to building responsive and Universal apps with React Native, the lack of a performant, declarative way for specifying relative size info used to be the problem.Then came React Native v0.42 and solved that problem. Since then there have been several folks who have made responsive grids that take advantage of its performant, percentage-based layout capability. I've taken one of the simplest and most well-thought-out ones, namely, (by @rundmt), and made some significabnt changes and enhancements to it that have resulted in a simple yet powerful layout model.

You may use this grid to build responsive 2D layouts that maintain their relative proportions and predictable change their basic structure and what content they display, based on screen size, aspect ratio, and orientation.

The demos in the videos above show some of the possibilities, but this grid is capable of far more complex responsive behavior, using a sinmple set of rules (see Props and Usage sections.)

In the first demo, the grid picks the image with the closest aspect ratio to the device aspect ratio, dynamically, taking into account the current device orientation. The images themselves must be cropped by the designer so that they match the common device aspect ratios (see below) while also showing the part of the image that the designer intends to show for each aspect ratio. Since there could be many aspect ratios that correspond to different devices we should have multiple such images (and, optionally, their rotated versions.)

The following table maps some common device aspect ratios to the ratio of width/height of devices known to this developer, for both landscape and portrait device orientations. The physical device aspect ratio does not change with device rotation (i.e. a device with 16:9 aspect ratio does not become one with a 9:16 aspect ratio when it's rotated, although it does mathematically), but since the width and height get flipped when changing orientation from portrait to lanscape and vice versa, we need to have two images per each physical device aspect ratio, one for portrait mode and the other for landscape. However, if our app only supports portrait or landscape mode then we only need to have the one corresponding to that orientation.

In the second demo, the grid folds columns in a row that has been tagged with 'wrap' prop using the, using the screen-device-depebdent prop on the column. This means that different break points can be supplied for the different screen sizes.

The following are the screen width thresholds:

In the third demo, the grid emits an event from a specific row in the rendered component subtree that is subscribed to by the root component for that subtree (the Home route component in this case.) This allows the Home screen component to determine what and how to render based on both the new screen dimensions (due to orientation change) as well as the new computed value of the dimensions (incl. margins/padding) of the given row in the component subtree. In other words, it enables the component to decide what and how to render its subtree when layout changes for any given node in the subtree.

This grid fixes the mental model for grid based layouts by abandoning the format-based, columns-per-view approach (e.g. "12 column grid") and instead allowing the developer to specify the width of each grid column as a percentage of parent view's size, so 10% meams 10 column grid, and 8.333% means a 12 column grid etc. But let's not think in terms of columns per grid! That is a formatting model, not a layout system. There is no reason for a grid to be 11, 12, 13, 14, 15 or 16.6 columns. The number should be determined by actual layout needs, not by some fixed format. Plus, all other style measurements are done using percentages when making layouts that respond linearly to screen size changes, so why should we measure column width as n:12 (or n:11 etc) and yet measure everything else as n:100? It's time to fix this mental impedence mismatch and move beyond the fixed-column grid toward a free-form layout model, one that allows us to leverage the consistent, repeatable, and nestable pattern of Rows and Columns, but in a more fluid and mathematically simpler way.

While most React Native developers use (which is based on Facebook's Yoga layout algorithm) rather than the confusing mess of , and (lots has been written about the Flexbox spec and its steep learning curve, e.g. flex-grow is weird. Or is it?) there is still a fundamental problem with using since n is not a percentage of the parent view's computed or explicit width or height (as percentages are in CSS) but a comparative size factor! It's much easier to say the parent view's width or height is 100% and divide that however we like, e.g. 20%, 35% and 45% than to specify n as 0.2, 0.35 and 0.45 because the latter set of values do not correspond to percentages. You can see that by adding a fourth item with some value, e.g. 0.5, which will cause all four elements to be contained in the full width or full height of the parent (width or height depends on parent's flexDirection) so n=0.2 no longer means 20% and n=0.5 no longer means 50%. It just means that the fourth item we added is 2.5 (0.5 divided by 0.2) times wider or taller than the first item. We lose perspective on the item size relative to the size of its parent as Flexbox is concerned with the item sizes relative to each other rather that the size of each item relative to a single parent. It's like O(n) vs O(n^2) complexity for these two different sizing models in that instead of relating the size of each item to the size of its parent as a percentage (n steps), with we relate the size of each item to the size of each other (sibling) item (n^2 steps.) That's because we don't have a single scale (parent's width or height) to measure against. More importantly, we give up direct knowledge of each item's width as a percentage of the parent's width in favor of having comparative size factors for the sibling items. However, there are times when we'd like to have that, so this grid does not take that ability away from us. In fact, this grid relies heavily (under the hood) on Flexbox features like flexDirection, justifyContent, alignItems, and alignContent, but it uses them under the hood and combines them with a simple percentage-based layiut model. This results in a layout system that is simple and predictable, yet powerful.

Sometimes, we lay things out from left to right (LTR.) Other times, we might find it easier to lay things out from right to left (RTL.) I've found that RTL support to be generally lacking in both React and React Native grids, so I've added support for it. React makes it really simple. This can be very useful for apps with right-to-left text, i.e. Arabic, Aramaic, Azeri, Dhivehi/Maldivian, Hebrew, Kurdish (Sorani), Persian/Farsi, and Urdu.

To keep the grid's structure and design simple (as well as logical and consistent) Rows may not contain other Rows as children. They must be wrapped in a Column inside the row) and Columns may not contain other columns as children. They must be wrapped in a Row inside the column. The "grid" construct has been redued to its essence here, which is a composition of Rows and Columns.

Being able to readt to layout changes, including changes due to device rotation (for apps that allow it), is a key aspect of responsive design. This grid is designed to enable dynamic response to layout changes (see the demos at the start of this Readme)

Columns and Rows have enforced by design to keep them within the layout flow. Each can be moved about within their parent Row and Column, respectively, using top and bottom margins and/or offsets. They can be made to overlap within the row using a negative offset, and overlap across rows using a negative top margin. The intent is to allow movement of rows and columns without taking them out of the layout flow. This is required to work around a Flexbox layout spec glitch/deviation in React Native and to make the grid's reaction to layout change visually predictable.

Elements, including Column elements, must be wapped in a Row in order for the grid to react to layout changes in those elements, including their mounting, un-mounting and re-mounting. You can decide where the re-rendering happens in the component subtree by placing the prop at the desired Row node (see layoutEvent demo markup in Introduction.)

may be supplied as prop to Column. Possible values is 0 to Infinity. This number defines the width of the column is as a percentage of its parent view's computed or explicitly set width. It defaults to content width (or no width.) Since accepts any number from 0 to Infinity (or horizontal scroll limit), you can make the column as wide as you want.

, , and are device-dependent size values that are applied to columns.

may be applied to Column. Accepts any number. This number defines the marginLeft (or marginRight in csase of RTL mode) for the column as a percentage of its parent view's computed or explicitly set width. Offset values can also be negative. Default is 0.

, , and are device-dependent offset values that are applied to columns.

Using offset values in RTL mode moves things from right to left. Using them in normal LTR mode moves things from left to right. It's pretty normal to expect that. If you're working in both directions, this makes offsets more useful than using marginLeft or marginRight directly.

, , and - may be applied to Column. This tells the grid to hide certain columns based on the current width of the screen.

may be supplied as prop to Column to vertically align the elements and/or rows within it. Possible values are: middle, top, bottom, space and distribute. Default is top.

may also be supplied as prop to Row to align the columns within it in the vertical direction. Possible values are: top, middle, bottom and stretch. Default is top.

may be supplied as prop to Row to align the columns within it in the horizontal direction. Possible values are: center, left, right, space and distribute. Default is left.

may also be supplied as prop to Column to align its rows and/or elements within it in the horizontal direction. Possible values are: center, left, right, and stretch. Default is left.

may be supplied as prop to Row to both reverse the order of columns (or elements) inside a row as well as to set alignX to 'right.' This is useful for Hebrew and Arabic layouts.

may be supplied as prop to Row or Column. It sets the the height to 100% of the computed or explicitly height of its parent view.

may be supplied as prop to Row or Column. It sets the the width to 100% of the computed or explicitly set width of its parent view.

may be supplied as prop to Row to wrap any child element that is otherwise rendered fully outside of the width of the row's computed or explicitly set width.

may be supplied as prop to Row to vertically align the wrapped lines within the Row (not to be confused with the items that are inside each line.) Possible values are: top, middle, bottom, space, distribute, stretch. (See section on Aligning Wrapped Lines within Rows)

These make up the basic rules. As you can see the number of rules is far fewer than with bare-bone Flex. This makes it a much simpler task to create sophisticated dynamic layout behavior (fewer knobs and switches.)

There are five 'size' props for that determine its width as a percentage. The values are indicated by , , , and . The first one, , applies to all screen sizes. The others apply to screen widths of 0-480, 768-1023, 1024-1365, and 1366 and larger, respectively.

There are five 'offset' props for that determine it's offset as a percentage (from left in case of LTR and from right in case of RTL.) The values are indicated by , , , and . The first one, , applies to all screen sizes. The others apply to screen widths of 0-480, 768-1023, 1024-1365, and 1366 and larger, respectively. Unlike size values, offset values can be positive or negative.

There are four 'hidden' props for that determine whether the column is displayed or not at the given screen size. This is indicated by , , and . They apply to screen widths of 0-480, 768-1023, 1024-1365, and 1366 and larger, respectively.

The screen-size-specific size props (sm, md, lg, and xl), the screen-size-specific offset props (smOffset, mdOffset, lgOffset and xlOffset) and the screen-size-specific hidden props (smHidden, mdHidden, lgHidden, xlHidden) props refer to the effective screen width, which changes with orientation.

The following are the screen width thresholds for these props:

On a phone the Column would take up 50% of the row's width. On a normal tablet the Column would take up 33.333% of the row's width. On a big tablet the Column would take up 25% of the row's width.

In the example above, the text "test" will move further to the right with larger screen sizes.

In the example above, the column and all of it's children will be hidden on small screens like phones, but it will appear on bigger screens like tablets. The size-prefixed 'hidden' props may be applied to columns. Hidden props are all booleans. They default to false.

If you're nesting a column inside a row which is inside another column that is inside another row as below:

The nested column's size will be the column size value (size, sm, md, lg, xl) as a percentage of the width of the preceding column in the hierarchy .

This nested percentages model applies to offsets, too.

Remember that paddingTop and marginTop when given as percentages are percentages of the parent view's width, not of its height. This is per the CSS spec.

This is intended for Hebrew and Arabic layouts, which are right to left.

Notice the reversed order of the Text relative to the physical order in the markup. Also notice that columns are justified as flex-end within the row and their content is rightAligned (except for the second column which is explicitly leftAligned to mimic the rightAligned behavior in normal ltr layout)

Notice the offset values work in RTL direction now. The addition of .7 offset is to mimic the fact that the left margin in the LTR layout is smaller than the right margin in that layout, whereas it's the opposite in the RTL direction. So the .7 offset is used in RTL layout instead of the 1 offset, so alignment is identical.

By default, content in rows will extend beyond the width of the screen if the sum of the width values of the content is larger than 100% of the row's width. To wrap columns or any content within the row the content must be plural (i.e. not one really wide column as a single item won't wrap) and the Row must have the 'wrap' prop supplied. When rows are allowed to wrap what happens is the row will then contain multiple horizontal "lines" that hold the items within it. The lines themselves (as opposed to the items within them) may be aligned in the vertical direction using alignLines prop (see Props section above for details)

Here are two screens illustrating the effect of wrap, vAlign and alignLines. The first tells the row that it can turn into a multi-line row that wraps the items. The second tells it how to vertically align the items. The third tells it how to vertically align the wrapped lines that contain the items.|||

react-native-responsive-grid - Dynamic, Responsive Grid-based Layout for Universal and Orientation-Aware React Native Apps (works in Expo, XCode et al)