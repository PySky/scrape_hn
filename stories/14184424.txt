Drag & drop has become such a common feature on the web that people think it’s a no-brainer for developers. A few months back, a client told me: “How can it be that hard, it’s all over the internet!” and at that time I had no idea how to implement it. If you want to learn how it’s done, you are in the right place. Keep calm and read along!

There are plenty open-source drag & drop libraries on the Internet. My advice is not to rush into the first library you find! You might spend a few days trying to tweak it only to realize it does not meet your project requirements.

That’s why the first part of this article is dedicated to drag & drop with HTML5, a sturdy and customizable solution which does not require you to install any external library. In the second part I will look into Dragula, a straightforward solution for reordering blocks on a web page, which comes with nice style features.

The demos are available here:

Say you have two elements in your view: a draggable item and a drop zone.

To make the first element draggable, add the attribute:

By default nothing can be dropped into an element so the drop zone is not operational yet. Use the ondragover attribute to enable this behaviour:

Use the attribute to decide what to do when the item is dropped on the zone. In the example below I log a message in the console:

That’s it! You now have basic drag & drop on your web page!

You can now add some extra features with the , and attributes. For instance, a nice feature with and would be to highlight the drop zone by adding and removing a custom css class of your choice (named in the example below). Here is the full code:

Sometimes you don’t need to implement your own custom solution and a turnkey library can fit your project needs. Don’t reinvent the wheel if you don’t need to!

Dragula lets you reorder elements of the DOM. In the following example I display the word “SMILE” and let the user move the letters around to form anagrams like “SLIME” or “MILES”.

The demo is coded with React but Dragula bridges are also available for Angular 1 and Angular 2.

As I am not using Webpack or any other tool to Dragula, I use a tag in the index.html file:

Now let’s create a React component named and mount it on the div with the “anagram” id. Add a tag to the body:

The css classes and are up to you. I wrapped the divs in order to get some spacing within letters without using margins because they generate glitches with Dragula. At this point I have something like this:

Finally, add the lifecycle method in the component and apply Dragula to the created DOM node:

And there you go! You can now reorder the letters with drag & drop. You will also notice the very cool shadow image that indicates where the dragged element would be dropped. Dragula’s tagline is “Drag and Drop so simple it hurts”.

The one major drawback of the HTML5 is that it is not compatible with touch devices. If you need to implement features for smartphones or tablets, have a look at the , and events. They work pretty similarly!

As for Dragula, I definitely recommend it for DOM reordering features. It’s super-easy to use and once you know that glitches may occur with the margin and display: flex properties, everything should be okay.

You now have the tools to start coding pretty cool features with drag & drop! To go further you can check out the HTML Drag and Drop API, the Touch Events API and the Dragula options.

You liked this article? You'd probably be a good match for our ever-growing tech team at Theodo.|||

