Security on the web is hugely important, especially when someone is trusting you with their payment card information. Even though Square handles the complex parts of PCI compliance for you, we do require your e-commerce forms to be served from an HTTPS domain. There is plenty of literature online about why you should be using HTTPS for your websites (including this great post by Google), so let’s focus on how to actually get a certificate for your website. I’ll demonstrate with my personal website.

This walkthrough will assume you have the following:

I’ll enable HTTPS for my personal website: www.tristansokol.com. I use Google App Engine to serve my site, and will be using Let’s Encrypt—a free, automated, and open Certificate Authority.

If you use a different web host, it’s a good idea to see if your web hosting supports Let’s Encrypt directly. If so, it should be fairly easy to enable it for your website. You can see a list of supported web hosting providers here: https://community.letsencrypt.org/t/web-hosting-who-support-lets-encrypt/6920.

There are also a wide variety of other Certificate Authorities that can offer you similar or more advanced services for a price.

First, use OpenSSL to generate a new private key and Certificate Signing Request.

The command is pretty long, so let’s break it down:

You can read more about the options for on the offical man page: https://www.openssl.org/docs/man1.1.0/apps/req.html

You should now have two new files in your working directory (and again, yours will have your domain name instead of mine):

Certbot (formerly the Let’s Encrypt Client) is a tool to obtain certificates from Let’s Encrypt. I’m on a Mac, so I’ll be using for installation. https://certbot.eff.org should have instructions for your system.

Certbot will now take you through a guided walkthrough to set up your certificate. Eventually, I hit the following step:

This is a challenge (the url) and response pair that will be used to prove that you own this domain. That means I’ll need to add an additional request handler to this site to respond to these challenges. Luckily, it is fairly simple with App Engine.

In order to serve the challenge response from my website at the challenge URLs, I need to do a couple things. First, I created a new text file with the the response I was supposed to serve, and saved it as ACME-response.txt. Then I updated my app.yaml to serve that page at the specified directory.

This tells App Engine to respond to requests at with the content of my response. Then I used the local development server with to double-check that everything was working before deploying with .

After repeating those steps for the www. version of my domain, I can continue.

With my challenge responses good to go, Certbot generated a certifcate and two cert chains.

Now that I’ve verified and generated everything, I can go to the certificate management page of my app engine project and hit upload new certificate. For the PEM encoded X.509 public key certificate I’ll upload my file that I just generated. For the Unencrypted PEM encoded RSA private key I uploaded my file from Step 1.

Then I enabled it for both my naked and www. domains. I also edited my app.yaml file to include for the request handlers of my pages. Now when I navigate to my personal website, users will be automatically redirected to the https version, inspiring trust for visitors to my site, and keeping my e-commerce customers safe.

To learn more about Square’s e-commerce platform, check out square.com/developer.|||

Security on the web is hugely important, especially when someone is trusting you with their payment card information. Even though Square handles the complex parts of PCI compliance for you, we do…