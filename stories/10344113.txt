User authentication is indispensable to most of today’s web applications. Handling user registration and sign-in is an important feature, which can sometimes present a development overhead. Interestingly, Node and Express do not have any built-in module for authentication, that’s why Passport comes in to rescue.

To begin with, Passport is a authentication middleware for authenticating requests, it has a lot of neat features and authentication mechanisms (they called them strategies) out of the box, such as the local traditional username/password authentication, and other OAuth providers like Facebook and Twitter as a authentication method. Today we are only focusing on the traditional authentication by username/password with Passport in Node web application.

To install Passport, make sure you have Passport as a dependency in your application package.json (normally in your application root directory), then run the following command in your terminal:

If it doesn’t work, you probably need to run it as a administrator by putting “sudo” right before npm (which stands for node package manager for those are not familiar with). If all work out fine, you should see passport in your node_modues folder.

To initialize Passport, you put following code snippet into your web config file. If your application uses persistent login sessions (which normally do), the passport.session() middleware is also needed.

In the above code snippet, you did two things. First, you required the Passport module. Second, you registered two middlewares: the passport.initialize() middleware, which is responsible for bootstrapping the Passport module and the passport.session() middleware, which is using the Express session to keep track of your user’s session.

Next up you need to install Passport’s local strategy module. To do that, include passport-local in your package.json and install it from the terminal, just like you install Passport in the first place. But first thing first, we need to define how Passport handle user serialization/deserialization during authentication. Assume you have a user model defined (with Mongoose) as User:

The basic idea about serialization and deserialization is, when a user is authenticated, Passport will save the user’s _id property to the session as req.session.passport.user. Later on when the user object is needed, Passport will use the _id property to grab the user object from the database. The reason why we don’t save the entire user object in session are: 1. Reduce the size of the session; 2. It’s much safer to not save all the user information in the session in case of misuse. Pretty neat right? Notice when we query the database to retrieve the user object by its _id, we used the field options argument (the dash) to tell Mongoose to skip the password and salt fields, which is also a good security practice.

Now it’s the time to configure our Passport local strategy:

Then you need to modify the User model in order to support Passport’s authentication, in your User model you need to include:

This looks daunting at first glance, let’s break it down a little bit. Basically the idea is, whenever before we save the user back to the database, we generate a new salt using Node’s built-in module crypto. To know more about crypto, take a look at its documentation. Then we encrypt the password via crypto’s pbkdf2Sync function as a 64-bit string. This is a good practice because you don’t want to just save the exact password as a string, which is vulnerable.|||

User authentication is indispensable to most of today’s web applications. Handling user registration and sign-in is an important feature, which can sometimes present a development overhead…