We're very happy to announce the release of Chef Client v13.0!

We'd like to thank all our awesome community members who contributed code to Chef and Ohai (in no particular order):

And of course to everyone who's written documentation, submitted PRs to community cookbooks, tested current builds, or helped us in Slack, on Discourse, or on Stack Overflow - we owe you all our thanks and a big round of applause!

The behavior of and is now to always apply the sources, which may be a

String uri or an Array of Strings. If additional sources are put on the resource with the property those are added

to the configured sources.

This should enable easier setup of rubygems mirrors particularly in "airgapped" environments through the use of the global config

variable. It also means that an admin may force all rubygems.org traffic to an internal mirror, while still being able to

consume external cookbooks which have resources which add other mirrors unchanged (in a non-airgapped environment).

In the case where a resource must force the use of only the specified source(s), then the property

has been added -- setting it to false will remove the setting from the list of sources for

that resource.

The behavior of the property is now to only add and has no magic side effects on the source options.

We've upgraded to the latest stable release of the Ruby programming

language. See the Ruby 2.4.0 Release Notes for an overview of what's new in the language.

The core resource can now be declared without any name argument, no need for apt_update "this string doesn't matter but

why do i have to type it?" .

This can be used by any other resource by just overriding the name property and supplying a default:

Notifications to resources with empty strings as their name is also supported via either the bare resource name ( --

matches what the user types in the DSL) or with empty brackets ( -- matches the resource notification pattern).

A bare name to knife search node will search for the name in , , , , or fields and will

match when given partial strings (available since Chef 11). The search term has been similarly extended so that the

search API matches in both cases. The node search fuzzifier has also been extracted out to a option to Chef::Search::Query for re-use

elsewhere.

Rather than , cookbooks can now use in

the root of the cookbook. Similarly for a single default recipe, cookbooks can

use in the root of the cookbook.

The new option allows the operator to specify

the key to access ssh gateways with.

The resource has been ported from the windows cookbook,

and many bugs have been fixed.

It is now possible to load Solaris services recursively, by ensuring the

new property of the resource contains .

This is the inverse of the pre-existing whitelisting functionality.

When writing or statements, by default we now run

those statements using powershell, rather than forcing the user to set

 each time.

Zypper now defaults to performing gpg checks of packages.

The and gems are shipped by default in the chef omnibus

package, making it easier for users in airgapped environments to use

InSpec.

When Chef compiles resources, it will no longer attempt to merge the

properties of previously compiled resources with the same name and type

in to the new resource. See the deprecation page for further information.

Chef 12 made this work by picking the first option it found, but it was

always an error and has now been disallowed.

It was never implemented in the provider, so it was always a no-op to use it, the remediation is

to simply delete it.

This was always a usage mistake. The command property was used internally by the script resource and was not intended to be exposed

to users. Users should use the code property instead (or use the command property on an execute resource to execute a single command).

It is possible that this was being used as a no-op resource, but the log resource is a better choice for that until we get a null

resource added. Omitting the code property or mixing up the code property with the command property are also common usage mistakes

that we need to catch and error on.

The flag may still be used to force compile time.

In order to for community cookbooks to behave consistently across all users this optional flag has been removed.

The remediation is to set the manage_home and non_unique properties directly.

Without a declared cwd the relative path was (most likely?) relative to wherever chef-client happened to be invoked which is

not deterministic or easy to intuit behavior.

This change is most likely to only affect internals of tooling like chefspec if it affects anything at all.

PolicyFile users on Chef-13 should be using Chef Server 12.3 or higher.

The remediation is removing the self-dependency line in the metadata.

Retained only for the service resource (where it makes some sense) and for the mount resource.

Exceptions not decending from StandardError (e.g. LoadError, SecurityError, SystemExit) will no longer trigger a retry if they are raised during the executiong of a resources with a non-zero retries setting.

Previously, the syntax could be used to mean , but this API had sharp edges where methods collided

with the core ruby Object class (e.g. ) and where it collided with our own ability to extend the API. This

method access has been deprecated for some time, and has been removed in Chef-13.

Dropped the parameter that was immediately supplanted by the API (most likely nobody ever used

this) and converted the parameter from an optional positional parameter to a named parameter. These changes are unlikely

to affect any cookbook code.

The / and APIs have been fixed so that they correctly deep-dup the node data structure including every

string value. This results in a mutable copy of the immutable merged node structure. This is correct behavior, but is now more expensive

and may break some poor code (which would have been buggy and difficult to follow code with odd side effects before).

before this would have mutated the original string in-place so that and would have changed to "fizzbuzz"

while now they remain "fizz" and only the mutable copy is changed to "fizzbuzz".

Since Chef 11 merged node attributes have been intended to be immutable but the merged strings have not been frozen. In Chef 13, in the

process of merging the node attributes strings and other simple objects are dup'd and frozen. In order to get a mutable copy, you can

now correctly use the or methods, or you should mutate the object correctly through its precedence level like

 .

It has been fully replaced with in chef-client code.

Defining a property that overrides methods defined on the base ruby or on itself can cause large amounts of

confusion. A simple example is which overrides the Object#hash method which will confuse ruby when the Custom Resource

is placed into the Chef::ResourceCollection which uses a Hash internally which expects to call Object#hash to get a unique id for the

object. Attempting to create would also override the Chef::Resource#action method which is unlikely to end well for

the user. Overriding inherited properties is still supported.

Running or will give you an experience consistent with . 

will give you an experience consistent with .

The deprecated code has been removed. All providers and resources should now be using Chef >= 12.0 syntax.

This option has been unimplemented on the server side for years, so any use of it has been pointless.

This was deprecated and replaced a long time ago with mixlib-shellout and the shell_out mixin.

The core of chef hasn't used this to implement the Recipe DSL since 12.5.1 and its unlikely that any external code depended upon it.

Support for actions with spaces and hyphens in the action name has been dropped. Resources and property names with spaces and hyphens

most likely never worked in Chef-12. UTF-8 characters have always been supported and still are.

The Python package installer has been deprecated for many years,

so we have removed support for it. No specific replacement for is being

included with Chef at this time, but a -based resource is

available in the cookbooks.

All the APIs in chef/mixlib/command have been removed. They were deprecated by mixlib-shellout and the shell_out mixin API.

The ruby Iconv library was replaced by the Encoding library in ruby 1.9.x and since the deprecation of ruby 1.8.7 there has been no need

for the Iconv library but we have carried it forwards as a dependency since removing it might break some chef code out there which used

this library. It has now been removed from the ruby build. This also removes LGPLv3 code from the omnibus build and reduces build

headaches from porting iconv to every platform we ship chef-client on.

This will also affect nokogiri, but that gem natively supports UTF-8, UTF-16LE/BE, ISO-8851-1(Latin-1), ASCII and "HTML" encodings. Users

who really need to write something like Shift-JIS inside of XML will need to either maintain their own nokogiri installs or will need to

convert to using UTF-8.

The , , , and 

metadata fields are no longer supported, and have been removed, since

they were never used. Chef will ignore them in existing 

files, but we recommend that you remove them. This was proposed in RFC 85.

We now treat every file under a cookbook directory as belonging to a

cookbook, unless that file is ignored with a file. This is

a change from the previous behaviour where only files in certain

directories, such as or , were treated as special.

This change allows chef to support new classes of files, such as Ohai

plugins or Inspec tests, without having to make changes to the cookbook

format to support them.

Up until now, creating a would create a name to access the resource class object.

This const is no longer created for resources and providers. You can access resource classes through the resolver API like:

Accessing a provider class is a bit more complex, as you need a resource against which to run a resolution like so:

will now see the default value set to be immutable. This prevents cases of

modifying the default in one resource affecting others. If you want a per-resource

mutable default value, define it inside a helper like:

The fix for sending notifications to multipackage resources involved changing the API which inserts resources into the resource collection slightly

so that it no longer directly takes the string which is typed into the DSL but reads the (possibly coerced) name off of the resource after it is

built. The end result is that the above resource will be named instead of . Note that setting

the name (not the , but actually renaming the resource) is very uncommon. The fix is to simply name the resource correctly in

the first place ( )

The provider mode is always enabled when using the

 syntax. You can remove the 

line.

Please use instead.

Please use from the ChefDK instead.

Chef has always recommended , and has now been

removed.

The method has been fully replaced by the

 argument to , and has now been removed.

The default now is the formatter. There is no more automatic switching to the logger when logging or when output

is sent to a pipe. The logger needs to be specifically requested with or it will not show up.

The option does still exist, although it will probably be deprecated in the future.

If your logfiles switch to the formatter, you need to include for your daemonized runs.

Redirecting output to a file with now captures the same output as invoking it directly on the command

line with no redirection.

The chef client itself no long modifies its variable directly. When using the API now, in addition to

setting up LANG/LANGUAGE/LC_ALL variables that API will also inject certain system paths and the ruby bindir and gemdirs into

the PATH (or Path on Windows). The API still does not mangle any environment variables. During

the Chef-13 lifecycle changes will be made to prep Chef-14 to switch so that by default behaves like

 . A new flag will get introduced to call to either

get the forced locale and path settings ("internal") or not. When that is introduced in Chef 13.x the default will be 

(backwards-compat with 13.0) and that default will change in 14.0 to 'false'.

The PATH changes have also been tweaked so that the ruby bindir and gemdir PATHS are prepended instead of appended to the PATH.

Some system directories are still appended.

Some examples of changes:

The PATH in can also be overridden:

Since most providers which launch custom user commands use (service, execute, script, etc) the behavior

will be that those commands that used to be having embedded omnibus paths injected into them no longer will. Generally this will

fix more problems than it solves, but may causes issues for some use cases.

The implementation switched to to match resource, etc.

Chef Client will only exit with exit codes defined in RFC 062. This allows other tooling to respond to how a Chef run completes. Attempting to exit Chef Client with an unsupported exit code (either via or ) will result in an exit code of 1 (GENERIC_FAILURE) and a warning in the event log.

When Chef Client is running as a forked process on unix systems, the standardized exit codes are used by the child process. To actually have Chef Client return the standard exit code, will need to be set in Chef Client's configuration file.

Please see the CHANGELOG for the complete list of changes.

By default Ohai will now look for additional plugins within or . This makes it easy to drop off additional plugins during bootstrap or using the ohai cookbook without the need to edit client.rb or reload Ohai.

Ohai has been bumped from version 8.23 to version 13.0 to match the chef-client. We'll be keeping versions in sync between ohai and chef-client so you always know what version of ohai shipped with chef-client.

Lua and Scala version detection has been improved to work in more situations

We now detect and information for EC2

We now detect DMI types 40-41: additional_information, onboard_devices_extended_information, and management_controller_host_interfaces.

As time has gone on Amazon Linux has become less and less like other RHEL derivatives. We're now detecting amazon as its own platform_family to make writing Amazon Linux compatible cookbooks easier

The legacy cloud plugin that provided node['cloud'] has been replaced with the Cloud V2 plugin. If you previously used data from the Cloud plugin you will see a new, more robust, data struct at node['cloud'].

The legacy filesystem plugin that provided node['fileystem'] has been replaced with the Filesystem V2 plugin. If you previously used data from the Filesystem plugin you will see a new, more robust, data struct at node['filesystem'].

All Ohai strings are now frozen to prevent modification within cookbooks and to save memory

The latest versions of sbt no longer include a sbt --version command and other methods of version detection require setting up a project in the working directory. Until a better version detection method can be determine we're removed sbt detection.

The legacy Ohai config format used in the Chef client.rb config has been removed. See https://docs.chef.io/deprecations_ohai_legacy_config.html for details.

Sigar gem based plugins have been removed from Ohai. See https://docs.chef.io/deprecations_ohai_sigar_plugins.html for details.

The legacy run_command and popen4 helper methods have been removed. See https://docs.chef.io/deprecations_ohai_run_command_helpers.html for details.

The windows cpu model_name attribute has been updated to return the correct value. See https://docs.chef.io/deprecations_ohai_windows_cpu.html for details.

The DigitalOcean plugin has been completely rewritten to pull data from the DigitalOcean metadata endpoint, giving us more detailed droplet information. This changed the format of the data returned by Ohai. See https://docs.chef.io/deprecations_ohai_digitalocean.html for details.

Please see the CHANGELOG for the complete list of changes.

As always, you can download binaries directly from downloads.chef.io or by using the new command line utility available in ChefDK 0.19.6 or greater.

Alternatively, you can install Chef using one of the following command options:|||

Ohai Chefs! 

We&#39;re very happy to announce the release of Chef Client v13.0! 

We&#39;d like to thank all our awesome community members who contributed code to Chef and Ohai (in no particular order): 


Tor Magnus Rakvåg (Ha&hellip;