You already write software in Clojure. It pays your bills. You enjoy it. You're in an industry reaping disproportionate benefit from loose money policies, leading to a trend-chasing culture of overpaid nerds making web apps. You feel guilty about this, but there is nothing you can do about it because you have no other talents that a rational person would pay you for.

Learning Rust will probably not do much to solve that problem for you. It won't assist you in making the ontological leap from a tired stereotype into something sentient and real. You will remain a replaceable silhouette with no discernible identity. It might even exacerbate the problem. However, it will give you a useful tool for writing low-level software.

Let's start by reaffirming why we love Clojure:

Now let's think about Clojure’s weaknesses:

Rust’s strengths are Clojure’s weaknesses, and vice-versa. Rust isn’t as expressive or interoperable, and its concurrency story isn’t as complete. That said, it’s much better for performance or safety critical needs, and it can be embedded inside other programs or on very limited hardware.

Many people try to compare Rust to Go, but this is flawed. Go is an ancient board game that emphasizes strategy. Rust is more appropriately compared to Chess, a board game focused on low-level tactics. Clojure, with its high-level purview, is a better analogy to the enduring game of stones.

With Clojure, we typically start by installing Leiningen, which builds projects and deploys libraries to clojars.org. The file at the root of a project specifies metadata like dependencies. One elegant aspect of Clojure we take for granted is that it is just a library, so projects can specify in this file what version of Clojure to use just like any other library.

With Rust, we start by installing Cargo, which builds projects and deploys libraries to crates.io. The file at the root of a project specifies metadata like dependencies. Rust takes the more traditional approach of being bundled with its build tool; it isn't a library and its compiler can't be embedded into programs for REPL-driven development.

With Clojure, we start an app with , which creates a project containing this:

With Rust, we start an app with , which creates a project containing this:

As you can see, the process is basically identical, and apart from syntactic differences, they both start you off with the same main function. With Cargo, if you leave out the "--bin", it will create a library instead. Either way, be sure to think hard about your project's name. A name like "Rust" ensures many opportunities for clever puns that will surely never get tiresome or old.

While the Rust project doesn't start off with any equivalent to Clojure's namespace declaration, once you move beyond a single source file you'll need to use it. This isn't C or C++, where you just include files like a caveman. Rust separates code into modules, and each source file is automatically given one based on the file name. We can make a functions in a separate file like this:

Rust's is similar to Clojure's in that it creates a module, but they all go at the top of instead of in the files that the modules come from. From there, we can just prepend to the function names to use them. Note that they are declared with . Unlike Clojure, Rust makes functions private by default.

Rust's is similar to Clojure's in that it brings in an existing module. Here's a slightly modified , where we are bringing in symbols explicitly so we don't need to alias it, much like Clojure's does with the keyword:

Read Crates and Modules to learn more.

As you know, languages with their own package managers usually have a special format for their libraries with their own unique name. Python has its "eggs" and Ruby has its "gems". Clojure has the disadvantage of being on an existing ecosystem, so it couldn't invent its own format; it uses the same boring "jars" as other JVM languages.

Thankfully, Rust does not have this problem, and it chose to call its format "crates". This reflects the language's industrial roots and the humble, blue collar town of its sponsor: Mountain View, California. To use a crate, you add it to much like you would with . Here's what mine looks like after adding the time crate:

To use it, we first need to declare the crate at the top of :

Then, in the file we want to use it in, we'll bring it in with :

Read Crates and Modules to learn more.

Until now, we've avoided seeing types because none of our functions take arguments. Rust is statically typed. The upside is, you will curse it at compile-time instead of at runtime. The downside is, "exploratory programming" means exploring how to convince the compiler to let you try an idea. Let's modify our functions so we pass the "Hello" or "Goodbye" as an argument:

So, the syntax for arguments is similar to ML, where the name comes first, followed by a colon and then the type. In Rust, statically-allocated strings have the type of , which is pronounced as "string slice". Heap-allocated strings have the type of . This is a distinction you don't find in Clojure or other high-level languages. Read Strings to learn more.

Note that in this latest revision, we also moved the time object into a local variable using , which should be familiar to a Clojure user. In Rust, you are required to specify the types of top-level functions, but almost never for local variables. Rust has type inference, so it can figure out the type of on its own. It happens to be Tm.

As the Tm docs indicate, the function returns a TmFmt. Although has no idea what that is, it doesn't matter. It implements a trait -- similar to a Clojure protocol -- called Display, which is all that needs. This mechanism is used pervasively in Rust. Read Traits to learn more.

The distinction in the previous section between stack and heap allocation is worth focusing on. In high-level languages, you can't control which is used, so you never think about it. In C and C++, you have complete control over it, but only at the price of being more error-prone. Rust promises to give you that control while being as safe as high-level languages.

When you have direct control over memory allocation, you also have control over how values are passed to functions. In high-level languages, you normally just pass a value to a function and the language will decide whether to only pass a reference to the value or to pass an entire copy of the value. In Rust you explicitly pass references to values.

That is what the means in . Literal strings are automatically represented as a references, but under normal circumstances things will start their life as a value, and to pass them as a reference you will need to prepend them with . For example, let's pass the object to the function:

What would happen if we just did , and change the argument's type to ? The value will be "moved" into the function, and will no longer be available outside of it. Since is called after, it will throw an error. Read References and Borrowing to learn more.

A Clojure programmer will be pleased to find that Rust shares a belief in data being immutable by default. The object in the previous section cannot be mutated -- you'll get a compile error. For example, because it implements the Clone trait, it has a function called , which lets you replace it with a completely new object. This is obviously a mutation, so if we want to use it, we must declare it with :

In that example, the object is being completely replaced by a new one that uses UTC time instead of local time. Interestingly, the function still cannot mutate it, because references are immutable by default as well. If we wanted to run the function there, we would have to use a mutable reference:

The neat thing about this is that you can tell when a function is mutating an argument by simply looking at its type signature. If you don't see , it can't do so (unless it's internally mutable). It could still perform I/O like writing to the disk or requesting a network resource, so it's not necessarily pure in that sense, but at least we know that it's pure vis-à-vis its own arguments.

In Clojure, we have the concept of to represent the lack of a value. It is convenient, but if we forget to check for it, we get the dreaded . Rust follows in the footsteps of languages like Haskell by doing the same thing it does with mutability: making it explicitly part of the type.

For example, let's say we want the function to let you pass a reference or nothing at all. If you do the latter, it will just create its own object using . To express this, we have to make it an optional type. That means changing the type to and changing the value we pass to it like this:

So, if we actually want to pass a value, we surround it with , and if we want to pass the equivalent of Clojure's , we pass in . Then, in , we can check if contains a value using the function, and if so, we call on it to get its value.

This may seem like a lot of work compared to just using , but the advantage is that s are impossible. We are forced by the compiler to check if it contains a value. Additionally, it has the same advantage that has in the previous section; just by looking its type signature, we know which arguments allow no value to be passed.

In Clojure, we can get very powerful pattern matching capabilities using the core.match library. Rust has a similar mechanism baked into the language. This can be used to simplify complicated conditional statements using the keyword. Read Match to learn more.

For our purposes, pattern matching can help us make our statement safer. In the previous section, is not very idiomatic, because it manually checks and calls . It is much better to use the syntax like this:

Clojure, of course, has its own , and the concept is very similar. The only difference is that we must use pattern matching to pull the value out of the option type. That's what is doing. Pattern matching is used pervasively in Rust for everything from error handling to destructuring. Read Patterns to learn more.

In Clojure, everything is an expression, which means we can embed code inside of code without any restriction. In Rust, it's not quite as pervasive, but nonetheless almost everything is an expression. The only things you've run into that can't be expressions are declarations, such as , , , and .

What about statements? In the previous section, is deliberately verbose. There is clearly no benefit to writing redundant code like the calls to beyond ensuring one's own job security. In Rust, statements are expressions, so we can just embed it into a statement like this:

Here, we are making the local variable , which will contain either the value inside , or a new object if is . Notice the before . This is doing the opposite of by grabbing the value that the reference is referring to. We need to do this because returns a value, and we need to make sure both return the same type.

Also notice that neither expression in our statement ends with a semicolon. Semicolons are used to demarcate statements. To return a value, we just write an expression without a semicolon. This is similar to what we do in Clojure. When we want to return a value, we simply put it at the end. Read Expressions vs. Statements to learn more.

Note that the same thing is done to return a value at the end of a function. If we wanted to return our object, all we need to do is indicate that in the type signature and then put at the end of the function:

You may have wondered this entire time why ends with a bang. In Clojure, it is idiomatic to do this for functions that are side-effecting. In Rust, it is the compiler-enforced syntax for macros. Users of Lisp dialects like Clojure are certainly fond of their macros, as there is a tremendous power, simplicity, and hubristic feeling of personal superiority they afford due to their homoiconic syntax.

Rust is not homoiconic, and unsurprisingly the macro system isn't as powerful. Their primary purpose is similar to that of C macros: to reduce code duplication through symbol replacement. Unlike C macros, however, they are hygenic. Read Macros to learn more. If you are looking for the ability to run arbitrary code at compile-time, you may need to write a compiler plugin instead.

There is much more to learn about Rust from here. We haven't touched on lifetimes, the mechanism for achieving memory safety without garbage collection. We haven't looked at FFI, the mechanism for introducing segfaults and stack corruption into your program. The Rust Book, which I've been linking to all along, is a great next step for the reader.|||

