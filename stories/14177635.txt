SIMDe is an attempt to implement SIMD intrinsics on hardware which doesn't natively support them, such as calling SSE functions on ARM.

The initial focus is on writing complete portable implementations. Once that's complete we will start focusing on optimizations, such as implementing one set of functions with another.

For an example of a project using SIMDe, see LZSSE-SIMDe.

There are currently full implementations of the following instruction sets:

Work is underway to support various versions of SSE. For detailed progress information, see the instruction-set-support label in the issue tracker. If you'd like to be notified when an instruction set is available you may subscribe to the relevant issue.

There are a lot of instructions to get through, so any help would be greatly appreciated! It's pretty straightforward work, and a great way to learn about the instructions.

There are three places you'll want to modify in order to implement a new function:

Hopefully it's clear what to do by using other functions in those files as a template, but if you have trouble please feel free to contact us; we're happy to help!

If you're not sure that your implementation will be fast enough, don't worry! Right now we just want to get correct implementations in place, we can worry about optimizing later.

Each instruction set has a separate file; for MMX, for SSE, for SSE2, and so on. Just include the header for whichever instruction sets you want. If your compiler has enabled the relevant instruction set SIMDe will use the native intrinsics, otherwise a portable fallback will be used.

Symbols are prefixed with . For example, the MMX intrinsic becomes , and becomes .

Since SIMDe is meant to be portable, many functions which assume types are of a specific size have been altered to use fixed-width types instead. For example, Intel's APIs assume is 32 bits, so 's arguments are instead of . On platforms where the native API's assumptions hold (i.e., if really is 32-bits) SIMDe's types should be compatible, so existing code needn't be changed unless you're porting to a new platform.

For best performance, you should enable OpenMP 4 SIMD support by defining before including any SIMDe headers, and enabling OpenMP support in your compiler. GCC and ICC both support a flag to enable only OpenMP SIMD support instead of full OpenMP (the SIMD support doesn't require the OpenMP run-time library); for GCC the flag is , for ICC . SIMDe also supports using Cilk Plus, GCC loop-specific pragmas, or clang pragma loop hint directives, though these are not as well tested.

If you know of any other related projects, please let us know!

Sometime features can't be emulated. If SIMDe is operating in native mode the functions will work as expected, but if there is no native support the following caveats apply:

Every commit is tested with several different versions of GCC, clang, and PGI via Travis CI on Linux. Microsoft Visual C++ is tested on Windows using AppVeyor. Intel C/C++ Compiler is also tested sporadically (mostly because their optimization reports are excellent).

I'm generally willing to accept patches to add support for other compilers, as long as they're not too disruptive, especially if we can get CI support going. Travis and AppVeyor are great, but feel free to use whatever works.

To the extent possible under law, the authors have waived all copyright and related or neighboring rights to this code. For details, see the Creative Commons Zero 1.0 Universal license at https://creativecommons.org/publicdomain/zero/1.0/|||

simde - Implementations of SIMD instruction sets for systems which don't natively support them.