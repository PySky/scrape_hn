I’m going to make a bold statement: Django replaced Ruby on Rails in the hearts of many developers. With this increase in popularity, we’ve seen tons or articles, videos and websites dedicated to setting un Django and creating apps using the framework.

Unfortunately, when it comes to deployment, many of these resources only mention heroku or pythonanywhere. While these are excellent solutions for quickly shipping your MVP or prototype, it lacks a bit in terms of flexibility if you want to create your own custom deployment pipeline.

tl-dr: If you manage your own server infrastructure, we’re going to setup a git deployment workflow with django

The typical workflow usually looks like this:

Usually when you commit and push work you do something like:

being the name of the remote server your code is being pushed to. What took me a while to realise is that you can have many remotes for your repo that point to different servers.

The idea here is to add a new remote to our repo. It will point to our production server such that when we run , our code will be copied over to there.

To achieve this, we have some setup work to do on our live server. So go ahead and connect to it via ssh.

Once we’re in, we need to create a new directory for our application. This is where our deployed code will be copied to.

Now head over to and create another directory called

Inside that directory, we need to create a folder named after our project (or domain name) and append it with (not necessary but it’s good practice)

Inside this folder we’ll create what is called a repository. To do this just run:

If you run inside that folder you’ll see a bunch of files and directories (the same ones found inside the folder in normal repos). One of these directories is called .

Now open it up with vi/vim

Hit to switch to insert mode, and add the following to the file:

Please note that the first shebang line is important, it instructs git to use bash instead of the default shell. Otherwise it won’t activate our (soon to be created) virtual environment

exit vim by hitting (which in vim lingo means write and quit)

What we’ve done here is set two variables. is an alias for our project path on the server, and which is a special variable that tells git to copy the code it receives inside of our . This ensures that we’re always running the latest version of our code.

As you’ve probably noticed, this post-receive file looks very much like a shell script. That’s because it is (as explained above). It’s executed every time you push code to the repo.

The last thing we need to is make the script executable, so as soon as you’re back in the shell run:

You can now exit the server and go back to your local machine.

Now that we’ve created our remote repository, we need to add it to our project (I like to call mine ).

To make sure it was added, you can print the list of available remotes by running:

and that’s it ! You can now make changes locally, commit and deploy them live (or staging if it’s a staging server) and see your changes instantly.

You can obviously still push to github/lab or bitbucket with like you normally would.

As I mentioned in the first part, the post-receive hook is a shell script. Which means you can use it to perform all kinds of tasks against your code, like running front-end builds, installing dependencies, etc …

Here’s an example for a basic Django App:

I run my Django Apps as systemd services, if you don’t you can just call python manage.py runserver. If you want to know how to setup Django the way I do just follow this very comprehensive tutorial over on Digital Ocean

I am fully aware that there are more sophisticated methods of deployment through Docker, Travis (For continious integration) etc. But if you have a small app that you want to ship and you already have an infrastructure, I’ve found this method to be more than suitable.

Please report any missing info, mistake, error, typo. I’m on twitter if you wanna chat.|||

I am a full stack developer located in Paris, France.  Specialised in Node.js and Python