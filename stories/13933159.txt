This is the first part of a three-part introduction into webpack: Bundling front-end and adding compilation (you are here!) Speeding up build and improving the development workflow Want to stay tuned for the future posts? Subscribe

Webpack is a front-end bundler. And a front-end bundler is a tool that combines multiple modules into a single file called bundle:

While the main purpose of webpack is bundling, it also has a lot of other abilities. For example, webpack can compile your front-end, split your code into multiple files or optimize your bundle size. I’m reviewing many of these abilities in this series of posts.

If you’re not familiar with the concept of bundling, Preethi Kasireddy wrote a good introduction to it. Check it out and come back!

Given: you have an application that consists of lots of modules. Like Cut the Rope:

You want to bundle the modules into a single file: to speed up the loading of an app*, or to serve a library as a single module, or for another reason. Let’s see how webpack can help with this.

* – if you’re thinking “Wait, HTTP/2 made bundling unnecessary”, see the Khan Academy’s post about why no bundling is a bad idea

If your code uses AMD, CommonJS or ES modules, everything is simple. Webpack supports these module systems out of the box, so to compile a project with them, you’ll only need to specify the entry file and the name of the resulting file.

To do this, create a file called webpack.config.js in the root of your project with the content like this:

Once you launch webpack, it will compile your project and generate a bundle with all your JavaScript. What’s left? Replace the import of your old entry file with the name of the new file:

In case your code uses a module system different from AMD, CommonJS or ES modules, things get more complicated. To make webpack work with your code:

After you deal with the custom module format, configure the entry point and the output as described in “Good case” above.

Given: you have some code that cannot be run in the browser. This can be code that uses features from the next JavaScript standard or even code in another language like TypeScript:

You want to compile it to make it work. Let’s see how webpack helps to solve this task.

Assume you’re using Babel. You may have used it from the command line specifying the input and the output:

Or you may have used it from Gulp as a part of a stream:

webpack has a bit different approach. It uses loaders.

A loader is a JavaScript module. Webpack pipes all files through specified loaders before adding them into bundle.

A loader accepts any input and converts it to JavaScript which webpack works with. Loaders can be organized into chains; a chain accepts any input, pipes it through the loaders and passes the result to webpack. In this case, intermediate loaders can return anything, not only JavaScript.

In webpack, Babel works as a loader. To use it, install babel-loader with its peer dependencies. Then, tell webpack to apply the loader with the module.rules option:

The same approach works for TypeScript:

Or you can chain Babel and Typescript to do transformations that aren’t supported by the latter:

You can find the list of the most popular loaders in webpack docs.

Bonus point: different ways to specify a loader Above, I passed a string array into the use property to apply a loader. There’re two more ways to specify loaders. Here’re all of them: // Specifies a single loader with or without options { test: /.js$/, loader: 'babel-loader', options: { ... } }, // Specifies multiple loaders without options { test: /.ts$/, use: ['ts-loader', 'babel-loader'] }, // Specifies multiple loaders with or without options { test: /.ts$/, use: ['ts-loader', { loader: 'babel-loader', options: { ... } }] } Choose between them based on your needs. Apart from specifying loaders in webpack.config.js, you can also specify them in your import request: This can be useful for testing. Nevertheless, I don’t recommend using it in production because it makes your code dependent on a specific bundler.

Webpack can also help you manage your styles, images or any other files.

Given: front-end application with styles and other assets.

 You want to manage them with webpack to reduce the number of the necessary tools. Let’s see how to do this.

The one important thing you should remember here is the following:

In webpack, every asset is imported as a module

That is. In a traditional task manager like Gulp you split your front-end compilation by a file type:

In webpack, however, you don’t split the compilation. You treat the front-end as a whole single thing. To include styles and other assets, you import them:

and apply specific loaders to teach webpack to handle these imports. Imported files either get inlined into the bundle or placed next to it. This depends on the loader you use.

Let’s see how to use this in practice.

Here’s what the loaders do:

If you need to compile your styles with a preprocessor, append a corresponding loader into the loaders list and pass the importLoaders = 1 option to css-loader:

In the examples above, styles don’t provide any exports and therefore are just imported. However, there’s no technical limitation to provide exports, so there are approaches that do this. One of them is CSS Modules.

 With CSS Modules, importing a stylesheet returns a JavaScript object with class names specified in the file. These class names are converted to be unique, so you can use a class name like .button in several components without any collision: /* button.css */ .button { /* styles for the normal state */ } .disabledButton { /* styles for the disabled state */ } .errorButton { /* styles for the error state */ } CSS Modules are enabled by passing the modules = true option to css-loader. Read more in the CSS Modules introduction.

All the other files are also managed using loaders. Approach for every file type is different, so find the appropriate loader and look into its docs. See the list of the most popular loaders.

Here’re examples of loaders for different file types:

See the next part, “Decreasing front-end size and improving caching”

Thanks to Artem Sapegin for reviewing this post|||

This is the first part of a three-part introduction into webpack: Bundling front-end and adding compilation (you are here!) Decreasing front-end size and improving caching Speeding up build and improving the development workflow Want to stay tuned for the future posts? Subscribe What is webpack Webpack is a front-end bundler. And a front-end bundler is…