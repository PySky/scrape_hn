Throughout the years, I've gained an understanding about code maintainability as I've made my own products from scratch alone and had to maintain them for clients. This is simply a personality flaw that I dislike working with others but consequently has promoted my efficiency. With no one else to blame but myself, I could not defer my shortcomings to someone else and had to self improve in order to keep my head above water or drown in my own bad decisions.

My brain also is not one that contains a huge amount of memory at one time, only in rare cases when I'm able to be alone in thought as I'm usually bombarded with noise working at home. I tend to forget the details most of the time and focus on the high level. Consequently, I break things up into small manageable chunks that are easy to reason about, quick to fix and are intended to be side effect free so I can unit test them and rely on them like lego blocks.

Here are some examples of things I do in JavaScript as I tend to do JavaScript most.

This has the benefit of refactor as you go while keeping the code entry points the same.

This was a move requiring a framework update with async but well worth it as the thought process needing to understand the code went down dramatically.

This makes it easy to reason about the intent of the boolean statements.

Some love log files only. I prefer getting an email but in a debounced way so I can look at the log files if I really need to. Also, this only is ran on if the debug flag is active and stays out of the code otherwise with no if-else blocks.

The majority of bug fixes I do take around 5 seconds because I'm pretty adamant about following my own rules and I go for very simple code over clever tricks. Most of programming is just dumb, iterating over stuff or accessing stuff. Why cruft it with intellectual bravado? It just makes stuff hard to reason about.

This really breaks down in a team environment for me though as I find others do not do this and tend to create crufty code or "clever" code that seems to give them job security and slows down the entire project. I feel very claustrophobic in those environments.|||

