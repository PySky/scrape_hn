Flask vs. Django: Why Flask Might Be Better

Flask and Django are two of the most popular web frameworks for Python (although there are many more). In this post, I'll discuss some of the points you should consider when you're choosing between Flask and Django. We'll also walk through a "Hello, World" app in each of them to get more of a hands-on feel for how they work.

(Note: I'm a long-time Flask user and author of the book Flask by Example, so I'm personally a bit biased towards Flask. I'll keep this overview as objective as possible though).

When you first started developing Python applications, you probably developed so-called "command line applications". The user has to run these scripts in a shell or command prompt and pass input as arguments or through standard input. Several years ago, the natural progression from building these kind of applications was to build desktop applications — a program that allows users to interact using a mouse and keyboard, which contains menus and other interactive elements. These days, it's more common to transition into building web applications — your users will interact with your program via their web browser. For a nice overview of why web applications are arguably better than desktop applications, see Patrick "patio11" McKenzie's post here: http://www.kalzumeus.com/2009/09/05/desktop-aps-versus-web-apps/.

If you decide you want to build a web application, and you would like to develop it in Python, you'll probably want a so-called web framework. There are a lot of repetitive and boring parts of building backend logic, user interface, and hooking everything up to the Internet so that users can navigate your app in their browser. A web framework aims to implement all the functionality common to most web applications, such as mapping URLs to chunks of Python code.

Exactly what is implemented in the framework and what is left for the application developer to write varies from framework to framework. The biggest difference between Flask and Django is:

We will now discuss their differences in more detail.

If you're here for quick answers, this section is for you!

The first thing people usually do when they're learning a new technology is to follow the simplest set of steps that produces the output "Hello, World!" Below, we will go over the steps to build a "Hello World" applications with Flask and Django.

Note that Flask, which is focused on simplicity and minimalism, allows us to get "Hello World" running much faster, but this should not be taken to mean that Flask is the superior framework. It would probably take less time and effort to get a more sophisticated web application (such as one that handles and validates user input and stores this in a database) running in Django than in Flask. However, seeing the two Hello World projects will give us a better feel for the two frameworks, and it will allow us to describe some of their inner workings along the way.

The first thing we need to do in order to use Flask is to install it. This can easily be done by using . Depending on how your is set up, and which version of Python you usually use, you may not need the or the flag in the command below.

Once you've done that, create a Python file called and insert the following code:

Let's break down what this code does:

You can now run the command and you should see output similar to:

In the message above, '5000' is the port number that our Application is running on (yours might be different, e.g. '5003') and '127.0.0.1' means that the application is running on local host — it's only accessible on our development machine. If you open a web browser and visit http://127.0.0.1:5000/ (substituting the port number if necessary), you'll see a web page that returns the "Hello, World!" greeting.

Django can also be installed through . Run the following command:

Once it's installed, we need to run some Django scripts to create a project in order to create an app. When you installed Django, it also set up the command, which we'll use now. Run the following:

This creates a new Django "project," and will create the directory in the location where you ran the command. If you look in the directory, you'll see that it created a file and a subdirectory which is also called . Inside the subdirectory there are three Python scripts. We'll only need to worry about for our "Hello World" project.

The next step is to use Django to create an App, which is an organizational structure below that of a Django Project (one Project can contain many apps). We will use the file that the previous command created in order to create the application. From the outer directory, run the following command:

This creates the app and makes it part of our project. Now we need to configure the URL routing (like we did with in Flask). Because Django projects have more default structure than Flask apps, we'll have a few extra steps. The previous command created a directory within the outer directory. Open the automatically created file and add the following code:

Now we need to create a file for our application. Create and add the following code:

That's the URL configuration for our app ( ). We also need a URL configuration for our project ( ). Edit the file, which was automatically created (it might be a bit confusing that there are two files, but it should make sense if you think of one belonging to the entire project, routing URLs to different apps, and the other belonging to the app alone). Add the following code:

This is similar to the previous file. However, instead of routing URLs of a specific pattern to a specific view, we are routing them to a specific application. In this case, any URL that has after it will be sent along to our application and will look in to work out which view to call.

Now go back to the outer directory (the one which contains the file) and run the following command:

This runs the Django development server, which lets us visit our application on localhost, as we did with Flask. You should see output that is similar to the following:

You can ignore the warning about the migrations — this is related to the database for the web application, which we are not using. The important line is line 10, which, similarly to Flask, tells you which port the server is running on. In the example above, it is 8000, so we can visit to view our "Hello, World!" greeting (don't forget the at the end, which tells Django which app to visit).

In this post, I provided an introduction to Flask and Django, followed by a short comparison of the two, and then proceeded to show how to build a "Hello World" app using each framework.

Django is a heavier framework than Flask — if you're learning web programming, it can be harder to figure out which pieces are responsible for what functionality, and what you need to change to get the results that you want. However, once you get used to Django, the extra work it does can be really useful and can save you time in setting up repetitive, boring components of a web application.

It's sometimes difficult to choose between the two frameworks — the nice thing is that even when you get into their more advanced functionality, such as templates, the two remain very similar in many aspects (many job advertisements ask for "Django or Flask experience" as a result). It's therefore easy to switch from one to the other if you ever need to or want to.

If you're still in doubt as to which framework to use after reading this guide, I would recommend that you go with Flask — you'll figure out how the pieces fit together more easily, and you'll never have functionality lying around that you're not actually using.|||

Flask is simple, flexible and unopinionated while Django is all-inclusive. Read this brief and practical comparison of Flask and Django and find out why Flask might be more fitting for you!