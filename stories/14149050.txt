This is the third blog post in this series about ROS production. In the previous post we came up with a simple ROS prototype. In this post we'll package that prototype as a snap. For justifications behind why we're doing this, please see the first post in the series.

We know from the previous post that our prototype consists of a single launch file that we wrote, contained within our prototype ROS package. Turning this into a snap is very straight-forward, so let's get started! Remember that this is also a video series: feel free to watch the video version of this post:



This post will assume the following:

The first step toward a new snap is to create the snapcraft.yaml. Put that in the root of the workspace we created in the previous post:

Do as it says, and make that file look something like this:

This is the basic metadata that all snaps require. These fields are fairly self-explanatory. The only thing I want to point out specifically here is that the name must be globally unique among all snaps. If you're following this tutorial, you might consider appending your developer name to the end of this example.

grade can be either stable or devel. If it's devel, the store will prevent you from releasing into one of the two stable channels (stable and candidate, specifically)-- think of it as a safety net to prevent accidental releases. If it's stable, you can release it anywhere.

confinement can be strict, devmode, or classic. strict enforces confinement, whereas devmode allows all accesses, even those that would be disallowed under strict confinement (and logs accesses that would otherwise be disallowed for your reference). classic is even less confined than devmode, in that it doesn't even get private namespaces anymore (among other things). There is more extensive documentation on confinement available.

I personally always use strict confinement unless I know for sure that the thing I'm snapping won't run successfully under confinement, in which case I'll use devmode. I typically avoid classic unless I never intend for the app to run confined. In this case, I know from experience this snap won't run confined as-is, and will require devmode for now (more on that later).

You learned about this in the Snapcraft tour, but I'll cover it again real quick. Snapcraft is responsible for taking many disparate parts and orchestrating them all into one cohesive snap. You tell it the parts that make up your snap, and it takes care of the rest. Here, we tell Snapcraft that we have a single part called prototype-workspace. We specify that it builds with Catkin, and also specify that we're using Kinetic here (as opposed to Jade, or the default, Indigo). Finally, we specify the packages in this workspace that we want included in the snap. In our case, we only have one: that prototype package we created in the previous post.

This is where things get a little interesting. When we build this snap, it will include a complete ROS system: roscpp, roslib, roscore, roslaunch, your ROS workspace, etc. It's a standalone unit: you're in total control of how the user interacts with it. You exercise that control via the apps keyword, where you expose specific commands to the user. Here, we specify that this snap has a single app, called system. The command that this app actually runs within the snap is the roslaunch invocation we got from the previous post. We use plugs to specify that it requires network access (read more about interfaces), and finally specify that it's a simple daemon. That means this app will begin running as soon as the snap is installed, and also run upon boot. All this, and the user doesn't even need to know that this snap uses ROS!

That's actually all we need to make our prototype into a snap. Let's create the snap itself:

That will take a few minutes. You'll see Snapcraft fetch rosdep, which is then used to determine the dependencies of the ROS packages in the workspace. This is only prototype in our case, which you'll recall from the previous post depends upon kobuki_node and kobuki_random_walker. It then pulls those down and puts them into the snap along with roscore. Finally, it builds the requested packages in the workspace, and installs them into the snap as well. At the end, you'll have your snap.

Even though we're planning on using this snap on Ubuntu Core, snaps run on classic Ubuntu as well. This is an excellent way to ensure that our snap runs as expected before moving on to Ubuntu Core. Since we already have our machine setup to communicate with the Turtlebot, we can try it out right here. The only hitch is that /dev/kobuki isn't covered by any interface on classic Ubuntu (we can make this work for Ubuntu Core, though, more on that later). That's why we used devmode as the confinement type in our snap. We'll install it with devmode here:

Right after this completes (give it a second for our app to fire up), you should hear the robot sing and begin moving. Once you remove the snap it'll stop moving:

How easy is that? If you put that in the store, anyone with a Turtlebot (no ROS required) could snap install it and it would immediately begin moving just like it did for you. In fact, why don't we put it in the store right now?

We're about to use Snapcraft to register and upload a snap using the store account you created when satisfying the prerequisites. For that to happen, you need to sign in with Snapcraft:

Snap names are globally unique, so only one developer can register and publish a snap with a given name. Before you can publish the snap, you need to make sure that snap name is registered to you (note that this corresponds to the name field in the snapcraft.yaml we created a few minutes ago):

Assuming that name is available, you can proceed to upload it.

In the tour you learned that there are four channels available by default. In order of increasing stability, these channels are edge, beta, candidate, and stable. This snap isn't quite perfect yet since it still requires devmode, so let's release it on the beta channel:

Once the upload and automated reviews finish successfully, anyone in the world can install your snap on the computer controlling their Turtlebot as simply as:

In the next post in this series, we'll discuss how to obtain real confined access to the Turtlebot's udev symlink on Ubuntu Core by creating a gadget snap, moving toward our goal of having a final image with this snap pre-installed and ready to ship.|||

