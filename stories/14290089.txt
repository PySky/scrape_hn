In the agency where I work, the development team is small. Each of us have projects on our own, but we help each other when things get rough. In those moments our response must be very quick, but it's hard to work at top speed when you have to spend hours trying to decipher your coworker's code. And it's not necessarily wrong, it's just different from your coding style.

This post was born as a result of our need to homologate our code, so that no matter who works on the project it can be easily understood and maintained.

I read many blogs, documentation pages, stack overflow rants and websites to gather JavaScript best practices into a single post.I don't intend to deepen on all the particular cases that might arise from each point. This works more as a guide or general summary of best practices.

All sources are mentioned at the end of the post.

JavaScript is a tricky little friend. Since it is a widely adopted language there are many coding styles, so it can be complicated to work with other developers, even within our own team.

As they say in Idiomatic.JS:

I will divide the post into two big groups: development and production stage. While at the first the main goal is to have maintainable code, our priority in a production environment can be more oriented towards speed and efficiently use resources.

Your development code is not The Silmarillion or a David Foster Wallace novel. Complicated, messy, unreadable code is not a sign of skill. Chances are you'll need help to maintain it, so keep it simple and easy.

You need to choose one. I personally prefer the first.

When you are comparing booleans, notice that:

 Next values give "false" as a result

A callback is a function that runs after a particular task is completed. People usually write callbacks as they were executed from top to bottom, nesting function after function until it is a nightmare. This examples are taken from the callback hell:

Every time the loop runs, JavaScript needs to get the length of the array again and again. You can avoid this by saving this value in another variable.

Let's face it: Documentation is boring (at least it is to me). 

 Nevertheless there is something I read somewhere (I apologize to the author, since I don't remember where I got it. If anyone knows please tell me!) that I think can make documentation easier and simpler:

I like to call this code storytelling. If our code is clear, documentation is way, way easier.

 Even so, you might need to add some explaining and it is better to do so in an ordered, consistent way. The standard for JavaScript documentation is JSDoc. As you probably guessed, it has many similarities with JavaDoc.

Linters to the rescue.

 A linter notifies the programmer (often in a very annoyingly way) that the code has errors before you run it. Some of them can be customized, so you can put in all the best practices in this document (or the ones that work for you) and it will make sure you follow them. It can be annoying sometimes but it creates in you the healthy habit of writing pretty code. 

 Here's a list of some of my favorite tools:|||

From the dev.to() community. Sharing ideas that makes us all better developers.