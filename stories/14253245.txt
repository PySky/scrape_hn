The JavaScript Array Method "Map" takes an array and applies a function that we define to each element of the array.

Then it returns a new array with the returned value of the function applied to each element.

In this exercise, we're going to create an array called "startArray", which is a list of five numbers.

One, two, three, four, five.

Then we're going to create a variable called "evenArray".

What this does is it maps the function that we define, here an anonymous function, that takes in a value and calculates the value modulus 2 whether it's triple equals or not to 0.

What that means is that the 1 will go into the "x".

That will give us the "evenArray".

An array where each value goes through this anonymous function.

Then we do an "oddArray".

Where we have the "startArray" and we map this anonymous function where rather than checking if the value modulus 2 is triple equals to 0, here we're looking to see if it's not equal to 0.

That will give us the "oddArray".

Finally, we're going to create a variable called "biggerThanTwoArray".

Which takes the "startArray" and maps the anonymous function.

Where it's going to take the value and check whether it is greater than the number two.

And this anonymous function will be evaluated for each of those values.

And that will return the "biggerThanTwoArray".

Lastly, we look at the "startArray" to see what size it was.

Let's open the Chrome web browser and run this exercise.

We start with the "startArray":

And we create the "evenArray" variable:

When we look at the variable see that it is false, true, false, true, false.

Again, remember that this anonymous function gets applied to each element of the array.

So here we see that 1 modulus 2 is not equal to zero.

This is true because 2 modulus 2 will return zero.

Next we create the "oddArray":

Here we see that it returned an array where it's true, false, true, false, true.

Which is the opposite of the "evenArray".

Which is what we expect.

Then we create the "biggerThanTwoArray" variable:

When we look at this, we see false, false, true, true, true.

So we can check:

So on and so forth with 4 and 5.

Lastly, we look at the "startArray" to see that it was not modified in any way:

So again, the "map" applies a function to each element of the array and returns a new array.

That's why the "startArray" is still the same.|||

This D3 V4 tutorial lesson covers the JavaScript Array Map method.