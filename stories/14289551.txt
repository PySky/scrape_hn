Most of Node’s objects — like HTTP requests, responses, and streams — implement the module so they can provide a way to emit and listen to events.

The simplest form of the event-driven nature is the callback style of some of the popular Node.js functions — for example, . In this analogy, the event will be fired once (when Node is ready to call the callback) and the callback acts as the event handler.

The original way Node handled asynchronous events was with callback. This was a long time ago, before JavaScript had native promises support and the async/await feature.

Callbacks are basically just functions that you pass to other functions. This is possible in JavaScript because functions are first class objects.

It’s important to understand that callbacks do not indicate an asynchronous call in the code. A function can call the callback both synchronously and asynchronously.

For example, here’s a host function that accepts a callback function and can invoke that callback function both synchronously and asynchronously based on a condition:

Note that this is a bad practice that leads to unexpected errors. Design host functions to consume callback either always synchronously or always asynchronously.

Let’s explore a simple example of a typical asynchronous Node function that’s written with a callback style:

takes a file path and a callback function. It reads the file content, splits it into an array of lines, and calls the callback function with that array.

Here’s an example use for it. Assuming that we have the file in the same directory with content like this:

If we have a task to count the odd numbers in that file, we can use to simplify the code:

The code reads the numbers content into an array of strings, parses them as numbers, and counts the odd ones.

Node’s callback style is used purely here. The callback has an error-first argument that’s nullable and we pass the callback as the last argument for the host function. You should always do that in your functions because users will probably assume that. Make the host function receive the callback as its last argument and make the callback expect an error object as its first argument.

In modern JavaScript, we have promise objects. Promises can be an alternative to callbacks for asynchronous APIs. Instead of passing a callback as an argument and handling the error in the same place, a promise object allows us to handle success and error cases separately and it also allows us to chain multiple asynchronous calls instead of nesting them.

If the function supports promises, we can use it as follows:

Instead of passing in a callback function, we called a  function on the return value of the host function. This  function usually gives us access to the same lines array that we get in the callback version, and we can do our processing on it as before. To handle errors, we add a  call on the result and that gives us access to an error when it happens.

Making the host function support a promise interface is easier in modern JavaScript thanks to the new Promise object. Here’s the function modified to support a promise interface in addition to the callback interface it already supports:

So we make the function return a Promise object, which wraps the async call. The promise object exposes two arguments, a function and a function.

Whenever we want to invoke the callback with an error we use the promise function as well, and whenever we want to invoke the callback with data we use the promise function as well.

The only other thing we needed to do in this case is to have a default value for this callback argument in case the code is being used with the promise interface. We can use a simple, default empty function in the argument for that case: .

Adding a promise interface makes your code a lot easier to work with when there is a need to loop over an async function. With callbacks, things become messy.

Promises improve that a little bit, and function generators improve on that a little bit more. This said, a more recent alternative to working with async code is to use the function, which allows us to treat async code as if it was synchronous, making it a lot more readable overall.

Here’s how we can consume the function with async/await:

We first create an async function, which is just a normal function with the word before it. Inside the async function, we call the function as if it returns the lines variable, and to make that work, we use the keyword . After that, we continue the code as if the call was synchronous.

To get things to run, we execute the async function. This is very simple and more readable. To work with errors, we need to wrap the async call in a / statement.

With this async/await feature, we did not have to use any special API (like .then and .catch). We just labeled functions differently and used pure JavaScript for the code.

We can use the async/await feature with any function that supports a promise interface. However, we can’t use it with callback-style async functions (like setTimeout for example).

The EventEmitter is a module that facilitates communication between objects in Node. EventEmitter is at the core of Node asynchronous event-driven architecture. Many of Node’s built-in modules inherit from EventEmitter.

The concept is simple: emitter objects emit named events that cause previously registered listeners to be called. So, an emitter object basically has two main features:

To work with the EventEmitter, we just create a class that extends EventEmitter.

Emitter objects are what we instantiate from the EventEmitter-based classes:

At any point in the lifecycle of those emitter objects, we can use the emit function to emit any named event we want.

Emitting an event is the signal that some condition has occurred. This condition is usually about a state change in the emitting object.

We can add listener functions using the method, and those listener functions will be executed every time the emitter object emits their associated name event.

Let’s take a look at an example:

Class is an event emitter. It defines one instance function . This function receives one argument, a task function, and wraps its execution with log statements. It fires events before and after the execution.

To see the sequence of what will happen here, we register listeners on both named events and finally execute a sample task to trigger things.

Here’s the output of that:

What I want you to notice about the output above is that it all happens synchronously. There is nothing asynchronous about this code.

Just like plain-old callbacks, do not assume that events mean synchronous or asynchronous code.

This is important, because if we pass an asynchronous to , the events emitted will no longer be accurate.

We can simulate the case with a call:

Now the output would be:

This is wrong. The lines after the async call, which were caused the “Done with execute” and “After executing” calls, are not accurate any more.

To emit an event after an asynchronous function is done, we’ll need to combine callbacks (or promises) with this event-based communication. The example below demonstrates that.

One benefit of using events instead of regular callbacks is that we can react to the same signal multiple times by defining multiple listeners. To accomplish the same with callbacks, we have to write more logic inside the single available callback. Events are a great way for applications to allow multiple external plugins to build functionality on top of the application’s core. You can think of them as hook points to allow for customizing the story around a state change.

Let’s convert the synchronous sample example into something asynchronous and a little bit more useful.

The class executes an and reports the time that’s taken by that using and calls. It emits the right sequence of events before and after the execution. And also emits error/data events to work with the usual signals of asynchronous calls.

We test a emitter by passing it an call, which is an asynchronous function. Instead of handling file data with a callback, we can now listen to the data event.

When we execute this code , we get the right sequence of events, as expected, and we get a reported time for the execution, which is helpful:

Note how we needed to combine a callback with an event emitter to accomplish that. If the supported promises as well, we could use the async/await feature to do the same:

I don’t know about you, but this is much more readable to me than the callback-based code or any .then/.catch lines. The async/await feature brings us as close as possible to the JavaScript language itself, which I think is a big win.

In the previous example, there were two events that were emitted with extra arguments.

The error event is emitted with an error object.

The data event is emitted with a data object.

We can use as many arguments as we need after the named event, and all these arguments will be available inside the listener functions we register for these named events.

For example, to work with the data event, the listener function that we register will get access to the data argument that was passed to the emitted event and that data object is exactly what the exposes.

The event is usually a special one. In our callback-based example, if we don’t handle the error event with a listener, the node process will actually exit.

To demonstrate that, make another call to the execute method with a bad argument:

The first execute call above will trigger an error. The node process is going to crash and exit:

The second execute call will be affected by this crash and will potentially not get executed at all.

If we register a listener for the special event, the behavior of the node process will change. For example:

If we do the above, the error from the first execute call will be reported but the node process will not crash and exit. The other execute call will finish normally:

Note that Node currently behaves differently with promise-based functions and just outputs a warning, but that will eventually change:

The other way to handle exceptions from emitted errors is to register a listener for the global process event. However, catching errors globally with that event is a bad idea.

The standard advice about is to avoid using it, but if you must do (say to report what happened or do cleanups), you should just let the process exit anyway:

However, imagine that multiple error events happen at the exact same time. This means the listener above will be triggered multiple times, which might be a problem for some cleanup code. An example of this is when multiple calls are made to a database shutdown action.

The module exposes a method. This method signals to invoke the listener just once, not every time it happens. So, this is a practical use case to use with the uncaughtException because with the first uncaught exception we’ll start doing the cleanup and we know that we’re going to exit the process anyway.

If we register multiple listeners for the same event, the invocation of those listeners will be in order. The first listener that we register is the first listener that gets invoked.

The above code will cause the “Length” line to be logged before the “Characters” line, because that’s the order in which we defined those listeners.

If you need to define a new listener, but have that listener invoked first, you can use the method:

The above will cause the “Characters” line to be logged first.

And finally, if you need to remove a listener, you can use the method.

That’s all I have for this topic. Thanks for reading! Until next time!|||

Most of Node’s objects — like HTTP requests, responses, and streams — implement the EventEmitter module so they can provide a way to emit and listen to events. The simplest form of the event-driven…