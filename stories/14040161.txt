Material Components for the web (MDC-Web) help developers execute Material Design. Developed by a core team of engineers and UX designers at Google, these components enable a reliable development workflow to build beautiful and functional web projects.

Material Components for the web is the successor to Material Design Lite, and has 3 high-level goals:

MDC-Web strives to seamlessly incorporate into a wider range of usage contexts, from simple static websites to complex, JavaScript-heavy applications to hybrid client/server rendering systems. In short, whether you're already heavily invested in another framework or not, it should be easy to incorporate Material Components into your site in a lightweight, idiomatic fashion.

Then simply include the correct files, write some HTML, and call within a closing tag.

That's all there is to it! This is the easiest way to get up and running with Material Components for web. Check out our Getting Started guide for a more in-depth introduction to the library.

MDC-Web is modular by design. Each component lives within its own packages under the @material npm org.

All our components can be found in the packages directory. Each component has a README documenting installation and usage.

If you are using a module loader such as Webpack or SystemJS to load your JS modules, you can simply every component you need from and use it as such.

You can do the same with individual components

We also provide UMD bundles for both as well as all individual components.

When no module system is used, every component is added under the global namespace. This occurs regardless of whether or not the entire library or the individual components are used.

Every component also ships with a minified version of its UMD bundle, which can be found at .

All components which include styles provide them at , as well as a complementary minified version at . Note that CSS files for a component's dependencies are not included within the component's CSS file, so if you are using individual components you'll have to include each separately.

Each component also comes with a Sass source file that can be included in your application's Sass

Run the development server (served out of ):

We officially support the last two versions of every major browser. Specifically, we test on the following browsers:|||

material-components-web - Modular and customizable Material Design UI components for the web