Fully reproducible builds are important because they bridge the gap between auditable open source and convenient binary artifacts. Technologies like TUF and Binary Transparency provide accountability for what binaries are shipped to users, but that's of limited utility if there is no way (short of reverse engineering) of proving that the binary is in fact the result of compiling the intended source.

That's why the Debian project is putting tremendous effort into making packages reproducible. The good news is that Go builds are reproducible by default.

There are a few common sense requirements.

Interestingly, the build host architecture does not matter. In other words, builds are reproducible across cross-compiling.

I picked rclone for this exercise because it's a self-contained Go binary that vendors dependencies and offers binary installs.

Here's the binaries we will try to reproduce.

To start, we need to figure out the GOPATH and GOROOT values they were built with. This is easy to figure out using and debug information to query the file path of known functions. (PE support is... left as an exercise to the reader.)

So the GOPATH is and the GOROOT is .

For the compiler version I don't have a good solution (that will work even if DWARF is stripped), so I'll give you a bad one, that relies on the global variable backing .

You're also on your own for the compiler's default GOROOT, but will bring it up.

Finally, you might have to look at the project docs to find out what flags they use. rclone uses , and .

Since the host architecture does not matter but the environment does, we'll use Docker to do our build.

To cross-compile, I just added the GOOS and GOARCH environment variables with .

Reproducing someone else's build is not always easy. And indeed, my rclone build mismatched.

The first thing to look at is the Build ID. The Build ID is a hash of the filenames of the compiled files, plus the version of the compiler (and other things in zversion.go, like the default GOROOT). See pkg.go.

You can read it with or by extracting it from the text section.

If the build ID does not match, the first thing you can compare are the paths of all symbols, again with gosym. Here's a slight patch to the gosym.go script we used above:

If the build ID matches, then you're looking at compiler flags.

Failing all that, strings and vbindiff are your friend.

What got me with rclone was not rebuilding the compiler in the new location to get the right default GOROOTâ€”the step of the Dockerfile. If you enjoy debugging, here's the tootstorm on Mastodon.

So good news, rclone is not backdoored!

If you enjoy these exercises, you can follow me on Twitter or Mastodon.|||

