We recently moved away from Bootstrap to Semantic UI at SupportBee, and I personally really enjoyed that change. It had very usable UI components, and the grid system was way better, offering simple classes that read like simple English. Overall, I felt that I could spin up a new page real fast with Semantic.

Assuming that you have Semantic UI and Simple Form setup in your project, here is the Simple Form initializer to work with Semantic. Replace the code in , with the code below.

# Use this setup block to configure all options available in SimpleForm. # Wrappers are used by the form builder to generate a # complete input. You can remove any component from the # wrapper, change the order or even add your own to the # stack. The options given below are used to wrap the # Any of these extensions can be disabled for a # You can make any of these extensions optional by # Determines whether to use HTML5 (:email, :url, ...) # You can also pass a string as f.input placeholder: "Placeholder" # They are disabled unless you pass `f.input EXTENSION_NAME => true` # to the input. If so, they will retrieve the values from the model # if any exists. If you want to enable any of those # extensions by default, you can change `b.optional` to `b.use`. # Calculates min and max from length validations for numeric inputs # Values are similar to the default wrapper above, with different classes # The default wrapper to be used by the FormBuilder. # Define the way to render check boxes / radio buttons with labels. # Method used to tidy up errors. Specify any Rails Array method. # :first lists the first message for each field. # Use :to_sentence to list all errors for each field. # Series of attempts to detect a default label method for collection. # Series of attempts to detect a default value method for collection. # You can wrap a collection of radio/check boxes in a pre-defined tag, defaulting to none. # You can define the class to use on all collection wrappers. Defaulting to none. # You can wrap each item in a collection of radio/check boxes with a tag, # defaulting to :span. Please note that when using :boolean_style = :nested, # SimpleForm will force this option to be a label. # You can define a class to use in all item wrappers. Defaulting to none. # How the label text should be generated altogether with the required text. # Semantic UI has its own astrick # You can define the class to use on all labels. Default is nil. # You can define the class to use on all forms. Default is simple_form. # You can define which elements should obtain additional classes # Whether attributes are required by default (or not). Default is true. # Tell browsers whether to use the native HTML5 validations (novalidate form option). # These validations are enabled in SimpleForm's internal config but disabled by default # in this configuration, which is recommended due to some quirks from different browsers. # To stop SimpleForm from generating the novalidate option, enabling the HTML5 validations, # Collection of methods to detect if a file type was given. # Custom mappings for input types. This should be a hash containing a regexp # to match as key, and the input type that will be used when the field name # matches the regexp as value. # Custom wrappers for input types. This should be a hash containing an input # type as key and the wrapper that will be used for all inputs with specified type. # Namespaces where SimpleForm should look for custom input classes that # When false, do not use translations for labels. # Define the default class of the input wrapper of the boolean input. # Defines if the default input wrapper class should be included in radio # Defines which i18n scope will be used in Simple Form.

While the above configuration is enough to create Semantic UI Forms out of the box, all the relevant classes would be applied to the form and it’s inputs. However, there are some components that need custom wrappers. We’ll look at how we can use the wrappers we added above in our view templates. We’ve only added custom components for UI Checkboxes, and Input Label Addons.

In the snippet below, pass the checkbox type you want to create to . In this case we’ve passed . Other options are and .

We use and to generate input addons, like in the screenshots below.

I hope you find this useful in your project. Leave a comment below if you have any questions, or even if you don’t, just say hi!|||

