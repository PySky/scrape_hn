Source code versioning is a subject that has been widely discussed and which has many solutions created to address it, like Git, Subversion and Mercurial. But, what about our data and the schema that represents it? How do they keep in sync with the application that manipulates it? In this article, we are going to learn about Flyway, a solution that helps developers to handle version control of database schemas and data on Java applications.

Flyway is a tool, developed by Boxfuse, that enables developers to apply version control practices to the database that supports a Java application. With it, we can tightly integrate plain SQL scripts in the lifecycle of an application, guaranteeing that its database will always be compatible without manual intervention.

Flyway works by checking the current version of the database and by applying new migrations automatically before the rest of the application starts. Whenever a developer needs to change the schema of a database, or to issue some changes to the data residing on it they need to create a SQL script, following a name convention in the directory read by Flyway. Usually this directory is , but one can change the default value if needed.

For example, the following are all valid Flyway scripts:

Internally, Flyway controls the version of a database through records on a specific table in the database itself. The first time that Flyway runs (i.e. in the first migration), it creates a table called , with the following definition:

Then Flyway adds to it a record identifying that the first migration occurred. For example, let's say that our script is called . When Flyway syncs up the database with this script, it adds to the table a record like this:

Then when a developer adds a second script, naming it as something like , Flyway is able to query the table to see on what version the database is and can figure it out what scripts it needs to run.

Most of the default properties used by Flyway to control the version of the database can be changed. If needed, developers can change the name of the table that Flyway uses, whether migrations can be run out of order or not, where these scripts are, and etc. Take a look at Flyway's documentation for more.

Flyway easily integrates with most of the build tools available on the Java environment. Out of the box, Boxfuse made available plugins to Maven, Gradle, Ant and SBT. But, even if we don't use one of—or don't want to integrate with—these build tools, we can still use Flyway through a CLI tool, or directly through its API.

Besides these options, a few plugins were crafted by the developers community. These plugins make smooth the usage of Flyway with some popular frameworks like Spring Boot, Grails and Play.

In the next section, we will see Flyway in action with Spring Boot.

To better understand how Flyway, and other solutions that handle version control of databases, can help us, let's do a practical exercise. We will start with an empty Spring Boot application where we will first add a entity with contact details (contact name, email address and phone) directly on it. We will use Flyway to create the database schema (a single table) with some data. We will also create one RESTful endpoint that will be used to retrieve all the persisted customers.

After creating this first version of our application, we then will refactor it to extract contact details to an entity of its own, . This new entity will make it possible to add more than one contact to a . In this process, we will use Flyway again to create the second table, , and to migrate the preexisting customers' contacts.

First of all, let's fork and clone the GitHub repo that contains an empty Spring Boot application. This application is based on Maven, which makes possible to import it in any Maven compatible IDE. So far, only two dependencies were added to it: and .

Running the application is just a matter of issuing in the root directory of it, or through our IDE. But it won't do much for the time being as we didn't add the entity, nor the RESTful endpoint.

To integrate Spring Boot with Flyway, we will need to add as a dependency to our application. But, as we still don't have any database configured, we will also add another dependency: . HSQLDB is an in-memory database, written in Java, that easily integrates with Spring and, as such, will help us on our exercise. To add both dependencies, open the file and include the following elements:

To make HSQLDB persist our data after an application restart, we will need to configure it by editing the file with following key-value pairs:

Now that we have properly configured a database in our application, and Flyway to handle its versioning, let's create the entity. We will create this entity in the package, with the following content:

To be able to persist and retrieve customers from the database, we will create an interface that extends . We will call this interface and will also create it in the package. will have the following content:

If you are not familiar with Spring Data, you might think that this interfaces isn't much of a help. But that is not true, this interface does a lot actually. It enables us to customers, customers, and customer by its ID. It also gives us a nice feature called Query Methods, that allows us to create queries simply by defining an empty method declaration. For example, we could create a query to find by their names by adding a single-line method declaration like . Take a look at the reference for more.

We are now capable of instatiating customers and persisting them in the database. But we didn't define a way to expose these customers to the world (like to a web browser or to any other device). So, let's tackle this by creating a RESTful endpoint that responds for . For that, we will create a class called , in the package, with the following source code:

As we can see, this class uses , which is automatically injected, to expose customers. With this class, we can now respond to HTTP requests with an array of persisted customers. But the problem is that we don't have anything persisted yet and, actually, we don't even have the table on our database. Let's use Flyway to create the table and populate it.

To create our table, and populate it with a few records, we will create a SQL script in the folder. Flyway, as stated before, organizes its scripts based on the numeric part of the naming pattern. As this will be our first script, we will create the file naming it as . The content of this file will be:

If we start our application now, Flyway will identify that this script is unapplied and will execute it. This process happens before Spring Boot gets a chance to bootstrap the application. This is important to guarantee that our database will have the table available, otherwise we would face an error when issuing requests to the endpoint created.

As our application was properly configured, and Flyway got a chance to run the script, we can now issue requests to without a problem. The following screenshot shows the result of a request issued using Postman—which is a great tool to use when developing RESTful endpoints.

As we can see, the endpoint responded properly with the array of customers created in our first script.

Let's say that the Product Owner of our team has spoken to the users of the application and that they were complaining about not being able to save more than one contact per customer. What can we do to help these users? Well, the first thing we can do is to refactor the entity, extracting the contact fields to an entity of its own. This will require us to use JPA to tie both entities, mapping Many contacts To One customer, which is accomplished through the annotation. Lastly, will require us to create another endpoint to permit the front-end application to retrieve an array of contacts of a specific customer.

The refactoring stated above refers only to the source code of our application. Accomplishing all these changes won't be enough as the database will still contain a single table, , with contact details embedded. To fix this issue, we will create another Flyway script, which will contain a command to create the table and another command to move customers' contact details to this new table.

Let's begin the refactoring process by addressing the source code of our application. The first thing we will do is to create the class, which will hold contact details of customers. We will create this class in the package, with the following content:

Note that the entity just created has the exact same fields that refer to the contact details of a customer, plus a property that points to the customer itself. This property has three annotations on it:

After creating the entity, we will now refactor the entity to remove contact properties from it. The class will now look as:

The only property on that refers to contacts now is a of contacts annotated with and . The first annotation keeps the existing endpoint, , from serializing contacts of customers, which could be expensive as there are no limits to the number of contacts on a customer. The second annotation, , indicates to JPA that can exist One customer To Many contacts.

The last thing that we will do to finish the source code refactoring, is to create the new endpoint which will be responsible for serializing the contacts of a customer. This endpoint will be created in the class as follows:

Note that to retrieve the contacts of a customer, the request issuer will have to append the customer id to the URL of the endpoint. That is, to get the contacts of Coca Cola, the front-end application has to issue a request to . But not before refactoring the database.

As already mentioned, running the application after refactoring the source code, and before refactoring the database, will generate errors. The database doesn't have the table yet, and the contact details are still residing in the table. To address this issue, we will create a second Flyway script. We will call this script and will create it alongside with in the folder. On it, we will add the following SQL commands:

This script has three responsibilities:

This is everything we need to do to refactor our database, and it is enough to make it compatible with the refactored source code. Running the application now will make Flyway identify the new script available, , and run it before Spring Boot, making everything work together smoothly.

If we issue a request to now, the endpoint will properly respond with the contact details of Coca Cola, as shown below:

Auth0 makes it easy for developers to implement even the most complex identity solutions for their web, mobile, and internal applications. Need proof? Check out how easy it is to secure a RESTful Spring Boot application with Auth0.

For starters, we would need to include a couple of dependencies. Let's say that we are using the Apache Maven build manager. In that case, we would open our file and add the following dependencies:

After that we would simply create, or update, our extension, as shown in the following code excerpt:

And then configure three parameters in the Auth0 SDK, which is done by adding the following properties in the file:

Making these small changes would give us a high level of security alongside with a very extensible authentication solution. With Auth0, we could easily integrate our authentication mechanism with different social identity providers—like Facebook, Google, Twitter, GitHub, etc—and also with enterprise solutions like Active Directory and SAML. Besides that, adding Multifactor Authentication to the application would become a piece of cake.

Want more? Take a look at Auth0's solutions and at an article that thoroughly describes how to secure a Spring Application with JWTs.

Having a tool like Flyway integrated in our application is a great addition. With it, we can create scripts that will refactor the database to a state that is compatible with the source code, and we can move data around to guarantee that it will reside in the correct tables.

Flyway will also be helpful if we eventually run into an issue where we need to recover the database from a backup. In a case like that, we can rest assured that Flyway will correctly identify if the combination of the source code version and the database version that we are running have any scripts that need to be applied.|||

Sync the database schema up with your application with Flyway