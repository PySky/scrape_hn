All sorts of things, the object behaves much in the same way as Rust's movable types (but is not 100% identical). You can for example return it from a function, which transfers ownership in a compiler enforced way:

If you try to pass an object as an argument like this:

a regular class would get copied but for a move-only type you get a compiler error:

../prog.cpp:13:5: note: 'MoveOnlyInt' has been explicitly marked deleted here

Instead you have explicitly tell the compiler to move the object:

Some of you might have spotted a potential issue. Since a MoveOnly object can be converted to an int and there is a constructor that takes an int, that could create two objects for the same underlying integer. Like this:

The compiler output looks like the following:

../prog.cpp:13:5: note: 'MoveOnlyInt' has been explicitly marked deleted here

No. Rust's borrow checker does more and is stricter. For example in C++ you can use a moved-from object, which may yield a null pointer dereference if your underlying type was a pointer. You won't get a use-after-free error, though. On the other hand this class is 18 lines of code that can be applied to any existing C++ code base immediately whereas Rust is a whole new programming language, framework and ecosystem.

Anyone is also free to do the wrong thing and take a copy of the integer value without telling anyone but this issue remains in every other language as well, even in unsafe Rust.|||

