This article was peer reviewed by Wern Ancheta and Viraj Khatavkar. Thanks to all of SitePoint’s peer reviewers for making SitePoint content the best it can be!

Test automation, continuous integration, and continuous delivery are quite widespread in the community now. This brought to life multiple services trying to make the process more enjoyable and less overwhelming for developers, so they can focus on delivering software instead of building/configuring tools to do that. One of those services is SemaphoreCI.

In this article, we’re going to cover how to use our own deploy scripts and tools to continue the deployment process after a successful test.

We will be using SemaphoreCI for continuous delivery and Deployer to push our code to the DigitalOcean production server. If you’re not familiar with Deployer, we recommend you check out this introduction.

We’ll be using a 500px application that loads photos from the marketplace. It was built using Laravel and you can read the full article about its building process here, and find the repo on GitHub.

The way Deployer works is by us defining servers, and then creating tasks that handle the process of deploying the application to those servers. Our script looks like this:

You should read the Deployer article if you’d like to learn more about what this specific script does. Our next step is to set up a SemaphoreCI project. Please read the crash course article if you’ve never tried SemaphoreCI before, and do that.

To configure the deployment strategy, we need to go to the project’s page and click .

Next, we select the generic deployment option, so that SemaphoreCI gives us the freedom to add manual configuration.

After selecting automatic deployment, SemaphoreCI will give us the ability to specify deployment commands. The difference between manual and automatic, is that automatic deployment is triggered after every successful test, while manual will let us deploy any successful commit.

We can choose to include the in our repo as a PHAR file or require it using Composer. Either way, the commands will be similar.

If we chose to deploy the application using SSH, SemaphoreCI gives us the ability to store our SSH private key on their servers and make it available in the deployment phase.

Note: SemaphoreCI recommends that we create a new SSH key specifically for the deployment process. In case someone stole our keys or something, we can easily revoke it. The key will also be encrypted before storing it on their end.

The key will be available under , so the can be left at the default.

Now that everything is set up, we need to commit some changes to the repository to trigger the integration and deployment process.

If something went wrong, we can click on the failed deploy process and see the logs to investigate the problem further.

The above screenshot is a failed commit due to the command returning an error because the extension wasn’t enabled.

Note: Another neat trick that SemaphoreCI provides is SSHing to the build server to see what went wrong.

The same process we used here may be applied to any other deployment tool. Laravel Envoy, for example, might be configured like this:

And in the deployment command step, we would install and run Envoy:

That’s it! Envoy will now authenticate with the key we’ve added and run the update command we specified.

CI/CD tools are a great improvement to a developer’s workflow, and certainly help teams integrate new code into production systems. SemaphoreCI is a great choice that I recommend for its easy to use interface and its wonderful support. If you have any comments or questions, please post them below!|||

Younes sets up a CI pipeline on SemaphoreCI and makes sure it invokes Deployer or Laravel Envoy to deploy the app after a successful commit / test.