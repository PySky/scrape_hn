At Originate we use CircleCI for all of our Continous Integration & Delivery needs. We’ve recently started to use DC/OS to deploy some of our software. This blog post will walk through the steps required to deploy a simple Marathon web service to DC/OS from CircleCI.

We’ll start with a very basic and build it up as we go.

The best way to interact programmatically with DC/OS is through the CLI tool provided by Mesosphere. Let’s add it to our build container.

Now let’s setup a basic Marathon service. We’ll use a stock image as a stand in for a web service. Our service will have one instance with 1 CPU and 512MB of RAM and will map a random port on the host to port 80 in the container.

The next step is to add a small script to send the manifest to DC/OS using the CLI tool. The Marathon API has separate endpoints for creating and updating a service so we have to check if a service already exists before doing the right thing. We’re using when updating to override any previous, potentially faulty deployment.

We can now add the deployment section to the file.

We’re almost there, the last thing we have to resolve is how to authenticate the DC/OS CLI to the cluster. Without that we can’t call the APIs we need to deploy our service.

DC/OS Community Edition uses an OAuth authentication flow backed by Auth0. This is used for both the browser-based authentication to get access to the admin dashboard as well as for the CLI tool. In the latter case, the user has to follow a slightly different browser-based flow yielding a token that is then provided to the CLI.

In a CI/CD setting, anything that requires a manual user intervention is a non-starter. Enter dcos-login, the tool that we’ve created to solve this problem. Given a set of Github credentials it will replace the human component in the login flow and let you run the DC/OS CLI in your CI environment.

We recommend creating a separate “service” Github account just for that purpose. Once that’s done you can set and environment variables in CircleCI to the username and password for that account.

Just like the DC/OS CLI, we need to pull down to our build container.

Next we need to use to authenticate the DC/OS CLI. You’ll also need to provide the URL to your DC/OS cluster in the environment variable.

Finally, tie it all together in the file.

That’s it, you can now deploy your services from CircleCI to DC/OS Community Edition. The dcos-login tool is free and open source. All the code in this blog post can be found in this example project.

Marathon lets you pull docker images from private registries with a bit of configuration. You need to tar up the directory of an authenticated host and instruct Marathon to pull down that archive when launching a new instance of a service:

If you’re using Marathon LB you can add the following section to your :

The value instructs Marathon LB to map the first port in your port mapping (index 0, HTTP in our case) to that virtual host. You should have an entry in your DNS zone pointing to the public DC/OS nodes running Marathon LB

You can instruct Marathon to perform a health check on your behalf by adding the following to your :

As with the virtual host above corresponds to the index of the port in the section.|||

At Originate we use CircleCI for all of our Continous
Integration & Delivery needs. We’ve recently started to use DC/OS to deploy some of …