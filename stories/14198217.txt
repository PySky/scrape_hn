I am no stranger to Git, but I always had an irrational fear towards it. You see, the whole point Git is that I do not have to copy my WIP code to a folder called from time to time, or whenever I plan to make potentially breaking changes. Git promises to do all of that for me, and do it in the-right-way™ while it is at it. When Git does its job correctly, it is very good at what it is doing – until it does not, and that fear sometimes deter me to use Git altogether.

Okay. Maybe it’s not Git’s fault. Let me rephrase – Git is a very good software, but it is very disaster-prone.

I am pretty sure that anyone who has used Git extensively has at least screw up a commit or several of it, at least once. Or twice. Or thrice. Or even worse, I believe many people have at one point of their “Git career” screw up a branch or even a repository. Thing is, while Git is a wonderful piece of software, it can be too powerful, and we all know, that with great power, comes great responsibility.

Here’s something that might ring a bell, especially for those who first learned to use Git on the command line. Prior to using Magit, whenever I do something I deem risky I would fallback to typing out the Git commands manually on the command line. Sometimes I have to use the command line tool, not because I want to, or for the previously mentioned reason, but because the GUI client simply cannot do what I want or the way I want it. Now here is why I love Magit so much: it does almost everything that I want, and the best part is the workflow is just the same as if how I would use the Git command line. So far the only time Magit failed to deliver is when I wanted to perform . Okay to be honest I am not completely sure if it really cannot do it, but I surely have not found out how.

Anyway, as I previously said, I love Magit so much because the workflow is exactly like how it would be like when using the command line. When I say this, I meant this: you know how many Git GUI clients will try to cut down many steps for you in the name of simplicity and intuitiveness? As much as I like the intention behind it, I despise this. Git is very complex, whenever you want to achieve something, often you need to enter multiple commands to do what you are trying to achieve, and many times the order of the steps are crucial. The problem of all these attempts of simplification is that I do not know what exactly it did, what extra little things it might have done that I do not want it to do, and sometimes it does not even do what I want at all. I only interned at Configura for 3 months (the first time I actually used Git seriously), and even in that short 3 months I witnessed multiple times how VSCode’s Git utility screwed up my colleagues’ branches. Call me old school, but I love Magit for the same reason I love C – it is simple, powerful, and most importantly, it is PREDICTABLE.

I actually wanted to show some short cases of how I use Magit, and why I like it so much, but I do not really have the time for that at the moment. College and partying are eating up most of my time, but I guess there are enough well-written guides for that anyway. It is potentially my final year of formal education and I intend to make the most out of my remaining time in school.|||

The best Git client - Wei Jian Gan