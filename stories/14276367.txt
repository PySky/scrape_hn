Fast, simple, reliable. HikariCP is a "zero-overhead" production ready JDBC connection pool. At roughly 130Kb, the library is very light. Read about how we do it here.

Or download from here.

Microbenchmarks were created to isolate and measure the overhead of pools using the JMH microbenchmark framework. You can checkout the HikariCP benchmark project for details and review/run the benchmarks yourself.

Anaylsis of HikariCP v2.6, in comparison to other pools, in relation to a unique "spike demand" load.

The customer's environment imposed a high cost of new connection acquisition, and a requirement for a dynamically-sized pool, but yet a need for responsiveness to request spikes. Read about the spike demand handling here. 

 



AKA "What you probably didn't know about connection pool sizing". Watch a video from the Oracle Real-world Performance group, and learn about why connection pools do not need to be sized as large as they often are. In fact, oversized connection pools have a clear and demonstrable negative impact on performance; a 50x difference in the case of the Oracle demonstration. Read on to find out.. 



We'd like to thank the guys over at WIX for the unsolicited and deep write-up about HikariCP on their engineering blog. Take a look if you have time. 

 

 



Open source software like HikariCP, like any product, competes in the free market. We get it. We understand that product advancements, once public, are often co-opted. And we understand that ideas can arise from the zeitgeist; simultaneously and independently. But the timeline of innovation, particularly in open source projects, is also clear and we want our users to understand the direction of flow of innovation in our space. It could be demoralizing to see the result of hundreds of hours of thought and research co-opted so easily, and perhaps that is inherent in a free marketplace, but we are not demoralized. We are motivated; to widen the gap.

HikariCP comes with sane defaults that perform well in most deployments without additional tweaking. Every property is optional, except for the "essentials" marked below.

HikariCP uses milliseconds for all time values.

HikariCP relies on accurate timers for both performance and reliability. It is imperative that your server is synchronized with a time-source such as an NTP server. Especially if your server is running within a virtual machine. Why? Read more here. Do not rely on hypervisor settings to "synchronize" the clock of the virtual machine. Configure time-source synchronization inside the virtual machine. If you come asking for support on an issue that turns out to be caused by lack time synchronization, you will be taunted publicly on Twitter.



 This is the name of the class provided by the JDBC driver. Consult the documentation for your specific JDBC driver to get this class name, or see the table below. Note XA data sources are not supported. XA requires a real transaction manager like bitronix. Note that you do not need this property if you are using for "old-school" DriverManager-based JDBC driver configuration. Default: none



 This property directs HikariCP to use "DriverManager-based" configuration. We feel that DataSource-based configuration (above) is superior for a variety of reasons (see below), but for many deployments there is little significant difference. When using this property with "old" drivers, you may also need to set the property, but try it first without. Note that if this property is used, you may still use DataSource properties to configure your driver and is in fact recommended over driver parameters specified in the URL itself. Default: none



 This property sets the default authentication username used when obtaining Connections from the underlying driver. Note that for DataSources this works in a very deterministic fashion by calling on the underlying DataSource. However, for Driver-based configurations, every driver is different. In the case of Driver-based, HikariCP will use this property to set a property in the passed to the driver's call. If this is not what you need, skip this method entirely and call , for example. Default: none



 This property sets the default authentication password used when obtaining Connections from the underlying driver. Note that for DataSources this works in a very deterministic fashion by calling on the underlying DataSource. However, for Driver-based configurations, every driver is different. In the case of Driver-based, HikariCP will use this property to set a property in the passed to the driver's call. If this is not what you need, skip this method entirely and call , for example. Default: none



 This property controls the default auto-commit behavior of connections returned from the pool. It is a boolean value. Default: true

⌚ 

 This property controls the maximum number of milliseconds that a client (that's you) will wait for a connection from the pool. If this time is exceeded without a connection becoming available, a SQLException will be thrown. Lowest acceptable connection timeout is 250 ms. Default: 30000 (30 seconds)

⌚ 

 This property controls the maximum amount of time that a connection is allowed to sit idle in the pool. This setting only applies when is defined to be less than . Whether a connection is retired as idle or not is subject to a maximum variation of +30 seconds, and average variation of +15 seconds. A connection will never be retired as idle before this timeout. A value of 0 means that idle connections are never removed from the pool. The mimimum allowed value is 10000ms (10 seconds). Default: 600000 (10 minutes)

⌚ 

 This property controls the maximum lifetime of a connection in the pool. An in-use connection will never be retired, only when it is closed will it then be removed. We strongly recommend setting this value, and it should be at least 30 seconds less than any database or infrastructure imposed connection time limit. A value of 0 indicates no maximum lifetime (infinite lifetime), subject of course to the setting. Default: 1800000 (30 minutes)



 If your driver supports JDBC4 we strongly recommend not setting this property. This is for "legacy" drivers that do not support the JDBC4 . This is the query that will be executed just before a connection is given to you from the pool to validate that the connection to the database is still alive. Again, try running the pool without this property, HikariCP will log an error if your driver is not JDBC4 compliant to let you know. Default: none



 This property controls the minimum number of idle connections that HikariCP tries to maintain in the pool. If the idle connections dip below this value, HikariCP will make a best effort to add additional connections quickly and efficiently. However, for maximum performance and responsiveness to spike demands, we recommend not setting this value and instead allowing HikariCP to act as a fixed size connection pool. Default: same as maximumPoolSize



 This property controls the maximum size that the pool is allowed to reach, including both idle and in-use connections. Basically this value will determine the maximum number of actual connections to the database backend. A reasonable value for this is best determined by your execution environment. When the pool reaches this size, and no idle connections are available, calls to getConnection() will block for up to milliseconds before timing out. Default: 10



 This property is only available via programmatic configuration or IoC container. This property allows you to specify an instance of a Codahale/Dropwizard to be used by the pool to record various metrics. See the Metrics wiki page for details. Default: none



 This property is only available via programmatic configuration or IoC container. This property allows you to specify an instance of a Codahale/Dropwizard to be used by the pool to report current health information. See the Health Checks wiki page for details. Default: none



 This property represents a user-defined name for the connection pool and appears mainly in logging and JMX management consoles to identify pools and pool configurations. Default: auto-generated

⌚ 

 This property controls whether the pool will "fail fast" if the pool cannot be seeded with an initial connection successfully. Any positive number is taken to be the number of milliseconds to attempt to acquire an initial connection; the application thread will be blocked during this period. If a connection cannot be acquired before this timeout occurs, an exception will be thrown. This timeout is applied after the period. If the value is zero (0), HikariCP will attempt to obtain and validate a connection. If a connection is obtained, but fails validation, an exception will be thrown and the pool not started. However, if a connection cannot be obtained, the pool will start, but later efforts to obtain a connection may fail. A value less than zero will bypass any initial connection attempt, and the pool will start immediately while trying to obtain connections in the background. Consequently, later efforts to obtain a connection may fail. Default: 1



 This property determines whether HikariCP isolates internal pool queries, such as the connection alive test, in their own transaction. Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction. This property only applies if is disabled. Default: false



 This property controls whether the pool can be suspended and resumed through JMX. This is useful for certain failover automation scenarios. When the pool is suspended, calls to will not timeout and will be held until the pool is resumed. Default: false



 This property controls whether Connections obtained from the pool are in read-only mode by default. Note some databases do not support the concept of read-only mode, while others provide query optimizations when the Connection is set to read-only. Whether you need this property or not will depend largely on your application and database. Default: false



 This property controls whether or not JMX Management Beans ("MBeans") are registered or not. Default: false



 This property sets the default catalog for databases that support the concept of catalogs. If this property is not specified, the default catalog defined by the JDBC driver is used. Default: driver default



 This property sets a SQL statement that will be executed after every new connection creation before adding it to the pool. If this SQL is not valid or throws an exception, it will be treated as a connection failure and the standard retry logic will be followed. Default: none



 HikariCP will attempt to resolve a driver through the DriverManager based solely on the , but for some older drivers the must also be specified. Omit this property unless you get an obvious error message indicating that the driver was not found. Default: none



 This property controls the default transaction isolation level of connections returned from the pool. If this property is not specified, the default transaction isolation level defined by the JDBC driver is used. Only use this property if you have specific isolation requirements that are common for all queries. The value of this property is the constant name from the class such as , , etc. Default: driver default

⌚ 

 This property controls the maximum amount of time that a connection will be tested for aliveness. This value must be less than the . Lowest acceptable validation timeout is 250 ms. Default: 5000

⌚ 

 This property controls the amount of time that a connection can be out of the pool before a message is logged indicating a possible connection leak. A value of 0 means leak detection is disabled. Lowest acceptable value for enabling leak detection is 2000 (2 seconds). Default: 0

➡ 

 This property is only available via programmatic configuration or IoC container. This property allows you to directly set the instance of the to be wrapped by the pool, rather than having HikariCP construct it via reflection. This can be useful in some dependency injection frameworks. When this property is specified, the property and all DataSource-specific properties will be ignored. Default: none

➡ 

 This property is only available via programmatic configuration or IoC container. This property allows you to set the instance of the that will be used for creating all threads used by the pool. It is needed in some restricted execution environments where threads can only be created through a provided by the application container. Default: none

➡ 

 This property is only available via programmatic configuration or IoC container. This property allows you to set the instance of the that will be used for various internally scheduled tasks. If supplying HikariCP with a instance, it is recommended that is used. Default: none

HikariCP has plenty of "knobs" to turn as you can see above, but comparatively less than some other pools. This is a design philosophy. The HikariCP design aesthetic is Minimalism. In keeping with the simple is better or less is more design philosophy, some configuration axis are intentionally left out.

Many connection pools, including Apache DBCP, Vibur, c3p0 and others offer caching. HikariCP does not. Why?

At the connection pool layer can only be cached per connection. If your application has 250 commonly executed queries and a pool of 20 connections you are asking your database to hold on to 5000 query execution plans -- and similarly the pool must cache this many and their related graph of objects.

Most major database JDBC drivers already have a Statement cache that can be configured, including PostgreSQL, Oracle, Derby, MySQL, DB2, and many others. JDBC drivers are in a unique position to exploit database specific features, and nearly all of the caching implementations are capable of sharing execution plans across connections. This means that instead of 5000 statements in memory and associated execution plans, your 250 commonly executed queries result in exactly 250 execution plans in the database. Clever implementations do not even retain objects in memory at the driver-level but instead merely attach new instances to existing plan IDs.

Using a statement cache at the pooling layer is an anti-pattern, and will negatively impact your application performance compared to driver-provided caches.

Like Statement caching, most major database vendors support statement logging through properties of their own driver. This includes Oracle, MySQL, Derby, MSSQL, and others. Some even support slow query logging. For those few databases that do not support it, log4jdbc or jdbcdslog-exp are good options.

You can use the class like so1:

1 MySQL-specific example, do not copy verbatim.

or directly instantiate a like so:

There is also a System property available, , that can be used to specify the location of a properties file. If you intend to use this option, construct a or instance using the default constructor and the properties file will be loaded.

We recommended using instead of , but either is acceptable. We'll say that again, either is acceptable.

⚠ Note: Spring Boot auto-configuration users, you need to use -based configuration.

⚠ MySQL and MariaDB DataSources are known to be broken with respect to network timeout support. Use configuration instead.

Here is a list of JDBC DataSource classes for popular databases:

Note Play 2.4 now uses HikariCP by default. A new plugin has come up for the the Play framework; play-hikaricp. If you're using the excellent Play framework, your application deserves HikariCP. Thanks Edulify Team!

A new Clojure wrapper has been created by tomekw and can be found here.

A new JRuby wrapper has been created by tomekw and can be found here.

Don't forget the Wiki for additional information such as:

YourKit supports open source projects with its full-featured Java Profiler. Click the YourKit logo below to learn more.

 



Please perform changes and submit pull requests from the branch instead of . Please set your editor to use spaces instead of tabs, and adhere to the apparent style of the code you are editing. The branch is always more "current" than the if you are looking to live life on the edge.|||

光 HikariCP・A solid high-performance JDBC connection pool at last.