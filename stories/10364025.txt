For starters, this week I wanted to get three websites from a shared host (Site5.com) to a VPS. Those sites are

and I succeeded in my goal. But not only did I want to move them over I wanted to redo parts of them so that none of them would be using php and so that they all ran on a Node/Express server instead of Apache. This required taking all of my database calls which were previously in php and porting them over to Express.

This is my portfolio website and the easiest site to port. I didn’t have any php to remove or any Express API writing to do. This was the first site I moved over and so this site is where I learned a bit about nginx.

My setup is a web server running an nginx reverse proxy to an app server in the same datacenter. The app server is hosting all three sites, and serving them up from different ports. This leads me to lesson 1:

Once I had nginx routing my site properly there was not much of a bother with the rest of my portfolio migration.

This site was originally written using php. I did a lot of funky things to render tables based on MySQL queries, things that I’m not proud of. *shudders* Now however, a year after originally starting this project, I know Angular. Which brings us to lesson 2:

2. Always remember the power of MVC. Frameworks have evolved for the web for a reason and whether you’re using Backbone, Angular, Ember, Knockout, or anything else, you cannot discount their power. I was able to remove all of my hacky php calls and php includes from this site and replace it all with some easy and beautiful Angular. This site has some similar charts which I was able to turn into directives. I was able to take out the php driven tables and replace them with a few ng-repeat directives. I was able to replace some of the dynamic content from php includes with some simple angular {{notation}}.

Having Angular in my toolkit this time around made re-architecting this website a relative breeze and without it I certainly wouldn’t have been able to do it in a single day.

Now, because I wanted to use Express for this website and I wanted to tinker with EJS, I did something that I wouldn’t advise for any large (10+ view) projects. I serve each route from Express and with its own res.render(***.ejs) call. This brings us to lesson 3:

3. Review your work with other developers. When refactoring code, re-architecting from scratch, or building out new functionality it is a good idea to talk about what you’re doing with someone else who knows what you’re talking about as a sanity check as well as to get new ideas and to improve your code.

After talking to a colleague (thanks John) about the code in question he pointed out that in the future it might be smarter to use Express to serve a single route and extend use of Angular to handle routing as well. After he shared that idea with me I was able to immediately implement it for the next site.

This is a medium sized project that was mostly, at the time porting, on Angular. However for a long time there were two pages using only jQuery. I’ve had an open issue on GitHub reminding me to get them into Angular but I just never got around to it. So lesson 4:

4. If you have a chance to fix or improve something, do it. I could have brought pillars over to the VPS as well as Express without moving the pages in question into Angular. But if I didn’t do it this week it could’ve been months before I had time for it again. I spent an extra chunk of time to rewrite the routes in the Angular config (and taking my colleague’s advice, almost all the routing for this site is handled by Angular) and made the much desired progress to get every page of the site into the Angular world.

This project, like r16p, had a lot of calls to the database written in php. At the time I wasn’t following RESTful best-practices. There were a few POST calls that should’ve been PUTs. I took the time this time around to write a a more RESTful compliant API. Thankfully Express makes this very easy. However, there are still some aspects of the project that could use improvement. Which leads me to lesson 5:

5. A developers work is never done. An aspiration for all my projects is technical perfection. Every line of code should be as simple as possible. Every library should be used according to industry best practices. All architecture should be build to do what you need it or and nothing more. Of course, this ideal result is near impossible to achieve in the real world. There will always be something that you can bring closer to perfection. And for that reason, your work is never done.

Caveat: I’m the only one with an account for pillars. I started it as a small private project. It’s growing over time and some day I may release it as something for the world. Contact me if you’d like to see it in action, check GitHub for details of what it does.|||

For starters, this week I wanted to get three websites from a shared host (Site5.com) to a VPS. Those sites are and I succeeded in my goal. But not only did I want to move them over I wanted to redo…