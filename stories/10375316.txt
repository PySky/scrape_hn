Most people involved in software rarely talk about bugs. Perhaps it’s because a lot of software designers are striving for perfection, and aren’t willing to talk about the times when the machine conquered them. We all create software bugs, so let’s break the silence. Below are my top three bugs which occur while writing shell scripts.

Let’s take an example script which generates “STDOUT” on standard output and “STDERR” on standard error.

But you must do:

I frequently use , since it’s the easiest way to get a trace of whatever is happening in your shell. You start ‘script’, run commands, hit “exit” and in the current directory the file “typescript” will contain all the output from all the commands that you’ve run saved. Trick: MacOSX and BSD-based systems:

are different than Linux:

That’s the common problem, e.g.: I don’t like MacOSX not having support. But oh well..

Very often I forget that everything in shell programming is a command.

Quiz: how do ‘[‘ and ‘]’ work?

Looping is so essential in other languages, that sometimes, while scripting in shell, I forget that there are some things I can’t do. The other day I tried something like this:

Before you continue reading, another quiz: why won’t it work?

Compare the above with this:

Basically when your shell interprets this, it’s all contained in one single process. But once you use ‘|’, the pipe between two processes needs to be created, so whatever you have after the pipe sign will be running in a separate process, which the shell has forked for you. The solution to this is to restructure the loop so that everything happens in one single process:

This is fairly inefficient, but it works on both Linux and FreeBSD, where is an actual BSD shell, not “BASH”.

What are your top three mistakes while writing shell scripts?|||

Things to shy away from when working on shell scripting.