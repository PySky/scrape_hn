The IKEA Trådfri lights are a new range of smart bulbs and controllers that are affordable, work well, and, as we'll see here, are hackable! The Trådfri system uses a gateway connected by ethernet to your network that speaks using ZigBee wireless to the bulbs and controllers. There are two types of controller - the remote, which can toggle the lights on and off, dim them, or change their colour temperature, and the dimmer.

The commands sent to the gateway are DTLS (Datagram Transport Layer Security) over CoAP (Constrained Application Protocol). DTLS is essentially an implementation of SSL over UDP, but we don't need to worry about the details here. There are a number of API endpoints that you can hit to perform all the same functions as the physical remote does, and we'll see them later.

This tutorial will cover installation of libcoap, a library that can be compiled with support for DTLS, that allows you to send commands to your Trådfri gateway and hence to the bulbs. We'll also look at some nice Python code from Harald van der Laan that simplifies the process of sending requests to your Trådfri devices, and makes it trivial to hook into our Pi pHATs and HATs. Finally, we'll use the light sensor on our Enviro pHAT board to trigger the Trådfri lights to switch on when the light level drops below a given threshold.

We used a Pi Zero W for our setup, as it provides a stress-free (and wire-free) way to hook into your home network, but a Pi 3 would work equally well, as would a non-wireless-equipped Pi connected to your network with an ethernet cable. The benefit of a wireless Pi is that you can place it anywhere in your space that is within reach of a power socket.

We'll assume that you've set up your Pi, soldered a header to it if it's a Zero or Zero W, and have booted into Raspbian or Raspbian Lite. If you need help soldering the header to your Pi or pHAT, then we have a tutorial that covers that here, and we have a tutorial that shows your how to set up your Pi Zero W and connect it to your Wi-Fi network completely headless-ly here.

The following instructions for compiling and installing libcoap come from GitHub user Hedda in this GitHub issue thread which has a wealth of information on hacking the Trådfri lights.

In the terminal, type the following lines of code to install everything:

That should have installed globally the libcoap library, particularly the which you can use to send commands to the hub. The Python scripts and libraries that have been written thus far just spit out shell commands using the ; they're Python wrappers around the client.

We won't go into detail about setting up the Trådfri lights, as IKEA cover this in detail in the manuals and in the iOS and Android apps. We found that using the app to set them up was the easiest and most intuitive way to do it.

We got the kit that contains two colour temperature controllable bulbs, a hub, and a remote, so this tutorial will assume that you have that kit.

Once you have it all set up, test that the lights are responding as expected with either the remote or the app. We'll begin by looking at how the endpoints are structured, and then test whether we can toggle one of the lights on and off from the terminal with .

To talk to the gateway, you'll need to know its IP address. You should be able to use either your router's admin page to find it, or an app that scans your network and identifies connected devices like Fing or Angry IP Scanner. Ours appears with a hostname of the form , where the last bit is the MAC address of the gateway. Let's assume that the IP address of the gateway is for the purposes of this tutorial.

You'll also need the key (security code) that is on the bottom of your gateway. It'll be an alphanumeric code of length 16, listed below the serial number (which is actually the MAC address). Make a note of it, as you'll need it later.

The endpoints all begin with followed by either to control bulbs individually or to control them as a group. We'll focus on controlling an individual bulb here. The individual bulbs will have addresses beginning at for the first bulb, for the second, and so on. So, to control the first bulb, as we will here, you would hit the following endpoint:

Now that we know the endpoint to control that first bulb, we need to structure a payload to send to the endpoint with the . We'll send a put request to that endpoint to toggle the light off (make sure that it's switched on first, so that we know whether it worked or not!). Here's the payload:

The structure of that payload is as follows: the represents a dimmer and the is the toggle for on/off, with being off and being on. Let's put that all together into a call to the that will toggle the light off:

You'll need to replace with your security code that you should have noted down. Notice that we specify that it's a put request, , and the user is . That username is used for all requests sent to the gateway. It's also important that you get the single and double quotes exactly as above, since the payload includes double quotes meaning that it needs to be wrapped in a set of single quotes.

As well as sending put requests, we can send get requests to query the state of either a single bulb, a group, or the whole shebang. Try the following to query the state of the first bulb that we're controlling:

You'll get a response back with a bunch of information, that we won't get into here, but one tidbit is that if you send a payload substituting the for and pass in a value of to then you can control the brightness of your bulb, as follows:

That should set your bulb to 50% brightness.

We'll be using some neat code from Harald van der Laan (@hvanderlaan on Twitter) that wraps up the calls to in Python. Sandy forked Harald's GitHub repo and tweaked a couple of bits to make it work more reliably on the Pi (basically just removing the requirement for libcoap to be built within the repo, and changing the path for it to a global one).

Type the following to install the requirement and clone the repo:

Let's create a config file that lists the IP address of the gateway and the security code. Type to open up the nano text editor. Paste in the following, replacing the IP address and security code with yours:

Press and , then , then to save and exit nano.

Now, let's test that the Python script to control the lights is working as expected. Type the following to toggle the first light on:

The syntax for these commands is fairly straightforward. The flag specifies the bulb you want to control, in this case the first one, . The flag specifies the action to call, in this case to toggle the bulb on or off. And the flag is the value to pass to that action, in this case (or ).

The other actions are which can be passed a value between and to set the bulb's brightness as a percentage. There's also (sic) to change the colour temperature of the bulb, which is passed , , or .

If you have more than one bulb, it will likely be in a group. We mentioned in passing earlier that there was a different endpoint to control the bulbs as a group. There's also a different script to control your grouped bulbs. The syntax for this script differs very slightly to the script, in that it needs to be given the group ID. The group ID, unlike the bulb ID, does not appear to be standardised, so you'll need to run the script as follows to find the ID of your group:

It should show something like the following output:

You'll see that the two bulbs, and are listed, as well as the group which, in our case, is . We'll use that ID to toggle both bulbs in the group on and off.

You'll see that instead of that we used to specify the ID of the bulb, we use to pass in the group ID . Also note that there isn't control of the colour temperature of the group at the current time, only power and brightness.

You'll need to install the Enviro pHAT Python library, if you haven't already. We've made it really simple with our one-line-installer. Just open a terminal and type:

Type when prompted and note that it may reboot once installed.

We've a detailed tutorial here on getting started with Enviro pHAT, if you need more help.

Because Harald has done all the heavy lifting of writing a wrapper for , it's trivial to hook in our Enviro pHAT to trigger the lights to come on in low light.

Create a new file within the directory. We called ours , but call yours whatever you'd like.

Paste the following code into that file, and then press and , then , then to save and exit nano. We'll go through exactly what it does after.

At the top, we import a few libraries that we'll need within our script. allows us to introduce delays into our loop so as not to overwhelm the API. does exactly as it says, and allows us to grab the gateway IP address and security code from the file. We'll use just the class from the library to take ambient light readings. Last, we'll import to allow us to use its functions to send calls to .

We read the values from the config file and specify the bulb ID as follows:

We'll also create a variable called and initialise it with a value of , using it to keep track of the state of the bulb.

Next, we have a couple of functions to toggle the bulb on or off, and print a message to the standard output telling us when the function has been called. It's worth noting that you could condense these down into a single function and pass in an / command but, for clarity here, we'll keep it as two separate functions.

We pass in the , , and . These functions will be called within our final loop that will take a light reading twenty times every second and toggle the lights on or off.

Our loop has an and an that toggle the bulb on or off respectively. To avoid switching the bulb on or off on every iteration of the loop, we check what the current state of the bulb is with the / as well as having a conditional that checks the light level.

checks both whether the light level in lumens is less than 500 and that the state is not already on. If both of those conditions apply, then we switch the bulb on with and then update the state with .

will apply both if the light level is greater to or equal to 500 lumens and the state is on, and switch the bulb off as a result - - and finally set the state to off with .

We include a small delay of a 20th of a second, with , to give the gateway API time to keep up with the requests. It's worth noting that you may get some error responses back occasionally when the API is most likely busy responding to a request already.

Try running the script now, by typing , assuming that's what you named it. Cover the Enviro pHAT with your hand and watch in amazement as the light turns on, as if by magic.

To kill the script, press and .

The obvious limitation of the approach here is that the threshold at which the light is triggered to come on is somewhat subjective. Also, assuming your Pi Zero W and Enviro pHAT are fairly close to your light/s then they will probably switch off as soon as they've come on because the light level will be higher than 500 lumens - DISCO TIME!

The solution to this is to experiment with the placement of the Pi Zero W and Enviro pHAT, and the correct ambient light level at which to trigger the lights to come on. We'll leave that up to you.

You can use the same techniques applied here to do any number of things with your IKEA Trådfri lights. You could hook into Twitter and have it send a tweet when your lights are switched on, by querying their state, or send a push notification to your phone. You could use our Touch pHAT to create your own customisable controller for your lights. Or why not have them flash a couple of times when your doorbell rings? The world is your lobster!|||

Learn how to talk to and control IKEA Trådfri smart lights from your Pi