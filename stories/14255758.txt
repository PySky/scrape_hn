This is the third and final post of the series intended to introduce PostgreSQL users to PL/R, a loadable procedural language that enables a user to write user-defined SQL functions in the R programming language. The information below provides sample use of R Functions against the NDVI dataset.

As introduced in the previous posts, the combination of PostgreSQL and R provides users with the ability to leverage the power and efficiency of PostgreSQL and the rich analytic functionality of R. When further combined with PostGIS, the geospatial extender for PostgreSQL, users can perform powerful spatial analytics within the PostgreSQL database. It is our hope that these posts will cause those building analytic applications to give PostgreSQL a second look.

The first post in this series provided users with an introduction, and discussed acquisition of administrative area boundary polygons (USA states and counties) and geocoding. The second post in this series worked through preprocessing of Normalized Difference Vegetation Index (NDVI) satellite raster data in preparation for spatial analytics.

This series of posts uses NDVI data from the moderate-resolution imaging spectroradiometer (MODIS) made available by the United States Geologic Survey (USGS). This data is used to demonstrate R analytic operations in PostgreSQL and PostGIS:

For information regarding the background for this analysis and the example set up, please take a moment to review the initial post in this series.

Having previously preprocessed and ingested the data from our example, it is now possible to perform a wide variety of R analytic functions against the data. This post works through a few examples of potential analysis as well as the resulting graphical output.

As an initial example of capability, we will use PL/R functions to determine the average NDVI for San Diego county as a function of time. In order to perform this analysis, first create a new function that reads the named geotiff file in which the preprocessed raster layers were stored. These layers correspond to different snapshots in time, from the year 2000 through 2016, for the NDVI values for San Diego county. The commands below create this function that is referred to as get_ndvi_mean().

This newly created function get_ndvi_mean() reads in the raster layers, and then for each layer calculates the grand average for the entire county based on the cell (pixel) level values. It combines those average county NDVI values with their corresponding average acquisition date using the method described in the previous post, and returns the results as one row per layer date and layer average pair.

The average NDVI for San Diego county as a function of time can be determined using the get_ndvi_mean() function described above by executing the following commands:

A visualization operation can be performed by creating an analogous function, plot_ndvi_trend(). This plot_ndvi_trend() function operates similar to the previously demonstrated get_ndvi_mean() function, except the plot_ndvi_trend() function performs additional steps to ensure that the rows are ordered chronologically and then it plots the data, returning a png image to the SQL client in a similar way to that seen in earlier posts.

The average NDVI for San Diego county as a function of time can be determined using the plot_ndvi_trend() function described above by executing the following commands:

The average NDVI for San Diego county as a function of time determined by the plot_ndvi_trend() function can be returned as a png image to the SQL Client by executing the following commands:

The graphical output for average NDVI over time is provided in Figure 1 below.

The average NDVI for San Diego county as a function of time can also be visualized with an alternative plotting function called ggplot(). The following pure R code will use this alternative plotting method to produce a png image file:

The graphical output for average NDVI for San Diego county over time visualized using ggplot is provided in Figure 2 below.

Note that the geom_smooth() argument to ggplot provided a nice regression line with confidence bands. Various smoothing methods are available, but here we have allowed ggplot to select the default. This addition aids the eye in spotting trends in the data.

Using R commands, it is possible to create a visualization of the average NDVI for San Diego county by month for a given year. This visualization can be generated by executing the following commands:

It is worth noting that in this case, rather than averaging an entire raster layer to provide one NDVI value for the county, the commands are averaging pixel-by-pixel across multiple raster layers per month, in order to provide a composite image representing the given month. The visual output for average NDVI by month for the year 2011 is provided in Figure 8 below.

Using similar R commands, it is possible to create a visualization of the average NDVI for San Diego county for a given month, over a series of years.

The visual output for average NDVI for San Diego county for the month of January from 2001 to 2016 can be generated using the following command and is provided in Figure 4 below.

Figure 4: Visualization of Average NDVI for San Diego County by Month

While PostgreSQL is not necessarily known for use with analytic applications, the combination of PostgreSQL, PostGIS, PL/R and R provide PostgreSQL users with the combination of the power and efficiency of PostgresSQL and the rich analytic functionality of R. When further combined with PostGIS, the geospatial extender for PostgreSQL, users can perform powerful spatial analytics within the PostgreSQL database.|||

Introduction to Spatial Analytics with PostgreSQL, PostGIS, PL/R and R Programming Language.  Example use of R Analytic functions in PostgreSQL and PostGIS.