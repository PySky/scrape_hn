Inspired by Jason at Almost Looks Like Work I wanted to take on some modeling of disease spread. Note that this model has no claim what so ever on reflecting reality and is not to be mistaken for the horrible epidemic in West Africa. On the contrary, it’s more to be viewed as some sort of fictional zombie outbreak. That said, let’s get down to it!

This is what’s called a SIR model where the letters S, I and R reflects different states an individual can have in a zombie outbreak:

We also have $\beta$ and $\gamma$:

So $S’ = -\beta I S$ tells us how fast people are turning into zombies. $S’$ being the time derivative.

$I’ = \beta I S - \gamma I$ tells us how the infected increases and how fast the zombie workers are putting zombies in the removed state (pun intended).

$R’ = \gamma I$ just picks up the $\gamma I$ term that was negative in the previous equation.

The above model does not take into account that there must be spatial distribution of S/I/R. So let’s fix that!

One approach is to divide Sweden and the Nordic countries into a grid where every cell can infect the nearby. This can be described as follows:

Where for example being one cell and , , and being the surrounding cells (let’s not make our brains tired with the diagonal cells, we need our brain for not getting our brain eaten).

Some appropriate beta and gamma making sure to wipe out most of the country.

Remember the definition of a derivative? With some rearranging it can actually be used to approximate the next step of the function when the derivative is known and $\Delta t$ is assumed to be small. And we have already stated $u’(t)$.

And let’s call $u\left( {t + \Delta t } \right)$ which is the function $u$ in the next time step for $u_{n+1}$, and $u(t) = u_n$ which is the current time step.

This is called the Euler method. Let’s write it in code:

We also need $f(u)$ in code. This uses some nifty array operations by the goodness of numpy. I just might get back to that in another blog post, because they’re great and might need some more explaining. But for now this will do.

Here I import an map with the population density of the Nordic countries and downsample it to make the solving time resonably fast.

Our $S$ matrix, the susceptible individuals should be something like the population density. The infected $I$ is for now just zeros. But let’s put a patient zero somewhere in Stockholm.

Nobodys dead, yet. So lets put $R$ to zeroes too.

Now set some initial values of how long the simulation is to be run and so on.

We need to make a custom colormap so that the infected matrix can be overlayed on the map.

And we sit back and enjoy…

Not let’s render some images and make a gif of it. Everybody loves gifs!

Look at that! The only safe place seem to be in the northern parts where it’s not so densly populated. Even Finland will at the end of the animation be infected. Now you know.

If you want to know more about solving differential equations I can warmly recommend Practical Numerical Methods with Python by @LorenaABarba. Here you’ll learn all the real numerical methods that should be used instead of the simple one in this post.

UPDATE: To play around for yourself, the Ipython notebook can be found here.|||

