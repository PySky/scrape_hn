For a while I’ve been working on cycli, a command line interface (CLI) for Neo4j’s Cypher query language. As demonstrated below, it autocompletes on your node labels, relationship types, property keys, and Cypher keywords. The autocompletion of the lattermost in this list, Cypher keywords, is the focus of this post.

Originally, Cypher keywords were suggested simply in alphabetical order. However, this was too naive: if you typed a , for example, the autocompletion menu would display the suggestions [WHEN, WHERE, WITH] in that order regardless of whether or not those keywords were valid or appropriate given the context of your query.

These are no good:

For the examples above, people who are familiar with Cypher can tell you that out of the Cypher keywords that start with , the and keywords are most likely to follow the keyword, the keyword is most likely to follow the keyword, and the keyword is most likely to follow the keyword. For a better experience, typing a should toggle an autocomplete menu where the order of the suggested keywords is a function of the most previous keyword in the query. So how do I implement this? I’m certainly not going to hardcode any of these rules into manually; rather, I let the data speak for itself.

I scraped all Cypher queries from all of the GraphGists listed on the GraphGist wiki. GraphGists are what I like to call the IPython notebook of Cypher: they allow you to build a sort of notebook with inline Cypher queries, where the results are rendered in the browser. This provided a good sample dataset of Cypher queries for building the Markov model.

As you might’ve read in a previous blog post of mine:

We can apply this idea easily to Cypher queries by considering every Cypher keyword as a state in a Markov process. In other words, if the last keyword you typed is , then you are currently in the state of the Markov process and there is a set of probabilities indicating which states, or Cypher keywords, you will most likely enter / use next. The solution then is to build a transition probability matrix with our sample dataset of Cypher queries.

For the sake of demonstration, let’s pretend the following Cypher queries comprise our sample dataset. Let’s also pretend that Cypher keywords consist only of the keywords within these queries.

I decided to initially store the Markov process in a dictionary of dictionaries so that the probabilities can be accessed with , which is the probability that the next keyword is \(j\) given that the current keyword is \(i\). I’ve included an additional state—the empty state (represented by an empty string)—to also cover the case where there are no previous keywords, as we still want to recommend keywords ordered by the most probable even for the first keyword in the query.

Next, for each query, I find the positions of each keyword and order the keywords by these positions ascending. Then I iterate through this list of keywords and increment the value by 1 each time I see keyword \(j\) follow keyword \(i\). Note that the actual implementation is a bit beefier, as it takes care to not include words that are node labels, relationship types, strings, etc.

Next, I divide each value in each row by the sum of the row so that I have probabilities.

The probabilities in each row now sum to 1.

Finally, I convert the dictionaries to a list of tuples so that they can be maintained in order of probability descending (dictionaries have no sense of order).

Now I have a data structure that can tell me which keywords are most likely to be used next given the current keyword. For example, with this pretend dataset, if the current keyword is , then the probability of the next keyword being is 67% and the probability of the next keyword being is 33%:

This workflow was applied to the full sample of Cypher queries scraped from the GraphGists wiki and the resulting data structure, the dictionary of tuples, is now included in to make smarter autocomplete suggestions for Cypher keywords.

Let’s look at the real data for a few keywords.

If your most recent keyword is :

If your most recent keyword is :

If your most recent keyword is :

Revisiting the examples from earlier, where typing a in previous versions of yielded an alphabetical list of Cypher keywords with no regard to whether or not they were valid or appropriate, we now get a list of autocompletions where the order of the keyword suggestions is tailored to the context of the query.

This is easily accomplished behind the scenes with the data structure now included in .

While is only utilizing the one-step probabilities in this Markov process, I wanted to build this data structure to open the door for some fun, offline analysis of the Cypher query language. With a Markov chain, I can answer questions like:

I plan to answer these types of questions in a future post.|||

