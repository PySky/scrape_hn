We're in the process of transitioning one of our application's front ends from a collection of independent scripts containing IIFEs to ES6-style exportable components. To correspond with the new importing scheme, we needed to convert one of the project's depdencies, our Angular waiting button component, from a Bower project to an NPM project. After diving in to try and find other articles explaining this process and coming up empty-handed, I decided it would be helpful to others to document building out a Angular module using Webpack and NPM.

We will be building out a very simple button component that we can use within any Angular 1 application by including it in our app's dependencies. The functionality of the button will be rudimentary, as the focus of this article will be on getting development setup and providing a module that is importable.

First we need to create a directory to hold our project and run to create the boilerplate file. Next we need to install our dev dependencies in order to work with webpack and angular. To do this you can run:

With our dependencies present we're ready to set up our build script. We can add a new "build" target to like so:

The build script will first remove the directory using rimraf and then run webpack.

Also notice from the json below that our name for the module is and we have the entry point option pointed to . This value gives NPM instructions on where to find the starting point when importing NPM packages.

The next step is to create a file to define the build phase.

Breaking this down we can see that our project has two primary directories: the ( ) will contain the project's source scripts and styles. The will contain the bundled module after it has been compiled by webpack. We make sure our paths will work platforms by creating the final paths with the help of .

Looking at the config object it's important to take note of the entry point, as that is were webpack will start from. In the directory we need to create a file.

One of the most important steps is making sure that our output config is setup correct:

The option will point to the directory that will contain our compiled javascript. The is the name of the file generated. The has many options which format to export the library:

We could use and name the Library to export or additionally leave out the Library and just use ES6 destructuring to pull out the exports we want from the module. However our Angular code is intended to be imported as a single , so this is unnecessary.

The module section of the webpack config defines the different loaders to be used depending on a regex match of file types. We are using for all javascript files and for the Sass we are first running it through , then , and finally so that it can be in-lined in the javascript and won't need to be a separate file to depend on.

The last part of the webpack config is important so that we can keep our dependencies out of the bundle that we know the consumer of the application will already have. For example we know the consumer will be using Angular so we can let webpack load Angular through it's resolve. This makes accessible within any of our javascript files without needing to import it and Angular will not be included when we build the distributable module.

Now that we have the build steps setup and the dependencies installed we can start to create the module. Within the file we need to create our initial Angular module.

This is just basic Angular module creation and we are using the new component syntax as well. Take note that we are using at the end of our angular module in order to get back the module name for importing.

At the top of this file we are importing our component from , as well as our styles from .

The component defines an object literal with several properties, configuring transclusion support, the component's controller, and the template we will be using. For this example it's just a basic component with an anchor tag as a button.

The important part is to understand that we will be able to use this component on any project by simply importing it. In addition if you publish the module to NPM you can simply install it with in order to start using it.

Once all of this is in place we can run in order to kick off the build script and produce our bundled, importable file.

Something that I recently found out is that you can easily link packages using so that you can include an under-development module in a project. The module will be included in the project's dependencies, and any changes to the under-development module will be automatically include in the project.

For example, if I wanted to use this button in an application and still make changes to the button I could run within the module directory and then change into the application that I wanted to use it in and run . Then I would be able to use this package within the other application. Even better if I run I can make changes to this button and see them reflected immediately within the other application.

Allowing for modularity within javascript has opened up a wide world of opportunities. We are no longer stuck in the days of throwing script tag after script tag on our html file and worry about the order they are loaded in. This is the future and the future is looking very bright!

You can find the full example application at angular-surprise-button

You can also find an example WebpackBin using this module with the component webpackbin|||

Made by Munsters is a User Experience/User Interface Design & Full-Stack Web & Mobile Development company.