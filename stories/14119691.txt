A seed contains all instructions needed to create the development container. This might include the packages of your tool chain, the location of the repositories, or even database configurations. Most of these instructions are defined using Ansible . Ansible is an IT automation tool which runs so-called playbooks on machines to ensure a given state. It is assumed that you have basic knowledge of Ansible. If you don’t, it is strongly recommended that you head over there first and familiarize yourself with Ansible playbooks.

If you open the file, you’ll find a detailed description of every configuration parameter above it. It is pre-filled with sensible defaults, but you are free to adjust the values to your liking.

A list of the information needed for the Ansible playbook

Let’s take a look at the contents of this folder. The most important part is a file called universe.yml . It contains the following information:

To create a new seed run seed create seed-name . This will create a new folder called seed-name, containing an already bootstrapable seed.

In most cases, you should not have to adjust anything in the initializer directory.

The default group of the user executing the universe command.

The name of the user executing the universe command.

There are some environment variables in place, which might be of help:

The sub-directory initializer contains shell scripts which are used to prepare the container for the Ansible playbook. Those scripts are run inside the container in alphabetical order and perform basic setup tasks which cannot be done by the Ansible playbook. The scripts run with administrative rights. For example, Ansible requires Python 2.7 to be present in the container. In the default template, there is an initializer script in place which takes care of that.

In the above example this would be {{ user_vars.git_username }} and {{ user_secrets.git_password }} . The universe command will ensure that these variables are defined when the universe is bootstrapped.

Inside the Ansible playbook, you can reference this information using {{ user_vars.variable_name }} and {{ user_secrets.secret_name }} .

The secret flag indicates that the entered information should not be echoed. It is also handed over to Ansible in an encrypted container (vault).

While the universe is being bootstrapped, the user will be queried for the information using the given description.

You can define those variables within the universe file like that:

In addition to the usual Ansible facts, it is possible to gather information from the user which might be needed for the playbook. You might, for example, check out a git repository which requires username/password credentials.

A typical playbook will ensure that the needed packages (e.g. IDEs, editors, compilers, databases etc.) are installed in their desired version and all needed configurations are in place. You could, for example, desire a specific version of the JDK, while you always want the latest version of the IDE. If the playbook is re-run on the container at a later point in time, the IDE might then be updated to a newer version, while the JDK is left as it is.

The sub-directory ansible contains an Ansible playbook and an arbitrary number of Ansible roles. You can configure the playbook in this directory to your liking.

Seeds are created from templates. Slingring comes with a basic default template, which describes a very basic empty Ubuntu LTS container. It is stored in . You can use the default template as a starting point for your own templates.

Since the seed might contain any kind of file (also blobs), not all files are searched for replaceable expressions by default. Instead, there is a file called in the root directory of the template. In this file, you can define a template filter and a template blacklist.

The template filter is a list of files which will be processed while bootstrapping the universe description. The usual glob wildcards are supported. Double asterisks (**) can be used for recursive matching. Be careful when adding wildcards like *. Processing included binary files may take a long time even though they contain no variables to substitute.

Using the blacklist, you can define files which will not be processed, even though they match one or more of the above defined filters. The same glob wildcards are supported.

If no template.yml file can be found, expression substitution will be disabled while creating a seed.

There is still little to no support for checking the validity of templates, so double check your templates before publishing them.

You can use the command to see a list of templates available on your system.

If you want to create a seed from a specific template, you can do it like .|||

slingring - Manage development containers like Dr Stephen Strange (MCU).