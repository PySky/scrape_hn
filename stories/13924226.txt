What happens when you want to wrap your head around your company’s software architecture, but have an API application with 30 different possible “mission modules”, 4 databases, 3 frontend web apps, and an nginx load-balancer?

Well, if you’re like me, you probably have a stiff drink first.

It’s really not as bad as it sounds. The goal was to simplify and automate Wyre’s deployments in order to control our growing number of platform dependencies and microservices. We succeeded through a combination of long-term planning, extensive testing, and an emphasis on putting in the necessary work and time to stay simple.

This is because keeping infrastructure simple does take work, and in ways that can’t be measured from a pure product perspective. Even worse, there’s sometimes a prevailing bias that complexity is good, that the disorder which emerges as a byproduct of the daily grind is an indicator of progress. Unfortunately this is often illusory, especially since complexity generates its own workload. Nowhere is this more true than inside the infrastructure layer of a tech startup aiming for maximum flexibility.|||

What happens when you want to wrap your head around your company’s software architecture, but have an API application with 30 different possible “mission modules”, 4 databases, 3 frontend web apps…