Huffman-keybindings is a Clojure[Script] library typically intended for use in a UI setting in order to associate shorter keybindings to the most often used components. It uses a 26-ary huffman tree to map each UI component (a "tag") to a sequence of lower case alphabetic characters. The optimality of the encoding and the fact that no encoding is the prefix of another make Huffman coding the right tool for this job.

The input should be a map from the name of the component (the "tag") to a number proportional to the component's usage frequency, or its priority, etc. Components with a higher number will be given a shorter keybinding ( [ ]) ( ( merge {} ( [x random-word] [x ( )]))) The answer is returned as a map from tag to keybinding ( test-tagcounts) {"drip" "r", "poke" "p", "curl" "c", "fit" "f", "rule" "d j", "list" "q", "wail" "w w", "warm" "a", "smash" "d b", "rock" "o", "boast" "w b", "multiply" "d l", "offer" "e", "dry" "x", "moor" "b", "try" "d t", "precede" "k", "suspend" "d u", "warn" "h", "guide" "d k", "disappear" "d d", "suspect" "d q", "charge" "i", "frighten" "w f", "regret" "d e", "pray" "y", "battle" "d c", "stare" "w s", "meddle" "m", "replace" "d p", "attend" "d a", "destroy" "d y", "identify" "d n", "trust" "l", "own" "n", "strap" "z", "empty" "w e", "sigh" "s", "mate" "d f", "head" "d g", "strip" "d s", "last" "d v", "interrupt" "d i", "dream" "d w", "marry" "w m", "match" "t", "double" "u", "manage" "d m", "blink" "w l", "roll" "d o", "bump" "d x", "clean" "w c", "trade" "j", "mark" "d r", "rescue" "w r", "answer" "g", "approve" "v", "receive" "d z", "excite" "w x", "hum" "d h"} Which is easier to read when pretty printed: ( ( ( tagcounts)))

The most used components get first dibs on their keybinding. In our example, the widely used "curl", "meddle" and "fit" are mapped to "c", "m" and "f", respectively.

"rock" is mapped to "o", its second letter however, because "r" is taken by "drip". "drip" could not use "d" because "d" is a prefix for 26 other components, e.g. "d d" will get you "disappear" and "d h" will get you "hum".

The idea of using huffman's algorithm to devise keybindings pops up from time to time, for example in this HN comment thread or in this WoW forums thread.

If you are aware of any other actual implementation, please tell me, and I'll add a reference here.

The code is hosted on github under the AGPLv3 License:|||

huffman-keybindings -  Associate shorter keybindings to the most often used UI components