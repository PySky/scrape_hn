As an open-source maintainer, squash feature branches onto and write a standardized commit message while doing so.

The commit message should be structured as follows:



 The commit contains the following structural elements, to communicate intent to the consumers of your library:



 A scope may be provided to a commit’s type, to provide additional contextual information and is contained within parenthesis, e.g., .

Commit types other than and are allowed, for example the Angular convention recommends , , , , , , but these tags are not mandated by the conventional commits specification.

In software development, it’s been my experience that bugs are most often introduced at the boundaries between applications. Unit testing works great for testing the interactions that an open-source maintainer knows about, but do a poor job of capturing all the interesting, often unexpected, ways that a community puts a library to use.

Anyone who has upgraded to a new patch version of a dependency, only to watch their application start throwing a steady stream of 500 errors, knows how important a readable commit history (and ideally a well maintained CHANGLOG) is to the ensuing forensic process.

The Conventional Commits specification proposes introducing a standardized lightweight convention on top of commit messages. This convention dovetails with SemVer, asking software developers to describe in commit messages, features, fixes, and breaking changes that they make.

By introducing this convention, we create a common language that makes it easier to debug issues across project boundaries.

The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119.

We recommend that you proceed as if you’ve an already released product. Typically somebody, even if its your fellow software developers, is using your software. They’ll want to know what’s fixed, what breaks etc.

Go back and make multiple commits whenever possible. Part of the benefit of Conventional Commits is its ability to drive us to make more organized commits and PRs.

It discourages moving fast in a disorganized way. It helps you be able to move fast long term across multiple projects with varied contributors.

Conventional Commits encourages us to make more of certain types of commits such as fixes. Other than that, the flexibility of Conventional Commits allows your team to come up with their own types and change those types over time.

type commits should be translated to releases. type commits should be translated to releases. Commits with in the commits, regardless of type, should be translated to releases.

We recommend using SemVer to release your own extensions to this specification (and encourage you to make these extensions!)

Prior to merging or releasing the mistake, we recommend using to edit the commit history. After release, the cleanup will be different according to what tools and processes you use.

In a worst case scenario, it’s not the end of the world if a commit lands that does not meet the conventional commit specification. It simply means that commit will be missed by tools that are based on the spec.

No! If you use a squash based workflow on Git lead maintainers can cleanup the commit messages as they’re merged—adding no workload to casual committers. A common workflow for this is to have your git system automatically squash commits from a pull request and present a form for the lead maintainer to enter the proper git commit message for the merge.

The Conventional Commit specification is inspired by, and based heavily on, the Angular Commit Guidelines.

The first draft of this specification has been written in collaboration with some of the folks contributing to:

want your project on this list? send a pull request.|||

