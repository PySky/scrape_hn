Welcome back to Jscrambler 101! A collection of tutorials on how to use Jscrambler to protect your JavaScript. These tutorials will revolve around our most recent version of Jscrambler, in this case v4.0.

Last time, in Jscrambler 101 - Control Flow Flattening, we talked about Control Flow Flattening and its properties against reverse engineering. This time we’re going to talk about Code Locks.

If you develop and sell JavaScript applications, be it standard JavaScript, mobile web applications, or HTML5, you’ll want to prevent someone who didn’t pay or whose license has expired from executing your code. This is where our Code Locks come into play.

Jscrambler allows you to lock your code to a predefined list of domains, browsers, operating systems and set expiration dates. By using them, you can limit the execution of your code to a given set of browsers, a time frame (useful for demos that shouldn't be runnable after the preview period is over), on a given domain (usually yours), or a particular operating system.

You can deliver expirable demos to your clients without incurring the fear of code or client-loss. With Jscrambler, you are able to lock your JavaScript to a specific domain or list of domains, e.g. mywebsite.com. Your protected code won't work if not running on the ones that you have chosen. You can also lock your code and restrict it to certain browsers and operating systems.

Code Locks can also trigger a function when someone tries to execute the code outside of the set parameters. This function has to be defined inside the unprotected code and can be used to warn you when someone attempts to execute the code outside of the set Lock parameters. Whenever the code is executed outside of the set parameters, the code will break.

As the name says, Date Locks lock the code to a period of time. It can be locked to run until a certain date, after a certain date, or between two dates. These are done by setting only the , only the , or both, respectively. This can be useful to enforce license expiration or send out demos of your code. If we observe the following API parameters, we can see that the protected code will run from 01-05-2017 to 10-05-2017. If someone were to run the code outside of these dates, then the function would be triggered.

Domain Lock locks code to a domain name or IP address. It’s helpful if you want to stop someone from copying your code and running it on another domain or locally. Once again, it’s another great option if you want to enforce license agreements.

As for the API, several domains can be inserted in a list such as:

Browser Locks lock the code to a list of Browsers. If you want to enforce license agreements, this is a transformation you should consider using. The list of browsers works as a whitelist, meaning that the selected browsers are the ones where the code can run. 

 As an example, if we observe the following API Parameters, the protected code will only run on Firefox and Chrome.

This locks the code to a list of operating systems. It’s useful when you want to enforce apps to a specific platform. As Domain lock, and Browser lock, it’s useful for license enforcement. 

 Once again the OSes can be defined in a list inside the API parameters:

Summing up, using Code Locks helps you to protect your code by enforcing licenses, and preventing it from running outside of your set parameters, be it Browser, Date, Domain, or Operating System.

Remember that you can test all of these locks in our Playground app here. Select one or more of our locks, and use your domain, the current date, your browser, and operating system, depending on which locks you’ve selected, in order to have the app running properly. After you can select a domain you don’t own, previous or later dates, a different browser, and a different operating system from the ones you have, and you’ll see that the protected code won’t run properly.

On our next tutorial, we'll talk about Jscrambler’s polymorphic behavior, and why it’s implemented. Enjoy your testing and start protecting your applications asap!|||

Welcome back to Jscrambler 101! A collection of tutorials on how to use Jscrambler to protect your JavaScript. This time we’re going to talk about Code Locks.