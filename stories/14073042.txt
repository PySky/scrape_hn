Ponzu is a powerful and efficient open-source HTTP server framework and CMS. It provides automatic, free, and secure HTTP/2 over TLS (certificates obtained via Let's Encrypt), a useful CMS and scaffolding to generate content editors, and a fast HTTP API on which to build modern applications.

Ponzu is released under the BSD-3-Clause license (see LICENSE). (c) Boss Sauce Creative, LLC

With the rise in popularity of web/mobile apps connected to JSON HTTP APIs, better tools to support the development of content servers and management systems are necessary. Ponzu fills the void where you want to reach for Wordpress to get a great CMS, or Rails for rapid development, but need a fast JSON response in a high-concurrency environment.

Because you want to turn this:

For more detailed documentation, check out the docs

Since HTTP/2 Server Push is used, Go 1.8+ is required. However, it is not required of clients connecting to a Ponzu server to make HTTP/2 requests.

Creates a 'ponzu' directory, or one by the name supplied as a parameter immediately following the 'new' option in the $GOPATH/src directory. Note: 'new' depends on the program 'git' and possibly a network connection. If there is no local repository to clone from at the local machine's $GOPATH, 'new' will attempt to clone the 'github.com/ponzu-cms/ponzu' package from over the network.

Errors will be reported, but successful commands return nothing.

Generate boilerplate code for various Ponzu components, such as .

The command above will generate the file with boilerplate methods, as well as struct definition, and corresponding field tags like:

The generate command will intelligently parse more sophisticated field names such as 'field_name' and convert it to 'FieldName' and vice versa, only where appropriate as per common Go idioms. Errors will be reported, but successful generate commands return nothing.

The CLI can optionally parse a third parameter on the fields provided to generate the type of HTML view an editor field is presented within. If no third parameter is added, a plain text HTML input will be generated. In the example above, the argument shown as would show the Richtext input instead of a plain text HTML input (as shown in the screenshot). The following input view specifiers are implmeneted:

From within your Ponzu project directory, running build will copy and move the necessary files from your workspace into the vendored directory, and will build/compile the project to then be run.

Errors will be reported, but successful build commands return nothing.

Starts the HTTP server for the JSON API, Admin System, or both. The segments, separated by a comma, describe which services to start, either 'admin' (Admin System / CMS backend) or 'api' (JSON API), and, optionally, if the server should utilize TLS encryption - served over HTTPS, which is automatically managed using Let's Encrypt (https://letsencrypt.org)

Defaults to (running Admin & API on port 8080, without TLS)

Note: Admin and API cannot run on separate processes unless you use a copy of the database, since the first process to open it receives a lock. If you intend to run the Admin and API on separate processes, you must call them with the 'ponzu' command independently.

Will backup your own custom project code (like content, addons, uploads, etc) so we can safely re-clone Ponzu from the latest version you have or from the network if necessary. Before running , you should update the package by running

Downloads an addon to GOPATH/src and copys it to the Ponzu project's ./addons directory. Must be called from within a Ponzu project directory.

Errors will be reported, but successful add commands return nothing.

Prints the version of Ponzu your project is using. Must be called from within a Ponzu project directory. By passing the flag, the command will print the version of the Ponzu CLI you have installed.

A typical contribution workflow might look like:

$ git clone https://github.com/ponzu-cms/ponzu path/to/local/ponzu $ git checkout ponzu-dev install ponzu with go get or from your own local path $ go get github.com/ponzu-cms/ponzu/... $ /path/to/local/ponzu $ go install ./... $ git add -A $ git commit -m now you need to test the feature.. make a new ponzu project, but pass --dev flag $ ponzu --dev new /path/to/new/project build & run ponzu from the new project directory $ /path/to/new/project $ ponzu build ponzu run push to your origin:ponzu-dev branch and create a PR at ponzu-cms/ponzu $ git push origin ponzu-dev ... go to https://github.com/ponzu-cms/ponzu and create a PR

Note: if you intend to work on your own fork and contribute from it, you will need to also pass (using OS-standard filepath structure), where must be within , and you are working from a branch called .

The Go gopher was designed by Renee French. (http://reneefrench.blogspot.com) The design is licensed under the Creative Commons 3.0 Attributions license. Read this article for more details: http://blog.golang.org/gopher

The Go gopher vector illustraition by Hugo Arganda @argandas (http://about.me/argandas)

"Gotoro", the sushi chef, is a modification of Hugo Arganda's illustration by Steve Manuel (https://github.com/nilslice).|||

ponzu - Headless CMS with automatic JSON API. Featuring auto HTTPS, HTTP/2 Server Push, and flexible server framework written in Go.