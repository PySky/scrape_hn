This is an experimental, communtity based branch led by Guillaume Dumont (@willyd). It is a work-in-progress.

This branch of Caffe ports the framework to Windows.

Prebuilt binaries can be downloaded from the latest CI build on appveyor for the following configurations:

We assume that and are on your .

The fastest method to get started with caffe on Windows is by executing the following commands in a prompt (we use as a root folder for the remainder of the instructions):

The script will download the dependencies, create the Visual Studio project files (or the ninja build files) and build the Release configuration. By default all the required DLLs will be copied (or hard linked when possible) next to the consuming binaries. If you wish to disable this option, you can by changing the command line option . The prebuilt libraries also provide a batch script that can temporarily modify your envrionment variable to make the required DLLs available.

Below is a more complete description of some of the steps involved in building caffe.

By default CMake will download and extract prebuilt dependencies for your compiler and python version. It will create a folder called containing all the required dependencies inside your build folder. Alternatively you can build them yourself by following the instructions in the caffe-builder README.

To use cuDNN the easiest way is to copy the content of the folder into your CUDA toolkit installation directory. For example if you installed CUDA 8.0 and downloaded cudnn-8.0-windows10-x64-v5.1.zip you should copy the content of the directory to . Alternatively, you can define the CUDNN_ROOT cache variable to point to where you unpacked the cuDNN files e.g. . For example the command in scripts/build_win.cmd would become:

Alternatively, you can open and set the variable from there and click .

If CUDA is not installed Caffe will default to a CPU_ONLY build. If you have CUDA installed but want a CPU only build you may use the CMake option .

The recommended Python distribution is Anaconda or Miniconda. To successfully build the python interface you need to add the following conda channels:

and install the following packages:

If Python is installed the default is to build the python interface and python layers. If you wish to disable the python layers or the python build use the CMake options and respectively. In order to use the python interface you need to either add the folder to your python path of copy the folder to your folder.

Follow the above procedure and use . Change your current directory in MATLAB to and run the following command to run the tests:

If all tests pass you can test if the classification_demo works as well. First, from run to download the pre-trained caffemodel from the model zoo. Then change your MATLAB directory to and run .

You can choose to use the Ninja generator instead of Visual Studio for faster builds. To do so, change the option in the script. To install Ninja you can download the executable from github or install it via conda:

When working with ninja you don't have the Visual Studio solutions as ninja is more akin to make. An alternative is to use Visual Studio Code with the CMake extensions and C++ extensions.

CMake can be used to build a shared library instead of the default static library. To do so follow the above procedure and use . Please note however, that some tests (more specifically the solver related tests) will fail since both the test exectuable and caffe library do not share static objects contained in the protobuf library.

Should you encounter any error please post the output of the above commands by redirecting the output to a file and open a topic on the caffe-users list mailing list.

Refer to the BVLC/caffe master branch README for all other details such as license, citation, and so on.|||

caffe - Caffe: a fast open framework for deep learning.