Often, when developing applications with a microservice architecture, you cannot fully test out all services until you deploy to a staging server. This takes much too long to get feedback. Docker helps to speed up this process by making it easier to link together small, independent services locally.

In this article we’ll look at how to configure and test a number of services locally with Docker and Docker Compose. We’ll also look at workflow and how to interact with and debug containers.

This post assumes prior knowledge of the following topics. Refer to the resources for more info:

By the end of this tutorial, you should be able to…

Start by cloning the base project and then checking out the first tag:

Take a quick look at the structure, broken down by service:

Before we Dockerize the services, feel free to test the locations and/or users services…

Kill the servers once done.

Add a docker-compose.yml file to the project root, which is a config file used by Docker Compose to link multiple services together:

Then add a .dockerignore to the “services/locations”, “services/locations/src/db”, “services/users”, “services/users/src/db”, “tests”, and “web” directories:

With that, let’s set up each service individually, testing as we go…

Here, we create two new containers called and , from the Dockerfiles found in “services/users/src/db” and “services/locations/src/db”, respectively. We also add environment variables, expose ports, and send an exit code once they are successfully up and running - which will be used by other services.

To fire up the containers, run:

Once up, you can get a quick sanity check, by entering the shell:

Again, add a Dockerfile to “services/users”, making sure to review the comments:

Add the to the docker-compose.yml file:

Once up, create a new file in the project root called migrate.sh and add the Knex migrate and seed commands:

Register with the OpenWeatherMap API, and add the key as an environment variable:

Add the migrate and seed commands to migrate.sh:

Navigate to http://localhost:3003 in your browser and you should see the login page. Register a new user. Once redirected, you should see:

Take a look at the AJAX request in the GET route in web/src/routes/index.js. Why does the point to and not ? Well, refers back to the container itself, so you need to set up a link in the Docker compose - which we’ve already done.

Did you notice the unit and integration tests in the “services/users/tests” and “services/locations/tests” folders? Well, to run the tests properly, we need to update the environment variable, since it is currently configured for the development environment.

Let’s quickly look at how to work with code inside the containers…

Try it out:

Finally, to set up the last service, add the Dockerfile to the “tests” folder:

Update the environment variable, update the containers, and then run the tests:

Grab the final code from the node-docker-api repo. Comment below. Cheers!|||

Let's build and test a number of services with Docker.