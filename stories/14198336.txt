Flow does not infer string as the return type The inferred type is something else // error: return undefined. This type is incompatible with string function foo(num: number): string { if (num > 10) { return 'cool'; } } // nullable type: the one inferred function foo(num: number): string | void { if (num > 10) { return 'cool'; } } // to fix this, we need to check the result const fooed: string|void = foo(100); if (fooed) { fooed.toString(); }

// to fix this, we need to check the result const fooed: string|void = foo(100); if (fooed) { fooed.toString(); } // or tell the compiler we know better (in this case we actually do) fooed!.toString(); Important: Only works when strictNullChecks option is checked Catches up with Flow on control flow analysis (needed to make null checks really useful)

Types are nullable by default in TypeScript 1.x Non-nullable are still possible in TypeScript 1.x in a limited way Types are non-nullable by default in Flow TypeScript 2.x makes types non-nullable by default using `strictNullChecks` in `tsconfig.json`

Neither Flow nor TypeScript 2.0 catch this class Person { name: string; constructor() { // why no error? } } const olli: Person = new Person(); At least in TypeScript, this won't be fixed: https://github.com/Microsoft/TypeScript/issues/8476

Types can be parameterized by others let cats: Array<Cat> = []; // can only contain cats let animals: Array<Animal> = []; // can only contain animals // cool, cat is a sub type of animal animals.push(new Cat('Purry'));

Similar features can be found in Java/C++/C# decorators (aka Attributes in C# and Annotations in Java) readonly properties (TypeScript 2) like in C# Flow does not feature those or any other syntactic sugar, as it is a checker only

Types do not help you to avoid errors in algorithms? If so, what might be the problem here? Those actually are strings, result always is // this would have saved you type Test = { id: string; // ... }; // error 'string' This type is incompatible with 'number' List(tests).sort((t1, t2) => t1.id - t2.id)|||

A framework for easily creating beautiful presentations using HTML