This paper (and its supporting database) provides quantitative data that, in many cases, using open source software / free software (abbreviated as OSS/FS, FLOSS, or FOSS) is a reasonable or even superior approach to using their proprietary competition according to various measures. This paper’s goal is to show that you should consider using OSS/FS when acquiring software. This paper examines popularity, reliability, performance, scalability, security, and total cost of ownership. It also has sections on non-quantitative issues, unnecessary fears, OSS/FS on the desktop, usage reports, governments and OSS/FS, other sites providing related information, and ends with some conclusions. An appendix gives more background information about OSS/FS. You can view this paper at http://www.dwheeler.com/oss_fs_why.html (HTML format). A short presentation (briefing) based on this paper is also available. Palm PDA users may wish to use Plucker to view this longer report. Old archived copies and a list of changes are also available.

Open Source Software / Free Software (aka OSS/FS), also described as Free/Libre and Open Source Software (FLOSS), has risen to great prominence. Briefly, FLOSS programs are programs whose licenses give users the freedom to run the program for any purpose, to study and modify the program, and to redistribute copies of either the original or modified program (without having to pay royalties to previous developers).

The goal of this paper is to convince you to consider using FLOSS when you’re looking for software, using quantitive measures. Some sites provide a few anecdotes on why you should use FLOSS, but for many that’s not enough information to justify using FLOSS. Instead, this paper emphasizes quantitative measures (such as experiments and market studies) to justify why using FLOSS products is in many circumstances a reasonable or even superior approach. I should note that while I find much to like about FLOSS, I’m not a rabid advocate; I use both proprietary and FLOSS products myself. Vendors of proprietary products often work hard to find numbers to support their claims; this page provides a useful antidote of hard figures to aid in comparing proprietary products to FLOSS. Others have come to the same conclusions, for example, Forrester Research concluded in September 2006 that “Firms should consider open source options for mission-critical applications”.

I believe that this paper has met its goal; others seem to think so too. The 2004 report of the California Performance Review, a report from the state of California, urges that “the state should more extensively consider use of open source software”, and specifically references this paper. A review at the Canadian Open Source Education and Research (CanOpenER) site stated “This is an excellent look at the some of the reasons why any [organization] should consider the use of [FLOSS]... [it] does a wonderful job of bringing the facts and figures of real usage comparisons and how the figures are arrived at. No FUD or paid for industry reports here, just the facts”. This paper been referenced by many other works, too. It’s my hope that you’ll find it useful as well.

The following subsections describe the paper’s scope, challenges in creating it, the paper’s terminology, and the bigger picture. This is followed by a description of the rest of the paper’s organization (listing the sections such as popularity, reliability, performance, scalability, security, and total cost of ownership). Those who find this paper interesting may also be interested in the other documents available on David A. Wheeler’s personal home page. A short presentation (briefing) based on this paper is also available.

This paper has become long, there is now a supporting database of OSS/FS (FLOSS) quantitative studies that you may find easier to use. You may also be interested in the discussion group for quantitative numbers about free / libre / open source software.

As noted above, the goal of this paper is to convince you to consider using FLOSS when you’re looking for software, using quantitive measures. Note that this paper’s goal is not to show that all FLOSS is better than all proprietary software. Certainly, there are many who believe this is true from ethical, moral, or social grounds. It’s true that FLOSS users have fundamental control and flexibility advantages, since they can modify and maintain their own software to their liking. And some countries perceive advantages to not being dependent on a sole-source company based in another country. However, no numbers could prove the broad claim that FLOSS is always “better” (indeed you cannot reasonably use the term “better” until you determine what you mean by it). Instead, I’ll simply compare commonly-used FLOSS software with commonly-used proprietary software, to show that at least in certain situations and by certain measures, some FLOSS software is at least as good or better than its proprietary competition. Of course, some FLOSS software is technically poor, just as some proprietary software is technically poor. And remember -- even very good software may not fit your specific needs. But although most people understand the need to compare proprietary products before using them, many people fail to even consider FLOSS products, or they create policies that unnecessarily inhibit their use; those are errors this paper tries to correct.

This paper doesn’t describe how to evaluate particular FLOSS programs; a companion paper describes how to evaluate FLOSS programs. This paper also doesn’t explain how an organization would transition to an FLOSS approach if one is selected. Other documents cover transition issues, such as The Interchange of Data between Administrations (IDA) Open Source Migration Guidelines (November 2003) and the German KBSt’s Open Source Migration Guide (July 2003) (though both are somewhat dated). Organizations can transition to FLOSS in part or in stages, which for many is a more practical transition approach.

I’ll emphasize the operating system (OS) known as GNU/Linux (which many abbreviate as “Linux”), the Apache web server, the Mozilla Firefox web browser, and the OpenOffice.org office suite, since these are some of the most visible FLOSS projects. I’ll also primarily compare FLOSS software to Microsoft’s products (such as Windows and IIS), since Microsoft Windows is widely used and Microsoft is one of proprietary software’s strongest proponents. Note, however, that even Microsoft makes and uses FLOSS themselves (they have even sold software using the GNU GPL license, as discussed below).

I’ll mention Unix systems as well, though the situation with Unix is more complex; today’s Unix systems include many FLOSS components or software primarily derived from FLOSS components. Thus, comparing proprietary Unix systems to FLOSS systems (when examined as whole systems) is often not as clear-cut. This paper uses the term “Unix-like” to mean systems intentionally similar to Unix; both Unix and GNU/Linux are “Unix-like” systems. The most recent Apple Macintosh OS (MacOS OS X) presents the same kind of complications; older versions of MacOS were wholly proprietary, but Apple’s OS has been redesigned so that it’s now based on a Unix system with substantial contributions from FLOSS programs. Indeed, Apple is now openly encouraging collaboration with FLOSS developers.

It’s a challenge to write any paper like this; measuring anything is always difficult, for example. Most of these figures are from other works, and it was difficult to find many of them. But there are some special challenges that you should be aware of: legal problems in publishing data, the reluctance of many FLOSS users to publicly admit it (for fear of retribution), and dubious studies (typically those funded by a product vendor).

Many proprietary software product licenses include clauses that forbid public criticism of the product without the vendor’s permission. Obviously, there’s no reason that such permission would be granted if a review is negative -- such vendors can ensure that any negative comments are reduced and that harsh critiques, regardless of their truth, are never published. This significantly reduces the amount of information available for unbiased comparisons. Reviewers may choose to change their report so it can be published (omitting important negative information), or not report at all -- in fact, they might not even start the evaluation. Some laws, such as UCITA (a law in Maryland and Virginia), specifically enforce these clauses forbidding free speech, and in many other locations the law is unclear -- making researchers bear substantial legal risk that these clauses might be enforced. These legal risks have a chilling effect on researchers, and thus makes it much harder for customers to receive complete unbiased information. This is not merely a theoretical problem; these license clauses have already prevented some public critique, e.g., Cambridge researchers reported that they were forbidden to publish some of their benchmarked results of VMWare ESX Server and Connectix/Microsoft Virtual PC. Oracle has had such clauses for years. Hopefully these unwarranted restraints of free speech will be removed in the future. But in spite of these legal tactics to prevent disclosure of unbiased data, there is still some publicly available data, as this paper shows.

Another problem is that many users of FLOSS are reluctant to admit it. ZDNet UK’s November 25, 2005 article “Why open source projects are not publicised” by Ingrid Marson examines this. For example, it notes that many are afraid of retribution. Obviously, this makes some data more difficult to obtain.

This paper omits or at least tries to warn about studies funded by a product’s vendor, which have a fundamentally damaging conflict of interest. Remember that vendor-sponsored studies are often rigged (no matter who the vendor is) to make the vendor look good instead of being fair comparisons. Todd Bishop’s January 27, 2004 article in the Seattle Post-Intelligencer Reporter discusses the serious problems when a vendor funds published research about itself. A study funder could directly pay someone and ask them to directly lie, but it’s not necessary; a smart study funder can produce the results they wish without, strictly speaking, lying. For example, a study funder can make sure that the evaluation carefully defines a specific environment or extremely narrow question that shows a positive trait of their product (ignoring other, probably more important factors), require an odd measurement process that happens show off their product, seek unqualified or unscrupulous reviewers who will create positive results (without careful controls or even without doing the work!), create an unfairly different environment between the compared products (and not say so or obfuscate the point), require the reporter to omit any especially negative results, or even fund a large number of different studies and only allow the positive reports to appear in public. Microsoft's James Plamodon urged Microsoft employees to perform various manipulative practices, recommending that during "the Slog" of competition they “[work] behind the scenes to orchestrate “Independent” praise of our technology, and damnation of the enemy's.... “Independent” analysts' report should be issued... “Independent” consultants should write columns and articles, give conference presentations and moderate stacked panels, all on our behalf (and setting themselves up as experts in the new technology, available for [lucratively high prices])... “Independent” academic sources should be cultivated and quoted (and research money granted)”. The song “Meat the Press” by Steve Taylor eloquently expresses this kind of deception: “They can state the facts while telling a lie”.

This doesn’t mean that all vendor-funded studies are misleading, but many are, and there’s no way to be sure which studies (if any) are actually valid. For example, Microsoft’s “get the facts” campaign identifies many studies, but nearly every study is entirely vendor-funded, and I have no way to determine if any of them are valid. After a pair of vendor-funded studies were publicly lambasted, Forrester Research announced that it will no longer accept projects that involve paid-for, publicized product comparisons. One ad, based on a vendor-sponsored study, was found to be misleading by the UK Advertising Standards Authority (an independent, self-regulatory body), who formally adjudicated against the vendor. This example is important because the study was touted as being fair by an “independent” group, yet it was found unfair by an organization who examines advertisements; failing to meeting the standard for truth for an advertisement is a very low bar.

Steve Hamm’s BusinessWeek article “The Truth about Linux and Windows” (April 22, 2005) noted that far too many reports are simply funded by one side or another, and even when they say they aren’t, it’s difficult to take some seriously. In particular, he analyzed a report by the Yankee Group’s Laura DiDio, asking deeper questions about the data, and found many serious problems. His article explained why he just doesn’t “trust its conclusions” because “the work seems sloppy [and] not reliable” ( a Groklaw article also discussed these problems).

Many companies fund studies that place their products in a good light, not just Microsoft, and the concerns about vendor-funded studies apply equally to vendors of FLOSS products. I’m independent; I have received no funding of any kind to write this paper, and I have no financial reason to prefer either FLOSS or proprietary software. I recommend that you prefer studies that do not have financial incentives for any particular outcome.

This paper includes data over a series of years, not just the past year; all relevant data should be considered when making a decision, instead of arbitrarily ignoring older data. Note that the older data shows that FLOSS has a history of many positive traits, as opposed to being a temporary phenomenon.

You can see more detailed explanation of the terms “open source software” and “Free Software”, as well as related information, in the appendix and my list of Open Source Software / Free Software (OSS/FS or FLOSS) references at http://www.dwheeler.com/oss_fs_refs.html. Note that those who use the term “open source software” tend to emphasize technical advantages of such software (such as better reliability and security), while those who use the term “Free Software” tend to emphasize freedom from control by another and/or ethical issues. The opposite of FLOSS is “closed” or “proprietary” software.

Other alternative terms for FLOSS, besides either of those terms alone, include “libre software” (where libre means free as in freedom), “livre software” (same thing), free/libre and open-source software (FLOSS), open source / Free Software (OS/FS), free / open source software (FOSS or F/OSS), open-source software (indeed, “open-source” is often used as a general adjective), “freed software,” and even “public service software” (since often these software projects are designed to serve the public at large). I recommend the term “FLOSS” because it is easy to say and directly counters the problem that “free” is often misunderstood as “no cost”. There are other ways to expand FLOSS, including Free-Libre and Open Source Software and Free/Libre/Open Source Software.

Software that cannot be modified and redistributed without further limitation, but whose source code is visible (e.g., “source viewable” or “open box” software, including “shared source” and “community” licenses), is not considered here since such software doesn’t meet the definition of FLOSS. FLOSS is not “freeware”; freeware is usually defined as proprietary software given away without cost, and does not provide the basic FLOSS rights to examine, modify, and redistribute the program’s source code.

A few writers still make the mistake of saying that FLOSS is “non-commercial” or “public domain”, or they mistakenly contrast FLOSS with “commercial” products. However, today many FLOSS programs are commercial programs, supported by one or many for-profit companies, so this designation is quite wrong. Don’t make the mistake of thinking FLOSS is equivalent to “non-commercial” software! Also, nearly all FLOSS programs are not in the public domain. the term “public domain software” has a specific legal meaning -- software that has no copyright owner -- and that’s not true in most cases. In short, don’t use the terms “public domain” or “non-commercial” as synonyms for FLOSS.

An FLOSS program must be released under some license giving its users a certain set of rights; the most popular FLOSS license is the GNU General Public License (GPL). All software released under the GPL is FLOSS, but not all FLOSS software uses the GPL; nevertheless, some people do inaccurately use the term “GPL software” when they mean FLOSS software. Given the GPL’s dominance, however, it would be fair to say that any policy that discriminates against the GPL discriminates against FLOSS.

This is a large paper, with many acronyms. A few of the most common acronyms are:

This paper uses logical style quoting (as defined by Hart’s Rules and the Oxford Dictionary for Writers and Editors); quotations do not include extraneous punctuation.

Typical FLOSS projects are, in fact, an example of something much larger: commons-based peer-production. The fundamental characteristic of FLOSS is its licensing, and an FLOSS project that meets at least one customer’s need can be considered a success, However, larger FLOSS projects are typically developed by many people from different organizations working together for a common goal. As the declaration Free Software Leaders Stand Together states, the business model of FLOSS “is to reduce the cost of software development and maintenance by distributing it among many collaborators”. Yochai Benkler’s 2002 Yale Law Journal article, “Coase’s Penguin, or Linux and the Nature of the Firm” argues that FLOSS development is only one example of the broader emergence of a new, third mode of production in the digitally networked environment. He calls this approach “commons-based peer-production” (to distinguish it from the property- and contract-based models of firms and markets).

Many have noted that FLOSS approaches can be applied to many other areas, not just software. The Internet encyclopedia Wikipedia, and works created using Creative Commons licenses (Yahoo! can search for these), are other examples of this development approach. Wide Open: Open source methods and their future potential by Geoff Mulgan (who once ran the policy unit at 10 Downing Street), Tom Steinberg, and with Omar Salem, discusses this wider potential. Many have observed that the process of creating scientific knowledge has worked in a similar way for centuries.

FLOSS is also an example of the incredible value that can result when users have the freedom to tinker (the freedom to understand, discuss, repair, and modify the technological devices they own). Innovations are often created by combining pre-existing components in novel ways, which generally requires that users be able to modify those components. This freedom is, unfortunately, threatened by various laws and regulations such as the U.S. DMCA, and the FCC “broadcast flag”. It’s also threatened by efforts such as “trusted computing” (often called “treacherous computing”), whose goal is to create systems in which external organizations, not computer users, command complete control over a user’s computer (BBC News among others is concerned about this).

Lawrence Lessig’s Code and Other Laws of Cyberspace argues that software code has the same role in cyberspace as law does in real space. In fact, he simply argues that “code is law”, that is, that as computers are becoming increasingly embedded in our world, what the code does, allows, and prohibits, controls what we may or may not do in a powerful way. In particular he discusses the implications of “open code”.

All of these issues are beyond the scope of this paper, but the referenced materials may help you find more information if you’re interested.

Below is data discussing popularity, reliability, performance, scalability, security, and total cost of ownership. I close with a brief discussion of non-quantitative issues, unnecessary fears, FLOSS on the desktop, usage reports, other sites providing related information, and conclusions. A closing appendix gives more background information about FLOSS. Each section has many subsections or points. The non-quantitative issues section includes discussions about freedom from control by another (especially a single source), protection from licensing litigation, flexibility, social / moral / ethical issues, and innovation. The unnecessary fears section discusses issues such as support, legal rights, copyright infringement, abandonment, license unenforceability, GPL “infection”, economic non-viability, starving programmers (i.e., the rising commercialization of FLOSS), compatibility with capitalism, elimination of competition, elimination of “intellectual property”, unavailability of software, importance of source code access, an anti-Microsoft campaign, and what’s the catch. And the appendix discusses definitions of FLOSS, motivations of developers and developing companies, history, licenses, FLOSS project management approaches, and forking.

Many people think that a product is only a winner if it is popular. This is lemming-like, but there’s some rationale for this: products that have many users get applications built on top of them, trained users, and momentum that reduces future risk. Some writers argue against FLOSS or GNU/Linux as “not being mainstream”, but if their use is widespread then such statements reflect the past, not the present. There’s excellent evidence that many FLOSS products are popular:

Perhaps the simplest argument that GNU/Linux has a significant market share (and that it’s increasing) is that Sun is modifying its Solaris product to run GNU/Linux applications, and IBM has already announced that GNU/Linux will be the successor of IBM’s own AIX.

There are a lot of anecdotal stories that FLOSS is more reliable, but finally there is quantitative data confirming that mature FLOSS programs are often more reliable:

Damien Challet and Yann Le Du of the University of Oxford have written a paper titled Closed source versus open source in a model of software bug dynamics. In this paper they develop a model of software bug dynamics where users, programmers and maintainers interact through a given program. They then analyzed the model, and found that all other things being equal (such as number of users, programmers, and quality of programmers), “debugging in open source projects is always faster than in closed source projects.”

Of course, there are many anecdotes about Windows reliability vs. Unix. For example, the Navy’s “Smart Ship” program caused a complete failure of the USS Yorktown ship in September 1997. Whistle-blower Anthony DiGiorgio stated that Windows is “the source of the Yorktown’s computer problems.” Ron Redman, deputy technical director of the Fleet Introduction Division of the Aegis Program Executive Office, said “there have been numerous software failures associated with [Windows] NT aboard the Yorktown.” Redman also said “Because of politics, some things are being forced on us that without political pressure we might not do, like Windows NT... If it were up to me I probably would not have used Windows NT in this particular application. If we used Unix, we would have a system that has less of a tendency to go down.”

Reliability is increasing important in software. ABI Research 2004 study “Automotive Electronics Systems: Market Requirements for Microcontrollers, Accelerometers, Hall Effect and Pressure Sensors” found that approximately 30% of all automotive warranty issues today are software and silicon-related.

One problem with reliability measures is that it takes a long time to gather data on reliability in real-life circumstances. Thus, there’s more data comparing older Windows editions to older GNU/Linux editions. The key is that these comparisons are fair, because they compare contemporaneous products. The available evidence suggests that FLOSS has a significant edge in reliability, at least in many circumstances.

Comparing GNU/Linux and Microsoft Windows performance on equivalent hardware has a history of contentious claims and different results based on different assumptions. FLOSS has at least shown that it’s often competitive, and in many circumstances it beats the competition.

Performance benchmarks are very sensitive to the assumptions and environment, so the best benchmark is one you set up yourself to model your intended environment. Failing that, you should use unbiased measures, because it’s so easy to create biased measures.

First, here are a few recent studies suggesting that some FLOSS systems beat proprietary competitors in at least some circumstances:

All OSes in active development are in a constant battle for performance improvements over their rivals. The history of comparing Windows and GNU/Linux helps put this in perspective:

There are other benchmarks available, but I’ve discounted them on various grounds:

More information on various benchmarks is available from Kegel’s NT vs. Linux Server Benchmark Comparisons, SPEC, and the dmoz entry on benchmarking.

Remember, in benchmarking, everything depends on the configuration and assumptions that you make. Many systems are constrained by network bandwidth; in such circumstances buying a faster computer won’t help at all. Even when network bandwidth isn’t the limitation, much depends on what the products are designed to do. Neither Windows nor GNU/Linux do well in large-scale symmetric multiprocessing (SMP) shared memory configurations, e.g., for 64-way CPUs with shared memory. On the other hand, if you want massive distributed non-shared memory, GNU/Linux does quite well, since you can buy more CPUs with a given amount of money. If massive distribution can’t help you and you need very high performance, Windows isn’t even in the race; today Windows runs essentially only on Intel x86 compatible chips, while GNU/Linux runs on much higher performance processors as well as the x86.

At one time the security of FLOSS systems was widely debated. Clearly FLOSS systems are not magically invincible from security flaws. But for most of those who study the question, the issue of whether or not FLOSS improves or reduces security appears to be an increasingly settled issue. The prestigious Communications of the ACM published “Increased Security through Open Source” by Hoepman and Jacobs in January 2007 , which stated that “We believe open source software is a necessary requirement to build systems that are more secure.... opening the source of existing systems will at first increase their exposure... However, this exposure (and the associated risk of using the system) can now be determined publicly. With closed source systems the perceived exposure may appear to be low, while the actual exposure... may be much higher. Moreover, because the source is open... the period of increased exposure is short. In the long run, openness of the source will increase its security... [and] it allows users to make a more informed choice about the security of a system....”

Fundamentally FLOSS better meets the principle of "open design", a basic principle for developing secure systems identified by Saltzer and Schroeder long before FLOSS became popular. This principle itself isn't even new; Supreme Court Justice Louis Brandeis noted even earlier that “Publicity is justly commended as a remedy for social and industrial diseases. Sunlight is said to be the best of disinfectants; electric light the most efficient policeman."

The European Parliament approved A5-0264/2001 which calls “on the Commission and Member States to promote software projects whose source text is made public (open-source software), as this is the only way of guaranteeing that no backdoors are built into programmes [and calls] on the Commission to lay down a standard for the level of security of e-mail software packages, placing those packages whose source code has not been made public in the ‘least reliable’ category” (5 September, 2001; 367 votes for, 159 against and 39 abstentions).

Here are some quantitative studies that back this up:

Security is notoriously hard to measure, and many reports that attempt to do so end up with interesting information that’s hard to interpret or use. And some reports come from sources whose reliability is widely questioned. On November 2, 2004, mi2g reported on successful digital breaches against permanently connected computers worldwide. They concluded that BSDs (which are usually FLOSS) and Apple’s computers had the fewest security breaches; on the surface, that sounds positive for FLOSS. They also reported that GNU/Linux systems had the most breaches, followed by Windows. That result sounds mixed, but digging deeper it turns out that this ranking is artificial, based on artificial definitions. Their default definition for a security breach only included manual attacks and ignored malware (viruses, worms, and Trojans). Yet malware is one of the dominant security problems for Windows users, and only Windows users! After all, why bother with a manual attack when completely automated attacks against broad collections of computers will do more? When they include malware in their calculations for all system breaches, “including the impact of MyDoom, NetSky, SoBig, Klez and Sasser, Windows has become the most breached computing environment in the world accounting for most of the productivity losses associated with malware - virus, worm and trojan - proliferation.” Even without malware, in governments “the most breached Operating System for online systems has now become Windows (57.74%) followed by Linux (31.76%) and then BSD and Mac OS X together (1.74%)” (a reversal of their previous rankings). But while these results are interesting, there are significant problems in interpreting what these results actually mean:

One serious problem in making secure software is that there are strong economic disincentives for proprietary vendors to make their software secure. For example, if vendors make their software more secure, they would often fail to be “first” in a given market; this often means that they will lose that market. Since it is extremely difficult for customers to distinguish proprietary software with strong security from those with poor security, the poor products tend to eliminate the good ones (after all, they’re cheaper to develop and thus cost less). Governments have other disincentives as well. For a discussion of some of the economic disincentives for secure software, see Why Information Security is Hard - an Economic Perspective by Ross Anderson (Proceedings of the Annual Computer Security Applications Conference (ACSAC), December 2001, pp. 358-365). It’s not clear that FLOSS always avoids these disincentives, but it appears in at least some cases it does. For example, FLOSS source code is public, so the difference in security is far more visible than in proprietary products.

One of the most dangerous security problems with proprietary software is that if intentionally malicious code is snuck into it, such code is extremely difficult to find. Few proprietary vendors have other developers examine all code in great detail - their testing processes are designed to catch mistakes (not malice) and often don’t look at the code at all. In contrast, malicious code can be found by anyone when the source code is publicly available, and with FLOSS, there are incentives for arbitrary people to review it (such as to add new features or perform a security review of a product they intend to use). Thus, someone inserting malicious code to an FLOSS project runs a far greater risk of detection. Here are two examples, one confirmed, one not confirmed:

Bruce Perens, in “Open sourcers wear the white hats”, makes the interesting claim that most of the people reviewing proprietary products looking for security flaws (aside from one or two paid reviewers) are “black hats,” outsiders who disassemble the code or try various types of invalid input in search of a flaw that they can exploit (and not report). There is simply little incentive, and many roadblocks, for someone to search for security flaws simply to improve someone else’s proprietary product. “Only a black hat would disassemble code to look for security flaws. You won’t get any ‘white hats’ doing this for the purpose of [just] closing the flaws.” In contrast, he thinks many open source developers do have such an incentive. This article slightly overstates the case; there are other incentives (such as fame) that can motivate a few people to review some other company’s proprietary product for security. Still, it has a point; even formal reviews often only look at designs (not code), proprietary code is often either unreviewed or poorly reviewed, and there are many cases (including the entire OpenBSD system) where legions of developers review open source code for security issues. As he notes, “open source has a lot of ‘white hats’ looking at the source. They often do find security bugs while working on other aspects of the code, and the bugs are reported and closed.”

Those who are familiar with computer security issues may raise an objection: what about the “Trusting Trust” attack? An Air Force evaluation by Karger and Schell first publicly described this very nasty computer attack, which Ken Thompson ably demonstrated and described in his classic 1984 paper “Reflections on Trusting Trust”. Thompson showed that because we use software to create other software, if an attacker subverts the software-creating programs, no amount of auditing any program can help you - the subverted programs can hide whatever they want to! This has been called the “uncounterable attack”, and some have said that it’s impossible to secure computers simply because this attack is possible. Some have even said that all those security audits of FLOSS are worthless, because subverted tools could insert attacks the auditors couldn’t see. But it turns out that the trusting trust attack can be countered. My 2005 paper Countering Trusting Trust through Diverse Double-Compiling (DDC), published by ACSAC, shows how the “uncounterable” trusting trust attack can be countered. But there’s a catch: the DDC defense only works if you can get the source code for your software creation tools, including the operating system, compiler, and so on. That kind of information is typically only available for FLOSS programs! Thus, even in the case of the dangerous “trusting trust” attack, FLOSS has a security advantage.

FLOSS programs can be evaluated using the formal security evaluations required by some government agencies, such as the Common Criteria (ISO Standard 15408) and NIST FIPS 140, One complication has been that many governments have assumed that vendors would pay for such evaluations on their own. This assumption is a poor match for many FLOSS projects, whose business models typically require that users who want a particular improvement (such as an evaluation) pay for that improvement (in money or effort). This doesn’t make formal security evaluations of FLOSS projects impossible, but it may require that customers change their approach to performing evaluations in some cases. In particular, customers will need to not assume that vendors will do evaluations ‘for free.’ Part of the problem is that many organizations’ acquisition strategies were defined before FLOSS became prevalent, and have not yet been adjusted to the widespread presence of FLOSS. Some FLOSS programs have multiple project sites, so an organization must select exactly what project to evaluate, but that‘s not really change; evaluations of proprietary programs must select a specific version too.

Here are several reports on FLOSS program evaluations:

Some other interesting data about security can be found in Google Facts/Statistics question about computer security and loss of data.

The “Alexis de Tocqueville Institute” (ADTI) published a white paper called “Opening the Open Source Debate” that purported to examine FLOSS issues. Unfortunately, ADTI makes many wrong, specious, and poorly-argued claims about FLOSS, including some related to security. Wired (in its article Did MS Pay for Open-Source Scare?) made some startling discoveries about ADTI; after querying, they found that “a Microsoft spokesman confirmed that Microsoft provides funding to the Alexis de Tocqueville Institution... Microsoft did not respond to requests for comment on whether the company directly sponsored the debate paper. De Tocqueville Institute president Ken Brown and chairman Gregory Fossedal refused to comment on whether Microsoft sponsored the report.” Politech found additional suspicious information about ADTI, and UPI reported that ADTI receives a significant portion of its funding from the Microsoft Corp, and thus it essentially lobbies in favor of issues important to Microsoft. ADTI apparently has a history of creating “independent” results that are apparently paid for by corporations (e.g., see the Smoke Free for Health article about ADTI’s pro-tobacco-lobby papers). Reputable authors clearly identify any potential conflict of interest, even if it’s incidental; ADTI did not. Specific to their report, Andy Tanenbaum has described how Ken Brown of ADTI failed to understand the issues and appeared to have an agenda.

The ADTI paper makes many errors and draws unwarranted conclusions. I’ll just note a few examples of the paper’s problems that aren’t as widely noted elsewhere: incorrect or incomplete quotations, rewriting web browser history, and cleverly omitting the most important data in one of their charts:

All of this is unfortunate, because the real Alexis de Tocqueville strongly approved of the FLOSS’s underlying approaches. Alexis de Tocqueville remarked on the extraordinary success in the United States of voluntary community associations to do many tasks, and viewed them extremely favorably. He found such associations to be remarkably effective.

There are other non-quantitative discussions on FLOSS and security. The October 2002 paper Open Source Digital Forensics Tools: The Legal Argument by Brian Carrier notes that to enter scientific evidence into a United States court, a forensics tool must be reliable and relevant as determined through the “Daubert” guidelines. The paper examines then those guidelines and argues that “open source tools may more clearly and comprehensively meet the [forensics] guidelines than closed source tools.” Stacey Quandt’s ”Linux and Windows security compared” compares Windows and GNU/Linux security qualitatively; she concludes that they’re comparable in network security/protocols, deployment and operations, and trusted computing; Linux is superior in base security, application security, and open standards. The only area where Windows was ahead was in assurance, because an EAL4 Common Criteria evaluation has been completed for Windows; an EAL3 evaluation for a GNU/Linux has completed, but an EAL4 evaluation for a GNU/Linux is in process but not yet complete. Since an EAL4 GNU/Linux evaluation is expected to complete by around the end of 2004, this doesn’t appear to be a long-lasting advantage for Windows.

Many security experts have stated that FLOSS has advantages over the security of proprietary software, including Whitfield Diffie (co-inventor of public key cryptography), Bruce Schneier (expert on cryptography and computer security), Vincent Rijmen (a developer of the Advanced Encryption Standard (AES)), Elias Levy (Aleph1, the former moderator of the popular security discussion group Bugtraq), John Viega (author of a book on secure programming), Kenneth van Wyk, and Peter Neumann (long-time expert on security). A humorous article expressing this view is the article Microsoft Windows: A lower Total Cost of 0wnership (0wnership starts with zero, not the letter O; 0wn is slang for gaining illicit remote administrative control over someone else’s computer). This article by Immunix, Inc., compares the security of Microsoft Windows and OSS systems based on their technology characteristics, and declares that the “best platform for your targets [victims] to be running is Microsoft Windows, allowing you unparalleled value for their dollar” (see the next section for the more traditional Total Cost of Ownership information). This doesn’t guarantee that a particular FLOSS program is more secure than a particular proprietary product - merely that there are some fundamental security advantages to easing public review.

And it’s worth noting that the better distributions, who job includes ensuring that their packages don’t have known vulnerabilities, seem to take their job seriously. Mark J. Cox has posted a summary of how Red Hat ensured that Fedora Core 4 didn’t include any known vulnerabilities (through an auditing process); Debian does similar types of analysis.

In contrast, Microsoft’s Jim Allchin disclosed under oath in court testimony that some Microsoft code was so flawed it could not be safely disclosed to the public. Yet more recently, Microsoft announced its “Government Security Program” to allow governments to view most source code (though not all code, and they cannot change and freely redistribute the results). Indeed, Reuters reported a survey by Forrester Research Inc. that found that most computer security experts at major companies do not think Microsoft Corporation’s products are secure; 77% said security was a top concern when using Windows. The primary problem reported was that patches were not implemented, because “administrators lacked both the confidence that a patch won’t bring down a production system and the tools and time to validate Microsoft’s avalanche of patches.” If you need to secure Windows, feel free to look at my essay on how to secure Microsoft Windows (for home and small business users); while many issues are true for any system, there are also a number of security problems that are essentially unique to Windows.

Specialized applications may need high assurance software. If you are interested in that, see my essay High Assurance (for Security or Safety) and Free-Libre / Open Source Software (FLOSS).

Now it should be obvious from these figures that FLOSS systems are not magically invincible from security flaws. Indeed, some have argued that making the source code available gives attackers an advantage (because they have more information to make an attack). While FLOSS gives attackers more information, this ignores opposing forces: having the source code also gives the defenders more information (because they can also examine its original source code), and in addition, the defenders can improve the code. More importantly, the necessary information for breaking into a program is in the binary executable of the program; disassemblers and decompilers can quickly extract whatever information is needed from executables to break into a program, so hiding the source code isn’t all that helpful for preventing attacks against attackers who are willing to use such programs. Even if source code were required (it’s not), source code can often be acquired by attackers, either by simply asking for it (in exchange for funds) or by acquiring the source code itself by attack. Again, it is not true that proprietary programs are always more secure, or that FLOSS is always more secure, because there are many factors at work. Writing secure software does require that developers know how to do it, but there’s no evidence that proprietary software developers in general have more such knowledge; indeed, since many developers create both proprietary and FLOSS programs, it’s unlikely there’s a major difference, and FLOSS encourages code review in a way that few proprietary projects match. It is also greatly enhanced by review; certainly not all FLOSS programs are reviewed for security, but many are, both by other developers and by others (for example, one group of students was assigned the task of finding and reporting vulnerabilities, and reported 44). And clearly, any vulnerabilities must be fixed and distributed. Note that a well-configured and well-maintained system, of any kind, will almost always be far more secure than a poorly configured and unmaintained system of any kind over the long term. For a longer description of these issues, see my discussion on open source and security (part of my book on writing secure software). However, from these figures, it appears that FLOSS systems are in many cases better - not just equal - in their resistance to attacks as compared to proprietary software.

Indeed, whatever product you use or support, you can probably find a study to show it has the lowest TCO for some circumstance. Not surprisingly, both Microsoft and Sun provide studies showing that their products have the lowest TCO. Xephon has a study determining that mainframes are the cheapest per-user (due to centralized control) at £3450 per user per year; Centralized Unix cost £7350 per user per year, and a decentralized PC environment costs £10850 per user per year. Xephon appears to be a mainframe-based consultancy, though, and would want the results to come out this way. There are indeed situations where applying a mainframe makes sense.. but as we’ll see in a moment, you can use FLOSS in such environments too.

In short, what has a smaller TCO depends on your needs and your environment. First, identify what the requirements are, including the types of applications. You must then determine the architectural options that meet these requirements. For example, GNU/Linux systems can be implemented as independent client systems with a few common servers, just like most Windows systems are. But there are many architectural alternatives, such as using X-Windows terminals (programs run on a central server (so the client systems can be extremely low-end “throw-away” systems), clustering (where tasks can be divided among many computers), or use Stateless Linux (programs run locally on the computer, but since nothing is stored locally, anyone can log into any computer later).

Then, to determine TCO you must identify all the important cost drivers (the “cost model”) and estimate their costs. Don’t forget “hidden” costs, such as administration costs, upgrade costs, technical support, end-user operation costs, and so on. Computer Sciences Corporation’ study “Open Source: Open for Business” (pp. 39-43) identifies the TCO factors that it believes are most important for evaluating FLOSS with proprietary software: hardware costs (including purchase price and hardware maintenance), direct software costs (including purchase price and support and maintenance), indirect software costs (especially administration of licenses), staffing costs, support costs, and downtime (CSC claims that the “modularity of Linux can allow a very lean build to be deployed, which in turn can enable more stability...”).

To be honest, the term “TCO” is common but misleading for most software, especially for proprietary software, because software users often don’t own the software they use and thus don’t have the rights of ownership. It might be more accurate to say that proprietary software users often “lease” or “rent” the software, and thus this category could more accurately be named “total cost to lease or own”. Fundamentally, unless you arrange to have a software program’s copyright transferred to you, you do not actually own the software -- you only own a license to run the software in certain limited ways. That’s an important distinction; in particular, with proprietary software you typically do not have the rights associated with ownership. When you pay to own a physical product (say a building or computer hardware), you typically have nearly unlimited rights to modify and resell the product you bought (subject to legal limits that prevent harm to others like zoning laws and limits on electromagentic emissions). In contrast, with nearly all proprietary software, you do not have the right to modify the software to suit your needs. Many proprietary licenses are even more stringent; they typically forbid reverse engineering the product to understand what it does (say, to examine its security), forbid publishing benchmarks or reviews without approval by the vendor, and often forbid (sub)leasing, reselling, or redistributing the product. These kinds of limits make proprietary software users more like leasee or a renter of a building, who can occupy a space but cannot modify or sublease the space. Some proprietary software programs are sold for use only over a period of time, and thus the analogy to renting is especially easy to see. But though there are many proprietary software programs that are sold with a one-time cost (a “perpetual” license), in reality these programs also impose recurring fees, such as upgrade costs to continue to use the programs on newer hardware and operating systems, upgrades so that your software will continue to be compatible with others’ copies and with other software, and various support fees, and so even so-called perpetual licenses have recurring costs like a typical rent or lease. This isn’t necessarily terrible, and I’m certainly not going to say that such arrangements are unethical; people decide to rent or lease physical property too! But it’s important to understand what the transaction entails. For more on this topic, see Dr. Debora Halbert’s The Open Source Alternative: Shrink-Wrap, Open Source and Copyright, particularly point 22. As explained by Ross Anderson’s Trusted Computing (TC) Frequently Asked Questions (FAQ), vendors are already working to build mechanisms to enforce this even more strongly, because so-called “trusted computing” transfers control of your computer from you to the vendors (the FSF calls this technology “treacherous computing” because while the computer is more trustworthy for users, it does this by becoming less trustworthy by owners). As Anderson says, “TC will also make it easier for people to rent software rather than buy it; and if you stop paying the rent, then not only does the software stop working but so may the files it created. So if you stop paying for upgrades to Media Player, you may lose access to all the songs you bought using it.” Users of FLOSS software aren’t actually owners either, and they have some of the same types of recurring costs (such as support). On the other hand, the rights FLOSS users are granted (users can understand, publicly comment on, modify, and redistribute the software -- and all this in perpetuity) are far closer to an owner’s rights than the rights granted to a proprietary software user.

There’s another problem in thinking that people really “own” software: maintenance matters. If a proprietary software company goes out of business, the value of the software it sold immediately plummets to near zero. This is not how people react when they purchase land or other real property; the value of the property does not diminish just because the seller is going out of business. This suggests that when users are purchasing software, they’re really purchasing future support and upgrades as well. Robert Lefkowitz’s “Calculating the True Price of Software” argues that FLOSS pricing essentially splits the costs of initial value and the value of options on future maintenance, converting warrants on future maintenance and enhancements into options, so that instead of having a sole supplier (warrants), it creates a third-party market (options) of these derivatives.

FLOSS has many strong cost advantages in various categories that, in many cases, will result in its having the smallest TCO:

You may also want to see MITRE Corporation’s business case study of OSS, which considered military systems.

Most of these items assume that users will use the software unmodified, but even if the FLOSS software doesn’t do everything required, that is not necessarily the end of the story. One of the main hallmarks of FLOSS software is that it can be modified by users. Thus, any true TCO comparison should consider not just the products that fully meet the requirements, but the existing options that with some modifications could meet the requirements. It may be cheaper to start with an existing FLOSS program, and improve it, than to start with a proprietary program that has all of the necessary functionality. Obviously, the total TCO including such costs varies considerably depending on the circumstances.

ComputerWorld published an essay by Bernard Golden (Navica) who argues that computing ROI when switching from proprietary to FLOSS (such as from Windows to Linux) is the worst-case return on investment (ROI) scenario. This is because a transition requires retraining and perhaps hiring new personnel, which are always expensive propositions. Indeed, in general, any change imposes the costs of managing that change.

Brendan Scott (a lawyer specializing in IT and telecommunications law) argues that the long run TCO of FLOSS must be lower than proprietary software. Scott’s paper makes some interesting points, for example, “TCO is often referred to as the total cost of ‘ownership’... [but] ‘ownership’ of software as a concept is anathema to proprietary software, the fundamental assumptions of which revolve around ownership of the software by the vendor. ... The user [of proprietary software] will, at best, have some form of (often extremely restrictive) license. Indeed, some might argue that a significant (and often uncosted) component of the cost of ‘ownership’ of proprietary software is that users don’t own it at all.” The paper also presents arguments as to why GPL-like free software gives better TCO results than other FLOSS licenses. Scott concludes that “Customers attempting to evaluate a free software v. proprietary solution can confine their investigation to an evaluation of the ability of the packages to meet the customer’s needs, and may presume that the long run TCO will favor the free software package. Further, because the licensing costs are additional dead weight costs, a customer ought to also prefer a free software solution with functionality shortfalls where those shortfalls can be overcome for less than the licensing cost for the proprietary solution.”

Microsoft’s first TCO study comparing Windows to Solaris (mentioned earlier) is not a useful starting point for estimating your own TCO. Their study reported the average TCO at sites using Microsoft products compared to the average TCO at sites using Sun systems, but although the Microsoft systems cost 37% less to own, the Solaris systems handled larger databases, more demanding applications, 63% more concurrent connections, and 243% more hits per day. In other words, the Microsoft systems that did less work cost less than systems that did more work. This is not a useful starting point if you’re using TCO to help determine which system to buy - to make a valid comparison by TCO, you must compare the TCOs of systems that meet your requirements. A two-part analysis by Thomas Pfau (see part 1 and part 2) identifies this and many other flaws in the study.

There are some studies that emphasize Unix-like systems, not FLOSS, which claim that that there are at least some circumstances where Unix-like systems are less costly than Windows. A Strategic Comparison of Windows vs. Unix by Paul Murphy is one such paper. It appears that many of these arguments would also apply to FLOSS systems, since many of them are Unix-like.

Be sure that you actually compute your own TCO; don’t just accept a vendor’s word for it, and in particular, don’t just accept a vendor’s claims for the TCO of its competitors. In 2004 Newham council chose Microsoft products over a mixed solution, reporting that their selected solution had a lower TCO according to an independent study. Yet when the reports were made public in September 2004, it was discovered that it was Microsoft who created the cost figures of switching to their competitor - not an independent source at all. Any vendor (open or closed) can tell you why their competitor costs more money, if you naïvely let them.

Again, it’s TCO that matters, not just certain cost categories. However, given these large differences in certain categories, in many situations FLOSS has a smaller TCO than proprietary systems. At one time it was claimed that FLOSS installation took more time, but nowadays FLOSS systems can be purchased pre-installed and automatic installers result in equivalent installation labor. Some claim that system administration costs are higher, but studies like Sun’s suggest than in many cases the system administration costs are lower, not higher, for Unix-like systems (at least Sun’s). For example, on Unix-like systems it tends to be easier to automate tasks (because you can, but do not need, to use a GUI) - thus over time many manual tasks can be automated (reducing TCO). Retraining costs can be significant - but now that GNU/Linux has modern GUI desktop environments, there’s anecdotal evidence that this cost is actually quite small. I’ve yet to see serious studies quantitatively evaluating this issue, but anecdotally, I’ve observed that people familiar with other systems are generally able to sit down and use modern GNU/Linux GUIs without any training at all. In short, it’s often hard to show that a proprietary solution’s purported advantages really help offset their demonstrably larger costs in other categories when there’s a competing mature FLOSS product for the given function.

One factor that needs to be included in a TCO analysis is switching costs, where that applies. Thankfully, most people remember to include the costs of switching to something. As noted in “IT analysts’ influence on open source adoption”, Gartner Vice President Mark Driver says that the best place for a company to first deploy Linux in a large way is in a new-from-scratch operation rather than as a replacement for Windows. That’s because, “Gartner’s (and other analysts’) figures show that migration from another operating system and porting software written for the old operating system are the two largest costs of a Linux migration, [so] it is obvious -- at least to Driver -- that Linux TCO drops radically when you avoid the migration step and install Linux in the first place.”

However, don’t forget to include the extremely important costs of switching away from a decision later. As noted in Linux Adoption in the Public Sector: An Economic Analysis by Hal R. Varian and Carl Shapiro (University of California, Berkeley; 1 December 2003), “a system that will be difficult to switch away from in the future, in part because the lock-in associated with using such a system[,] will reduce their future bargaining power with their vendor. Vendors always have some incentive to make it difficult for users to switch to alternatives, while the users will generally want to preserve their flexibility. From the user’s viewpoint, it is particularly important to make sure that file formats, data, system calls, APIs, interfaces, communication standards, and the like are well enough documented that it is easy to move data and programs from one vendor to another.” Obviously, someone who elects to use a proprietary program that locks them into that specific program will almost certainly pay much higher prices in future updates, because the vendor can exploit the user’s difficulty in changing.

Clearly, if one product is significantly more productive than another where it’s used, it’s worth paying more for it. However, it’s clear that at least for major office tasks, GNU/Linux systems are about as usable as Windows systems. For example, one usability study comparing GNU/Linux to Microsoft Windows XP found that it was almost as easy to perform most major office tasks using GNU/Linux as with Windows: “Linux users, for example, needed 44.5 minutes to perform a set of tasks, compared with 41.2 minutes required by the XP users. Furthermore, 80% of the Linux users believed that they needed only one week to become as competent with the new system as with their existing one, compared with 85% of the XP users.” The detailed report (in German) is also available.

Does this mean that FLOSS always have the lowest TCO? No! As I’ve repeatedly noted, it depends on its use. But the notion that FLOSS always has the larger TCO is simply wrong.

In fairness, I must note that not all issues can be quantitatively measured, and to many they are the most important issues. The issues important to many include freedom from control by another (especially a single source), protection from licensing litigation, flexibility, social / moral / ethical issues, and innovation.

While I cannot quantitatively measure these issues well, these issues are actually the most important issues to many.

FLOSS programs have been competing for many years in the server market, and are now well-established in that market. FLOSS programs have been competing for several years in the embedded markets, and have already begun to significantly penetrate those markets as well.

In contrast, FLOSS programs currently have only a small client (desktop and laptop) market share. This is unsurprising; FLOSS only began to become viable for client computing in 2002, and it takes time for any software to mature, be evaluated, and be deployed. Since FLOSS is a brand new contender in the client market, it has only begun penetrating into that market. However, FLOSS use on client systems has grown significantly, and there are reasons to think that will grow even more significantly in the future.

A few definitions are necessary first, before examining the issue in more depth. Many users’ only direct experience with computers is through their desktop or laptop computers running “basic client applications” such as a web browser, email reader, word processor, spreadsheet, and presentation software (the last three together are often called an “office suite”), possibly with additional client applications, and all of these must have a graphical user interface and be supported by an underlying graphical environment. Such computers are often called “client” computers (even if they are not using the technical approach called the “client-server model”). Another term also used is the “desktop”, even if the computer is not on a desk.

The small FLOSS desktop market share should not be surprising, because viable FLOSS client applications only became available in 2002. As a practical matter, client systems must be compatible with the market leader, for example, the office suite must be able to read and write documents in the Microsoft Office formats. Before 2002 the available FLOSS products could not do this well, and thus were unsuitable for most circumstances. Clearly, FLOSS client applications cannot be considered unless they are already available.

One point less understood is that FLOSS operating systems (like GNU/Linux) could not really compete with proprietary operating systems on the client until FLOSS (and not proprietary) basic client applications and environment were available. Clearly, few users can even consider buying a client system without basic client applications, since that system won’t meet their fundamental requirements. There have been proprietary basic client applications for GNU/Linux for several years, but they didn’t really make GNU/Linux viable for client applications. The reason is that a GNU/Linux system combined with proprietary basic client applications still lacks the freedoms and low cost of purely FLOSS systems, and the combination of GNU/Linux plus proprietary client applications has to compete with established proprietary systems which have many more applications available to them. This doesn’t mean that GNU/Linux can’t support proprietary programs; certainly some people will buy proprietary basic client applications, and many people have already decided to buy many other kinds of proprietary applications and run them on a GNU/Linux system. However, few will find that a GNU/Linux system with proprietary basic client applications has an advantage over its competition. After all, the result is still proprietary, and since there are fewer desktop applications of any kind on GNU/Linux, many capabilities have been lost, little has been gained, and the switching costs will dwarf those minute gains. There is also the problem of transition. Many organizations will find it too traumatic to immediately switch all client systems to an FLOSS operating system; it is often much easier to slowly switch to FLOSS basic client applications on the pre-existing proprietary operating system, and then switch operating systems once users are familiar with the basic client applications. Thus, the recent availability of FLOSS basic client applications has suddenly made FLOSS operating systems (like GNU/Linux) far more viable on the client.

First, let’s look at the available market share figures. According to the June 2000 IDC survey of 1999 licenses for client machines, GNU/Linux had 80% as many client shipments in 1999 as Apple’s MacOS (5.0% for Mac OS, 4.1% for GNU/Linux). More recent figures in 2002 suggest that GNU/Linux has 1.7% of the client OS market. Clearly, the market share is small at this early stage. Obviously, while this shows that there are many users (because there are so many client systems), this is still small compared to Microsoft’s effective monopoly on the client OS market. IDC reported that Windows systems (when they are all combined) accounted for 92% of the client operating systems sold.

However, there are many factors that suggest that the situation is changing: FLOSS basic client software is now available, there’s increasing evidence of their effectiveness, Microsoft is raising prices, and organizations (including governments) want open systems:

There are some interesting hints that GNU/Linux is already starting to gain on the client. Some organizations, such as TrustCommerce and the city of Largo, Florida, report that they’ve successfully transitioned to using Linux on the desktop.

Many organizations have found a number of useful processes for making this transition practical. Many start by replacing applications (and not the operating system underneath) with FLOSS replacements. For example, they might switch to Mozilla as a web browser and email reader, OpenOffice.org for an office suite. Organizations can also move their infrastructure to web-based solutions that don’t care about the client operating system. Eventually, they can start replacing operating systems (typically to a GNU/Linux distribution), but still using various mechanisms to run Microsoft Windows applications on them. Various products allow users to run Microsoft Windows applications on GNU/Linux, including Windows application servers, Wine, win4lin, VMWare, and so on.

There’s already some evidence that others anticipate this; Richard Thwaite, director of IT for Ford Europe, stated in 2001 that an open source desktop is their goal, and that they expect the industry to eventually go there (he controls 33,000 desktops, so this would not be a trivial move). It could be argued that this is just a ploy for negotiation with Microsoft - but such ploys only work if they’re credible.

There are other sources of information on FLOSS or GNU/Linux for clients. Desktoplinux.com is a web site devoted to the use of GNU/Linux on the desktop; they state that “We believe Linux is ready now for widespread use as a desktop OS, and we have created this website to help spread the word and accelerate the transition to a more open desktop, one that offers greater freedom and choice for both personal and business users.”

Bart Decrem’s Desktop Linux Technology & Market Overview, funded by Mitch Kapor, gives a detailed analysis and prognostication of GNU/Linux on the desktop. Paul Murphy discusses transitioning large companies to Linux and Intel (”Lintel”) on the desktop, and concludes that one of the biggest risks is trying to copy a Windows architecture instead of exploiting the different capabilities GNU/Linux offers.

Indeed, it appears that many users are considering such a transition. ZDNet published survey results on August 22, 2002, which asked “Would your company switch its desktop PCs from Windows to Linux if Windows apps could run on Linux?” Of the more than 15,000 respondents, 58% said they’d switch immediately; another 25% said they’d consider dumping Windows in favor of Linux within a year. While all such surveys must be taken with a grain of salt, still, these are not the kind of responses you would see from users happy with their current situation. They also noted that ZDNet Australia found that 55% of the surveyed IT managers were considering switching from Microsoft products. Most people do not expect that this transition, if it happens, will happen quickly: it is difficult to change that many systems. But the fact that it’s being considered at all is very intriguing. A number of opinion pieces, such as Charlie Demerjian’s “The IT industry is shifting away from Microsoft” argue that a major IT industry shift toward FLOSS is already occurring, across the board.

Many analysts believe Microsoft has extended Windows 98 support because it’s worried that Windows 98 users might switch to GNU/Linux.

There are certainly challenges for FLOSS desktops, even though they are successfully used and deployed right now. Software patents (an extremely controversial practice) makes it illegal in some countries to create or use FLOSS implementations of some functions, particularly audio or video display. Digital Rights Management, aka Digital Restrictions Management (DRM), also make it difficult to deploy FLOSS implementations. World Domination 201 discusses some of the challenges to FLOSS on the desktop. Nevertheless, many people are deploying and using FLOSS desktops.

As discussed earlier, the City of Largo, Florida supports 900 city employees using GNU/Linux, saving about $1 million a year. A BusinessWeek online article notes that Mindbridge shifted their 300-employee intranet software company from Microsoft server products and Sun Solaris to GNU/Linux; after experiencing a few minor glitches, their Chief Operating Officer and founder Scott Testa says they now couldn’t be happier, and summarizes that “...we’re saving hundreds of thousands of dollars between support contracts, upgrade contracts, and hardware.” Amazon.com saved millions of dollars by switching to GNU/Linux. Oracle’s Chairman and CEO, Larry Ellison, said that Oracle will switch to GNU/Linux to run the bulk of its business applications no later than summer 2002, replacing three Unix servers. A travel application service provider saved $170,000 in software costs during the first six months of using GNU/Linux (for both servers and the desktop); it also saved on hardware and reported that administration is cheaper too. CRN’s Test Center found that a GNU/Linux-based network (with a server and 5 workstations) cost 93% less in software than a Windows-based network, and found it to be quite capable. The article Linux as a Replacement for Windows 2000 determined that “Red Hat Linux 7.1 can be used as an alternative to Windows 2000... You will be stunned by the bang for the buck that Linux bundled free ‘open source’ software offers.”

Windows to Linux: a corporate success story describe the experience of Amauta, a small Ecuadorian start-up focused on Web applications and network service integration.

"Running only on Open Source Software" is a 2008 article on according to Smartleaf of Cambridge, Mass. They're a small company (around 25 people), but they manage more than $6 billion in others' assets (their product is a financial account management system). According to Ritter, Smartleaf uses open-source software rather than purchasing "closed" proprietary software wherever possible. They said, "Building a Microsoft-based infrastructure to replicate what we do with open source would double the cost of new hires' desktops, and spending a lot more each year in various licensing costs", and since Microsoft Windows' automation tools are poor, using Windows would cause their administration costs to deoubl. They believe "open-source software is more reliable and secure and maintained," though they have not collected the quantitative data to support that.

Educational organizations have found FLOSS software useful. The K12 Linux Terminal Server Project has set up many computer labs in the U.S. Northwest in elementary, middle, and high schools. For example, St. Mary’s School is a 450-student Pre-K through 8th grade school in Rockledge, Florida that applying GNU/Linux using their approach. Their examples show that kids don’t find GNU/Linux that hard to use and quite able to support educational goals. For example, third graders put together simple web pages about their favorite Saints using a variety of FLOSS programs: they logged into GNU/Linux systems, typed the initial content using Mozilla Composer (an FLOSS web page editor), drew pictures of the Saints using The Gimp (an FLOSS drawing program), and shared the results with Windows users using Samba. The page Why should open source software be used in schools? gives various examples of educational organizations who have used FLOSS programs, as well as linking to various general documents on why educational organizations should use FLOSS. The letter from the Kochi Free Software Users’ Group to the Government of Kerala and others also summarizes some of the issues, especially why governments should specify standards (and not products) for educational use. The Faculty Senate of the University at Buffalo, State University of New York, approved a resolution strongly supporting the use of FLOSS instead of proprietary software. The Northwest Educational Technology Consortium has an interest set of information on FLOSS on its website, in the section Making Decisions About Open Source Software (OSS) for K-12.

Many financial organizations use FLOSS. In 2005, Industrial and Commercial Bank of China (ICBC), China’s biggest bank, signed an agreement with Turbolinux to integrate Linux across its banking network; this follows a September 2004 announcement by the Agricultural Bank of China (ABC) that it would be moving to Linux thin-client terminals based on an optimized Red Hat Linux distribution. The Chicago Mercantile Exchange credits its migration to commodity Intel-based servers and Linux with cutting costs and reducing a critical 100 milliseconds off the time required to complete each trade. Online brokerage E*Trade is moving its computer systems to IBM servers running GNU/Linux, citing cost savings and performance as reasons for switching to GNU/Linux (the same article also notes that clothing retailer L.L. Bean and financial services giant Salomon Smith Barney are switching to GNU/Linux as well). Merrill Lynch is switching to GNU/Linux company-wide, and are hoping to save tens of millions of dollars annually within three to five years. Adam Wiggins reports on TrustCommerce’s successful transition to Linux on the desktop. An April 22, 2002 report on ZDNet, titled “More foreign banks switching to Linux”, stated that New Zealand’s TSB bank “has become the latest institution to adopt the open-source Linux OS. According to reports, the bank is to move all its branches to the Linux platform... in Europe, BP and Banca Commerciale Italiana feature among the big companies that have moved to Linux. According to IBM, as many as 15 banks in central London are running Linux clusters.” They also mentioned that “Korean Air, which now does all its ticketing on Linux, and [motor home] manufacturer Winnebago, are high-profile examples.” The Federal Aviation Air Traffic Control System Command Center in Herndon, Virginia is currently installing a system to support 2,000 concurrent users on Red Hat Linux. The system, known as the National Log, will act as a central clearinghouse database for users in air traffic centers across the country. ComputerWorld reported in October 2002 an increasing use of GNU/Linux on Wall Street - Merrill Lynch reports that a majority of new projects are interested in GNU/Linux, for example, and the article references a TowerGroup (of Needham, MA) estimate that GNU/Linux is currently deployed on 7% of all servers in North American brokerage firms. TowerGroup also forecasts that GNU/Linux use will grow at an annual rate of 22% in the securities server market between 2002 and 2005, outpacing growth in Windows 2000, NT and Unix deployments.

Some organizations are deploying GNU/Linux widely at the point of sale. Many retailer cash registers are switching to GNU/Linux, according to Information Week (”Cash Registers are Ringing up Sales with Linux” by Dan Orzech, December 4, 2000, Issue 815); on September 26, 2002, The Economist noted that “Linux is fast catching on among retailers.” According to Bob Young (founder of Red Hat), BP (the petroleum company) is putting 3,000 Linux servers at gas stations. Zumiez is installing open-source software on the PCs at all its retail locations, and expects that this will cut its technology budget between $250,000 and $500,000 a year; note that this includes using Evolution for email, Mozilla for web browsing (to eliminate the need for printed brochures and training manuals), and an open source spreadsheet program. Sherwin-Williams, the number one U.S. paint maker, plans to convert its computers and cash registers (not including back office support systems) in over 2,500 stores to GNU/Linux and has hired IBM to do the job; this effort involves 9,700 NetVista desktop personal computers,

FLOSS is also prominent in Hollywood. Back in 1996, when GNU/Linux was considered by some to be a risk, Digital Domain used GNU/Linux to generate many images in Titanic. After that, it burst into prominence as many others began using it, so much so that a February 2002 article in IEEE Computer stated that “it is making rapid progress toward becoming the dominant OS in ... motion pictures.” “Shrek” and “Lord of the Rings” used GNU/Linux to power their server farms, and now DreamWorks SKG has switched to using GNU/Linux exclusively on both the front and back ends for rendering its movies. Industrial Light & Magic converted its workstations and render farm to Linux in 2001 while it was working on Star Wars Episode II. They stated that “We thought converting to Linux would be a lot harder than it was” (from their SGI IRIX machines). They also found that the Linux systems are 5 times faster than their old machines, enabling them to produce much higher quality results. They also use Python extensively (an FLOSS language), as well as a number of in-house and proprietary tools. Disney is also shifting to GNU/Linux for film animation.

Many remote imaging systems use GNU/Linux. When a remote imaging system was placed at the North Pole, reporters noted that the Linux mascot was a penguin and announced that Penguins invade the North Pole.

There are many large-scale systems. In October 2002, Chrysler Group announced it’s using a Linux cluster computer for crash simulation testing and analysis in an effort to make safer cars and trucks. Their configuration uses 108 workstations, each with 2 processors, so the system uses 216 computers all running Red Hat Linux, and expect to improve simulation performance by 20% while saving about 40% in costs.

FLOSS is widely used by Internet-based companies. Google uses over 6,000 GNU/Linux servers. Yahoo! is increasing its already-massive use of FLOSS. Yahoo claims it is the “World’s most trafficked Internet destination,” justified based on Nielsen/NetRatings of August 2002. Yahoo had 201 million unique users, 93 million active registered users, over 4500 servers, and over 1.5 billion page views a day. Yahoo noted that FLOSS already runs their business (e.g., Perl, Apache, FreeBSD, and gcc), and they’ve recently decided to move from their proprietary in-house languages to PHP (an FLOSS language). Afilias has switched the registration database for the .org Internet domain from the proprietary Oracle to the FLOSS PostgreSQL database program; .org is the fifth largest top-level domain, with more than 2.4 million registered domain names.

Bloor Research announced in November 2002 that they believe GNU/Linux is ready to support large enterprise applications (i.e., it’s “enterprise ready”). They reached this conclusion after examining its scalability, availability, reliability, security, manageability, flexibility, and server consolidation characteristics, They concluded that “Linux now scales well on Intel hardware, and by taking advantage of [fail-over] extensions from Linux distributors and Grid suppliers, high availability can be achieved. Linux is proven to be reliable, especially for dedicated applications, and its open source nature ensures that it is at least as secure as its rivals.” Only 3 years earlier Bloor had said GNU/Linux wasn’t ready.

Librarians have also found many advantages to FLOSS.

One interesting usage story is the story of James Burgett’s Alameda County Computer Resource Center, one of the largest non-profit computer recycling centers in the United States. Its plant processes 200 tons of equipment a month in its 38,000-square-foot warehouse. It has given thousands of refurbished computers to disadvantaged people all over the world, including as human rights organizations in Guatemala, the hard-up Russian space program, schools, and orphanages. All of the machines have GNU/Linux installed on them.

Indeed, for well-established products like GNU/Linux, very strong cases can be made for considering them. On October 18, 2002, Forrester Research reported that “Linux is now ready for prime time.” They stated that “CIOs have many new reasons to be confident that they’ll get quality Linux support from their largest application vendors and systems integrators,” referencing Amazon, Oracle, Sun, and IBM, among others who have made commitments that increase confidence that GNU/Linux is ready for deployment.

Indeed, these uses are becoming so widespread that Microsoft admits that FLOSS competition may force Microsoft to lower its prices, at least in the server market. Microsoft noted this in its 10-Q quarterly filing, stating that “To the extent the open source model gains increasing market acceptance, sales of the company’s products may decline, the company may have to reduce the prices it charges for its products, and revenues and operating margins may consequently decline.”

Summaries of government use in various countries are available from Infoworld and IDG.

Several organizations collect reports of FLOSS use, and these might be useful sources for more information. Linux International has a set of Linux case studies/success stories. Mandriva maintains a site recording the experiences of business users of the Mandrake distribution. Red Hat provides some similar information. Opensource.org includes some case studies.

The Dravis Group LLC published in April 2003 Open Source Software: Case Studies Examining its Use, examining several specific use cases in depth. Their study of several different organizations deploying FLOSS concluded the following:

Practically all governments use FLOSS extensively, some develop FLOSS as well, and many have policies or are considering policies related to FLOSS. Motivations vary; for many governments, the overriding rationale for considering FLOSS is simply to reduce costs. Such governments will still take a variety of other factors into account such as reliability, performance, and so on, just like a commercial firm would do. Some governments may also consider the special privileges granted to them by FLOSS; e.g., there are direct advantages to users if they can examine the source code, modify the software to suit them, or redistribute the software at will.

In contrast, some governments also consider FLOSS as a way of supporting other national policies. Here is a list of some of the other considerations that have been reported by various governments:

For example, the United States federal government has a policy of neutrality; they choose proprietary or FLOSS programs simply considering costs and other traditional measures. In contrast, Dr. Edgar David Villanueva Nuñez (a Peruvian Congressman) has written a detailed letter explaining in detail he believes it is beneficial (and necessary) for the Peruvian government to prefer FLOSS; his list of rationale was “Free access to public information by the citizen, permanence of public data, and security of the state and citizens” (which are the rationales of transparency, record longevity, and security above).

The Center for Strategic and International Studies has developed detailed analysis of FLOSS policies worldwide, including their 2004 survey of the FLOSS positions of various governments worldwide. The Open Source and Industry Alliance (OSAIA)’s “Roundup of Selected OSS Legislative Activity WorldWide” (aka Policy Tracker) surveys government OSS policies in 2003 and 2004. The widely-cited Free/Libre and Open Source Software (FLOSS): Survey and Study includes a great deal of information about public sector use of FLOSS. An older but broad survey was published in 2001 by CNet. More information about governments and FLOSS can be found at the Center of Open Source and Government (eGovOS) web site. The The Norwegian Board of Technology (an independent public think tank) has a global country watch on Open Source policy. The 2002 Brookings Institute’s “Government Policy toward Open Source Software” has a collection of essays about government and FLOSS. Tom Adelstein’s July 2005 article argues that “Major governments outside the United States either have adopted Linux and open-source software or have begun the process that will lead to adoption”; it includes several statistics and examples.

Robin Bloor’s January 2005 article noted that many countries now have a stated policy of a preference for FLOSS; countries where this is the case, in some areas of government IT use, include Bahrain, Belgium, China and Hong Kong, Costa Rica, France, Germany, Iceland, Israel, Italy, Malaysia, Poland, Portugal, Philippines and South Africa. He also noted that nearly all “governments have R&D projects which are investigating the practicality of Open Source for government use which will, in all probability lead to local policy guidelines at some point which favour open source.” A 2002 New York Times article noted that “More than two dozen countries in Asia, Europe and Latin America, including China and Germany, are now encouraging their government agencies to use ‘open source’ software”. Robert Kramer of CompTIA (Computer Technology Industry Association) says that political leaders everywhere from California to Zambia are considering legislating a preference for Open Source software use; he counted at least 70 active proposals for software procurement policies that prefer FLOSS in 24 countries as of October 2002. There are certainly debates on the value of FLOSS preferences (even a few FLOSS advocates like Bruce Perens don’t support mandating a government preference for FLOSS), but clearly this demonstrates significant positive interest in FLOSS from various governments.

Tony Stanco’s presentation “On Open Source Procurement Policies” briefly describes why he believes governments should consider FLOSS. Ralph Nader’s Consumer Project on Technology gives reasons he believes the U.S. government should encourage FLOSS. The paper Linux Adoption in the Public Sector: An Economic Analysis by Hal R. Varian and Carl Shapiro (University of California, Berkeley; 1 December 2003) makes several interesting points about FLOSS. This paper uses some odd terminology, for example, it uses the term “commercial software” where it means “closed source software” (this poor terminology choice makes the paper’s discussion on commercial open source software unnecessarily difficult to understand). But once its terminology is understood, it makes some interesting points. It notes that:

Governments can also approach FLOSS differently for different circumstances. Governments need software to perform their own tasks, of course. Many governments are trying to increase the availability of computers (to reduce the “digital divide”), and many see FLOSS as a useful way to help do that (e.g., Walter Bender, director of MIT’s Media Lab, has recommended that Brazil install FLOSS on thousands of computers that will be sold to the poor, and not proprietary software; “Free software is far better on the dimensions of cost, power and quality.”). And governments sometimes wish to influence their internal commercial markets to improve their competitiveness. Many militaries are applying FLOSS, for a variety of reasons.

Governmental organizations that choose to switch to FLOSS products can find a variety of documents to aid them. Tom Adelstein has a short article on how to employ FLOSS inside governments (dated January 2005). The International Open Source Network (IOSN) has a great deal of information about FLOSS, and aids developing countries in the Asia-Pacific region in applying FLOSS; they’ve produced documents such as FOSS education primer. IOSN is an initiative of the United Nations (UN) Development Programme’s (UNDP) Asia Pacific Development Information Programme (APDIP), and is supported by the International Development Research Centre (IDRC) of Canada. The Interchange of Data between Administrations (IDA) Open Source Migration Guidelines (November 2003) and German KBSt’s Open Source Migration Guide (July 2003) have useful information about such migrations (though both are slightly dated, for example, some of the limitations they note have since been resolved).

It’s also worth noting that there’s a resurging interest by governments to require the use of standards for data storage and data protocols that can be implemented by anyone, without any discrimination against an implementor. This desire is often not connected to FLOSS, and predates the rise of FLOSS in the marketplace. After all, governments have had a strong interest in non-discriminatory standards for decades, simply to prudently conduct business. For example, on on June 27, 2005, Morten Andreas Meyer, the Norwegian Minister of Modernization, announced at a press conference in Oslo that “Proprietary formats will no longer be acceptable n communication between citizens and government.” Massachusetts’ Eric Kriss noted that what the state really wants is “open formats”, by which they mean “specifications for data file formats that are based on an underlying Open Standard developed by an open community and affirmed by a standards body or de facto format standards controlled by other entities that are fully documented and available for public use under perpetual, royalty free, and nondiscriminatory terms.” As they note, governments need to be able to access records 300 years later, and the risk of data loss if they use a proprietary format is very great. But such government goals do dovetail nicely with the use of FLOSS programs; FLOSS programs can implement open standards far more easily than they can implement any secret pre-existing formats, and FLOSS source code aids in documenting a format.

Many countries favor or are considering favoring FLOSS in some way, such as Peru, the UK, and Taiwan. In Venezuela, presidential decree 3,390 establishes that all systems of the public administration should preferentially use FLOSS (libre software); the Ministry of Science and Technology must give the Presidency plans and programs to support this. (see an English translation)

A key issue in most governments is localization (e.g., to a particular locale’s language and other conventions). In proprietary systems, the vendor must typically be convinced to support a given local, or the program will simply be unavailable. In FLOSS, anyone can perform the localization -- and typically such efforts are achieved by many working together. However, there must be an effort to do localization, and in some locales some basic steps must be taken first (e.g., there must be agreed-on words for computer terms). The United Nations Development Programme-Asia Pacific Development’s “Free/Open Source Software: Localization” gives a “broad perspective on the localization of Free/Open Source Software (FOSS) for the benefit of policy- and decision-makers in developing countries,” and includes several case studies.

The following sections describe some government actions in the United States, Europe, and elsewhere. There is also a section on some attempts or perceived attempts to prevent government consideration of FLOSS. However, this information is by no means complete; this is simply a sample of some of the ongoing activities.

There are many government users of FLOSS in the United States, and a variety of related policies, studies, and recommendations. This includes departments and agencies of the federal government, as well as state and local governments. Many have advocated additional use or changes in approach. A summary of some of this information is below.

First, let's discuss the general use and development of FLOSS in U.S. governments.

The U.S. federal government has a formal policy of neutrality, that is, FLOSS and proprietary software must be considered using the same criteria, as noted in Office of Management and Budget (OMB) memorandum M-04-16 “Software Acquisition” of July 1, 2004. This mirrors the earlier 2003 FLOSS policy of the U.S. Department of Defense, which clearly states that FLOSS and proprietary are both acceptable but must follow the same rules. Both also note that the license requirements for FLOSS are different than proprietary software, so acquirers should make sure they understand the license requirements since they may be different from what they’re used to. The United States’ Federal Enterprise Architecture includes the Technical Reference Model (TRM), and TRM version 1.1 (August 2003) includes both Linux and Apache.

The (U.S.) President’s Information Technology Advisory Committee (PITAC)’s report, the Recommendations of the Panel on Open Source Software For High End Computing, recommends that the U.S. “Federal government should encourage the development of open source software as an alternate path for software development for high end computing.” See the separate discussion on MITRE Corporation’s business case study of OSS (which emphasized use by the U.S. government, especially the U.S. military).

A NASA technical report describes in detail an approach for NASA to release some of its software as open source software.

The U.S. National Imagery and Mapping Agency (NIMA) National Technical Alliance, through the National Center for Applied Technology (NCAT) consortium, funded the Open Source Prototype Research (OSPR) project. Under the OSPR project ImageLinks Inc., Tybrin Inc., Kodak Inc., and Florida Institute of Technology (Florida Tech) performed evaluations of open source software development practices and demonstrated the technological advantages of Open Source Software. The OSPR final report includes those evaluations, a survey, and various related documents; these are actually rather extensive. The final report concludes:

Often, some government organization has to build some software to help implement a regulation, and it only makes sense to share that software (instead of every other organization paying to rebuild it). Making the software FLOSS simplifies this kind of sharing. The Government Open Code Collaborative (GOCC) is a “voluntary collaboration between public sector entities and non-profit academic institutions. The Collaborative was created for the purpose of encouraging the sharing, at no cost, of computer code, developed for and by government entities where the redistribution of this code is allowed. Government entities, defined as a federal, state or local government, an authority or other sub-national public sector entity of the United States, can join the GOCC as Members.” Another government project, the Component Organization and Registration Environment (CORE), is a “government source for business process and technical components. CORE.GOV is the place to search for and locate a specific component that meets your needs, or to find components you can customize to meet your unique requirements.” The EUROPA - IDABC project has a similar role in Europe.

A 2007 survey found that open source software was gaining traction in the U.S. government. "More than half of all U.S. government executives have rolled out open-source software at their agencies, and 71 percent believe their agency can benefit from open-source software... Fifty-five percent of respondents said their agencies have been involved or are currently involved in an open-source implementation." Other results were that "29 percent of respondents who haven't adopted open-source software plan to do so in the next six to 12 months", "88 percent of those in intelligence agencies said that their agencies can benefit from open source", and "Ninety percent of the respondents who have implemented open-source software said they believe their agency benefits." To be fair, this survey of 218 IT decision-makers in the U.S. government was commissioned by the Federal Open Source Alliance, a group "pushing the use of open-source software in government". The alliance is made up of Intel, Hewlett-Packard (HP) and Red Hat. It's worth noting that Intel and HP make money whether or not FLOSS is used.

It's worth noting that some U.S. government agencies have specific processes for FLOSS. For example, NASA has a program for releasing some programs as FLOSS.

Federal Computer Week’s Linux Use Drives Innovation notes that FBI officials started a project that became the Emergency Response Network (ERN), a Linux-based information-sharing system specifically to support emergency responses. Jo Balderas, YHD Software’s chief executive officer, said that by using widely-used FLOSS, “we can deliver fast, easy, cost-effective technology that has successfully addressed many of the information-sharing challenges that are obstacles to homeland security.”

Jim Stogdill is CTO at Gestalt, and his blog "limnthis" discusses FLOSS and government (primarily U.S. government).

The paper Open Source and These United States by C. Justin Seiferth summarizes that:

More recently, The U.S. Department of Defense Information Systems Agency (DISA) has certified Linux distributor Red Hat’s Advanced Server operating system as a “Common Operating Environment” (COE), meaning the server product meets the agency’s software security and interoperability specification.

The U.S. Congress' National Defense Authorization Act (2009) says: "The committee is concerned by the rising costs and decreasing security associated with software development for information technology systems. These rising costs are linked to the increasing complexity of software, which has also resulted in increasing numbers of system vulnerabilities that might be exploited by malicious hackers and potential adversaries. The committee encourages the department to rely more broadly on (open-source software) and establish it as a standard for intra-department software development.".

U.S. state governments have widely used FLOSS too. The Center for Digital Government’s 2003 “Best of the Web” awards named the top 5 state web sites as Utah, Maine, Indiana, Washington, and Arkansas. Four of the five winning state web sites use FLOSS programs to implement their site. The only state in the top five not using FLOSS was Washington - Microsoft’s home state.

Some states, such as Massachusetts, have a formal policy encouraging the use of open standards. It is often easier to deploy FLOSS, if you choose to do so, if you’re already using open standards; it’s much more difficult to change to either a proprietary or FLOSS product if you’re stuck using proprietary standards.

The 2004 report of the California Performance Review, a report from the state of California, urges that “the state should more extensively consider use of open source software#&8221;, stating that FLOSS “can in many cases provide the same functionality as closed source software at a much lower total cost of ownership”.

California’s Air Resources Board (ARB) has had a great deal of experience with FLOSS; their web page on ARB’s Open Source Initiatives provides much more information.

Stanislaus County has saved significant amounts of money through smart migration to FLOSS programs like Linux and JBoss. Richard Robinson, the director of strategic business technology (not the county’s CEO), once worked at Accenture (Anderson Consulting) and has been working hard to identify the county’s needs and meet them. In two years, he’s reduced costs in his department by 30-65% depending on how you measure it. In 2002, 2% of the county’s servers used Linux; by 2004, 25% use Linux, and next year that’s expected to increase to 33%.

Here are some specific examples of U.S. government-developed FLOSS:

Hamel's "Open-Source Collaboration in the Public Sector: The Need for Leadership and Value" examined some FLOSS existing efforts and found (unsurprisingly) that leadership matters. Highlights: "Collaborations with a strong leadership structure, and more importantly a single leader who is persistent, passionate and willing to spend a great deal of time maintaining and improving the organization are much more likely to succeed. Value is also a critical component, and requires that efforts meet the wants and needs of members and clients, whether they be in the form of software, documentation, research or even policy advocacy." Focusing on a few most useful projects is critical: "a conscious effort to focus energy on a small number of projects in early stages may be an important component in creating value for members of collaborative efforts." A FLOSS project requires collaboration to be successful, and collaboration requires that the project gain the trust of potential users/developers; "In this research I found that leadership, face-to-face contact, and the legal framework were the primary factors leading to trust. A willingness and ability to evolve, which may be tied to creating products of value to clients and members, might also be an important factor in developing a successful collaboration." Those statements, at least, seem very sound.

The "Open Technology Development" work produced a roadmap and has a Open Technology web site.

The massive Study on the: Economic impact of open source software on innovation and the competitiveness of the Information and Communication Technologies (ICT) sector in the EU (November 20, 2006) summarizes a vast number of economics-related FLOSS statistics. Here are a few of the many interesting conclusions it draws:

The Interchange of Data between Administrations (IDA) programme is managed by the European Commission, with a mission to “coordinate the establishment of Trans-European telematic networks between administrations.” IDA has developed a vast amount of FLOSS information, including an extraordinary amount of information specific to Europe. IDA’s Open Source Observatory provides a great deal of FLOSS background information, FLOSS news, European FLOSS case studies, FLOSS events (both European and abroad), and other material. IDA also provides The IDA Open Source Migration Guidelines to describe how to migrate from proprietary programs to FLOSS programs. The authors state that “There are many reasons for Administrations to migrate to OSS. These include: the need for open standards for e-Government; the level of security that OSS provides; the elimination of forced change; the cost of OSS. All these benefits result in far lower [Information Technology] costs.” Another paper of interest to governments considering FLOSS is Paul Dravis’ “Open Source Software: Perspectives for Development”, developed for the World Bank Group. The Consortium for Open Source in the Public Administration aims to analyze the effects of introducing open data standards and Open Source software for personal productivity and document management in European public administrations.

In 2002 an independent study was published by the European Commission. Titled ”Pooling Open Source Software”, and financed by the Commission’s Interchange of Data between Administrations (IDA) programme, it recommends creating a clearinghouse to which administrations could “donate” software for re-use. This facility would concentrate on applications specific to the needs of the public sector. More specifically, the study suggests that software developed for and owned by public administrations should be issued under an open source license, and states that sharing software developed for administrations could lead to across-the-board improvements in efficiency of the European public sector.

In October 2002, the European Commission awarded Netproject a pilot contract valued at EUR250,000 to examine deployment of FLOSS in government departments.

It's worth noting that many people believe that Europe and the U.S. tend to approach FLOSS differently. Larry Augustine went to a European conference and outlined what he considered to be major differences in the typical U.S. and European outlooks on FLOSS.

As reported in the Washington Post on November 3, 2002, Luis Millan Vazquez de Miguel, the minister of education, science and technology in a western region of Spain called Extremadura, is heading the launch of a government campaign to convert all the area’s computer systems (in government offices, businesses and homes) from the Windows operating system to GNU/Linux. Vazquez de Miguel said over 10,000 desktop machines have already been switched, with 100,000 more scheduled for conversion in the next year. The regional government paid a local company $180,000 to create a set of freely available software, and invested in a development center that is creating customized software. “So far, the government has produced 150,000 discs with the software, and it is distributing them in schools, electronics stores, community centers and as inserts in newspapers. It has even taken out TV commercials about the benefits of free software.” The Post also discussed some of the reasons some governments are turning to FLOSS. “Among the touchiest issues that Microsoft faces outside the United States is the uneasiness some countries have expressed about allowing an American company to dominate the software industry in their country. ‘Non-U.S. governments in particular view open source as a way to break the stranglehold against Microsoft. If Microsoft owns everything their countries, their own companies can’t get a foothold in the software industry,’ said Ted Schadler, an analyst for Forrester Research Inc.” Some Spanish government systems and those belonging to the telecommunications company Telefonica recently were shifted to Linux partly because of security concerns. In Florence, legislators talked of breaking the ‘the computer science subjection of the Italian state to Microsoft.’ “

Germany intends to increase its use of FLOSS. IBM signed a Linux deal with Germany; Germany’s Interior Minister, Otto Schilly, said the move would help cut costs, improve security in the nation’s computer networks, and lower dependence on any one supplier.

Munich, Germany (the third largest German city) has decided to migrate all of its 14,000 computers in public administration to GNU/Linux and other FLOSS office applications, dropping Microsoft’s Windows in the process. USA Today gives a detailed discussion of how this decision was made. Here’s more information about the Munich approach. The GNU/Linux system bid had a somewhat higher cost than the lowest cost Microsoft bid, but when looking at the details, the claim that Microsoft was lower cost appears misleading -- Microsoft’s bid was significantly different than the GNU/Linux bid. For example, in Microsoft’s bid, the Windows systems wouldn’t be upgraded for 6 years. Who doesn’t upgrade for 6 years? If Munich had agreed to that in 1998, in 2004 they’d still be running only Windows 98 and NT 4.0. Also, in Microsoft’s low bid, many systems would only get the word processor Word, not a full office suite (GNU/Linux systems typically come with complete office application suites at no additional cost, important for people who suddenly need to read presentations and spreadsheets). Also, some have noted that many of the costs for the GNU/Linux approach can be viewed as a “removing Microsoft” cost rather than the cost of using GNU/Linux per se; delaying the switch could have made the cost of switching later even larger due to increased lock-in. It’s likely, however, that this decision was made with a long-term view of many issues, not solely by cost.

In 2003, the “Open Source and Open Source Software for the Dutch government” (OSSOS) program started. By December 2006 the OSSOS program was reporting successes. Ten large municipalities representing 2.7 million individuals, including Amsterdam and The Hague, had signed a manifest. Instead of emphasizing open source software per se, they emphasized four goals: Supplier independence, interoperability, transparency and verifiability, and digital durability. While not flatly forbidding proprietary software, FLOSS meets these criteria better than proprietary software.

In France, the French police are switching from Microsoft Office to OpenOffice.org, according to the French industry news service Toolinux. More specifically, the group making this switch is the “Gendarmerie Nationale française”, who act as police in the French countryside but are technically part of the French Army. According to the report, by the end of January 2005 about 35,000 PCs and workstations will be to be equipped with the FLOSS office suite; by summer 2005 the number is to reach 80,000. The French police expect to save more than two million euros by switching.

Finnish MPs are encouraging the use of GNU/Linux in government systems.

Statskontoret, the Swedish Agency for Public Management, has performed a feasibility study on free and open source software and came to very positive conclusions (see the report in English or Swedish).

On October 10, 2002, the Danish Board of Technology released a report about the economic potential in using Open Source software in the public administration. The report showed a potential savings of 3.7 billion Danish Kroners (500 million Euros) over four years. A pilot project in the Hanstholm municipality determined that switching the office suite from Microsoft Office to OpenOffice.org and StarOffice did not increase their number of problems and that each user only needed 1 to 1.5 hours of training to learn the new office suite. The municipality will now use OpenOffice.org and StarOffice on all workplaces (200 in all) and will save 300,000 Danish Kroners (about 40,000 Euros) each year in license fees. They will still use Microsoft Windows as their OS. You may want to see the Danish government’s report on FLOSS.

In July 2002, UK Government published a policy on the use of Open Source Software. This policy had the following points:

As follow-on work, the United Kingdom’s Office of Government Commerce (OGC) performed “proof of concept” trials of Open Source Software (OSS) in a range of public bodies. In October 2004 summarized its key findings taking into account information from elsewhere. Their Government Open Source Software Trials Final Report is publicly available, and has some very interesting things to say. A brief news article describes the report. The report concludes that:

The UK report recommended that public sector bodies should:

In 2005 the U.K. government announced that it is backing a new initiative called the “Open Source Academy”, which is aimed at promoting the use of open-source software in the public sector (by local UK governments), and providing a forum for those working in the public sector to test and use such software. It is funded by the Office of the Deputy Prime Minister (ODPM) under its e-Innovations investment program. One justification cited for the Open Source Academy was a Dutch study published in January 2005 by the Maastricht Economic Research Institute on Innovation and Technology, which reported that 32% of local authorities in the U.K. use FLOSS, compared with 71% in France, 68% in Germany, and 55% in the Netherlands. Andy Hopkirk, head of research and development at the National Computing Centre (NCC), wasn’t sure that that the U.K. was “lagging so far behind on open source”, but did admit that “There is a cultural difference between the U.K. and rest of the world -- the U.K. is conservative in the uptake of new things and has a let’s-wait-and-see attitude. There is also the ‘not invented here’ syndrome.” There seems to be a widespread perception that U.K. use is lower not because the software is inappropriate, but because the U.K. local governments are so risk-averse that they cannot seize opportunities when they become available. Thus, the “Open Source Academy” has the goal of ensuring that local authorities know about their alternatives, and it also “provides an opportunity for local authorities to get the resources as well as the time and space to try things out without risking their own infrastructures... It’s a type of sand-pit area.” InfoWorld reported that “Participants in the Open Source Academy are hoping that the program will help the U.K. government catch up with the rest of Europe in implementing open-source software as part of government projects.” More information on the Open Source Academy is available in the eGov monitor and InfoWorld.

Brazil’s government is planning to switch 300,000 computers to Linux says a January 2005 story; various activists are encouraging such a switch. Indeed, as noted in my Travelogue on the the 6th International Free Software Conference (FISL 6.0) in Porto Alegre, Brazil, Brazil is hotbed of FLOSS activity. You can find more information in O Impacto do Software Livre e de Código Aberto na Indústria de Software do Brasil (loosely translated, “The Impact of Free Software and Open Source in the Brazilian Software Industry”)

Peru has contemplated passing a law requiring the use of FLOSS for public administration (government); rationale for doing so, besides saving money, include supporting “Free access to public information by the citizen, Permanence of public data, and the Security of the State and citizens.” Dr. Edgar David Villanueva Nuñez (a Peruvian Congressman) has written a detailed letter explaining in detail the rationale for the proposed law and why he believes it is beneficial (and necessary) for the government. In particular, he argues that this is necessary to provide basic guarantees by the government: Free access to public information by the citizen, permanence of public data, and security of the state and citizens. Marc Hedlund written has a brief description of the letter; an English translation is available (from Opensource.org, GNU in Peru, UK’s “The Register”, and Linux Today); there is a longer discussion of this available at Slashdot. Whether or not this law passes, it is an interesting development.

The Korean government announced that it plans to buy 120,000 copies of Hancom Linux Deluxe this year, enough to switch 23% of its installed base of Microsoft users to open source equivalents; by standardizing on GNU/Linux and HancomOffice, the Korean government expects savings of 80% compared with buying Microsoft products (HancomOffice isn’t FLOSS, but GNU/Linux is). Taiwan is starting a national plan to jump-start the development and use of FLOSS. The The Ministry of Defence in Singapore has installed OpenOffice.org on 5,000 PCs as of November 2004, and is planning to deploy it on a further 15,000 within the next 18 months after that.

Sun Microsystems has announced a deal with China to provide one million Linux desktops, and mentioned that China “has pledged to deploy 200 million copies of open standards-based desktop software”.

South Africa’s government departments are being officially encouraged to stop using (expensive) proprietary software, and to use FLOSS instead. This is according to a January 15, 2003 announcement by Mojalefa Moseki, chief information office with the State Information Technology Agency (Sita). South Africa plans to save 3 billion Rands a year (approximately $338 million USD), increase spending on software that stays in their country, and increase programming skill inside the country. South Africa reports that its small-scale introductions have already saved them 10 million Rands (approximately $1.1 million USD). More information is available at Tectonic (see also South African minister outlines OSS plans). The state of Oregon is considering an FLOSS bill as well. Japan has earmarked 1 billion yen for a project to boost operating systems other than Microsoft Windows - it is expected to be based on FLOSS, particularly Linux, and both South Korea and China are coordinating with Japan on it. In December 2003, Israel’s government suspended purchases of new versions of Microsoft office software and began actively encouraging the development of an open-source alternatives (especially OpenOffice.org). Indian President A.P.J. Abdul Kalam called for his country’s military to use FLOSS to ward off cybersecurity threats; as supreme commander of the Indian armed forces, this is a directive he can implement.

Sri Lanka declared the week beginning September 5, 2005, to be “Free and Open Source Software Week”.

Brendan Scott’s Research Report: Open Source and the IT Trade Deficit of July 2004 found that in just Australia, the costs of just the closed source operating system were causing an Australian trade deficit of $430 million per year.

The Australian Government Information Management Office released in 2005 “A Guide to Open Source Software for Australian Government Agencies”.

More recently, in 2008 the The Australian Open Source Industry & Community Report 2008 was published, which is an excellent summary (including many quantitative figures) of the state of FLOSS in Australia. In April 2008, Kate Lundy (Labor's ACT senator) publicly noted that Australian IT developers are being stifled by the dominance of US software companies that hold on to government business through vendor lock-in, claiming that it is "a market failure resulting in very little competitive tension, and very little innovation... the money spent on licence fees is effectively dead money because it's not going into innovation." Senator Lundy said departments should look at the annual cost of fees for the right to use software and consider whether the money might be better spent on developing products based on open standards; "then agencies can look at creating a more competitive environment that allows open-source software to compete, based on open standards."

The Canadian Association for Open Source is actively involved in Canadian policy issues, working “to protect the right of the owners of digital technology to make their own software choices, and further to seek to remove any legal or other barriers that would favour non-FLOSS software over FLOSS.”

There have been many discussions about the advantages of FLOSS in less developed countries. Heinz and Heinz argue in their paper Proprietary Software and Less-Developed Countries - The Argentine Case that the way proprietary software is brought to market has deep and perverse negative consequences regarding the chances of growth for less developed countries. Danny Yee’s Free Software as Appropriate Technology argues that Free Software is an appropriate technology for developing countries, using simple but clear analogies. Free as in Education: Significance of the Free/Libre and Open Source Software for Developing Countries, commissioned by the Finnish Ministry for Foreign Affairs, examines the significance of FLOSS and related concepts for developing countries. The non-governmental organizations OneWorld Finland and the Service Centre for Development Cooperation (KEPA) maintain the FLOSS for Development website, which identifies other analyses of FLOSS to support their goal, “To find out if and how Free/Libre and Open Source software is useful for developing countries in their efforts to achieve overall development, including bridging the digital divide.”

Many proprietary companies compete with FLOSS products. The rise of competition in IT markets, particularly in places where there hadn’t been competition before, has had the general beneficial effect of lowering the costs of software to governments. Even simply threatening to use a different supplier is often enough to gain concessions from all vendors, and since governments are large customers, they often gain large concessions. And of course all companies work to provide information on their products that puts them in the best possible light. Competing in terms of technical capabilities, cost, support, and so on is a normal part of government acquisition, and not further considered here.

However, there have been some efforts (or at least perceived efforts) to prevent government use of FLOSS, or forbid use of the most common FLOSS license (the GPL). Generally these efforts have not had much success.

As described in “Geek activism” forces Congress to reconsider Open Source, in 2002 a letter from the U.S. Congress unrelated to FLOSS was modified by Representative Adam Smith from Washington state. Smith’s largest campaign donation source is Microsoft Corporation. The modifications added statements strongly discouraging the use of the GPL. The letter was originally signed by 67 Congressmen, but as an Associated Press piece notes, “Smith’s attack on open-source drew an angry response from one of the original authors of the letter, Rep. Tom Davis, R-Va., chairman of the House Government Reform subcommittee on technology and procurement policy. “We had no knowledge about that letter that twisted this position into a debate over the open source GPL issues,” said Melissa Wojciak, staff director of the subcommittee. Wojciak added that Davis supports government funding of open-source projects.” At the end, “Many staffers of the 67 Congressman who signed are now claiming they didn’t know what they were signing and the letter has been withdrawn.” Information Week also picked up the story. Also in 2002, the Washington Post reported in 2002 that there had been an aggressive lobbying effort to squelch use of FLOSS in the the U.S. Department of Defense. The effort didn’t work; the DoD released an official policy of neutrality.

So many governments have begun officially requiring that FLOSS options be considered, or enacting preferences for FLOSS, that Microsoft has sponsored an organization called the Initiative for Software Choice. Many observers believe the real purpose of this organization is to prevent governments from considering the advantages or disadvantages of a software license when they procure software, to prevent governments from requiring consideration of FLOSS products, and to encourage the use of standards that inhibit the use of FLOSS. Indeed, Microsoft has invested large sums of money to lobby against FLOSS, according to CIO magazine.

An opposing group, founded by Bruce Perens, is SincereChoice.org, which advocates that there be a “fair, competitive market for computer software, both proprietary and Open Source.” Bruce Perens has published an article discussing why he believes “Software Choice” is not what it first appears to be.

This doesn’t mean that governments always choose FLOSS; quite the contrary. Indeed, most governments are quite conservative in their application of FLOSS implementations. Articles such as Linux in Government: In Spite of Endorsements, Government Linux Projects Still Treading Water and Not So Fast, Linux discuss some of the roadblocks and reasons governments don’t use FLOSS in various situations.

Interestingly, FLOSS has forced Microsoft to be more open with its code to various governments. Bloomberg’s January 14, 2003 article “Microsoft Has New Plan to Share Code With Government” announces that Microsoft Corporation “will expand sharing of the code underlying its Windows programs to help governments and agencies such as Russia and the North Atlantic Treaty Organization (NATO) improve computer security.” It notes that “Microsoft is facing competition from the Linux operating system, which lets customers view and modify its source code. In the government sector in particular, Microsoft has lost contracts to Linux, analysts said. More than 20 countries are looking at legislative proposals that mandate considering or using Linux in government computers... [and Microsoft has] begun to make the code available to governments, as well as key customers and partners, in an effort to compete with Linux.”

Here are some other related information sources:

For general information on FLOSS, see my list of Open Source Software / Free Software (FLOSS) references at http://www.dwheeler.com/oss_fs_refs.html

FLOSS has significant market share in many markets, is often the most reliable software, and in many cases has the best performance. FLOSS scales, both in problem size and project size. FLOSS software often has far better security, perhaps due to the possibility of worldwide review. Total cost of ownership for FLOSS is often far less than proprietary software, especially as the number of platforms increases. These statements are not merely opinions; these effects can be shown quantitatively, using a wide variety of measures. This doesn’t even consider other issues that are hard to measure, such as freedom from control by a single source, freedom from licensing management (with its accompanying risk of audit and litigation), Organizations can transition to FLOSS in part or in stages, which for many is a far more practical transition approach.

Realizing these potential FLOSS benefits may require approaching problems in a different way. This might include using thin clients, deploying a solution by adding a feature to an FLOSS product, and understanding the differences between the proprietary and FLOSS models. Acquisition processes may need to change to include specifically identifying FLOSS alternatives, since simply putting out a “request for proposal” may not yield all the viable candidates. FLOSS products are not the best technical choice in all cases, of course; even organizations which strongly prefer FLOSS generally have some sort of waiver process for proprietary programs. However, it’s clear that considering FLOSS alternatives can be beneficial.

Of course, before deploying any program you need to evaluate how well it meets your needs, and some organizations do not know how to evaluate FLOSS programs. If this describes your circumstance, you may wish to look at the companion articles How to Evaluate FLOSS Programs and the Generally Recognized as Mature (GRAM) list.

This paper cannot possibly list all the possible FLOSS programs that may be of interest to you. However, users of Windows who are looking for desktop software often try programs such as OpenOffice.org (FLOSS office suite), Firefox (FLOSS web browser), and Thunderbird (FLOSS mail browser). Projects like The OpenDisc project (formerly The OpenCD project) create CDs or DVDs that include those (and other) FLOSS programs for Windows with nice installers and so on. Many FLOSS programs aren’t available for Windows, though, or do not work as well on Windows. Those interested in trying out GNU/Linux operating system often start with a simple CD that doesn’t touch their hard drive, such as Gnoppix or Knoppix. They then move on to various Linux distributions such as Red Hat (inexpensive Fedora Core or professionally-supported Red Hat Enterprise Linux), Novell/SuSE, Mandriva (formerly MandrakeSoft), or Ubuntu (nontechnical users may also be interested in pay-per-month distributions like Linspire, while technically knowledgeable users may be interested in distributions like Debian).

FLOSS options should be carefully considered any time software or computer hardware is needed. Organizations should ensure that their policies encourage, and not discourage, examining FLOSS approaches when they need software.

This appendix gives more information about open source software / free software (FLOSS): definitions related to FLOSS, (of source code, free software, open source software, and various movements), motivations of developers and developing companies, history, license types, FLOSS project management approaches, and forking.

There are official definitions for the terms “Free Software” (as the term is used in this text) and “open source software”. However, understanding a few fundamentals about computer software is necessary before these definitions make sense. Software developers create computer programs by writing text, called “source code,” in a specialized language. This source code is often mechanically translated into a format that the computer can run. As long as the program doesn’t need to be changed (say, to support new requirements or be used on a newer computer), users don’t necessarily need the source code. However, changing what the program does usually requires possession and permission to change the source code. In other words, whoever legally controls the source code controls what the program can and cannot do. Users without source code often cannot have the program changed to do what they want or have it ported to a different kind of computer.

The next two sections give the official definitions of Free Software and Open Source Software (though in practice, the two definitions are essentially the same thing); I then discuss some related definitions, and contrast the terms “Free Software” and “Open Source Software”.

FLOSS programs have existed since digital computers were invented, but beginning in the 1980s, people began to try capture the concept in words. The two main definitions used are the “free software definition” (for free software) and the “open source definition” (for open source software). Software meeting one definition usually meets the other as well. Since the term “free software” came first, we’ll examine its definition first.

The Free Software Definition is published by Richard Stallman’s Free Software Foundation. Here is the key text of that definition:

The text defining “free software” is actually much longer, explaining further the approach. It notes that “Free software does not mean non-commercial. A free program must be available for commercial use, commercial development, and commercial distribution. Commercial development of free software is no longer unusual; such free commercial software is very important.”

Many people emphasize the freedom to choose between software applications, but there’s also been a lot of discussion noting that when one person makes a choice, it can often reduce the freedom of others to make choices. Editorial: The fifth freedom gives one perspective on this.

Open source software is officially defined by the open source definition:

The Open Source Definition was actually derived from the Debian Free Software Guidelines (DFSG); those original guidelines are still maintained and used by the widely-used and influential Debian project. Thus, the Debian guidelines are nearly identical to the Open Source Definition, yet Debian tends to use the term “Free Software” in its materials.

In addition, the debian-legal mailing list discusses licensing issues in great depth, in an effort to evaluate licenses based on the freedoms they grant or do not grant. The DFSG and Software License FAQ states that “The DFSG is not a contract. This means that if you think you’ve found a loophole in the DFSG then you don’t quite understand how this works. The DFSG is a potentially imperfect attempt to express what free software means to Debian.”

The DFSG and Software License FAQ also defines three additional “tests” used on the debian-legal mailing list to help them evaluate whether or not a license is “Free” (as in freedom). These tests aren’t the final word, but because they’re described as scenarios, they are sometimes easier for people to understand (and I quote the Debian FAQ here):

And there are practical issues that arise too:

A technical discussion examining the freedom of a license might compare the license against the Free Software Definition (all four freedoms), the Open Source Definition (every point) and/or the Debian Free Software Guidelines, and the tests (scenarios) above, as well as considering practical concerns like the ones above. An example of such analysis is Mark Shewmaker’s August 2004 examination of the Microsoft Royalty Free Sender ID Patent License.

As a practical matter, the definitions given above for free software and open source software are essentially the same. Software meeting the criteria for one generally end up meeting the other definition as well; indeed, those who established the term “open source” describe their approach as marketing approach to Free Software. However, to some people, the connotations and motives are different between the two terms.

Some people who prefer to use the term “free software” intend to emphasize that software should always meet such criteria for ethical, moral, or social reasons, emphasizing that these should be the rights of every software user. Such people may identify themselves as members of the “free software movement”. Richard Stallman is a leader of this group; his arguments are given in his article Why “Free Software” is better than “Open Source”

Some people are not persuaded by these arguments, or may believe the arguments but do not think that they are effective arguments for convincing others. Instead, they prefer to argue the value of FLOSS on other grounds, such as cost, security, or reliability. Many of these people will prefer to use the term “open source software”, and some may identify themselves as part of the “open source movement”. Eric Raymond was one of the original instigators of the name “open source” and is widely regarded as a leader of this group.

Is the “free software movement” a subset of the “open source movement”? That depends on how the “open source movement” is defined. If the “open source movement” is a general term describing anyone who supports OSS or FS for whatever reason, then the “free software movement” is indeed a subset of the “open source movement”. However, some leaders of the open source movement (such as Eric Raymond) specifically recommend not discussing user freedoms, and since this is the central principle of the free software movement, the two movements are considered separate groups by many.

The Free/Libre and Open Source Software Survey (FLOSS), part IV, summarizes a survey of FLOSS developers (primarily European developers), and specifically examined these terms. In this study, 48.0% identified themselves as part of the “Free Software”, community, 32.6% identified themselves as part of the “open source” community, and 13.4% stated that they did not care. A slight majority (52.9%) claimed that the movements different in principle, but the work is the same, while 29.7% argued that the movements were fundamentally different, and 17.3% do not care at all about the differences. After examining the data, the surveyors determined that FLOSS developers could be divided into six groups:

This difference in terminology and motivation can make it more difficult for authors of articles on FLOSS (like this one). The motivations of the different movements may be different, but since practice the developers usually work together, it’s very useful to have a common term that covers all groups. Some authors choose to use one of the terms (such as OSS). Other authors use some other term merging the two motivations, but as of this time there is no single merged term used by everyone. This article uses the merged term FLOSS.

This leads to a more general and oft-asked question: “Why do developers contribute to FLOSS projects?” The short answer is that there are many different motivations.

The Boston Consulting Group/OSDN Hacker Survey (release 0.73, July 21, 2002) made some interesting observations by sampling SourceForge users. The top motivations given for participating in FLOSS development were as follows:

Many businesses contribute to FLOSS development, and their motivations also vary. Many companies develop FLOSS to sell support - by giving away the product, they expect to get far more support contracts. Joel Spolsky’s “Strategy Letter V” notes that “most of the companies spending big money to develop open source software are doing it because it’s a good business strategy for them.” His argument is based on microeconomics, in particular, that every product in the marketplace has substitutes and complements. A substitute is another product you might buy if the first product is too costly, while a complement is a product that you usually buy together with another product. Since demand for a product increases when the prices of its complements decrease, smart companies try to commoditize their products’ complements. For many companies, supporting an FLOSS product turns a complementary product into a commodity, resulting in more sales (and money) for them.

One widely-read essay discussing commercial motivations is Eric Raymond’s The Magic Cauldron. The European Free/Libre and Open Source Software (FLOSS): Survey and Study has additional statistics on the motivations of individuals and corporations who develop FLOSS.

In the early days of computing (approximately 1945 to 1975), computer programs were often shared among developers, just as FLOSS practitioners do now.

Steven M. Bellovin reported (in 2006), “I do remember SHARE, early Usenix, DECUS, and more, where sharing software and system modifications was a way of life. Indeed, ‘bring a blank tape’ was the standard advice when attending early Usenix meetings... The notion of closed source software products didn’t really catch on until IBM unbundled its operating system from its hardware sales, in the early-to-mid 1970s. Before that, though systems weren’t what we know as open source, anyone who cared had the source tapes, and changes were freely distributed.”

At a 1965 Fall Joint Computer Conference, the paper Introduction and Overview of the Multics System by F. J. Corbato’ and V. A. Vyssotsky made this interesting statement about the Multics system, whose software cost an extraordinary amount of money to develop for the time:

While the Multics software wasn’t released at that time, their rationale for recommending it is intriguingly consonant with the reasons many FLOSS programs are released today.

An important development to FLOSS was the start of the ARPAnet, the early form of the Internet. Another critical development was the operating system Unix, developed by AT&T researchers, and distributed as source code (with modification rights) for a nominal fee. Indeed, the interfaces for Unix eventually became the basis of the POSIX suite of standards.

However, as years progressed, and especially in the 1970s and 1980s, software developers increasingly closed off their software source code from users. This included the Unix system itself; many had grown accustomed to the freedom of having the Unix source code, but AT&T suddenly increased fees and limited distribution, making it impossible for many users to change the software they used and share those modifications with others.

Richard Stallman, a researcher at the MIT Artificial Intelligence Lab, found this closing of software source code intolerable. In 1984 he started the GNU project to develop a complete Unix-like operating system which would be Free Software (free as in freedom, not as in price, as described above). In 1985, Stallman established the Free Software Foundation (FSF) to work to preserve, protect and promote Free Software; the FSF then became the primary organizational sponsor of the GNU Project. The GNU project developed many important software programs, including the GNU C compiler (gcc) and the text editor emacs. A major legal innovation by Stallman was the GNU General Public Licence (GPL), a widely popular FLOSS software license. However, the GNU project was stymied in its efforts to develop the “kernel” of the operating system. The GNU project was following the advice of academics to use a “microkernel architecture,” and was finding it difficult to develop a strong kernel using this architecture. Without a kernel, the GNU project could not fulfill their goal.

Meanwhile, the University of California at Berkeley had had a long relationship with AT&T’s Unix operating system, and Berkeley had ended up rewriting many Unix components. Keith Bostic solicited many people to rewrite the remaining key utilities from scratch, and eventually managed to create a nearly-complete system whose source code could be freely released to the public without restriction. The omissions were quickly filled, and soon a number of operating systems were developed based on this effort. Unfortunately, these operating systems were held under a cloud of concern from lawsuits and counter-lawsuits for a number of years. Another issue was that since the BSD licenses permitted companies to take the code and make it proprietary, companies such as Sun and BSDI did so - continuously siphoning developers from the openly sharable code, and often not contributing back to the publicly available code. Finally, the projects that developed these operating systems tended to be small groups of people who gained a reputation for rarely accepting the contributions by others (this reputation is unfair, but nevertheless the perception did become widespread). The descendants of this effort include the capable operating systems NetBSD, OpenBSD, and FreeBSD, as a group called the *BSDs. However, while they are both used and respected, and proprietary variants of these (such as Apple Mac OS X) are thriving, another FLOSS effort quickly gained the limelight and much more market share.

In 1991, Linus Torvalds began developing a small operating system kernel called “Linux”, at first primarily for learning about the Intel 80386 chip. Unlike the BSD efforts, Torvalds eventually settled on the GPL license, which forced competing companies working on the kernel code to work together. Advocates of the *BSDs dispute that this is an advantage, but even today, major Linux distributions hire key kernel developers to work together on common code, in contrast to the corresponding commercial companies to the *BSDs which often do not share their improvements to a common program. Torvalds made a number of design decisions that in retrospect were remarkably wise: using a traditional monolithic kernel design (instead of the “microkernel approach” that slowed the GNU project), using the the Intel 386 line as the primary focus, working to support user requests (such as “dual booting”), and supporting hardware that was technically poor but widely used. And finally, Torvalds stumbled into a development process rather different from traditional approaches by exploiting the Internet. Torvalds’ new process looked rather different than more traditional approaches. He publicly released new versions extremely often (sometimes more than once a day, allowing quick identification when regressions occurred), and he quickly delegated areas to a large group of developers (instead of sticking to a very small number of developers). Instead of depending on rigid standards, rapid feedback on small increments and Darwinian competition were used to increase quality.

When the Linux kernel was combined with the already-developed GNU operating system components and some components from other places (such as from the BSD systems), the resulting operating system was surprisingly stable and capable. Such systems were called GNU/Linux systems or simply Linux systems. Note that there is a common misconception in the media that needs to be countered here: Linus Torvalds never developed the so-called “Linux operating system”. Torvalds was the lead developer of the Linux kernel, but the kernel is only one of many pieces of an operating system; most of the GNU/Linux operating system was developed by the GNU project and by other related projects.

In 1996, Eric Raymond realized that Torvalds had stumbled upon a whole new style of development, combining the sharing possibilities of FLOSS with the speed of the Internet into a new development process. His essay The Cathedral and the Bazaar identifies that process, in a way that others could try to emulate the approach. The essay was highly influential, and in particular convinced Netscape to switch to an FLOSS approach for its next generation web browser (the road for Netscape was bumpy, but ultimately successful).

In spring of 1997, a group of leaders in the Free Software community gathered, including Eric Raymond, Tim O’Reilly, and Larry Wall. They were concerned that the term “Free Software” was too confusing and unhelpful (for example, many incorrectly thought that the issue was having no cost). The group coined the term “open source” as an alternative term, and Bruce Perens developed the initial version of the “open source definition” to define the term. The term “open source” is now very widely used, but not universally so; Richard Stallman (head of the FSF) never accepted it, and even Bruce Perens switched back to using the term “Free Software” because Perens felt that there needed to be more emphasis on user freedom.

Major Unix server applications (such as the FLOSS Apache web server) were easily moved to GNU/Linux or the *BSDs, since they all essentially implemented the POSIX standards. As a result, GNU/Linux and the *BSDs rapidly gained significant market share in the server market. A number of major initiatives began to fill in gaps to create completely FLOSS modern operating systems, including graphical toolkits, desktop environments, and major desktop applications. In 2002, the first user-ready versions of capable and critical desktop applications (Mozilla for web browsing and OpenOffice.org for an office suite) were announced.

You can learn more about the history of FLOSS from material such as Open Sources: Voices from the Open Source Revolution and Free for All: How Linux and the Free Software Movement Undercut the High-Tech Titans by Peter Wayner,

There are dozens of FLOSS licenses, but the vast majority of FLOSS software uses one of the four major licenses: the GNU General Public License (GPL), the GNU Lesser (or Library) General Public License (LGPL), the MIT (aka X11) license, and the BSD-new license. Indeed the Open Source Initiative refers to these four licenses as the classic open source licenses. The GPL and LGPL are termed “copylefting” licenses ( also called “protective” licenses), that is, these licenses are designed to prevent (protect) the code from becoming proprietary.

Here is a short description of these licenses:

Note that all of these licenses (the GPL, MIT, BSD-new, and LGPL) permit the commercial sale and the commercial use of the software, and many such programs as sold and used that way. See Perens’ paper for more information comparing these licenses.

The most popular FLOSS license by far is the GPL. For example, Freshmeat.net reported on April 4, 2002 that 71.85% of the 25,286 software branches (packages) it tracked are GPL-licensed (the next two most popular were LGPL, 4.47%, and the BSD licenses, 4.17%). Sourceforge.net reported on April 4, 2002 that the GPL accounted for 73% of the 23,651 “open source” projects it hosted (next most popular were the LGPL, 10%, and the BSD licenses, 7%). In my paper More than a Gigabuck: Estimating GNU/Linux’s Size, I found that Red Hat Linux, one of the most popular GNU/Linux distributions, had over 30 million physical source lines of code in version 7.1, and that 50.36% of the lines of code were licensed solely under the GPL (the next most common were the MIT license, 8.28%, and the LGPL, 7.64%). If you consider the lines that are dual licensed (licensed under both the GPL and another license, allowing users and developers to pick the license to use), the total lines of code under the GPL accounts for 55.3% of the total. My paper on GPL compatibility discusses these figures further, and discusses why, if you choose to develop FLOSS code, you should strongly consider using a licensing approach that is compatible with the GPL.

There are whole books about software licensing in general, or FLOSS licensing in particular, if you wish to delve into this topic in depth. One book about FLOSS licensing is Understanding Open Source and Free Software Licensing by Andrew M. St. Laurent.

There is no single approach to managing an FLOSS project, just as there is no single approach to managing proprietary projects. Management approaches are strongly influenced by the size and scope of the project, as well as the leadership styles of those managing the project.

The Cathedral and the Bazaar argues for a particular style of development, termed the “bazaar” style. In this approach, there are a large number of small, incremental releases, and a large number of developers can send in patches for proposed improvements. The releases need to compile and run (to some extent), so that developers can test and improve them. Not all FLOSS projects work this way, but many do.

It is useful to examine the management approaches of successful projects to identify approaches that may work elsewhere. Here are a few:

Successful FLOSS projects generally have a large number of contributors. A small proportion of the contributors write a majority of the code, but the value of the rest should not be underestimated; the fact that many others are reviewing the system, to identify or fix special bugs, enables the other developers to be more productive (because someone else, who looks at the project in a different way, can find or fix a bug faster, relieving the majority developers to do other things).

Large groups can be surprisingly effective at converging to good answers. An interesting analysis of this concept in general is given in “The Wisdom of Crowds: Why the Many Are Smarter Than the Few and How Collective Wisdom Shapes Business, Economies, Societies and Nations” by James Surowiecki. Groklaw reviewed this book.

A fork is a competing project based on a version of the pre-existing project’s source code. All FLOSS projects can be “forked”; the ability to create a fork is fundamental to the definition of FLOSS.

Simply creating or releasing a variant of a project’s code does not normally create a fork unless there’s an intent to create a competing project. Indeed, releasing variants for experimentation is considered normal in a typical FLOSS development process. Many FLOSS projects (such as the Linux kernel development project) intentionally have “fly-offs” (also called “bake-offs”) where different developers implement different competing approaches; the results are compared and the approach that produces the best results (the “winner”) is accepted by the project. These “fly-offs” are often discussed in evolutionary terms, e.g., the “winning mutation” is accepted into the project and the alternatives are abandoned as “evolutionary dead ends”. Since all parties intend for the “best” approach to accepted by the project, and for the other approaches to be abandoned, these are not forks.

What is different about a fork is intent. In a fork, the person(s) creating the fork intend for the fork to replace or compete with the original project they are forking.

Creating a fork is a major and emotional event in the FLOSS community. It similar to a call for a “vote of no confidence” in a parliament, or a call for a labor strike in a labor dispute. Those creating the fork are essentially stating that they believe the project’s current leadership is ineffective, and are asking developers to vote against the project leadership by abandoning the original project and switching to their fork. Those who are creating the fork must argue why other developers should support their fork; common reasons given include a belief that changes are not being accepted fast enough, that changes are happening too quickly for users to absorb them, that the project governance is too closed to outsiders, that the licensing approach is hampering development, or that the project’s technical direction is fundamentally incorrect.

Most attempts to create forks are ignored, for there must be a strong reason for developers to consider switching to a competing project. Developers usually resist supporting FLOSS forks: they divide effort that would be more effective when combined, they make support and further development more difficult, and they require developers to discuss project governance rather than improving the project’s products. Developers can attempt to support both projects, but this is usually impractical over time as the projects diverge. Eric Raymond, in Homesteading the Noosphere, argues that a prime motivation in FLOSS development is reputation gain through the use of a gift culture, and that forking significantly interferes with this motivation.

There are four different possible outcomes of a fork attempt (ignoring "both fail"), and all of them have occurred in the history of FLOSS. These outcomes, along with historical examples, are:

Too many forks can be a serious problem for all of the related projects. In fact, one of the main reasons that Unix systems lost significant market share compared to Windows was because of the excessive number of Unix forks. Bob Young states this quite clearly in this essay “Giving it Away”, and also suggests why this is unlikely to be a problem in copylefted FLOSS software:

Note that the copylefting licenses (such as the GPL and LGPL) permit forks, but greatly reduce any monetary incentive to create a fork. Thus, the project’s software licensing approach impacts the likelihood of its forking.

The ability to create a fork is important in FLOSS development, for the same reason that the ability to call for a vote of no confidence or a labor strike is important. Fundamentally, the ability to create a fork forces project leaders to pay attention to their constituencies. Even if an FLOSS project completely dominates its market niche, there is always a potential competitor to that project: a fork of the project. Often, the threat of a fork is enough to cause project leaders to pay attention to some issues they had ignored before, should those issues actually be important. In the end, forking is an escape valve that allows those who are dissatisfied with the project’s current leadership to show whether or not their alternative is better.|||

This paper provides quantitative data that, in many cases, open source software / free software is equal to or superior to their proprietary competition.  The paper examines market share, reliability, performance, scalability, scaleability, security, and total cost of ownership; it also comments on non-quantitative issues and unnecessary fears.