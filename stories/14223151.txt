If you’ve been looking to use C# to develop Single Page Applications which would otherwise require the use of JavaScript paired with a framework like Angular or React. Read on…

In this article we’ll be making use of Bridge.Net (a C# to JavaScript transpiler) and SharpBindings (a DSL for creating HTML elements via the DOM) to implement the well-known TodoMVC application in pure C# code.

In the process we will demonstrate how to leverage C# features that you know and love such as generics, LINQ, lambdas etc. to build out sophisticated SPA functionality.

We shall begin by translating the header section defined as follows in html,

into C# using SharpBindings as follows:

As you can see there is a one-to-one correspondence between the HTML tags and attributes, and the C# code with respect to static content. The dynamic behavior of the application however requires that:

To enable this we need support for functions, event handlers and data binding as per the full code listing below:

The Todo class referenced above is a standard C# class with two properties, a description of the todo and an “IsCompleted” flag indicating whether it is done or not. In addition it supports the standard INotifyPropertyChanged interface.

The ObservableCollection is a class that holds a list of elements and emits change notifications whenever an element:

The following non-obvious points should be noted:

The combination of the two above ensure that the input is cleared after this line of code runs

Next up is the footer section which is defined as follows in html,

the translation to C# using SharpBindings follows:

There is still a strong resemblance between the HTML tags and attributes, and the C# code but this time the dynamic behavior is much more extensive than in the header section. As per the spec:

These requirements are implemented as per the full code listing below:

The FooterSection function above takes four arguments:

The following non-obvious point should be noted:

1) Rather than writing out each filter URL as in the HTML template:

We specify the filters as a collection of items, each of which is to be rendered using the supplied template:

Finally we have the main section which is defined as follows in html:

The translation to C# using SharpBindings follows:

We then need to implement the following dynamic behavior as per the spec:

These requirements are implemented as per the full code listing below:

The MainSection function above takes three arguments:

The Todo item template is defined as follows in html:

The translation to C# using SharpBindings follows:

We then need to implement the following dynamic behavior as per the spec:

That’s quite a mouthful and requires a non-trivial amount of code to implement as below:

The TodoTemplate function above takes three arguments:

The following non-obvious point should be noted

To bring it all together we have a “Main” function (the entry point to the application) defined as below:

And there you have it, a reasonably concise, literal translation of the specs for TodoMVC to C# via Bridge.NET and SharpBindings.|||

If you’ve been looking to use C# to develop Single Page Applications which would otherwise require the use of JavaScript paired with a framework like Angular or React. Read on… In this article we’ll…