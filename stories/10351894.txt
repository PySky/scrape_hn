A project like any other - ordered as one among many similar projects. Until we refine its form and choose proper tools to implement it, it’s just a shapeless vision. Thanks to us - and our actions - the vision gets specific and becomes something unique.

In this project, our customer was a company from the medical sector, and the project was a mix of medical and HR fields. At the beginning we thought that this is not entirely our branch and our specialty, but this couldn’t stop us from creating something new and interesting. The main idea of the venture was to create a place for people connected with medical field, where they could check how their salaries (and other benefits) look like in comparison to others from different places in the world - either to satisfy their curiosity or to search for motivation.

Why did we decide to use AngularJS? To be perfectly honest - we can answer this question with a question - why not? In our previous projects we haven’t used that tool, so, to spice up our work a little bit, and to expand our horizons, we quickly decided and said - let’s do it!

After analysing the project, it became clear to us that the application will be divided into two main sections - the form, which will be used to collect the data about the respondents, and also, the report that should present the collected data accurately.

From the very beginning, we knew that the entire report page cannot be generated at once, just after the user visits it, even if that page is the most crucial part for him. Why? Firstly, it’s all about the performance - in that scenario, the server would have to prepare and send a lot of data about respondents at once, which could be a difficult task for the machine. Secondly, our client wanted the report page to be visually attractive, so he expected us to put in a lot of animations, which will attract the user’s attention, along with the numbers and presented statistics. AngularJS made it easy for us to meet those expectations.

AngularJS and the application which was created thanks to that framework, is unlike typical SPA applications which we can find all around the web. Initially, our application was a kind of a test to see if AngularJS can fit this project, if we set the bounds of the app inside one single page, but without the routing and views changing. Is it possible? We can now confidently confirm - for sure, yes.

The decision was made that the report page for the respondent will be divided into sections and each section will display different information - about the salary, working hours, emigration level etc. Additionally, the data will be presented in different forms - bar charts, donut charts, maps and others. Each section has its own endpoint, where it can load the data (by the way - the combination of AngularJS and Laravel works very smoothly). The data for the specific section loads not when the user enters the page, but only when the respondent really needs it, and that happens when the section appears on the screen. That’s why we created a directive which allowed us to add some lazy-loading to our report page:

Each of the sections can be found in one of the four states - the section is waiting for the visit, the section is loading data, the section has loaded data - and it shows it, and the section has loaded data - but there is no data to show. Thanks to this solution, we are able to detect the moment when we should start the animations for specific sections. When one of the sections appears in the user’s sight, the directive calls the function of a specific controller, that starts the process of collecting data and sets the state to “loading”. When the response comes back, the state is also changed (it depends on data availability). The change of the state causes change of the CSS class of the current container. We used our CSS code to start the animations. Also, we’ve set the “loading” and “no data” states to show the users the proper messages - “please wait while data is loading” or “sorry, but data is not available”.

The report page is not the only place where we used AngularJS framework. We’ve used it also on the admin dashboard page, where we have created a statistics module. Filtering by date, changing the limit of the data, or changing the way of presenting the information - all those functionalities were a piece of cake.

Like any tool, AngularJS has its positive and negative sides. I don’t want to focus on the solutions that we can find in the core, but on the problems that we found out during the development process.

One would think that AngularJS is very easy to start with, mainly because there are many tutorials to read on the web. However, the problems started when we had to decide which of the standards/methods of creating the applications are correct and generally used. We’ve also encountered another problem - examples presented on AngularJS’s official documentation are good and quite clear, but, those are only short examples - what should come next?

Another issue is that AngularJS has many built-in components that are really worth using, but at the beginning it might create some confusion. Sometimes we wondered if this solution is already implemented inside the framework or if we should write that on our own (the problem with reinventing the wheel).

There is also an entire dictionary that you need to learn, if you want to build an application quite fast using AngularJS. You have the $scope (which has a fairly long definition in itself), directives, services, providers, factories, data binding, filters, expressions and many, many more…

Nevertheless, working with AngularJS seems to be quite... natural. You become familiar with the concept quickly, and the use of the framework components makes you feel like you are building from the blocks. The framework elements fit each other, they communicate with each other and they interact to create a single unit.

In addition to creating your own modules, there are many more available to download, for example by using a bower repository. We’ve also taken advantage of this solution - we’ve used module for Google Charts library and successfully injected it into our app.

We will surely decide to use AngularJS in our next projects (we’ve already started another project like that!). One of the reasons why we will do this, are the powers of this framework, as we haven’t used them all. There are many, and because each project is quite different and requires a new approach and solutions, there will certainly be a chance for us to explore AngularJS functionalities and to develop them.|||

Short case study of the project in which we used AngularJS and how it may benefit the development.