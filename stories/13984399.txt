This post looks at two new PRs from the Docker project that vastly improve the developer experience for building small images efficiently.

A Docker PR has just been merged to enable multi-stage builds and a second PR opened just after that to improve the UX even further.

This is the first PR that adds multi-staged builds and has been merged.

This second PR improves the UX but was not yet merged at the time of writing.

With a statically compiled language like Golang people tended to derive their Dockerfiles from the Golang "SDK" image, add source, do a build then push it to the Docker Hub. Unfortunately the size of the resulting image was quite large - at least 670mb.

A workaround which is informally called the builder pattern involves using two Docker images - one to perform a build and another to ship the results of the first build without the penalty of the build-chain and tooling in the first image.

Golang isn't the only language that can benefit from using one base image to build assets and a second image to run them. My work with Windows Containers also used this pattern to produce smaller images.

An example of the builder pattern:

This normally meant having two separate Dockerfiles and a shell script to orchestrate all of the 7 steps above.

Here's an example from my href-counter repository which is a Golang application used to count the internal/external anchor tags on a web-page.

I'll provide all the files so you can see how much extra work was needed to get a small Docker image. Underneath I'll show the new format.

Multi-stage builds give the benefits of the builder pattern without the hassle of maintaining three separate files:

This is huge for developers and maintainers, especially when you support multiple Dockerfiles for different architectures such as the Raspberry Pi.

The general syntax involves adding additional times within your Dockerfile - whichever is the last statement is the final base image. To copy artifacts and outputs from intermediate images use

The second PR mentioned improves on this syntax and when merged would mean you can do something more like:

You can create a development build of Docker at any time by cloning the docker/docker repository and typing in . The resulting build will create binaries for you in the folder.

Let's try the example

Launch Docker within the container you built above:

The Docker development build creates an image called . You can actually run Docker inside this image, which is what we'll do below:

Compare the differences in size between the resulting image and what we would have had if we used :

The builder pattern was effective as a work-around and would have created a binary of a similar size, but it was hard to maintain and very hard to use with Docker's automated build system.

If you need a small image - you should follow the builder pattern for now using the example above. Once the feature is released through the stable channel and made available for auto-builds on the Hub/Cloud I would switch over.

Follow me on Twitter for more Docker news and tutorials.|||

The Docker builder pattern just got a lot easier. Let's checkout some bleeding-edge PRs from the Docker project that are causing a stir.