A headless browser SDK that uses the Chromium Embedded Framework (CEF). It is designed to make it easier to write applications that render modern web content directly to a memory buffer, inject synthesized mouse and keyboard events as well as interact with features like JavaScript or cookies.

This is a very early release - more than alpha quality but less than beta. I have high hopes this will develop into something useful but there is still a lot of work to do first.

It might be useful in a number of situations - for example:

There are some examples included in this repository and there is a description and a screen shot for each here.

From the CEF Wiki page: The Chromium Embedded Framework (CEF) is an open source framework for embedding a web browser engine based on the Chromium core.

An essential site to visit when developing a CEF based application is the CEF forum started and run by (I believe) the original CEF author Marshall Greenblatt who is very generous with his time and expertise.

Building CEF locally is quite a dauting task and needs a toolset I do not have on my computer (E.G. Visual Studio 2015) so I used the builds that Spotify kindly hosts here.

Dullahan currently builds against the CEF 3.3029.1611.g44e39a8 / Chromium 58.0.3029.81 build of CEF but with some small tweaks to take account of CEF interface changes etc. it should work with slightly older or more recent versions too.

Historically, the first incarnation was LLCEFLib - a Linden Lab internal library to render web content content inside Second Life. LLCEFLib had to support the outdated 32bit macOS version as well as many Second Life specific features so the code became very disjointed and messy. This effort is an attempt to unburden the API from those requirements and provide a more generic version which can be useful in other applications.

For historical reasons, both Dullahan and the version of CEF it consumes are built with the C++ runtime library set to / .

Not right now. I used to store a pre-built version on the Windows 64 bit version in my DropBox but that became untenable. Once I figure out a sensible place to store a large binary package, I'll bundle up the latest SDK and examples for all the platforms.

Before you can build Dullahan, you will need to build a version of CEF. There are some scripts to help - a batch file for Windows and a shell script for macOS. The macOS version is somewhat automated but the lack of built-in tools in Windows to download and uncompress files means it needs some manual steps up front.

The easy answer is no - CEF builds against Chromium but the Spotify builds already do that for you. However, you can build Chromium yourself and then build CEF against that in the same way as Spotify does - you might need to do this if you had to change the way part of Chromium works or more likely, you wanted a version of Chromium that has the proprietary media codec support turned on. The Dullahan project used to do this but the toolset required to build Chromium passed what I had available to me (Visual Studio 2015 is a dependency for recent builds) so we stopped doing it. The remnants of a batch file can be found in here - some pieces of that may still be useful. There is also a CEF wiki page that has lots of details too.

The reason to use Dullahan vs raw CEF in your application is that you merely include the header file in your application and link against the , and static libraries. Then, copy over the various CEF/Chromium runtime files alongside your application - see the post-build step for the examples in Visual Studio or the script for more details.

TODO: Create a batch file and shell script that generates a CMake file which creates an empty project with everything set up correctly.

The short answer is look at the code in the folder and . Generally speaking, you create an instance of the library, call and regularly call the function in your own message loop. You can hook up a callback to be notified when the contents of the page changes and get access to the raw pixels. You can synthesize mouse and keyboard events and send them into the page. Finally, when you want to exit, make sure the callback is hooked up and call the method. When the library and CEF have cleaned everything up, your callback will be triggered and you can call before exiting normally.

Why yes there is - take a look in the subdirectory of this repo. There are some screenshots and short descriptions in the README file too|||

