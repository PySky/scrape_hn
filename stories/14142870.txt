I believe that you need to always play with the latest technologies to be great in what you are doing. As I promised in my last article Enhanced Selenium WebDriver Tests with the New Improved C# 6.0, now I am going to share with you how you can utilize the power of the brand-new C# 7.0. I am not going to cover all of the features because I don't like some of them or I don't see how we can use them in the tests. You can find even more cool tips and tricks about automated testing in my WebDriver Series.

There are lots of times where we use number literals in our code. Because of the many zeroes for me, it is hard to distinguish what is the value of the timeout.

Another example when we use digits in our tests is when we pass expected values.

You can put digit separator _ wherever you want between digits, to improve readability. They have no effect on the value.

There are many times when we create private methods that are just called in a single method in our class so that we can improve the readability. However, when the class is too long, you need to jump back and forth between different methods to get the big picture. In the example, we pass the purchase order objects to the private method so that the expected values are formatted in the proper way.

Now we can declare methods that can be used only in the current block scope (e.g. current method). The previous private method now is part of the Assert. I think this improvement makes the Assert much more readable.

If the constructor of the page is so simple, we can convert it to just a single line instead of three!

Sometimes it can make sense not to return the whole element instead to make the element's property of type string. This way you can only assign and get values. This can improve the API usability (all other WebDriver's properties and methods are restricted). The drawback here is that you need eight lines of code for each getter and setter.

Now you can use extended bodied expressions for both the getters and the setters. We reduced the code from eight lines to just two.

We need to guard our code (methods/constructors). I believe that test code is a production code so it should be treated like such. Here if the driver is null, we throw an exception.

Now you can throw an exception inside the constructor's extended bodied expression. With the new syntax, we saved seven lines!

.NET Blog What’s New in C# 7.0​|||

Learn how to use the brand-new C# 7.0 to make your WebDriver tests even better. Utilise the power of local functions, digit separators and much more.