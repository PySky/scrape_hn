When exactly does legacy code become legacy? You know that feeling when you first start a project. It’s a breeze to create new routes and components. The quick progress feels amazing. But somewhere along the line making changes to your code becomes a chore.

In this post I’ll cover a set of anti-patterns that lead to nasty legacy code. I’ll cover some strategies that have helped me keep projects feeling fresher longer. I’ll focus on frontend development with Ember but the lessons are applicable beyond.

When I look back at my past projects I see the anti-patterns. In some projects I stuffed everything into global variables without a care in the world. In others I relied on manual DOM manipulations. Or worse, manual event subscriptions. I watched progress slow as I untangled complicated data mutations and memory leaks.

Now I primarily code Ember or React with Redux. Both of these frameworks avoid many of the pitfalls from before. We’re not using globals. We’re happily using ES6+ goodness. Our frameworks handle event subscriptions and the DOM with remarkable agility. Yet still, the ease of iterating on a project rarely matches the ease of creating it the first place. Why is that?

You may have felt this — there’s a sense that some changes are “in the grain” and rather easy to make. While some changes are much harder to make than they seem. They cut against grain somehow. The difference is often unintuitive. Ask any designer who’s requested several changes. Often the ones that sound tricky are the simplest. While the seemingly simple ones require moving mountains. Why is that?

To answer that, let’s take a look at what happens when you create a feature. I’m using Ember in this case (but applicable to other frameworks). Let’s pretend you’re asked to add a DonutCounter feature. You fire off a few commands and create a few files manually. Depending on how complete your feature is, you’ll get something like this:

We’ve created a lot of files for a simple feature. But what’s actually happening here is we’ve added nodes to several hierarchies. We’ve added to hierarchies of routes, components, models, styles, tests and data flows. All these files are sitting in directory structure, hierarchical, of course. Many of those files contain their own hierarchies. And it all serves a flow hierarchy we predict the user will take.

Are those hierarchies inherently wrong? Not at all. But it’s the relationships between them that we find ourselves managing late into the night. Those relationships make the difference between an easy change and a tedious change. It’s why moving a button 20 pixels at the behest of a designer can be an afterthought or an exercise in tedium. It all depends on how many hierarchies you have to change.

Maintainability depends on the degree to which hierarchies relate. Mirroring one hand-coded hierarchy with another is a recipe for frustration. While simply referencing one from another might not.

Take a simple change. Renaming DonutCounter to StrudelCounter. Pretty quick we learn how many files that single noun touches. Not a big deal, some grep and bash magic oughta be enough.

But in the real world it’s never that simple. We’re asked to combine or break apart features, refactor or generalize components. Sometimes we rework entire flows resulting in hundreds of changes across dozens of files. Each of those changes ripple out to every coupled hierarchy. No wonder we often opt to start over. DonutCounterV2 anyone?

Let’s look at an easy one first. When I first used a CSS processor that allowed nesting here was my favorite way to write code. Say I had some markup like this:

Then I would write some CSS like:

It felt right at first! But see the problem? I deeply coupled one hierarchy to another. I’d change one and it’d break the other. It got worse. If I moved the  class I would have to consider all the CSS from the levels above that affected it.

At AltSchool we’ve gone even further. Besides classes for common components, we define ones for margins, padding, colors and borders. Like state management, we’ve freed two hierarchies through a better abstraction.

Now let’s see how this same problem play out in a completely different domain. Once we see coupled hierarchies in one domain, it’s easier to spot them in others.

Say you have a feature with a happy path like:

Those functions feel like they’re saving you a bunch of setup and DRYing up your code. You only have to do that button clicking code once. But in reality, like the nested CSS example you’re coupling one hierarchy to another. The user flow hierarchy is bound to change in ways that don’t map to your test hierarchy. It’s best to find ways to decouple those. One way is to represent each scenario in a state object. That way you can create and compose those state scenarios as much as needed.

I mentioned in the last example that I still nest CSS when it doesn’t conflate hierarchies. Same thing applies here. Again, it’s not that hierarchies are bad. It’s when they are deeply coupled to another hierarchy that maintainability suffers.

One coupling in particular gets to the heart of the issue. By default modern frameworks conflate the component hierarchy with the data flow hierarchy. The component hierarchy describes which components contain which in the final HTML. The data flow hierarchy describes how the data flows from one to the next.

Here’s what I mean. Let’s say the component contains a which increments the donuts. Seems straightforward enough. Here’s the structure:

So far, our component hierarchy matches data flow hierarchy. Data flows from our down to . Cool. But then we’re asked to move the from to . Uh oh. We have a mismatch. We still want to display the count and whatever else it does. But now we have deal with these coupled hierarchies. To resolve this we have a few strategies:

This last one, The Service, is pretty interesting though. Especially if that service is a state management tool like Redux.

And there’s our first glimmer of light. We can decouple these two tightly coupled hierarchies using a layer of abstraction. State management libraries reduce complexity because they decouple hierarchies that were once conflated. In this case can update the app-wide DonutState regardless of where it sits in the component hierarchy. That’s a big, often unspoken advantage of state management tools.

But this post isn’t about state management. I’ll spare you the prose. The point is, those tools help solve one type of hierarchy coupling. But not all hierarchy busting looks the same. In fact you’ve probably been doing it already.

Inspired by Rails, Ember provides a lot of magic in it’s default directory structure:

So right out of the box, Ember couples several hierarchies. Often changes to your adapters, serializers or models requires a changes in others. Same with components, templates, and styles. This is one reason Ember’s Module Unification (formerly Pods) is compelling. It colocates your template, components and styles together, for example. React famously goes a step further. It prefers that you to keep templates components together in one file.

In the first Ember App I built, I started with what I knew best: the UI. I was building a wiki with a list of pages on the left and the selected page on the right. Pretty standard stuff. I created a template with a column on the left and a details on the right. It worked! Now I’ll just add the routes, I thought. Not so fast. I soon learned that routing is tightly coupled to UI. You need one route, controller, template and view to render the left hand, then another set for the right. I worked late that night shuffling code around.

I was learning the proverbial Ember Way. Which is much like the React Way and the Rails Way. Our frameworks too often force a tight coupling between the component hierarchy and the routing. Your entire UI, including the DOM hierarchy is tightly coupled to your routing. That’s great if you know exactly how your UI needs to work. But terrible if you have unproven assumptions. In other words, if your team is trying to be agile.

There isn’t too much we, as developers, can do until framework developers begin breaking down this coupling. A few approaches help:

Hasn’t this been the goal all along?

Say you had a bucket of Legos. If you assemble a sculpture out of Legos would you use a glue gun? Of course not. Legos have a natural standard interface that assembles into a stable graph. And if you disassemble them do you the destroy the lego pieces too? You might if you used a glue gun!

When we decouple hierarchies we make it easy to create new interfaces from existing building blocks. To pull it off we may need some creative solutions but it its well worth the effort.

It’s remarkable how much effort we put into decoupling code. We’ve come a long way from the days of global variable madness and jQuery soup. If we put a similar effort towards decoupling hand-coded hierarchies we’ll make our code even more maintainable.|||

When exactly does legacy code become legacy? You know that feeling when you first start a project. It’s a breeze to create new routes and components. The quick progress feels amazing. But somewhere…