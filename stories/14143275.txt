“The world’s first computer programmer”: the well-burnished epithet has in recent years become a staple of popular science writing, helping secure Ada Lovelace’s reputation in the annals of history. At the same time, it has often served to upstage and prevent more complete accounts of her contributions to science and technology. Since the celebration of the bicentennial year of her birth in 2015, however, a number of new publications have helped culturally re-center Lovelace, locating her legacy as much in her foreshadowing of general purpose computing as in her famous program to compute Bernoulli numbers. Two standouts in this regard are Sydney Padua’s The Thrilling Adventures of Lovelace and Babbage (2015) and Stephen Wolfram’s “Untangling the Tale of Ada Lovelace” (2015). Padua’s winsome graphical novel is buoyed by footnotes so copious and detailed they deserve recognition as an independent work of scholarship in their own right. In this they are reminiscent of—and pay homage to—Lovelace’s translator notes to Luigi Federico Menabrea’s “Sketch of the Analytical Engine Invented by Charles Babbage” (1843), which likewise constantly threaten to usurp their primary text. Wolfram’s groundbreaking work on cellular automata, meanwhile, serves as background and context for his reassessment of Lovelace, notably her understanding of Babbage’s Analytical Engine as what we would now call a Universal Turing Machine. Underpinning both works is the indispensable biography of Lovelace authored by Betty Toole.

Lovelace’s core insight, as articulated in her Translator Notes, was that the Analytical Engine was a meta-machine that could simulate other systems and machines. Just as a computer user today can virtually fly a plane with Microsoft Flight Simulator or paint an image using Adobe Photoshop’s brush tool or underline favorite passages in a book thanks to Kindle’s Popular Highlights feature, so too could the operator of the Analytical Engine program it to behave like any other conceivable system. Lovelace gives the example of a virtual musician: “supposing,” she writes, “that the fundamental relations of pitched sounds in the science of harmony and of musical composition were susceptible of such expression and adaptations, the engine might compose elaborate and scientific pieces of music of any degree of complexity or extent.” Expounding on this theme not long after the publication of the Notes, the British satirical magazine Punch envisioned a “Mechanical Novel Writer” and “Patent Poet” to accompany Lovelace’s steam-powered composer.

Key to unlocking the full potential of Babbage’s machine was a diversity of data types: Lovelace repeatedly emphasized that the Analytical Engine could “act upon other things besides number.” She labeled these non-numerical things “general symbols”—what in today’s computer parlance we might refer to as “strings.” In recognition that general symbols could be processed differently than numbers, she proposed a “Science of Operations,” of which mathematical operations--addition, subtraction, multiplication, and division--were only one subset among many. Letters and phonemes, for example, can be concatenated, transposed, substituted, and relocated within a larger sequence of characters. These primitive operations underlie many kinds of wordplay: anagrams, puns, palindromes, and doublets, for instance, are all rearrangements and permutations of an initial base word (indeed, one can easily derive “Barley Cabbage”--the nickname Babbage was taunted with as a child--via Lovelace’s Science of Operations).

Babbage himself seems to have grasped that any artifact, technology, or object capable of being decomposed into smaller units was ripe for computation: as reported by a contemporary, he claimed that the Engine would “analyze everything, and reduce everything to its first principles, and so include future inventions” (emphasis added). Invention, as Walter Isaacson reminds us in The Innovators: How a Group of Hackers, Geniuses, and Geeks Created the Digital Revolution, is a fundamentally combinatorial act, with new technologies imaginatively remixing elements from prior technologies. The Z1 computer, designed in the 1930s, used celluloid film to store program instructions, and the PDP1, developed in the 1950s, was outfitted with game controllers cobbled together from the parts of old model trains. These examples, culled from Isaacson, follow an age-old pattern, and it is this assemblage art paradigm that likewise underwrites Babbage’s Engine. A patchwork technology through and through, it borrowed punched cards from the Jacquard loom and stacks of cams from eighteenth-century automata.

The foundational concepts--including abstraction, decomposition, and combinatorial design--that allowed Lovelace and Babbage to formulate the idea of general-purpose computing are today collectively arrayed under the heading of computational thinking in the sciences and procedural literacy in the arts & humanities. Mediating between these poles, Lovelace herself called them poetical science. One byproduct of poetical science is an expanded space for computation. If, as Lovelace argued, numbers, letters, and other symbol systems are all machine-manipulable, then the province of computation is correspondingly vast, stretching across every discipline and field of human endeavor. Music, poetry, mathematics, art, engineering, and code-breaking are all admitted into its ecumenical ranks.

From an early age, Lovelace was captivated as much by what we today might call the form factor of technology as by its performance and functionality. As a child, for example, she proposed a whimsical steam-powered flying machine, conceptually modeled after Pegasus from classical mythology. In contrast to Babbage’s analytical engine, this chimerical machine was to be fabricated primarily from paper and oil-silk rather than brass and steel. Lovelace was determined that the design of the horse’s gossamer wings would be informed by careful research into avian physiology (although as her letters to her mother, Lady Byron, make vividly clear, she viewed bird dissection in the name of science as an investigative step too far).

Lovelace’s notional flying machine was poetical science incarnate; like her Translator Notes, it was also prologue to a number of twenty-first century computational thinking initiatives at the intersection of science and the arts. Leah Buechley, for example, has built her career on expanding what she calls “the material palette” of computing. Although much of her applied research falls squarely within the domain of computer science and engineering, her workspace more closely resembles an artist’s studio than a lab. Alligator clips, breadboards, and wires co-mingle with conductive thread, paints, and fabrics. Sewing as much as soldering is a part of her everyday practice. For Buechley, the primary site of computation is not a laptop or desktop machine, but a shirt, a book, a canvas, or a wall. In an effort to bring this craft sensibility to a larger DIY audience, including youth, she has developed the Lilypad Arduino, a microcontroller that can be easily incorporated into electronic textiles and wearable projects, supplemented by a wealth of educational resources.

Following in her advisor’s footsteps, Jie Qi, a former PhD student of Buechley’s, launched Chibitronics in c. 2014, a paper electronics system that allows users to design circuits using stickers. Similarly, Jentery Sayers and collaborators have created a series of “kits for cultural history” that make it possible for users to reconstruct early electronic wearables. One kit, for example, is devoted to the “luminous electric jewels” originally fabricated by the nineteenth-century French inventor Gustave Trouvé. Inspired by the clockwork automata that preceded them, Trouve’s gold stick pins were miniature machines, each incorporating a decorative skull head with animate eyes and jaw. Danielle Morgan, one of Sayers’ collaborators, explains that the first kit release allows users to “handle, build, and disassemble a remade version of Trouvé’s original pin.” All files for creating your own kit are available on Github, including 3-D models, historical illustrations, and instructions.

In January of this year, my collaborators and I launched The Tessera, a free computational thinking game developed under the direction of Derek Hansen that is likewise predicated on the deep congruities between art and science. A joint production between Brigham Young University, the University of Maryland, Tinder Transmedia, and the Computer History Museum in Mountain View California, The Tessera is a gothic ghost story in which players engage with the history of computing by interacting with famous persona--including Ada Lovelace and Charles Babbage--who influenced the development of information technologies. Through gameplay, players acquire and practice computational thinking concepts such as decomposition, abstraction, and debugging. Funded by the National Science Foundation, The Tessera takes place across two primary locations, one virtual, the other physical:

The Tessera also includes Sketchventor, an original card game designed to help players hone their ideation and innovation skills. Players develop, sketch, and pitch a technological invention inspired by the combination of an “Invention card” and a “Verb card.” Invention cards include past and present technologies such as a telegraph or a drone. Verb cards include words such as “exaggerate,” “eliminate,” “combine” and “reverse,” one of which is chosen each round and applied to an invention card to inspire a novel creation. You might say that Sketchventor models Babbage’s method of sourcing the component parts of new inventions from multiple, seemingly incongruous prior technologies, while at the same time guiding and refining that process by incorporating Lovelace’s Science of Operations.

Because the Analytical Engine was never completed, many of Lovelace and Babbage’s key insights lay fallow for a generation or more, consigned to the realm of minor Victoriana. But the lively, intelligent correspondence and trove of documents they left behind have allowed those ideas to take root in our own day. There is every reason to expect that a new generation of aspiring poetical scientists will create the twenty-first century successors to Babbage’s Engine and Lovelace’s algorithm—and perhaps even young Ada’s wondrous flying Pegasus.|||

Author’s note: this is the first in a three-part series on Ada Lovelace and Charles Babbage. The second and third installments will come later this year....