In the Design & Architecture Series, we talk about ways of creating maintainable test framework. In this article, I am going to elaborate on a topic that most people don't understand how important it is- configurations. Most engineers use hard-coded values directly in their code and experience later lots of problems when they try to execute their tests in different environments. I am going to show you how to get your configurations from app.config and change them without recompilation. In the next article from the series, I will show you how to change these settings based on the environment where the tests will be executed.

Below you can find a code that most people usually write. Hard-coding the numbers directly in their code so that they cannot change it easily per environment or build configuration. The best way of using such settings is reading them from the app.config file. Later you can transform these values based on the build configuration. I will show you how to do that in the next article from the series.

There are a couple of ways of reading these settings from the app.config file. I am going to show you two of them. The first uses a section that defines the different timeouts using XML attributes. The second uses different XML nodes.

First, we will go through the first variation that utilises XML attributes.

Under the configSections node, you need to register your new section. It should contain the name of the section (name attribute). Then you need to specify the full name of the C# class where the section is defined and its assembly name. Use the following format- FullNameSpace.NameOfTheClass,AssemblyName

As you can see under the configSections node you can find the new section- TimeoutSettingsAsAttributes. The different attributes represent our numbers that we will later use in the tests. Of course, you can use any C# type not only int- string, bool, etc.

To be able to read the numbers from the app.config file, you need to define a mapping C# class- TimeoutSettingsAsAttributes (the one that we specified under the configSection node). You need to add a reference and a using statement to System.Configuration. This is an assembly that comes from .NET framework. It contains the ConfigurationProperty attribute that we use here to map the XML attributes to C# properties. Also, your class need to derive from ConfigurationSection. The first parameter of the ConfigurationProperty will direct the engine which XML attribute to read. You can also specify a default value and whether the property is required. Through this["nameOfTheAttribute"], the actual reading is happening.

The provider class is the one that we use in the tests to get the numbers from the app.config file. It contains static properties. In its static constructor we read the XML section and deserialize it to our TimeoutSettingsAsAttributes C# class.

The first approach using attributes is a little bit unreadable in my opinion because of that I am going to show you the second one where we are going to use dedicated XML nodes.

First, we register the new section using the same approach. Then we create the TimeoutSettings but instead specifying the numbers using attributes. We use dedicated XML nodes that have the value attribute where the actual number is.

Again, we need to create the class that maps the section to C#. Again we need a reference and a using statement to System.Configuration. The only difference compared to the TimeoutSettingsAsAttributes class is that the properties here are of type ValueConfigElement<int>. In short, this type describes our XML nodes and tells the engine that there is a value attribute where the number is.

You can use the ValueConfigElement with any C# type. Here we derive from the ConfigurationElement class.

To use the settings in tests, we need again a provider class. It is almost identical to TimeoutSettingsAsAttributesProvider with the only difference that in order to get the number, we call the Value property of the elements.

To use the settings in tests you need to call the static provider class- TimeoutSettingsAsAttributesProvider and call one of its properties. Of course, the project should contain the mentioned app.config file with the correct configurations.

To use the settings in tests you need to call the static provider class- TimeoutSettingsProvider and call one of its properties. Of course, the project should contain the mentioned app.config file with the correct configurations.

How to: Create Custom Configuration Sections Using ConfigurationSection|||

Improve your test framework so that your tests don't depend on hard-coded numbers. Use configuration files and change the values without compilation.