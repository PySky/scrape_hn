When working with REST APIs you’ll frequently end up in a situation where you want to return an object with bits of data from a couple different endpoints. This can end up leaving you with pretty messy code, especially if the shape of the object you’re returning is different than that of the API responses.

We ran into this multiple times while building NetlifyCMS - we’d be using data from different parts of the Github API, some of which depend on each other, and we’d end up with very hairy code, having to split business logic across different s in order to get the desired set of data.

For instance, imagine you have three functions that return promises: , , and , and you want to return an object that has both. A naive implementation might look like the following:

This works, but there are a couple problems with this implementation:

Fortunately, this is solvable using , like so:

This works well and is much more simple. However, the last part is a little superfluous and makes it a bit annoying to add new pieces of data, as you have to add them to both the argument array and the object construction in the . Wouldn’t it be nicer to have our code look more like the data it’s returning?

That usecase is exactly what is designed for. It takes an object that looks like this…

…and returns a promise that resolves to an object like this:

It finds any properties (one level deep) that have promise values, creates a promise that waits for all of them using , and returns that promise with a that zips the object back together.

If you want to resolve deeper than one level, you can simply nest calls to indefinitely, like so:

This will return a promise that resolves to the following object:

The implementation is pretty straightforward. We’ll need from to zip the object back together at the end:

Next, we need to find the keys of the which represent promises, and collect them into an array which we’ll pass to :

We call to wait on all the promise properties:

And return a copy of the object with the promise properties overwritten with the resolved values of their promises:

Our above function can now look like this:

So let’s see how we can use this to clean up a messy function. When working on NetlifyCMS, I ended up working on this function, readUnpublishedBranchFile:

It has all the problems that our first imaginary function did above: promises are not being run in parallel when they should be, there’s unnecessary mutation, and the function is difficult to read. Using , I rewrote this to the following version:

It’s much cleaner and easier to read, and even runs better to boot, since the promises are running in parallel where possible.

has been very useful for handling groups of related promises in NetlifyCMS. I hope it can be useful in your JS projects! If you’d like to learn more about Netlify CMS and how it can help you build fast static sites with rich content, visit netlifycms.org.

Netlify is an all-in-one platform for deploying and automating modern web projects.

Simply push and Netlify provides everything—servers, CDN, continuous delivery, HTTPS, staging environments, prerendering, asset post processing, DNS, and more.

Any project, big or small, can perform instantly on a global scale.|||

resolvePromiseProperties allows you to take an object which has promises as some of its properties and get a promise that resolves to an object where all the promises are replaced with their resolved value.