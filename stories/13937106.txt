Python 3.4 introduced enums to the language. Enums are an useful data structure for defining related constants. Enums are Python classes, and can have methods and special methods as usual.

 Let’s dive into some code to see how a Python Enum looks in real life.

I’ve defined a simple Enum that stores the settings for a ficticious development environment. The first thing that stands out is the use of the keyword class to define it. Enums are an object themselves and do not inherit from object type. They have their own base class.

You don’t need to instantiate an enum because they are singletons. You just call it like so:

Python takes care of creating the enum instance for you.

Showing the value of an enum is simple. You simple use :

The type is a bit tricky and might confuse beginners. The enum type is the enum it belongs to. In the case of the enum defined above, we can see that the type is a and not an enum.

You can iterate over enums, too.

Remember to use to see the values themselves.

Enums allow multiple names for the same value. Use the decorator to enforce uniqueness.

Having two identical values when using the unique decorator throws an error.

Since enums are classes we can add methods. Let’s do that right now!

Sub-classing enums will only work if no members are defined. It can define methods but no members. Like so:

There you have it. Enums in Python are not currently in wide use (given how relatively new they are), but I see people leveraging their advantages. I did not cover everything related to enums. For those curious, go to the official documentation here.|||

Software, code, computers, and other stuff.