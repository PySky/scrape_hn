[[This is Chapter 21(b) from “beta” Volume VII of the upcoming book “Development&Deployment of Multiplayer Online Games”, which is currently being beta-tested. Beta-testing is intended to improve the quality of the book, and provides free e-copy of the “release” book to those who help with improving; for further details see “ Book Beta Testing “. All the content published during Beta Testing, is subject to change before the book is published.

To navigate through the book, you may want to use Development&Deployment of MOG: Table of Contents.]]

After all the (admittedly boring) discussions of services provided by different types of ISPs – we can get to something which makes quite a few developers’ hearts race <wink />. I’m speaking about Server-Side hardware.

Side note: maybe it is just me – but I am indeed very fond of choosing my hardware, especially at home or for Server-Side production. And in practice – BOTH for home devices, AND for servers, it DOES pay to know what exactly you’re shopping for.

First of all, let’s re-iterate that most of the time we won’t be speaking about co-location (as discussed above – it is better to avoid colo except for some rather special cases). As a result –

This, in turn, restricts our choices of the available server hardware. We cannot say “hey, I built this nice tower with four GTX 1080 Tis, please put it to the datacenter”; neither we can often go for very-nice-but-scarcely-available-for-rent server boxes such as HP DL580 (however, a similar Dell R930 can be found much more easily).

Also, let’s note that most of the time, we won’t need just servers – but that rather, for any serious MOG, we’ll be looking for the following hardware:

Here is a typical network diagram for a very very basic MOG deployment (it is more typical for slower MOGs):

With such slower-but-more-secure deployments, our uplink Internet port goes to our firewall; nothing else is connected directly to the Internet – so the firewall can control all the traffic.

Several important points about the diagram on Fig 21.1:

Now about those VLANs. On the diagram on Fig 21.1, we have three of them: DMZ VLAN, “Trusted” VLAN, and “MGMT” VLAN. Let’s consider them one by one:

As it was noted above – the diagram on Fig 21.1 is more typical for slower-paced games; for fast-paced games – it is often modified to something along the lines of the Fig 21.2:

Here, we have another VLAN – “Game” VLAN, which handles latency-critical game traffic. This traffic comes directly from the Internet – but goes only to Game Servers. And to allow Game Servers to reach DB Server – we’re still using “Trusted” VLAN (in this way, we’re ensuring that at least our DB Server cannot be attacked directly from the Internet). NB: at least if your Game Server is Linux one, it is possible to use the same physical NIC to participate in both “Game” VLAN and “Trusted” VLAN without losing much security; this is achieved via using IEEE802.1q “tagging” (you need a switch supporting 802.1q too, but this is rarely a problem for anywhere-serious managed switches).

About two uplink ports on the Fig 21.2: nothing really prevents us from using just one uplink port to connect both firewall and “Game” VLAN (to do it, we just need to connect the left side of the firewall, as well as Uplink port, back to switch; both should be connected to ports configured as a part of our “Game VLAN”).

“both diagrams on Fig 21.1 and on Fig 21.2 are extremely basic – and that for anywhere serious deployment, you’ll need significantly more than thisFor our current purposes, these diagrams are especially interesting, because they show us pretty much all the types of boxes we need to have. On the other hand, we should point out that both diagrams on Fig 21.1 and on Fig 21.2 are extremely basic – and that for anywhere serious deployment, you’ll need significantly more than this (in particular, for the time being we’re ignoring redundancy entirely). However – they should be enough to give an idea of what we should expect on our Server-Side network-wise. Also, if you need more than this (for example, you need a Load Balancer3) – you should be able to find a place for it on the diagram yourself.

Now, let’s consider all the boxes on these diagrams one by one, and let’s start with non-Server boxes first.

When speaking about switch – it will be almost-universally present, though sometimes it will be a part of ISP-provided “private network” connectivity. If it is the case – you are in luck (just make sure that you’ll be able to specify several VLANs where your servers should be connected).

If VLANs is not a part of the service provided by ISP – you should be able to rent switch from them; just as a ballpark number – as of 2017, it was possible to rent a 24-port 1Gbit/s managed switch for about EUR 50/month (and as you can see from the diagrams above – 24 ports is not really much when it comes to switches).

BTW, if you ever need more than 24 ports – keep in mind that you can cascade switches (though inter-switch connection is rather tricky – so make sure to read about “trunking” and think about separating different VLANs to different physical switches to reduce risk of inter-switch connection being overloaded).

As for the firewall – the choice of it depends greatly on a question “do we want to firewall our gaming traffic?” (on Fig 21.1 we do firewall it, and on Fig 21.2 we don’t).

“beware: “being able to handle 1Gbit/s in general”, and “being able to handle 1Gbit/s in 60-byte packets” are often two very different thingsAs a rule of thumb, if our game is fast-paced, AND we want to firewall our gaming traffic – we need a low-latency firewall capable of handling LOTS of small packets (beware: “being able to handle 1Gbit/s in general”, and “being able to handle 1Gbit/s in 60-byte packets” are often two very different things).

When speaking about low latencies and high traffic, one should keep away from quite a few vendors who are just putting Linux distro on their hardware, then get each packet into user space – and process it there, incurring kernel-user-kernel penalty for each packet. Such boxes (especially those oriented on throwing in as many complicated checks as possible) tend to be overwhelmed very easily by serious gaming traffic (which tends to consist of tons of small packets).

With regards to low-latency firewalls, I had very good experiences with Netscreen firewall appliances (now Juniper, though Juniper did discontinue Netscreen line and replaced it with supposedly-better SRX series); also I’ve heard good things about higher-end CISCO ASAs. Whether your ISP will provide any of these – depends, but I’ve seen up to ASA 5545 available for rent from a hosting ISP; ASA 5545 handles up to 1GBit/s with sub-millisecond latencies -– even when traffic consists from smaller packets (OTOH, it is going to cost you – the one I’ve seen was rented at EUR 650/month).

Last but not least: for our own gaming traffic – we won’t need complicated firewall rules (neither we’ll be able to write them anyway); this might call for using a simple low-latency packet-filtering firewall for gaming traffic (such a box can be inserted right after second uplink port on Fig 21.2) – and complicated state-based monster for all the other traffic.

It means that for gaming traffic – we can at least try to use a simple Linux box with iptables (or FreeBSD with pfSense) configured to throw away anything but UDP packets going to our own ports; it is not that much filtering – but for gaming UDP traffic, it is quite difficult to do more than that anyway. Note BTW that as netfilter-controlled-by-iptables operates in kernel mode – it will perform significantly better than those userspace firewalls I criticized above.

For usual (non-gaming or slower) traffic – firewalls tend to be very different from simplistic UDP packet filtering. Here we’re speaking about serious stateful inspection, understanding of higher-level protocols such as TLS/HTTP/etc., and so on. Fortunately – in these cases we don’t usually speak about low latencies (and rarely – about high traffic), so it is not that difficult to find a firewall box for this purpose.

In some cases – ISPs provide such firewalls themselves (I’ve seen it marketed as a “shared firewall”). If it is not an option – you should look at least for a stateful firewall with support for TLS, HTTP, and VPN (simplistic packet filtering isn’t enough for web/e-mail/TLS traffic) – all the way up to so-called UTM firewalls. UTM firewalls can be usually found as appliances – but if you happen to dislike the idea of paying for appliance firewall – or if your ISP doesn’t provide such an option to rent a firewall – you may want to rent a separate server box (or for cloud – a separate VM) and run a software firewall such as untangle, endian, or ClearOS on top of it.

After we’re done with network stuff – we can start dealing with Servers <at last! />

When you’re choosing your rented or co-location servers, one of the most important practical things4 is so-called Out-of-Band Management.

Most importantly for us now – Out-of-Band Management allows you to:

With Out-of-Band Management – the only two things you will ever need from ISP guys is to:

“A word of warning – even if your server supports iLO/DRAC/IMM/IPMI – make sure that you (or your ISP) have a license for it, with the license supporting both KVM and “remote media” functionality.As for “which Out-of-Band Management to use” – usually, the only realistic option is to stick to whatever-provided-by-your-Server’s-vendor. For HP boxes – it is known as iLO, for Dell – it is DRAC, for IBM/Lenovo – it was renamed several times, with the last name I’ve heard, being IMM; for SuperMicro – it is IPMI. I’ve tried first three of these myself – and all provided more or less the same functionality (and while I didn’t try SuperMicro’s IPMI – it is reported to provide all the necessary capabilities too). A word of warning though – even if your server supports iLO/DRAC/IMM/IPMI – make sure that you (or your ISP) have a license for it, with the license supporting both KVM and “remote media” functionality.

If you’re renting a cloud server – make sure that your ISP does provide something like “console access” to your cloud instances; with “console access” etc. – you usually won’t be able to install OS from scratch, but you will still be able to fix your IP misconfigurations; this is a bit worse that a full-scale Out-of-Band Management with “remote media” – but is still workable.

With understanding of Out-of-Band Management – we can start speaking about typical server configurations.

Rack Unit A rack unit (abbreviated U or RU) is a unit of measure defined as 1.75 inches (44.45 mm). It is most frequently used as a measurement of the overall height of 19-inch and 23-inch rack frames, as well as the height of equipment that mounts in these frames— Wikipedia —If you’re renting your servers – the most popular choice is a “workhorse” server, which has 2 CPU sockets – while being just 1 Rack Unit (=1,75”, a.k.a. “RU”, or “U”) in height. A combination of these two properties (Sockets and Units) is often abbreviated as 2S/1U.

2S/1U server boxes are one the most popular servers out there; they tend to provide the best price/performance – and are pretty decent overall.

For such a 2S/1U box, you can expect:

“Workhorse” 2S/1U Servers are usually your best bet whenever you need a server which should perform well, but for which your system is ready to handle a failure in a more-or-less seamless manner;5 in other words – 2S/1U server boxes work the best as cheap expendable servers.

MTBF Mean time between failures (MTBF) is the predicted elapsed time between inherent failures of a system during operation. MTBF can be calculated as the arithmetic mean (average) time between failures of a system.— Wikipedia —In game environments – 2S/1U boxes are usually used to run your Game Worlds (and also – as Front-End Servers if you’re using them – see Vol. III’s Chapter on Server-Side Architecture for discussion). The rationale goes along the following lines. First, for a reasonably large game, you’re going to have some dozens of such Game World Servers (“industry standard” number for simulation-and-alike games is around 100 players/core or 1000 players/server box, so to run mere 50’000 simultaneous players, you’re likely to need 50 of such 2S/1U servers). Second, when you have a dozen of servers – chances of one of them failing go pretty high (with typical MTBFs for 2S/1U boxes going at about 2 years, for 50 of them we’ll be speaking about one of them breaking every two weeks or so, ouch! Moreover – even if we use more reliable 4S/4U with MTBFs of 5 years – we’ll still be looking at crashes every month). Third – as crashing every two weeks and even every month is usually unacceptable – we’ll need to have fault tolerance (or at least some kind of fault mitigation – more on it in Vol. III) anyway. Fourth – as we’re going to build some kind of fault tolerance/mitigation anyway – we need the boxes with the best price/performance ratio, i.e. paying for better reliability doesn’t make too much sense. Fifth – as 2S/1U boxes tend to provide the best price/performance – they are the one commonly used for Game World Servers.

BTW, RAIDs, while still being a good thing for such boxes (at least if you’re using fault mitigation rather than full-scale fault tolerance) – do NOT usually require a hardware RAID: a software RAID will do nicely.

These days, there are ISPs out there who will readily sell you dedicated servers at really bargain prices (as low as $5/dedicated-server/month). However – whenever you’re comparing pricing – make sure that you’re comparing apples-to-apples. All the performance numbers for servers within this chapter (and within this book in general), are assuming that you’re using reasonably-recent Xeon CPUs; however – these days you can be easily sold an access to Raspberry Pi marketed as a “dedicated server”, and anything-else-in-between. Whenever you’re using something but Xeon, keep in mind that:

Oh, and BTW – keep in mind that in spite of all the scalability, per-core performance does matter. In other words – if you have your game running fine on 10 Xeon cores – it doesn’t necessarily mean that it will run on 100 ARM cores.6

Blade servers is an even-more-packed version of 2S/1U boxes. As a rule of thumb – “blade” server consists of 6U/7U/10U “enclosure” – and this enclosure is filled with vertically-oriented “blades”; the whole point of “blades” is that while they look as separate from outside – they reuse stuff such as power, cooling, Ethernet switch, etc. from chassis, which allows to achieve even higher physical density within racks (usually – you can obtain about 2x more CPUs in the same rack space using blades).

In theory – a 2S blade should be “almost-indistinguishable” from traditional 2S/1U server box; however – in practice, I’ve seen blades suffering from quite severe problems (ranging from reliability issues to substantial-packet-loss-within-blade-chassis).7 As a result – when having a choice (and unless price difference is significant), I’d rather not use blade-based servers at all.

Close cousins of 2S/1U servers are 2S/2U servers. While, sitting half a globe away, you won’t see much difference from the server-being-twice-thicker – it makes difference for ISPs, as the space in datacenters costs money. As a result – 2S/2U boxes tend to cost more that 2S/1U ones (though YMMV very easily, so if you’re offered 2S/2U box at a price of 2S/1U one – there is nothing bad/suspicious about it; 4S/4U boxes are a different story – and they are almost-universally more expensive).

Other than being (obviously) larger and (probably) more expensive – 2S/2U servers tend to exhibit the following properties compared to 2S/1U ones:

Overall, there are several potential uses for 2S/2U servers in game-like environments:

“in quite a few cases (especially for games), it happens that a single mission-critical server box happens to be more reliable (i.e. fails less frequently) than a supposedly-redundant system; this is common whenever redundancy system becomes a source of faults itself – and it occurs all the time if some kind of drivers are involved in implementing redundancy.As it was discussed in Vol. III’s Chapter on Fault Tolerance – in quite a few cases (especially for games), it happens that a single mission-critical server box happens to be more reliable (i.e. fails less frequently) than a supposedly-redundant system; this is common when redundancy system becomes a source of faults itself – and it occurs all the time if some kind of drivers are involved in implementing redundancy.

As a result, IF you can afford failures once-per-5-years-or-so – it often happens that a single OLTP DB server (with an ongoing backup, of course – we’ll discuss ongoing backups a bit later) is your best option. In such cases – it is usually not a problem to pay a bit more for such a single server in exchange to better MTBFs – which leads us to more expensive 4S/4U boxes. Moreover, such a 4S/4U box (if you’re following guidelines discussed in Vol. V’s chapter on Databases) can easily handle 10B+ transactions per year 8– and this is a Damn Lot (~=”unless you’re running post-2005 NASDAQ, it should be enough”).

As a result – I am often arguing for using 4S/4U server boxes for mission-critical servers (such as OLTP DB servers). As a rule of thumb, 4S/4U servers have the following differences from 2S/2U ones:

In general – if one of your DB Servers doesn’t have enough bays to store your data – you need to go further. With this in mind, the following types of storage are known:

“any heavily-writing DB is going to be quite sensitive to the latency of writing to the database logAs it was discussed in Vol. VI’s chapter on Databases, when it comes to OLTP DB (and especially if we’re using it with a single modifying DB connection – which I am arguing for) – they tend to be very sensitive to disk write latencies; more generally – any heavily-writing DB is going to be quite sensitive to the latency of writing to the database log (very shortly – until the disk has confirmed that log data for transaction is committed – DB cannot consider transaction completed, as it would violate Durability guarantees).

If we’re using usual HDDs – writing latencies are going to be in 10-20ms range even for fastest HDDs. For SSDs, latencies are generally better – though, depending on specifics, can still get into single-digit millisecond range.

Ideally, latency-wise, the request originating from DBMS, should get via PCIe to the controller card – and it should be terminated on the PCIe card itself, without performing any long operations or going beyond the card. At this point, I know of two technologies which allow for this kind of latencies:

“It is interesting to note that when speaking about write latencies of ages-old RAID-with-BBWC vs much-newer NVMe - we'll see that from application perspective, they will be in the same ballpark range (hundreds of microseconds)It is interesting to note that when speaking about write latencies of ages-old RAID-with-BBWC vs much-newer NVMe – we’ll see that from application perspective (i.e. counting from app-sending-request to app-receiving-reply), they will be in the same ballpark range (hundreds of microseconds); this is related to an observation that both RAID-with-BBWC and NVMe can terminate write request right there on PCIe card. While NVMe will still outperform RAID-with-BBWC-plus-HDDs for reading, for writing they will be pretty much the same.

As a result – for OLTP DB log writing (and this is exactly where latencies are critical for OLTP DBs) – there isn’t that much difference between RAID-with-BBWC and NVMe. This is a relief as most of server-boxes-from-major-vendors do have RAID-with-BBWC for ages (while finding server-box-with-NVMe for rent is still not easy <sad-face />).

BTW, just to compare latencies for cloud storage: data from [Lê-Quôc] shows that for cloud storage, we’re speaking about latency spikes of up to 100ms easily – and this is about 300x of what-we-can-expect from a reasonable non-cloud-based solution (NB: acknowledging this, some cloud vendors have started to sell servers with internal storage in addition to cloud storage; for such boxes-with-local-storage – things are going to be better than for cloud-based storage, though to get an idea of real latencies for such boxes-with-pretty-much-unknown-hardware, you’ll usually need to measure it yourself).

The task of choosing optimal storage for your servers is quite complicated and non-obvious; however – as a very rough, very first approximation, the following guidelines might help:

For serious servers (I am not speaking about Raspberry Pi here), traditionally there are four big vendors: HP, DELL, IBM/Lenovo, and SuperMicro.

When speaking about expendable 2S/1U or 2S/2U server boxes – IMO there isn’t much difference which ones to use. In other words, if ISP-you-like provides you with one of these four – as a rule of thumb, you should be fine. Still, if more than one is available, and pricing is about the same, here is my personal list in the order of preference (once again, this is for expendable servers):

On the other hand – if we’re speaking about mission-critical servers (such as DB Server) – I would probably try to avoid SuperMicro altogether; while I am not saying that their servers are bad – I still think that they’re not mature enough to rely on them for mission-critical stuff. In other words – if the only option provided by your ISP for mission-critical servers is SuperMicro – I would consider it as a negative-to-be-taken-into-account (and whether this negative can be countered by other virtues of your ISP – depends a LOT on your specifics). Among remaining three vendors – my current personal order of preference for mission-critical servers goes as follows:

What’s more important, however – is to

While it might be possible to find decent servers from the other vendors – it is IMO too high-risk (and MOG deployment already has enough risks to deal with). Moreover – when going outside of the Big Four – you’ll likely live without Out-of-Band Management – and this is not a picnic at all (especially when you need to fix a critical problem on a Friday night – and “remote hands” are not available until Monday).

This concludes beta Chapter 21(c) from the upcoming book “Development and Deployment of Multiplayer Online Games (from social games to MMOFPS, with social games in between)”.

Stay tuned for beta Chapter 21(d), where we’ll discuss how to choose your ISP based on the needs of your MOG]]|||

