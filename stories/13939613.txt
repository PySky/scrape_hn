At Synthesio, we have recently started to release part of our Ansible deployment stack on Github. It’s the achievement of a 2 years long project. We wanted to do it, but didn’t for many good and bad reasons.

The code was not good enough to be released. That’s the excuse I hear the most from companies that are reluctant to open source their code.

That’s the wrong way of thinking. Don’t wait for your code to be perfect or you won’t release anything. Push something that might be useful for someone. If people use it, they will contribute and improve your code.

We didn’t have the time to do it. To tell the truth, open sourcing our code was not a priority. We had to deliver fast, fix many things, so doing simple stuff like writing documentation or pushing on Github came second.

The code had Synthesio specific stuff we couldn’t push. That might be the only good reason to keep our code closed for so long. We had to make our code less Synthesio specific by moving things from the core to the configuration. It didn’t take long, and made our code more readable and reusable as our infrastructure is growing. The process is still ongoing and we’ll keep pushing stuff as we clean them.

If you want to open source part of your code, here’s a way to do it without causing a mess or getting crazy.

The first part of the job is splitting your existing code into modules you can release. In this example, we’re releasing our Mesos deployment Ansible role, which used to be in our Ansible stack core.

To do this, we’ll rely on Git submodules. Many people hate submodules, but in our case, that’s the best way to go. We’ll be able to have a separate Git repository on our internal Gitlab we can mirror on Github in the blink of an eye when we update it.

We want to keep the code on our internal Git infrastructure in case of Github would close or be down someday.

Now, we can actually split the code into modules. Since we don’t want to lose the git history, we’ll use some git tricks to keep that code and its revisions only.

Clone your local repository into a new one:

Make sure the place is clean before you start working

It’s now time to do the real thing:

You’re now left alone with your mesos role. Good. Some cleaning might be needded before we push to our new repositories.

Our Mesos role used to have some Synthesio internal things we don't want to release, like machine hostnames, or usernames / passwords. To do it, we had to clean Git history so people won't find it while browsing Github.

If you've just deleted that file, it's easy:

However, we didn't delete the file, we replaced the data so we need some more git tricks to get rid of the history until the replacement.

First, you need to find the commit SHA1 you replaced your sensitive data with.

Now, create a branch ending to that commit

You're done! Your file is still alive but all the sensitive history has been deleted.

Add a LICENSE and a README file, you're now ready to push your code

Now, make use of the newly separated module in your main project. Since we don't want the whole mesos history thing, we'll delete it as well here.

Get your commit reviewed, tell your pals to update. TADA! Your company is now a proud open source contributor!|||

At Synthesio, we have recently started to release part of our Ansible deployment stack on Github. It’s the achievement of a 2 years long project. We wanted to do it, but didn’t for many good and bad…