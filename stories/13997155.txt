A lot of talk has been given around React Fiber since it was first announced last year. And even five months later, there are still a lot of questions about it. This article seeks to answer one of them: What question does Fiber answer when it comes to rendering in React?

Or, in other words, what problem is it trying to solve?

Author’s note: Unlike most of my other articles, this one benefits from some understanding of Javascript, as well as familiarity with ReactJS.  Stephen Grider‘s Modern React with Redux is my personal favorite course for learning this topic, and the one I recommend to most people. I should also mention that, while this article will focus on the web version of the framework, the core concepts can be applied to React Native as well.

This is a quote from Geoffrey Dhuyvetters‘ What is React Fiber and How can I try it out today? Which offers some pretty good guidance towards mastering this new technology, and is definitely worth a read.

But more importantly, this definition tells us two things:

What is it actually changing though? In very simple terms: Fiber seeks to change the way in which React renders our applications. But, before we can tackle how it will be doing that, we need to understand some core concepts that it aims to improve upon:

Facebook has actually shared a little bit of the story as to why React was developed.

While they don’t really go into specifics of when it was conceived or what they were working on when it happened; it does allow us to get a general idea of the reasons for its conception: React was invented as an alternative to manual DOM manipulation.

And it achieves its purpose through the use of a few core concepts:

The virtual DOM it is an object-based representation of how the DOM should look like. It’s composed of React Elements, which are basically object representations of both HTML Elements and React Components.

These elements are the answer to the question: Who do we render in our application? (awkwardly phrased, I know.)

In order to help you better picture this concept, let’s look at a single element:

As we can see: It’s just an object. An object that represents a full DOM Node starting from a button, mind you; but still an object, nevertheless. And that’s all the Virtual DOM really is: A giant object made of objects that represents your DOM tree.

This object also tells us where to render everything in our application.

Whenever React detects that there’s a difference between this object and the actual HTML in our page, it draws or renders the application again. This ensures that they stay up to date with each other.

Now we know what the Virtual DOM is: a map of sorts that React uses to represent your application. This map, however, is very different from a map that you would have in real life.

While the earth takes thousands of years to change its geography, outside of human interaction; the type of application that React was originally conceived for is one that is constantly changing.

This means that we also need to be constantly re-drawing, or updating, our map to make sure it matches the actual geography of our application.

React has a concept of one way data flow which means, in layman terms, that our data can constantly travel down the objects in our Virtual DOM, and become a part of its structure.

This data can become the text written inside a , or the you add to a . It can also become that our app can trigger in response to a user’s interaction.

Having our data become a part of our application structure means that: changes in our data can change the way our Virtual DOM looks; which will cause React to render our application again so it matches the new map.

This is what we refer to as an update.

So, we have a map for our application, and we also know that it is constantly changing along with our app. What we don’t know yet is how to re-draw it in an efficient and (ugh…) agile way.

In a very small application, the solution is simple enough: Take the whole Virtual DOM object and use it to draw actual HTML elements on our page, if something changes, render everything again.

But it’s easy to see that this idea won’t scale well to huge applications, despite how fast our re-drawings skills may be, if we try to render everything: each new element will make the rendering take longer.

We need a game plan. And that is where the term Reconciliation comes in.

Again, in the simplest terms I can come up with: Reconciliation is the process React uses to interpret the Virtual DOM and decide how to Update it. And to achieve this process, Reconciliation has several rules as to how it chooses to update the virtual DOM which it calls the diffing algorithm.

I really recommend reading Facebook’s own explanation on Reconciliation and diffing but, just to give you a general idea:

What our new game plan does is make it easier to render our app, e.g: only the of our element changed, so we don’t need to render it again, we just have to change that property.

For the most part, this game plan (Reconciliation and Diffing) does a really good job at choosing how (in what way) and why (under which circumstances) we render our application.

And everything seems runs smoothly… Unless we get a huge chunk of data flowing down our application at once; specially if it’s going to vastly different places. Then we’re going to start running into some problems.

Because you see, for all the good parts that our strategy has, what it doesn’t have is patience: It will start re-drawing as soon as something changes in our map.

This means that, given enough differences, we could even be updating our entire app at once. Which, as we already mentioned, is very expensive and can lead to high latency in our applications, as well as some performance issues.

Still, for a good amount of time, the question of When do we render our application? Had a pretty straightforward answer: As soon as we can. And eventually the world realized that it really wasn’t the best one.

React just gets better with age and, going into the next step of its life, it has learned an important lesson that usually takes the best of us years to master: patience.

While React’s traditional way was to update as soon as the data became available, Fiber offers a new world of possibilities:

Having access to these options when updating forms the concept of scheduling. And achieving this behavior is Fiber’s main concern.

Additionally, being able to manage the timing and condition of any given update has many desirable side-effects:

While this article won’t go into detail about how Fiber operates, I suggest you check out Andrew Clark‘s React Fiber Architecture if you want a more in-depth look at the specifics of how Fiber approaches the concept of Scheduling, along with answers to questions like: What is a Fiber? and How is a Fiber Structured?

While we may have answers to what do we render? (elements), where do we render them? (virtual DOM),  how and why we render them (Reconciliation and Diffing); React developers have always wished we had a way to figure out and decide when to render our application updates.

And that is precisely the question that Fiber is here to answer.|||

There are still a lot of questions around React Fiber. This article seeks to answer one of them: What does Fiber mean for rendering in React?