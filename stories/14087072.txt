The second package instructs React DnD to use the HTML5 drag and drop API under the hood. You may choose to use a third-party backend instead, such as the touch backend .

React DnD is a set of React higher-order components to help you build complex drag and drop interfaces while keeping your components decoupled. It is a perfect fit for apps like Trello and Storify, where dragging transfers data between different parts of the application, and the components change their appearance and the application state in response to the drag and drop events.

import React from 'react' ; import Prop Types from 'prop-types' ; import { Drag Source } from 'react-dnd' ; import { Item Types } from './Constants' ; const cardSource = { beginDrag ( props ) { return { text : props . text } ; } } ; @ DragSource ( Item Types . CARD , cardSource , ( connect , monitor ) = > ( { connectDragSource : connect . dragSource ( ) , isDragging : monitor . isDragging ( ) } ) ) export default class Card { static propTypes = { text : Prop Types . string . isRequired , connectDragSource : Prop Types . func . isRequired , isDragging : Prop Types . bool . isRequired } ; render ( ) { const { isDragging , connectDragSource , text } = this . props ; return connectDragSource ( < div style = { { opacity : isDragging ? 0.5 : 1 } } > { text } < / div > ) ; } }

Instead of providing readymade widgets, React DnD wraps your components and injects props into them. If you use React Router or Flummox, you already know this pattern.

React DnD fully embraces the declarative rendering paradigm of React and doesn't mutate the DOM. It is a great complement to Redux and other architectures with the unidirectional data flow. In fact it is built on Redux.

HTML5 drag and drop has an awkward API full of pitfalls and browser inconsistencies. React DnD handles them internally for you, so you can focus on developing your application instead of working around the browser bugs.

React DnD uses the HTML5 drag and drop under the hood, but it also lets you supply a custom “backend”. You can create a custom DnD backend based on the touch events, the mouse events, or something else entirely. For example, a built-in simulation backend lets you test drag and drop interaction of your components in a Node environment.

React DnD does not export mixins, and works equally great with any components, whether they are created using ES6 classes, or alternative React frameworks such as Omniscient. Its API shines with ES7 decorators if you like to be on the bleeding edge, but it also feels natural in both ES5 and ES6.

For touch support, use React DnD with the touch backend instead of the HTML5 backend.

React DnD gives you a set of powerful primitives, but it does not contain any readymade components. It's lower level than jQuery UI or interact.js and is focused on getting the drag and drop interaction right, leaving its visual aspects such as axis constraints or snapping to you. For example, React DnD doesn't plan to provide a component. Instead it makes it easy for you to build your own, with any rendering customizations that you need.

Issues and potential improvements are discussed on Github.

Big thanks to BrowserStack for letting the maintainers use their service to debug browser issues.

React DnD is licensed as MIT. Use it as you will.|||

