This follows up into an obvious 2-step process:

I had some audience which really prefer an email to receive valuable information. And I don’t mean an attached document, which usually becomes impossible to find when it’s needed – I mean the email body.

My aim with this post is to show a way to create, schedule and send emails to briefly show to your internal audience the key indicators of a report in a attractive and responsive manner. The report itself will be uploaded to a file sharing platform so the email will just be a brief summary with the key insights and a button to download the report.

Please note that this is not an alternative to customer-oriented massive emailing products as mailchip.

This is a straightforward step if you have worked before with web frontend frameworks, as bootstrap for instance. The mjml site includes a very good documentation, tester, examples, etc.

The key point is to create a mjml template using jinja2 syntax (as in flask or django) to build the dynamic parts of the report.

If you want to include emojis, you can use a subject line assistant tool to encode the subject.

As I mentioned before I’ll use Airflow to run and manage this workflow. I’m going to create a DAG with implements all the needed tasks to generate the report, the email summary and send the email. I’ll also schedule this report so it’s going to be automatically run each month.

It is not necessary to change these tasks, just make sure to leave the output report file (pdf, csv, excel, etc.) in a handy place.

Adding a validation box could prevent sending wrong reports when there is some kind of anomaly in the data.

I use a private instance of owncloud to share my reports. With the python client library for owncloud it’s easy to write a custom airflow hook/operator, so this task is as simple as:

Note that it also stores the report public url in a xcom variable (it will be used later).

This task is very dependent on each use case, but in essence it has two aims:

Usually I create a parent directory in the web server dedicated for the report and a subdirectory for each execution. Then I store the media in this folder with a convenient name so it can easily rendered with jinja2.

Given the report dictionary and the public url to download it from owncloud, both created in previous tasks, now I’ll render the template to create the final html content.

Finally send the email with the html body and a plain text alternative:

Once created the workflow it can be easily replicated to be used in other reports with diferentes data, templates and schedules. In my experience, it has supposed a high improvement of the effectiveness of the communication and the audience engagement.

That’s how an example mail looks like in MS Outlook 2010.|||

One of the most crucial steps of the analytics journey is indeed the last one: the communication. The way you share your results will inevitably impact on the value perceived by your audience.   This follows up into an obvious 2-step process: To clearly identify your audience. It could be a marketing team, a support team…