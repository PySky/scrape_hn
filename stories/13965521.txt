Disclaimer: Developer Experience is NOT about work experience, seniority or proficiency level. It's about how Developers perceive the sum of their work conditions (tools, processes, constraints, etc.) & how it impacts their efficiency & productivity. Analogy to UX/CX is definitely in place.

Pretty much everyone who's up-to-date in modern IT knows what is UX (User Experience) & how does it differ from UI (User Interface). Many dive even deeper - terms like Information Architecture, Interaction Design or User Persona are well recognized & widely applied to build better solutions that bring more value to the end-user.

But far fewer recognize another, similarly sounding term of no negligible importance either - DX (Developer Experience). Hence my goal for today - to describe what DX is & why one should care.

I don't like any of the definitions that can be found on the web, so I'll try to form my own :)

In more plain words - it's a quantification of how ergonomic, convenient, reliable & in agreement with engineering common sense development process is. It's about whether i.a.:

Obviously this "quantification" isn't very tangible - I'm speaking more about the "feeling" or "attitude" as there is no formula for DX & it can't be expressed in any formal unit ...

On practical terms, what are sample "impact vectors" for DX? To simplify things, I'd split them into two categories:

Internals are no-brainers - in undocumented, humongous monolith with full spectrum of dated conventions, messy code structure & zero test coverage it requires a lot of resolve, determination & effort to make any change, especially an architecture-impacting one. You never know the regression scope, whole system is brittle, one change can force a small avalanche of subsequent ones (because implementation details have leaked out of presumed bounded context). DX is terrible, because whole system is a pain to touch.

Externals are of a bit different nature - shared database (or any other critical resource); being dependent on another, capability-based team (e.g. ESB team) in day-to-day activities; inefficient tools (like a slow compiler, buggy IDE or dev machine with too little of RAM) or dumb corporate policies (limited Internet access or can't run local web server on your machine). DX is terrible, because under such circumstances you just feel you could do much better/faster, but it's the system that prevents you from doing so.

Most painful thing about reduced DX isn't really about reduced productivity (even if this direct outcome is very tangible & easy to understand). Think rather about - or more precisely people realizing that they are not using the full potential they could use.

In case of internals - team loses faith in their leaders or that it's possible to learn anything useful from them, doesn't identify themselves with the work (/product/service), avoids to take any ownership & as an end-result: decreases their engagement for minimum level.

In case of externals - walls & divisions are being erected ("we VS them"), individuals feel like crippled subjects of processes & workflows they don't understand, work itself tends to be demotivating due to countless activities that don't deliver value, employees build up some kind of "resistance", because they feel that any kind of improvement can happen only bottom-up, if they limit transparency & openness.

In both cases low DX equals increasing annoyance, feeling of being powerless & frustrated. Insufficiently DX-infused work environments are almost completely devoid of innovation, initiative & the positive vibe of creative community . These are not good places to work & employees usually focus on finding the way out. The more they delay the departure, the worse for them.

... about using the most cool platform / tool / library that is getting the most attention on the web - the focus in DX is on both usefulness & usability, not just developer's satisfaction from using the latest shinies. Stability & productivity are absolutely essential here. Pragmatism FTW. ... 100% objective. Devs have different opinions, different preferences & not everything can be assess based on sheer facts only. That's why there should be a clear set of baseline rules that determine how decisions are made once facts give their way to opinions. ... granted forever. Platforms, tool-sets & processes need to evolve to match the advancements in technologies, methods & paradigms of modern day development. ... about do whatever you want / use whatever you prefer. Without alignment & shared vision there will be no synergy, no knowledge sharing, no accelerated growth. ... coming w/o the price. Or rather - the DX improvement always requires some price & in many cases the most eager devs ignore / belittle it. This price isn't only about the immediate effort, but also about the long-term effect: e.g. can you replace old tool completely with the new one? what is the effort to keep old & one in parallel (even temporarily)? can these be used interchangeably? ... superior to delivering business value. Satisfying the needs of consumers is still the main goal & technology (DX included) HAS to adjust to this fact. But on the other hand, while considering this "satisfying" one needs to think long term, keep in mind hidden aspects (like maintainability or resilience) so it's fine & understandable to sacrifice a bit of today's business value to get more DX (& hence improve efficiency) long-term.

Yupp, that should be the key outcome for you from this blog post. You should be looking for workplace with , not necessarily for ones with the highest "absolute value" of DX. Even if current DX is rather low, but there's will, capability to change it & the vision of how to do it, this sounds like great environment for continuous learning, building up good habits, sustained personal development & doing work that brings satisfaction, not frustration.

As I've already written above, DX is not given forever - if high DX work environment degenerates somehow (usually because key people leave or due to some other human-factor), DX withers, decays & falls into fast-pacing entropy.

Stable, gradual DX increase, even mid-term, can make wonders & provide unprecedented satisfaction from the work done . In contrast to what you may be thinking, software workshops that try to go all-out for max DX in (too) short period of time, usually end bad -> postponing the delivery of any business result eradicates trust (of business stakeholders), increases the difficulty of validating introduced improvements (due to mutual impact of changes) & cripples overall stability, causing internal resistance to any change.

There is no & there won't be any generic prescription of how to do that. It's too dependent on work environment specifics: product(s), platform(s), scale, operating model, etc. What I can suggest is only some hints, key questions you should ask yourself, major factors you have to keep in mind when making the decisions that can impact DX:

One last remark: 10x developer productivity is indeed a myth or rather a misunderstanding. What one may sometimes experience is not really 10:1, but rather about 1:0.1 productivity ratio (with a relative effect being the same, I know). Such a - with a crawling DX being one of its key reasons.

Beware or it will become your standard.

P.S. If you like this post and find its content useful & relevant, please don't hesitate sharing it with ones who may (according to you) benefit of it as well. Thanks in advance.|||

