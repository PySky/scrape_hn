ðŸŽ‰ Here we are, Angular 4.0.0 is out, right on schedule ! ðŸŽ‰

Technically there are some breaking changes, explaining thatâ€™s why the major version number has changed. And, if you missed it, there is no Angular 3: the router package was in version 3.x, so instead of bumping everything to 3.0 and the router to 4.0, the team chose to bump everything to 4.0.

The breaking changes are quite limited though, we updated several of our apps in a few minutes: nothing too scary.

TypeScript 2.1+ is now required (it was 1.8+ before), and some interfaces have changed or are deprecated (rarely used in most applications, like or ).

TypeScript 2.1 and 2.2 have brought really nice features you should check out. Angular 4 now supports them (and you will soon be able to activate the new TypeScript option for example).

This is probably the biggest change, even if, as a developer, you will not see the difference.

As you may know, in AoT mode, Angular compiles your templates during the build, and generates JavaScript code (by opposition to the Just in Time mode, where this compilation is done at runtime, when the application starts).

AoT has several advantages: it errors if one of your templates is incorrect at build time instead of having to wait at runtime, and the application starts faster (as the code generation is already done). You also donâ€™t have to ship the Angular compiler to your users, so, in theory, the package size should be smaller. In theory, because the downside is that the generated JS is generally bigger than the uncompiled HTML templates. So, in the vast majority of applications, the package is in fact bigger with AoT.

The team worked quite hard to implement a new View Engine, that produces less code when you use the Ahead of Time compilation. The results are quite impressive on large apps, while still conserving the same performances.

To give you a few numbers, on two medium apps we have, the bundle sizes went:

Interesting to note that in the design doc, the Angular team compares the performance (the execution time of course but also the pressure on the memory) with the baseline implementation (best vanilla JS they could write) Angular 2.x and InfernoJS (a really fast React-like implementation).

A ton of work has also been done on the Universal project which allows you to do server-side rendering. The project was mainly maintained by the community until now, but, starting with this release, itâ€™s now an official Angular project.

Animations now have their own package (one of the things you may have to change when you update). This means the bundle you ship to your users will not include useless code if you donâ€™t use animations in your app.

The tag is now deprecated: you should use the tag instead. It still works though. It was a bit confusing as is a real HTML tag that Web Component can use. Now Angular has its own template tag: . You will have a warning if you use the deprecated somewhere when you update to Angular 4, so it will be easy to spot them.

Itâ€™s now also possible to use an syntax in your templates:

Another addition to the template syntax is the keyword, to simplify the syntax. It allows to store a result in a variable of the template, to use it in the element.

It can be useful to store a sliced collection for example:

Or even more useful, to subscribe only once to a pipe with . If is an observable, instead of the bad and ugly:

Angular 4 introduced a new pipe. It changes the first letter of each word into uppercase:

Overriding a template in a test has also been simplified:

A new service has been introduced to easily get or update meta tags:

One new validator joins the existing , , and . helps you validate that the input is a valid email (good luck finding the correct regular expression by yourself).

A new directive has been added to help you compare options from a select: .

A new interface has been introduced to represent the parameters of a URL: . Instead of using or , you should now use or , because they offer the choice between to get a value, or to get all values (as query parameters can have multiple values for example).

or as an Observable:

The interface now has an extra (optional) parameter, containing the next state (where you are going to navigate). You can now implement clever logic when your user navigates away from the current component, depending on where he/she is going.

The internationalization is slowly improving with tiny things. For example, is now simpler:

We added a complete chapter on internationalization in our ebook, with several use cases and best practices described if you want to learn more about i18n!

This release brings some nice features and a really welcome improvement of the generated code size, for the price of very few breaking changes that should not impact you a lot. The migration has been quite smooth for us.

All our materials (ebook, online training (Pro Pack) and training) are up-to-date with these changes if you want to learn more!|||

Angular 4 is out! Which new features are included?