



It's a wiki, meaning that we hope and expect that you will help us to expand it and keep it up to date. I'm publishing it here in the blog for reference. In this tutorial, we give the step-by-step process that will help you install and configure Varnish to take your Magento2 e-commerce site to the next level. So read on: A few years ago I wrote the "Doing the right thing: Magento + Varnish Cache" blog post which has been very popular and I have planned to write a new one for a while. I didn't. Instead we added a " Varnish with Magento 2 " tutorials section in the Varnish Web Developer Wiki, which includes many resources such as this Step by Step Guide to make Magento .2 and Varnish work like a charm.It's a wiki, meaning that we hope and expect that you will help us to expand it and keep it up to date. I'm publishing it here in the blog for reference. In this tutorial, we give the step-by-step process that will help you install and configure Varnish to take your Magento2 e-commerce site to the next level. So read on:

Magento is a popular and powerful e-commerce platform for marketing, catalog management and search engine optimization. Magento provides online merchants with a flexible shopping cart system and control over a user-friendly WUI with content and various functionality for online users.

Magento is popular because it's got all this good stuff going for it, but there are some important considerations when implementing a Magento-based e-commerce site. It needs a bit of help in the acceleration department. This is where Varnish comes in; Varnish is a great complement to Magento sites because it adds significant speed and the potential for a real reduction in maintenance costs.

Magento2 is a PHP-based e-commerce platform. There are two editions:

Whichever works best for you, you canÂ get started with a performance increase for your website right away!

This article assumes that you have a running instance of Magento2 and that you have administrator rights for said instance, both at the OS and application level. We have tested this using Ubuntu LTS 16.04, Varnish Cache 4.1 and Magento2.

If you need guidance on the installation of Magento, please visit the Magento-Site

2. How to place Magento2 behind Varnish Here we discuss how to configure your Magento2 behind Varnish. The Magento2 admin states that the built-in application cache is not recommended for production use, but that does not mean that Varnish is already configured. Varnish needs to be installed and the configuration file suitably configured and deployed. We assume that you have Magento2 installed and running on your backend servers and that your server is a Debian-based Linux server. Visit the Magento2 admin page and go to: This is what the Magento2 mdmin page should look like: Under the Additional section, find a button for exporting the ready-made configuration file for Varnish 3 or 4. We recommend you use Varnish 4, as earlier versions are no longer supported. -> Export VCL for Varnish 4 This is usually named varnish.vcl Place the file in a Varnish folder for configuration (any place that is safe for you). Next, to add Varnish repository, follow the instructions at Now check if your services are up and running: If you receive outputs like the ones below: Congratulations! You have your services running on the backend. Now we need to check the Magento2 frontend: As you may have already noticed above, there is a process running as well.

Varnish does not cache cookies or their headers. But some cookies are marked as safe by the Magento site. Therefore it is recommended to remove or ignore these cookies so that Varnish can cache anything. An example, such as the following, will help to unset/remove unwanted cookies. Update your with this code or a similar code of your choice. Under the add the following code. Warning: Make sure to add the code below the default code given for

There is a subroutine called vcl_fetch which is by default set to 120 seconds as can be seen. You can extend this caching value by: This sets the TTL to 5 seconds, making Varnish pick up changes every 5 seconds. Add this subroutine right below the backend default. However, there is a downside to short TTL values in that they increase the load not only on the backend servers but also on frontend servers. Of course this gives you a better control over your cache, but it also increases overheads, such as network traffic, slower response times, which diminish the whole purpose of Varnish. Decreasing TTL values is not a good solution for high-traffic servers. Varnish has a better solution for that.|||

Learn how to speed up your Magento-based e-commerce website with Varnish with this Magento Varnish setup tutorial