DataWeave is a powerful tool inside Mule ESB which allows you to define data transformations that can be applied to a variety of formats (XML, JSON, POJO, CSV, etc..). With DataWeave, you can define transformations that change the structure of the data through merging, aggregation, enrichment, summarization, filtering and other processes. These non-trivial transformations are easily defined using a combination of operators (like map, reduce, filter and groupBy) and selectors (that make it easy to navigate the structure of the input data). It is precisely these operators and selectors that make DataWeave so powerful.

In this blogpost, we will work our way to selectors and operators by first explaining the lifecycle of a DataWeave transformation, the DataWeave file format and DataWeave scripts.

This blogpost can by no means serve as a complete reference to all the functionality that DataWeave offers. Refer to the reference documentation for more detailed and complete information.

The DataWeave script does not work directly on the input data file. Instead, it works on an internally transformed equivalent version of the input file in DataWeave file format (dw), which is a canonical file format. Every file format has its own way of being transformed into a dw file, depending on the way it’s structured. The dw file format is generic enough to accommodate a wide variety of file formats.

The result of applying the DataWeave script transformation to a dw file is a new dw file with the transformed data. The output file is then produced through an internal transformation of this dw file to the equivalent output file in format Y. Thus, to effectively use DataWeave, it is crucial to understand how the input and output file formats are represented in the dw format (refer to the dw format section for more details).

Tip: It can prove very helpful to apply no transformation to the input file and convert it to the dw format to directly see how it is represented in dw format. This is done as follows: This script can also be used to quickly generate a sample input file from an input file schema, which can then be used for testing purposes.

Note that any valid file format (from the list of accepted file formats) can be transformed into an equivalent dw file, but not every valid dw file can be transformed into any other file format. For example, the following CSV file:

Cannot be directly transformed to an XML file because XML files are represented as a hierarchy of objects without the use of arrays. Similarly, the following JSON file:

cannot be transformed to a CSV file because CSV files are represented as an array of objects.

The dw format is exactly like JSON (see json.org for the exact syntax), with 2 differences:

Refer to DataWeave formats documentation for an explanation of how different data formats are transformed into dw format. In summary:

A DataWeave script is made up of a header and a body, separated by . The header can contain the following elements in separate lines, all preceded by a ‘%’

The DataWeave script body is made up of a combination of the following:

Consider this example:

If the metadata for the payload’s inner contents are known to Studio, an autocomplete function helps you out. Enclose an array of objects between {( )} in order to transform it into an object containing all the key-value pairs in all objects. This comes in handy when using an operator (such as map) that returns an array and the output file type is XML. DataWeave is capable of calling a different flow and using the value returned from the flow. This is done using the lookup function. DataWeave offers different type of selectors which enable us to navigate through the structure of objects and arrays. The following are all the possible selectors along with usage examples on an object and array payload in dw format. Single value selector (.)

 Over object: returns first value whose key matches the given one

 

 Over array: applied on every object in the array. Returns an array with first values whose keys matches the given one

 

 

 Tip: In a series of single value selectors (e.g. payload.people.person.address.street), if one of the selectors returns an array, then the final result must be an array, even if there is only one matching value. Multi-value selector (.*)

 Over object: returns an array with all values whose key matches the given one.

 

 Over array: applied on every object in the array. Returns an array with all values whose keys match the given one

 

 

 Indexed selector ([x])

 Over object: returns the value of the key at position x (0 based index). If the index is negative (-x), the value of the key at position (sizeOf Object – x) is taken. This index can also be dynamic

 

 

 Over array: returns element at position x in the array.

 

 The indexed selector accepts also a string as a key. This string can also be dynamic

 Over object: returns first value whose key matches the given one

 

 Over array: applied on every object in the array. Returns an array with first values whose keys matches the given one

 

 Range selector ([x..y])

 Over object: returns an array with the values of keys at positions x to y. If x is bigger than y, the array will be in reverse order.

 

 

 

 (-1 is taken as sizeOf ObjPayload – 1 = 3)

 Over array: returns an array with the elements from positions x to y.

 

 Attribute Selector (.@): The attribute selector can only be applied on an object (since only objects can have attributes).

 

 Descendents Selector (..): traverses all the objects (even inner ones in objects and arrays) and returns the first values whose key match the given one. Descendents and Multi-value Selector (..*): traverses all the objects (even inner ones in objects and arrays) and returns all the values whose key match the given one (this is undocumented): It is also possible to use the descendents selector without a key (this is undocumented). This will return an array with all the values of every object and all the elements of every array. Tip: Whenever a selector returns an array of values or a simple type value, this can sometimes be transformed into an object using as :object. The object will contain the keys which would have been omitted by the selector. This is very handy for xml files which, as noted above, are only made up of objects. ?: followed after any series of selectors, this returns a true or false value. True if the selector returns some value, false otherwise. !: returns a value from the selector, otherwise throws an exception instead of returning null Operators are what make DataWeave so powerful, especially ones which I shall call lambda-based traversal operators. These are operators which take as input arrays or objects and traverse each element or key-value pair to perform some particular operation. This operation is customizable based on a lambda function that is also given as input and is evaluated at run-time based on each element or key-value pair that is being traversed. This is similar to what is done in .NET using LINQ and lambdas. There are currently eight lambda-based traversal operators in DataWeave: four which work only on arrays (reduce, filter, distinctBy and groupBy), two which work only on objects (mapObject and pluck) and two which work on both (map and orderBy). not throw an exception but rather coerces the object to an array and works with the resultant array. An object is coerced to an array through the removal of the root level keys of that object and all values are placed in an array. Therefore: IMPORTANT NOTE: If you pass an object to an operator which works only on arrays, DataWeave willthrow an exception but ratherthe object to an array and works with the resultant array. An object is coerced to an array through the removal of the root level keys of that object and all values are placed in an array. Therefore: Which means that the object’s root keys a,b and c are removed and their values are placed in an array. Also note that if you pass an array to an operator that works only on objects, DataWeave will throw an exception (in fact, the exception Cannot coerce a :array to a :object is thrown when pluck and mapObject are used on an array). Let’s start with a simple example using the map operator on an array. Map traverses each element x of the given array and copies f(x,index(x)) into a new array, where f is the function to be performed over each element x and its index. The function may or may not use the parameters x and index(x) it’s given. For example, we can use map to build an object containing each value and index of every element in the given array as follows: Where the function is . This returns: Note that the given function is anonymous. We can do the same thing without using explicit names for the parameters myValue and myIndex by using placeholders $ and  $$ that refer to the first and second parameter respectively. This will make our DataWeave script more succinct as it will look as follows: Tip: When using an operator g inside the function of another operator f, in order to reference the parameters of the outer function f in the function of g, we have to explicitly name the outer function’s parameters since the placeholders $ and $$ will be reserved for the inner function. This is an example where this is needed (the index of the outer map cannot be referenced by the function of the inner map unless idx wasn’t explicitly named): If we want to use the same function multiple times in our script, we can define it in the header and use it as follows: Tip: When using the map operation for an XML output file, the {(  )} parenthesis explained earlier come in handy to transform the resulting array from the map to an object. mapObject and pluck are similar to map. mapObject traverses each key-value pair and maps f(value,key) to an object. It is important that f(value,key) returns an object not an array or any other type, because the constructed object must be made up of a series of key-value pairs. For example: If we want to return an array instead of an object, we can use pluck. Pluck also takes the value and key as parameters. Using pluck: Unlike mapObject, pluck’s lambda expression can return non-objects for every element. In the following case, a string is returned for every element: Another useful operator is filter, which given an array and a lambda expression f(value,index) that returns a boolean value, it iterates through every element in the array and copies it into the output array whenever the lambda expression condition is true. Tip: This same operation can be done by using the ? modifier as follows: : This same operation can be done by using the ? modifier as follows: The operators distinctBy, orderBy and groupBy all calculate the given lambda expression on every element of the given array/object and use the resulting array of values to perform their operation. The array computed by the lambda expression of the last distinctBy is [4,6,8,6,8,10], which means that the distinct elements are the first, second, third and last element, which correspond to [4,5,6,5] in the input array. The reduce operator (a.k.a. the foldr function in functional programming languages), recursively applies the lambda function on every element of the given array and passes as an argument the result of this function (placeholder $$, known as the accumulator) from one element to the next. The typical use case for reduce is to sum an array of numbers: By default, the accumulator is initially set to the first value of the array. However, this can be modified as follows: A practical use-case for reduce is when we have an array of objects with the same keys, and we want to end up with one object containing the same keys and the summation of the values. This can be done as follows: In order to reference the value parameter of the reduce operator in the above example, we have to explicitly name the parameter since it is being used within another operator (mapObject), and thus the placeholders $ and $$ will be reserved for it. When defining an object key dynamically, we have to enclose it in ( ) brackets or single quotes (as in ($$) or ‘$$’). Note how the ability to dynamically define the selector’s key comes in handy in order to match the keys of the accumulator and the current object in iteration (val[$$]). The following is an example of a useful recursive function that takes care of filtering objects and arrays from their empty elements: %dw 1.0 %input payload application/json %output application/json //Filters object and arrays from its empty elements %function filterValue(value) value match { :object -> filterKeyValuePairs(value), :array -> $ map filterValue($) filter (not ($ is :empty)), default -> value } //Filters the empty key value pairs %function filterKeyValuePairs(value) value mapObject (value,key) -> using(filteredValue = filterValue(value)) { ((key): filteredValue ) when not (filteredValue is :empty) } --- filterValue(payload) The following is a table of all the lambda-based traversal operators along with how the placeholder $$ is interpreted: You can explore all the operators available in DataWeave through this index of all DataWeave operations sorted by parameter types.|||

This blogpost is on DataWeave - the powerful data transformation language in Mule ESB. Contains helpful examples and undocumented features.