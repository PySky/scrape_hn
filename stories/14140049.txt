The is probably one of my favorite and most used features in modern C++. The unique pointer is as powerful as it is simple, and assuming you've used it before, you surely know how awesome it is.

There are many great articles written about unique pointers, so I won't go into detail. What I will mention though is that unique pointers provide ownership semantics. What this means is that the unique pointer follows a well defined set of rules regarding the lifetime of its allocated resource. As the name implies, is the single owner of the resource. It cannot be copied and when the unique pointer object is destructed, it takes care of deallocating the resource it holds.

Oftentimes, you own more than one instance of a certain object. Unique pointers work very well together with the STL, so it's not uncommon to see some class own a , or any other container, with unique pointers.

Let's take the class as an example. It consists of a list of 's that are created elsewhere, for example by a factory responsible for initializing the appropriate subclass.

Now consider the situation where we want to expose the list of s to the user of the class. What would our API look like? Usually we would solve this by adding a getter which returns a (const) reference to the vector.

However, there's probably no reason to expose to the caller that 's are stored as unique pointers. Furthermore, in the non-const case, nothing prevents the caller from taking ownership of any and possibly leave them in a moved-from state in the vector. If you really do want to give up ownership, it's better to return the container by value and call on the container to prevent accidental user-after-moves.

A better approach would be to return a list of references to . By returning references rather than pointers, you make it clear that the caller is not responsible for managing 's lifetime. As an added benefit, the resulting container can be manipulated by any algorithm in the Standard Template Library as if it contains the objects itself. This can lead to a lot cleaner code compared to having to account for the unique pointer everywhere.

Of course nothing is free and transforming the list incurs the cost of iterating over the whole container and doing a memory allocation for each item. This is also the biggest drawback and a trade-off you'll need to consider. If the function is called often and the original container changes rarely, you might want to cache the results.

Rather than duplicating the logic for converting a container of unique pointers to references, we can make the code more generic so we can reuse it for any sequence container that takes a type and an allocator as a template argument. For s we can make the code a little more performant by pre-allocating space since we know the number of elements in advance.

While this is already better than a ad-hoc solution, creating a new container can be wasteful if it's not strictly needed. If all we need is iterators into the container, we can omit creating a new container completely.

Looking back at our original example, assume that we want to expose the vector of s via an iterator.

Once again we run into our original problem; we're exposing our clients to the fact that the objects are stored as unique pointers. We can remedy this by wrapping the iterators so that the elements are dereferenced in the iterator.

We can change the return type of and to s to make them behave as if they were iterators into a container of s, completely transparent to the fact that they are actually stored as pointers.

Unfortunately the unique pointer type still shows up in the type of the iterator. With a we could hide this fact too, as to not confuse the client.

Basically, what we have implemented now is Boost's indirect_iterator but for s. Although this might all seem a little convoluted at first sight, it has proven to be extremely useful in practice.|||

