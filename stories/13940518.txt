Django is a full-featured Python web framework for developing dynamic websites and applications. Using Django, you can quickly create Python web applications and rely on the framework to do a good deal of the heavy lifting.

In this guide, we will show you how to get Django up and running on an Ubuntu 14.04 server. After installation, we'll show you how to start a new project to use as the basis for your site.

There are a number of different ways in which you can install Django depending upon your needs and how you want to configure your development environment. These have different advantages and one method may lend itself better to your specific situation than others.

Some of the different methods are below:

With the above caveats and qualities in mind, select the installation method that best suites your needs out of the below instructions.

If you wish to install Django using the Ubuntu repositories, the process is very straight forward.

First, update your local package index with , and then install the package:

You can test that the installation was successful by typing:

This means that the software was successfully installed. You may also notice that the Django version is not the latest stable. To learn a bit about how to use the software, skip ahead to learn how to create sample project.

If you wish to install the latest version of Django globally, a better option is to use , the Python package manager. First, we need to install the package manager. Refresh your package index:

Now you can install . If you plan on using Python version 2, install using the following commands:

If, instead, you plan on using Python 3, use this command:

Now that you have , we can easily install Django. If you are using Python 2, you can type:

If you are using Python 3, use the command instead:

You can verify that the installation was successful by typing:

As you can see, the version available through is more up-to-date than the one from the Ubuntu repositories (yours will likely be different from the above).

Perhaps the most flexible way to install Django on your system is with the tool. This tool allows you to create virtual Python environments where you can install any Python packages you want without affecting the rest of the system. This allows you to select Python packages on a per-project basis regardless of conflicts with other project's requirements.

We will begin by installing from the Ubuntu repositories. Refresh your local package index before starting:

If you plan on using version 2 of Python, you can install by typing:

If, instead, you plan on using version 3 of Python, you can install by typing:

Once is installed, you can use it to install the package. If you installed the Python 2 , you can type:

If you installed the Python 3 version of , you should type this instead:

Now, whenever you start a new project, you can create a virtual environment for it. Start by creating and moving into a new project directory:

Now, create a virtual environment within the project directory by typing:

This will install a standalone version of Python, as well as , into an isolated directory structure within your project directory. We chose to call our virtual environment , but you should name it something descriptive. A directory will be created with the name you select, which will hold the file hierarchy where your packages will be installed.

To install packages into the isolated environment, you must activate it by typing:

Your prompt should change to reflect that you are now in your virtual environment. It will look something like .

In your new environment, you can use to install Django. Regardless of whether you are using version 2 or 3 of Python, it should be called just when you are in your virtual environment. Also note that you do not need to use since you are installing locally:

You can verify the installation by typing:

To leave your virtual environment, you need to issue the command from anywhere on the system:

Your prompt should revert to the conventional display. When you wish to work on your project again, you should re-activate your virtual environment by moving back into your project directory and activating:

If you need a development version of Django, you will have to download and install Django from its repository.

To do so, you will need to install on your system with . Refresh your local package index by typing:

Now, we can install . We will also install the Python package manager. We will use this to handle the installation of Django after it has been downloaded. If you are using Python 2, you can type:

If you are using Python 3 instead, you should type this:

Once you have , you can clone the Django repository. Between releases, this repository will have more up-to-date features and bug fixes at the possible expense of stability. You can clone the repository to a directory called within your home directory by typing:

Once the repository is cloned, you can install it using . We will use the option to install in "editable" mode, which is needed when installing from version control. If you are using version 2 of Python, type:

If you are using Python 3, type:

You can verify that the installation was successful by typing:

Note that you can also combine this strategy with the use of above if you wish to install a development version of Django in a single environment.

Now that you have Django installed, we can show you briefly how to get started on a project.

You can use the command to create a project:

This will create a directory called within your current directory. Within this, a management script will be created and another directory called will be created with the actual code.

Note: If you were already in a project directory that you created for use with the command, you can tell Django to place the management script and inner directory into the current directory without the extra layer by typing this (notice the ending dot):

To bootstrap the database (this uses SQLite by default) on more recent versions of Django, you can type:

If the command doesn't work, you likely are using an older version of Django. Instead, you can type:

You will be asked to create an administrative user as part of this process. Select a username, email address, and password for the user.

If you used the command above, you'll need to create the administrative user manually. You can create an administrative user by typing:

You will be prompted for a username, an email address, and a password for the user.

Once you have a user, you can start up the Django development server to see what a fresh Django project looks like. You should only use this for development purposes. Run:

Visit your server's IP address followed by in your web browser

You should see something that looks like this:

Now, append to the end of your URL to get to the admin login page:

If you enter the admin username and password that you just created, you should be taken to the admin section of the site:

When you are finished looking through the default site, you can stop the development server by typing in your terminal.

The Django project you've created provides the structural basis for designing a more complete site. Check out the Django documentation for more information about how to build your applications and customize your site.

You should now have Django installed on your Ubuntu 14.04 server, providing the main tools you need to create powerful web applications. You should also know how to start a new project and launch the developer server. Leveraging a complete web framework like Django can help make development faster, allowing you to concentrate only on the unique aspects of your applications.|||

Django is a full-featured Python web framework for developing dynamic websites and applications. Using Django, you can quickly create Python web applications and rely on the framework to do a good deal of the heavy lifting. In this guide, we will show