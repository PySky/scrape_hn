Runtyper protects you from silent type-mismatch operations in JavaScript. Include it into development build and it will notify your every time it detects potential type problem. Types are guessed by code itself. No manual annotations needed.

Imagine you have comparison and in runtime values are , . When executed you will get . In many cases this result is unexpected: you just missed type conversion. After applying Runtyper it will show warning when such situation happen:

or you can configure it to throw errors:

Runtyper wraps all type-important operations into function. When line executed, function checks argument types and returns original result.

 For example, before:

To configure plugin pass it to Babel as array:

You can exclude line from checking by special comment:

You can try Runtyper on existing project because no special annotations needed. Default configuration is rather strict. You can start with the softest:

The result can be something like this:

Static code analysis is also the way to perform type checking. For example, there is Flow from Facebook and TypeScript from Microsoft. You can use Runtyper together with them to detect errors on both pre-runtime and runtime stages.

Yet, static tools need extra efforts for:

Let's take an example from Flow's get started page:

But if is used to handle user's input from text field - error will not be found:

Runtyper allows to catch such cases in runtime:

Consider both approaches to make your applications more robust and reliable.

Why I get error for template literals like ?

 Likely you are using babel-preset-es2015 that transforms template literals into concatenation . And you get . You can fix it in several ways: consider using babel-preset-env as many browsers already have native support of template literals Why explicit comparings like or are not warned?

 When you explicitly write you assume that variable can be . Another thing is implicit compare of two variables . Here it depends on your app desing. If and are not nullable, you may want to get warnings. Otherwise you can set plugin options and to . Does it check non-strict equal and ?

 Nope. Just quote Douglas Crockford from JavaScript, the Good Parts: JavaScript has two sets of equality operators: and , and their evil twins and . The good ones work the way you would expect. If the two operands are of the same type and have the same value, then produces and produces . The evil twins do the right thing when the operands are of the same type, but if they are of different types, they attempt to coerce the values. The rules by which they do that are complicated and unmemorable.

 These are some of the interesting cases: The lack of transitivity is alarming. My advice is to never use and . Instead, always use and . Explicit is always better when magic, especially for readers of your code. You can set ESLint eqeqeq rule and forget about once and for all.

If you have other questions or ideas feel free to open new issue.|||

babel-plugin-runtyper - ⚡️ Runtime type checker for JavaScript