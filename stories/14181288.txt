Premature Oxidization is the root of all evil.

It might seem like watching grass grow, but programming languages, much like human languages, have lifetimes and a lifecycle. Mainstream languages will survive longer, but the cost payed is in mutation and loss of original structure. Once a language is used by more than say 1000 people, it starts to morph and change in ways that the original speakers did not foresee and certainly would not ordain.

New languages often form along language boundaries. When there is no common tongue among a fixed regional group, the community becomes a great nurturing ground for ad-hoc experiments in communication. In much the same way, programming languages evolve along the axis of features and idioms. Just because programming languages are banked by compilers does not guarantee that a language will not drift. Some good examples of half-way languages today are Node Javascript and Rust + Emscripten: the former is a web language that became native, and the latter is a native language that became web. People that live in a language’s ecosystem are constantly pushing the boundaries towards whatever goals they want to achieve.

However, what I want to talk about today is not growth of language, but rather death. Most languages are never used by more than 1000 people. Even languages that have upwards of 100,000 users are not guaranteed a long lifetime. Programming languages today see a rate of oxidation that far outpaces any spoken language in all of recorded history. The reason for this is simple, programming languages have not existed for more than 100 years and most of that time was spent in an extremely resource constrained environment. Nobody cares about semantic collisions when the entire project is bound by 640KB of ram.

Now that programming languages have burst out of the physical box and into seemingly everyone’s attention, as a community we need to think and reflect on what it means to build a stable community around a common set of linguistic principles. This work is necessarily cross-functional, touching on traditional descriptive linguistics, program language theory, and the social sciences. Nations now rise and fall, not on the common principle of stale politics, but within the dynamism of technology literacy. Those left behind are increasingly irrelevant to modern economies.

For the first time since the imagination of a mechanical calculator, the weight of technology is being developed not by an elite class for other peers, but rather pressed down upon the masses in the form of tech literacy. We stand at a crossroads where most people could not tell the difference between a word processor and an IDE, and despite this are measured closely by their ability to do so. With this increased relevance, those in the technology community aught to consider deeply what it means to make a supportive, accessible on-boarding process, and reach out to those willing with help. If nobody does so, in your community, then your community will be shunted. If you grab the opportunity, there are literally billions of potential users now.

Do, or don’t, the time is now. What language do you want to be speaking in 20 years?|||

It might seem like watching grass grow, but programming languages, much like human languages, have lifetimes and a lifecycle. Mainstream languages will survive longer, but the cost payed is in…