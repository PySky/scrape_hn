Warning: TypeDoc is still very much in development and there are definitely plenty of bugs.

TypeDoc aims to provide a static type checking without changing JavaScript. This is accomplished by adding type annotations via comments near declarations.

Take, for example, the following function to apply a transform to an input. There is an error in that is defined as a , yet is getting assigned a . TypeDoc aims to catch errors like this during static analysis rather than waiting until run time.

Still not sure? Check out the vs-code extension!

TypeDoc has a basic cli for testing files. You can run it like so. Note: type-doc must be compiled prior to running the CLI.

Simply add the , or , argument to also check for strictly functional, i.e.

Types are recognized as capitalized words, for example is a type. Types do not need to be existing types in the JavaScript system, type could be any capitalized word, for example, .

Function or method types are formatted as capitalized words separated by , for example, a function that tells you the color of a Jedi's lightsaber would have a type like this:

Unions are also allowed, for example, if you wanted to know who would win in a Jedi vs Sith fight, you could write a function with the signature

TypeDoc also allows Generic Types. Any word that does not begin with a capital will be considered a generic type. An example to get the apprentice associated with a certain Jedi or Sith lord could look something like:

Below you'll find a list of comment formats that TypeDoc recognizes.

Here's a highlights view of what TypeDoc can do so far. For a more complete list, please check out !|||

type-doc - Static type checking for pure JavaScript