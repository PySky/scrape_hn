One of the many benefits of using a clean architecture in Android is that it allows us to replace individual components of our app without having to touch the rest of the code (and everything breaking).

In this post I want to show how easy it is to change one networking library for another (Volley <-> Retrofit) when the networking logic is entirely contained within the network layer!

Something that I see too often for my liking are apps where the network logic sits alongside everything else in the Activity/Fragment.  Take for instance this example method from the  class:

There are many problems with this approach but they all generally mean that your code will become more and more difficult to maintain over time as any changes needed to one part of the code will have a ripple of side effects.

Ok lets start by taking our  above and making a first attempt at splitting the separate responsibilities out into their own layers.  We can then make further improvements afterwards.  For this example I will split it into the following layers:

View – This will be an interface which the Activity implements.  It is very dumb and has only two responsibilities.  Firstly displaying what the Presenter tells it and secondly passing any user input (clicks) to the Presenter.

This interface just has three methods to represent the Loading, Content & Error states (but there is no reason it can’t have more in a more complex app)

Our Activity now implements MainView and the three methods.  It no longer has any idea about where the data is coming from so we are free to change that in the future without changing this class at all.

Presenter – This will be a pure java class which implements the ‘business logic’ or our application.  It fetches the data from the model and formats it in a way that can be passed to the view for display.

Repository – This is an abstraction layer which sits between the Presenter and the model classes.  It allows us to hide the source of the data from the Presenter (which should neither know nor care).  In many cases it will simply pass the request onto the appropriate model class but it allows the flexibility to change the implementation at a later date without changing anything else

Model – In this simple example app there will be only one model type and that is the Http classes.  In more complex applications you would likely have models for database, shared prefs, cache, etc.

This is now much better however there are still some things I think we need to improve.  As you can see above I am passing the  result of the Retrofit request back to my Presenter.  This means that we are leaking implementation details of the network layer through our Repository and into the presentation layer.  On top of that we are leaking an external class from our network library causing more of our code than necessary to have a dependency on it.

To solve this problem we can create our own data transport class which we can use to pass the required data around our application.  Let’s define it as follows:

Now instead of our  class returning Retrofit’s  we can update it to return our own :

And update our  so that it no longer gives any indication of where the data is coming from:

With these changes complete the only class that now knows about the implementation of how we fetch the data from the network is our  model class.  This means that if at some point in the future we want to change which networking library we are using we only have to change the one class.  All the other layers down from Repository -> Presenter -> View will not know that anything has changed.

As an example we can change  to use Volley as follows:

Although, I think it’s much more likely that you’d want to migrate the other way!

By separating the code from being all together in  into its own distinct classes with defined responsibilities we have gained several advantages

The whole source for this project can be found at https://github.com/Jahnold/mvp-switch-network.  There are different branches for the different stages.|||

