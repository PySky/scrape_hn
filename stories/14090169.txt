Last week, my coworker Charlie asked what it would take to automatically detect and purge unused aphrodite styles in our codebase.

If asked 2 years ago, I probably would have gone with a regex and a string-munging python script, but I’d just spent the past few nights messing with babel plugins, and figured I could probably get pretty far with relatively little work. As it happened, I was impressed by how easy it was using the tools that babel provides.

As a bonus, it also works with React Native because they have the same API, and it could probably be extended to other libraries without too much work.

We’re making the guts of the stylecleanup tool, which finds & deletes unused styles in your JavaScript, and works with both aphrodite and React Native.

The style is unused, and we’d like to automatically detect that.

We’ll be using the libraries babylon and babel-traverse. The plugins section of @thejameskyle‘s babel-handbook is also an excellent reference.

We’ll look for the form

We’re going to use , which makes walking through the tree super easy.

It gives us a function, , that will walk through the whole AST, and call the visitors we specify corresponding to the type of a given node. To figure out what the types are (and what the shape of the AST is like), I lean on astexplorer.net and the Readme of babel-types.

So I go through every , which has the form , check if it looks like , and then process it. The function (that I’ll describe in a second) determines whether the current node looks like . I then grab all the members of the object that’s being passed to , discarding any that happen to be s or properties, and get the names that they’re being identified by. In our example file, would end up being .

refers to the variable name that this stylesheet is being bound to – in the example.

So at the end of this I have a list of the stylesheets that got created and assigned to a variable, and the style names within each stylesheet.

The argument I’m passing in is a that has many attributes, but the ones we care about are and , which are both nodes in our AST (again, refer to the babel-types Readme for more info).

actually makes this super easy for us, because it already tracks all variable references. We can just hang on to the object that it uses to collect references, and then iterate through them after traversal.

Now we iterate through our stylesheets, and take a look at the references.

In the example reference , the just points to the identifier, which is the reference to our stylesheet binding. We want to get the string , so we

Just for kicks, we can also get a list of styles that are referenced, but never defined!

To see the code in context, look at in the project.

For a real tool, there’s some more bookkeeping involved in|||

It's unexpectedly easy to do powerful analysis using the tools babel provides.