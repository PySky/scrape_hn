Welcome to another round-up of the latest news in DevOps, Agile and Continuous Delivery. In this week’s post, we dig into the more strategic side of DevOps. A piece of advice we learned is to continuously re-examine the processes and goals that make up your transformation strategy. Even those who have a solid DevOps transformation strategy in place may find that updating some tactics along the way could prove most beneficial. You’ve also likely heard that DevOps is about connecting people, tools and processes. While technology and tooling are important, it’s also vital to look at the people side of things and assess your team structure as well. Depending on if you have multiple groups within a team or a singular team working on development projects your DevOps strategy will likely be different. It can (and likely will) be challenging – hopefully the posts below help to make some more sense of it all!

Continue reading for more on the latest modern software delivery news and trends, and, as always, stay tuned to all the news coming from @ElectricCloud on DevOps and Continuous Delivery throughout the week.

Enterprise IT is changing at a rapid pace, and organizations must practice modern software development to remain relevant and competitive. One of the key trends embraced by tech teams is DevOps, combining development and operations teams to work in an agile fashion toward a shared goal.

There’s a new approach to application development trending today, and it’s a direct result of the huge growth we’re seeing in cloud and mobile technologies. Although this technique has a diminutive name, it has the potential to seriously disrupt the way enterprise IT develops applications in the future.

I have seen two common models of DevOps at work that have been effective at bridging the gap between development, operations and business outcomes. These aren’t set in stone and can vary in implementation from company to company. In the trunk and leaf model, every development team has a small group of engineers, or leaves, that are partially or wholly dedicated to creating and maintaining the platform for their service or feature.

I don’t believe in DevOps shaming. Our community seems compelled to correct use of DevOps as an adjective for tools, teams and teapots. The frustration is reasonable: DevOps clearly taps into head space for both devs and operators who see a brighter automated future together. For example, check out this excellent DevOps discourse by Cindy Sridharan.

It’s no secret that in order to fully adopt a DevOps culture, it requires acceptance of change from the C-level, down. The tricky part is that there is no roadmap or “step-by-step” guide to change a company’s culture, because every company is vastly different. A business can’t simply say, “Right now we’re going to start doing DevOps,” because so much of the change is cultural and requires an ongoing conversation to see the bigger picture.

Yes, empathy is a key to open source success, according to folks at Red Hat Summit 2017. The idea rests on the notion that while development speed is great and innovation is necessary — both hallmarks of open source work and modern app development, vendors said — programmers must also stay aware about how next-generation technology can affect users.

If your organization has already adopted a DevOps strategy, then congrats—you’re already strides ahead of other companies by choosing to invest in collaborative, productive approaches to advancing your project processes. However, as objectives and tasks within a project shift over time, your DevOps approach must remain fluid to adequately support the needs of your team and its multilayered practices and procedures.

Consider how much the role of the IT professional has changed during the last 10 years.  As traditional, siloed IT roles — such as network administrators, storage administrators, systems administrators, and database administrators — continue to include new responsibilities, IT professionals can no longer get by as specialists.

The rapid adoption of the Agile method and the software development and operations (DevOps) approach isn’t surprising. As anyone in our industry knows, the pressure to conduct system testing and quality with both speed and accuracy is a daily struggle. Employing Agile methodologies allows us to better address business and customer needs, while breaking through the challenges and limitations of traditional waterfall development.

Your testing team has made a considerable investment in developing automation infrastructure: writing the product integration code, the test hooks, a test case strategy, and the test scripts themselves, as well as doing all of the DevOps-related work having to do with continuous integration. And those are noble and valuable efforts. But based on my experience, many teams fail to get the maximum return on their investment in automated testing.|||

