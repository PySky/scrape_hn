Linux Audit has been part of the kernel since 2.6.(14?). The audit system consists of two major components. The first component is some kernel code to hook and monitor syscalls. The second bit is a userspace daemon to log these syscall events.

To demonstrate what we can do with auditd, let’s use an example. Say we want to log an event every time someone reads the file /data/topsecret.data. (Note: Please don’t store actual top secret data in a file called topsecret.data). With auditd, we must first tell the kernel that we want to know about these events. We accomplish this by running the userspace command as root with the following syntax:

Now, every time is accessed (regardless of whether it was via symlink), the kernel will generate an event. The event is sent to a userspace process (usually auditd) via something called a “netlink” socket. (The tl;dr on netlink is that you tell the kernel to send messages to a process via its PID, and the events appear on this socket.)

In most Linux distributions, the userspace auditd process then writes the data to . If there is no userspace process connected to the netlink socket, these messages generally appear on the console and can be seen in the output of .

This is pretty cool, but watching a single file is also a very simple case. Let’s do something a bit more fun, something network related.

Daemon processes (or rogue netcats, ahem) usually use the syscall to listen for incoming connections. For example, if Apache wants to listen for incoming connections on port 80, it requests this from the kernel. To log these events, we again notify the kernel of our interest by running :

Now, every time a process starts listening on a socket, we receive a log event. Neat! This logging can be applied to any syscall you like. If you want to handle the questions I mentioned at the top of this post, you’ll want to look at the syscall. If you want to watch every new process or command on a host, check out .

Supernote: We are not limited to the actions of users. Think about advanced cases like apache spawning `bash` or making an outbound connection to some sketchy IP and what that can tell you.|||

If you are are an engineer whose organization uses Linux in production, I have two quick questions for you: If you can answer both of these questions, fantastic! You can skip the rest of this blog…