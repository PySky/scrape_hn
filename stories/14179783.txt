This post is an attempt to reduce the number of times I need to explain things in Stack Overflow comments. You may well be reading it via a link from Stack Overflow – I intend to refer to this post frequently in comments. Note that this post is mostly not about text handling – see my post on common mistakes in date/time formatting and parsing for more details on that.

There are few classes which cause so many similar questions on Stack Overflow as . There are four causes for this:

The most important things to know about are:

Now, onto the details…

(just from now on) is a terrible type, which explains why so much of it was deprecated in Java 1.1 (but is still being used, unfortunately).

I could find more problems, but they would be getting pickier. That’s a plentiful list to be going on with. On the plus side:

Unfortunately even this one “good aspect” is poorly understood by developers. Let’s unpack it…

Note: I’m ignoring relativity and leap seconds for the whole of the rest of this post. They’re very important to some people, but for most readers they would just introduce more confusion.

When I talk about an “instant” I’m talking about the sort of concept that could be used to identify when something happened. (It could be in the future, but it’s easiest to think about in terms of a past occurrence.) It’s independent of time zone and calendar system, so multiple people using their “local” time representations could talk about it in different ways.

Let’s use a very concrete example of something that happened somewhere that doesn’t use any time zones we’re familiar with: Neil Armstrong walking on the moon. The moon walk started at a particular instant in time – if multiple people from around the world were watching at the same time, they’d all (pretty much) say “I can see it happening now” simultaneously.

If you were watching from mission control in Houston, you might have thought of that instant as “July 20th 1969, 9:56:20 pm CDT”. If you were watching from London, you might have thought of that instant as “July 21st 1969, 3:26:20 am BST”. If you were watching from Riyadh, you might have thought of that instant as “Jumādá 7th 1389, 5:56:20 am (+03)” (using the Umm al-Qura calendar). Even though different observers would see different times on their clocks – and even different years – they would still be considering the same instant. They’d just be applying different time zones and calendar systems to convert from the instant into a more human-centric concept.

So how do computers represent instants? They typically store an amount of time before or after a particular instant which is effectively an origin. Many systems use the Unix epoch, which is the instant represented in the Gregorian calendar in UTC as midnight at the start of January 1st 1970. That doesn’t mean the epoch is inherently “in” UTC – the Unix epoch could equally well be defined as “the instant at which it was 7pm on December 31st 1969 in New York”.

The class uses “milliseconds since the Unix epoch” – that’s the value returned by , and set by either the constructor or the method. As the moon walk occurred before the Unix epoch, the value is negative: it’s actually -14159020000.

To demonstrate how interacts with the system time zone, let’s show the three time zones mentioned before – Houston (America/Chicago1), London (Europe/London) and Riyadh (Asia/Riyadh). It doesn’t matter what the system time zone is when we construct the date from its epoch-millis value – that doesn’t depend on the local time zone at all. But if we use , that converts to the current default time zone to display the result. Changing the default time zone does not change the value at all. The internal state of the object is exactly the same. It still represents the same instant, but methods like , and will be affected. Here’s sample code to show that:

The output is as follows:

The “GMT” and “AST” abbreviations in the output here are highly unfortunate – doesn’t have the right names for pre-1970 values in all cases. The times are right though.

You don’t – because a doesn’t have a time zone. It’s an instant in time. Don’t be fooled by the output of . That’s showing you the instant in the default time zone. It’s not part of the value.

If your code takes a as an input, any conversion from a “local time and time zone” to an instant has already occurred. (Hopefully it was done correctly…)

If you start writing a method with a signature like this, you’re not helping yourself:

You don’t – because a doesn’t have a format. **Don’t be fooled by the output of . That always uses the same format, as described by the documentation.

To format a in a particular way, use a suitable (potentially a ) – remembering to set the time zone to the appropriate zone for your use.

1 I’m not 100% sure that America/Chicago is the best time zone ID to use to represent Houston, but it’s at least correct for the instant we’re interested in.|||

This post is an attempt to reduce the number of times I need to explain things in Stack Overflow comments. You may well be reading it via a link from Stack Overflow - I intend to refer to this post frequently in comments. Note that this post is mostly not about text handling - see…