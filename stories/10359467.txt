RefactoringMiner is a library/API written in Java that can detect refactorings applied in the history of a Java project.

Currently, it supports the detection of the following refactorings:

In order to build the project, run (or , in Windows) in the project's root directory. Alternatively, you can generate a complete distribution zip including all runtime dependencies running .

You can also work with the project with Eclipse IDE. First, run to generate Eclipse project metadata files. Then, import it into Eclipse using the Import Existing Project feature.

The code in package gr.uom.java.xmi.* has been developed by Nikolaos Tsantalis.

The code in package br.ufmg.dcc.labsoft.refactoringanalyzer.* and org.refactoringminer.* has been developed by Danilo Ferreira e Silva.

RefactoringMiner can automatically detect refactorings in the entire history of git repositories, or at specified commits. In the code snippet below we demonstrate how to print all refactorings performed in the toy project https://github.com/danilofes/refactoring-toy-example.git.

It is possible to analyze a specifc commit using instead of . The commit is identified by its SHA key, such as in the example below:

There is also a lower level API that works comparing the source code from two folders that contain the code before and after the code changes:

Note that by doing this you may get different results from the git history analysis, because the latter uses information from git to better identify moves and renames.

When you build a distributable application with , you can run Refactoring Miner as a command line application. Extract the file under in the desired location, and cd into the folder (or include it in your path). Them, run RefactoringMiner using the following syntax:

For example, supose that you run:

The output would be:

RefactoringMiner has been used in the following papers:|||

Contribute to RefactoringMiner development by creating an account on GitHub.