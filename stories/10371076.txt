Pipes is a thin wrapper around PHP SPL iterators and generators.

With Pipes, you can write code like this:

Unlike many collection libraries (such as underscore.php or Laravel's Illuminate/Collection) each step will be executed sequentially for each item. For instance, in the sample code above, only the first 101 even numbers would be printed (the 101th will reach each() but not be passed through limit())

Of course this is just the beginning.

The current feature set is pretty minimal. Below is a syntetic description of the current methods. Keep in mind they are all documented and available for your favorite IDE auto-completion.

p() values(); returns all the elements, reindexing the keys p( ) continueIf( ); continues as long as callback gives true p( ) stopIf( ); stops if the callback is true p( ) sleep( ); sleeps for $seconds seconds at each iteration p( ) map( ); sort of array_map. Take a look to the tests. p() files( ); uses \GlobIterator, accepts the same args

Here is a quasi real world example: a simple scraper that handles retries, failures, etc.

transform the single item array into an infinite stream of items consisting of the same context instance make sure not to loop more than 100 times, we don't need call some method to download the HTML of the page pass the HTML to some method to turn it into a database record perform some custom check or transformation if you wish dump every record to the screen or to your custom logger here is a sample logic for handling retries, failures and enumeration the beauty here is you keep all the state into a single external object that you can easily serialize and save somewhere. don't save the errors in the database save the record in the database sleep for 1.5 seconds to avoid bringing down the website Everything ok, isn't it? Notice than nothing happened yet. $pipe is now an aggregate iterator, which does not do anything until you cycle on it or you call toArray(); you can leave this empty or insert your custom logic here if you don't need logic, you may just run it with and if you do it again, it will run again :)|||

pipes - Fluent interface for PHP SPL Iterators