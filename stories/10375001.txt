Drake is a simple-to-use, extensible, text-based data workflow tool that organizes command execution around data and its dependencies. Data processing steps are defined along with their inputs and outputs and Drake automatically resolves their dependencies and calculates:

Drake is similar to GNU Make, but designed especially for data workflow management. It has HDFS support, allows multiple inputs and outputs, and includes a host of features designed to help you bring sanity to your otherwise chaotic data processing workflows.

If you like screencasts, check out this Drake walk-through video recorded by Artem Boytsov, Drake's primary designer:

Drake has been tested under Linux, Mac OS X and Windows 8. We've not tested it on other operating systems.

Drake installs itself on the first run of the shell script; there is no separate install script. Follow these instructions to install drake manually:

If you're on a Mac you can alternatively use Homebrew to install Drake:

Starting with Drake version 1.0.0, once you have Drake installed you can easily upgrade your version of Drake by running . The latest version of Drake will be downloaded and installed for you.

You can build Drake from source or run from a prebuilt jar. Detailed instructions

You can programmatically use Drake from your Clojure project by using Drake's Clojure front end. Your project.clj dependencies should include the latest Drake library, e.g.:

The JVM startup time can be a nuisance. To reduce startup time, we recommend using the way cool Drip. Please see the Drake with Drip wiki page.

The wiki is the home for Drake's documentation, but here are simple notes on usage:

To build a specific target (and any out-of-date dependencies, if necessary):

To build a target and everything that depends on it (a.k.a. "down-tree" mode):

To build a specific target only, without any dependencies, up or down the tree:

To force build a target and all its downtree dependencies:

By default, Drake will look for . The simplest way to run your workflow is to name your workflow file , and make sure you're in the same directory. Then, simply:

To specify the workflow file explicitly, use or . E.g.:

Use for the full list of options.

The wiki is the home for Drake's documentation.

A lot of work went into designing and specifying Drake. To prove it, here's the 60 page specification and user manual. It's stored in Google Docs, and we encourage everyone to use its superb commenting feature to provide feedback. Just select the text you want to comment on, and click Insert -> Comment (Ctrl + Alt + M on Windows, Cmd + Option + M on Mac). It can also be downloaded as a PDF.

There are annotated workflow examples in the demos directory.

There's a Google Group for Drake where you can ask questions. And if you found a bug or want to submit a feature request, go to Drake's GitHub issues page.

Please see the wiki page on async.

Drake has a plugin mechanism, allowing developers to publish and use custom plugins that extend Drake. See the Plugin wiki page for details.

Drake provides HDFS support by allowing you to specify inputs and outputs like .

If you plan to use Drake with HDFS, please see the wiki page on HDFS Compatibility.

Thanks to Chris Howe, Drake now has basic compatibility with Amazon S3 by allowing you to specify inputs and outputs like .

If you plan to use Drake with S3, please see the wiki doc on S3 Compatibility.

You can use Drake from your Clojure REPL, via . Please see the Drake on the REPL wiki page for more details.

Thanks to Lars Yencken, we now have Vim syntax support for Drake:

Also thanks to Lars Yencken, utilities for making life easier in Python with Drake workflows.

Courtesy of @daguar, an alternative approach to installing Drake on Mac OS X.

An epic knock-down-drag-out set of threads on Hacker News discussing the design merits of Drake

Distributed under the Eclipse Public License, the same as Clojure uses. See the file COPYING.|||

drake - Data workflow tool, like a "Make for data"