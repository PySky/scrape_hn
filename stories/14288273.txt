I've taught several university courses on software engineering over the years, and haven't been happy with any of them. Like most professors, I build these courses around team projects, and had students work in small groups to design, build, and test a sizeable (ish) piece of software. I realized after a couple of years, though, that students weren't actually learning what I wanted them to learn in these courses because:

If I ever teach undergraduates software engineering again, I'll create a course that could have exercises like these:

In order to tackle the last of these, students will need to figure out how to connect bug reports to commits, how to use code analysis tools to measure the sizes of methods, and how to operationalize "more likely" (does it mean "more likely per method", "more likely per line of code", or "more likely per commit"?). This knowledge, and the knowledge needed for the other questions, isn't more important than teamwork, but it's a lot more teachable in a standard classroom.

And learning it will do a lot both to help students succeed on real projects, and to raise standards in industry. I've spent the last few years teaching scientists how to program; what I've learned is, programmers have a lot to learn from scientists about how to figure out what's working and what isn't. If we start teaching that, we might finally deserve to call what we do "software engineering".|||

