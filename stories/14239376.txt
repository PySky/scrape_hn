Design Patterns are very popular among software developers. A design pattern is a well-described solution to common software problem.

Some of benefits of using design patterns are :

Java Design Patterns are divided into tree parts : Creational, Structural and Behavioral.

Creational design pattens provide solution to instantiate an object in the best possible way for specific situations. The basic form of object creation could result in design problems or add unwanted complexity to the design. Creational design patterns solve this problem by controlling the object creation by different ways. There are five creational design patterns that we will discuss on :

Singleton is one of the Gangs of Four Design patterns and comes in the Creational Design Pattern category. Singleton pattern restricts the instantiation of a class and ensures that only one instance of the class exists in the Java virtual machine. The singleton class must provide a global access point to get the instance of the class. Singleton pattern is used for logging, driver objects, caching and thread pool. Singleton design pattern is also used in other design patterns like Abstract Factory, Builder, Prototype, Facade etc. Singleton design pattern is used in core Java classes also, for example java.lang.Runtime , java.awt.Desktop.

To implement Singleton pattern, there are really many approaches but all of them have following common concepts:

We'll implement the thread safe one here. Classes are in the package ;

Factory design pattern is used when we have a super class with multiple sub-classes and based on input, we need to return one of the sub-class. This pattern take out the responsibility of instantiation of a class from client program to the factory class. Letâ€™s first learn how to implement factory pattern in Java and then we will learn its benefits and we will see its usage in JDK.

Here's what we have in image :

This pattern provides some advantages such as :

As examples of its implementation in JDK we have :

This is one of the Creational Pattern and almost similar to Factory Pattern except the fact that it's most like Factory of factories. If you're familiar with factory design pattern in java , you'll notice that we have a single Factory class that returns the different sub-classes based on the input provided and the factory class uses if-else or switch statement to achieve this. Like our factory pattern post, we will use the same super class and sub-classes. Codes are available in . Here's the implementation of the test class:

Builder pattern is a creational design pattern as Factory Pattern and Abstract Factory Pattern. This pattern was introduced to solve some of the problems with Factory and Abstract Factory patterns when the Object contains a lot of attributes. This pattern deals with a static nested class and then copy all the arguments from the outer class to the Builder class. The sample code where we have a Computer class and ComputerBuilder to build it are available in the package . Here's a test program showing how to use Builder class to get object.

There are really various implementations of this pattern in JDK : java.lang.StringBuilder#append() (unsynchronized) java.lang.StringBuffer#append() (synchronized) .

Prototype pattern is one of the Creational Design pattern, so it provides a mechanism of object creation. Prototype pattern is used when the Object creation is a costly affair and requires a lot of time and resources and you have a similar object already existing. So this pattern provides a mechanism to copy the original object to a new object and then modify it according to our needs. This pattern uses Java cloning to copy the object.

Here's the program that will show the benefit of the Prototype pattern usage.

Structural Patterns provide different ways to create a class structure, for example using inheritance and composition to create a large object from small objects.

This pattern is used in such a way that two unrelated interfaces can work together. The object that joins these unrelated interfaces is called Adapter. As a real life example, we can think of a mobile charger as an adapter because mobile battery needs 3 Volts to charge but the normal socket produces either 120V (US) or 240V (India). So the mobile charger works as an adapter between mobile charging socket and the wall socket. First of all we'll have two classes : Volt - to measure volts) and Socket :

Now we want to build an adapter that can produce 3 volts, 12 volts and default 120 volts. So first of all we will create an adapter interface with these methods.

while implementing this pattern, there are two approaches : one that deals with inheritance and another one that deals with Composition. Note that they are almost the same thus, here we'll deal with one with inheritance. Let's implement out adapter class !

Now let's see how all this work ! Here's a test Main function to illustrate.

This pattern has many usage in the JDK :|||

Java-design-patterns -  Java Design patterns.