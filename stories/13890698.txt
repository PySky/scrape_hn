Thank you for your comment

Lisp is a lan­guage most pro­gram­mers have heard of, for two rea­sons. First, it’s one of the old­est com­puter lan­guages, in use since 1958. Sec­ond, it’s accrued a rep­u­ta­tion as a lan­guage for braini­acs. Orig­i­nally this rep­u­ta­tion arose from its asso­ci­a­tion with the field of arti­fi­cial intel­li­gence. Since then, this rep­u­ta­tion has been main­tained by peri­odic endorse­ments from respected pro­gram­mers (lat­terly, Eric Ray­mond and Paul Gra­ham) and the endur­ing fame of the text­book used in intro­duc­tory com­puter-sci­ence courses at MIT, Struc­ture and Inter­pre­ta­tion of Com­puter Pro­grams (which uses Scheme, and that one I did read start to fin­ish).

Pop­u­lar pro­gram­ming lan­guages aren’t nec­es­sar­ily good—look what’s at the top of that list.  + [JavaScript] has a lot of stu­pid in it … The good parts of [JavaScript] go back to Scheme and Self.

—Bren­dan Eich, here and here But unpop­u­lar lan­guages often have fatal flaws that pre­vent wider adop­tion. As I was con­sid­er­ing lan­guages, Racket had a lot to rec­om­mend it. But was there a fatal flaw I was over­look­ing? And by com­mit­ting to a Lisp, would I be paint­ing myself into a cor­ner? I wanted to under­stand the risks and ben­e­fits.

For exam­ple, in his essay How to Become a Hacker, Eric Ray­mond says “Lisp is worth learn­ing for … the pro­found enlight­en­ment expe­ri­ence you will have when you finally get it. That expe­ri­ence will make you a bet­ter pro­gram­mer for the rest of your days, even if you never actu­ally use Lisp itself a lot.” Unfor­tu­nately Ray­mond doesn’t fol­low up this claim by describ­ing the “enlight­en­ment expe­ri­ence,” nor why it’s “pro­found,” nor how it will improve your pro­gram­ming skills gen­er­ally.

I was hope­ful when I opened Peter Seibel’s Prac­ti­cal Com­mon Lisp and saw that the intro­duc­tion was sub­ti­tled “Why Lisp?” Yes, tell me! Seibel echoes Gra­ham’s claim: “You’ll get more done, faster, using [Lisp] than you would using pretty much any other lan­guage.” OK, but how? Seibel won­ders whether “I like Lisp because of some quirk in the way my brain is wired. It could even be genetic, since my dad has it too.” That’s not encour­ag­ing to those of us out­side your fam­ily. Ulti­mately, he sums up the appeal of Lisp by describ­ing it as “the pro­gram­ma­ble pro­gram­ming lan­guage.” But I’ve never used a pro­gram­ma­ble pro­gram­ming lan­guage. Why should I start?

Seibel is pass­ing the buck when he says that to under­stand the ben­e­fits of Lisp, “you’re going to have to learn some Lisp and see for your­self.” Sure, this method works—using Racket for a few months finally made the ben­e­fits of Lisp clear to me. But it also required an invest­ment of about 100–200 hours.  + For more on the per­ils of tax­ing reader patience, see why does typog­ra­phy mat­ter in Prac­ti­cal Typog­ra­phy.|||

