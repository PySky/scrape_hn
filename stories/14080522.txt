Not so long ago, John Hughes presented a module called Aaargh!! to the erlang-questions mailing list. He showed how parse transforms, macros and the Erlang compiler all worked together to mess up with us a bit. I’ll just present that very same story here. If you have read it already, you can safely skip the rest of the article.

This is basically the module that John sent to the mailing list (I changed its name just so it’s easier to avoid the apostrophes)…

The idea is that we first define the PLEASE_DONT macro in a line that we can later comment out if needed (or rather remove and define the macro at compile time).

Then, if the macro is not defined, we run the code through a parse transformation called undefined_parse_transform. The key point here is that this parse transformation module doesn’t exist, so this line should not compile.

But the macro is defined, so the parse transform should not be used, right?

Turns out that macro is not defined. As Alex points out in the mailing list…

As you can see in the docs:

If we change the define line in our code…

That’s it, right? Well… not so easy. If there is no one-argument define(), then why did the compiler/parser not warned us about it. Check this out:

If we try to compile that module…|||

Not so long ago, John Hughes showed a module called Aaargh!! to the erlang-questions mailing list. How parse transforms and macros and the Erlang compiler all worked together to mess up with us.