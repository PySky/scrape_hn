… and combines rather well with that other game-changing library I like, Numba.

I’ve lamented before that function calls are expensive in Python, and that this severely hampers many functions that should be insanely useful, such as SciPy’s .

To illustrate this, let’s look at image erosion, which is the replacement of each pixel in an image by the minimum of its neighbourhood. has a fast C implementation, which serves as a perfect benchmark against the generic version, using a generic filter with as the operator. Let’s start with a 2048 x 2048 random image:

and a neighbourhood “footprint” that picks out the pixels to the left and right, and above and below, the centre pixel:

Now, we measure the speed of and . Spoiler alert: it’s not pretty.

As you can see, with Python functions, is unusable for anything but the tiniest of images.

A few months ago, I was trying to get around this by using Numba-compiled functions, but the way to feed C functions to SciPy was different depending on which part of the library you were using. used ctypes, while used s or s, depending on your Python version, and Numba only supported the former method at the time. (Plus, this topic starts to stretch my understanding of low-level Python, so I felt there wasn’t much I could do about it.)

Enter this pull request to SciPy from Pauli Virtanen, which is live in the most recent SciPy version, 0.19. It unifies all C-function interfaces within SciPy, and Numba already supports this format. It takes a bit of gymnastics, but it works! It really works!

First, we need to define a C function of the appropriate signature. Now, you might think this is the same as the Python signature, taking in an array of values and returning a single value, but that would be too easy! Instead, we have to go back to some C-style programming with pointers and array sizes. From the documentation:

This function also accepts low-level callback functions with one of the following signatures and wrapped in scipy.LowLevelCallable: The calling function iterates over the elements of the input and output arrays, calling the callback function at each element. The elements within the footprint of the filter at the current element are passed through the buffer parameter, and the number of elements within the footprint through filter_size. The calculated value is returned in return_value. user_data is the data pointer provided to as-is. The callback function must return an integer error status that is zero if something went wrong and one otherwise.

So, we need a Numba cfunc that takes in:

The Numba type names are listed in this page. Unfortunately, at the time of writing, there’s no mention of how to make pointers there, but finding such a reference was not too hard. (Incidentally, it would make a good contribution to Numba’s documentation to add to the Numba types page.)

So, armed with all that documentation, and after much trial and error, I was finally ready to write that C callable:

The only other tricky bits I had to watch out for while writing that function were as follows:

Ok, so now what you’ve been waiting for. How did we do? First, to recap, the original benchmarks:

And now, with our new Numba cfunc:

That’s right: it’s even marginally faster than the pure C version! I almost cried when I ran that.

Higher-order functions, ie functions that take other functions as input, enable powerful, concise, elegant expressions of various algorithms. Unfortunately, these have been hampered in Python for large-scale data processing because of Python’s function call overhead. SciPy’s latest update goes a long way towards redressing this.|||

... and combines rather well with that other game-changing library I like, Numba. I've lamented before that function calls are expensive in Python, and that this severely hampers many functions that should be insanely useful, such as SciPy's ndimage.generic_filter. To illustrate this, let's look at image erosion, which is the replacement of each pixel in…