Que is a job processing library backed by , a distributed real-time database that comes with Erlang / Elixir. That means it doesn't depend on any external services like for persisting job state. This makes it really easy to use since you don't need to install anything other Que itself.

Add to your project dependencies in :

and then add it to your list of :

Que runs out of the box, but by default all jobs are stored in-memory only. To persist jobs across application restarts, specify the DB path in your :

And run the following mix task:

This will create the Mnesia schema and job database for you. For a detailed guide, see the Mix Task Documentation. For compiled releases where is not available see this.

Que is very similar to other job processing libraries such as Ku and Toniq. Start by defining a with a callback to process your jobs:

You can now add jobs to be processed by the worker:

The argument here can be any term from a Tuple to a Keyword List or a Struct. You can also pattern match and use guard clauses like any other method:

By default, all workers process one Job at a time, but you can customize that by passing the option:

The worker can also export optional and callbacks that handle appropriate cases.

Head over to Hexdocs for detailed documentation.

This package is available as open source under the terms of the MIT License.|||

que - :zap: Simple Job Processing in Elixir with Mnesia