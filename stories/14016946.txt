Allow you to pluck deeply into nested associations without loading a bunch of records.

And DRY up your code when using #as_json.

Add this line to your application's Gemfile:

Or install it yourself as:

And the following #as_json example:

It works as expected, but is not very DRY, repeat writing , , so many times.

You could refactor it with #deep_pluck like:

In that faster than #as_json, or #select.

The following is the benchmark test on 3 users, 6 posts, where table have 14 columns and have 6 columns. As it shows, is 4x faster than .

The following is the benchmark test on 10000 users, where table have 46 columns. As it shows, is 40x faster than and 4x faster than .

After checking out the repo, run to install dependencies. Then, run to run the tests. You can also run for an interactive prompt that will allow you to experiment.

To install this gem onto your local machine, run . To release a new version, update the version number in , and then run , which will create a git tag for the version, push git commits and tags, and push the file to rubygems.org.

Bug reports and pull requests are welcome on GitHub at https://github.com/khiav223577/deep_pluck. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the Contributor Covenant code of conduct.

The gem is available as open source under the terms of the MIT License.|||

deep_pluck - Allow you to pluck deeply into nested associations without loading a bunch of records. And DRY up your code when using #as_json.