With the introduction of containers, bricks can be put over glass, and chemicals can be stored next to food. Cargo of the various size can be put inside a standardized container that can be loaded/unloaded by the same vehicle.

Back in the days, transportation companies faced the following challenges:

Let’s go back to containers in software development.

When you develop an application, you need to provide your code alongside with all possible dependencies like libraries, web server, databases, etc. You may end up in a situation when the application is working on your computer but won’t even start on stage server, dev or a QA’s machine.

This challenge can be addressed by isolating the app to make it independent of the system.

Traditionally virtual machines were used to avoid this unexpected behavior. The main problem with VM is that “extra OS” on top of the host operating system adds gigabytes of space to the project. Most of the time your server will host several VMs that will take even more space. And by the way, at the moment most cloud-based server providers will charge you for that extra space. Another significant drawback of VM is a slow boot.

Docker eliminates all the above by simply sharing OS kernel across all the containers that are running as separate processes of the host OS.

Keep in mind that Docker is not the first and not the only containerization platform. However, at the moment Docker is the biggest and the most powerful player on the market.

The list of benefits is the following:

Docker’s native platform is Linux, as it’s based on features provided by Linux kernel. However, you can still run it on macOS and Windows. The only difference is that on macOS and Windows Docker is encapsulated into a tiny virtual machine. At the moment Docker for macOS and Windows has reached a significant level of usability and feels more like a native app.

Moreover, there a lot of supplementary apps such as 

Kitematic or Docker Machine which help to install and operate Docker on non Linux platforms.

You can check the installation instructions here. 

If you’re running Docker on Linux you need to run all the following commands as root or you can add your user to docker group and re-login:

It’s time to run your first container:

Let’s try to create an interactive shell inside Docker container:

If you want to keep container running after the end of the session, you need to daemonize it:

Let’s see what containers we have at the moment:

The ps shows us that we have two containers:

Note: there is no second container (the one with interactive shell) because we set — rm option. As a result, this container is automatically deleted right after execution.

Let’s check the logs and see what daemon container is doing right now:

Let’s make sure that the container has stopped.

The container is stopped. We can start it again:

Let’s ensure that it is running:

Now let’s stop it again and remove all the containers manually:

To remove all containers we can use the following command:|||

Docker is an open source tool that automates the deployment of the application inside software container. 
The easiest way to get the idea behind Docker is to compare it to, well… standard shipping…