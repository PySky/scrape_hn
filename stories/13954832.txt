I spent a long weekend in the Peak District in the UK - a breathtaking National Park.

Let's start at the finished product and work backwards to the PiZero camera and Docker.

This is the video created from 4 days worth of still images captured every 1 minute. Photos are only taken between a set time-range to preserve space on the SD card. The size of the images is around 2MB each - so we're looking at roughly 1.3GB per day.

Please follow me on Twitter and Subscribe on YouTube for more hacks, tutorials and projects.

I'll now give an overview of the software and hardware used followed by the tutorial.

I expect most people reading may have a Pi or a Pi Camera, but if you don't here's a full bill of materials:

This does start to add up (about 45-50 GBP), but most of these components have been around so long that you probably won't have to buy everything new.

I used a Raspberry Pi ZeroW which has built-in WiFi and Bluetooth without the need for additional dongles.

Mounting the Pi Zero can be hard - the new PiZeroW has a case lid that can mount a camera, but it is awkward to position for a photography through a window.

I opted for the ZeroView product by ThePiHut which mounts neatly onto a window facing outwards. It is quite brittle, so be careful not to apply too much force when sticking it onto windows.

I've learnt the hard way that power sockets are not always where I'd want them to be, so I came armed with a thick gauged USB cable and 3A 5V power supply. This meant I could just about reach the best window overlooking the old millpond.

The PiZero needs a different cable to attach to the Raspberry Pi camera. Here are some pictures to show you which way around to connect the components:

I used a 16GB class 10 Samsung EVO SD card - this would give me plenty of space for a long weekend at around 1.3GB / day.

The new Zero has built-in WiFi so you can benefit from plugging in a nano-sized USB pen-drive while still having connectivity.

We'll now run through the software used and configuration needed to power the photo capture.

I'm using a Python project called phototimer - it orchestrates the command-line which is bundled with Raspbian.

You can use to take a series of photos but by using Python I was able to add some key features:

Photos for 9am on the 8th of March 2017.

No extra dependencies are required other than Python and Raspistill. I'm also going to bundle the software with Docker.

Edit: an experimental version is also available using the picamera library.

You can run phototimer on Raspbian Lite with Python installed, but bundling with Docker means:

No need to log in with SSH when you come to a new location. The time-lapse will restart.

No need to for each device - just pull down the Docker image, enable the camera interface and run a container.

Docker will maintain your logs and allow you to re-attach to the container at any time.

I created the video with a Mac and the iMovie app. Simply follow these instructions:

Now export your video as a file and upload to YouTube or Vimeo etc.

A few folks suggested editing or compiling video on the Pi Zero itself. I would not recommend going down this route due to memory and CPU constraints. For ad-hoc / occasional timelapses you will get a better experience and more timely result editing with a laptop or PC.

Linux does have video/image-processing tools - checkout 

 projects like aconv (part of libav) or ffmpeg. These could be used with a more powerful PC/laptop for generating a video from your still photos.

Before powering up make sure you've plugged in the Raspberry Pi camera.

After logging into the Raspberry Pi for the first time enable the camera interface.

Type in then head over to "Interfacing Options" and enable the camera interface, then reboot the Pi.

Now install Docker with the following two commands:

Make sure you change the password for the account by typing in:

If is not available then install it with .

You can customise your time-lapse by editing the file.

By default the time-lapse begins at 4am and finishes at 8pm - so you will probably want to change this to suit your needs.

Surprisingly a quality level of 35/100 is still very clear and results in a much smaller image than 60-80/100. You can tweak the file and calculate how much disk space you need.

Depending on how you've mounted your camera you may need to flip the image around Horizontally or Vertically. Just put or on either - these are case-sensitive.

You can tweak the height and width - which can be useful if you need a certain aspect ratio. I use the default value.

When Docker runs a build it will creates an image from the code in the current directory and a selected base image such as Debian or Alpine Linux. If you want to know more see the Dockerfile here.

The main thing is that everything our program could need is included in the image we build right here.

Here are a few shortcuts and CLI commands that are useful for beginners:

This is what the options mean:

By default the Docker container will run in the UTC timezone. Your daylight hours will be calculated according to that timezone, so if you live somewhere else you will want to override it.

You can tune into your local timezone with the following extra parameter to for London:

So for a time-lapse in Austin, USA (CDT) you'd have something like this:

8. Copy the files back to your laptop

After you've taken a few snapshot you can download them to your laptop like this:

If you're using Windows then you can install Git for Windows and this will provide the and commands.

If you want to take your new rig away with you like I did above then you will need a way of connecting to the device when away from your WiFi router. Here are a few suggestions:

All versions of the Pi Zero support networking over USB which is very easy to setup and won't interfere with your WiFi connection. You will need to take a USB cable with you - then you can use this in each new location to edit the WiFi SSID/password on the Zero directly.

As long as you have an SD card reader handy when travelling you can drop a new wpa_supplicant.conf file into /boot by plugging in the SD card. This will be copied over the current configuration on the next boot.

If you're a confident Linux user you can follow a guide using the package to make the RPi its own hotspot. This means you can connect to the RPi from anywhere but you won't have any internet access.

Or if you're not going to use the rig away from your usual location, then setup your regular WiFi SSID and password and connect as needed over WiFi to start/stop the timelapse capture and to download files.

This completes the tutorial steps, you can now have everything you need to create your own videos:

Please follow me on Twitter and Subscribe on YouTube for more hacks, tutorials and projects:|||

Learn how to create a portable timelapse rig with your Raspberry Pi and Docker. Capture sunrise and sunset from your hotel room or your pets while at work