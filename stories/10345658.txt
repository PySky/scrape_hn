Khronus is an open source, distributed and reactive time series database designed to store, retrieve, analyze and process a large amount of custom metrics.

Written in Scala, it is based on the great HdrHistogram by Gil Tene and relies on both and to scale and be resilient.

It is intended to be fast to query metrics and perform aggregations without losing precision even in the presence of a lot of samples.

Khronus is being actively developed. It is being used in production at Despegar.com. We are currently finishing details for the first stable and public Khronus release.

The best way to start playing with Khronus is launching our khronus-docker container on a test environment, posting some metrics and doing some graphs trough Grafana. Follow the instructions here.

Go to releases and download the last stable version.

Khronus requires Cassandra 2.x. For installation read the official documentation

The main config file for overriding properties is located at . Some useful configurations:

As with any query language, you can select the fields you want to see in the resulted graph. Your query can project:

Many metrics are supported in queries. They can have an alias. If you are projecting an operation, metrics must have an alias to refer to.

If you don't specify which metric your function refers to, the result is one series with the function for each specified metric:

You can use regular expression in order to match metrics. If the regex matches more than one metric, you can't use an alias (So you can't project operations). The following query will return a series with the count per each metric that matches the regular expression

You can filter data using the following keywords: "where", "time", "between", "and" and the operators: >, >=, <, <=

The time series "from" is always required. You can use > or >=

The time series "to" is not required, but you can use < or <=

As shown in the examples, in order to specify times you can use the function now() with some modifiers to substract seconds (s), minutes (m), hours (h), days (d) or weeks (w). Besides that, you can specify a timestamp like this:

Another example, using between

This clause is always required because it defines the granularity or resolution of the response. If you don't use a valid configured window, it will be adjusted to the nearest configured window (or to the best window given the maximum and the minimum resolution configured).

The clause is 'group by time(n suffix)', where n is a number and suffix is s (seconds), m (minutes) or h (hours):

As we said, even if you use a valid configured window the result resolution could be adjusted depending on the maximum and minimum resolution configured. If you don't want this behavior you can use the 'force' keyword. But take in account that it could be a slow operation if you are querying a large period of time with a high resolution:

is open to the community to collaborations and contributions

YourKit, LLC is the creator of YourKit Java Profiler and YourKit .NET Profiler, innovative and intelligent tools for profiling Java and .NET applications.|||

khronus - A reactive time series database