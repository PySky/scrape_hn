What impact did agile have on the quality of enterprise software? In this podcast, a pragmatic programmer weighs in.

Andy Hunt—co-author of the Pragmatic Programmer and one of the authors of the Agile Manifesto—talks in our second episode of the “Everybody Hates Enterprise Apps” series about how the old bureaucratic ways of enterprise development inevitably led to poor quality software. This leads to a tale of how the Agile Manifesto came to be and why they wrote it. “The seventeen of us, we all had similar experiences with occasionally disastrous projects,” he says and describes specific examples.

He explains how agile methods can help produce better software but how it has to change to handle the demands for scalability. “There’s a lot of conversation around agile saying, ‘Hey, this worked absolutely great for small teams. Now, we wanna scale it.’ Instead of having three or four really good expert developers and folks learning from them in a small team, now you wanna go to 10,000 novices that you just hired.”

He then introduces the next phase of agile: the GROWS method. GROWs goes beyond just software engineers and takes in the whole organization. “So, all this uncertainty all comes down to the idea of taking small bites, small batches, having continuous delivery, and thinking of it as an experiment.”

Other topics that Andy covers include the surprising success of the Pragmatic Programmer, software development versus mass production, where enterprise apps fail us, how linear approaches don’t always work for large projects with large teams, why sprints only tackle part of the problems of building enterprise software, and more. And, yes, there’s a Twinkie in there.

You can also read the article based on our interview with Andy .|||

Andy Hunt - co-author of the Pragmatic Programmer - talks about how the old bureaucratic ways of enterprise dev inevitably led to poor quality software.