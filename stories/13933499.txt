Manual and tutorial for PC/PSP/PSVita/Pocketchip can be fetch here : https://github.com/farvardin/picoloop-manual

Picoloop is a synth and a stepsequencer (a clone of the famous nanoloop). The step sequencer play 4 tracks simultaneously, by default each track are 16 steps long, you can set the track to be up to 128 steps. Each track has a synthengine which can be a Virtual Analog, a Drum Synth, a FM synth. Each of the step can be edited on the 4 tracks. So for example, you can set a C4 note on step 0, nothing on step 1 and 2, then a D+5 on step 3 until the step 15.

A pattern of 16 steps is played repeatedly while these notes can be edited in various respects like volume, pitch, filter, lfo etc. All parameters are set step-wise, so you can make huge variation of sound on the same pattern. Each channel's patterns can be saved to file slots and are then available for new combinations. Finally, saved patterns can be arranged in a song structure.

Besides the song editor and manual loading of patterns, there are 3 different ways to modify each channel's patterns so that they form longer structures:

Picoloop is targeted for linux/SDL compatible system. It uses SDL to render graphics. It uses RtAudio or SDL to render audio out. It uses RtMidi to send and receive midi message, today only clock

There is two pane :

On the 16 boxes, there is a moving cursor which displays the current played step. And another cursor which displays the current selected step. There is a text menu, which allows you to select channel and edit parameter. All notes in the sequencer can be edited simultaneously.

The menu mode changes the selected textual menu at the bottom of the screen. This allows you to choose what kind of parameter you want to change, for example, the NOTE, the OSC, the Filter... In menu mode, when you press left/right, it changes the textual menu in the bottom of the screen

The edit mode changes the current step on the 16 steps display. In edit mode, when you press left/right, it changes the current step in the sequencer.

The menu 1 is the first menu. It allows to modify the parameter of the synthengine of the current track. Each synth engine has different kind of parameter.

Here is the global overview of the most common parameters you will find by synth engine.

The menu 2 is a more general menu. You can:

The top menu shows the tracks and patterns.

You can clone a track by loading it into memory, then saving it to another track.

The menu below (song position) allows you to order your tracks. You can enter it with Start key.

Every pattern is stored in the bank/bankXXX/file so if you backup this directory you should be fine.

You can write pattern on OpenDingux and push it on your laptop, unfortunately, it could sound little different. The OpenDingux a320 lack FPU so every thing is done in fixed point. On PC and PSP it's done in floating point...

You won't be able to push pattern from PC to PSP/Opendingux, it could work but it depend if the Machine is available on the PSP. Today ( picoloop 0.75c ) only Picosynth, Picodrum, DBopl and PBSynth are available on slower platform : PSP, opendingux.

The combo Select+UP, Select+Down allow you to raise or decrease the internal volume of the apps

If you plug on Windows/Linux a midi cable you can use it with midi sync in or midi sync out. The MMC message ( "play", "stop" ) are received by picoloop, but it doesn't transmit this kind of message. It understand the "stop" and "play" MMC message.

You can use midi delay to fine tune the sync between midi hardware and picoloop software.

The MDA Drum synth works with file patch ".ds" file. So if you have a laptop with a harddrive which is not an ssd, you should work with a PSU and not the battery to avoid disk spinning down. The automatic disk shutdown will block audio for 10ms and it became really audible. Will be fixed in a latter version.

This section describes the dependency for building picoloop. On most platform in 2016, you will need this kind of package.

You can always update to the lastest source. But, you should then switch to a tag.

Tag are safier. And today, there is a known issue, the build of PatternPlayer need two build. The issue come from the "mkdir" which is launch after the other command, so every thing seem to fail on the first make... Unfortunately I have not fixed this issue because you fall into this issue only when cloning the software from the repo.

You have to build it on the pocketchip.

You have to build it directly on the raspberry. If you have a raspberry 2 or 3, you should go to the "debian" section. This build type is a light version like the opendingux one.

On debian you need the /opt/opendingux-toolchain/ directory. you can fetch fetch it there : http://www.treewalker.org/opendingux/

On debian you need the /opt/open2x/ directory. you can fetch it there : http://wiki.gp2x.org/articles/i/n/s/Installing_the_Open2x_toolchain.html I don't have build it month ago, so at your own risk.

On debian, you need the mingw32 package. Picoloop provide the header and binary for SDL 1.2 on windows. So here it is a "cross build" you build on linux for windows.

you need to have the sdk, the toolchain and the external lib. All can be fetched here : https://github.com/pspdev

Depending on the current menu selected : A/R, OSC, VCO, BPM, LS, etc.

Depending on the current menu selected : A/R, OSC, VCO, BPM, LS, etc.

file named dataP<%d>T<%d>.pic store information about saved pattern. This file will be created when you store file in the "L/S" menu.

You need two file font.bmp and font.ttf which are located next to the source.

You need your psp gcc compiler, the library and psplinkusb.

If you want to launch PatternPlayer.prx, launch it with pspsh : ./PatternPlayer.prx In this case, you need the prx file ( not an elf or EBOOT.PBP ).

If you want to debug it with psp-gdb, you can do it by this command in two different window.

In this case you need a prx and an elf file.|||

Contribute to picoloop development by creating an account on GitHub.