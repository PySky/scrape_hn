You can follow this article with the related Github repository.

During a mission I did at Theodo, I worked on a security issue about controlling the access to an application.

 It included changing NGINX and Apache configurations.

When the issue was discovered, we tried to fix it directly on the production environment and we failed.

 If you’re trying to make a change directly on the production environment, it probably won’t work and will break the application. You need to test it first.

I want to restrict access to my NGINX server so that the client can’t access the NGINX server directly.

To solve this problem, I want to simulate the Proxy and the NGINX servers. I can either:

The cluster solution is very bad because it won’t work locally, and it costs money. The second solution is better but virtual machines are not easy to configure as a local network, and they take a lot of computing ressources, as the whole OS is running.

In contrast, Docker is a convenient tool to run several containers (which take a small computing ressource) and simulate a network of independent servers.

This part requires docker-compose. It is a tool that creates several Docker containers with one command.

The block means that the will start before .

It links the ports like this:

Link the log files in your :

It links directories or single files like this:



You can now monitor the logs in your editor at and , or using .

This will launch the service instead of the service when you start this container.

The at the end means read only for the container. In other words, you can only edit this file/directory outside the container.

The solution to my problem is to enable SSL Client Authentication on the NGINX server, in order to allow only the requests coming from the proxy server:

Using the “fail & retry” process, I found the correct configuration:

The important part of the configuration I discovered is the following:

You can reproduce it by cloning my repo: Client-SSL-Authentication-With-Docker and running .

If you request directly the NGINX server (https://localhost/), you get a 400 error, but if you request the Proxy server (https://localhost:9443/), you can access the sensitive data.

When repairing this security vulnerability using Docker, I was able to:

You liked this article? You'd probably be a good match for our ever-growing tech team at Theodo.|||

