Aug 28th 2016: Todolist web has been updated to look + perform much nicer.

Jul 6th 2016: Todolist is now part of homebrew core! Installing todolist is as easy as running .

Todolist allows you to manage your tasks in the terminal. It is simple, very fast, and stays out of the way. Todolist is based upon the Getting Things Done method, and has the concept of due dates, projects and contexts.

Todo lists are specific to the directory you are in.

will work just fine if you're using OSX + homebrew.

Simply download + copy the binary to a location in your .

If you have Golang installed, you can also just run .

First, run to intialize the .todos.json repo in the directory you are in.

You can add a todo by using the or directive:

This is the heart of the system. You can filter and group your todos. If the built-in filtering is not powerful enough for your tastes, you can always pipe the output to !

takes many arguments. You can filter by a due date:

You can also group by project or context.

Completing a todo is done by using or .

Now, if you list your todos, you'll see that all have been completed:

Finally, after all the work has been done, you can archive the todos so they are cleared off the list.

You can archive each one individually by running , but since we have many completed todos today, we can run instead, which will archive all completed todos.

And that's it! You now know 90% of what you need to in order to use Todolist.

Todos can be in one of 3 states:

Typically you'll create the todo, complete it, then archive it at the end of the day.

You can initialize a todolist by running . This will create a in the directory you are in.

The todolist in your home directory is special. will use the list in your home dir if it does not see a in the directory you are in. This allows you to manage your main todolist file even if you are in another directory.

Add a todo by running or , and then filling out the details of the todo.

or - complete a todo by its id.

or - un-complete a todo by its id.

or - archive a todo by its id.

Note: By default, Todolist will always filter archived todos. You can only see archived todos by running

- List all todos that are overdue

Todos can be grouped by project or context.

Todolist currently supports editing a due date only. If you need to fully edit a todo, it is recommended to delete and re-add the todo.

You can add priority to a todo. Priority is either on or off. When prioritized, a todo is printed in bold.

Todolist supports expanding existing todos. This feature helps you add more details to replace vague todos. The syntax is

If there is a todo like this:

which is obviously not clear enough. One may then apply this feature:

The list would become:

or will do the job.

You can delete all archived todos using . This is handy because it will free up all of the ids that were used by the archived todos.

This runs a simple web servier on http://localhost:7890 with a nice web view to manage your todos.

A simple demo is available here.

.todos.json stores todos in a very simple format, and is simple enough to be self-explanitory. See below for an example todo stored in .todos.json.

I appreciate simple tools that adhere to the Unix philosophy. Being an avid Wunderlist user, I was hoping to rewrite the 30% of Wunderlist that I actually use as a simple command-line tool.

While todo.txt is an excellent project with a great ecosystem, it just didn't serve my needs. I really needed dates on my todos, and by default, todo.txt does not provide this. I believe that Todolist is much closer conceptually to how the "big" todo companies do it, e.g. Wunderlist, Todoist, etc.

Todolist will have a hard time adding a todo that has a keyword in it. For instance:

todolist a when is the +bigProject due?

will strip the word off the end.

Todolist was created with by Grant Ammons.|||

