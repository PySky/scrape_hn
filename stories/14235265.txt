1c is aimed to compile TypeScript to runnable code on both JVM and web browser. You can implement the full stack with TypeScript while using libraries from Maven and NPM together.

To make it clear, I'd like to quote from sparkjava.com:

Lately, a lot of server-side web development has been taken over by NodeJS, but a growing number of NodeJS developers are using TypeScript and other statically typed languages that compile to JavaScript. Why not go all the way and use a language that was actually designed with types, and intended to run on the server-side? You also get all the benefits of running your application on the JVM, where libraries arenâ€™t deprecated every day.

Here is what 1c can offer: you can have TypeScript for the server-side and run it on the JVM.

Let's use spark as an example.

This is almost the same as the Quick Start example of spark, except that I am going to print a green with the NPM library chalk.

You can use the command line to test it now.

Check out more features of 1c now.

After installing 1c with npm, you should continue to check its prerequisites.

Running will show you everything you need before getting started with 1c. It is recommended to have

You can have a quick look at the following commands.

Check everything you need before using 1c to build your project.

Intialize your project in an empty directory.

You can import the directory to your IDE now.

Add the NPM and Maven libraries you need to .

Now you have installed both NPM and Maven dependencies. We will only use in this tutorial.

Now you are ready to run your first program with 1c.

Although you can use Maven libraries, you are not going to write Java. If you are not interested in TypeScript, 1c is not for you.

Because the program will be run on JVM, you cannot use those NPM libraries that rely on Node standard library (like fs, path).

The TypeScript definition generated from Maven libraries will not perfectly match to its original Java signature, since TypeScript syntax differs from Java's.

The compilation would be very memory-consuming (1G free memory suggested, otherwise it would very slow). However, you can use the watch mode ( ) to reduce the time for re-compilation.

1c has just been developed and tested under Debian. It is not ready to run on Windows or Mac OS.

The recommended project structure is as followed. And you should NOT change these files/directories manually.

You should use to generate the tsconfig.json and do not modify it manually. The format of package.json is the same as NPM's, but you can add the extra field .

After you run , Maven dependencies will be installed to lib/ and NPM dependencies will be installed to node_modules/. You will find the TypeScript definition of Maven libraries under lib/@types/. If you need to add your definitions, please put it in src/js/@types/.

You should use or for the entries on browser (frontend) and for the server-side entries (JVM). would be output to . would be output to .

Check out Java Scripting Programmer's Guide for more details.

Everything under src/assets would be copied to build/assets.

You can import CSS/Less in *.ts or *.tsx files.|||

