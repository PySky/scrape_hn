As you probably know, the script tag is used for specifying JavaScript which should be run in a webpage. A script tag can either include the JavaScript directly, or it can point to a URL where the script should be loaded from.

This idea should be intuitive when you read this code:

It is less intuitive (but no less true) when working with external resources.

It similarly works for combinations of local and remote scripts.

Functionally this means you can significantly slow down your site if you have slow scripts loading early in the page. It also means scripts which appear later on the page can depend on things scripts which appear earlier have done.

Elements on the page won’t render until all the script tags preceding them have loaded and executed. This means you can do all sorts of crazy things where you tweak the page before it loads, if you’re willing to accept the performance hit.

This doesn’t apply however if you add script tags to the DOM after the page has begun to load using or the like. Those tags will load whenever the browser sees fit, and in no particular order.

You can think of the HTML parser as traveling through the document tag by tag, executing any JavaScript as it approaches it. This means DOM nodes are available to your JavaScript (through , jQuery, etc.) only if their opening tag appears earlier in the document than your script tag.

One useful corollary of this is that is virtually always available in any JavaScript you might write (on a webpage). is only available if your script tag appears inside or after the opening tag.

HTML5 has added a couple tools for controlling when scripts execute.

Historically (since Netscape 2), it hasn’t mattered much if you specified in your script tags, or just left it blank. If you set any MIME type which isn’t a variant of JavaScript as the though, the browser won’t execute it. This can be cool when you want to define your own language:

The actual execution of that code is then up to you, i.e.:

Defining the function is left as an exercise for the reader.

If you have a perverse desire to, you can also override the default for every script tag on the page using a tag:

Take a look at A Brief History of Weird Scripting Languages on the Web for more details on what were valid.

The attribute is a part of the new Subresource Integrity spec. It allows you to provide a hash for the contents which a script file should contain. It’s meant to prevent a nefarious actor from messing with the contents of a script tag over the wire. In a world with SSL, this is only really valuable if you’re loading a script from some external source you don’t control like .

If you do choose to use this, you include which hash you are using, and the hash’s value, separated by a hyphen. It looks like this:

I have yet to see it in the wild, but if you know of a site using it, comment below.

It’s not fully standardized yet, but there is a attribute which is supported by some browsers. The general idea is that the browser doesn’t like to let you do much with resources loaded from a different ‘origin’ than the current page. (The origin is defined as the combination of the page’s protocol, hostname, and port. I.e. ).

This is to prevent you from, for example, making requests to your competitors website which cancels any accounts the current user might have (not nice!). Its connection to script tags is somewhat incidental though. The idea is if you apply a handler to the event, that handler is provided with some information about the page and script which you perhaps shouldn’t have if you’re loading code from an external site. In secure browsers this info is not included unless you specify .

isn’t a magical security hack though, what it does is instruct the browser to undergo the normal CORS access check of making an request and checking for headers.

It has zero IE support, making it something of a novelty, but there is a property called which points to the current script being executed. It could be super helpful if you want to pull attributes out of the script tag your embed is included using. Personally I’m pretty glad it isn’t fully supported as it would make some of the work we do at Eager to install embed codes somewhat harder.

This is super useless, because it’s only supported on Firefox. It, along with allows you to bind an event which will be executed before and after every script on the page runs, which is pretty cool.

If you’re curious, the event objects include a reference to the script being executed, and the event can cancel the execution by calling .

To this day the HTML5 spec includes a rarely seen, previously IE-specific, method of binding code to an event. You are supposed to be able to do this to have a script tag not run until the page’s load event:

I can’t actually make this work on Chrome or Firefox (making them not standards compliant), but there’s a good chance it still works in IE.

Like your parents, it’s hard to believe there was a time when JavaScript was young. There was a day however when you couldn’t be sure if a given browser would support JavaScript or not. Even worse, you couldn’t be sure that the browser would even know what a tag was. And if a browser doesn’t recognize a tag, it is supposed to render it as a generic inline element, meaning all your secret JavaScripts would be rendered to the page as text!

Fortunately the spec was helpful enough to provide the solution, wrapping your code in something which the unsupporting browser would interpret as an HTML comment:

Of course, like most things, XHTML made this much worse. XML has a very special method of escaping content which might contain closing tags and such, was born:

With that, your code would be valid XHTML. This wouldn’t have any impact on its functionality, but was incredibly important to your self worth as a web developer.

Browsers also included a helpful method to allow you to tell people who didn’t have JavaScript enabled to go away, the tag. wraps the content which should only be rendered if the browser doesn’t support script execution:

If you’re observant you’ll realize that doesn’t accept the argument, making its interaction with pages which use multiple script somewhat ambiguous. The actual behavior varied from browser to browser, but included showing blocks if any tag used earlier in the document used a not-supported . This means that it was very possible to have early s not appear, while ones lower on the page did.

Script tags which are dynamically added to the page via the DOM are executed by the browser:

Script tags which are dynamically added to the page via are not:

Why this is is not clear, but it is a fun answer to the trivia question “is it possible to have a script tag show up in the Chrome inspector which has not actually ran?” Which, in turn, makes it a great way to prank your coworkers.

Thanks for tuning in! Our next post is on and how weird it is. Subscribe below to get notified when our new blog posts are released.|||

A detailed look at the HTML script tag.