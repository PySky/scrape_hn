Data is beautiful. And with modern technologies it is crazy easy to visualize your data and create great experiences. In this quick how to, we cover how to interact with the npm üíò API to get download statistics of a package and generate a chart from this data with Chart.js

We will build npm-stats.org and will be using following tools:

With Vue.js we will build the basic interface of the app and and routing with . And we scaffold our project with which creates our basic project structure. For the chart generation we will be using Chart.js and as a wrapper for Vue, . As we need to interact with an API, we‚Äôre using to make the http requests. However feel free to swap that one out with any other lib.

At first we need to install to scaffold our project. I hope you have a current version of node and npm already installed! üôè Even better if you have yarn installed! If not, you really should! If you don‚Äôt want, just swap out the yarn commands with the npm equivalents.

Then we can scaffold our project with vue-cli. If you want to can enable the unit and e2e tests, however we will not cover them.üî• But you need to check vue-router!

Then we cd in our project folder and install the dependencies with . So our basic project dependencies are installed. Now we need to add the one for our app.

Just a quick check if everything is running with . Now we should see the boilerplate page of vue.

Just a small disclaimer here, I will not focus on the styling. I guess you‚Äôre able to make the site look good by your own üíÖ so we only cover the javascript related code.

 And another disclaimer, this is rather a small MVP then super clean code right now. I will refactor some of it in later stages. Like in the real world.

Let‚Äôs think about what components we need. As we‚Äôre looking at the screenshot we see an input field for the package name you‚Äôre looking for and a button. Maybe a header and footer and the chart itself.

You totally could make the button and input field a component however as we don‚Äôt build a complex app, why bother? Make it simple. Make it work!

So I ended up with following components:

I will skip the Header and Footer as they only contain the logo and some links. Nothing special here. The LineChart and Start page are the important ones.

The LineChart component will be our chart.js instance which renders the chart. We need to import the Line component and extend it. We create two props for now. One for the data which is the number of downloads and the labels which are for example the days, weeks, years.

As we want all our charts to look the same, we define some of the Chart.js styling options in a data model which get passed as options to the renderChart() method.

And as we will have only one dataset for now, we can just build up the dataset array and bind the labels and data.

As we have our LineChart component up and working. It‚Äôs time to build the rest. We need an input field and button to submit the package name. Then request the data and pass the data to our chart component.

So, let‚Äôs first think about what data we need and what states / data models. First of all we need a data model, which we will use with v-model in our input field. We also want to display the name of the package as a headline. So would be good. Then our two arrays for the requested data and and as we‚Äôre requesting a time period we need to set the . But, maybe the request goes wrong so we need and . And last but not least as we want to show the chart only after the request is made.

There are various endpoints to get the downloads of a package. One is for example

However this one gets only a point value. So the total downloads. But to draw our cool chart, we need more data. So we need the range endpoint.

The period can be defined as for example or or a specific date range But to keep it simple we set the default value to . Later in Part II we can then add some date input fields so the user can set a date range.

So our data models are looking like this:

Now it‚Äôs time to build up the template. We need 5 things:

Just ignore the css classes for now. We have our Input Field which has an keyup event on enter. So if you press enter you trigger the method. And we bind to package

For the potential error we have a condition, only if is true we show the message. There are two types or errors that can occur. The one is, someone try to search for a package without entering any name or he‚Äôs entering a name that does not exist.

For the first case, we have our default errorMessage, for the second case we will grab the error message that comes from the request.

So our full template will look like this:

Now it‚Äôs time for the coding. First we will do our requestData() method. It is rather simple. We need to make a request to our endpoint and then map the data that comes in. In our response.data we have some information about the package:

Like the start data, end date, the package name and then the downloads array. However the structure for the downloads array is something like this:

But we need to separate the downloads and days, because for chart.js we need one array only with the data (downloads) and one array with the labels (day). This is an easy job for map.

Now if we enter a package name, like vue and hit enter, the request is made, the data mapped and the chart rendered! But, wait. You don‚Äôt see anything. Because we need to tell vue-router to set the index to our start page.

Under we import or page and tell the router to use it

But, we are not done yet. We have some issues, right? First our app breaks if we don‚Äôt enter any name. And we have problems if you enter a new package and hit enter. And after an error the message does not disappear.

Well, it‚Äôs time to clean up a bit. First let‚Äôs create a new method to reset our state.

Which we call in our method before the api call. And we need a check for the package name.

Now if we try to search an empty package name, we get or default errorMessage.

I know, we covered a lot, but let‚Äôs add another small cool feature. We have , but not really using it. At our root we see the starting page with the input field. And after a search we stay at our root page. But it would be cool if we could share our link with the stats, wouldn‚Äôt it be?

So after a valid search, we add the package name to our url.

And if we click on that link, we need to grab the package name and use it to request our data.

 Let‚Äôs create a new method to set our url

We need to call in our response promise. Now after the request is made, we add the package name to our URL. But, if we open a new browser tab and call it, nothing happens. Because we need to tell that everything after our will also point to the start page and define the string as a query param. Which is super easy.

In our we just need to set another path in the routes array. We call the param package.

Now if you go to you will get the start page. But without a chart. Because we need to grab the param and do our request with it.

Back in our we grab the param in the mounted hook.

And thats it! Complete file:

You can check out the full source at GitHub and view the demo page at üì∫ npm-stats.org

But hey, there is still room for improvements. We could add more charts. Like monthly statistics, yearly statistics and add date fields to set the period and many more things. I will cover some of them in Part II ! So stay tuned!|||

The first part of building a small web app which interacts with the npm API and generates nice charts