Everybody loves the vintage game Pong, right? We sure do. What's more fun? Building it yourself!

That's why we decided to create one with SVG.js - to highlight some aspects of our library. It might seem like a complex idea for a small tutorial, but as you'll see, it's simpler than it sounds. Let's dive into it!

See the Pen Fully functional Pong game with effects by Wout Fierens (@wout) on CodePen.

SVG.js is available through Github, npm, bower or CDN.js. There are plenty of options for getting your hands on SVG.js, so use whatever you are most comfortable with.

Start out by creating a new HTML document and include the library. Create an empty to serve as a wrapper for the SVG document, and give it an attribute. Something like should be suitable for this project:

Next, initialize the SVG.js instance by referencing the wrapper. At this point, it's also a good idea to define a and for the game which makes it easier to modify them later on.

Now you're ready to start building the game.

The background should cover the whole document, so we're using a and give it a neutral grayish color. First, we'll draw the left player in green. Then, we'll draw the right one by cloning the left one and coloring it pink.

We'll also need a vertical, dashed line in the middle to distinguish the player fields.

See the Pen Pong Background by Wout Fierens (@wout) on CodePen.

Pong wouldn't be Pong without paddles and a ball. First, we'll draw the left player in green. Then, we'll draw the right one by cloning the left one and coloring it pink.

For the ball we're going to use a circle with a diameter of and place it in the center of the court:

See the Pen Pong Paddels and Ball by Wout Fierens (@wout) on CodePen.

Finally, we will need a scoreboard which we will add at the top of the court.

That's all! Now we have all game elements, let's move on to game logic.

See the Pen Pong Scoreboard by Wout Fierens (@wout) on CodePen.

We'll start out by writing an update function which will update the state of our game and game elements.

When we run this, nothing will happen, because we didn't call the function yet. This will be done using JavaScript's native feature, which will allow us to do smooth animations. To make this work, a handler is registered to periodically call our function:

Yay! The ball is jumping around! But, our paddles are still pretty useless at the moment. So, let's do something about that and insert paddle collision detection. We'll only need it on the x-axis:

Better, now the ball is aware of the paddles. But a few other things are still missing:

Let's work through this list from top to bottom.

See the Pen Pong jumping ball by Wout Fierens (@wout) on CodePen.

To update our score, we need to hook into collision detection to the left or right wall:

See the Pen Pong jumping ball by Wout Fierens (@wout) on CodePen.

The right paddle will be controlled by the keyboard, and that's a piece of cake with SVG.js:

So what are we doing here? First, we call , which lets us bind an event listener to any node (not only SVG.js objects). We'll listen to the event to detect if either the (38) or the (40) key is pressed. If that's the case, the will be set to or respectively. If another key is pressed, the will be . Lastly, when any key is released, the will be reset to .

The function will do the actual work of moving the paddle, based on the user input. So we'll add the following code to the function:

We prevent the paddle from exiting the court by testing its position. Otherwise, the paddle will be moved by a relative distance using .

See the Pen Pong user controlled paddle by Wout Fierens (@wout) on CodePen.

A good opponent will make the game worthwhile. So we'll have the AI player follow the ball, with a predefined difficulty level. The higher the difficulty, the faster the AI paddle will respond.

First define the difficulty value, defining the AI's speed:

Then add the following code to the function:

See the Pen Pong user controlled paddle by Wout Fierens (@wout) on CodePen.

Wait, this isn't right! The game goes on even after one of the players scored. Time to include a function to move all game elements to their initial position using animations:

The function should be called if one of the players misses the ball. To make that happen, change the failure detection by removing the line and adding the call:

We also need to make sure the initial and values are set to 0. So the game does not start without our input. To be able to indicate the first serve, we'll add a listener to the SVG document:

See the Pen Pong with start and reset by Wout Fierens (@wout) on CodePen.

Of course, there is a lot left to improve on the game, but the purpose of this tutorial is to teach about SVG and in particular about SVG.js. We want to leave you with some visual effects to spice up the game.

It would be nice to have the color of the ball change while approaching the opposite opponent. This is done by leveraging the power of the method on the class. We'll detect the position of the ball, and gradually assign the color of the opposite opponent, based on the position of the ball on the x-axis.

We'll start by initializing a new instance of :

Next, we'll define the target color by calling the method:

This will set a start color, being and an end color, being . Using the method on , we can tween the color based on a given position between and . So by adding the following code to our function, we can change the color of the ball while it moves:

That wasn't hard at all, right?

Imagine a huge color blast when the opponent missed the ball. That would make it even more fun to win a point. To achieve this, we'll use a radial gradient. It will appear where the ball has hit the wall and then quickly fade out. Once faded out, the object carrying the gradient will be deleted from the scene. To achieve this, we'll add another function called including the required logic:

See the Pen Fully functional Pong game with effects by Wout Fierens (@wout) on CodePen.

That's it! You just created a working Pong game using SVG.js. In the next tutorial, we will cover how to convert this blob of code into a reusable SVG.js plug-in, while adding new features and easy configuration to the game.|||

Everybody loves the vintage game Pong, right? We sure do. What's more fun? Building it yourself! That's why we decided to create one with SVG.js - to highl