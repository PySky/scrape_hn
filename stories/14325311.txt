Minor version numbers (0.0.x) are used for changes that are API compatible. You should be able to upgrade between minor point releases without any other code changes.

Medium version numbers (0.x.0) may include API changes, in line with the deprecation policy. You should read the release notes carefully before upgrading between medium point releases.

REST framework releases follow a formal deprecation policy, which is in line with Django's deprecation policy.

The timeline for deprecation of a feature present in version 1.0 would work as follows:

Version 1.1 would remain fully backwards compatible with 1.0, but would raise warnings if you use the feature that are due to be deprecated. These warnings are silent by default, but can be explicitly enabled when you're ready to start migrating any required changes. For example if you start running your tests using , you'll be warned of any API changes you need to make. Version 1.2 would escalate these warnings to , which is loud by default. Version 1.3 would remove the deprecated bits of API entirely.

Note that in line with Django's policy, any parts of the framework not mentioned in the documentation should generally be considered private API, and may be subject to change.

To upgrade Django REST framework to the latest version, use pip:

You can determine your currently installed version using :

For full details see the 3.1 release announcement.

For full details see the 3.0 release announcement.

For older release notes, please see the version 2.x documentation.|||

Django, API, REST, Release Notes