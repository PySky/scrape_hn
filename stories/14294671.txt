Configure ESLint, Prettier, and Flow in VS Code for React Development

This short guide will provide you a consistent and reusable development workflow for all React/React Native projects. The more effort you put into writing quality code, the less time you spend on debugging. You can increase your code quality and reduce the time spent on debugging with a consistent development workflow. In this guide I will show you how to configure your editor to handle your code formatting, linting, and type checking.

Test Driven Development and a preconfigured build configuration are recommended. I won’t go into much detail on either of these. I recommend create-react-app for the web and using the React Native CLI for mobile development. Both require zero build configuration. Jest is fantastic for testing React.

To get started download and install VS Code. You can launch VS Code from the terminal, here’s how.

Let’s generate our app without any configuration! For this article we’ll use the React Native CLI, but you can follow along with create-react-app as well.

Open the SweetApp project with VS Code.

Once you have VS Code open, click the Extensions button in the Activity Bar. Install the following extensions:

We will install ESLint using Airbnb’s linter rules. Refer to Airbnb’s JavaScript Github Repo for the installation instructions.

You should now see an  file in your project. Open the file and configure it like so:

Since we are using Prettier with ESLint there is very little setup required to get Prettier working. We’ve installed the Prettier-ESLint extension, now we need to tell VS Code to format our code using a code formatter (Prettier) after saving a file.

Press if you’re on a Mac to open your VS Code User Settings and enable format on save.

Flow is a static type checker for JavaScript and is included in your project if you use the React Native CLI or create-react-app build configurations.

From your terminal install Flow using Homebrew.

To run Flow per project we will install flow-bin from npm. Later we will configure VS Code to run Flow from in lieu of the global Flow installation.

Before installing flow-bin we need to figure out which version to install. Open the  file and scroll to the very bottom where you’ll find the version number. This is the version of flow-bin we want to install from NPM. As of the day this article was published, the Flow version to use is 0.42.0.

We also need to install the babel-preset for Flow.

Open the  file and add Flow as a preset then add the config

Your  file should look like this:

Now we want to tell our editor to use Flow from the projects directory. We also want to disable JavaScript validation for this project only to fix a known issue.

Open the Workspace file and add this:

Open the file and add the following scripts.

Your in should now look like this:

From the same directory as your file run the following terminal command.

The Flow server is running and will perform type checking on any file with a annotation at the top of the file.

Open the file in the project.

You should notice red squiggly lines in your code. You can hover your mouse cursor over the red squiggly line and ESLint will tell you the linter rule causing the warning.

Delete the semicolon at the end of the statement inside the class method. Hover your mouse cursor over the red squiggly line and you’ll see ESLint warns you about the missing semicolon!

Prettier will auto-format your code based on it’s rules whenever you save a file.

Add an array of numbers and save the array to a variable called test. Format the array of numbers like so:

Now save the file and watch the magic of Prettier take effect!

The test array is now formatted correctly!

To ensure Flow is working run the npm script to start the Flow server that runs in the background.

Create an add function that returns the sum of two numbers.

Now let’s add the WRONG types (string) to the function parameters and return type.

Notice after saving the file red squiggly lines appear under the number parameters of the function invocation. Hover your mouse cursor over the red squiggly lines and Flow informs you:

[flow] this type is incompatible with the expected parameter type of string

Let’s fix the add function to use the correct number types.

The Flow type errors are gone!

Hopefully this guide saves you the headache I experienced and makes for a great reference guide now and in the future.|||

This short guide will provide you a consistent and reusable development workflow for all React/React Native projects. The more effort you put into writing quality code, the less time you spend on…