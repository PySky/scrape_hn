For many years I dreaded front end development. It’s not because I don’t love making products or writing CSS, but rather it was virtually impossible to properly test my UI code. UI code is particularly vulnerable to bugs: the combination of API flakiness, random user inputs, and race conditions make it incredibly easy to make logic errors. For a long time, there were not great tools for verifying the behavior of this code.

 

With React and the ecosystem of testing tools that have emerged around it, it’s finally possible to build robust, scalable tests that provide strong guarantees on code correctness.

When we decided to start writing UI tests for our app, we found that there weren’t any great resources that explained the various techniques for React testing. The goal of this series is to discuss these techniques and provide an overview of how to get started. 

 

In modern JavaScript front ends, there are 3 types of tests that we might want to write:

In this post, I’ll talk about unit tests and when / how to write them.

In React, unit tests fall under a few different buckets:

Imagine that we’re building a “calculator” app. Each of these tests would serve a slightly different purpose:

Logic tests are the most straightforward unit tests. The simplest case might look something like this:

These are usually really quick to write, and are quite useful when working on gnarly code that has a lot of edge cases. It’s important not to go overboard with these tests — you should only write tests for code with a stable API. If the function is constantly changing in purpose or inputs, the guarantees of the test will become meaningless.

 

 To set up logic tests in your front end, I’d recommend using Jest or Mocha, along with Chai to make test assertions:

React’s component model is quite convenient for writing tests. Instead of having to test an entire app with an integration test, component tests allow us to test individual components in isolation. Moreover, React’s virtual event model lets us perform “actions” on a component without the browser environment! Here’s an example integration test which uses AirBnB’s enzyme library:

You can play around with enzyme and component testing at this Runkit: https://runkit.com/arbesfeld/enzyme-example

 

 Like logic tests, it’s important to find the correct API boundaries to test. It’s not worth writing tests for components that are constantly changing. Also, simple pure-functional components are not that useful to test: they rarely have bugs or issues. I’d recommend writing component tests when you are building a UI library of complex components, like multi-selects, type-ahead search boxes, etc.

react-storybook and other “UI Dev Environments” allow you to build components in a self-contained dev environment, and then persist “Stories” of your components which make it easy for other developers to iterate on the component.

Some developers would argue that these are not real tests, but I feel like they have the same purpose as tests. By codifying all of the possible states of a component, it makes it easier for other developers to improve the component, and use the component in other parts of an application.

 

If you’re interested in react-storybooks, here are a few other good resources for digging in:

This is a common question that I hear when discussing React engineering. To make this decision there are often a few factors at play:

Interested in new, cutting-edge tools for JavaScript development? Join our weekly mailing list to learn about tools, libraries and best practices that will help you build better apps:|||

For many years I dreaded front end development. It’s not because I don’t love making products or writing CSS, but rather it was virtually impossible to properly test my UI code. UI code is…