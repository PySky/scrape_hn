A bot should be able to listen events from a system, and interact with it accordingly. In the first article, we have bootstrapped a program to listen every event provided by GitHub.

Using web hook feature, we have registered an url available from outside to listen JSON POST responses from GitHub and convert it to PHP “human-readable” objects using the GitHub event parser library.

Today, we want to interact with GitHub programmaticaly.

GitHub provides many ways to interact with:

Like a lot of developers, I’m easy with REST concepts which are very simple:

They are a lots more to say, but it’s OK for me at this point.

For instance, let’s say we want to retrieve all issues from a “Hello World” repository of “octocat” (the owner):

Same apply when you want to create or delete the resources, following the well documented API provided by GitHub. Today, let’s stay simple and stupid, we will implement some basic interactions:

We will rely on the GitHub REST API, and on the KnpLabs GitHub API client to create our own client.

This library is a (mostly) complete Object Oriented wrapper written in PHP for the GitHub API v3. You can install it using Composer, as usually:

Now, adapting the minimal sample provided in the project README we can already play with the GitHub API:

What we have done here is querying the API to get all the followers of a GitHub user: easy, isn’t it ?

We need to create a Client, able to query the API. This API is managed in what we can call “domains” (‘user’, ‘issue’, ‘gists’, …) and then we have query methods that can accept parameters.

When we want to do more than querying as an anonymous user - for instance to comment an issue - we need to authenticate to GitHub. GitHub, and the KnpLabs library provide so many ways to authenticate, from simple “login/password” to a complete authentication using OAuth.

Because it’s a really simple application, I’ve choosen the Personal API Token authentication method. The first advantage is the possibility to select which actions you are allowed to do when creating this token, the second one is that you have increased your API Rate limit.

Now we can authenticate to Github, let’s do a little bit more with our bot:

Now we understand how it works, we can create our own minimalist GitHub client with the three features we wanted:

Now you have the basics to get data from GitHub, get information from your repository activity and interact with your users.

Next time, we will see how theses two kind of applications (an event listener and an API client) can be used together to create a real bot able to listen and react to the GitHub activity.|||

A bot should be able to listen events from a system, and interact with it accordingly. In the first article, we have bootstrapped a program to listen every event provided by GitHub. Using web hook…