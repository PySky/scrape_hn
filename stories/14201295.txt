In the following code samples we are using ES6/ES2015/Babel.

If you don’t really know what two way data binding is, let’s see a few definitions:

It’s possible to use two way binding with javascript frameworks like AngularJs, ReactJs, VueJs….

Of course, to setup Vuex with Vuejs you need two things:

Click on the Result tab to see “VueJs two way binding” in action.

In this first example, if you open the debug tool of your browser (console), you should see this error message.

This error is throw by Vuex, because we have enabled the Vuex strict mode.

We’ll talk about this later in the article…

It’s perfectly suitable for small applications with not too much real time state updates.

To remove the Vuex error and update the state in a mutation without adding or updating a lot of code, an option can be to deep clone the object before updating it with two way binding in our form.

The following few lines show how to deep clone the object and how to see updates on the object and on the deep copy. We are using lodash to clone the object.

The computed property and the debounced mutation call, allows to track the effective state updates

Be careful ! You cannot debounce the function in the mutation itself. Indeed, the code would be executed within the next event loop cycle, not really in the mutation function. The Vuex error will appear again.

The “deep clone” solution is not really a perfect solution because we are still using two way binding, and we are adding a watcher manually which has performance cost. So… how can we improve the situation ?

Actually, two way binding is not something really needed in most cases. What about removing it and relying on one way binding and explicit data updates ?

It’s possible to refactor the code to have a single method to update object properties.

The interesting parts here are:

If we are updating a user in another VueJs component we need to duplicate this part of the code:

What about moving the computed property key of the object literal in the mutation itself ?

You could use a built-in VueJs functionality describred at the end of this page. But once again be careful because it works only for simple computed properties, not for object (with many depth levels potentially).

So if you have an object with 10 properties to update, you will need to set 10 two way computed properties (each with a get and a set method). It’s gonna be a lot more verbose than the previous solution.

Two way data binding is really easy to setup with all major javascript frameworks (it’s often the default behavior). It’s a very good option for small applications or POC. But for very complex UI you should consider using one way data binding and explicit state updates/mutations.|||

Two way data binding is really easy with VueJS and has very good performance with virtual dom. But it's not always a best practice to use to improve performance and track state updates.