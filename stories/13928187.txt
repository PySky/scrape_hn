ThreadJob provides asynchronous scheduling and executing of tasks (longer) in the background using a thread pool. In the future, this can be distributed depending on the backend used (once ActiveRecord Store is complete).

If you'd like to use thread_job with the built-in memory store add to your .

Jobs inherit from ThreadJob::Job and must implement a run method that is executed when the job is run puts Create a scheduler with a queue name 'test_queue_name' and some example jobs scheduler :: . ( ) job . scheduler.add_job( , job) scheduler.start scheduler.add_job( , job) Keep our example running puts Just keeping our example alive... sleep

A scheduler requires a queue_name and optionally takes a job store backend, poll delay (in seconds), worker thread pool size, and logger

A backend store optionally takes max retries (max number of times to attempt a job that is failing) and logger

Jobs inherit from ThreadJob::Job and must implement a run method that is executed when the job is run puts Create a scheduler with a queue name 'test_queue_name' and some example jobs logger . ( ) logger.sev_threshold :: Create the custom backend with max of 3 retries backend :: :: . ( , logger) Create a scheduler using the customized backend, 2 second poll delay, and 8 worker threads scheduler :: . ( , backend, , , logger) job . scheduler.add_job( , job) scheduler.start scheduler.add_job( , job) Keep our example running puts Just keeping our example alive... sleep|||

thread_job - Lightweight scheduler for Ruby.