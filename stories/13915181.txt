You've finished a feature and are ready to deploy it. But first you need to add it to the branch of your repository. It turns out you have a lot of options, each with their own tradeoffs.

Let’s say master is in this state.

 And we have a new feature we’ve been working on.

We could fold this into via . Or, we could fold this into via .

It's easy to misunderstand as a linear history that makes it hard to see what a complete feature looks like. Kind of like a pure workflow.

But this isn’t the case. Actually, if you look at the network graph: 

 and look very similar.

See how both both and only have 1 commit in mainline?

 We can examine the commit from . And, we can examine the commit from .

They’re actually the same! You can revert both of these commits to revert if you need to.

 But has the added benefit of extra (branch) metadata that’s stored in the repo.

This is useful - it becomes easier to do code review, do , and run .

 Even if the sub-commits in the branch aren’t split up perfectly, you’re still reducing the amount of code you need to read in each sub-commit.

 And you can always view the full feature by looking at the mainline merge commit.

If you're currently using :

 The workflow is completely optional, and can coexist with the workflow - if you'd rather squash, you can keep doing so. They’re equivalent on the mainline!

If you're currently using :

 can give you the same clean, linear history, but with the added benefit of being able to revert a feature without much context.

If you're currently using :

 and give you the same benefits without the drawbacks. There's very little switching cost!|||

git-workflow-strategies-example - Folding a feature branch into master, using merge --no-ff, rebase, and squash.