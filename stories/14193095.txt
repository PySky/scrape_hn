Locally in your project or globally:

Since version 0.11.x, we have moved from using to , because when the library is used with latest Node.js, it issues a deprecation warning (see PR #63). Also, since version 0.12.x, we have moved to ECMAScript 6 to utilize class and scoping features.

This means we have moved exclusively to Current and LTS Node.js releases. Should there be any problems with it, please check if the corresponding issue is opened, and if not, open it so we can reach out and try to solve the deprecation problem.

Creates a new TCP connection to the specified host, where 'options' is an object which can include following properties:

Resolves once the connection is ready (analogous to the event).

Sends data on the socket (should be a compatible remote host's command if sane information is wanted). The optional callback parameter will be executed with an error and response when the command is finally written out and the response data has been received.

 If there was no error when executing the command, 'error' as the first argument to the callback will be undefined. Command result will be passed as the second argument to the callback.

*** important notice/API change from 0.3.0 ***

 The callback argument is now called with a signature of (error, [response])

Sends data on the socket without requiring telnet negotiations.

Starts an interactive shell session. Returns a duplex stream which can be used to read and write data.

Returns a duplex stream that can be used for connection hopping. See 'sock' option.

Half-closes the socket. i.e., it sends a FIN packet. It is possible the server will still send some data.

Ensures that no more I/O activity happens on this socket. Only necessary in case of errors (parse error or so).

Emitted when a socket connection is successfully established and the client is successfully connected to the specified remote host. A value of prompt is passed as the first argument to the callback.

Emitted when the write of given data is sent to the socket.

This is a forwarded 'data' event from core 'net' library. A is received when this event is triggered.

Emitted if the socket times out from inactivity. This is only to notify that the socket has been idle. The user must manually close the connection.

Emitted when the failedLoginMatch pattern is provided and a match is found from the host. The 'destroy()' method is called directly following this event.

Emitted when an error occurs. The 'close' event will be called directly following this event.

Emitted when the other end of the socket (remote host) sends a FIN packet.

Emitted once the socket is fully closed.|||

node-telnet-client - A simple telnet client for node.js