Due to its rich and well designed API, Github has a vast number of integrations that run on top of it. Rultor is one of the many pieces of software that integrate with Github. If you’re not familiar with it, you can read more in several articles written by its creator here.

In this post I’m going to show you how to achieve one particular goal: moving files from one repo to another with Rultor. This is something that I did recently and figured I’d write about it, since I found it rather tricky.

Here’s a scenario: you have a repo where some javascript developers are building something which will ultimately be turned into an file. When you say , the file should be moved to the repo, because that repo is a website hosted by Github pages. This way, the HTML pages where the file is imported will always use the latest version of it.

Sounds easy, so you write a file for rultor to run on a command:

This should work just fine, except the server doesn’t trust Github’s host, and you will see in rultor’s logs something like this:

If you use HTTPS, you will be prompted for the username and password.

You could, of course, find some way to automatically answer to the prompts. Maybe answer “Yes” to all the prompts that could occur, or, if you choose HTTPS, involve the credentials of someone with write access on that repo. None of the options is good, obviously.

The solution is Github’s API. Rultor will the file through the update endpoint, using .

The steps are as follows:

You don’t want the API token visible to everyone so, before uploading it to Github, you encrypt it using the command-line tool:

Where is the full name of the repo where the deployable is built. This is important, because it’s how rultor knows not to decrypt the files if they are found in another repository.

Then, inside you have

Getting the token in your script is the following line (rultor puts the resources under )

Here you just make a cURL get, but you need to parse the JSON object that the Github API returns - I used jq for that.

Now the variable will contain the required SHA. Needless to say, the first deployment will have to be done manually in order for this script to work.

The content of the deployed files has to be base64 encoded, as required by the Github API.

Note that I used awk here to remove newlines (otherwise the built JSON is not well formatted).

See exactly how I did it all here. Also, see it in action here.

This is it. You can follow these steps to avoid blindly answering prompts, as well as involving actual user credentials. Any questions?|||

Due to its rich and well designed API, Github has a vast number of integrations that run on top of it. Rultor is one of the many pieces ofsoftware that integ...