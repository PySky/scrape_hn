Ohm is a parser generator consisting of a library and a domain-specific language. You can use it to parse custom file formats or quickly build parsers, interpreters, and compilers for programming languages. The Ohm language is based on parsing expression grammars (PEGs), which are a formal way of describing syntax, similar to regular expressions and context-free grammars. The Ohm library provides a JavaScript interface (known as Ohm/JS) for creating parsers, interpreters, and more from the grammars you write.

Like its older sibling OMeta, Ohm supports object-oriented grammar extension. One thing that distinguishes Ohm from other parsing tools is that it completely separates grammars from semantic actions. In Ohm, a grammar defines a language, and semantic actions specify what to do with valid inputs in that language. Semantic actions are written in the host language — e.g., for Ohm/JS, the host language is JavaScript. Ohm grammars, on the other hand, work without modification in any host language. This separation improves modularity, and makes both grammars and semantic actions easier to read and understand. Currently, JavaScript is the only host language, but as the API stabilizes, we hope to have implementations for other languages.

Learn more about the Ohm philosophy here.

The easiest way to get started with Ohm is to use the ohm interactive editor. Alternatively, play with one of the following examples on JSFiddle:

For use in the browser:

If you are using Node.js, you can just install the package using npm:

This will install Ohm in the local node_modules folder. Use to access it from a Node script:

To use Ohm, you need a grammar that is written in the Ohm language. The grammar provides a formal definition of the language or data format that you want to parse. There are a few different ways you can define an Ohm grammar:

For more information, see Instantiating Grammars in the API reference.

Once you've instantiated a grammar object, use the grammar's method to recognize input:

The result is a MatchResult object. You can use the and methods to see whether the input was recognized or not.

For more information, see the main documentation.

Ohm has two tools to help you debug grammars: a text trace, and a graphical visualizer. The visualizer is still under development (i.e., it might be buggy!) but it can still be useful.

You can try the visualizer online, or if you have an Ohm checkout, open in your web browser.

To see the text trace for a grammar , just use the method instead of . It takes the same arguments, but instead of returning a MatchResult object, it returns a Trace object — calling its method returns a string describing all of the decisions the parser made when trying to match the input. For example, here is the result of for the grammar :

If you've written an Ohm grammar that you'd like to share with others, see our suggestions for publishing grammars.

All you need to get started:

NOTE: We recommend using the latest Node.js stable release (>=0.12.1) for development. Some of the JSDOM-based tests are flaky on io.js, and other tests will reliably fail on older versions of Node.

Before submitting a pull request, be sure to add tests, and ensure that runs without errors.|||

ohm - A library and language for building parsers, interpreters, compilers, etc.