Member functions in C, could look like this:

The syntax would be similiar to C++ to access these shortened functions:

Combined with the inheritance scheme detailed in Inheritance in C would need a simple compiler hack, this allows a simple form of function inheritance.

If a struct has another struct as it's first member, it inherits all the first member structs functions into its namespace.

Because of the type relaxation detailed in the first post, this would not make the compiler complain about using types as arguments.

It would IMO be too obscure, to allow declarations in the struct. Then the API programmer would either have to know a name shortening scheme, so that he could give the proper function name to the extern function

or one would have to write the complete logic into the header file, which is un-C like.

The solution for non-inlineable or hidden functions is to write it like this:|||

Continued from Inheritance in C would need a simple compiler hack. It has been updated Member functions in C, could look like this: struct x { char *name; static inline char *get_name( struct x *p) { return( p->name); } }; You can have only static inline function definitions inside a...