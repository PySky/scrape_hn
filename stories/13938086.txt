Some of its best features are:

I quite like AVA since I can just drop it in and reap benefits without too much hassle. Iâ€™ve never had to fight against AVA to get tests running, that means more focus on the code and tests and less on the setup.

Running AVA at the command line is as simple as (if youâ€™ve got it installed globally):

To run AVA in watch mode at the command line:

If your test files match against AVA will pick them up and run them. You can always override this, but I donâ€™t think you would want to configure AVA differently.

We can wrap these commands in a npm scripts and use the projectâ€™s version of AVA. And actually AVA has a command that can add this stuff to your :

It will add AVA in and in script.

Here is an example test file in Mocha:

? ? Not so obvious that theyâ€™re functions defined by the test runner. Weâ€™re also using for our assertionsâ€¦ Wouldnâ€™t it be nice if all this was one package and it was obvious we were using it?

Mocha best practices also say we shouldnâ€™t be using arrow functions ( ) since we may want to access the defined inside of or instead of the global module .

Here is the same test in AVA:

AVA is less verbose, it does the job of the assertion library and is the test runner at the same time. Weâ€™re relying on a anywhere since the test object ( ) is passed as a parameter.

There is no nesting in AVA, it uses the test file and its path to define test suites.

AVA runs using full ES2016 syntax by default and runs its code through Babel transforms.

This means, without adding a Babel hook (like you would in Mocha) you can write:

When you run the tests:

No syntax error on the â€˜importâ€™ statement.

If youâ€™re importing components that need to be Babel transformed (React components using JSX for example), you just need to add the following Babel hook to the AVA config in :

This means itâ€™s easy to write modern JavaScript and test it using the same syntax and minimal headaches using AVA.

No more Promisifying your assertions, no more passing callbacks, well sort of.

If you use promises, AVA loves it:

If you want to use , even better:

And you have the good old callback mode, which works fine, you obviously have to call andÂ  somewhere like any other test runner:

In the async cases, you can use to specify the number of assertions that should be run, it will fail if that exact number of assertions isnâ€™t runÂ . This is different to some other test runner that will fail if less than the specified number of assertions are run.

AVA is low-config, low maintenance testing for JavaScript for 2017 and beyond. You get really nice diffs on failed assertions, a one-library solution for assertions and running tests. The tests run fast and promote best practice (pure tests) and are ready to test async functionality out of the box.

Remember to give this post some ðŸ’š if you liked it. Follow me Hugo Di Francesco or @hugo__df for more webdev contentÂ :).|||

I quite like AVA since I can just drop it in and reap benefits without too much hassle. Iâ€™ve never had to fight against AVA to get tests running, that means more focus on the code and tests and lessâ€¦