Have you ever thought about different vehicle parameters being displayed in your own Android application? If so, then you've come to the right place. We will discuss what it takes to develop an OBDII reader application.

First, let's take a quick look at the protocols used in vehicles for diagnostics.

OBD is an acronym for “on-board diagnostics” and refers to vehicle's self-diagnostics and reporting capability. Originally it was intended to help mechanics run quick vehicle diagnostics. The early versions of it allow checking for possible problems with the engine. Nowadays, in addition to preserving the “diagnostics” part, this system has been dramatically enhanced and allows a vehicle owner to be in control of different parameters like the current fuel consumption rate, gear and transmission modes, GPS module and so on. For a full understanding of how it works and the history behind it, you can read the full article on Wikipedia called “On-board diagnostics”.

First of all, you would need a OBDII adapter to be able to use the OBDII interface. There are many adapters from different manufacturers. Some of them have a COM interface, others have a USB interface, and some have a Bluetooth interface. Theoretically, any adapter can be used by the Android application, but in practice, your best choice is the Bluetooth interface.Also, adapters can be differentiated by supported OBDII protocols (i.e. by supported vehicles).So if you have a car within reach and good OBDII adapter we can start developing OBDII reader application.

Hold on - do you really have a car close enough to your development environment? Actually we can use a simulator for a start. The one that worked for me is OBDSim: it is an open source project available for different platforms. Since Bluetooth is not supported on Windows, rebuilding it from scratch in Linux will be necessary. Please note that most likely it will require you to modify the source code and change RFCOMM channel to the first available instead of channel 1.

What's more, a hardware emulator can be used instead of a real car. I used ECUsim 2000 standard with ISO 15765 (CAN) protocol enabled. As for the OBDII adapter - I used ELM327 v.1.5 adapter.

Let's start with describing the protocol that is used for communication between Android device and OBDII adapter/vehicle. It is text-based polling type protocol. This means that all you need is to send a command to receive a response. And knowing what commands to send is key.

We will connect to the adapter through Bluetooth. It seems that Bluetooth Low Energy API is just the thing we should use. However, since it is now supported only by several devices, it is too early to use it.

The protocol supports some AT commands like turning echo and control line feed. Another part of the protocol is OBDII control protocol itself.

The general workflow of the application functionality should go like this:

1) connect to the OBDII adapter through Bluetooth;

3) continuously get data from the vehicle through issuing the corresponding PID codes.

Connecting to the OBDII adapter is straightforward. But one thing you need to do before connecting is to select the Bluetooth device. Displaying an alert dialogue with single choice items is a good way to go:|||

Why does your vehicle need it?
Have you ever thought about different vehicle parameters being displayed in your own Android application? If so, then you've come to the right place. We will discuss what it takes to develop an OBDII reader application.
First, let's take a quick look at the protocols used in vehicles for diagnostics.