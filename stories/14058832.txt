How to Include an asynchronous third party library in Angular2

We use Drip for Marketing Automation as a part of our Content Marketing service and we use Angular2 for our Front-Ends as a part of our Development service.

Drip has a very simple JavaScript API for adding email subscribers to their database.

The Problem this post offers a solution to is “How do I integrate Drip with an Angular 2 project?”

Problem 1: Where do I include the Drip provided <script> tag?

Drip provides a <script> tag to include in every page. Drip recommends putting it at the end of the <body> tag, however that doesn’t play nicely with Angular. So I included this script in my index.html in the <head> tag.

Problem 2: Where do I invoke the API?

I recommend invoking the API in a service so that you can re-use code in multiple places in your app.

However, since this is Angular 2 and Angular 2 uses TypeScript, you’ve got to jump through a hoop. At the top of your service include this line:

Adding the declare statement will stop TypeScript from complaining in your editor like it did in mine:

Now with the declare statement in place, we can create a simple service that returns the response or the error from the Drip API. In the code below I use a Promise to handle the async. It’s a simple method but its not the Angular 2 way.

The Angular 2 way involves Observables and Subjects. Of course, you already know what Observables are all about, but your friend doesn’t. So for your friend, a Promise.

Problem 3: How do I display the returned data in my component template?

I know that Drip will have a success response with an email property.

However, that email property will only exist when the Promise resolves. So our template must account for that. As well, the Promise resolves asynchronously so we must use the Angular async pipe.

The result looks like the below:

We pipe the response to async so that its value will update when the Promise resolves. And we’ll optionally display the e-mail from the response. Thats what the question mark is about, optionally displaying a value.|||

We use Drip for Marketing Automation as a part of our Content Marketing service and we use Angular2 for our Front-Ends as a part of our Development service. Drip provides a <script> tag to include in…