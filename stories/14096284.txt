I am focusing hard on making AR for the web a reality. This repository is where I publish the code. Contact me anytime @jerome_etienne. Stuff are still moving fast, We reached a good status tho. An article has been published on uploadvr. So I wanted to publish thus people can try it and have fun with it :)

It works on any browser with WebGL and WebRTC. So android works. Window mobile works. IOS doesnt work unfortunately. IOS safari doesn't support WebRTC at the moment. Apple is currently working on it tho.

To try on your phone is only 2 easy steps, check it out!

You are done! It will open a webpage which read the phone webcam, localize a hiro marker and add 3d on top of it, as you can see below.

So we shown it is now possible to do 60fps web-based augmented reality on a phone. This is great for sure but how did we get here ? By standing on the shoulders of giants! It is thanks to the hard work from others, that we can today reach this mythic 60fps AR. So i would like to thanks :

Only thanks to all of them, i could do my part : Optimizing performance from 5fps on high-end phone, to 60fps on 2years old phone.

After all this work done by a lot of people, we have a web-based augmented reality solution fast enough for mobile!

Now, many people got a phone powerful enough to do web AR in their pocket. I think this performance improvement makes web AR a reality. i am all exited by what people are gonna with it :)

We are still early in the project but here are some initial numbers to give you an idea.

Obviously you mileage may vary. The performance you get will depend on 3 things: How heavy your 3D is, How you tune your parameters and the hardware that you are using.

With this project, we bring more performance to artoolkit. artoolkit is a software with years of experience doing augmented reality. It is able to do a lot!

It is marker based. It supports a wide range of markers: multiple types of markers pattern/barcode multiple independant markers at the same time, or multiple markers acting as a single marker up to you to choose.

Recently, we’ve been getting creative and working on developing new things with AR.js. One of them is playing around with shadows, syncing the position of virtual lights with reality for a more life-like finish:

We’ve been collaborating very closely with Fredrick Blomqvist. His input has had a great impact on AR.js innovation and we want to thank him. Together, we’ve been implementing refraction, giving the 3d a transparent/glassy effect. It ended up having a nice polished look. What do you guys think?

Other crazy ideas we’ve been working on include a hole in the wall and a portal into another world. We want to take AR.js to new dimensions.

A-Frame magic :) All details are explained in this super post "Augmented Reality in 10 Lines of HTML - AR.js with a-frame magic" by @AndraConnect.

See on codepen or bl.ocks.org

We started a AR.js blog, thus we can write about all the crazy ideas related to AR.js.

It is all open source ! jsartoolkit5 is under LGPLv3 license and additional permission. And All my code in AR.js repository is under MIT license. :)

For legal details, be sure to check jsartoolkit5 license and AR.js license.

We did good on performance, but there are still a lot of room for optimisation. Using webworkers would increase cpu usage. Compiling in webassembly instead of asm.js should improve loading time and likely cpu performance. And obviously, we can still do more parameters tweaking :)

I would like people start experience augmented reality and play with it. This is highly creative! Just look at this puzzle game in #AR playing with mirror and laser beam. You could do it with AR.js, so opensource and running on normal phones, no need to buy a new device. isn't that great!

Augmented reality on phone have applications in many fields: history education , science or gaming. I exited to see what people will do with AR.js :)

Demo tested on the following browser setups:

There is no absolute. It is a ratio between the physical size of the marker, and the resolution of the camera image. It is a tradeoff: the larger the camera image, the slower it is running. The larger the camera image, the smaller the marker can be.

First you have to copy the repository locally (using git clone). After that, just serve the files on a static http server. Personnaly, i use a simple command line http server called . You can install it via .

WebRTC requires to have a Secure Contexts, So in short, you need to serve your application over https. Webrtc records video/audio and it is really sensitive information. Without https, an attacker to easily know what is recorded by your webcam, or even insert audio and makes you say anything he want to. Clearly not something desirable :)

So, in short, you need to serve your application over https to use the webcam.

Unfortunatly, this is always a pain to setup https, but it is the prize to pay for security. @mritzco posted a great description on https configuration for ar.js on gist. Let's note that github pages are served over https by default. So if you deploy on github, it is easier. During developement, there is a trick, localhost is assumed secured. So if you serve your file over localhost, you don't need to have https.|||

AR.js - Efficient Augmented Reality for the Web - 60fps on mobile!