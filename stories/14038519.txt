Optima is a polydimensional container scheduler for Docker. Polydimensional scheduling generates superior results compared to previous schedulers by considering a rich set of system and policy dimensions, and by using linear algebra to properly value the impact of each. Optima is also uniquely adaptable to dynamic and hybrid environments. Plus, its scheduling syntax is simpler than with previous schedulers. All of this makes it uniquely powerful for today's complex world of diverse apps running in heterogenous environments.

For more information about Optima: http://www.mosaixsoft.com/optima.

Optima is currently offered as a free 30-day trial, limited to deploying up to 20 containers on up to 5 Docker hosts. If you wish to evaluate Optima deploying more than 20 containers or to more than 5 hosts, please contact MosaixSoft at optima@mosaixsoft.com.

Optima is installed on a dedicated server (virtual or physical) using a software installation package which can be downloaded only after registering at http://www.mosaixsoft.com/optima. After installing Optima, the Optima CLI can be installed separately to run Optima commands remotely against the Optima server.

The recommended instance type in AWS is "m4.2xlarge".

The Ubuntu server where Optima is to be deployed must have access to the Internet to download the Optima installation software package.

The installation script downloads and installs the necessary third party components and starts the Optima server. Depending on your Internet network bandwidth, this installation may take up to 10 minutes. If the installation script did not complete, run it one more time (likely due to a timeout in the downloads).

Install the Optima CLI to a system from where you want to launch Optima commands from.

From an Ubuntu 14.04 LTS server supporting Python version 3, download and install the Optima CLI:

To obtain this URL, register at http://www.mosaixsoft.com/optima.

Optima must be connected to a Docker cluster with Docker hosts running Docker version 1.10 or higher. Docker Swarm is not required.

The IP address of the Optima server (<optima_host_ip>) must be accessible from the system where the Optima CLI is installed. Port 8090 must be open on the Optima server.

In addition, the Optima server must be able to reach the Docker hosts over IP. Optima communicates to each Docker host via the Docker Remote API which port (4342 or 2575 or custom) must be open on each Docker host that will be connected to Optima.

Your multi-container application can be comprised of one or more containers. Optima allows you to pick the optimal placement strategy, combined with workload and host constraints, that works best for your application workload.

All strategies take into account CPU and memory as default constraints. Optima automatically looks for a Docker host with available room for each container to be deployed based on its CPU and memory requirements at the time of the service request.

Optionally, you can combine your placement strategy with the following supported constraints:

When connecting Optima to your Docker cluster the first time, the cpuovercommit and memorycommit ratios define the maximum number of virtual CPU count and virtual memory each Docker host can be allocated by Optima:

See instructions on how to download Optima CLI [here]#installation.

By default, Optima listens to port 8090 for the RESTful APIs:

This example deploys multiple containers for maximum performance. It does this by distributing the containers across all Docker servers while maintaining the workload affinity between the load-balancer and the database. The containers in this example are:

You can download this example here.

This example maximizes resource efficiency. It does this by deploying containers to a minimal number of Docker servers while maintaining the workload affinity between the load-balancer and the database. The containers in this example are:

You can download this example here.

Define a set of workloads to be scheduled At least one workload MUST be requested Each workload MUST have a unique name within the yaml file The name is used to identify affinity/anti-affinity constraints The name is also used as a prefix name for the created container : - : : Docker image name (MUST be specified) : CPU and Memory resources MUST be specified : : : : : : - - : : - - - : : : : : - : : : : : - : : : : : : Two policies are available: - "minimize-hosts" for using as few hosts as possible (Default) - "balance-hosts" for spreading the workload across the hosts : The mode is one of two: : If timeout is exceeded, sub-optimal placements will be returned. : Forces one or more workload to be placed on a certain host or on one of a set of hosts : This constraint informs the scheduler to place container1 and container2 on either host-name1 or host-name2 - : - - : - - This constraint informs the scheduler to place container3 on host-name3 or host-name2 - : - : - - Forces one or more workload not be placed on a certain host or on a set of hosts : This constraint informs the scheduler not to place container4 on host-name3 - : - : - Prevents a workload from being placed with other workloads : Informs the scheduler not to place container1 and container2 on the same host - : - - Informs the scheduler to place a certain set of workloads on the same host : Informs the scheduler to place conainer2 and container3 on the same host - : - -

Please refer to the Troubleshooting guide for Optima.

You can submit your questions and suggestions here.

Can I deploy Optima with more than 5 hosts? Optima is currently available as a free trial. If you would like to evaluate Optima with more than 5 Docker hosts (dozens to hundreds), please contact MosaixSoft directly at optima@mosaixsoft.com. Which network/subnet should I use for my containers? By default, Optima picks the Docker's default "bridge" network. However, Optima supports any network types you created in your Docker cluster. Please refer to Docker's online reference manual for more information about how to create networks. If you want to deploy your containers in a specific network, you must use the "subnet" YAML tag in your Optima service compose file. What happens when I exceed the maximum limit of containers supported with the free trial? The free trial for Optima is limited to 5 Docker hosts and 20 containers maximum. If you submit a service which will exceed the limit of 20 containers, the service will be submitted (a.k.a. allocation requested) successfully, however its status will be "FAILED". If you inspect the service ($ optima service inspect <service_id>), the "ErrorMessage" field will indicate that you can't exceed the number of 20 containers". If you would like to evaluate Optima with more than 5 Docker hosts (dozens to hundreds), please contact MosaixSoft directly at optima@mosaixsoft.com. Are there open source plans for Optima? Open source is important to us, so we are being prudent about which parts of our system to release that way. Let us know at optima@mosaixsoft.com if you'd like to collaborate. How do I debug why a service has failed? A failed service is a service that has the status 'FAILED' which indicates that at least one of the service's workloads has failed. The first thing to do is to inspect that service. If you have optima CLI installed, simply run: Or if optima CLI is not installed, you can inspect the failed service by issuing the following REST call: You can then check what went wrong and why the service failed from the inspection response. More specifically, you need then to check either the "Error Message" in that service (if the whole service failed and none of the service's workloads were provisioned) or if some of the servce's workload only failed, you could check the error message for each failed workload, which tells you why that workload failed. For further details on some of the possible error messages, please refer to: Troubleshooting guide for Optima.|||

optima - New container scheduler for Docker