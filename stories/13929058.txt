- Sometimes I get an impression that there are people who got "promoted" to Senior Developer even before releasing anything to production ... Clearly the length of tenure is not the key determinant here, but neither should be the 100% memorizing of given framework's / library / language's full syntax. There are certain much important qualities that may be harder to assess, but in fact are a pure essence of Developer's "seniority". This is a post about these qualities.

If you've read my recent post, you already know I've spend a lot of time researching software development career job offers recently. Actually I was looking for more senior, manager-level positions, but out of curiosity I've also spent some time on browsing various junior-to-senior dev positions - to find out: who's hiring, what are typical expectations, how are employers advertising themselves & attracting the new talent. I had some interesting observations & one of them is a in many of job ads I've seen.

According to many (recruiters, head-hunters, intermediaries) the best determinant of "seniority" for a developer (Senior Developer, I'll be using an acronym SD from now on) is:

Such a state of affairs has a simple justification:

Needless to say, I totally disagree with the determinant above. This "definition" says nothing about the real qualities needed by SD, actually I can easily imagine a person who meets this definition perfectly, but knows only "the happy path" coding, has never encountered really challenging support situation, doesn't even know how her/his code is built (not mentioning the deployment ...) & has a very limited experience with so-called good practices (like automated testing, code reviewing or keeping the balance between coupling & cohesion).

Who is a "Senior Developer" according to myself then?

SD is an individual who:

Quite a few points, but these are just the most important ones. And yes, the bar is set quite high - some may get to SD level in 3 years - it IS possible (but not very likely & you will have gaps), 5 or 6 years is more feasible, 8-10 still fully normal, but there are many who will NEVER get to this point: some are too pigeonholed (& do nothing about it), some will never bother with full SDLC & some are too passive / insecure to either take ownership over anything or help youngsters grow.

Some may disagree the lengthy definition above & even find it more like qualities of a "Software Architect" (SA), but frankly this is another heavily devaluated term than needs re-clarification of its true meaning. Real, effective & capable SA is actually much more, but ... this is a topic for another, completely separate blog post :D|||

