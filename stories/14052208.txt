I was pretty excited to see Glimmer released recently. As a big fan of Ember, even though I haven’t had much of a chance to use it professionally over the last few years, I think Glimmer is a great direction for the framework to take.

So, of course, I had to try writing some bindings for xcomponent.

If you haven’t tried it, xcomponent is a cross-domain-component library I maintain, and I’ve already written about how to integrate it with React. Glimmer seemed like the next logical step! With xcomponent, we can write Glimmer components and share them with other sites using iframes.

I’ve gone over this in a lot of detail elsewhere, but I want to quickly throw together an xcomponent. We’re going to use the standard example of a login component:

That tells xcomponent where to render the component — and now I need to implement the component under that url.

I’m free to do so with whatever technology I want, then use to get any of the data/callbacks that were passed down into the iframe from the parent window. I’m guessing since you’re reading this that you’ll be using Glimmer to implement that page — but that’s up to you. One of the advantages of xcomponent is, the parent page and child component window don’t need to be using any of the same technologies.

There’s a quick example of an implementation for using vanilla javascript and here. It’s taking and calling when the user logs in.

For now we’re just going to edit to include xcomponent and the MyLoginXComponent definition we just defined, into our Glimmer app:

Now for the fun bit — the Glimmer binding! This lets you render an xcomponent directly into a Glimmer handlebars template, using the Glimmer’s native syntax.

First, you’ll need to create a new Glimmer component. We do that by creating a directory under which we’re going to call which will end up being our tag name, and we’re going to create a and a . You can even do this step automatically by typing .

Since our component is going to be rendered into an iframe using xcomponent, we can just set the to an empty .

Then, all that’s left to do is to pull in the xcomponent Glimmer driver in :

There’s a full example of how this should look here.

Now we’ve set up the xcomponent binding and created a Glimmer component to wrap our xcomponent, we can go ahead and render the component!

First let’s set up our parent app, and create some data and callbacks to pass down to the component:

We’re going to pass down a and listen for an callback.

Now, we can just drop the component into our app’s template:

And we’re done! You can see the full code for this here. We have a Glimmer app, and an xcomponent rendered into an iframe:

The example repo for this is here: https://github.com/bluepnume/glimmer-xcomponent-example.

I was really impressed with what I saw so far, in the few hours I spent playing around with Glimmer. I just had a few quick thoughts —

Anyway, generally speaking, really love what I’ve seen so far! Awesome work @GlimmerJS team! Can’t wait to see how people use it with xcomponent too.|||

I was pretty excited to see Glimmer released recently. As a big fan of Ember, even though I haven’t had much of a chance to use it professionally over the last few years, I think Glimmer is a great…