Fresh out of a dev bootcamp brimming with creative weirdos, I did my internship at a dreary place full of a-holes who ignored me when I said good morning. During the interview they asked about my educational background and seemed moderately disturbed that my first degree was a BFA and that I had an active art practice. They made it clear that it was not beneficial to have serious interests outside of work and that they were entitled to 100% of my time and energy.

It’s not surprising that the company lacked culture. It stopped at foosball and beer, and I stuck out like a pair of perky college titties. One of the unimaginative managers told me several times that going from making art to writing code was a really weird thing to do. It left me with a concern that many people don’t understand how much programmers have in common with other creative people, and that this misconception may lead startups to alienate people with the skills and mentalities they need most.

My transition to programming was not a reckless 180° but a decision to bring new techniques into my art practice. Many excellent programmers have other creative practices on the side. We are multifaceted hackers, writers, musicians, performers, and painters. Any person who is so obsessed with bringing their ideas to fruition that they need multiple outlets should make a startup juice itself with wanting. As the visionaries of the business world, I would go so far as to say that startups can’t compete unless they’re full of these people.

Paul Graham’s essay ‘On Hackers and Painters’ is probably the best known comparison between programming and visual art. It’s a thought-provoking read, but it misses some important points and over-emphasizes others. For example, I don’t think beauty is as important to either code or painting as we might like to think. Wouldn’t you say that solving a difficult problem, such as expressing a feeling that’s been repressed by your entire culture for 200 years, or normalizing legacy data, necessitates a bit of mess? No codebase can afford perfection because it’s more important that it gets done and does its job. Similarly, art stopped having to be beautiful about a hundred years ago and now an artist can choose whether or not beauty serves their work.

The most significant thing these disciplines share is actually the creative process. The more experience a programmer has with this, the better. It teaches us how to plan, implement, and deliver our work. This is why we’re called ‘developers’ and not ‘product deliverers’; our focus is on the process that produces the product, not the other way around. Once we’ve delivered something, it’s out of our hands. We have no control over it until we’re back to work again. Fortunately, this is more or less immediately.

Some parts of this process are more exciting than others. Makers of all kinds are masterful researchers. Everyone knows that programmers make use of a lot of theory and documentation, but it isn’t widely known that artists do the same thing.

All academic art programs revolve around Critical Theory, a discipline that combines psychology, political science, literary criticism and sociology to deconstruct culture. As an art student, you are expected to use this body of theory to inform their work. Once you’ve finished a piece, you have it critiqued by your teacher and peers, and they want to know what it’s about. If you say it’s about nothing, you’re gonna have a bad time, because it means you don’t understand the relationship between your work and the world around you. It’s like when software engineers claim to have done something radically different than anything that has ever been done before — most of the time they are just unaware of a pre-existing pattern they’ve used, or they spent a lot of time implementing something they could have used a gem or external library for.

When your critics rag on you for thinking your work was created in a vacuum, they’re doing you a favour. They’re imparting the knowledge that you don’t have to wait for the lightening bolt of inspiration to strike before you can get things done. You learn how to research what’s out there and adapt it to make it work for you. If you’re taught that interesting work is about something larger than your own personal issues, it means you don’t have to drink absinthe in brothels, die of syphilis, or cut your ear off unless you really feel like it. What great news! Unfortunately, it means there’s work to be done via a highly demanding process of planning, research, prototyping, implementation, feedback, re-working, and releasing to the public. Sound familiar?

Another part of this shared making process is the enormous amount of knowledge and experience required to perform at a high level. Without the foundation of thousands of hours of practice, you will make shit. Passion can help you cram those foundational hours into a smaller period of time, but the jig is up; people who make stuff know that talent is a lie. You have to put a fuckload of time in before you can make anything worthwhile and that’s just how it is.

These invisible parts of the process don’t arouse much sympathy. Take abstract art, for example. It relies heavily on the invisible parts of the process, since the artist’s focus is primarily on the concept behind whatever they’re making. The public has enormous disdain for this kind of work, thinking it is produced by people who haven’t put the work in and are pulling the wool over everyone’s eyes to turn a profit. They misidentify it as a hoax that requires no skill and no time because much of the labour is behind-the-scenes. It’s kind of like people using your software without thinking about the work that went into it. They won’t ever see your written code. That’s their privilege as consumers. They only need to know whether or not they are having a good experience.

Much like software, if you want to really understand a painting, you have to learn how to read the language it was made in. This means being able to identify the complex relationships between techniques, the architecture of how it was built up, and the meanings associated with the painter’s technical choices. I think that programmers would find painting a lot more relevant to their own work if they understood this.

Two artists I find technically inspiring are Gao Xingjian and Wayne Thiebaud. Have a look at their work. Notice the overall effect it has. Then ask yourself why — What materials have they used? What are the technical challenges associated with them? What order were the layers painted in and what visual effect does this create? What are the physical qualities of the material? How might this affect what techniques the artist was able to achieve?

I think a lot of people are intimidated by art because they feel like they have to know what it means. If you’re more of a technical person, forget about that stuff and try to reverse-engineer it to understand how it was made and in what order. It’s a lot more interesting.

If you make a habit of enjoying visual art, you might even start to notice that some artists are more procedural than expressive. A lot of really good work is carefully planned and executed. Successful artists are not illogical, damaged people at the mercy of their psychotic episodes. Like programmers, they are professionals who are incredibly efficient at switching from right to left brain thinking. They know very well how to go into a creative state and how to use it to produce good work. I will admit that some artists play up the crazy because patrons love it, but this is only further evidence of their skill since they are also marketers and entrepreneurs. It’s the equivalent of showing up to a tech event swathed lavishly in swag; what a boss.

Of course there are physical differences between modes of making that necessitate different strategies. When drawing with charcoal, the finest movement of your fingers dictates the line you draw. You are working with your nervous system, psychology, and physical reality. The immediacy of the materials means that you end up with a very real trace of what you are. It’s very sensual and sexy.

Computers, on the other hand, were designed partly to extend our minds and partly to free us from the kinds of limitations that define physical art. This freedom gives us magical powers. We can collaborate and share information, write the infrastructure of a business, and study people’s interactions with our product, all with minimal physical materials. We’re almost using technology to defy space and time. That’s pretty sexy too.

I must admit that I think there is some truth to the clichés about artists, programmers, and their infamously difficult personalities. Both care deeply about what they do and are willing to defend their perspectives. There is one right way to do this. You can’t do it like that. Hours of this until fuck my life, it’s nine o’clock.

People who think they have major differences often have more in common than they realize. It’s actually when you have a lot of shared values and spend a lot of time with someone that their differences get maddening. I truly believe that makers have a lot in common, whether they make art or write code, and that the best programmers do both.

That’s why startups can’t afford to alienate creative people if they want to do anything remotely new or interesting. They are trying to change the landscape of business, and they can’t do that without the kind of innovation that creative people specialize in. They need people who are highly engaged in the world and are prototyping solutions to every day problems in any medium they can get their hands on.|||

Fresh out of a dev bootcamp brimming with creative weirdos, I did my internship at a dreary place full of a-holes who ignored me when I said good morning. During the interview they asked about my…