Yes, this is the question.

What do I mean?

Why it is not allowed?

To get a backup, when you Google this, you are going to see below quoted explanation:

However, interface is an %100 abstract class, and an abstract class can implement interfaces without implement its methods, right?

Which allows us to state that, behind the scene, interfaces are allowed to implement another interface. So what is the problem when it is defining as “interface”?

To answer this question, we need to understand the difference between %100 abstract class and an interface.

Implements means implementation, when interface is meant to declare just to provide interface not for implementation.

A 100% abstract class is functionally equivalent to an interface but it can also have implementation if you wish (in this case it won’t remain 100% abstract), so from the JVM’s perspective they are different things.

Also the member variable in a 100% abstract class can have any access qualifier, where in an interface they are implicitly public static final.

Also, we should be aware of that, an interface is a contract. It is not implement anything (properly-used default methods are a small exception).

What would it mean for one interface to “implement” another, anyway? It would need to have method bodies for some or all methods on the superinterface, making it a clas|||

In this post, it has been investigated why can't an interface implement another interface in Java programming language.