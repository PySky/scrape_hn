This test just starts Redis container, then populate data using restTemplate and post method, then execute the logic under test (testing GET HTTP method) and finally stop the Redis container.

It is good, it works but there are several problems there:

To avoid this problem Arquillian Persistence Extension (aka APE) was created. This extensions integrates with DBUnit and Flyway for SQL databases, NoSQLUnit for No SQL databases and Postman collections for REST services so you can populate your backend before testing the real test use case and clean the persistence storage after the test is executed.

 

 Also population data is stored inside a file, so this means that can be reused in all tests and easily changed in case of any schema update. 

 Let's see example of APE.

 

 And the file (pings.json) used for populating Redis instance with data looks like:

 

 

 Notice that in this test you have replaced the POST calls for something that directly inserts into the storage. In this way you avoid any failure that might occurs in the insertion logic (which is not the part under test). Finally after each test method, Redis instance is cleaned so other tests finds Redis clean and into known state.  

 Project can be found at 

 

 We keep learning,

 Alex

 Music: 

 

 

 

 Let's see example of Part 1 of the post but updating to useAnd the file () used for populatinginstance with data looks like:Project can be found at https://github.com/arquillian-testing-microservices/pingpongbootredis We keep learning,AlexMusic: https://www.youtube.com/watch?v=1JwAr4ZxdMk|||

