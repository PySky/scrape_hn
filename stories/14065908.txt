React component styling solved with an elegant (inspired) API, small footprint, and great performance (via ).

You like CSS in JS, but you don't like having to create entire component functions just for styling purposes. You don't want to give a name to something that's purely style-related. And it's just kind of annoying to do the style-creating, assigning, and props-forwarding song and dance.

For example, this is what you have to do with raw (or or similar for that matter):

With , that example above looks as simple as this:

In fact, it's even better, because there are a bunch of features that make composing these components together really nice!

Oh, and what if you didn't care to give a name? If you just want a div that's styled using glamor? You can do that too:

So that's the basics of this solution... Let's get to the details!

This module is distributed via npm which is bundled with node and should be installed as one of your project's :

This also depends on and so you'll need those in your project as well (if you don't already have them):

You can then use one of the module formats:

The most common use-case is consuming this module via CommonJS:

If you're transpiling (and/or using the ):

If you want to use the global:

The function is the main (only) export. It allows you to create glamorous components that render the styles to the component you give it. This is done by forwarding a prop to the component you tell it to render. But before we get into how you wrap custom components, let's talk about the built-in DOM components.

For every DOM element, there is an associated component factory attached to the function. As above, you can access these factories like so: , , , etc.

Whether you create one yourself or use one of the built-in ones mentioned above, each allows you to invoke it with styles and it returns you a new component which will have those styles applied when it's rendered. This is accomplished by generating a for the styles you give and forwarding that onto the rendered element. So if you're wrapping a component you intend to style, you'll need to make sure you accept the as a prop and apply it to where you want the styles applied in your custom component (normally the root element).

The accepts any number of style object arguments. These can be style objects or functions which are invoked with on every render and return style objects. To learn more about what these style objects can look like, please take a look at the documentation.

You can also specify other classes you'd like applied to the component as well. If these classes are generated by glamor, then their styles will be merged with the glamor style's, otherwise the class name will simply be forwarded. For example:

The is what is returned from the . Its job is to get all the styles together, get a (from ) and forward that on to your component.

By default supports three props: , and which are used to override the styles of the component in different scenarios. For a more detailed explanation see Overriding component styles and Theming sections below.

This is a function and if provided, will be called with the inner element's reference.

Only props that are safe to forward to the specific (ie. that will ultimately be rendered) will be forwarded. So this is totally legit:

A use case for doing something like this would be for dynamic styles:

Often you want to style something without actually giving it a name (because naming things is hard). So glamorous also exposes a pre-created for each DOM node type which make this reasonable to do:

Having to name all of that stuff could be tedious, so having these pre-built components is handy. The other handy bit here is that the props are the styles for these components. Notice that glamorous can distinguish between props that are for styling and those that are have semantic meaning (like with the and components which make use of and props).

The prop can be used to provide styles as an object.

One other tip... This totally works:

The most common scenario for using props is to override the style of an existing component (generated by or not). That can be achieved by using the props , and or simply component composition with function.

If you're interested in knowing more about using the prop see the Theming section instead for a more detailed explanation. In this section we'll explain how to use , and composition to override the styles of a component.

Let's see how that can be done in the examples below.

We'll use this as our :

For each you provide, the will check to see whether it is a generated (can be from raw glamor or from , doesn't matter). If it is, it will get the original styles that were used to generate that and merge those with the styles for the element that's rendered in a way that the provided 's styles win in the event of a conflict.

If the is not generated by , then it will simply be forwarded along with the -generated .

This is an object and if provided, it will be merged with this component's and take highest priority over the component's predefined styles.

If we just want to extend the styles of an existing component it can be done by using the function.

In fact, the built-in DOM component factories provided are just an abstraction of this function so could be written as instead.

The function allows you to create your own (see above) for any component you have. For example:

You can also provide a few options to help glamorous know how to handle your component:

The of a React component is used by React in the React DevTools and is really handy for debugging React applications. Glamorous will do its best to give a good for your component, but, for the example above, the best it can do is: . If you want to specify a , you can do so with this property. For example:

And now all components created by the will have the of .

There is also a babel plugin that can monkey-patch the onto the components that you create from your component factory.

React has an Unknown Prop Warning that it logs when you pass spurious props to DOM elements: (i.e. ). Because you can style your components using props, glamorous needs to filter out the props you pass so it doesn't forward these on to the underlying DOM element. However, if you create your own factory using a custom component, glamorous will just forward all the props (because the component may actually need them and glamorous has no way of knowing). But in some cases, the component may be spreading all of the props onto the root element that it renders. For these cases, you can tell glamorous which element is being rendered and glamorous will apply the same logic for which props to forward that it does for the built-in factories. For example:

There are some cases where you're making a out of a custom component that spreads some of the properties across an underlying DOM element, but not all of them. In this case you should use to forward only the right props to be spread on the DOM element, but you can also use to specify extra props that should be forwarded. For example:

It provides the to all glamorous components down the tree.

also exports a higher order component (HOC) so you can access your theme in any component!

Or if you prefer decorator syntax:

If your use case is really size constrained, then you might consider using the "tiny" version of glamorous for your application. It's is a miniature version of with a few limitations:

Here's an example of what you're able to do with it.

It's recommended to use either or the config with webpack so you don't have to import from that full path. You have the following options available for this import:

The current size of is:

Because both and support SSR, does too! I actually do this on my personal site which is generated at build-time on the server. Learn about rendering on the server and too.

Style objects can affect pseudo-classes and pseudo-elements, complex CSS selectors, introduce keyframe animations, and use media queries:

Who uses ? See other/USERS.md and add yourself if you use !

This package was inspired by the work from people's work on the following projects:

The biggest inspiration for building this is because I love the API offered by , but I wanted:

There are actually quite a few solutions to the general problem of styling in React. This isn't the place for a full-on comparison of features, but I'm unaware of any which supports all of the features which this library supports.

If you need help, please fork this CodeSandbox and bring it up in the chat

Thanks goes to these people (emoji key):

This project follows the all-contributors specification. Contributions of any kind welcome!|||

glamorous - React component styling solved ðŸ’„