this post is a bit low level. I've been writing a lot of C & C++ recently, and found a few concepts eye opening. This post is dedicated to all the people that think that is a glorified .

I'm going to do my best to avoid writing a lot of assembly, and make this post as easy as possible. Don't worry if you don't know any assembly, I'll explain everything!

First, we need to understand how statements are transformed from to . 

 We'll use gcc's flag to generate the assembly of our functions:

What does all that really mean?

and are saved to registers and respectively.

A register that holds the pointer to the beginning of the frame. For example:

A register dedicated for . is already saved to R1, so if , there's nothing to do. otherwise, we move the content of to and return.

compare and . sets a register flag that is used by to determine if it should jump to label or not.

jump lower or equal. In other words: jump to label if . otherwise, go to the next instruction.

! Remember that the value that's currently saved in is the one that's used as the return value.

If was a glorified , then the following would've compiled into a bunch of move-compare-jle-move statements.

but actually, it's compiled to this weird beast:

What's going on here?

Each block is labeled, and a table is created at compile time to bind an op to a label. These "bind table" is also called a "Jump Table":

As you can see, there are five blocks. One for each case:

If the following was C code, It would probably look similar to this:

and back to the assembly...

Lets talk a bit about the last instruction, because it's the most complicated one:

All in all, the address of the op's cell will be at: in a 32bit machine.

In conclusion, we only need one instruction to:

Now the cases aren't laid out sequentially in memory. would that produce a 1000 cell jump table?

Theoretically, without any optimization, the jump table would've contained many empty cells. Instead, the compiler performs a neat optimization: It produces a binary search tree to find the right case on runtime:

If you look closely, you'll see that the compiler actually removed the jump table and replaced it with & calls. In other words, it replaced the switch statement with a "regular" if.

That's kind of awesome no? I find it really cool that compilers can perform such neat tricks.|||

