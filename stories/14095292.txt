I’m doing full-time jobs, startup work for 5 years now. It’s a very luck to join software development world. I have chances to learn new things everyday. I built many applications that work(I’m mostly an iOS developer before), many RoR, React, Elixir production codes are running. All seems to be fine. But once day, I’m just profound realized that I missed something to take my work to next level. So I look back the fundamentals, and see the terms: “Algorithms and data structures” keeps repeating. After reviewing my knowledge, I decided to take my time to learn algorithms and data structures carefully.

Luckily, the world is full of open opportunities for learner. Coursera brings awesome lectures from top universities on the world to people willing to learn. Surely the “Data Structures and Algorithms” 6-Courses Specialization from University of California, San Diego, Higher School of Economics is standing out from crowd. My friend is in middle of the courses and highly recommend to me.

This series of blogs are lecture notes alike, including my thoughts and practices basing on material of these courses. It’s also containing some hints on problems I’ve solved. If you have any question or comment, feel free to leave it here or github. I’m willing to learn together. I make these notes to help me revision. I hope it will help you too, so I make it publicly. Let jump into the pool!

We just need to multiply 2 largest numbers.

The greatest common divisor GCD(a,b) of two non-negative integers a and b (which are not both equal to 0) is the greatest integer d that divides both a and b.

Your goal in this problem is to implement the Euclidean algorithm for computing the greatest common divisor. Efficient algorithm for computing the greatest common divisor is an important basic primitive of commonly used cryptographic algorithms like RSA.

The least common multiple of two positive integers a and b is the least positive integer m that is divisible by both a and b.

If you know LCM(a, b) . GCD(a, b) = ab, the algorithm for this problem will be easy to write by reusing last GCD algorithm.

Notice: use // in python to get right divided operation on large number in Python3.

But the runtime is not good. You can try to compute F40, it will take noticeable time .

We need to abetter way to compute fibonacci faster.

Exercise 1: Use induction to prove that Fn ≥ 2^(0.5n) for n ≥ 6.

Exercise 2: Find a constant c < 1 such that Fn ≤ 2^cn for all n ≥ 0. Show that your answer is correct.

Find the last digit of n-th Fibonacci number. Recall that Fibonacci numbers grow exponentially fast. For example,

Because it grows exponentially fast, we can not use fast_fibonacci(n) % 10 to give the answer. We need another approach to this case. Instead of summing Fn-1 + Fn-2, we just sum the last digit of Fn-1 and last digit of Fn-2.

Finding Fn modulo m, where n may be really huge: up to 1018. For such values of n, an algorithm looping for n iterations will not fit into one second for sure. Therefore we need to avoid such a loop. To get an idea how to solve this problem without going through all Fi for i from 0 to n, let’s see what happens when m is small say, m = 2 or m = 3.

So can observe that it has period. Fn mode 2 has 011 period with length 3, Fn mode 3 has 01120221 period with length 8. Therefore, to compute, say F2016 mod 3 we just need to find the remainder of 2016 when divided by 8. Since 2016 = 251.8 + 8. We conclude that F2016 mod 3 = F8 mod 3 = 0.

This is true in general: for any integer m >= 2, the sequence Fn mod m is periodic. The period always starts with 01 and is known as Pisano period.

Base on that assumption, we detect Pisano period by checking it’s repeating by 01 and keeping to repeat other numbers in Pisano table. So we check

The algorithm works right and gives us right answer for small number. With large number, the Pisano table has very long size, it takes time to compute and detect Pisano period. The reduce time to compute, we just check the period with repeating 01 and 10(another number is fine) numbers behind. It will save time to detect Pisano table for large Fibonacci computing.

Finding the last digit of a sum of the first n Fibonacci numbers.(Find last digit of F0 + F1 + … + Fn)

With the help of Pisano period, we can easy to compute the last digit of any Fi. We have F0 + F1 + … + Fn = F(n+2) — 1. The algorithm will be easy to implement:

A trick plus 10 here to make sure we return positive remainder in case of get_fibonacci_huge(n+2, 10) has last digit is 0.

Finding the last digit of a partial sum of Fibonacci numbers: Fm + Fm+1 + · · · + Fn.

If we come up with Fm + Fm+1 + … + Fn = F(n+2) — F(m+1). It will be easy to implement the solution

Notice: We just take last digit of F(n+2) + 10 and minus last digit of F(m+1), module to get the digit.

Example: F(n+2) = abc12, F(m+1) = def37, so to get right last digit, we have to do: (2 + 10–7) % 10

Sidenote: If you love this post, you will like: https://www.coursera.org/learn/fibonacci/home/info. I love lectures about: bamboozlement Fibonaci|||

I’m doing full-time jobs, startup work for 5 years now. It’s a very luck to join software development world. I have chances to learn new things everyday. I built many applications that work(I’m…