Let's start with my favourite definition of a computer:

That word "meaning" can be tough to pin down, so here's an example:

You get two envelopes in the mail, the first is an ad - you throw it in the recycling without a thought. When you see who sent the second letter, though, it's like a grizzly bear stepped into the room: you feel your heart beat in your ears, your vision narrows, the back of your neck gets hot.

Maybe it's from university admissions, maybe the doctor's office, maybe an ex-lover. The point is that two almost-identical objects had profoundly different effects on you. The difference between them is what meaning is.

Now think of all the times a computer played you a video that made you laugh out loud, or change your mind about something. The computer itself didn't make you laugh or reconsider - it was the meaning that you got from the light flickering on its screen and the sounds coming from its speakers. Computers aren't meaning - they are machines that work on meaning.

And you're going to find out how they do it.

We'll start with the simplest meanings, and build tiny machines to transform them. At first you'll wonder how such small toys could possibly have anything to do with the computers you're used to. But then we'll build slightly more powerful machines, and so on and so forth until you understand, really understand, how a computer sends an email, or plays a music file, or draws a web page - because you'll have built machines capable of all of those things.

We'll be using what I call didacts: smart bundles of tutorial, design tool, simulator, and hardware that alternate between teaching an idea and then asking you to build something with that knowledge.

The first didact, Portable Retrogaming, is being worked on right now, and will be released chapter-by-chapter throughout 2017. This site is 100% free to use and has no ads.|||

Be a homebrew computer designer, it's fun :)