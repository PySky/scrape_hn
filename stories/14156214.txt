I was recently stuck by the amazing insight from Nathaniel J. Smith, a fellow at Berkely, about asyncio. His post Some thoughts on asynchronous API design in a post-async/await world helped me put some words on the (slightly) mixed feelings I have about asyncio after using it a lot recently.

While this is more or less the main focus in his post, he argues that curio has a much simpler implementation than asyncio because it assumes upfront that you have a version of Python that implements PEP 492 ( and keywords).

I was intrigued and took a look at curio's source and... due to it gaining a lot of features (hopefully briging it closer to a production-ready library), I think it has enough features now that the main essence is diluted. This is definitely not a bad thing, but if, like me, you'd like to understand what Nathaniel was talking about, and learn a few neat Python tricks, reading curio's source code is hardly a good starting point.

Brett Cannon, a Python core developer gives some very good insight on how to use coroutine objects (e.g. if you were implementing an event loop) in his post How the heck does async/await work inPython 3.5?. His focus is on the implementation details and, at least for me, there was still a small piece missing to grok curio.

TL; DR: This is my attempt at trying to capture the core fundamentals on which curio is based. Hopefully, it will be a good stepping stone to get acquainted with curio's source code.

First, let's take a look at what happens when you call a coroutine.

Hint: you get a "coroutine object", which has a and a method, just like generator objects do.

Of course you usually don't use these methods because they are hidden behind and , but since we're trying to look into how that works... :-)

Notice that the code above never printed our message. That's because we never actually executed statements inside the coroutine function -- we simply created the coroutine object. In fact, if you actually run this code in an interpreter, you will get a warning stating that our coroutine never completed.

If you want to execute the coroutine function, you need to schedule it somehow. In order to do that, we're going to call the method.

Just like for a generator object, a couroutine object's method raises when the coroutine ends.

We'll see later that we can use to pass information to the coroutine when resuming it with a 2nd, 3rd or Nth call to .

If, instead of returning normally, the coroutine fails with an exception, then that exception will be propagated back through .

I also mentioned a method. Like , it resumes the coroutine, but instead of passing it a value, it raises an exception inside the coroutine at the point where it was suspended.

At this point, you should be comfortable with the fact that coroutine objects are very, very similar to generator objects which exist since Python 2.2 (PEP 255) and have had and methods since Python 2.5 (PEP 342).

If you look around (or try it), you will notice that coroutine functions, in contast with generator functions, cannot use the expression. This raises (not begs) the question: how exactly can coroutine functions yield control back to the code that called ?

The answer implies using on an awaitable object. For an object to be awaitable, it must implement the special method that returns an iterable. In practice, this is a little awkward, so there is a @types.coroutine decorator in the standard library that allows you to create awaitable objects in a style reminescent of @contextlib.contextmanager.

Of course, our object is pretty useless. Don't fret, we'll be doing some more useful things shortly.

Our previous example calls exactly twice because it nows that will only yield control once. When we don't know (the common case), we need to put this in a loop.

We're starting to get something that feels like the simplest possible implementation of , so let's make it more syntactically similar.

Now that we've got an event loop that can complete a single task, we'll probably want to start doing useful things. There are many different things we expect to do, but since this is about concurrency, let's start by allowing creation of child tasks.

The main thing we need to do here is to introduce a new primitive that schedules the new child task. Once the task is scheduled, we want to return control to the parent task so that it can continue on its way.

Note: this example is deliberaly incomplete. We'll see how to join tasks later.

Whoa! This is way more complicated than our previous version of . Where did all of that come from?

Well... now that we can run multiple tasks, we need to worry about things like:

Notice that we now have a nested loop:

There are other ways to do this and it may not be immediately obvious why we're doing it this way, but it's important because of two critical pieces of the event loop that are still missing: timers and I/O. When we add support these later on, we're going to need to schedule internal checks in a "fair" manner too. The outer loop gives us a convenient spot for checking timers and polling the status of I/O operations:

In short, that's the gist of the coroutine-based scheduler loop.

However, before we get into the more complicated timers & I/O... remember earlier when I mentionned that the example was deliberately incomplete? We know how to spawn new child tasks, but we don't yet know how to wait for them to complete. This a good opportunity to see how we extend the vocabulary of event loop "requests" sent by our awaitable objects.

For practical reasons, we'll probably want to have some kind wrapper for coroutine objects. This comes handy to expose an API for cancellation and to handle some race conditions such as the child task ending before the parent task attempts to it (can you spot the bug?)

Passing the child task's return value back as the result of and propagating the exception that crashed the child are left as exercices to the reader.

Now that we have task scheduling under control, we can start tackling some more advanced stuff like timers & I/O. I/O is the ultimate goal, but it pulls in a lot of new stuff, so we'll look at timers first.

If you need to sleep, you can't just call because you'll be blocking all tasks, not just the one you want to suspend.

You have probably spotted the pattern now. We'll be adding two things:

We'll also add some bookkeeping to track tasks that while they're suspended. Remember that is a list of coroutines that are scheduled to run in the next tick, but sleeping tasks will likely skip one or more ticks before they are ready to run again.

Keep in mind that sleeping tasks are unlikely to be rescheduled in FIFO order, so we'll need somthing a little more evolved. The most practical way to keep timers (until you allow cancelling them) is to use a priority queue and the standard library's heapq module thankfully makes that super easy.

Wow, we're really getting the hang of this! Maybe this async stuff is not so hard after all?

Let's see what we can do for I/O!

Now that we've been through all the other stuff, it's time for the ultimate showdown: I/O.

Scalable I/O normally using native C APIs for multiplexing I/O. Usually, this is the most difficult part of I/O libraries, but thankfully, Python's selectors module makes this quite accessible.

As for all the other operations we've added so far, we'll add some new I/O requests and corresponding request handlers in the event loop. Also, like timers, we'll need to do some internal checks at the start of each scheduler tick.

The last, but not least, piece of the puzzle is to cancel tasks. This is where we take advantage of the coroutine object's method.

Since there is a race condition on cancellation (it could finish concurrently with the cancellation attempt), it requires keeping track of all running tasks to know their "state".

Otherwise, it's a simple extension of task spawning and joining.

Note: this implementation is deliberately imcomplete. It does not properly handle the possibility of cancelling a task that is already scheduled to run in the next tick.

This document is copyright Andre Caron <andre.l.caron@gmail.com> and is made available to you under a Creative Commons CC-BY-SA license.|||

a-tale-of-event-loops - Notes describing my understanding of how modern Python event loops work