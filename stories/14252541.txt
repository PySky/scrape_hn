In this series of posts, I will show you how to build your own recognition or detection/bounding box prediction web service in just a few lines of code using Keras, TensorFlow, and the python requests library. The post series is as follows:

There are 3 popular academic competitions in the field of computer vision that have been tremendously impactful: ImageNet ILSVRC, PASCAL VOC, and COCO . These competitions have propelled inventions in computer vision research, and many are available for free and unrestricted use. For this post, I will focus on image recognition using ImageNet ILSCVRC.

Take a look at the the ILSVRC object list. If the particular objects you’re interested in recognizing are one of the 1001 objects in that list, you’re in luck! Here is an excerpt of the list of object categories:

What if you’re object of interest is not on that list, or is a significantly different setting like medical image analysis? I will cover an extremely valuable approach called transfer learning and fine-tuning in the second post.

What is image (or object) recognition? It answers the question: “what objects are depicted in this image?” This could be useful if you would like to tag images based on content, identify what food is on your plate, classify between images containing cancer or non-cancer, and many more applications.

Keras is a high-level neural network library that serves as an easy-to-use abstraction layer on top of the numerical computation library TensorFlow. It even provides access via its module to ILSVRC competition-winning convolutional network models like ResNet50 (developed by Microsoft Research) and InceptionV3 (developed by Google Research) for free and unrestricted use. To install, follow the instructions at:

To go straight to the full program, check out the github.

Our end goal is to write a small python program with argument options of either 1. a path to a local file or 2. a URL to an image. Here is the example usage using a photo of an African elephant.

The output will look like:

To start, let’s load the and the modules (resnet50 paper: Deep Residual Learning for Image Recognition), and load the ResNet50 model using weights that have been trained on the ImageNet ILSVRC competition:

Then we can define a function:

Note that to use the ResNet50 architecture, must equal . Many CNN architectures have a fixed input size and ResNet50 is one such architecture, where the inventors used a fixed size input of .

: converts our size image to . The reason for this is that the function requires a 4 dimensional array as input, where the 4th dimension corresponds to the batch size. That means, if we wanted to, we could classify multiple images at once.

: zero-centers our image data using the mean channel values from the training dataset. This is an extremely important step that, if skipped, will cause all the predicted probabilities to be incorrect. This mean centering is what’s called data normalization, a fundamental concept in machine learning.

: runs inference on our data batch and returns predictions

: takes the coded labels associated with and returns human-readable labels from the ImageNet ILSVRC set.

The module provides 4 off-the-shelf architectures: ResNet50, InceptionV3, VGG16, VGG19, XCeption. We arbitrarily chose ResNet50, but you are free to swap that out with any of the other off-the-shelf architectures. Checkout https://keras.io/applications/ for additional information and references.

We can use to print the output in a horizontal bar graph like so:

In order to have this command line usage:

The option uses the python Requests library to easily download an image from any URL!

Once you put all the above code together, you have the beginnings of an image recognition system! See the complete program and example images here on Github.

The next post in our series will cover the situation where your object of interest is not one of the ImageNet ILSVRC categories:

Let’s try a few more examples!|||

In this series of posts, I will show you how to build your own recognition or detection/bounding box prediction web service in just a few lines of code using Keras, TensorFlow, and the python…