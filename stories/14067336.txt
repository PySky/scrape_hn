NOTE: If you are viewing this on Github, this document refers to the state of in whatever current branch you are viewing, not necessarily the state of a currently released version. Please make sure to checkout the Changes file for features and changes.

This README is long and comprehensive. Use the Table of Contents to navigate to the section that interests you. It has been placed at the bottom of the README file because of its length.

(pronounced peh-koh) is based on a python tool, percol. was darn useful, but I wanted a tool that was a single binary, and forget about python. is written in Go, and therefore you can just grab the binary releases and drop it in your $PATH.

can be a great tool to filter stuff like logs, process stats, find files, because unlike grep, you can type as you think and look through the current results.

For basic usage, continue down below. For more cool elaborate usage samples, please see the wiki, and if you have any other tricks you want to share, please add to it!

Demos speak more than a thousand words! Here's me looking for a process on my mac. As you can see, you can page through your results, and you can keep changing the query:

Here's me trying to figure out which file to open:

When you combine tools like zsh, peco, and ghq, you can make managing/moving around your huge dev area a piece of cake! (this example doesn't use zsh functions so you can see what I'm doing)

Search results are filtered as you type. This is great to drill down to the line you are looking for

Multiple terms turn the query into an "AND" query:

When you find that line that you want, press enter, and the resulting line is printed to stdout, which allows you to pipe it to other tools

Not only can you select multiple lines one by one, you can select a range of lines (Note: The ToggleRangeMode action is not enabled by default. You need to put a custom key binding in your config file)

Different types of filters are available. Default is case-insensitive filter, so lines with any case will match. You can toggle between IgnoreCase, CaseSensitive, SmartCase RegExp and Fuzzy filters.

The SmartCase filter uses case-insensitive matching when all of the queries are lower case, and case-sensitive matching otherwise.

The RegExp filter allows you to use any valid regular expression to match lines

The Fuzzy filter allows you to find matches using partial patterns. For example, when searching for , you can enable the Fuzzy filter and search to find it. The Fuzzy filter uses smart case search like the SmartCase filter.

As of v0.2.5, if you would rather not move your eyes off of the bottom of the screen, you can change the screen layout by either providing the command line option, or set the variable in your configuration file

I have been told that peco even works on windows :) Look ma! I'm not lying!

Go to the releases page, find the version you want, and download the zip file. Unpack the zip file, and put the binary to somewhere you want (on UNIX-y systems, /usr/local/bin or the like). Make sure it has execution bits turned on. Yes, it is a single binary! You can put it anywhere you want :)

THIS IS THE RECOMMENDED WAY (except for OS X homebrew users)

If you're on OS X and want to use homebrew:

There's a third-party peco package available for Chocolatey NuGet.

From the root of your cloned peco repository, run:

This installs the correct versions of peco's dependencies. Then build it:

This compiles a peco binary in the root of the cloned peco repository. Copy this file to an appropriate location.

Please DO NOT use to install this tool. It bypasses the developers' intention of controlling the dependency versioning.

Specifies the default query to be used upon startup. This is useful for scripts and functions where you can figure out before hand what the most likely query string is.

Pass peco a configuration file, which currently must be a JSON file. If unspecified it will try a series of files by default. See for the actual locations searched.

Limits the buffer size to . This is an important feature when you are using peco against a possibly infinite stream, as it limits the number of lines that peco holds at any given time, preventing it from exhausting all the memory. By default the buffer size is unlimited.

WARNING: EXPERIMENTAL. This feature will probably stay, but the option name may change in the future.

Changes how peco interprets incoming data. When this flag is set, you may insert NUL ('\0') characters in your input. Anything before the NUL character is treated as the string to be displayed by peco and is used for matching against user query. Anything after the NUL character is used as the "result": i.e., when peco is about to exit, it displays this string instead of the original string displayed.

Here's a simple example of how to use this feature

Specifies the initial line position upon start up. E.g. If you want to start out with the second line selected, set it to "1" (because the index is 0 based)

Specifies the initial filter to use upon start up. You should specify the name of the filter like , , , and . Default is .

Specifies the query line's prompt string. When specified, takes precedence over the configuration file's section. The default value is

Specifies the display layout. Default is , where query prompt is at the top, followed by the list, then the system status message line. changes this to the list first (displayed in reverse order), the query prompt, and then the system status message line.

For users, is almost equivalent of .

When specified and the input contains exactly 1 line, peco skips prompting you for a choice, and selects the only line in the input and immediately exits.

If there are multiple lines in the input, the usual selection view is displayed.

Specifies the exit status to use when the user cancels the query execution. For historical and back-compatibility reasons, the default is , meaning if the user cancels the query, the exit status is 0. When you choose , peco will exit with a non-zero value.

When specified, peco uses the specified prefix instead of changing line color to indicate currently selected line(s). default is to use colors. This option is experimental

When specified, peco executes the specified external command (via shell), with peco's currently selected line(s) as its input from STDIN.

Upon exiting from the external command, the control goes back to peco where you can keep browsing your search buffer, and to possibly execute your external command repeatedly afterwards.

To exit out of peco when running in this mode, you must execute the Cancel command, usually the escape key.

peco by default consults a few locations for the config files.

Below are configuration sections that you may specify in your config file:

You can change the query line's prompt, which is by default.

InitialMatcher has been deprecated. Please use instead.

Specifies the filter name to start peco with. You should specify the name of the filter, such as , , , and .

StickySelection allows selections to persist even between changes to the query. For example, when you set this to true you can select a few lines, type in a new query, select those lines, and then delete the query. The result is all the lines that you selected before and after the modification to the query are left in tact.

Default value for StickySelection is false.

Controls the buffer sized (in kilobytes) used by , which is responsible for reading the input lines. If you believe that your input has very long lines that prohibit peco from reading them, try increasing this number.

The same time, the default MaxScanBuferSize is 256kb.

As of v0.2.0, you can use a list of keys (separated by comma) to register an action that is associated with a key sequence (instead of a single key). Please note that if there is a conflict in the key map, the longest sequence always wins. So In the above example, if you add another sequence, say, , then the above will never be invoked.

As of v0.2.1, you can create custom combined actions. For example, if you find yourself repeatedly needing to select 4 lines out of the list, you may want to define your own action like this:

This creates a new combined action (the format of the name is totally arbitrary, I just like to put namespaces), and assigns that action to . When it's fired, it toggles the range selection mode and highlights 4 lines, and then goes back to waiting for your input.

As a similar example, a common idiom in emacs is that means "take the contents of this buffer and accept it", whatever that means. This adds exactly that keybinding:

Since v0.1.8, in addition to values below, you may put a prefix on any key item to use Alt/Option key as a mask.

Some keys just... don't map correctly / too easily for various reasons. Here, we'll list possible workarounds for key sequences that are often asked for:

Note: If in case below keymap seems wrong, check the source code in keymap.go (look for NewKeymap).

For now, styles of following 5 items can be customized in .

This is an experimental feature. Please note that some details of this specification may change

By default comes with , , , and filters, but since v0.1.3, it is possible to create your own custom filter.

The filter will be executed via as an external process, and it will be passed the query values in the command line, and the original unaltered buffer is passed via . Your filter must perform the matching, and print out to matched lines. You filter MAY be called multiple times if the buffer given to peco is big enough. See below.

Note that currently there is no way for the custom filter to specify where in the line the match occurred, so matched portions in the string WILL NOT BE HIGHLIGHTED.

The filter does not need to be a go program. It can be a perl/ruby/python/bash script, or anything else that is executable.

Once you have a filter, you must specify how the matcher is spawned:

specifies the command name. This must be searcheable via .

Elements in the section are string keys to array of program arguments. The special token will be replaced with the unaltered query as the user typed in (i.e. multiple-word queries will be passed as a single string). You may pass in any other arguments in this array. If you omit this in your config, a default value of will be used

specifies that the filter command should be invoked when peco has this many lines to process in the buffer. For example, if you are using peco against a 1000-line input, and your is 100 (which is the default), then your filter will be invoked 10 times. For obvious reasons, the larger this threshold is, the faster the overall performance will be, but the longer you will have to wait to see the filter results.

You may specify as many filters as you like in the section.

is equivalent to using in the command line.

No. https://github.com/peco/peco/issues/336#issuecomment-243939696 (Updated Feb 23, 2017: "Maybe" on cygwin https://github.com/peco/peco/issues/336#issuecomment-281912949)

Are you using raster fonts? https://github.com/peco/peco/issues/341

First, fork this repo, and get your clone locally.

This will create a binary in . Or, of course, you can just run

which will create the binary in the local directory.

Test it. In doing so, we may change the repo structure

Implement all(?) of the original percol options

Obviously, kudos to the original percol: https://github.com/mooz/percol Much code stolen from https://github.com/mattn/gof|||

peco - Simplistic interactive filtering tool