I made up a small language called Teddy. Its syntax is very similar to Swift, but with more restrictions so as to make its compiler more approachable.

This project is thus the Teddy compiler. That is, it’s a program written in Swift that compiles Teddy source code into C.

It’s currently half-baked, but I hope to continually refactor it and add more documentation.

Check out the demo here.

I built Teddy as an educational project to learn compiler construction. The project itself is small and modular enough that a beginner could understand its design, but not not so trivial that it only compiles simple expressions like .

Teddy is also a dependency-free project. This means each step of the compilation process (lexing, parsing, and code-generation) is implemented in Swift, from scratch.

I’ll assume you’re interested in learning how compilers (and thus languages) are built, but that you don’t have prior experience. That’s great! Here’s a quick overview of how a compiler works. The project is structured in this way as well.

A compiler is simply a program that accepts text of a certain syntax (i.e., our programming language’s syntax) and translates it into another language (i.e., the target language). It’s common for target languages to be assembly (or a similarly lower-level language), but this is not a requirement. Teddy compiles down to C for simplicity’s sake.

There are 5 major “phases” of a compiler:

Teddy implements 3 stages: lexing, parsing, and code generation. Semantic analysis and optimization can be added later.

Each stage has its own file:

Open up the project and navigate to (the “driver” of the compiler). You may have to replace the path to with your own absolute path for now. Then just hit run!

It will read in the Teddy code and execute the three compilation stages, logging its progress along the way.

Then, write your own Teddy code with some simple expressions, and step through the execution of the program. This will help build an intuition of how the compiler works.

You should expect Teddy to not support something rather than to expect it does. After all, it’s only intended to be an educational compiler.

Why isn’t there more information about the implementation itself?

I wanted to open-source it first in its current, half-baked form, rather than to never be satisfied with its documentation and never actually ship it.

I wrote a blog post on lexing, and I plan to write accompanying posts about parsing and code generation soon. But don’t let that hold you back from dipping your toes in the water!

I might also write a walkthrough post on how to add a new feature to the language in this project.

Awesome! Please file an issue. Or if you’d like to contribute and fix it yourself, feel free to open up a pull request! I’m also more than happy to help teach you how to fix it yourself, just reach out to me :-)

I know. I’ll refactor it soon.

I wanted to implement Swift-like associated enums in Teddy. Enum definitions and declarations work, but not anything more yet. Probably best to stay away from that for now.

Teddy is my friend’s very handsome cat. Here’s a photo.

For the following Teddy code:

The compiler will produce the following output (for the lexing, parsing, and code-generation stages):|||

Teddy-Compiler - A simple, educational compiler implemented in Swift.