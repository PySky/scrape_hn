In the MVP, the only way to access WebAssembly on the Web is through an explicit JS API which is defined below. (In the future , WebAssembly may also be loaded and run directly from an HTML tag—and any other Web API that loads ES6 modules via URL—as part of ES6 Module integration.)

WebAssembly JS API declaration file for TypeScript can be found here which enable autocompletion and make TypeScript compiler happy.

Whenever WebAssembly semantics specify a trap, a object is thrown. WebAssembly code (currently) has no way to catch this exception and thus the exception will necessarily propagate to the enclosing non-WebAssembly caller (either the browser or JavaScript) where it is handled like a normal JavaScript exception.

If WebAssembly calls JavaScript via import and the JavaScript throws an exception, the exception is propagated through the WebAssembly activation to the enclosing caller.

Because JavaScript exceptions can be handled, and JavaScript can continue to call WebAssembly exports after a trap has been handled, traps do not, in general, prevent future execution.

Whenever a stack overflow is happening in WebAssembly code, the same exception is thrown as for a stack overflow in JavaScript.

The object is the initial value of the property of the global object. Like the and objects, the object is a plain JS object (not a constructor or function) that acts like a namespace and has the following properties:

The initial value of the property is the String value .

This property has the attributes { [[Writable]]: , [[Enumerable]]: , [[Configurable]]: }.

The following intrinsic objects are added:

The function has the signature:

If the given argument is not a , then a is thrown.

Otherwise, this function performs validation as defined by the WebAssembly specification and returns if validation succeeded, if validation failed.

The function has the signature:

If the given argument is not a , the returned is rejected with a .

Otherwise, this function starts an asynchronous task to compile a as described in the constructor. On success, the is fulfilled with the resulting object. On failure, the is rejected with a .

The asynchronous compilation is logically performed on a copy of the state of the given captured during the call to ; subsequent mutations of the after return do not affect ongoing compilations.

In the future , this function can be extended to accept a stream, thereby enabling asynchronous, background, streaming compilation.

The function is overloaded based on types of its arguments. If neither of the following overloads match, then the returned is rejected with a .

This description applies if the first argument is a .

This function starts an asynchronous task that first compiles a from as described in the constructor and then queue a task to instantiate the resulting with as described in the constructor. After the instantiation task runs and before any subsequent steps are taken, other unspecified asynchronous tasks may be run. On success, the is fulfilled with a plain JavaScript object pair containing the resulting and . The 2 properties and of the returned pair are configurable, enumerable and writable.

On failure, the is rejected with a , , or , depending on the cause of failure.

The asynchronous compilation is logically performed on a copy of the state of the given captured during the call to ; subsequent mutations of the after return do not affect ongoing compilations.

This description applies if the first argument is a instance.

This function asynchronously queues a task that instantiates a from and as described in the constructor. After the instantiation task runs and before any subsequent steps are taken, other unspecified asynchronous tasks may be run. On success, the is fulfilled with the resulting object. On failure, the is rejected with a , , or , depending on the cause of failure.

A object represents the stateless result of compiling a WebAssembly binary-format module and contains one internal slot:

The constructor has the signature:

If the NewTarget is , a exception is thrown (i.e., this constructor cannot be called as a function without ).

If the given argument is not a , a exception is thrown.

Otherwise, this function performs synchronous compilation of the :

The initial value of the property is the String value .

This property has the attributes { [[Writable]]: , [[Enumerable]]: , [[Configurable]]: }.

The function has the signature:

If is not a , a is thrown.

This function returns a new every time it is called. Each such is produced by mapping each of moduleObject.[[Module]].exports to the Object where is decoded as UTF8 and is mapped to one of the String values , , , .

Note: other fields like may be added in the future.

The returned is populated in the same order exports appear in the WebAssembly binary's exports table.

The function has the signature:

If is not a , a is thrown.

This function returns a new every time it is called. Each such is produced by mapping each of moduleObject.[[Module]].imports to the Object where and are decoded as UTF8 and is mapped to one of the String values , , , .

Note: other fields like may be added in the future.

The returned is populated in the same order imports appear in the WebAssembly binary's imports table.

The function has the signature:

If is not a , a is thrown.

Let be the result of ( ).

This function returns a new every time it is called. Each such is produced by mapping each custom section (i.e., section with 0) whose field (decoded as UTF-8) is equal to to an containing a copy of the section's . (Note: does not include or .).

The is populated in the same order custom sections appear in the WebAssembly binary.

A is a cloneable object which means it can be cloned between windows/workers and also stored/retrieved into/from an IDBObjectStore. The semantics of a structured clone is as-if the binary source, from which the was compiled, were cloned and recompiled into the target realm. Engines should attempt to share/reuse internal compiled code when performing a structured clone although, in corner cases like CPU upgrade or browser update, this may not be possible and full recompilation may be necessary.

Given the above engine optimizations, structured cloning provides developers explicit control over both compiled-code caching and cross-window/worker code sharing.

A object represents the instantiation of a into a realm and has one internal slot:

The constructor has the signature:

If the NewTarget is , a exception is thrown (i.e., this constructor cannot be called as a function without ).

If is not a , a is thrown.

Let be the .

If the parameter is not and is not Object, a is thrown. If the list of is not empty and is not Object, a is thrown.

Note: Imported JavaScript functions are wrapped as host function values in the following algorithm. For the purpose of the algorithm, a new host function value is always generated fresh and considered distinct from any other previously created host function value, including those wrapping the same JavaScript function object. Consequently, two closure values are considered equal if and only if:

Let , and be initially-empty lists of callable JavaScript objects, objects and objects, respectively.

Let be an initially-empty list of values.

For each in :

Let be the result of creating a new by calling given and . If this terminates with a error, throw a ; if it causes a trap, throw a ; all other exceptions are propagated to the caller. Among other things, this function performs the following observable steps:

The following steps are performed before the function executes:

Let be a list of (string, JS value) pairs that is mapped from each external value in as follows:

Let be a new frozen plain JS object with [[Prototype]] set to Null and with properties defined by mapping each export in to an enumerable, non-writable, non-configurable data property. Note: the validity and uniqueness checks performed during module validation ensure that each property name is valid and no properties are defined twice.

Let be a new object setting the internal slot to and the slot to .

The initial value of the property is the String value .

This property has the attributes { [[Writable]]: , [[Enumerable]]: , [[Configurable]]: }.

This is an accessor property whose [[Set]] is Undefined and whose [[Get]] accessor function performs the following steps:

Let be the value. If is not a , a is thrown.

A function with function index from an is reflected to JS via a new kind of Exported Function Exotic Object. Like Bound Function Exotic Object, Exported Functions do not have the normal function internal slots but instead have:

as well as the internal slots required of all builtin functions:

Exported Functions also have the following data properties:

executes in the [[Realm]] of the callee Exported Function. This corresponds to the requirements of builtin function objects in JavaScript.

Exported Functions do not have a [[Construct]] method and thus it is not possible to call one with the operator.

A object contains a single linear memory which can be simultaneously referenced by multiple objects. Each object has two internal slots:

The constructor has the signature:

If the NewTarget is , a exception is thrown (i.e., this constructor cannot be called as a function without ).

If is not Object, a is thrown.

If ( ), then let be ( ( , )). If is smaller than , then throw a . Otherwise, let be .

Let be the result of calling given arguments and . Note that and are specified in units of WebAssembly pages (64KiB).

Let be a new whose [[ArrayBufferData]] aliases and whose [[ArrayBufferByteLength]] is set to the byte length of .

Any attempts to other than the detachment performed by shall throw a

Return a new instance with [[Memory]] set to and [[BufferObject]] set to .

The initial value of the property is the String value .

This property has the attributes { [[Writable]]: , [[Enumerable]]: , [[Configurable]]: }.

The method has the signature:

Let be the value. If is not a , a is thrown.

Let be the current size of memory in pages (before resizing).

Perform with delta . On failure, a is thrown.

Assign to a new whose [[ArrayBufferData]] aliases and whose [[ArrayBufferByteLength]] is set to the new byte length of .

This is an accessor property whose [[Set]] is Undefined and whose [[Get]] accessor function performs the following steps:

If is not a , a is thrown. Otherwise return .

A object contains a single table which can be simultaneously referenced by multiple objects. Each object has two internal slots:

The constructor has the signature:

If the NewTarget is , a exception is thrown (i.e., this constructor cannot be called as a function without ).

If is not Object, a is thrown.

Let be the result of calling ( , ). If is not the string , a is thrown. (Note: this check is intended to be relaxed in the future to allow different element types.)

If ( ), then let be ( ( , )). Otherwise, let be None.

If is not None and is smaller than , then throw a .

Let be the result of calling given arguments , and .

Let be a new empty array of elements, all with value .

Return a new instance with [[Table]] set to and [[Values]] set to .

This is an accessor property whose [[Set]] is Undefined and whose [[Get]] accessor function performs the following steps:

Let be the value. If is not a , a is thrown.

The method has the signature:

Let be the value. If is not a , a is thrown.

Let be the current length of the table (before resizing).

Perform , with delta . On failure, a is thrown.

This method has the following signature

Let be the value. If is not a , a is thrown.

Let be the result of ( ).

If is greater or equal than the length of , a is thrown.

This method has the following signature

Let be the value. If is not a , a is thrown.

If is not an Exported Function Exotic Object or , throw a .

Let be the result of ( ).

If is greater or equal than the length of , a is thrown.

If is , let be ; otherwise, let be .

The initial value of the property is the String value .

This property has the attributes { [[Writable]]: , [[Enumerable]]: , [[Configurable]]: }.

To coerce a WebAssembly to a JavaScript value:

Assert: the WebAssembly value's type is not .

If the WebAssembly value is optional, then given , return JavaScript value .

To coerce a JavaScript value to a given WebAssembly ,

Assert: the target value type is not .

If the value type is optional, then given , the JavaScript value is ignored.

To convert a JavaScript value to an unsigned integer in the range [0, ]:

If is negative or greater than , is thrown.

and the following JavaScript, run in a browser:|||

design - WebAssembly Design Documents