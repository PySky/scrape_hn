Learn how to use Faker library to generate fake data sets in your Python unit tests.

When writing unit tests, you might come across a situation where you need to generate test data or use some dummy data in your tests. If you already have some data somewhere in a database, one solution you could employ is to generate a dump of that data and use that in your tests (i.e. fixtures).

However, you could also use a package like to generate fake data for you very easily when you need to. This tutorial will help you learn how to do so in your unit tests.

For this tutorial, it is expected that you have Python 3.6 and Faker 0.7.11 installed.

Let's see how this works first by trying out a few things in the shell.

Before we start, go ahead and create a virtual environment and run it:

Once in the environment, install .

After that, enter the Python REPL by typing the command in your terminal.

Once in the Python REPL, start by importing from :

Then, we are going to use the Faker class to create a object whose methods we will use to generate whatever fake data we need.

As you can see some random text was generated. Yours will probably look very different.

Let us try a few more examples:

You can see how simple the Faker library is to use. Once you have created a factory object, it is very easy to call the provider methods defined on it. You should keep in mind that the output generated on your end will probably be different from what you see in our example â€” random output.

If you would like to try out some more methods, you can see a list of the methods you can call on your object using .

You can also find more things to play with in the official docs.

Let's now use what we have learnt in an actual test.

If you are still in the Python REPL, exit by hitting . Do not exit the instance we created and installed Faker to it in the previous section since we will be using it going forward.

Now, create two files, and , in a folder of your choice. Our code will live in the example file and our tests in the test file.

Look at this code sample:

This code defines a User class which has a constructor which sets attributes , , and upon object creation.

It also defines class properties , and which we can use to get a particular user object's properties.

In our test cases, we can easily use Faker to generate all the required data when creating test user objects.

You can see that we are creating a new User object in the function. Python calls the function before each test case is run so we can be sure that our user is available in each test case.

The user object is populated with values directly generated by Faker. We do not need to worry about coming up with data to create user objects. Faker automatically does that for us.

We can then go ahead and make assertions on our User object, without worrying about the data generated at all.

You can run the example test case with this command:

At the moment, we have two test cases, one testing that the user object created is actually an instance of the class and one testing that the user object's username was constructed properly. Try adding a few more assertions.

Faker comes with a way of returning localized fake data using some built-in providers. Some built-in location providers include , , , and to name a few.

Let's change our locale to to Russia so that we can generate Russian names:

In this case, running this code gives us the following output:

Providers are just classes which define the methods we call on objects to generate fake data. In the localization example above, the method we called on the object is defined in a provider somewhere. You can see the default included providers here.

Let's create our own provider to test this out.

To define a provider, you need to create a class that inherits from the . That class can then define as many methods as you want. Our example only has one method but more can be added.

Once your provider is ready, add it to your Faker instance like we have done here:

Here is what happens when we run the above example:

Of course, you output might differ. Try running the script a couple times more to see what happens.

Sometimes, you may want to generate the same fake data output every time your code is run. In that case, you need to seed the fake generator.

You can use any random number as a seed.

Running this code twice generates the same 10 random names:

If you want to change the output to a different set of random output, you can change the seed given to the generator.

To use Faker on Semaphore, make sure that your project has a file which has listed as a dependency. If you used to install Faker, you can easily generate the file by running the command . This will output a list of all the dependencies installed in your and their respective version numbers into a file.

After pushing your code to git, you can add the project to Semaphore, and then configure your build settings to install Faker and any other dependencies by running . That command simply tells Semaphore to read the file and add whatever dependencies it defines into the test environment.

After that, executing your tests will be straightforward by using .

In this tutorial, you have learnt how to use Faker's built-in providers to generate fake data for your tests, how to use the included location providers to change your locale, and even how to write your own providers.

We also covered how to seed the generator to generate a particular fake data set every time your code is run.

Lastly, we covered how to use Semaphore's platform for Continuous Integration.

Feel free to leave any comments or questions you might have in the comment section below.|||

