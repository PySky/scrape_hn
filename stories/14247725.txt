Learn more about how Erlang Solutions can support you with Elixir Development or sign up to our mailing list to be the first to know about our future blog posts.

Yes, you’ve read that right. In this tutorial we are going to rebuild the amazing security system featured in the 1996 all time classic Mission Impossible. We will use a Raspberry Pi, lots of sensors and we’ll write the code in Elixir.

Just a quick refresher for those who haven’t seen the movie. Ethan Hunt is a super spy trying to infiltrate the CIA headquarters in order to steal a valuable list of double-agents. Unfortunately, the list is safely stored in a highly secure bunker with the following security mechanisms:

Before we start, let me give you the best advice I received when I started developing on a Raspberry Pi: get yourself a USB to TTL serial cable! You can find them on adafruit (link, tutorial) and these little devices will save you the trouble of having to connect an external monitor, a keyboard and a mouse in order to use your Raspberry. Just connect the cable, fire up and boom you’re in.

Now we need some sensors to build our security system, and I’ve found a set made by Sunfounder that has everything that we need and even more (link). I’m in no way affiliated with the company, but they posted all the C and Python code to control them on github so I think they’re pretty cool.

The last thing we need is Elixir! We can install it on our Raspberry Pi following this tutorial.

We can now create the project using our beloved :

and add as a dependency in our file:

This library will provide us the abstractions for controlling the Raspberry GPIO pins and I2C bus. You can find out more about the library here. So let’s install and compile:

Grab your laser emitter module and connect it to the breadboard in this way:

Now we can start writing the code for our security system:

We connect the GPIO pin 17 using , specifying we’re using it as an output. Then we spawn a recursive loop function which repeatedly turns the laser on and off. We can run our app with and the laser will start blinking. How cool is that?

Also note that the default behaviour is to write for turning something on and for turning it off. To make the code easier to understand I just added the and helpers.

Here’s a picture of the setup on my desk:

Now that we have the laser blinking, we can add a sensor which measures how much light shines through it, also known as a photoresistor. The gotcha is that this is an analog sensor, so we need an analog-to-digital converter to be able to read off the digital value in our program. Here’s the diagram:

In order to connect to the AD converter in our program, we have to use the I2C bus. Unfortunately the I2C bus isn’t enabled by default, so we’ll have to do it ourselves:

As soon as the Raspberry reboots, you can connect the circuitry and check that the bus is visible:

Amazing, we can see that the system recognises the AD converter and gives it a certain bus address ( ). We can now connect our photoresistor output with one of the inputs of the AD converter ( in this example).

As you can see, we now connect to the I2C bus using the address we found and pass the process PID to the loop. We’ve added a magic function that is able to read off the value of the photoresistor. You don’t really need to understand how it works, I’ve mostly copied it from the Python implementation while glancing at the datasheet of the ADC converter.

If we run the app with , align the beam (pun intended) we should see this sort of output.

But if we interrupt the beam with our finger we should see the value rise.

It works! Now we can just replace the function with this:

And we should see something like this:

Nice! We can pat ourselves on the back and go for a walk and a cup of coffe.

What security system would be complete without a blazing, ear-deafening, blasting alarm? In our case we are going to use an active buzzer.

By this time, it should be pretty easy to connect it to the board. We are going to use GPIO pin 18 and change the function to look like this:

and the function to this:

If we interrupt the laser beam with our finger, we should hear the buzzer beeping. Hooray!

Now that we have the basic structure for our security system, we just need to add the other sensors and wire them up to finish it. We are going to add:

We are going to connect the first two analog sensors to the and inputs of our AD converter, while we are going to connect the last one to the GPIO pin 27. Here is how the setup looks now:

And here is the full code:

Let’s take it for a spin!

So there we have it! In 70 lines of code we implemented a full fledged Mission Impossible security system, with laser, temperature, noise and vibration detection.

So now that we have our app working in Raspbian, wouldn’t it be cool to flash it to a SD card so that as soon as we connect our Raspberry, our security system comes online automatically?

Well, we can! Thanks to the amazing nerves project, it’s super easy to do. Nerves will take care of all the hard parts of working on an embedded device, such as cross compiling the application, optimizing the runtime environment and even flashing the image to the SD card.

First of all, we need to install it on our machine following this simple tutorial.

Now on we can create our project specifying the desired target (rpi2 for the Raspberry Pi 2 and rpi3 for Raspberry Pi 3).

And add as a dependency in our configuration file:

If we replace with our program, we can get all dependencies and compile them as an app:

Amazing! We can now build the firmware image with a simple:

If that worked, we should be able to see an image in the folder:

We also can see that the image is only 19 megabytes. Let’s insert an SD card and burn the image (this will completely erase the SD card as well):

Now we can pop out our SD card and insert it into our Raspberry Pi and it should start the app as soon as the kernel finishes booting!

Here’s a video of me doing the same app live on stage at last year’s Elixir London conference:



 Hope you had fun following this tutorial, feel free to comment if you bump into any issues :)

Learn more about how Erlang Solutions can support you with Elixir Development or sign up to our mailing list to be the first to know about our future blog posts.|||

Yes, you've read that right. In this tutorial we are going to rebuild the amazing security system featured in the 1996 all time classic Mission Impossible. We will use a Raspberry Pi, lots of sensors and we'll write the code in Elixir.