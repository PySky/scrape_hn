TL;DR: There is a popular mantra amongst developers that goes like this write, test and deploy. In this tutorial, I'll show you how to deploy your PHP apps to different cloud server platforms such as Google Cloud, Microsoft Azure, Heroku, IBM Bluemix, and others.

Cloud servers are basically virtual servers that run within a cloud computing environment. There are various benefits to hosting and deploying your applications on the cloud. They are:

In fact, many companies have moved their infrastructure to the cloud in order to reduce cost and complexity. It's a great option for small, mid-sized, and enterprise scale businesses. If you write a lot of tutorials and do POCs (Proof-of-concepts) like me, it's also a great choice for you!

Next, let's cover how to deploy php applications to several cloud server platforms.

Heroku is a cloud platform that helps you deploy and host your applications the modern way. It does all the heavy-lifting for you. Let's quickly take a look at how to deploy and maintain a PHP application on heroku.

If you don't have an account, go ahead and create one on heroku.com. Go ahead and install the heroku cli. Once you have that installed, go ahead and clone this simple starwars PHP application.

Make sure you follow these steps below:

Now, we have a file which contains the list of packages that the application needs. Go ahead and run on your local machine to install these packages. Get composer here if you don't have it installed already.

Go ahead and run the app. The app should be running like so:

Awesome! Our app works locally. Time to deploy! The first thing we'll do is to add a to the root directory of our app.

Create a new file called without any file extension and add this:

If you are interested in using Nginx as the web server, then the content of your Procfile would be:

Now that you have added the Procfile, go ahead and upload the project to GitHub or Bitbucket. Mine is starwazapp.

Head over to dashboard.heroku.com/apps and create a new app like so:

Create a new app from the dashboard

Give it a name like so:

Choose a deployment method. In our case, we'll use GitHub like so:

Now, type the name of the repo in the circled area and click Search. Heroku will search for your repo under your GitHub account and display it like so

Click on like so

Heroku will connect the repo like so

Scroll down a bit. This is the interesting part. Heroku allows you to enable automatic deploys with the push of a button. It also gives you an option to wait for your continuous integration process to pass before deploying to production. In a real world app, you'll have a test suite for your codebase. A developers' code runs against the test suite. If it passes, the code will be pushed to production.

Click to enable automatic deploys. We don't have any CI service, so we don't need to enable that option. Now, let's deploy the master branch.

Click on the Deploy branch. Heroku will scan through your file, install the necessary packages and deploy!

Click on the View button to check out your app.

Ooops! We are experiencing a 500 error. Aha, we haven't set any environment variables yet. Locally, we had a file. On heroku, there is no file, but there is a way to set environment variables. Go to Settings on your dashboard and add them as config variables like so:

Oh, one more thing! The new callback url in my case is . Make sure you add your new callback url to the Allowed Callback URLs in your Auth0 dashboard.

Your app should be live & working now!

Let's make a small change to our app and see how effortlessly it deploys it to production.

Open and change the content of the tag from Heard you don't want to migrate to PHP 7? Dare us! to . Commit and push to your master branch. Now, go to the Activity tab of your Heroku Dashboard and notice the build. Reload your app and you'll see the difference.

Let's quickly talk about how to handle database, caching and cron jobs. On heroku, you can use ClearDB and Postgres with PHP. Add ClearDB to your app like so:

This command provisions a new ClearDB database returns the URL that the app will use to access it. All you simply need to do is add it to your app as an environment variable and parse it in your app config like so:

You can tweak that to suit PDO style. Add Postgres to your app like so:

Head over to the addons, you'll see other kinds of databases that you can use with your PHP app.

Heroku provides an array of addons for caching, from to to and others. You can check out how to use memcache with PHP on heroku.

Finally, you can use the Heroku Scheduler for running jobs on your app at scheduled time intervals.

The Google Cloud platform is a giant and trusted cloud platform that a lot of companies all over the world have adopted in deploying and hosting their apps. Your apps will be running on the same infrastructure that powers all of Google's products. What other form of confidence do you need to assure you that your application will scale well enough to serve your thousands and millions of users easily?

Google Cloud offers different options for hosting PHP apps. The platform offers App Engine (Full managed), Compute Engine (Scalabe VMs) and Container Engine (Kubernetes Clusters).

In our case, we'll use App Engine. It abstracts the infrastucture away. Let's jump into deploying our famous Star Wars app to Google App Engine.

When using Google App Engine, you can choose the Standard or Flexible environment. The latter, like the name implies allows you to install any PHP extension that works on Debian Linux, has a configurable Nginx web server, writable filesystem, latest PHP versions and allows you to run deployment scripts using .

We'll use the flexible environment. So, go ahead and create a new project. Click on Create, give the project a name, select the region you'll like to serve your app and enable billing.

Now, download the Google SDK and install the Google Cloud tools.

Go ahead and create an file in the root of our project like so:

So, our file has been pushed to Google Cloud. An alternative to using that is to add the environment variables to the file like so:

Now, deploy your application from your console by running .

Note: Now grab the URL, in my case it is and add to Allowed Origins(CORS) and Allowed Callback URLs in your Auth0 dashboard. Also add the URL to in your file.

Run again to provision a new version of the app. Check out your app now. It should be live like so:

Google Cloud provides a Cloud SQL Instance platform. Check out how to configure, connect and create MySQL instances for your app.

Oh, You can also use phpMyAdmin on Google App Engine.

Google App Engine includes implementations of the standard Memcache and Memcached APIs. Check out how to use Memcache in your app on Google Cloud.

The App Engine Cron Service allows you to configure regularly scheduled tasks that operate at defined times or regular intervals. Check out how to schedule cron jobs and use task queues with PHP on Google Cloud.

It's relatively easy to deploy Laravel, Symfony and Wordpress apps to the Google Cloud Platform.

IBM Bluemix allows you to easily configure, deploy and scale on a powerful, high performance global cloud infrastructure. Let's jump into deploying our famous Star Wars app to IBM Bluemix.

Sign up on Bluemix like so:

Go ahead and create an organization and space. I named my space .

Now, go ahead and install the Cloud Foundry CLI. Once you have done that, go head and login from your terminal like so:

The next step is to create a file in the root directory of the app. The includes basic information about your app, such as the name, how much memory to allocate for each instance and the route. Our manifest file should look like so:

You can also explicitly specify the buildpack in the manifest file. Thankfully, Cloud Foundry automatically detects which buildpack is required when you push an app.

Finally, deploy your app by running the following command like so:

has to be a unique name.

Try to run the app now. In my case, the url is . Oops, a 500 error. We haven't loaded our environment variables yet. How do we do that with Bluemix.

You can either use the Cloud Foundry CLI or the Bluemix user interface to set environment variables. Let's use the Bluemix user interface. So, follow the steps below:

Note: Now grab the URL, in my case it is and add to Allowed Origins(CORS) and Allowed Callback URLs in your Auth0 dashboard.

Now check out your app. Your app should be live!

Cloud Foundry provides the ability to create services. IBM Bluemix offers the Cloudant NoSQL database(the Bluemix name for CouchDB). So, you can use the tool to create database services like so:

IBM Bluemix also offers the ClearDB MySQL service. So, you can use the tool to create one like so:

You can always use the Cloud Foundry tool to check out a lot of things such as logs, environment variables like so:

IBM Bluemix also offers Redis Cloud, a fully-managed cloud service for hosting and running your Redis dataset in BlueMix in a highly-available and scalable manner.

IBM Bluemix provides the Workload Scheduler service. This service allows you to integrate your application with the capability to schedule workflows. Far beyond Cron, exploit job scheduling within and outside Bluemix. Easily create workflows in your application to run on a regular basis, at a specific time, on event basis (for example, when a file is deleted or updated), according to your needs. You can either use the Workload Scheduler User Interface or use the APIs.

Get started with Scheduling Jobs here.

Oh, one more thing, here is how to deploy your Laravel app on IBM Bluemix.

Microsoft Azure is another massive cloud platform that allows you to scale your apps easily. Let's get started with deploying our Star Wars app on Azure.

With Microsoft Azure, you can deploy via:

In our case, we'll set up deployment with Git.

Microsoft Azure offers Azure Redis Cache. It is based on the popular open source Redis cache. It's easy to create and use like so:

Check out the documentation on how to use it.

For scheduling and running tasks, Azure offers a Scheduler. It allows you to:

Check out how to create and manage jobs using the Scheduler.

We already talked a little about setting up a database earlier while we were deploying our app, but let's quickly look at how to setup a MySQL database.

Laravel developers can easily configure a MySQL database for their apps on Azure.

More companies use AWS(Amazon Web Services) for storing all sorts of data ranging from images, mp3 files to videos than any other cloud platform. In fact, a lot of organizations like Uber, Spotify, Salesforce use Amazon Web Services wholy for hosting, deployment and infrastructure. AWS has a ton of developer products.

The service we'll use for deploying our famous StarWars app is Amazon Elastic Beanstalk. Let's get started.

Check out how to deploy:

You can use an Amazon Relational Database Service (Amazon RDS) DB instance to store data gathered and modified by your application. The database can be attached to your environment and managed by Elastic Beanstalk, or created and managed externally. Check out how to easily add a DB instance to your app.

For caching, Amazon Web Services offers ElastiCache. It is a web service that makes it easy to deploy, operate, and scale an in-memory data store or cache in the cloud. Amazon ElastiCache supports two open-source in-memory engines:

Amazon ElastiCache automatically detects and replaces failed nodes, reducing the overhead associated with self-managed infrastructures and provides a resilient system that mitigates the risk of overloaded databases, which slow website and application load times. Through integration with Amazon CloudWatch, Amazon ElastiCache provides enhanced visibility into key performance metrics associated with your Redis or Memcached nodes.

Companies like AirBnb, Healthguru, PlaceIQ and Tokyo Data Network use ElastiCache for caching at multiple layers spanning HTML fragments, results of expensive DB queries, ephemeral session data and search results.

Here is an excellent post on building a PHP visitor counter with ElastiCache and Elastic Beanstalk

You can set up a cron job on Elastic Beanstalk. Learn how to run cron jobs on Amazon Web Services(AWS) Elastic Beanstalk.

Laravel Forge , created by Taylor Otwell is a platform that helps you deploy and launch your application in minutes. It does the heavy-lifting for you. Forge takes care of provisioning your servers on popular cloud hosting providers such as Linode, Digital Ocean and AWS. It was initially built for Laravel apps, but now it has support for virtually any PHP application.

Laravel Forge allows you to easily do the following apart from provisioning servers:

Matt Stauffer has an amazing post on deploying your first Laravel app to Forge.

James Fairhurst also has a great guide on using Laravel Forge to setup an AWS Server.

Finally, the most popular educational PHP platform, laracasts.com has a series on server management with Forge

Envoyer is a platform that allows zero downtime PHP deployment. It allows you integrate with various services such as Gitlab, Slack, Bitbucket e.t.c.

With Envoyer, you can perform:

Deployer is a deployment tool for PHP. It allows you to do the following:

It works with Laravel, Symfony, CakePHP, Yiiframework, Zend, FuelPHP, Drupal, Wordpress, and Magento. Check out this excellent article on deploying PHP applications with Deployer.

There is no way we can cover all the different options available for deploying PHP applications. PHP is an enterprise language that has evolved over the years, thus calling for more efficient ways for deploying PHP apps from a local machine to production. Hopefully, this guide covers all your basic needs for deploying your PHP apps to all the major cloud providers. However, there is another resource I recommend for extensive knowledge in learning to deploy PHP applications.

How have you been handling your deployments? Please, let me know in the comments section below!|||

Learn how to deploy PHP applications on different platforms.