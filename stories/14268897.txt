I remember when I first started using React in late 2015. There was a debate going on about whether or not JSX was a good thing. I don’t know that there’s a definite answer, but all the examples used it, and it’s still the predominant way of writing React components.

Here’s an example of JSX that I got from the Redux Todo example.

I would have added “requires compilation,” but you’re going to be doing that anyway, so it’s not really a con.

There are 2 other front-end JS frameworks that I’ve used which use a functionally-reactive paradigm similar to React, but they have a different convention for rendering components with JavaScript. They use functions that are basically React’s createElement function. The frameworks I’m talking about are Mithril and Skatejs. Mithril uses “m”, for Mithril, and Skate uses “h”, for hyperscript, but in actuality Mithril supports hyperscript while React and Skate do not. By actual hyperscript, I mean the ability to include classNames and IDs inside of the element string.

For our purposes, let’s just consider hyperscript as a way of describing the view using functions like the ones above. The arguments are in the order of element, attributes, children. Here’s a small example that includes children.

So, having become a bit weary of the cons that I mentioned for JSX, I started bringing this convention into my React code. Let’s re-write our JSX example using this style.

Now, if you’ve never seen this syntax for rendering with JS, it might not look any better than JSX, but consider that all of the cons we listed above have just vanished. Brackets are for objects only, and there’s no context switching. We’re in JavaScript the whole time. It’s still not great though. It gets messy when you have a lot of attributes and children. Keeping track of the closing parentheses can be a lot of work too. So where do we go from here? Enter Elm.

I’m not going to go into detail about Elm. You should definitely check it out. One convention of coding in Elm is using “comma-first syntax.” Elm also has view functions similar to the hyperscript examples above, and comma-first syntax is also used in the view functions. Elm is not JavaScript, but we can do that too.

To show you what I mean by comma-first, in case you haven’t seen it, here’s an example of a JS object written in comma-first syntax.

You can see this used in the npm documentation. One thing to note is that the main object and all nested objects always start and stop at the same indentation. And all the object items, except the first, start with commas at that same indentation, so you can scan down and immediately see the start, stop, and items of an object. This will come in handy when we use it for hypertext.

Let’s rewrite the hypertext example to use comma-first syntax.

It’s a bit difficult to see the advantage on a small component, so I’ll include a larger example, with loops, conditionals, etc. Let’s say we are making a timeline that has historical events on it. This might be what it looks like to render one item on the timeline.

Notice that if you ever need to comment out a piece of this, you can just select the block and hit your keyboard shortcut for commenting and BAM! It’s way easier than commenting in JSX. And even though we have a very complex nested structure of element function calls, it’s very easy to tell where an element starts and stops, and what are it’s children.

Anyways, I’ve been writing React like this for a couple of months now, and I absolutely love it.|||

I remember when I first started using React in late 2015. There was a debate going on about whether or not JSX was a good thing. I don’t know that there’s a definite answer, but all the examples used…