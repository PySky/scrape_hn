Cron is a scheduling utility that runs as a daemon process in the background of Unix-like systems. It's extremely popular for running periodic tasks, which can be anything you choose, like initiating a backup or clearing data from a database.

You can add tasks to Cron via the command line using the command. Using the argument will put it in to edit mode and open your default editor where you can add the job. The syntax of a command looks like this:

The numbers 1-5 represent different time increments you can specify for scheduling the job. More details below:

The argument is optional and is used to specify which user the command should be run as. You can also specify the user using the option. There are a lot more options and variations of the scheduling parameters, but we won't go in to any more detail here. There are plenty of other resources on the internet where you can find these details.

Here is a simple example of how to schedule a script to be run by Cron:

Cron would then run this script at 5:45pm on the 3rd day of every month. Although the syntax can be a bit confusing at first, it is actually a very powerful way to schedule repeating tasks. This format has been adopted by many programs and utilities for specifying schedules.dq4

The Cron utility has become synonymous with scheduling tasks, which is how got its name. It doesn't actually use or interface with the Cron utility underneath, but instead it simply schedules and runs periodic tasks for you using Node's function. It does this by parsing the Cron format schedule you specify, figures out when the next 'tick' should be, and sets the timeout accordingly.

To use , you will have to schedule a function to run programmatically, which might actually be more convenient for you than having to mess with the command line. A simple function can be scheduled like this:

When running this code, you'll see the text 'Function executed!' printed to the console once every minute.

You can even get a bit fancier and specify the timezone in which the task should run. Or, another option, is to tell to not start the job yet. This way you can initialize the job and then use the and methods only when you need it. See the full documentation for a full list of parameters and options.

Personally, I really like because of how easily you can programmatically schedule code to run. And since it runs on Node, you can use it on any system that supports Node (like Windows), and not just Unix-like systems. So whatever you're using it for, the code is more system independent than it would be if it used Cron directly.

The biggest downside, in my opinion, is that since it doesn't use Cron underneath, we don't get the persistence that we would have otherwise with Cron. What I mean by this is on a system restart, our 'job' wouldn't be running anymore. Instead, you'll have to do some extra work to get the Node process running again, like setting it up to run on startup by placing/linking it in . It isn't very hard to do, but it also isn't very convenient.|||

