Supported languages include Ruby, Node.js, Elixir and more. Supporting a new language is as simple as this plugin API.

Copy-paste the following into command line:

Depending on your OS, run the following

If you use zsh or any other shell, replace with the config file for the respective shell.

For fish, you can use the following:

That's all ~! You are ready to use asdf

Plugins are how asdf understands how to handle different packages. Below is a list of plugins for languages. There is a super-simple API for supporting more languages.

If you want to update a specific package, just say so.

If a plugin supports downloading & compiling from source, you can also do this (replace with the branch/tag/commit). You'll have to use the same name when uninstalling too.

writes the version to , creating it if needed.

Alternatively, if you want to set a version only for the current shell session or for executing just a command under a particular tool version, you can set an environment variable like .

The following example runs tests on an Elixir project with version . The version format is the same supported by the file.

Add a file to your project dir and versions of those tools will be used. Global defaults can be set in the file

This is what a file looks like:

The versions can be in the following format:

To install all the tools defined in a file run the command with no other arguments in the directory containing the file.

You can view/modify the file by hand or use and to manage it.

Add a file to your home directory and asdf will use the settings specified in the file. The file should be formatted like this:

Copyright 2014 to the end of time (MIT License)|||

asdf - Extendable version manager with support for Ruby, Node.js, Elixir, Erlang & more