Or grab the latest release from https://github.com/ejholmes/walk/releases.

NOTE: is currently not considered stable, and there may be breaking changes before the 1.0 release.

is built on top of a very simple concept; when you want to build a target, executes a file called to determine:

For example, if you wanted to build a program called from main.c and parse.c, you might write a like this:

The first argument is the "phase", which will either be `deps` or `exec`. In the `deps` phase, the Walkfile should print the name of the targets that this phase= The second argument is the name of the target, like `prog`, `parse.o`, etc. target= prog) Prog depends on the object files we'll build from source. We simply deps) main.o parse.o ;; exec) gcc -Wall -o ;; ;; A generic recipe for building a .o file from a corresponding .c file. .o) deps) ;; exec) gcc -Wall -o -c ;; ;; When invoking walk(1) without any arguments, it defaults to a target called all) deps) prog ;; ;; In general, it's good practice to include a fallback rule like this, in case someone tries to build a target that we don't know how to build (or .c| .h) ;; ) 1 ;;

When you execute , the following happens internally:

Ultimately, all of our targets end up getting invoked, and is built:

And that's it. Wait, that's it? That's it. is quite simply, just syntactic sugar over executing a binary as a graph.|||

walk - A fast, general purpose, graph based build and task execution utility.