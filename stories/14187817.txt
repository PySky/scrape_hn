In the following post, we're going to explore what it's like to migrate a project from Relay Classic (yes, that's what the old API is called now) to its Modern counterpart. The project we're going to convert is a simple Todo app (TodoMVC). You can find the code for it on Github . Note that the repo contains a branch , representing the code before the conversion as well as a branch called with the upgraded code.

Facebook not only released a new version of Relay, they also included a dedicated API to help transition to it: Relay Compat . This allows for developers to gradually migrate their existing code instead of having to go through one huge update process that would be accompanied by much sweat and tears.

The idea of Relay Compat is to allow updating the API while still working the old Relay runtime. This allows developer to update their apps component by component to using the new API without compatibility issues. The compatibility mode is available out-of-the-box with the new release candidate and can be accessed by importing from instead of just .

Note that we're not using any more to include sub-dependencies. Instead we're using regular GraphQL syntax to refer to a fragment ( ). This means that all our fragments now live in a global namespace which greatly eases static analysis (read Sashko's article for more details on this). By convention, each fragment should be composed of the file name and the prop that it injects into the component: . In compatibility mode, this convention is actually a hard requirement!

A major change in Relay Modern is a new mutation API. Instead of subclassing , we can now call and pass in an environment as well as an object to describe the mutation. In that object, we'll provide all necessary information about the mutation and how we want Relay to perform it.

The last step is simply cleaning up all the imports where we used and . Since we ensured that all our components are now using the new Relay APIs, we don't have to pull in the old Relay code any more. So, at this point running through our source files and adjusting all Relay imports to will do.

You can view the final state of the codebase here . Another important info for projects to be upgraded and making use of is that Relay Modern currently isn't supported by react-router-relay, but can be included with a slight workaround as explained in this GitHub issue .|||

