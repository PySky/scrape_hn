periph.io/x/periph is a standalone library with no external dependency to interface with low-level board facilities exposed by the OS or leveraged against OS’ will. It can be viewed as a lower level layer than Gobot, and yes we’re discussing to collaborate in the future!

This library is unstable. Breaking API changes occur frequently.

If you want to use , please vendor periph first and frequently roll.

includes many ready-to-use tools! See project/tools/ for more info about using the included tools.

For application developers, using as a library provides OS-independent bus interfacing. It really tries hard to get out of the way. Here’s the canonical “toggle a LED” example:

The following are synonyms, use the form you prefer:

This example uses basically no CPU: the Out() call doesn’t call into the kernel. Instead it directly changes the GPIO memory mapped register.

See device/ for more examples.

Supplemental projects are located at github.com/periph. This includes:

There’s two mailing lists and one slack channel:

You can file issues at github.com/google/periph/issues

provides an extensible driver registry and common bus interfaces which are explained in more details at project/. is designed to work well with drivers living in external repositories so you are not required to fork the periph repository to load out-of-tree drivers for your platform.

Every commit is tested on real hardware via gohci workers.

We gladly accept contributions for documentation improvements and from device driver developers via GitHub pull requests, as long as the author has signed the Google Contributor License. Please see project/contributing/ for more details.

was initiated with ❤️️ and passion by Marc-Antoine Ruel. The full list of contributors is in AUTHORS and CONTRIBUTORS.

This is not an official Google product (experimental or otherwise), it is just code that happens to be owned by Google.

This project is not affiliated with the Go project.|||

Peripherals I/O in Go