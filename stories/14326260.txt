NgUpgrade is a library put together by the Angular team, which we can use in our applications to mix and match AngularJS and Angular components and bridge the AngularJS and Angular dependency injection systems. In this article we will look at what it is and how it works.

This article only talks about the mechanics of of the library, and not how to use it in the best way. That’s covered in the rest of the series.

An Angular application is a tree of components, with each of them having an injector. Plus there is an injector for the NgModule of the application. When trying to resolve a dependency for a particular component, the framework will first try to get it from the component tree. And if the dependency cannot be found, Angular will get it from the NgModule’s injector.

If the application uses lazy loading, the diagram will look more complex, but we will cover this use case in the article about lazy loading and NgUpgrade.

Using NgUpgrade we can bootstrap an existing AngularJS application from an Angular application. And we do it in such a way that we can mix-and-match components written in the two frameworks and bridge the two DI systems. We can consider such an application a “hybrid application”.

The easiest way to bootstrap such a hybrid application is to have an NgModule without any bootstrap components. Instead it defines ngDoBootstrap where we use the injected UpgradeModule to bootstrap the AngularJS application.

This is a good default because components upgraded from AngularJS to Angular require an AngularJS ancestor component, and this way of bootstrapping guarantees that. This, however, does not work in certain situations. For instance, it won’t work if we load and bootstrap the AngularJS application lazily, only when the user navigates to a certain route. In this case we need to bootstrap our hybrid differently, by doing it in a lazy-loaded component.

UpgradeModule.bootstrap has the same signature as angular.bootstrap. And if we look at the implementation, we will see that it actually calls angular.bootstrap under the hood, but it does it with a few tweaks:

One thing that may not be obvious is that importing “@angular/upgrade/static” captures window.angular. And that’s why we have to import the AngularJS framework before we import “@angular/upgrade/static”.

Otherwise we’ll see the “AngularJS v1.x is not loaded” error.

This works well for simple applications, but is problematic for complex enterprise applications, where, for instance, AngularJS can be loaded lazily via requirejs. To make it work there, we can manually reset AngularJS, as follows:

For historical reasons NgUpgrade has two entry points: “@angular/upgrade” and “@angular/upgrade/static”. Use “@angular/upgrade/static”. It provides better error reporting and works in the AOT mode.

Depending on our application’s build setup, we may need to point the bundler to the right UMD bundle. For instance, this is how you do it for webpack:|||

Victor Savkin is a co-founder of nrwl.io, providing Angular consulting to enterprise teams. He was previously on the Angular core team at Google, and built the dependency injection, change detection…