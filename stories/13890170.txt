This a step-by-step guide on how to create a Kubernetes cluster on top of AWS infrastructure and how to run a simple application in it. I've tried to make it simple and clear, specially for beginners.

This is what we need before we start:

We need a domain because the cluster's name must be a valid DNS name. I'm going to use domain and as the cluster's name. We'll be running the commands on a Ubuntu 16.10 machine. Links for others environments will be provided.

Kubernetes offers a simple tool, called kops, that makes the creation of our cluster very easy. Let's install it.

We can see it from the url the we installed kops 1.5.1 (currently the latest version). You can download any version by changing that. Here we can check all the releases available. We can also check what is changing from version to version.

We need, basically, two resources created on AWS before we can create our cluster. We're going to use the aws command line for creating them, so make sure you have it by following Installing the AWS Command Line Interface.

The first resource is a S3 bucket responsible for storing the cluster configuration file. From docs:

I'll create a S3 bucket named . Since bucket's name are global, you should pick a different name.

The second resource is a hosted zone for the domain we want our cluster running on. The reason we need a domain can be found on docs, as follows:

Since my cluster's name is , the command to create a hosted zone is

This is going to automatically create a name server (NS) record that identifies four name servers. We can check these four names servers in the response of the above command.

They can be found inside . Otherwise, we can check it by logging into AWS Console and going to Route S3.

These name servers are going to be responsible for resolving our cluster's domain name. You have give it to your registrar or your DNS service so that DNS queries can be routed to Amazon Route 53 name servers.

We already have our hosted zone created on AWS and with it our name servers that will be responsible for resolving our cluster domain name. Now we have to make sure our domain can be resolved. The is registered by GoDaddy but I'm using a Cloudflare as DNS service. Because of this, on GoDaddy I need to setup the name servers responsible for resolving , like these:

On Cloudflare I needed to create the A record responsible for resolving and the NS records that will responsible for resolving . We can see that points to the machine's IP address that my blog is running on. AWS we'll be responsible for resolving . This is my setup:

You probably have registered your domain with a different registrar or you're using a different DNS service provider, but you should be able to do something similar to what I've done.

We can check that everything work out correctly by digging our domain

The answer section must return the AWS name servers (it may take awhile)

This step is critical for a fully functional Kubernetes cluster. Do not move on until you're sure you have validated your NS records.

We're ready to create our cluster. Remember our tool kops? It's time to use it. We need just to set two environment variables before using kops.

We're good to go. We'll start by creating the configuration of our cluster. Most of our cluster's config will be the default ones. Let's run

This command created the config file that is saved on S3. This file can be downloaded and edited by running

Use the above command to make sure we're using Kubernetes 1.5.3 version. Edit the file if needed. To build our cluster, let's run

It may take awhile but in a few minutes your cluster should be up and running. Let's check how many our EC2 instances on AWS console.

Here's a few things kops did for us behind the scenes:

Kubernetes provide a tool called kubectl to interact with the cluster. Let's install

We're installing here the version . You can change it for any available version. Just make sure the server and the client have the same version. You can check both versions by running

Let's have some fun and try out some commands. First, we're going to find out some info about the cluster.

The way we interact with our cluster is through kubectl that makes requests to Kubernetes api server. The first line of the response tells us where the api server is running. The second line tells about the KubeDNS which is a component that provides ways of resoving DNS names inside the cluster.

Let's see what kubectl has to tell us about the nodes by running

We can get more info about a node by running

Running commands to find out more about our cluster is not so fun. We want to run our containerized applications. The quickest way to run an application on Kubernetes is to use the command. Let's run a simple hello world app from a image I built and put it on Dockerhub by typing

This is not the usual way to run applications on Kubernetes. We just did this for simplicity. You should be using or files together with command.

A lot of things happened behind the scenes. Let's just focus on the essentials. Kubernetes works with a concept called . A pod is a group of one or more containers that will always run together, and it has its own ip and hostname. The containers inside it will have a feeling that they are in the same machine, while the containers of others pods will appear to be running on a different one.

What happened here is that a pod was created and scheduled to one of the slave nodes. Docker, that is installed on these machines, pulled the image from Dockerhub and started the container inside the pod. We can check our recently created pod by running

Our pod seems to be running fine. We need a way to access it. The way we make it available to the external world is by creating a . There different kinds of services and ways to access a pod. For simplicity we're going to be using a Load Balancer. Let's create the service.

You can see that our recently created service is there, ready to be consumed by its external ip. The external ip is kind of hard to see. We can describe the service to get the full picture

Allright. Let's make our request to our app and see what it happens.

Our app is running fine on port 8080.

One of the features of Kubernetes is that it can scale our applications very easily. We just need to

It created 2 more pods, making sure that are 3 identical instances of our applications running.

All threes pods are running under the Load Balancer. So a call to our service may be handled by any of the pods. Make some more calls to the endpoint (we did 10 more requests). Since our app counts the number of requests and log it, we can check how many requests hit each one of our pods by looking at the logs.

We can see that the requests were distributed among the pods.

Kubernetes offers the Dashboard as a easier way to interact with our cluster. We can get it running by executing

The Dashboard can be accessed at , in my case . The username is and the password is can be obtained by .

Here's how it look likes:

Pretty much everything that can be done through can be done using the Dashboard. We're not going to cover how to use the Dashboard here, but you can move around the try some things out.

This guide probably helped you understand a little bit of how Kubernetes applications are run on top of AWS. We've learned:

If you don't want your cluster up and running, you can destroy it by running

And here are some resources that helped me a lot to write this tutorial:|||

