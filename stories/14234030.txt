In my previous post I showed that Go maps are not reference variables, and are not passed by reference. This leaves the question, if maps are not references variables, what are they?

For the impatient, the answer is:

If you’re not satisfied with this explanation, read on.



When you write the statement

The compiler replaces it with a call to , which has the signature

As you see, the type of the value returned from is a pointer to a  structure. We cannot see this from normal Go code, but we can confirm that a map value is the same size as a –one machine word.

It’s a good question that if maps are pointer values, why does the expression  return a value with the type . Shouldn’t it return a  ? Ian Taylor answered this recently in a golang-nuts thread1.

Arguably renaming the type from *  to  , while confusing because the type does not look like a pointer, was less confusing than a pointer shaped value which cannot be dereferenced.

Maps, like channels, but unlike slices, are just pointers to types. As you saw above, a map is just a pointer to a structure.

Maps have the same pointer semantics as any other pointer value in a Go program. There is no magic save the rewriting of map syntax by the compiler into calls to functions in .|||

