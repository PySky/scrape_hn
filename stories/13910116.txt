Today the Ember project is releasing version 2.12.0 of Ember.js, Ember Data, and Ember CLI.

This release kicks off the 2.13 beta cycle for all sub-projects. We encourage our community (especially addon authors) to help test these beta builds and report any bugs before they are published as a final release in six weeks' time. The ember-try addon is a great way to continuously test your projects against the latest Ember releases.

You can read more about our general release process here:

Ember.js is the core framework for building ambitious web applications.

The 2.12.0 release is an Ember.js Long-Term Support candidate. In six weeks, the 2.12.x series will become the latest LTS release and six weeks after that the 2.8 LTS branch will no longer receive bugfix patches.

For more information about Ember's LTS policies, see the announcement blog post and builds page.

Ember 2.12 implements the API as described in RFC #150. This public API replaces the intimate API of , and additionally discourages developers from setting properties on classes returned from the container. For more information about this API see the API docs and deprecation guide.

Addon authors and others should consider if the ember-factory-for-polyfill addon can help them avoid the deprecation warning for .

Additionally, this release of Ember contains an incremental performance improvement for the Glimmer rendering engine (you may have seen it referred to as the "binary VM"). By avoiding runtime compilation of syntax objects, initial rendering performance will benefit.

For more details on the changes in Ember.js 2.12, please review the Ember.js 2.12.0 release page.

Building on the addition of in Ember 2.12, Ember 2.13 will change the way dependency injection is implemented in the framework. Until 2.12, dependencies were injected onto an instance using to create a subclass. This created an excessive number of subclasses during the execution of an application. In Ember 2.13 injections will be passed to an object via during instantiation. This results in a notable performance improvement that grows in impact with the complexity of an application.

See RFC #150 and pull request #14360 for more details about this change.

Additionally, this release contains a further refinement on the "binary VM" change landed in 2.12. By using integers for common Glimmer wire-format strings, compiled template sizes in 2.13 will see an incremental size reduction.

In addition to these and other improvements, several changes arising from the RFC process have been implemented:

For more details on the upcoming changes in Ember.js 2.13, please review the Ember.js 2.13.0-beta.1 release page.

Ember Data is the official data persistence library for Ember.js applications.

Ember Data 2.12 represents the work of 19 direct contributors and over 90 commits.

Ember Data 2.12 continues to reflect our focus on performance improvements, and we are happy to report this is the fastest release of Ember Data yet.

A new method has been added to , and . This is useful if you are working with a backend that requires your ids to be something other than a string. For example:

For more information see the API docs.

Ember Data 2.12 contains no new deprecations.

For more details on the changes in Ember Data 2.12, please review the Ember Data 2.12.0 release page.

The (#3586 #4287) feature has been enabled on the beta branch for Ember Data 2.13.

This feature introduces an method on errors which allows users to create their own custom errors that extend from .

The feature also introduces some new errors to rest adapter which will be used to reject the adapter promises based on http status of the API response.

Thanks to tchak and twokul for their work on this feature and lindyhopchris for his help documenting the feature.

For more details on the upcoming changes in Ember Data 2.13, please review the Ember Data 2.13.0-beta.1 release page.

Ember CLI is the command line interface for managing and packaging Ember.js applications.

You may upgrade Ember CLI separately from Ember.js and Ember Data! To upgrade your projects using run:

To upgrade your projects using run:

After running the upgrade command run inside of the project directory to apply the blueprint changes. You can preview those changes for applications and addons.

Ember CLI will now generate new projects with an ESLint setup. This changes the default linting system from JSHint (which has been used since we initially added linting support to Ember CLI) to ESLint. The new project setup uses a fairly simple relying largely on ESLint's own .

Using JSHint in projects and addons generated by prior versions of Ember CLI is still supported, but we recommend that you update to ESLint as you upgrade your project and addons to newer Ember CLI versions.

In order to avoid inconsistencies and issues due to supporting many client versions, Ember CLI has had as a dependency for quite some time. This is used for both (to initially install dependencies for a newly generated application) and to install packages via (to install the addon specified). Having as a dependency introduces roughly 19MB to a freshly generated application's size. As the client has become more stable (3.x series and newer) this has seemed more and more wasteful.

Starting with Ember CLI 2.12, is no longer a dependency. If a suitable version of is present on the system, it will be used. If is not found, or a version older than is found, Ember CLI will emit an error when you run commands that would utilize (e.g. , , , ).

Similarly, Ember CLI had a dependency on in order to support the phase while generating new projects and installing addons. As of Ember CLI 2.11 a new application has no dependencies via . This means the dependency on itself is also potential bloat. Having as a dependency added roughly 21MB to a new application's total size. In Ember CLI 2.12, bower is only added as a dependency if a command requires .

Combined, these changes result in a size reduction of approximately 40MB for newly generated applications.

For more details on the changes in Ember CLI 2.12 and detailed upgrade instructions, please review the Ember CLI 2.12.0 release page.

Ember CLI projects have been able to utilize for dependency management for quite some time, however it was not well supported by the default generators. In 2.13 Ember CLI is now "yarn aware", and will use for tasks such as if it detects that is installed and a exists in the project. You can even instruct to generate a new project with a for you via .

Ember CLI has had the ability to generate custom instrumentation output for builds for a few years now (introduced on 2015-08-24), but this information has not been readily accessible. In 2.13 ember-cli exposes this information to addons that implement the hook. This allows addons to access many things that were previously very difficult (e.g. reliable build time reporting).

Thanks to @hjdivad for proposing and implementing this feature. Please read through the RFC for more details.

In order to allow addons to understand the desired target platforms of the app that they are operating in, a new file has been added to all generated projects: . This file exposes the supported targets so that tooling such as autoprefixer and babel-preset-env can properly understand the level of transpilation that is needed.

The default looks like:

The target information is exposed to addons via .

Thanks to @cibernox for proposing and implementing this feature. Please read through the RFC for more insight.

Babel 6 was introduced on stage during EmberCamp London way back on 2015-10-29. However, Ember CLI and its ecosystem have continued to use the aging and nearly unsupported Babel 5. Babel 6 was a massive shift for Babel and the migration posed quite a challenge for ember-cli.

After much work, Babel 6 support has been added to Ember CLI internally and for newly generated projects (both applications and addons). The latest beta of takes advantage of the new API along with to allow applications to have significantly better control of exactly what is transpiled. utilizes the caniuse and @kangax's ES6 compatibility database to know which features are available natively and which require transpilation. For example, with the proper targets configuration will no longer transpile / , functions, , etc.

The work done in allows both and to coexist peacefully, so it is safe for addon authors to begin updating their internal dependency so that applications can take advantage of more of these features.

Please test your applications and addons with and report any issues you encounter. Due to the large number of changes required internally, we would like a larger than normal beta testing base to ensure things are as stable as possible before 2.13.0 is released.

For more details on the changes in Ember CLI 2.13.0-beta.1 and detailed upgrade instructions, please review the Ember CLI 2.13.0-beta.1 release page.

As a community-driven open-source project with an ambitious scope, each of these releases serve as a reminder that the Ember project would not have been possible without your continued support. We are extremely grateful to our contributors for their efforts.|||

