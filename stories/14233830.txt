This is a SLIME inspired tmux integration plugin for Vim. It makes it easy to interact with different tmux panes directly from Vim. It has two styles for interacting with panes. REPL and Shell styles.

REPL commands are designed to work with various Read Eval Print Loops such as , (Ruby), (Javascript), (CoffeeScript) etc. This is loosely modelled after SLIME for Emacs. Shell commands are designed to work with normal shells such as . These are useful for running tests for example.

Main difference between these is pane configuration visibility. Each buffer has own configuration for REPL, but for Shell there is only one global configuration. The configuration is prompted from user when the commands are used for the first time. The configuration happens interactively. You will see list of available tmux panes and you can choose one by hitting enter on top of one.

Also REPL commands can have custom pre, post and escape hooks. These allows interaction with some more complex REPLs such as the CoffeeScript REPL.

This plugin borrows ideas and some code from vim-slime.

Use pathogen and put files to

Slimux requires fairly recent tmux version. Be sure you have 1.5.x or later.

Send last visually selected text to the configured pane.

Prompt for a shell command and send it to the configured tmux pane.

Rerun last shell command(prompts for a shell command if none was run before).

Specify a shell command to run directly, without the prompt:

Suitable for mapping and other automation.

Note that you need to escape strings intended for the shell. E.g. to list files with actual asterisks in their name:

Select the tmux pane to which shell commands will be sent. If executed without a parameter it prompts global pane configuration for the shell commands. If called with parameter it selects the pane without user interaction, which will aid multi-pane workflows. Parameter is the tmux pane identifier in \d:\d:\d form and completed automatically with cline completion.

Prompt for a key sequence using the 'tmux send-keys' syntax and send it to a configured tmux pane. E.g. Lets say you want to stop the webserver currently running in a shell(ctrl+c) and restart it(assuming the command to start is 'make run-server'):

In short, some strings such as 'C-C' or 'Enter' have special meanings, while others are sent as a sequence of character keys(in the above example, 'make run-server')

Resends the last key sequence sent(prompts for a sequence if none was sent before).

Slimux does not force any shortcuts on your Vim, but here's something you can put to your

Or if you like something more Emacs Slime style try something like this:

You may also add shortcuts to other commands too.

For Scheme/Racket Slimux has few extra bindings. Enable them with

For more information refer to the scheme plugin header.

Usually new there is no need to do anything. For example Ruby and Node.js REPLs works just fine out of box, but for some languages you have to do some preprocessing before the code can be sent. There are three hooks you can specify for each language.

Just add these to ftplugin directory contained within this plugin (and sent a pull request on Github!). You can use Python and CoffeeScript hooks as examples.

Before I created this plugin I tried several others, but non of them satisfied me. They where too complicated or just didn't support the languages I needed. So if Slimux isn't your cup of tea, maybe one of these is:|||

slimux - SLIME inspired tmux integration plugin for Vim