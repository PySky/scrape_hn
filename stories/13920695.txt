Good Tuesday, Fantasists! This week, we’re going to take a quick(!) look at the semigroup’s older sibling: the monoid. We saw last week that a type is one that has some concept of combining values (via ). Well, a type is any type that happens to have a special value - we’ll call it an identity value - stored on the type as a function called .

Here’s its (in my opinion, not-too-helpful) signature:

Far more useful, I think, are the laws for how must act for a type to be a valid . We call these the identity laws:

Whichever side of we put our , it must make no difference to the value. Let’s look at some examples of values for our favourite semigroups. Try them on the laws above if you’re unsure of why they’re valid values:

Eek, got a bit stuck at the end… and are not monoids; see if you can work out why!

This is all very interesting, but what’s the point? I’m glad you asked, imaginary reader! With a type, you can combine one or more values to make another, right? All a monoid does is let us upgrade that to zero or more. This is actually a Pretty Big Deal™, as we can take any array (including an empty array!) of monoids and them to one value.

As a surprisingly good intuition, monoids encapsulate the logic of . That’s what they do. That’s what they’re for. That’s it right there. If you know how to reduce lists, then congratulations, you’re now a monoid warrior:

We actually get a double win here. Not only do we now have a generic way to any reducible structure (arrays, trees, etc) in our app with any type ( , , etc), we also have an opportunity to do some really cool optimisations:

The thing that we didn’t explicitly mention about the semigroup laws is that associativity gives us an opportunity to parallelise. If we split a list of semigroups into chunks, the elements of each chunk in parallel, and then the results, we’re guaranteed to get the same result!

Thanks, associativity! By being certain that the and laws hold for our type, we can write functions to optimise for different data sets, and other developers can use our API with no idea of the wizardry underneath!

So, monoids let us write easily-optimised and expressive operations. Pretty neat, huh? There is a tiny downside, though…

The fiddly part about monoids in JavaScript is that we have to pass in type representations (what we called ). The Fantasy Land spec puts these in signatures as values, in case you’ve wondered what they were. These have to be here because JavaScript, unlike other languages, can’t deduce the type we’re working with, so we have to give it a friendly nudge. For example:

This becomes more apparent when we get onto composed monoids. Just as we saw with semigroups, let’s imagine we want to make a monoid:

Remember: the value must work for all cases, and a Pair could be made of any of our monoids. The solution? Pass in the s:

Some extra ugly boilerplate, but we do end up with the same result. We’re going to see a lot more of these values floating about, and it is unfortunate. Still, if you want to write type-safe JavaScript without all this hassle, check out PureScript!

There are loads of weird and wonderful monoids that we haven’t covered. For example, an function is a monoid if is a monoid:

Effectively, we just concatenate the results of calling both functions with a given argument. If this seems useless, check out Hardy Jones’ post on implementing FizzBuzz with monoids! They are really clever structures that, with a bit of imagination, can be spotted everywhere in the wild. We’ll actually come back to them time and time again in the articles to come, so get used to them!

Again, this post only touches the surface of what monoids can do, and I’m surprised by new examples all the time. Keep researching, keep looking for examples, see whether you could replace some of your code’s calls with monoid folds, and start to build up a library of reusable types to encapsulate your logic. Exciting times!

Next time, we’ll look at - our first step on the road to the magical . Until then, Fantasists,|||

