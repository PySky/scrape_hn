This article was written in collaboration with Ilya Yaroshenko a D contributor and the creator of Mir a collection of numerical packages for D. The code for this article is located here. Thanks to the D community for their suggestions that informed the article.

The C and Fortran programming languages have many popular libraries that are heavily relied upon. D's generic and meta-programming features, as well as its multi-paradigm nature and clear syntax makes it a great choice for various applications. Many programming languages allow varying degrees of compatibility with C and Fortran libraries. However C libraries have full compatibility with D, and Fortran subroutines can be called from D. This article describes how to interface D code with C and Fortran. This includes outlining the ease in which functions in C standard libraries can be accessed from D, calling functions from C static libraries, calling D functions from C, and calling Fortran subroutines from D. The article also covers how to use D's string mixins to generate code to avoid repetitive writing of wrapper functions and declarations.

The D code in this article uses style. This mode of programming is increasingly popular in D circles focusing on D as a replacement for C in systems programming. The flag in the D compiler uses a light-weight subset of D and has the side-effect of facilitating an integration of D code to C that is as seamless as calling C code from D. The main effect of the flag is to remove link-time dependencies for DRuntime and Phobos (D's standard library), however at the time of writing this article, the flag is partially implemented and removes only module information.

The examples presented here are run on a Linux Ubuntu 64-bit 16.04 system and use the gcc 5.4.0 C and Fortran compilers and ldc2 version 1.1.0 D's LLVM-based D compiler.

The math.h header describes a standard library in C. Example1 code below shows the D code for importing the and functions from this library. The braces contain functions to be imported from C. The qualifiers nogc and are used because the imported C functions are not garbage collected and do not throw exceptions.

In general the C language all too easily allows unsafe actions one of which is corrupting data. Some of the imported functions are modified with which ensures that they do not carry out a number of potentially unsafe actions. The function is not marked with but instead the statement is used because the pointer's lifetime does not escape the function. In addition the scoped pointer can not be passed to another function internally that is not itself scoped, or to a global variable or another internal pointer, nor can it be returned.

which gives the output:

The following are helpful descriptors of the code above:

The tool allows the object file symbols to be inspected. The output shows the economy of the created symbols, it omits the creation of code that increases file size and perhaps efficiency of the executable.

The symbols in the object file that can be described as:

The main difference between calling static C libraries from D and calling installed C libraries is in the compilation process. Below is an example of a simple multiplication function written in C:

The D code to call this is similar to our previous example:

There are many ways to compile these two scripts. One way is to compile the C code to an object file and then use the D compiler to compile the C object file together with the script(s) to generate the executable. However below the C and D scripts are compiled into separate object files. Then both object files are compiled together with the compiler.

The code above is given here.

Calling D from C is a less seamless affair because D has features that are not supported in C, however as before, can be used to create compatitable object files. The D code below creates multiplication functions of different types using string mixins. String mixins are a meta-programming technique that allows the user to generate code with strings at compile time.

So will expand to the code:

Instead of using quotes some users prefer using D's notation to represent strings, in this case, syntactic D code is held in the curly braces. We will be revisiting the use of mixins in the final example to generate Fortran code.

C code references and calls the functions created in D.

The above code is located here.

Fortran subroutines can be called directly from D in a very similar way to calling static C libraries from D. If you are working with Fortran and D, it is a good idea to explore Fortran Iso C Binding documentation. Below is a Fortran subroutine equivalent of the multiplication function:

The main difference between calling C code and Fortran code from D is that the inputs to the Fortran subroutines must be referenced and the name of the function is mangled in the Fortran object file to include an underscore afterwards. C-style notation can be used , however D provides notation which allows referenced inputs without requring pointers:

Compilation is similar to calling C from D:

The output from the Fortran object file showing the underscore mangled append name:

The code for the above is located here.

This link is a useful resource for Fortran and this is useful for compilation hints.

Consider a situation where Fortran subroutines of the same signature but with different names need to be called in D. D can be used to generate the necessary declarative and wrapper code to avoid repetitive code. As an example consider porting the the following trigonometric subroutines from Fortran:

We can use templates to generate strings at compile-time. These strings are compile-time "interpreted" into code using string mixins and templates.

The first template is used to generate the declarations under :

will generate the string which declares the ported Fortran function. Next is the wrapper function to allow the user to use rather than :

Then a template function that recursively concatenates the outputs for many functions to generate one string for all the functions is given below.

The complete D script for this is given below:

The code is below:

Running will return the output passing the correct assertions in the code.

The code for this section is given here.

This article shows that D can interface with C and Fortran simply and efficiently. In the case of calling C functions from D, there is minimal effort required in that the function(s) need only be declared under . In the case of calling D code from C, efforts need to be made to remove features in D that are incompatible with C using and other appropriate flags.

Calling Fortran subroutines from D is almost as straightforward as calling C from D, however Fortran mangles the exported names with a postfix underscore and arguments on the D code side must be referenced either using or with C-style pointers. D's mixins can be used to generate repetitive sections of code that can make it easier to port functions that have the same general call structure.|||

Data Science, Data Science Services, Big Data, Big Data Services, Analysis, Statistics, Training, R, Python, Web Programming, Energy, Finance, Marketing, Manufacturing, Telecoms, Insurance, Active Analytics