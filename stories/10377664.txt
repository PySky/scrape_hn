Rewind. A long time ago, before SaaS was coined, I worked for a company building educational software. Building it was a breeze. There were a series of modules that you could inherit from, each of them would create a different educational experience for the user, and they all inherited from a base class to provide the module interface.

Just one problem: We were building wildly different educational apps for wildly different industries, each important because they were serving contracts that were keeping the lights on.

But new modules brought new use cases that nobody thought about at class design time. These new use cases required changes to the base class to make them work — but dozens of modules depended on that base class, and the various classes between that base class and the new module class.

I can almost hear you thinking…“But that’s stupid. Everybody knows you should keep your inheritance trees shallow and use composition. My team would never do that.”

Yes, I see you, Twitter. I know you’re on a brilliant team who all know the right way to do things. But class hierarchies have a tendency to grow when you’re not looking. If you’re not ever vigilant, the new guy on the other side of the room or the other side of the country is busy extending that class you never intended for extension.

Because `class` affords `extends`, like chairs afford sitting, and balls afford throwing. That `extends` keyword is right there, tempting the busy programmer who’s facing a tight deadline and pressure to close this ticket yesterday.

But tomorrow you have another deadline, and you forget.

Class hierarchies creep like the crack in your windshield you were going to fix 2 weeks ago, or that mold under the faucet you don’t even see. They dig their hooks in by requiring users to instantiate them with the `new` keyword. Get enough clients using `new`, and you can’t back out of the constructor implementation even if you want to, because code you don’t own will break if you try.

So we extended. And new use cases came. And the code grew more fragile. And the bugs piled up. And when we fixed one, 99 more would appear like magic. And we kept missing our promised ship dates. It’s a death spiral.

One day I was working at my desk on a plugin, when two sheriffs and a young guy in a suit whisked by. They barged into the CEO’s office. The door shut loudly. 5 minutes later, the boss came out and told us:

And they did. I watched as they laid off everybody working on new development projects. I watched as they shut down everything and milked the aging cash cow that was keeping the company afloat. One day they laid me off, too. I thought my job was safe. I was wrong. After 3 or 4 waves of layoffs, it was finally my turn.

And then the business vanished like it never existed.

I never saw that CEO again.|||

Not long ago, I set out to write an article about how to interview JavaScript developers. As I dug into it, I couldn’t help but sink deeper and deeper into the importance of avoiding classical…