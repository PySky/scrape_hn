I have been in hibernation for some time as I shifted jobs, moved houses and have been hellishly busy, so, my bad that I haven’t written an article in a while.

In this article, I am going to introduce and help you get started with the serverless tool where we are going to create a AWS Lambda function in .NET core, make Dynamo DB tables that it would use all without leaving Visual Studio Code.

In case you are new to either Visual Studio Code which is a cross-platform open source IDE for a number of languages or new to AWS Lambda you can read my getting started guide on that first.

 It is also worth reading AWS Lambda’s best practices and a guide to how it works internally in this article of mine.

Serverless architecture is basically a design which does not use any physical server or VM or Containers of any sort (at least not directly) with the realization that those are difficult to manage, harder to scale, tougher to get talent for and most importantly puts our time in something which is not catering to the business that we are targeting.

On AWS, Lambda is the service on which you would upload your code and AWS will allocate infrastructure in response to whatever event you configure it to listen to. I am going to assume that you know how it works, if you don’t read the article I mentioned before first.

To understand what is the Serverless framework, you must know what is Cloud formation as well. Cloud formation is a tool through which you can design templates in either YAML or JSON and once ‘executed’ will launch AWS resources (VPC’s, EC2’s, Cache servers, DB’s, whatever) for you. If the Cloud Formation ‘stack’ existed previously it will compute the changes and do edit only, you can even tear everything down using it cleanly and simply.

It was necessary to give that much of a detailed background. Now.. the Serverless framework is a very elaborate ‘tool’ using which developers can build and design the entire infrastructure that your code would need without leaving your favourite IDE.

The template above will do the following:

And the command to do all that?

Nice, isn’t it? Notice that I wrote stage name as ‘blog’, you can replace that with dev, qa, performance etc and different environments are up just like that!

Download the code from here: https://github.com/maingi4/Serverless_Getting_Started

This is needed by your Lambda function in order to have the necessary permissions to put logs in cloudwatch, query DynamoDB etc. Simply follow the images.

Step 2: Put in the search box and select the 



Make sure you have , if not get it from here.

which comes as a npm package with the following command:

 

 The above command installs serverless globally.

Make sure you have according to your platform, get it from here.

Open the downloaded code in Visual Studio Code or Visual Studio.

Open the file and the with the one you created before, you can take this opportunity to change the region to one of your choice as well, make sure you change the region in subsequent commands as well. Also change the section to include your own AWS profile stored in your machine, serverless will use those credentials to do a lot of stuff.

Run the file that I have included, its for windows only, so I’ll give a breakdown of what it does in case you are on MAC or something:

Runs the restore command to get all the required nuget packages:



Build and publishes the library to a folder in the root directory:



Creates a zip (deletes one if it already exists) with the contents of the folder, make sure that only the contents are zipped, basically when you open the zip file you should see the dll files etc and NOT the out folder, this is important for your Lambda function to be able to run:

If you are on MAC or Linux, use your favourite command line tool to zip stuff up, on Linux my favourite is the zip utility

The file is mentioned in the , so make sure the name matches.

That’s it, you now have a ‘blog’ environment!

To see the service in action call your service URL, you can find the URL in the output of your serverless deploy command, like in the image (at the bottom of it):



My output looks like this:



In case you get a error saying , make sure the API gateway has permission to invoke Lambda, do this by going to the API gateway in the AWS console>>Resources(left pane)>>GET(middle pane)>>Integration Request(right pane) and edit the Lambda function name and without changing it, just save it. A dialog box will ask you whether you want to give API gateway permission to invoke the Lambda function. This is an issue with serverless deployments, I usually solve it by command line using AWS-CLI but I didn’t wanted to pollute the blog with all that.

Mind you we created a Dynamo DB table just to prove a point but didn’t actually use it, when you are done playing around you can by running the following serverless command:

Everything that serverless created will now be removed.

In the real world with a team in place, you don’t want to have developers creating and destroying environments at will of course. My AWS role in my machine to my personal AWS account has all the priviliges in the world, hence serverless could do all that. However, since not everybody will have these priviliges, you will be doing this via a CI tool like Jenkins or AWS CodeBuild.

In the interest of going serverless, I recently switched over to AWS CodeBuild and will probably write a blog post about it in the near future.

If you liked this article, you can choose to follow this blog/subscribe to email alerts (top of sidebar or below comments in mobile) so that you know when any future posts come about.|||

I have been in hibernation for some time as I shifted jobs, moved houses and have been hellishly busy, so, my bad that I haven't written an article in a while. In this article, I am going to introduce and help you get started with the serverless tool where we are going to create a…