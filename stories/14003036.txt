Enchive is a tool to encrypt files to yourself for long-term archival. It's a focused, simple alternative to more complex solutions such as GnuPG or encrypted filesystems. Enchive has no external dependencies and is trivial to build for local use. Portability is emphasized over performance.

The name is a portmanteau of "encrypt" and "archive," pronounced en'kīv.

Files are secured with ChaCha20, Curve25519, and HMAC-SHA256.

There are only three commands to worry about: , , and . The very first thing to do is generate a master keypair using . You will be prompted for the passphrase to protect the secret key, just like .

By default, this will create two files in (or ): (public key) and (secret key). On Windows, these are found under instead. Distribute to any machines where you plan to archive files. It's sufficient to encrypt files, but not to decrypt them.

This will encrypt as (leaving the original in place). You can safely archive this wherever.

To extract the file on a machine with , use . It will prompt for the passphrase you entered during key generation.

The original will be reproduced.

With no filenames, and operate on standard input and output.

One of the core features of Enchive is the ability to derive an asymmetric key pair from a passphrase. This means you can store your archive key in your brain! To access this feature, use the ( ) option with the command.

There's an optional argument to that controls the number of key derivation iterations (e.g. ). The default is 29. This is a power two exponent, so every increment doubles the cost both in memory and computational demands.

If you want to change your protection passphrase, use the option with . It will load the secret key as if it were going to "extract" an archive, then write it back out with the new options. This mode will also regenerate the public key file whether or not it exists.

Enchive has a built-in protection key agent that keeps the protection key in memory for a configurable period of time (default: 15 minutes) after a protection passphrase has been read. This allows many files to be decrypted inside a brief window with only a single passphrase prompt. Use the ( ) global option to enable it. If it's enabled by default, use to turn it off.

Unlike gpg-agent and ssh-agent, this agent need not be started ahead of time. It is started on demand, shuts down on timeout, and does not coordinate with environment variables. One agent is created per unique secret key file. This feature requires a unix-like system.

The major version number increments each time any of the file formats change, including the key derivation algorithm.

There's no effort at error recovery. It bails out on early on the first error. It should clean up any incomplete files when it does so.

A purposeful design choice is that encrypted/archived files have no distinguishing marks whatsoever (magic numbers, etc.), making them indistinguishable from random data.

No effort is made to set stdin and stdout to binary mode. For Windows this means passing data through Enchive using stdin/stdout isn't useful. This is low priority because Microsoft's UCRT file streams are broken anyway when pipes are involved.

Enchive doesn't need to interact with any other systems or people, so there's no need for critical mass, nor that there are any other users.

I'm not aware of any tool that does everything Enchive does. GnuPG comes close, but doesn't support deriving a key pair from a passphrase. If you're aware of an equal or better tool, please let me know.

It is when it's done incorrectly. However, Enchive uses a memory-hard key derivation scheme that makes cracking passphrases very expensive — prohibitively so for any decent passphrase. This is because anyone who has access to even a single encrypted file can mount an offline attack.

Deriving asymmetric keys from a passphrase is a standard practice in the Bitcoin world: brainwallets. The caveat is that the passphrase must be sufficiently long, preferably chosen by a computer or with dice.

When generating a master key, Enchive's default configuration is extremely paranoid. It would be far cheaper to break into your home and perform an evil maid attack than it would be to crack even a short passphrase. This is not the weak point.

The purpose of an IV is to allow the same key to be safely used multiple times. This is particularly important when the same key is derived on different occasions by Diffie-Hellman between the same key pair. Enchive generates a random ephemeral key pair each time a file is encrypted, so the IV is unnecessary.

Since ChaCha20 requires an IV regardless, Enchive simply uses the hash of the key. This has the additional effect of allowing the client to verify its symmetric key before beginning decryption. Otherwise a wrong key would only be detected by the MAC after decryption has completed.

Enchive only uses dynamic allocation for input/output filename strings — avoiding any path length limitations — and for the huge key derivation buffer. The lifetime of these strings is the lifetime of the entire program, so it's not worth the trouble to free them at the last second. In other situations it might still be useful to clean up so that Valgrind and friends can do their job. Since Enchive doesn't do any complex memory management, there's no need to check for leaks.

Enchive uses an scrypt-like algorithm for key derivation, requiring a large buffer of random access memory. Derivation is controlled by a single difficulty exponent D. Secret key derivation requires 512MB of memory (D=29) by default, and protection key derivation requires 32MB by default (D=25). The salt for the secret key is all zeros.

To build on any unix-like system, run . The resulting binary has no dependencies or external data, so you can just copy/move this into your .

The easiest way to build with Visual Studio is to use the amalgamation build. On any unix-like system (requires ):

This will create , a standalone C program that you can copy anywhere and compile. Over on Windows:

The compile-time options below also apply to this amalgamation build.

Various options and defaults can be configured at compile time using C defines ( ).

For unix-like systems, this is the default source of entropy when creating keys and IVs. The default value is . You could set this to , though that's pointless and a waste of time. It can be changed at run time with .

In the future, Enchive may first try / .

Whether or not the option should be available. This option is 0 by default on Windows, where Enchive always uses a Cryptographic Service Provider.

Whether to expose the and option. This option is 0 by default on Windows since agents are unsupported.

The default agent timeout in seconds. This can be configured at run time with an optional argument to .

Whether or not to enable the agent by default. This can be explicitly overridden at run time with and .

Power-of-two exponent for protection key derivation. Can be configured at run time with .

Power-of-two exponent for secret key derivation. Can be configured at run time with the optional argument to .|||

enchive - Encrypted personal archives