This module exports a function of the same name by default.

The createStore function accepts a , , and an .

We call the value returned by the createStore function a Store. As you can see, Stores have a number of properties: , , , and (plus the private $$observable).

At a high level, that’s the entire structure of this module.

To start, createStore accepts a reducer, and we see it applies a typeof check to ensure that this parameter is a function: https://github.com/reactjs/redux/blob/552f1f84ab803d19bd79a785b2c89d94f11c405c/src/createStore.js#L53-L55

And we see this reflected in the flow types provided by the distribution at :

To synthesize: the we pass to is a function that takes the current and , and the transforms them into the next state. We’ll return to the details of the action parameter under #dispatch.

But already, we know enough to be able to make a minimal Redux app:

That’s it. Critically, notice that we can run this in contexts outside of a browser, like in the Node REPL (using the commented out CommonJS version of the module import). Our object is working — but useless — Store.

What about and ?

In this example, the initial starting state of the app is simply . The reducer we pass as the first argument simply returns the existing state, no matter what action is passed to it.

We’ll return to include an enhancer to this example later.

As mentioned, the return value of is an object with a number of functions as properties: , , , .

This function returns the  — a value first set to the value of . That’s how the initial state bootstrapping works.

#dispatch invokes two conditions on its parameter: an Object type check, and a value of anything but for the property . So basically, dispatch must be called with an object passing a type prop — an object which it returns. This is captured in the Flow type provided by the project:

What other constraints does Redux impose on actions? None! They can have any other data. “Uh, won’t that get messy?” Maybe. The flux-standard-action project has recommendations on how you might structure actions inside of an application.

The function otherwise consists of two critical operations: (1) calling the reducer with the currentState and action then assign the return to currentState, and (2) invoking all of the listeners after the reducer has been called.

First, do a function type check on the listener parameter. Set a value to , and then push the listener function onto the existing array of nextListeners. Return a function, , which removes the listener from the nextListeners array. Recall that the listeners are actually invoked at the end of the dispatch call. In effect, every dispatch ends with all of the listeners being invoked. Ultimately, the bridge is an abstraction built on extending dispatch listeners.

Putting this together, we can understand everything that’s going on in the example calculator app from Redux’s own README:

This all seems less daunting than it did initially, right? Redux is a clean, simple state management library with highly readable modern JavaScript. Who’d’ve thought?|||

An essential skill every developer must learn is reading the source. By the reading source, we eliminate FUD (Fear, Uncertainty, Doubt) about our tools. This is especially critical as teams grow in…