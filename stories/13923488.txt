Elixir gives you the tools to easily write concurrent code. In an earlier post, I introduced concurrency in Elixir by looking at the building blocks of concurrency. Processes follow the actor model of concurrency and are the core underlying construct with which you can then send and receive messages between other processes.

What you might have seen is that there was a fair amount of boilerplate involved in doing common tasks, such as wanting to keep track of some state within a process or making a blocking call and waiting for a response.

Thankfully Elixir comes with a number of common abstractions to make writing concurrent code even easier. In this article we will be looking at Task, Agent, and GenServer.

The module makes doing work concurrently almost effortless. There are only two methods you tend to work with: to begin asynchronous work done in another process, and which waits for that work to finish and provides you with the result.

Let’s look at a very simple example to see it in action, and then we’ll look at how it might be used to speed up a by doing it in parallel.

The above line will process the anonymous function in a separate process. You are free to continue on your way, and as long as you have the reference to handy, you can access the result of the anonymous function. What the function returns is basically a reference to the PID of the process running this task, which is needed to fetch the result:

Let’s check on the of the task to see what is happening with that process:

As you can see, that process is no longer alive…as soon as the Task has finished its work, that process is shut down. So how do we access the response from it then? The key is to look in our own mailbox (the calling process):

happens to be our current process, or . Here we can see two messages waiting to be received. The first is the response to our async task, and the second is that the reference to our Task process has notified us that it has shut down. We could use a block to access these messages, but the module makes it even easier:

If we now look back at our current process’s messages, we’ll see that they have been emptied:

Let’s take a look at a parallel map example using Task’s and functions. I used this example in the previous article without using , and it turns out to be similar but much simpler and easy to reason about now that the complexity has been hidden from us.

We’ll use the same tests from last time:

These tests finish in approximately 2.1 seconds, which shows us that it is indeed working because it is about the length of the slowest HTTP call of two seconds.

Agents make it easy to store state in a process. This allows us to share state/date across multiple processes or without having to pass a “big bag” of data to every function that may need access to it.

We’ll create a small module that allows to get and set configuration keys which live in an Agent. The function begins the Agent process, and then and access and update the configuration values.

You’ll notice we didn’t return or need a PID in the example above. The reason for that is that we’ve bound this process to the module’s name (which means there can only be one). Let’s write some simple tests to ensure it is working as expected.

Agents store their state in memory, so you should only store data that can be easily rebuilt in some sort of restart strategy (using a Supervisor!). Although we used a in the example above, their state can be any Elixir data type.

All processes in Elixir process requests sequentially. Even though Elixir is highly concurrent, each process handles one request at a time. If a request to the process is slow, it will block everyone else wanting access to the data in this process. This is very useful, though. Requests are handled sequentially in the order that they come in, so it is very predictable in that sense. Just make sure that “heavy lifting” or slow calculations aren’t done in the Agent process itself but rather in the caller process or elsewhere.

If you are looking for something more powerful or flexible, check out ETS. For a comparison between ETS, Agents, and other external tools such as Redis, there is a great article written by Barry Jones about this topic.

So far we have looked at Tasks for managing concurrent code execution and Agents for managing state within a process. Next we will look at the GenServer module, which combines state with concurrent code execution.

We’ll convert the example from Part 1 into a module which uses .

The first thing you’ll notice is that we included the line at the top of our module. This allows us to take advantage of the functionality.

Next up, you’ll see the function. What this does is call the function, spawning a new process for the current module and providing the initial state, which in this case is 0. It returns a tuple with .

GenServers provide both synchronous and asynchronous functionality. Synchronous, where you want to block for an answer before continuing, is called , whereas asynchronous requests are called .

When we call the line of code inside of the function, it will send a message over to our process with as the arguments. It’s up to us to write a function for handling this message.

We do that by implementing the function, where the first argument should match the incoming arguments being sent over: , and the second argument is the current state of our process.

Inside of the function, we should perform the task that we’re handling and then respond with a tuple containing the atom along with the new state of our process.

When we need some sort of response from the process, it’s time for us to use the functionality. sends a message to our process with the argument . Very much like the functionality, it is up to us to write a function called , which has the job of dealing with that incoming message and providing a response.

The arguments differ slightly from to . It contains an additional argument, which is the process that made the request. The response is different as well. It should be a tuple made up of three items: The first is an atom of , the second is the value we should send back to the caller as the response, and the third is the new state our process should have.

In the example above, the return value and the new state are the same, which is why is repeated twice.

Let’s use our module to try it out!

In this article, we have taken a look at three concurrent code abstractions that build upon the underlying functionality provided by Elixir. The first was , which executes code inside of a separate process and optionally waits for a response. The second was , which is a framework for managing state within a process. The third was , a framework for executing code synchronously or asynchronously and managing state at the same time.

What we’re missing is the ability to monitor our processes and react if and when they crash. We can do this ourselves, but if we did, we’d be missing out on some fantastic functionality which comes with Supervisors and OTP. Essentially they allow us to monitor processes and define what should happen if they crash, automatically restarting the monitored process(es) and their children. We’ll explore this in my next article!|||

Elixir comes with a number of common abstractions to make writing concurrent code even easier. In this article we will be looking at Task, Agent, and GenServer.