I think Docker, Kubernetes, Ansible, Chef, Puppet, et al are all too complicated.

The short history of Docker is baffling. Since the first release in 2013, the following technologies have been used, only some of which are still used by Docker: LXC, libcontainer, runc, AUFS, OverlayFS, Boot2Docker, Docker Machine, Docker Toolbox, Docker For Mac, Docker Compose, Docker Swarm. There's now Docker CE, Docker EE (with a whole one year of support!) and Moby.

Kubernetes is designed for a scale most people won't see.

There's over 90 bullet points about Ansible Playbooks, which is only one part of it.

The point is, all these technologies are complicated and get out of date quickly, meaning significant investment and then maintenance is required.

I'll describe a simpler alternative here. The main general idea of all of the above is infrastructure-as-code. I believe a combination of shell scripting and a language of your choice (Python here) can provide simplicity and flexibility, without having to deal with the tools listed above.

Many hosting providers such as Vultr, OVH, Linode and AWS support APIs to start servers. It can be as simple as the following:

The next step is usually just installing some things. At this point I'll introduce a Python library called Spur, which allows you to run commands remotely over SSH, as well as locally using the same interface.

Here's an example to install a couple of things on a remote server:

This can be integrated into your existing app, even going as far as adding a provision button on a dashboard like I did: 

 



You might think that looks a bit ugly, and you'd be right. Having to separate args manually is annoying, but Python has a module called shlex in the standard library:

Web server infrastructure commonly has a proxy server, and multiple app servers, and I'll demonstrate how the proxy could be updated dynamically. This example doesn't contain the commands to actually deploy on each server, which varies massively between languages and projects.|||

