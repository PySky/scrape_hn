Ziltag is an open source image annotation tool that allows you to tag and comment directly on any web images. Ziltag is an easy to use web plugin to discuss, collaborate, showcase, and explore on images and it consists of an API server, an UI server, and a JavaScript plugin ( Github | Deploy Instruction ).

If you’re running a blog, it can help you to add meaningful notes and information on relative items on images. And if you’re a freelancer building websites for clients, incorporating Ziltag into the project will bring more value to both you and your clients.

See the Pen Ziltag Demo by Ziltag (@Ziltag) on CodePen.0

Ziltag binds every image to a Ziltag Map and its backend API identifies Ziltag Map by a tuple: API’s token, page’s URL and image’s source. However, browsers have a that restricts cross domain requests, i.e. troublesome to access the backend, but it can be overcome by (Cross-Origin Resource Sharing).

Ziltag uses heavily which is well supported by modern browsers to track images, it opens a door to serve several scenarios that change the image, such as the style on images or its ancestors might be changed, the host generates or destroys images on the fly, or images might be animated by a carousel, etc. There are many cases need dynamic management, and backs Ziltag well.

Ziltag Reader is another important component in Ziltag, the CRUD (create, read, update and delete) all live in Ziltag Reader. In fact, Ziltag Reader is an iframe that pulls the content via the backend. To boost the operating speed, Ziltag plugin sends warmup commands to the Ziltag Reader via for cross-window messaging. Thus the user can read the content instantly when opens the Ziltag Reader.

Ziltag is eager to spread the information, every update of content (i.e. new tag created, content updated, etc.) is delivered to the user in realtime. Server-Sent Events make the magic happen. The iframe which embeds the Ziltag Reader receive an update message first, then it passes the message via to the frontend, no dummy pieces.

Ziltag presents contents directly on images as the blinking red dots—the tags, where others can click to read and discuss. Hover on tags will bring up a preview dialog where readers can read the summary directly. If you want to add a new tag, hover on the image and click the red “+” icon on top-right corner to bring up the pop up screen. Click anywhere on the image you would like to tag, and write your comments.

There are three primary systems in the architecture: an API server, an UI server, and a JavaScript plugin. The API server is a Rails server, it serves all data storage and generating, including the data of tags, comments, and social media data. The UI server is a NodeJS server, it defines the UI with React, and serves the UI pages. On the clients’ sites, we provide a JavaScript plugin which built with React too. The plugin embeds the UI page in an iframe, using cross-window messaging to communicate.

The UI server and the plugin are built with React, and we choose redux to manage the state of the application. With redux, it’s easy to scale the number of components because of the philosophy of dumb component.

Despite the dumb components serves the vision parts well, there are still some issues should be addressed in the development of the React application: how to route the page and how to manage the side-effects. We choose the classic react-router to handle the routes and use redux-saga to manage the side-effects. Because the react-router is classic, we just discuss redux-saga here.

According to the introduction of the redux-saga from the official README:

We handle the API calls, user events, and messaging with the redux-saga. And thanks to the excellent side-effects model, it’s easy to scale the number of the side-effects.

We choose Koa 2 to serve the NodeJS UI server. It works with a node proxy server to redirect the request reversely to the API server and route the react page accordingly.

We package the application with webpack; it’s excellent to modularize the react components and patch polyfill. We choose postcss to preprocess the CSS and Babel to compile the ES7. Thus we can write in the modern CSS and JavaScript like a charm.

React can be easy to be introduced into Rails application if we only need client rendering. However, to improve SEO, server rendering is required as well. Actually, we should have chosen react-rails, but the only one reason why we abandoned it was its dependency of sprockets. Since we have replaced sprockets with Webpack, we made our own JS renderer using ExecJS.

To deliver every day, we automate several things, including the build of the application and environment, the deployment, and the alert of the system.

We encapsulate the API server and the UI server to Docker containers. With docker, the development and production are shared the same environment, and we use environment variables to control containers in different stages.

We used to deploy using Capistrano and be automated by Semaphore CI. After introduced Docker, things getting more complicated but worth it. For short, below is our development flow:

The following are brief introductions of our open-source repos:|||

