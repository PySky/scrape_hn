is a minimal router intended for use with client-rendered React/Redux applications.

I know what you're thinking - yet another React/Redux router? Really?

Yes, there are many existing solutions out there already. Of course, you already know . But you may have also heard of solutions like or .

Every router has its strengths - and, as with any library, choosing a router comes down to finding the one that best suits your needs. Here are some of the categories that similar routers target:

similarly targets a subset of the above categories. It attempts to answer the question: What is the minimal API needed in a Redux-first router for client-rendered React/Redux applications with a JSON-based routing configuration?

In modern browsers, the URL state and history are held in and . We can manipulate the browser history directly using the history API, but even better, we can utilize the awesome module to accomplish this.

Without Redux-first routing, a React/Redux application view may depend on URL state from outside of the store, like this:

With Redux-first routing, a React/Redux application view depends solely on the URL from the Redux store.

accomplishes Redux-first routing by making the URL a regular part of the state tree, allowing Redux actions to dispatch URL changes, and keeping the store and browser history in sync behind the scenes.

Here's what the URL looks like on the state tree:

has a reasonably small API. Here's a look at the exports in :

Let's look at how we'd add to a React/Redux application. We'll only make a few changes:

Declare your routes in a file with an array of "route objects":

Route objects are defined as follows:

The bundled webpack loader is used to translate into JavaScript that can be read by the component. Alternatively, you may choose to write the routing config in JavaScript yourself:

In your Redux config, add to the root reducer under the key, and add to your Redux middlewares, passing it the history singleton created in the application entry point (as shown in the following section).

In your app's entry point, import the routing config, create the history singleton, create the store with the history singleton, and call to initialize the router state in the store and start listening for external actions. Finally, render the application using inside the Redux .

To use the included webpack loader, import directly into your webpack config:

This project was heavily inspired by similar work and research on JavaScript/React/Redux routing including:

Contributions are welcome and are greatly appreciated!

Feel free to file an issue, start a discussion, or send a pull request.|||

redux-json-router - Declarative, Redux-first routing for React/Redux browser applications.