GraphQL is a data query language developed by Facebook intended to serve mobile and web application frontends. Juniper makes it possible to write GraphQL servers in Rust that are type-safe and blazingly fast.

Juniper does not include a web server - instead it provides building blocks to make integration with existing servers straightforward. It optionally provides a pre-built integration for the Iron framework.

If you want the Iron integration enabled, you need to enable the feature flag:

GraphQL turns the REST paradigm as it's usually implemented on its head: instead of providing a fixed structure of all types and relations in the system, GraphQL defines a schema which your users can query. The schema defines all types, fields, and relations available, while the query defines which fields and relations a user is interested in.

Juniper expects you to already have the types you want to expose in GraphQL as Rust data types. Other than that, it doesn't make any assumptions whether they are stored in a database or just in memory. Exposing a type is a matter of implementing the for your type. To make things a bit easier, Juniper comes with a set of macros that help you do this, based on what kind of type you want to expose. Let's look at how one could expose parts of the Star Wars Schema:

#[macro_use] juniper; juniper FieldResult; { NewHope, Empire, Jedi, } { id: , name: , appears_in: Episode , home_planet: , } (Episode { Episode NewHope , Episode Empire , Episode Jedi , }); (Human: () { description: // Field resolver methods look almost like ordinary methods. The macro picks // up arguments and return types for the introspection schema, and verifies field () FieldResult { ( .id) } field () FieldResult { ( .name) } field () FieldResult Episode { ( .appears_in) } field () FieldResult { ( .home_planet) } });

You can find the full example in src/tests/schema.rs, including polymorphism with traits and interfaces. For an example of the Iron integration, see the examples folder.

Juniper supports the full GraphQL query language according to the specification, including the introspective schema and all validations. It does not, however, support the schema language.

As an exception to other GraphQL libraries for other languages, Juniper builds non-null types by default. A field of type will be converted into . The corresponding Rust type for e.g. would be .

Juniper has not reached 1.0 yet, thus some API instability should be expected.

The road to 1.0 focuses on two aspects: making sure the API hasn't got any obvious dead-ends with respect to probable future features, and improving test coverage for general execution. There are some chores that need to be completed as well.|||

juniper - GraphQL server library for Rust