I’ve written a few tutorials regarding Node.js and the ExpressJS framework, but I never took a step back and explained how to make a super simple RESTful API for processing HTTP requests from a front-facing interface.

With this API created, you can use it with just about any application that can submit HTTP requests.  It is a great way to test a mobile application or one that uses JavaScript frameworks like jQuery, ReactJS, or AngularJS.

There are a few requirements prior to following this tutorial:

With that noted, go ahead and create a new directory for the project to live.  I’m using a Mac and will be doing everything in a directory on the Desktop.  Don’t be alarmed by my use of the Terminal.  Create the directory like so:

Navigate into the new directory and initiate a new NPM project:

You’ll be asked a series of questions.  Answer them appropriately or just paste the following in the package.json file it creates at the end:

The project is now ready.

We’re going to use Express as our Node.js framework so this requires us to install two packages with NPM:

The body-parser package allows our API to process POST requests.

Before going any further, let’s take a look at our project structure:

We’ve already taken care of package.json so let’s move onto the app.js file.  It is a wrapper for all server configuration and included files.  For example we’ll determine what port to use and what routes to include in this file.  Create it and include the following code:

To explain what we just did, we are first including the two packages and configuring the body parser to accept JSON as well as url encoded values.

When the server starts, it will listen for requests on port 3000.

This leaves us with the following line:

All API endpoints will appear in this file.  So let’s go ahead and open routes/routes.js found in the project root and add the skeleton code for this file:

We are passing the  variable from app.js and then exporting the  variable to be used by whatever calls it in our project.  This means anything found in that function will be usable.

So what might an example route look like?  Add the following into the  function:

Alright that route isn’t the most exiting, but here is what it is doing.  When the root of the application is requested via a GET request, the text Hello World will be returned.  By root of the application I mean http://localhost:3000.

So how about creating some routes that are actually useful?  Let’s say we want to have a route for creating accounts and a route for getting account information.  Starting with getting particular accounts, look at the following:

Yes I put the password in plain text for my mock data.  Of course you shouldn’t do this in production.  Beyond that, what we’re doing is we’re accepting GET requests on the /account endpoint.  The request must contain a username query parameter.  If the username doesn’t exist or doesn’t match the one in our mock data we return an error.  Otherwise we return the mock data object.

In production you’ll probably want to go against a database rather than using mock data.

Now let’s look at an endpoint in our API for creating accounts.

You’ll notice I chose to use the same endpoint.  Instead of a GET request, this endpoint is only accessed over a POST request.  As long as the required body parameters exist in the request, we are just choosing to return them.  Again in production you’ll probably want to include some database logic.

We have a Node.js application with three API endpoints now.  Let’s go ahead and test it out.

Since we are requiring two packages (Express and Body Parser), we need to install the for the first time.  With the project as your current working directory in the Terminal or Command Prompt, run the following:

Now you can go ahead and run the application:

Try hitting one of the GET endpoints from your browser with the host as http://localhost:3000.  You should get a response.  You’ll need a browser extension or something else in order to test the POST endpoint.

We didn’t use a database in this example, but you saw how to make a very simple RESTful API using Node.js and the ExpressJS framework.  I personally whip something like this up when I need to test my Ionic Framework and React Native applications.  Even without real data it is still good for testing your front-end applications.|||

Use Node.js and the ExpressJS framework to create a very simple RESTful API that can be used with front-end applications like AngularJS or ReactJS.