Algo VPN is a set of Ansible scripts that simplify the setup of a personal IPSEC VPN. It uses the most secure defaults available, works with common cloud providers, and does not require client software on most devices. See our release announcement for more information.

The easiest way to get an Algo server running is to let it set up a new virtual machine in the cloud for you.

Setup an account on a cloud hosting provider. Algo supports DigitalOcean (most user friendly), Amazon EC2, Google Compute Engine, and Microsoft Azure. Download Algo. Unzip it in a convenient location on your local machine. Install Algo's core dependencies. Open the Terminal. The interpreter you use to deploy Algo must be python2. If you don't know what this means, you're probably fine. into the directory where you unzipped Algo, then run: Linux (rpm-based): See the Pre-Install Documentation for RedHat/CentOS 6.x Install Algo's remaining dependencies. Use the same Terminal window as the previous step and run: On macOS, you may be prompted to install . You should press accept if so. List the users to create. Open in your favorite text editor. Specify the users you wish to create in the list. Start the deployment. Return to your terminal. In the Algo directory, run and follow the instructions. There are several optional features available. None are required for a fully functional VPN server. These optional features are described in greater detail in deploy-from-ansible.md.

That's it! You will get the message below when the server deployment process completes. You now have an Algo server on the internet. Take note of the p12 (user certificate) password in case you need it later.

You can now setup clients to connect it, e.g. your iPhone or laptop. Proceed to Configure the VPN Clients below.

Certificates and configuration files that users will need are placed in the directory. Make sure to secure these files since many contain private keys. All files are saved under a subdirectory named with the IP address of your new Algo VPN server.

Send users their Apple Profile. Find the corresponding mobileconfig (Apple Profile) for each user and send it to them over AirDrop or other secure means. Apple Configuration Profiles are all-in-one configuration files for iOS and macOS devices. On macOS, double-clicking a profile to install it will fully configure the VPN. On iOS, users are prompted to install the profile as soon as the AirDrop is accepted.

Turn on the VPN. On iOS, connect to the VPN by opening Settings and clicking the toggle next to "VPN" near the top of the list. On macOS, connect to the VPN by opening System Preferences -> Network, finding Algo VPN in the left column and clicking "Connect." On macOS, check "Show VPN status in menu bar" to easily connect and disconnect from the menu bar.

Managing On-Demand VPNs. If you enabled "On Demand", the VPN will connect automatically whenever it is able. On iOS, you can turn off "On Demand" by clicking the (i) next to the entry for Algo VPN and toggling off "Connect On Demand." On macOS, you can turn off "On Demand" by opening the Network Preferences, finding Algo VPN in the left column, and unchecking the box for "Connect on demand."

No version of Android supports IKEv2. Install the strongSwan VPN Client for Android 4 and newer. Import the corresponding user.p12 certificate to your device. See the Android setup instructions for more a more detailed walkthrough.

Windows clients have a more complicated setup than most others. Follow the steps below to set one up:

Your VPN is now installed and ready to use.

If you want to perform these steps by hand, you will need to import the user certificate to the Personal certificate store, add an IKEv2 connection in the network settings, then activate stronger ciphers on it via the following PowerShell script:

Network Manager does not support AES-GCM. In order to support Linux Desktop clients, choose the "compatible" cryptography during the deploy process and use at least Network Manager 1.4.1. See Issue #263 for more information.

Install strongSwan, then copy the included ipsec_user.conf, ipsec_user.secrets, user.crt (user certificate), and user.key (private key) files to your client device. These will require customization based on your exact use case. These files were originally generated with a point-to-point OpenWRT-based VPN in mind.

One common use case is to let your server access your local LAN without going through the VPN. Set up a passthrough connection by adding the following to :

Depending on the platform, you may need one or multiple of the following files.

If you turned on the optional SSH tunneling role, then local user accounts will be created for each user in and SSH authorized_key files for them will be in the directory (user.ssh.pem). SSH user accounts do not have shell access, cannot authenticate with a password, and only have limited tunneling options (e.g., is required). This ensures that SSH users have the least access required to setup a tunnel and can perform no other actions on the Algo server.

Use the example command below to start an SSH tunnel by replacing and with your own. Once the tunnel is setup, you can configure a browser or other application to use 127.0.0.1:1080 as a SOCKS proxy to route traffic through the Algo server.

To SSH into the Algo server for administrative purposes you can use the example command below by replacing with your own:

If you find yourself regularly logging into Algo then it will be useful to load your Algo ssh key automatically. Add the following snippet to the bottom of to add it to your shell environment permanently.

If you chose the save the CA certificate during the deploy process, then Algo's own scripts can easily add and remove users from the VPN server.

After this process completes, the Algo VPN server will contains only the users listed in the file.|||

algo - Set up a personal IPSEC VPN in the cloud