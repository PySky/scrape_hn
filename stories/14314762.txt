With our app hooked up to a Backand application, we now have the world at our fingertips in terms of possible functionality. We can use the pattern we established in the last part of this tutorial (Part 3) in conjunction with the SDK to implement any type of functionality we desire. In this stop along the way, we'll add a UI to create new to-do items, enable editing and deleting to-do items, and add some dynamic behavior to our jQuery UI.

Now that we're hooked up to the Backand SDK, adding to-do item creation is as easy as adding the UI for a new item and wiring it up to the SDK call needed. The Backand SDK provides backand.object.create() for this purpose. The method wraps an HTTP POST call, which creates an object in a Backand application. Let's add the code for that now:

Now, we can simply call with our object's data, and we'll have a new item created in our back end. Next, we'll need to create a simple UI for adding a new to-do item. We'll put this at the top of the page, and separate it from the list using an inline form:

As you can see, we create a very simple form consisting of an input for the to-do item's name and description. I've opted not to include support for the "completed" property of an item - we're actually going to tackle that later. Now that we have the UI in place, we need to connect the UI to Backand. We'll do this with a jQuery .click() handler, defined in our handler:

This click handler binds to the button we created using the selector. Then, we obtain the name and description from the form, and use it to build our new object. Next, we send the new object to Backand for creation, and reset the form. Finally, we reload the to-do list in the success handler for the create call, updating our UI with a fresh copy of our to-do list. The page now looks like the following:

Simply enter a name and a description in the provided fields, then hit "Create" to enter the item into the database!

As you've probably added several test items you'd prefer to do without as you worked through the prior section, let's handle deleting an object next. We'll use a glyph to drive the deletion UI. Update the to-do item rendering code in to include a delete icon at the beginning of each row:

We also need to update our HTML population to account for the new variable:

Finally, this approach uses Font Awesome, a free open-source font library. To properly display the delete icon, we need to include this library's CSS in index.html:

Now, we render a small delete icon next to every entry in the list:

Each delete icon is given a class of , as well as an ID of the form , where is the integer ID of the current object. Next, we'll add the delete function to our class, using the provided method:

At this point, we're faced with a somewhat tricky technical issue. jQuery binds event handlers to DOM selectors, which are XPath representations that can be used to identify singular or groups of HTML elements on a page. As we build our to-do list dynamically, we don't have this option. To get around the problem, we'll instead key off of the CSS class that we define - - to drive our dynamic deletion. If we set our detector on a parent element that we know exists, like , we can then use the handler with a selector for our icon class. Then all we need to do is parse the ID to pull out the numeric ID of the to-do item being deleted:

Once again, we use the success handler to trigger a page refresh, thus dynamically updating our list as it is modified.

Now that we have added item creation, and item deletion, we have only one more feature we need to have a fully-functional to-do list application - marking items completed. We'll do this using the function to update the property of our object model. First, we'll add a new button to the dynamic item HTML that we can use to mark an item completed:

You'll see that I actually added two buttons above. We'll use some dynamic logic to change these buttons to be either a "completion" button, or an "uncompletion" button. The logic to do this is as follows:

As you can see, this is the same loop we used to generate our HTML before, just with a minor refactor. We've pulled all of the relevant data attributes from the object at the top of the loop, and we use the flag to dynamically assign an empty display style to the appropriate button, effectively hiding the affected buttons. The logic for this is in the ternary operators used in replacing and - the button gets the correct display attributes based upon the value of as it relates to the individual object. Another notable item is that we have had to change our replace functionality. As we are now replacing multiple instances of the same string with every call, we need to change these methods to operate using a regular expression applied globally to the string. To do so, change the calls in the loop above with these:

Next, we need to call the update method from the SDK. Modify the dataService object to include the following function:

Similar to the delete method, this is just a passthrough to the SDK that returns the promise to be resolved.

Now that we've added our UI and our deletion method, we can use a technique similar to what we did with deletion to register both the "complete" and "reopen" handlers:

We can now see the individual completion status for each entry in your to-do list app:

With that, the basic functionality of our to-do list application is created. We have augmented our simple to-do list app to allow for creating new items, deleting items, and marking items completed. At this point, we can go in any direction we like - we have the full power of a data model at our app's beck and call, and can build out whatever we wish. In the next article in the series, we'll do some cleanup of the code, add some more dynamic behavior, and we'll look at integrating user authentication into the app.|||

In part 4 of our series, we're going to cover adding some dynamic behavior using our jQuery UI, using JavaScript/HTML to add functionality, and modify our UI.