Bug reporting may not be the most fun activity in the world, but doing it the right way by the right person is very helpful and efficient when it comes to optimizing projects. There have been some hideous attempts at bug reporting. Some, from sheer laziness. Others, from forgetfulness. And even some, from over-creativity because there is a multitude of ways you can produce a bad bug report.

A bad bug report would be one that isn’t filed in the right place. It may have useful, clear, and well thought out content but filing it in the wrong place isn’t the best way to communicate with a developer. An example of this would be sending a tweet or an email. Tweets can turn into long chats about finer details. Emails are bad because bug reports aren’t the only things popping up in them. It’s overall an unreliable and decentralized way to send a bug report.

A bad bug report can be filed in the wrong place but still can be useful. A worse bug report would be one that doesn’t give enough information about the bug. If the developer receiving that report can’t even find and reproduce the bug, then it’s a horrible bug report. It’s as simple as that. Simply saying things like “It won’t work!” or “Fix it!” are worse than nails on a chalk board. That is where laziness takes a toll on bug reporting. Take the extra minute out of your life to explain the problem with a little more detail!

Another trait that makes a bad bug report is when its priority is marked on the complete wrong side of the spectrum from the actual bug. If it’s marked as “critical” and its description is something along the lines of “This doesn’t toggle smoothly” then you might as well say goodbye to the organization of the developer’s team. This horrible practice throws simple UI disagreements in with serious problems like malfunctioning buttons which is totally misleading for the team.

The absolute WORST bug report is one that isn’t filed at all. No matter what resources and tools people have, they should be able to communicate about bugs effectively. A proper mode of communication between testers and the development team regarding bug reports should be established at the beginning of a project.

If you want to avoid all of the problems above you first and foremost need a proper bug reporting platform or system to implement with your project. To communicate successfully a development team needs something that not only makes it easy for testers to supply the correct information but get it to the team in the correct way. DebugMe is a great tool for doing just that!

Communication encompasses how well a tester can portray a problem to a developer. With DebugMe, a tester can annotate a page as they would on paper by drawing, highlighting, blacking out specific areas, or even throwing a pin on it. This type of visual feedback is not only a faster way of explaining where a problem lies, but a more natural one as well. Add context to those types of visuals and you might as well send a bug report directly into the developer’s brain.

A big chunk of the communication required in a bug report is the background information of a bug. This includes the location of the bug, the browser the site is being run on, and the code that was being run at the time. DebugMe provides all of that information to you AUTOMATICALLY! This saves both the tester AND the developers a lot of time that would be wasted on extra explanation and allows them to find more bugs, faster.

Organization comes in more so on the developer end of the equation. If the bug reports are jumbled in an email inbox or on a Twitter feed then they are mixed with all sorts of unrelated content. Teams that operate without a debugging platform waste a ton of time sifting through emails and reports, resulting in a waste of an invaluable resource; time. With a debugging platform like DebugMe, everything is in the same context and works harmoniously. Having a dashboard to manage your workflow helps keep everything organized in a logical way allowing the entire project team to be on the same page with the most efficient communication. This saves project teams a lot of time, which leads to them saving money.

You are reading the DebugMe blog. We are developing a visual feedback, bug tracking & project management tool which saves time and frustration for web developers, project managers & designers. Give it a try, it’s free forever! Or purchase one of the professional packages now and save 50% in the first three months.|||

Avoid the bad bug report! Doing bug reporting the right way is very helpful and efficient when it comes to optimizing projects.