We previously talked about what you could find in the virtual memory of a process, and where you could find it. Today, we will try to “reconstruct” (part of) the following diagram by making our process print addresses of various elements of the program.

In order to fully understand this article, you will need to know:

All scripts and programs have been tested on the following system:

The first thing we want to locate in our diagram is the stack. We know that in C, local variables are located on the stack. So if we print the address of a local variable, it should give us an idea on where we would find the stack in the virtual memory. Let’s use this program ( ) to find out:

This will be our first point of reference when we will compare other elements’ addresses.

The heap is used when you malloc space for your variables. Let’s add a line to use malloc and see where the memory address returned by is located ( ):

It’s now clear that the heap ( ) is way below the stack ( ). At this point we can already draw this diagram:

Your program is also in the virtual memory. If we print the address of the function, we should have an idea of where the program is located compared to the stack and the heap. Let’s see if we find it below the heap as expected ( ):

It seems that our program ( ) is located below the heap ( ), just as expected.

 But let’s make sure that this is the actual code of our program, and not some sort of pointer to another location. Let’s disassemble our program with objdump to look at the “memory address” of the function:

-> we find the exact same address ( ). If you still have any doubts, you can print the first bytes located at this address, to make sure they match the output of ( ):

-> We can see that we print the same address and the same content. We are now triple sure this is our function.

You can download the Udis86 Disassembler Library here.

Here is the updated diagram, based on what we have learned:

The function can take arguments:

Let’s see where those elements stand in the virtual memory of our process ( ):

These elements are above the stack as expected, but now we know the exact order: ( ) < ( ) < ( ) < arguments (from to + ( = size of the string + for the char)) < environment variables (starting at ).

Actually, we can also see that all the command line arguments are next to each other in the memory, and also right next to the environment variables.

The array is 5 elements long (there were 4 arguments from the command line + 1 element at the end ( always ends with to mark the end of the array)). Each element is a pointer to a and since we are on a 64-bit machine, a pointer is bytes (if you want to make sure, you can use the C operator to get the size of a pointer). As a result our array is of size = . in base is in base . If we add this value to the address of the beginning of the array , we get… (The address of the array)! So the two arrays are next to each other in memory.

In order to check this we need to know the size of the array. We know that it ends with a pointer, so in order to get the number of its elements we simply need to loop through it, checking if the “current” element is . Here’s the updated C code ( ):

-> != (but still <) . So the answer is no

Let’s update our diagram with what we learned.

Let’s call a function and figure this out! If this is true, then the variables of the calling function will be higher in memory than those from the called function ( ).

-> True! (address of var in function ) < (address of var in function )

We now update our diagram:

Let’s double check everything we found so far with ( or refer to the first article in this series to learn about the filesystem if you don’t know what it is).

Let’s add a to our program so that we can look at its “ ” ( ):

This also brings up more questions:

There is also another fact that we haven’t checked: Is the heap actually growing upwards?

We’ll find out another day! But before we end this chapter, let’s update our diagram with everything we’ve learned:

We have learned a ton of things by simply printing informations from our executables! But we still have open questions that we will explore in a future chapter to complete our diagram of the virtual memory. In the meantime, you should try to find out yourself.

If you have questions or feedback don’t hesitate to ping us on Twitter at @holbertonschool or @julienbarbier42.

 Haters, please send your comments to .

As always, no-one is perfect (except Chuck of course), so don’t hesitate to contribute or send me your comments if you find anything I missed.

This repo contains the source code ( files) for programs created in this tutorial.

Follow @holbertonschool or @julienbarbier42 on Twitter to get the next chapters! This was the third chapter in our series on the virtual memory. If you missed the previous ones, here are the links to them:

Many thanks to Tim and SantaCruzDad for English proof-reading!|||

