Today I am going to talk about isolated scope for directive in AngularJS. Part of the reasons why AngularJS is so powerful and becoming more and more popular is its directive feature, which allows you to create your own reusable HTML components with different features, however directive might be one of most confusing aspects in Angular. And I believe what makes directive kind of difficult to understand are the subtle things of isolated scope.

When I first started out playing around with Angular directives, I didn’t pay much of attention about how isolated scope works since I normally use directives for manipulating single DOM element. Therefore, I didn’t care its reusability until when I want to use it in another controller or application, things started to fall apart. Directive scope by default inherits from its parent scope, but that’s not desirable if you want to build reusable components and not want your directive accidentally modify its parent scope variables. And this is where isolated scope comes in to help. In this post I will cover some of the basics of isolated scope for directives and how we can use it to build a reusable component, there are three ways you could interact with directive’s isolated scope and let’s take a look at each of them.|||

Today I am going to talk about isolated scope for directive in AngularJS. Part of the reasons why AngularJS is so powerful and becoming more and more popular is its directive feature, which allows…