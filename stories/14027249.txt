Secret management was added the Docker product in the 1.13.1 release and enables you to use secrets such as API keys, passwords and tokens in your production applications.

In this post we'll look at what is required to integrate a secret into an application. The example is using a token to securely integrate with Github events through webhooks.

This post is split into three sections:

When an event you've subscribed to occurs then the Github servers will send an HTTP POST over to your endpoint. An example could be that someone forks your code or submits a Pull Request.

Github has a Ruby code sample that shows how to verify the signature of the incoming web hook against a shared stored in an environmental variable.

The Docker team made a design-decision to avoid storing credentials and secrets within environmental variables. Instead it provides files under the mount in a . This means that all existing applications that expect to read secrets from the environment will need to be modified or adapted.

It turns out this is a relatively simple change in the Ruby code:

Here's what we'll need from a Docker perspective:

Docker secrets can be created on the command-line, but a Docker Compose file is easier because we can define the service, secrets and which service can access which secret all in one place.

Once the github_responder service is created it will have access to a file called github_webhook at .

A rudimentary webhook responder with no security would look like this:

The Github example is enhanced to read an environmental variable and verify the message is correct. I've changed the code to read the secret created by Swarm:

What's going on in the code?

Github's example doesn't transmit your secret in plaintext, it effectively signs the payload and then because you own the key you can sign it locally and compare the values.

This is better than sending your API-key or secret in plain-text, but does involve slightly more work for you in your application.

For this tutorial we will use a Docker image that I've already published on the Docker Hub. This is the Dockerfile I wrote:

It uses the light-weight Linux distribution Alpine Linux, adds the Ruby web server package and then the package which provides us with Github's Ruby utilities.

Head over to Github and create a sample repository and enable webhooks.

Paste your publicly exposed URL into the Payload URL.

Make sure the Content-type is since the example code expects this format.

Now select which events you want to opt into:

Create your secret and deploy your stack

Now create a file named and put the secret in it, so it should be if you used the same one as me.

In the same directory create a docker-compose.yml file like below:

Now you can head over to Github and trigger an event such as creating an issue.

Now you'll see a success message for your function containing the relevant details from the event.

If you want to prove the security works:

We've now applied Docker Swarm secrets to integrate with Github events securely. We needed to make a small modification to the sample code, but that was relatively painless.

You can use this approach as a template for your own applications. I'm including some additional resources below.

Follow me on Twitter for more Docker news and tutorials.|||

Explore Docker Secrets in Action through this worked example of integrating with Github and Swarm. Secret management was added to Docker in 1.13.1