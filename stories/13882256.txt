If you want to understand why your database queries maybe aren’t as fast as they used to be, nothing beats a little feature of postgres called .

It’s a simple idea. Just ask postgres to explain how it plans to perform a query and it’ll tell you. You can even have it execute the query it and compare expected performance to actual.

You may have seen explain before. Ever since version 3.2, Rails will automatically run it on any queries that take longer than 500ms.

The only problem is that the output is fairly cryptic. Here’s an example, which I stole from the rails development blog:

What the heck does this mean?

In this article I’m going to walk you through how to interpret results like this, with a special focus on how it impacts web development in Ruby.

If you’re using Rails, you can append to any Active Record query to do an explain:

While the method is handy, it doesn’t give you access to the more advanced options available to you directly in postgres.

To use explain directly in postgres, just run to open your postgres client and run something like this:

This gives us information about how postgres plans on doing the query, including its best guesses as to how much work it will take.

To actually run the query and see how it compares to the estimates, you can do an :

Postgres is smart. It will do its best to figure out the most efficient way way to execute your query. In other words, it makes a “query plan.” The explain command simply prints it out.

Consider the following:

This output is made of two parts:

Let’s remove all of the performance estimates, so we only have our list of nodes:

This is kind of like a “program” that postgres has written to execute the query. There are three actions: “limit”, “sort” and “seq scan.” The output of each child is piped into its parent.

If it was Ruby, it might look like this:

There are lots of different actions the postgresql can use in its query plan. You don’t need to know what they all mean, but it’s helpful to know a handful:

Each node in the node list has a set of performance estimates. They look like this:

I find myself using “Rows” the most. It’s really useful for seeing if the query scales. If it equals “1” then I know the query is performant. If it equals the number of records in the table, then the query probably isn’t very performant with large datasets.

If you use the feature to actually run the query, then you’ll be given two sets of numbers. The first contains estimates, like the ones above. The second contains the actual values:

By default outputs a pretty condensed version of what it knows. You can, however, ask it to give you more detail. You can even tell it to output formats like JSON or YAML.

You can get even more verbose output by using

Explain generates a lot of output. When analyzing more complex queries, it can become difficult to parse.

There are several free tools designed to help you. They parse the output of and generate nice diagrams for you. They can even flag potential performance issues for your review. Here’s one I like.

Let’s put it all together and do a few quick examples. Did you know that there are several common Rails idioms that produce poorly-scaling database queries?

It’s really common to see code like this in Rails views:

That results in SQL that looks something like this:

Let’s plug into and see what happens.

Woah! Our simple count query is looping over 22,265 rows — the entire table! In postgres, counts always loop over the entire record set.

It’s really common to see lists of items, sorted by some field. For example:

You’re just retrieving 10 records, right? But to get them, you have to sort the entire table. As you can see below, the node has to process 22,265 rows.

By adding an index we can replace the node with a much faster .

I hope this article has been helpful and will encourage you to play around with the command. It’s really fundamental to understanding how your application will scale as you bring in more and more data.|||

If you want to understand why your database queries maybe aren't as fast as they used to be, nothing beats a little feature of postgres called 'explain.'