Last year ( 2016 ) , we BambooFox were invited to join the Synology Bug Bounty program. After about 2 months of hacking, we discovered several vulnerabilities, including a remote root code execution vulnerability. Synology engineers response and fix the vulnerabilities in a very short time, which shows they pay a lot of attention to security issues.

And now ( in 2017 ) , we are allowed to publish the vulnerabilities:

We mostly focus on PhotoStation, which is the picture management system enabled in most Synology DSM ( DiskStation Manager ).

The first vulnerability allowed us to login as admin without entering the password.

The key points are the character in the field and in the get parameter . The server site CGI will concatenate the strings in , and into a command and execute the command, and the special characters and aren’t filtered out correctly, which will lead to the command injection vulnerability.

Therefore in our PoC1, the command will become:

The command will return 0 (True) and thus bypass the authentication.

Result: Adversary can login as admin without password

Adversary can also login as admin by the following PoC:

The source code that handle the user authentication are in :

Once the variable is , the command will be executed in the background and always return 0 (true), thus the adversary can login as admin.

After we successfully login as admin via the command injection vulnerability, we extended the attack surface to attempt remote code execution.

We adopted a similar approach (PoC1) in order to achieve RCE. We then took a deep look into the source code of PhotoStation, and found the following code:

In this code snippet, , and can be easily controlled by crafting the HTTP headers, and that’s the original cause of the command injection vulnerability. Our first few attempts failed due to the site filtered out some special characters. However, we noticed that the site did not filtered out all the special characters. Here’s the code that indicated the non-filtered characters:

As a result of the code above, , , and can be used to achieve command injection.

After we got the shell, we continued to find security flaws in the DSM. The binary program got our attention. This binary is a setuid program, and has a powerful copy function. With the parameter, it will do the command and copy a file with the root permission. This make us have the ability to read/write an arbitrary file .

With the previous Vul-02 ( RCE ) and Vul-03 ( Read-Write Arbitrary Files ), we can exploit the vulnerability and escalate our privilege to root. We first tried modify the file, but failed due to the AppArmor protection. So we change our target to the file that will be invoked by crontab. Finally we found , a task which will be invoked by crontab as root. We use to modify its file content to the following command:

Now we can wait for our reverse shell, with the root permission.

Also by exploiting Vul-02 and Vul-03, we’re able to login the service as admin. If the admin is logged in, we can use the following command to get the admin’s session ID:

Although the server side will check the admin’s IP address, but the check can be bypassed easily by forging the header.

Login as admin give us the ability to execute command with the root permission. For example, we can execute our own command as root with the help of Task Scheduler. This result in a privilege escalation as well.

We also found some other security flaws. If a user sends too many requests to , the user will be blocked by his IP, which is retrieved from the header. However, can be easily forged from the client side, therefore an attacker can block as many users as he wants by forging the header, leading a DoS attack.

There’s a LFI (Local File Inclusion) vulnerability in . The parameter is controllable.

For example, we can use to download a user’s git config file.

Some of the vulnerabilities have already been discovered by Lucas Leong from Trend Micro ( link )|||

Synology Bug Bounty Report Original Post: https://bamboofox.github.io/2017/03/20/Synology-Bug-Bounty-2016/ Author: BambooFox Team ( Henry, jpeanut, ding, leepupu, Angelboy, boik, adr, Mango King,...