Google unveiled its new plan to speed up the mobile web today — Accelerated Mobile Pages, or AMP — and it’s the latest attempt by a technology company to deal with the problem of the slow mobile web. Facebook has its Instant Articles to make certain news stories load more quickly in an app; Apple wants to move you into its slick new Apple News app. Google’s effort has more to do with changing the mobile web than building its own app or environment, which is why AMP is debuting with a ton of partners in technology (Twitter, Pinterest, LinkedIn, Chartbeat, Parsely) and publishing (The New York Times, Vox Media, the Financial Times, Gannett, Hearst, the Posts Washington and Huffington).

There are a ton of smart ideas in AMP. And it works — cutting the load times of article pages enormously.

But I have to say I’m a little conflicted about it. Google notes that AMP isn’t a business partnership the way that Instant Articles or Apple News are; there’s no ad rev share to consider. But AMP tries to do something maybe even more significant: change the way that the web is built, killing off some technologies and advantaging others. In a world of controlled platforms and walled app gardens, the web is the last open space standing, built over two decades, and there’s something irksome about a few Google engineers deciding which parts to ban.

Yes, publishers don’t have to adopt it, and yes, it’s an open source project, and yes, the performance gains are very real and very substantial. But publishers can choose to adopt Facebook Instant Articles and Apple News too. The point is that this is another stop on the path to powerlessness for publishers — another case of tech companies setting the rules.

It’ll take time and evidence to see how much my reaction is emotional — the fears of an old webhead who remembers browser wars and ActiveX and the battles over open web standards — and how much is strategic. Because maybe it really does take a giant like Google to be the one to save publishing from itself.

Google’s incentive here is obvious: It makes its money on advertising, and the vast majority of that advertising is on the open web. If Facebook (or some other platform, but seriously, Facebook) provides a markedly better mobile experience than the open web does, those advertising opportunities (and that user data) disappears into Zuckerberg’s Walled Garden of Earthly Delights.

AMP grew out of a discussion at the most recent Newsgeist, the occasional Google-and-Knight-sponsored unconference of news and tech people to Think Big Thoughts and Talk Big Talk. If you look at this writeup of the May event by Austrian news exec Gerold Riedmann, it’s clear what was top of mind:

You can also see a seed of AMP in this Jeff Jarvis post from the same time:

AMP is a number of technologies rolled into one. The first and most important is what we might call code subsetting. HTML, the language webpages are built in, includes some things that load quickly and others that load slowly. AMP aims to kill off the slow parts, most notably JavaScript. Here’s Malte Ubl, the AMP Project tech lead:

No third-party scripts! Here are some things that use third-party scripts: essentially every ad, essentially every analytics package. When you see a page that is stuffed full with trackers, those are pretty much all third-party scripts.

Certain HTML tags are also banned: , , , and all other than JSON (and the that loads AMP in the first place). The main HTML5 multimedia tags, , , and , are replaced with custom elements , , and .

Creating these new elements let AMP HTML treat images and video as assets that can be constrained at will for performance reasons:

CSS is also strictly limited in AMP HTML (“The restriction is in place to make overall performance easier to reason about. It may be opened up in the future”). Among the banned are the common CSS properties used for animation. Custom fonts are allowed but constrained in certain ways.

By essentially supplanting the native rendering engine in a mobile browser, AMP can load or unload assets at will — not worrying about images until they’re nearly in view, for instance, or loading editorial text content first and ads second.

There are lots of clever ideas here, and it’s understandable why these constraints would help improve performance. For better and for worse, this is essentially a rollback of how HTML and web technologies have evolved over the past decade. It’s a little jarring that so many of the sample AMP pages on display this morning look a lot like the web of, say, 2002, shrunk down to a phone screen. Like an IE 5.5 emulator. I mean, this sample image from Twitter is ugly:

But this stripping out out tags also reinforces a walled garden. AMP is an open source project, but tags like are killing and replacing elements that have been part of the open web for literally decades. It’s forking HTML.

In the earlier days of the web, browser manufacturers (most notably Microsoft) tried to shape HTML so that it would only work properly in its universe — the days of “Best Viewed In Internet Explorer.” The web standards movement worked very hard for years to get browsers and developers on board with using agreed-upon open standards for how the web gets built and rendered.

Now, AMP essentially asks you to build a parallel-universe version of your site that strips out not just anything that’s slow, but anything that might be slow. You know how ad blockers block all ads, whether they’re perfectly reasonable or aggressively terrible? AMP HTML kills all JavaScript, not just bad JavaScript.

You can embed things in an AMP page, using pre-approved extensions like and . But that advantages the companies that can build these sort of embeds and get them added to the spec. The open HTML tags being killed are available to anyone, anywhere — any startup, any publisher.

To be fair, Ubl acknowledges that AMP isn’t going to make sense for every webpage:

You won’t be able to build beautiful interactive maps or data visualizations in AMP; you probably wouldn’t try to build Snow Fall in AMP. But it might make sense for those day-to-day pieces that make up most of the journalistic production of most publishers.

AMP allows you to maintain two different versions of your webpages (HTML and AMP HTML) or just convert entirely to AMP. For example, The Verge’s article about today’s announcement is here, at the url http://www.theverge.com/2015/10/7/9467149/google-accelerated-mobile-pages-caching-preview. But the code of that page also includes this line that tells the browser there’s an AMP version of the page:

That page is stripped down.

On my iMac, the full version weighs in at 1.3 megabytes, renders the visible content in 2.60 seconds, and loads completely in 5.80 seconds. The AMP version is about half the size (777 kilobytes), renders in 0.47 seconds, and loads completely in 1.34 seconds.

That’s the kind of enormous speed gain we’re talking about. But…that page also includes a SoundCloud embed — which is just broken in the AMP version, presumably because there isn’t an , or The Verge hasn’t implemented whatever it needs to make it work. And…The Verge is giving up whatever benefit they were getting from all those ad trackers and analytics trackers and such.

It is possible to believe both that (a) there are too many ad tech companies and too many sloppy ad networks and too many duplicative analytics packages and the web is a giant mess, and (b) that publishers don’t add those things to their pages purely to annoy users, and they get some form of (financial, analytical, editorial) value from them. AMP makes those choices for them.

Ubl says there’s still room for some interactivity without scripting on AMP pages. I don’t have the technical chops to evaluate that, but if you’re, say, a news developer who has built all sorts of stuff that relies on JavaScript libraries (whether open source or your own), it must be a little disorienting to hear about a format where none of it will work.

What about ads? Essentially all ad networks use third-party JavaScript, which is banned in AMP. So there’s something called to take its place:

Only five ad networks are supported at first, four of them owned by Google, Amazon, and AOL. Google says any ad network can join, but again, the big guys have an advantage at the starting line. There’s more development to be done here, and people with more ad-tech knowledge than I have can better evaluate the impact.

So that code constraint is the main part of AMP. What’s another one? Caching. It’s an optional part of AMP, but Google will cache a copy of your AMP webpage for you on its servers and send its copy of your page to your user rather than yours. I think we can safely assume Google knows how to run servers better than your IT crew does, and its distributed network of server farms should make cached delivery substantially faster. (Google notes that other companies are free to set up caching systems to use with AMP, but given that Google’s will be free and, one imagines, pretty good, broad competition here seems unlikely.)

It’s unclear exactly how that will work, since AMP is still a work in progress (particularly around advertising and analytics). But it’s optional; you can run AMP without any caching at all.

Another issue: How will Google treat AMP’d pages? Google showed off a new carousel of AMP’d news stories in search results:

But it’s important to note that Google specifically said that’s a demo, not necessarily what a real implementation would look like.

Google said it won’t prefer AMP pages over non-AMP pages in search…but reminded us hint-hint-nudge-nudge that page speed is already a factor in Google results, with faster pages getting preference. Very similar to how Facebook says that Instant Articles won’t get any favors in its algorithm, but notes that faster load times and better user experiences do. When sites still get ~30 percent of their traffic from Google search, a tech implementation that gives any real SEO boost becomes alluring.

Finally, how does this interact with the publishing bête noire du jour, ad blocking? AMP promises to make advertising nicer (primarily by killing off all that scripting cruft), but it doesn’t block ad blockers.

You can make an argument that a faster smoother mobile web would lead to more people turning off their ad blockers or whitelisting AMP’d sites. But that feels like a triple bankshot, and I suspect user behavior would be hard to shift here.

As I said, AMP is full of terrific ideas. It really does speed up load times.

But that success comes with tradeoffs. For most publishers, you’re being asked to set up two parallel versions of your stories. (Unless you really think you won’t need to ever do anything outside what AMP allows on any page, which is unrealistic for most.) That takes significant time and resources. You’re being asked to set aside most or all of the ad tech and analytics that you use. You’re trading in open web standards for something built by Google engineers who, despite what I don’t doubt are the best of intentions, have incentives that don’t line up perfectly with yours. And you’re becoming an disempowered actor in a larger Silicon Valley battle over ad tech. (Google advocating something that blocks enormous slices of contemporary ad tech can’t be viewed in isolation from the fact Google is the dominant force in online advertising, and as interested as any company is in extending its power.)

And it’s yet another case of a technology company coming along to promise a better experience for users that takes one more bit of power away from publishers. That is, of course, a reasonable and good thing for technology companies to do! Blogger and WordPress empowered anyone to publish online; this hurt professional publishers but the tradeoff was a net gain for users. Google, Facebook, and Twitter created amazing platforms for discovering interesting content; this hurt professional publishers but the tradeoff was a net gain for users. Apple created an app platform that promised amazing experiences for people with iPhones and iPads; this hurt professional publishers but the tradeoff was a net gain for users.

And we who read things on our phones will be better off if AMP or something like it gets wide adoption. But that’s a different question than whether it’ll make sense for publishers. Which is why I’m conflicted.|||

The speed gains are very real. But do publishers want to trade in the open space of what we've known as the web for yet another platform they have little control over?