While helping a developer move their site move to HTTPS, they noticed even after fixing all the mixed content on the page, they still saw an error message that says the site was “not secure” when loaded over HTTPS.

The certificate was good and installed correctly, even had an A rating on SSL Labs. But it turns out, before fixing the mixed content issues, they had clicked to load the mixed content in the browser to see if this fixed an issue they saw inside the page.

It’s pretty simple to fix this if you have this, just open the page/site again in another tab and close the tab that you’d allowed mixed content on. The new tab will block any active mixed content again and return to a green lock.

But it’s interesting to see how this happens:

In this example I’ll use https://mixed-script.badssl.com/ which is an example site for mixed content. In their case, they have a script loaded over HTTP on the HTTPS page which leads to an active mixed content warning and the script being blocked by default.

This type of mixed content still shows the green secure HTTPS indicator:

Aside from possibly noticing something isn’t working on the page, if you open the Chrome dev tools console, you’ll see the browser blocked the script from loading to protect the user.

Along with this you’ll also notice a shield symbol to the right of the URL bar with a cross symbol inside. This is an indicator that the page has blocked mixed content.

On click of this it gives you or any user a little information that the page blocked loading of some scripts, and the ability to “Load unsafe scripts”.

If you or the user click this, the page will reload with the blocked script no longer blocked, but also you’ll notice the Secure indicator is replaced with “Not secure” and HTTPS is crossed out and all in red.

Also you’ll notice the shield symbol has now disappeared as no content has now been blocked.

As a whole, this is a similar to how the browser also shows SSL errors, but on view of the dev tools security tab we can see the reason it was marked as not secure was that “you have recently allowed non-secure content (such as scripts or iframes) to run on this site.”

As we said before, the fix is simple, just open in a new tab, but maybe not obvious if this happens to you.

Hopefully this will help you if you come across this while moving your sites to HTTPS. & if you’re currently moving them, our community site on Moving to HTTPS helps by guiding you through the process.|||

While helping a developer move their site move to HTTPS, they noticed even after fixing all the mixed content on the page, they still saw an error message that says the site was “not secure” when…