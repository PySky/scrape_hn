In the blog post Applying JDK 9 @Deprecated Enhancements, I discussed additions of the optional elements (methods) forRemoval() and since() to the @Deprecated annotation in JDK 9. I stated in that post, "The application of new JDK 9 @Deprecated methods on the Java SE API can also be instructive in how they are intended to be used." In this post, I look at the application of the enhanced annotation to the JDK class java.util.Observable.

The class has been with us almost since the beginning (since Java 1.0). As of JDK 9, however, it will be marked as deprecated. The following screen snapshot shows a portion of this class's Javadoc representation in a web browser.

This is an example of a class that in the category "Deprecated With No Plans for Removal" described in my previous post. The presence of provides information on when it was deprecated (JDK 9) and the absence of indicates a lack of concrete plans to actually remove the class. The java.util.Observer interface has also been deprecated in a similar manner and its documentation references the documentation for the class.

Not only does the documentation relay when it was deprecated, but it also documents the problems with that make deprecation desirable and provides important information on alternatives that might be used instead of :

This is a good example of how Java developers can use the Javadoc tag to provide much deeper detail related to deprecation than can be provided even with the enhanced annotation. JEP 277 ("Enhanced Deprecation") explicitly listed unifying of Javadoc tag and annotation as a "non-goal": "It is not a goal of this project to unify the @deprecated Javadoc tag with the @Deprecated annotation."

Additional details justifying the deprecation of and can be found in JDK-8154801 ("deprecate Observer and Observable"). There is a quote in there from Josh Bloch as part of JDK-4180466 ("Why is java.util.Observable class not serializable.") dated February 1999:

For the most part, it seems that and are not used much, so deprecation shouldn't be much of an issue, especially given no definitive plans to remove these altogether.|||

Through the beans package and concurrent data structures, Java's Observer and Observable have reached the end of their usefulness and are deprecated in Java 9.