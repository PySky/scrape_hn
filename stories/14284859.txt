This set of multiple choice questions on C++ constructors and destructors includes collection of top 20 MCQ questions about special characteristics of constructor, about different types of constructors; parameterized constructors, default constructor, copy constructor, implicit constructor and default argument constructor. It also includes about dynamic initialization of objects, dynamic constructors and destructors.

1. B) member function

 2. D) name

 3. C) initialize variables

 4. A) default constructor

 5. A) base class

 6. C) False, True

 7. B) parameterized constructor 

 8. D) copy constructor

 9. C) implicit constructor

 10. C) implicit

1. C++ provides a special ..................... called the constructor, which enables an object to initialize itself when it is created.A) friend functionB) member functionC) public functionD) private function2.  A constructor has the same ................. as that of class.A) variableB) objectC) functionD) name3. Constructors are normally used to ................. and to allocate memory.A) define variablesB) allocate variablesC) initialize variablesD) initialize object4. A constructor  that accepts no parameters is called the ................A) default constructorB) parameterized constructorC) implicit constructorD) null constructor5. Constructors cannot be inherited, through a derived class can call the ................... constructor.A) base classB) derived classC) void classD) default class6. State whether the following statements about  the constructor are True or False.i) constructors should be declared in the private section.ii) constructors are invoked automatically when the objects are created.A) True, TrueB) True, FalseC) False, TrueD) False, False7. The constructors that can take arguments are called ............... constructors.A) default constructorB) parameterized constructorC) implicit constructorD) argument constructor8. When an object is created and initialized at the same time, a ................... gets called.A) default constructorB) parameterized constructorC) implicit constructorD) copy constructor9. In C++, ......................... creates objects, even through it was not defined in the class.A) default constructorB) parameterized constructorC) implicit constructorD) copy constructor10. ................. constructor will not do anything and defined just to satisfy the compilerA) defaultB) parameterizedC) implicitD) copy11. The ..................... constructor can be called with either one argument or no arguments.A) defaultB) default argumentC) implicitD) copy12. A ....................... is used to declare and initialize an object from another object.A) default constructorB) default argument constructorC) implicit constructorD) copy constructor13. A ................ takes a reference to an object of the same class as itself as an argument.A) default constructorB) default argument constructorC) implicit constructorD) copy constructor14. Destructor is a member function whose name is same as the class name but is preceded by a ...........A) tildeB) hashC) dotD) dollor15. A destructor is used to destroy the objects that have been created by a ....................A) objectB) classC) functionD) constructor16. Whenever const objects try to invoke non-const member functions, the compiler .....................A) return zero valueB) return nullC) generate errorD) return no value17. Allocation of memory to objects at the time of their construction is known as ................ of objects.A) run time constructionB) dynamic constructionC) initial constructionD) static construction18. The process of initializing through a copy constructor is known as ...............A) copy processB) copy registrationC) copy initializationD) initialization process19. .................... provides the flexibility of using different format of data at runtime depending upon the situation.A) dynamic initializationB) run time initializationC) static initializationD) variable initialization20.  An ....................... with a constructor or destructor cannot be used as a member or a union.A) classB) objectC) functionD) variable|||

