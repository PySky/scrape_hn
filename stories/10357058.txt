Fast DeepBox is a bounding box proposal re-ranker using ConvNets. It produces state-of-the-art bounding box proposal within 0.5s using a light-weight 4-layer network. Experiments on both PASCAL and COCO showed that DeepBox performs significantly better than Edge boxes in terms of Area under Curve and that the gain carries over to detection mAP. This implementation is based on Ross's Fast-RCNN codebase, thereby written in Python and C++/Caffe.

DeepBox was initially described in an arXiv paper and later published at ICCV 2015.

Fast DeepBox is released under the MIT License (refer to the LICENSE file for details).

If you find Fast DeepBox useful in your research, please consider citing:

Note: Caffe doesn't have to be built with support for Python layers!

You can download my Makefile.config for reference. 2. Python packages you might not have: , , 3. MATLAB (required for running COCO evaluation)

After successfully completing basic installation, you'll be ready to run the demo.

By default, visualization only shows top five proposals per image and their scores. Users can set the number of proposals they want to visualize by passing in --numboxes [Number of proposals] argument. There is another demo mode on full COCO dataset that user can choose by passing in --demo 0 argument. This allows users to visualize Fast DeepBox proposals on any frame of users' choice in COCO validation set, but requires users to download pre-computed Edge boxes proposals and install COCO dataset in full.

Here are the steps to set up full functionalities of DeeBox package.

The Edge boxes proposals are pre-computed in order to reduce installation requirements. This step is necessary for demo. This step downloads the Matlab COCO image ordering with which Edge boxes proposals are computed. Ground truth boxes would also be downloaded to enable evaluation. If you haven't installed COCO on your machine yet, you can follow the instructions on the following github page to download and compile all the data. -MSCOCO Pretrained ImageNet model for Alex net can be downloaded to initialize the DeepBox network training. Alternatively, users can initialize the training with our multiscale sliding window model in

Test output is written underneath by default. If you test on test-dev, it will be underneath coco_test-dev2015 instead.

Evaluate the test result. This part is written in Matlab. First launch your Matlab in $FDBOX_ROOT. Then do the following:

The evaluation output will be printed and the Recall-vs-NumOfProposals plots will be shown.|||

Code release for DeepBox paper in ICCV 2015