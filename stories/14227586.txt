The C standard library declares a number of string functions in the standard header .

By the standards of some other languages, C's string handling is fairly primitive. Strings are simply arrays of characters terminated by a null character , and are manipulated via pointers. C has no string type. Instead, a "string" is a data layout, not a data type. Quoting the ISO C standard:

So what happens if you call a C string function with a pointer into a char array that isn't properly terminated by a null character? Such an array does not contain a "string" in the sense that C defines the term, and the behavior of most of C's string functions on such arrays is undefined. That doesn't mean the function will fail cleanly, or even that your program will crash; it means that as far as the standard is concerned, literally anything can happen. In practice, what typically happens is that the function will keep looking for that terminating null character either until it finds it in some chunk of memory it really shouldn't be looking at, or until it crashes because it looked in some chunk of memory that it really shouldn't be looking at.

To partially address this, C provides "safer" versions of some string functions, versions that let you specify the maximum size of an array. For example, the strcmp() function compares two strings, but can fail badly if either of the arguments points to something that isn't a string. The strncmp() function is a bit safer; it requires a third argument that specifies the maximum number of characters to examine in each array:

Which brings us (finally!) to the topic of this article: the function.

is a fairly straightforward string function. Given two pointers, it copies the string pointed to by the second pointer into the array pointed to by first. (The order of the arguments mimics the order of the operands in an assignment statement.) It's up to the caller to ensure that there's enough room in the target array to hold the copied contents.

So you'd think that would be a "safer" version of . And given their respective declarations, that's exactly what it looks like:

But no, that's not what the function does at all.

Here's the description of from the latest draft of the C standard:

And here's the corresponding description of :

So far, so good, right? Almost -- but there's more:

That second paragraph means that if the string pointed to by is shorter than characters, it doesn't just copy characters and add a terminating null character, which is what you'd expect. It adds null characters until it's copied a total of characters. If the source string is 5 characters long, and the target is a 1024-byte buffer, and you set n to the size of the target, will copy those 5 characters and then fill all 1019 remaining bytes in the target with null characters. Since all it takes to terminate a string is a single null character, this is almost always a waste of time.

Ok, so that's not so bad. CPUs are fast these days, and filling a buffer with zeros is not an expensive operation, right? Unless you're doing it a few billion times, but let's not worry about premature optimization.

The trap is in that first paragraph. If the target buffer is 5 characters long, you'd quite reasonably set to 5. But if the source string is longer than 5 characters, then you'll end up without a terminating null character in the target array. In other words, the target array won't contain a string. Try to treat it as if it does (say, by calling on it or passing it to , and Bad Things Can Happen.

The description of the and functions is identical in the 1990, 1999, and 2011 versions of the ISO C standard -- except that C99 and C11 add a footnote to the description:

The bottom line is this: in spite of its frankly misleading name, isn't really a string function.

[TODO: Discuss as a better-behaved alternative, something that does what most people assume does.]

Now having a function like this in the standard library isn't such a bad thing in itself. It's designed to deal with a specialized data structure, a fixed-size character array of N characters that can contain up to N characters of actual data, with the rest of the array (if any) padded with 0 or more null characters. Early Unix systems used such a structure to hold file names in directories, for example (though it's not clear that was invented for that specific purpose).

The problem is that the name strongly implies that it's a "safer" version of . It isn't.

Most of the other functions are safer versions of their unbounded counterparts: vs. and vs . [TODO: Discuss the bounds-checking versions added in Annex K of the 2011 ISO C standard).

It's because 's name implies something that it isn't that it's such a trap for the unwary. It's not a useless function, but I see far more incorrect uses of it than correct uses. This article is my modest attempt to spread the word that isn't what you probably think it is.|||

