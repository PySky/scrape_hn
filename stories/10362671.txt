This writeup is cross-posted from the sudoroom blog.

At the last hardware hack night, Jake and I got a web page to transmit uart serial data to an arduino at 9600 baud using the webaudio browser api.

Sending serial data from an ordinary web page is interesting because it means you can communicate with hardware without installing any special software onto a device. This makes setting up a system faster and easier, which is really useful for annoying computers like phones where it is very difficult to install and run new software. Any device with a modern web browser will do: android, iOS, linux, windows, MacOSX, whatever!

For a quick demo, check out this web page: http://substack.neocities.org/serial.html

Here is the final project in action:

Serial uses a protocol called UART (Universal Asynchronous Receiver/Transmitter) with a very simple data framing scheme.

UART begins with a low start bit (0), then a character (5-8 bits, configurable but just use 8 bits) with the least significant bit first, followed by 1 or more high stop bits (1s).

For example, to send the message "ABC", we would generate the binary data:

Written another way, this data is the binary string: .

Under UART we can send as many stop bits as we want, so if there is no data available, we can keep sending stop bits until there is more data we want to send.

For example, we can send the same "ABC" message from before with more stop bits to control the timing of A, B, and C:

Written another way, this data is the binary string: .

I wrote a javascript library called uart-pack-frame to implement UART framing with and methods.

Now that we have a way to frame characters for UART, we can send the framed data through the browser's webaudio API.

To do this, we can use the webaudio API's script processor node:

Inside the event, we can populate an output buffer with the data we want to send. For example, to send an alternating pattern of and we can do:

The output buffer expects floating point values from to , inclusive.

These values map to the voltage coming out of the audio jack, which is exactly what we'll need to send our UART data.

The other important piece of information we need is the number of samples per second, which is available as . The sample rate depends on the system, but some common values are and . This sample rate sets the theoretical ceiling on how fast we can transmit.

Next we'll need to pick a baud rate that will work with the capacitors that filter out frequencies that are too high or too low. In practice and baud seem to work reliably, depending on the device.

To send audio data, we take the audio sample rate and divide based on the baud rate. This ratio defines a window size for how many audio samples to keep each UART bit set.

I've wrapped up all of these concepts into a library called webaudio-serial-tx that sets up the webaudio context and encodes input with uart-pack-frame.

With webaudio-serial-tx you can write a program to speak serial over the audio output in the browser:

Save this program as , then install install node.js which comes with npm and then do:

Then open in your browser to hear a short blip of data.

You can load a simple demo of webaudio-serial-tx at: http://substack.neocities.org/serial.html

Finally we'll need a simple circuit to interface the audio jack

With all of those pieces together, check out the final product in action: https://www.youtube.com/watch?v=a8VLnap86pA

The baud rate settings are fussy and specific to the device, but from what I can gather online, other people have the same issues sending serial over audio.

My laptop and Jake's phone worked well at 9600 baud, but my phone worked best at 4800 baud.

A good next step would be to get the browser microphone API working for serial input for full duplex serial communication using only a web page.|||

