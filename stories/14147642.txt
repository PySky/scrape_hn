There are some potential misconceptions or misunderstandings in the question that will be addressed in this post. In Diagram 2, it shows a representation of the software "stack" that a computer (PC) would use to create, process, and send a message, across the internet, to another computer Do all kinds of computers - smartphones/tv's/gameconsoles, etc use this format? (In this regard) is there any difference between cellular internet and Wifi/Ethernet? What about single-function devices that don't appear to have an "Application" layer - e.g. web connected camera, lightswitches, or thermostats. The presence of these misconceptions necessitates the inclusion of an explanation of the following (in order to provide context for subsequent discussion): What the Internet is What the TCP/IP protocol suite is What an application is Then the questions will be addressed directly. Note that given their importance and complexity, entire series of books have been written on the TCP/IP protocol suite. The definitions and explanations here will be drawn primarily from Wikipedia, TCP/IP Illustrated Volume 1 Second edition: The Protocols by Stevens and Fall, and IBM's TCP/IP Tutorial and Technical Overview. The Internet is technically a Wide Area Network (WAN), but a more helpful way to think of it is as a kind of supernetwork (a network of networks) or an aggregate of many different interconnected networks. Here is a picture of routing paths through a portion of the Internet: The Internet consists of many connected networks A network may consist of 1 or more systems (host) A connected system typically runs on some kind of hardware platform there is significant variance in the types of systems connected to networks and the hardware that they run on A fun read on how the Internet works can be found in the Arstechnica article How the Internet works: Submarine fiber, brains in jars, and coaxial cables. So how are different systems running on different hardware platforms connected to different networks able to communicate with each other? How is communication between such a vast, heterogeneous array of systems and networks possible? How can all of this take place simultaneously? The answer is provided by the Internet protocol suite, a.k.a the TCP/IP protocol suite. These questions were considered during the design process of the architecture of the Internet (TCP/IP Illustrated, Section 1.1: Architectural Principles): Several goals guided the creation of the Internet architecture. In [C88], Clark recounts that the primary goal was to “develop an effective technique for multiplexed utilization of existing interconnected networks.” The essence of this statement is that the Internet architecture should be able to interconnect multiple distinct networks and that multiple activities should be able to run simultaneously on the resulting interconnected network. The Internet protocol suite is the conceptual model and set of communications protocols used on the Internet and similar computer networks. The Internet protocol suite provides end-to-end data communication specifying how data should be packetized, addressed, transmitted, routed and received. This functionality is organized into four abstraction layers which are used to sort all related protocols according to the scope of networking involved. One way to think of the TCP/IP protocol suite is as a specification for how processes running on different systems and different networks can communicate with each other. In essence, the TCP/IP protocol suite provides a standard for inter-process communication. Any system that correctly implements the TCP/IP protocol suite may use the functionality it provides to allow its processes to communicate over the Internet. In fact, in order for processes to communicate over the Internet with other processes running on remote systems on other networks, a system must utilize standards-compliant TCP/IP suite protocols. An application program (app or application for short) is a computer program designed to perform a group of coordinated functions, tasks, or activities for the benefit of the user. Examples of an application include a word processor, a spreadsheet, an accounting application, a web browser, a media player, an aeronautical flight simulator, a console game or a photo editor. The collective noun application software refers to all applications collectively. This contrasts with system software, which is mainly involved with running the computer. An application can be thought of as a user-space process running on a system. In addition to the examples listed above, this can include programs such as (non-kernel mode) computer viruses, web servers, camera applications, and sensor data aggregation programs. When an application transmits and receives data over the Internet, it must utilize its host system's TCP/IP protocol suite implementation. From Application layer (Wikipedia): In TCP/IP, the application layer contains the communications protocols and interface methods used in process-to-process communications across an Internet Protocol (IP) computer network. The application layer only standardizes communication and depends upon the underlying transport layer protocols to establish host-to-host data transfer channels and manage the data exchange in a client-server or peer-to-peer networking model. The application layer of the TCP/IP protocol suite includes protocols such as File Transfer Protocol (FTP), Domain Name System (DNS) and probably most famously, Hypertext Transfer Protocol (HTTP). As an example, the application layer protocol HTTP specifies how data is transmitted between 2 processes running on (usually) different systems: the client application, a web browser, and the server application, the web server process. In Diagram 2, it shows a representation of the software "stack" that a computer (PC) would use to create, process, and send a message, across the internet, to another computer. The TCP/IP protocol suite is not a software stack. From Technopedia: A software stack is a group of programs that work in tandem to produce a result or achieve a common goal. Software stack also refers to any set of applications that works in a specific and defined order toward a common goal, or any group of utilities or routine applications that work as a set. Installable files, software definitions of products and patches can be included in a software stack. One of popular Linux-based software stack is LAMP (Linux, Apache, MYSQL, Perl or PHP or Python) .WINS (Windows Server, Internet Explorer, .NET, SQL Server) is a popular Windows-based software stack. Rather, it is a protocol stack, usually implemented by the kernel (also from Technopedia): A protocol stack refers to a group of protocols that are runnning concurrently that are employed for the implementation of network protocol suite. The protocols in a stack determine the interconnectivity rules for a layered network model such as in the OSI or TCP/IP models. To become a stack the protocols must be interoperable being able to connect both vertically between the layers of the network and horizontally between the end-points of each transmission segment. Do all kinds of computers - smartphones/tv's/gameconsoles, etc use this format? The TCP/IP protocol suite is a hardware- and operating system- independent communications specification, not a format. If a process running on one hardware platform needs to communicate with a process running on a remote system on a different hardware platform and communication takes place over the Internet, then the systems must the appropriate protocols within this suite must be used to accomplish inter-process communication (In this regard) is there any difference between cellular internet and Wifi/Ethernet? My interpretation of this question is "Is there a difference in the way a mobile device connects to a GSM network and the way a mobile device connects to a WiFi network?" The difference is at the network interface layer. This question exposes the poor depiction of the TCP/IP protocol suite in the diagram in the article linked to in the question. For reference, here is the diagram: The lowest layer, referred to as "hardware", should be referred to as the link layer, media access control (MAC) layer or the network interface layer. The network interface layer, also called the link layer or the data-link layer, is the interface to the actual network hardware. This interface may or may not provide reliable delivery, and may be packet or stream oriented. In fact, TCP/IP does not specify any protocol here, but can use almost any network interface available, which illustrates the flexibility of the IP layer. Examples are IEEE 802.2, X.25 (which is reliable in itself), ATM, FDDI, and even SNA. Here is a correct and superior depiction (from The TCP/IP Guide): The reason that discussion of the network interface layer is relevant is that it is at this layer that there is a difference in the way a cellular/mobile device connects to a GSM network vs. a WiFi network. when connecting to a GSM network, the network interface layer protocol employed to handle the connection between the mobile device and the base transceiver station (BTS) is typically specified by 3G when connecting to a WiFi wireless access point (WAP), the protocol used is specified by the IEEE 802.11 standard. What about single-function devices that don't appear to have an "Application" layer - e.g. web connected camera, light switches, or thermostats As described earlier, protocols in the application layer of the TCP/IP protocol suite provide a standard for how application data is exchanged between processes. The layers are conceptual. They do not reside in a system or on a hardware platform. Web connected cameras, light switches and thermostats may have processes running on them that communicate over the Internet with processes running on remote systems (checking for firmware updates, data exchange with a server, etc.). These processes, or applications, will utilize the implementation of the TCP/IP protocol suite to accomplish this inter-process communication. While there are a variety of different applications utilizing different application-layer protocols running on traditional PCs or servers, there is not that much variance in terms of how the hardware platforms connect to their respective access points (network interface/data link layer). It is primarily accomplished wired or wirelessly via Ethernet. The situation somewhat different when it comes to the wide variety of embedded systems that communicate via TCP/IP. Here is an illustration of this (from Postscapes): For more info, see these articles: Understanding The Protocols Behind The Internet Of Things|||

