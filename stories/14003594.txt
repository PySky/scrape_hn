We spend a majority of time reading and tweaking existing code rather than writing fresh code. Code readability can directly effect the speed with which you can make changes to your existing components, especially in large projects. That’s why, one must always optimize for incremental development.

Below here, I share a few tips and conventions that have worked well for us in writing scalable components in large React projects.

ES6/7 has greatly simplified the code we write as javascript developers, and using these language constructs in way that fit React patterns can make your components concise.

Chances are, that you’re already compiling your code with babel. Adding the stage-2 preset allows you to use class properties, that can provide an elegant way to bind this in non-lifecycle methods. This is also much cleaner than other alternatives.

The render function is an entry point for your component. If the render function is growing in length even after extracting out components, consider using the ES7 getters to group together related JSX elements.

ES7 getters are lightweight, expressive and automatically bind this reference to the method.

Litmus test: Can you guess what the component renders in the time it takes to comprehend a haiku?

While not limited to react code, use of destructuring avoids long and repetitive access chains and adds some breathing space to your component. Also, feel free to separate logical statements blocks with new lines.

Litmus test: Is your code minimal yet? … Now? … What about now?

Naming things right can be hard if you’re used to minifying code by hand. Otherwise, its just moderately tough. Intuitive naming can greatly reduce cognitive load for new developers (or the future you) and enhance code readability.

A good component name is a one that conveys both visual and spacial significance of the component to it’s user.

Litmus test: Can you distinctly guess both — where in the page layout the component is being used, and what it looks like as soon as you see its name in your editor’s quick switcher?

Like component names, props are a part of the contract between the component and the user of a component. Prop names should be clear, concise and unambiguous.

Litmus test: Can you guess both — the data type and purpose of the prop with certainty without looking up it’s definition?

Event handlers should be named in the same format as the event prop they are being passed to —  .

However, in this case, adding a is usually required to disambiguate handlers with similar event types.

Litmus test: Can you guess both — the element the event handler belongs to, and when it fires — just by looking at the handler?

Component definitions can get long and have a dozen different methods. Keeping the methods organised into sorted groups will make navigating through code much easier. These logical groups can be:

While eslint-plugin-react does have a rule, it currently does not recognise ES7 getters. The sort-class-members plugin might be a better option therefore. There’s also a codemod I wrote that can automate the sorting process for you, so you don’t have to worry about rearranging stuff from time to time.

Litmus Test: Can you predict where in a component file the method may be defined without using Go To Definition in your editor?|||

We spend a majority of time reading and tweaking existing code rather than writing fresh code. Code readability can directly effect the speed with which you can make changes to your existing…