Multi-master is an extension and set of patches to a Postegres database, that turns Postgres into a synchronous shared-nothing cluster to provide OLTP scalability and high availability with automatic disaster recovery.

Multi-master replicates same database to all nodes in cluster and allows writes to each node. Transaction isolation is enforced cluster-wide, so in case of concurrent updates on different nodes database will use the same conflict resolution rules (mvcc with repeatable read isolation level) as single node uses for concurrent backends and always stays in consistent state. Any writing transaction will write to all nodes, hence increasing commit latency for amount of time proportional to roundtrip between nodes nedded for synchronization. Read only transactions and queries executed locally without measurable overhead. Replication mechanism itself based on logical decoding and earlier version of pglogical extension provided for community by 2ndQuadrant team.

Cluster consisting of N nodes can continue to work while majority of initial nodes are alive and reachable by other nodes. This is done by using 3 phase commit protocol and heartbeats for failure discovery. Node that is brought back to cluster can be fast-forwaded to actual state automatically in case when transactions log still exists since the time when node was excluded from cluster (this depends on checkpoint configuration in postgres).

Read more about internals on architecture page.

Multi-master consist of patched version of postgres and extension mmts, that provides most of functionality, but doesn't requiere changes to postgres core. To run multimaster one need to install postgres and several extensions to all nodes in cluster.

Ensure that following prerequisites are installed:

After that everything is ready to install postgres along with extensions

Directory contrib/mmts also includes docker-compose.yml that is capable of building multi-master and starting 3 node cluster.

After things go more stable we will release prebuilt packages for major platforms.

wal_level = logical multimaster is build on top of logical replication and will not work otherwise max_connections = 100 max_prepared_transactions = 300 all transactions are implicitly two-phase, so that's a good idea to set this equal to max_connections*N_nodes. max_wal_senders = 10 at least the number of nodes max_replication_slots = 10 at least the number of nodes max_worker_processes = 250 Also transactions executed at neighbour nodes can cause spawn of background pool worker at our node. At max this will be equal to shared_preload_libraries = multimaster.max_nodes = 3 multimaster.node_id = 1 the 1-based index of the node in the cluster multimaster.conn_strings =

Read description of all configuration params at configuration

to gain access to these functions:

Read description of all management functions at functions|||

postgres_cluster - Various experiments with PostgreSQL clustering