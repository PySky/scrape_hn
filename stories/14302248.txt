TL;DR Spring Boot was initially conceived with microservices applications in mind. But, as it excelled as a starting point for applications based on the Spring framework, many have started to wondering how to integrate JavaServer Faces (JSF) with Spring Boot. In this article we are going to put all the moving pieces together, and build a small application that enable users to list and persist products to a database.

JavaServer Faces (JSF) is a Java specification that promotes component-based user interface development for web applications. Views, on JSF, are described through XML files called view templates and usually rely on server-side sessions to store the state of UI components. For example, let's say that we wanted to show an HTML table of products. To do so, we would need an XML file with the following content:

In this case, the view would be rendered by using the component, with the help of a backing bean called , which would generate the HTML response for the requester. After rendering the webpage, JSF would retain the state of the view on the server-side to allow future interaction.

For starters, we will fork and clone the GitHub repo specially created for this article. We could also use the Spring Initilizr webpage, which is easy and intuitive. But, as the application that we will build will have some other dependencies (like HSQLDB and Flyway), it will be easier to start with the fork.

After forking the repository, open your preferred IDE (Eclipse, IntelliJ IDEA, Netbeans, etc) and import the initial project as a Maven project. Having the application properly imported on our IDE, the first thing we will do is to add a few dependencies. Let's open the file and add the following elements nested in the element:

From top to bottom, let's demystify what these dependencies are. The first two dependencies, and , are the JSF interface specification ( ) and implementation ( ). The third dependency, , is needed so the JVM can parse and execute JSF view on runtime.

After that there are three dependencies with as the value of . These dependencies are related to Rewrite, an open-source routing and URL rewriting solution for Servlet and Java Web Frameworks. Using JSF without a tool like Rewrite would lead us to ugly and non RESTful-friendly URLs that heavily use query parameters to navigate. Therefore we will use Rewrite to achieve intuitive, bookmarkable, and pretty URLs.

The last dependency added, , is an open source UI framework for JSF that features over a hundred components, like data tables, drag & drop, overlay dialogs, and etc. This framework will help us to create beautiful user interfaces easily.

While we have the file opened, let's change the build process by adding the following line to it:

This configuration is important because Rewrite isn't prepared to scan for configurations on non-classical web applications (i.e. on embedded applications like Spring Boot). So we need to tweak the build process a little to help Rewrite fulfill its purpose.

Next, we will create two XML files. The first one, called , is quite popular among seasoned Java web developers. Usually, on a regular Spring Boot application, we wouldn't need this file. But, since we are going to use JSF, we need to configure the servlet and a couple of listeners. Let's create this file under a new directory called and add the following content:

The first two elements in this file are responsible for setting up and configuring it. The element instructs this servlet to handle requests to URLs and deal with them in the context of JSF. The last two elements, the elements, are responsible for integrating JSF into the Spring context.

The second XML file that we need is called . Let's create this file under the folder with the following content:

All this file does is to register an (i.e. an Expression Language resolver) that delegates to the context of Spring the responsibility to resolve name references. With it we can use Spring managed beans in the JSF context.

As the last step to configure JSF with Spring Boot, we need to update the class of our project to create two more beans. This is done by configuring this class as follows:

Having both XML files created, the dependencies properly imported, and the class configured, we are ready to start developing JSF applications on Spring Boot.

As we are going to develop a simple application that lists and persists products, we are going to start by creating the entity. For starters, create the file in the package. This entity will have the following code:

This is a very simple entity, with only three properties:

You probably noted that your IDE started complaining about the annotation. This annotation comes from the library, which we still need to import into our application. Project Lombok aims on reducing the boilerplate code that is repeated in many parts of a Java application, like getters and setters. In the entity above, we used to take out the burden of defining a lot of accessor methods for the entity's properties. There are many other features that Lombok brings to the table, take a look at its docs.

To import it, add the following element as a child of in the file:

Now, we are going to create the file, that Spring Boot uses, to configure HSQLDB connection , and Spring Data to disable the auto-create feature of Hibernate. Note that Hibernate is a transitive dependency of Spring Data, and by default it reads classes annotated with Entity and tries to create tables for them. But, as mentioned before, in our application we are going to use Flyway. The file must be created in the folder with the following content:

The first property configures HSQLDB to persist data to the folder of the root directory of our application, and the second one is the property that disables the Hibernate auto-create feature. Since we have disabled this feature, we now need to add a Flyway script to create the table. Let's do that by creating a file called in the folder. This file will contain the following script:

Now that we have finished defining the entity and a table to persist it on HSQLDB, we can now extend the Spring Boot interface to provide a managed bean to communicate with the database. To achieve this, let's create an interface called , in the package, with the following content:

One might wonder, is the code above correct or useful? The answer is yes! interface comes with some predefined methods that allows developers to instances of an entity ( in this situation), entity by its id, entities, and new ones. All without having to define a single method on the interface that extends this one.

We are now ready to work on the front-end code. To enable users to create products through our application, we will need to create three elements:

To start, let's create the template of our application. This template will be quite simple. First, create a file called in the folder, and then add the following code to it:

Defining a view on JSF is almost like defining a regular HTML file, but with a few different elements, as we can see above. These elements come from namespaces defined on JSF and related frameworks (like PrimeFaces). The most important elements in the layout above are the element and the element. The first one is a component provided by PrimeFaces, and we use it to define a navigation menu in our template. This menu will enable users to go to a view that allows them to create products, and another view that allows them to list the products already created.

The second element, , defines the exact place of the template that will allow subviews to define their contents. A template can have multiple elements, if they are defined with different names, but ours will have just one.

After defining our template, let's create the Spring controller that will support the interface that we will create next. Let's create a class called in the package and add the following code:

This class has only two methods: , which will be called by a JSF button to save a new product; and , that will be used by the interface to tie the inputs on the form to an instance of . This instance is created at the same time that instance is, and a new one is created right after the user saves a new product. Also note that the method redirects to , the interface that lists products persisted in our database.

What is even more important to talk about is the four annotations that this class has:

Lastly, let's create the form that will use the controller above. We will create a file called in the folder, with the following content:

This file uses the element to explicitly define as the template for this view. After that it uses to inform that this view must be rendered in the area of the template. And then it starts defining the form to create new products. This form is composed of one where the user can define the name of the product, and a element where the user can define the price of the new product. This last element was specifically created to handle numerical properties, as it blocks non-numerical characters and adds a mask to the input.

Lastly, the view defines a that renders an HTML button in the view that triggers the method of the component. In this view we can see that we tie the new product and the behavior defined in the component through the name, which was defined in the and annotations of this component.

If we run our application now, through our IDE or through the command, we will be able to reach it in a browser going to . We will also be able to create new products through the form that is shown to us, but we won't be able to list the products created. Let's tackle that feature now.

To enable our users to see a list of created products, we will first define a backing bean that will handle the logic behind the interface. This backing bean will be called , and we will create it in the package with the following code:

Similar to , this class has four annotations:

Note that this controller has a method called that is annotated with , , and . These annotations are needed to load the collection of products before rendering the interface. We could also load this collection in the , but this would make the process of rendering slow, as this method will be called a lot of times in the JSF lifecycle.

And to finish, as the companion of the backing bean defined above, we will create the interface that lists products. This interface will reside in the file, in the folder, and will contain the following code:

The interface created above renders the collection of product with the help of the component provided by PrimeFaces. This component receives a collection of objects, through the property, from a backing bean ( in this case), and iterate over it creating the rows of an HTML table. The columns of this table are defined with the element, also provided by PrimeFaces. Note that in this interface we used an element called to properly format the price of the products.

Running the application, and reaching the URL, will show us the following screen.

One of the most complex features to implement in an application is user authentication and identity management. Security for authentication and identity is an entire glossary unto itself.

If you need to implement a robust, highly customizable identity and access management system quickly and easily for your Spring Boot application, Auth0 can help. Take a look at Securing Spring Boot with JWTs to properly secure your application.

Spring Boot enables developers to be highly productive through convention over configuration. In this article we showed that combining this framework with JSF is easy and empowers developers, makes them even more productive. JSF has been around for many years now, and there is a very good community and a lot of content written on the web that can help on the development of enterprise applications.

But, one problem that plagues developers quite often, is scalability. As JSF applications usually heavily depend on server-side sessions, developers struggle to scale these applications properly. In the next article, I'm going to address this issue by using Spring Session, a Spring module that helps managing users' session information.|||

Spring Boot can leverage any type of applications, not only microservices. Let's build a JSF application with Spring Boot.