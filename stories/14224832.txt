On October 31, 2016, Slate published an article titled “Was a Trump Server Communicating With Russia?” This article described the work of Professor L. Jean Camp and her colleagues, all of whom had developed an interest in the activity of mail1.trump-email.com, an email-marketing server associated with the Trump Organization:

This professed altruism as a rationale for digital snooping may be hard to swallow given that Camp and her associates spend a great deal of time on Twitter launching unhinged attacks against President Trump, but pushing ahead, enter Tea Leaves:

Tea Leaves is another piece of work in the “concerned and impartial researcher” department. Check out Tea Leaves on medium.com (@tea.leaves) play-acting as the innocently curious Lea Vestea (roughly a cyclic permutation on “Tea Leaves,” in case you missed it):

Back to the Slate article. We were assured that Tea Leaves is a DNS expert:

We were assured that known DNS experts vouched for the authenticity of the DNS logs. We were assured that nine computer scientists considered it nearly impossible for such logs to be forged or manipulated. And thus a virulent narrative was reinforced:

The Slate report was met with much skepticism from tech reporters and bloggers, who correctly remarked that nothing conclusive could be inferred from the DNS logs provided. It seemed everybody was content to accept the DNS logs as a premise of sorts, that only the conclusion was open to debate.

I myself considered the matter a closed case when The Intercept published a couple of marketing emails sent from mail1.trump-email.com to the parties concerned. The Intercept article seemed to validate the DNS logs and debunk the secret-communication theory in one fell swoop. Even so, something kept bothering me about the fact that the emails bore pre-March timestamps (Cendyn claims the server sent its last marketing email in March 2016, and the DNS logs purport to show a May-September window of high-volume activity after an initial May drizzle). Something also kept bothering me about certain aspects of the DNS logs themselves, and after the usual news outlets tried reigniting the story recently, I decided it was time to take another look.

If you want more complete background information before I present my own findings, I refer you to the following:

If you’ve read the background material, you’ll understand that Tea Leaves, as the supplier of the DNS logs, is the foundation on which this whole saga ultimately rests. While Camp and her colleagues are happy to run their mouths and make an awful lot of noise, Tea Leaves has remained conveniently tucked away from public scrutiny, creating an I2P eepsite for the DNS logs and hounding tech bloggers via Tor. The reason given to The Intercept is that Tea Leaves runs a cybersecurity company and doesn’t want it to be the target of a DDoS attack. I suspect that’s not the real reason — not that I’m any kind of moralist, but I suspect the real reason involves the highly unethical behavior, along with the possible breach of contracts and non-disclosure agreements.

Notice the clause “Two of the authoritative name server hosts deleted the zone.” The phrase “authoritative name server hosts” is highly idiosyncratic. Most people would just write “authoritative name servers” or “authoritative nameservers.” It’s so idiosyncratic that you can enter it into Google (in quotation marks) and get only five results, three of which come from April Lorenzen in some form, and the phrase additionally appears on one of Lorenzen’s sites:

Now, examine the HTML source for http://web.archive.org/web/20161107125853/http://gdd.i2p.xyz/, and you’ll find this sort of thing:

Notice anything wrong? That’s a highly peculiar use of the “target” attribute, as any Web developer will confirm at once. These aren’t targets like _blank, which has an understood meaning in frame-less documents. These targets are instead named frames, but there are no frames in this document, let alone that many frames, let alone that many frames with those names. Try finding another frame-less site that does this, and you’ll learn how idiosyncratic the coding construct is.

Anyway, the same highly peculiar use of the “target” attribute can be found on Lorenzen’s hand-coded sites. I’ll show a small sample using dissectcyber.com, say2.us, and the defunct secure411.org (hence the GitHub account name of secure411dotorg):

This is difficult to preserve in an archiver. The archiver archive.is strips out plenty of attributes as part of its reformatting, and the archiver web.archive.org, though preserving the attributes, allows dissectcyber.com to be delisted via a robots.txt exclusion over which Lorenzen has control. What we’ll do is use archive.is to archive the W3C validation results, with the source listing appearing at the bottom.

Tea Leaves originally posted the logs to her I2P eepsite gdd.i2p. They became accessible to clearnet users via the i2p.xyz inproxy as gdd.i2p.xyz. This in turn allowed the logs to be archived:

Copies of the logs also appear on Camp’s personal site:

The DNS logs are ostensibly BIND9 logs for {ns1,ns2,ns3}.cdcservices.com, formerly the three trump-email.com authoritative nameservers. The problem, however, is that every log line contains four flaws revealing that the logs aren’t authentic BIND9 logs and have been manipulated to appear as such.

For each flaw, I present an easy-to-grasp image and then a rising level of technical analysis. Casual readers ought to be satisfied with the images to get the basic idea and can safely ignore the severe autism.

As indicated in the image above, the IP address in parentheses is meant to be the IP address of the nameserver that received the query for mail1.trump-email.com, not the IP address of mail1.trump-email.com itself. The person who made these logs had the mistaken assumption that the IP address is the one sent back to the client as an answer.

BIND9 logs for {ns1,ns2,ns3}.cdcservices.com would’ve contained in parentheses the IP address of the relevant nameserver. The IP addresses are as follows:

See the following for confirmation:

This particular query-log element first appeared in BIND9 source on 3 March 2009 with the commit message “Log the destination address the query was sent to.” It has never changed its meaning.

A genuine client format will, minimally, look like this:

The important things to note are the hash character, the port number, and the colon — none of which appears in the Tea Leaves logs. The colon appearing after “query” in the Tea Leaves logs is meant to be the second colon, not the first.

Although the client format has changed somewhat throughout BIND9’s long and troubled history (BIND 9.11 even adds a pointer value to the format) — and although extra details may be inserted between the port number and the colon in particular use cases — the hash character, the port number, and the colon should always appear.

I give you BIND 9.x.0 from the present to the very beginning:

Notice the colon in the format string above. This colon doesn’t appear in the Tea Leaves logs — only the second colon does. As a quick demonstration of how the second colon arises, observe the %s after the colon. This %s gets replaced by msgbuf, which has been constructed variadically within ns_client_logv() from the following format string and associated arguments:

The hash character and port number are unavoidably part of peerbuf, which has been constructed within isc_sockaddr_totext():

Click to expand earlier versions if you’re so inclined:

A genuine time format will contain milliseconds after the seconds value:

The display of milliseconds has always been an inextricable part of the timestamp.

Here again is BIND 9.x.0 from the present to the very beginning:

Click to expand earlier versions if you’re so inclined:

The ‘+’ character in the logs indicates that the recursion-desired (rd) bit has been set in the incoming DNS queries. This is allowed by the DNS protocol, but it’s not something a typical nameserver will do when communicating with another nameserver (except when a forwarder is involved, which doesn’t apply here). Instead, the nameserver will send an iterative query to the other nameserver (rd bit clear, indicated in BIND9 logs by the ‘-‘ character).

Red arrows indicate recursive queries (rd bit set), and blue arrows indicate iterative queries (rd bit clear). The Russian nameserver is one of the two Alfa-Bank nameservers, and the American nameserver is one of the three cdcservices.com nameservers that were authoritative for the trump-email.com domain. (Neither caching nor initial queries to ?.root-servers.net/?.gtld-servers.net are important here.)

In (a), we have the highly typical situation of a stub resolver sending a recursive query to one of its nameservers. The nameserver then issues iterative queries to external nameservers, finding the answer the stub resolver seeks.

In (b), we have the nameserver misconfigured as a so-called open resolver, allowing Internet pests to send their own recursive queries (often with spoofed source addresses for DDoS purposes). What’s important to understand here is that the nameserver will still send iterative queries when communicating with external nameservers. In effect, the Internet pests are simply stub resolvers themselves. I mention this point because of a recurring misunderstanding. Another point worth mentioning is that the Russian nameservers in all three situations are often referred to as recursive nameservers — because they provide recursive service to clients, not because they send recursive queries themselves.

In (c), we have the highly atypical situation of a nameserver sending a recursive query to another nameserver. This is what the Tea Leaves DNS logs indicate with the ‘+’ characters on every line.

We can do better than calling it highly atypical. So far we’ve been examining dodgy BIND9 logs associated in some form with the three American nameservers, without really needing to inspect those American nameservers. For the sake of analyzing rd-bit behavior, though, it’s helpful to know that the two Russian nameservers are (and were) identifiable as BIND9 nameservers. The amount of assurance one can have in this fact depends on what tools one has available and how far one is prepared to go. For a moderate amount of assurance, the fingerprinting capabilities of public tools such as nmap (-sV switch) will suffice. The usual TXT/CH queries (version.bind, etc.) won’t be all that helpful.

Now, it can be shown that BIND9 has never set the rd bit when communicating with external nameservers (except, as mentioned earlier, when a forwarder is involved — not the case here).

The comment, at first glance, seems to be contradicting what I’ve said, but the client mentioned in the comment is the library client, not the network stub-resolver client we’ve been discussing. The BIND9 nameserver uses this resolver library, but in principle the library can be yanked out of BIND9 and used elsewhere, and that third-party software may wish to set the DNS_FETCHOPT_RECURSIVE option, which will in turn set DNS_MESSAGEFLAG_RD. Nothing in BIND9 sets this option:

OBJECTION #1: What about Camp’s own DNS log on her site?

Camp’s DNS log has almost certainly been derived from the Tea Leaves logs and is therefore not a corroborative log.

As you can see, the dates and times are terribly out of order, defeating casual correlation analysis on the part of the typical reporter, who may assume the log comes from an independent sensor. This is very odd because one of the main advantages of the ISO 8601 date and time format is its lexicographical sortability, meaning this log could have been presented in sorted order with one simple command:

99% of the lines in the Camp log are for mail1.trump-email.com. We’ll grab those lines from the sorted log and store them into camp.txt:

With a similar sequence for ease of understanding, we’ll run the three Tea Leaves logs through the Python conversion script I’ve given below, sort the output, grab the mail1.trump-email.com lines, and store them into tealeaves.txt:

The principal operation is converting the Tea Leaves timestamps from UTC−04:00 to UTC and then presenting them in the relevant ISO 8601 format. (Incidentally, EDT is UTC−04:00, a zone applying both to where Camp’s crew is in Indiana and to the three American nameservers’ former location of southern Florida.)

The next problem is that the Camp log may have been produced using a broken de-duplication algorithm for identical lines. If the Tea Leaves logs have 2n identical lines, the Camp log will, except in a few stray instances, reduce that to n identical lines. Observe how, on a typical day, the Camp counts are half the Tea Leaves counts:

Along with the fact that the Camp log starts at the exact same time in May and cuts off early, the one-way loss of information (does a 1-count line in the Camp log correspond to a 2-count line in the Tea Leaves logs, or does it correspond to another 1-count line?) strongly suggests that the Camp log is merely derivative. In any event, to show that this log adds nothing to the discussion, observe the perfect (timestamp, qname, IP) correlation we obtain when we strip out duplicates (except for a stray final line probably resulting from broken processing):

OBJECTION #2: If they were going to fabricate DNS logs, why not go the full distance and fabricate something more damning?

Unlike with hacker dumps, researcher dumps enjoy free passes for numerous smell tests. It’s easy to imagine some hacker fabricating textual data, but we tend to give researchers the benefit of the doubt. How’s this relevant to the objection? Well, the cost of going the researcher route is that there’s not actually a whole lot a researcher can release with a plausible background story. DNS logs are pretty much already pushing the limit.

OBJECTION #3: You’re not seriously suggesting they’d risk their reputations by fabricating logs?

I’m not asserting it outright (yet), but as should be obvious by now, I’m definitely not ruling out the possibility. I present this post in the form of a question. It provides some fresh data points and analysis for people to bear in mind as events unfold in the near future.

We must remember that the 2016 election was one in which countless hysterical types thought they were trying to stop the next Hitler (and couldn’t count on the Russians, for this time around the Russians were working with the next Hitler). We saw numerous advocacy groups and numerous left-wing icons (such as Bernie Sanders, Elizabeth Warren, Noam Chomsky, and Michael Moore) pissing away their credibility for the Clinton machine, probably figuring they’d pick up the pieces later (later never came). We saw numerous incidents blamed on Trump supporters that turned out to be false flags in hindsight (unfortunately, hindsight exists outside the latest news cycle). We saw social-justice and identity-politics hypocrisy at stratospheric levels, with the Clintons getting a free pass on everything — one popular feminist outlet went so far as to release an article saying that Bill Clinton “could very well” have been a rapist but that it “doesn’t even necessarily make him a bad feminist” once he stops raping women.

When I see the same 24/7 hysteria and painful lack of self-awareness in these researchers’ tweets and posts, I can’t help but consider the possibility they’re doing all they can (literally) to stop (literally) the next Hitler (literally). Can you really blame me?

OBJECTION #4: What about all those experts and computer scientists who vouched for the logs?

Well, except in the Paul Vixie case, it’s not even clear they examined any logs whatsoever. Paul Vixie mentioned only two words: “interpacket gaps.” He’s probably referring to the fact that the timestamps in the logs are patterned around a 3600 TTL, which I can confirm was the TTL for mail1.trump-email.com’s ‘A’ record (it’s a very common TTL for such records). I can also add that the putative Russian nameservers do not “lock on” to any of the three putative American nameservers (each being selected roughly 1/3 of the time), which is consistent with sRTT-based server selection for nameservers with similar RTTs (as was the case when the three nameservers were in southern Florida). To be sure, there are some oddities, but they’re too easily explained away as the result of unsynchronized clocks, packet delay, cache prefetching (BIND 9.10+), cache evictions, multiple stub resolvers, stub-resolver caching, etc., which is why I scrapped the discussion of two potential flaws discovered via interpacket analysis.

The trouble is, first, that some of the experts are now known not to be independent and, second, that the experts didn’t adjust their thinking to accommodate the fact they’re dealing with researchers who’ve written extensively on network deception. Botched DNS logs aside, these aren’t clueless laypeople posting DNS logs to some hand-holding tech forum. It’s very easy for researchers to repurpose DNS logs from passive collections or to set up a few nameserver instances in the lab with a network emulator in the middle (it happens in DNS research all the time because of the highly representative data flows obtained). At the extreme end, they could even start spoofing packets on the live Internet to trigger some passive collectors for corroboration. There’s absolutely no need to craft the logs by hand one line at a time, and the fact that forgery/manipulation was discussed in such a narrow and unimaginative context makes me wonder whether some folks are being willfully obtuse.

OBJECTION #5: What about the marketing email to Alfa-Bank?

Although we shouldn’t assume the quotations in the CNN article are free of an agenda, and although they don’t rule out the high-volume DNS activity, I think they provide food for thought:

It wouldn’t surprise me to learn that the average email-marketing server eventually sends an email to Alfa-Bank, even if only once or twice a year. Nor would it surprise me to learn that some hysterical individual with access to passive-DNS data has decided to piggyback off a legitimate but rare passive-collection association for extra cover when drumming up a narrative. I’ve certainly seen stranger things, and I have a bunch of manipulated logs in front of me, so what am I supposed to think?

OBJECTION #6: What if the logs were manipulated for benign reasons rather than as a fabrication effort?

This is ultimately the only objection I consider relevant now. The other objections don’t address the elephant in the room: the logs that have been clearly manipulated to look like BIND9 logs.

Conceivably, raw passive-DNS data could’ve been sloppily presented in a BIND9 pseudo-format for presentation, analysis, or whatever, making this a tremendously difficult objection to address using only public technical information. (Note, however, that the benign explanation that they had legitimate BIND9 logs and simplified them a little by removing some cruft doesn’t work, given the nature of the first and fourth flaws.)

I’ll point out that the DNS logs weren’t the only things manipulated to appear like something they’re not. Consider this information from the Tea Leaves WordPress site:

The directives ($ORIGIN, $TTL) and semicolons (comment tokens) show that this information is in the form of a DNS zone file that might exist on a master nameserver’s filesystem — the textual representation of the wire-format response to either an ‘ANY’ query or an ‘AXFR’ zone transfer will not appear in this configuration-style form. Moreover, the inconsistent use and spacing of the unnecessary semicolons suggest that this was crafted by hand rather than by a software tool.

Why is this important? Consider the dig tool, which Lorenzen has used extensively in her shell scripts and which we know she is therefore highly familiar with. Using the dig tool (or a related tool) for a couple of ‘ANY’ queries, I can pull such information from the {ns1, ns2, ns3}.cdcservices.com nameservers (information for mjh-email.com, a domain still served by those nameservers):

It took me mere seconds to pull that information, copy it, and paste it. Why, then, would I go through the trouble of manually reformatting it to look like a DNS zone file for the sake of posting to WordPress? It’s not as if I’d be saving on the character count with the $ORIGIN directive (it might even sacrifice clarity), and it’s not as if the $TTL directive would be correct. Is there a conceivable reason that Tea Leaves did this other than making people believe that she has direct access to the master nameserver and that therefore her DNS logs are the real deal, totally unmanipulated? Did she perhaps do it to make people think her view of the DNS traffic hitting the nameservers is absolute rather than restricted to x number of passive feeds?

I’ll leave it to you fucking normies to judge whether fabrication has occurred.|||

Background On October 31, 2016, Slate published an article titled "Was a Trump Server Communicating With Russia?" This article described the work of Professor L. Jean Camp and her colleagues, all of whom had developed an interest in the activity of mail1.trump-email.com, an email-marketing server associated with the Trump Organization: The computer scientists posited a…