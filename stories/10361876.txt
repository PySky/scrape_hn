A Java contains an immutable sequence of Unicode characters. Unlike C/C++, where string is simply an array of , A Java is an object of the class .

Java is, however, special. Unlike an ordinary class:

The commonly-used method in the class are summarized below. Refer to the JDK API for a complete listing.

The method (introduced in JDK 1.5) can be used to produce a formatted using C-like 's format specifiers. The method has the same form as . For example,

is useful if you need to produce a simple formatted for some purposes (e.g., used in method ). For complex string, use / with a . If you simply need to send a simple formatted string to the console, use , e.g.,

Strings receive special treatment in Java, because they are used frequently in a program. Hence, efficiency (in terms of computation and storage) is crucial.

The designers of Java decided to retain primitive types in an object-oriented language, instead of making everything an object, so as to improve the performance of the language. Primitives are stored in the call stack, which require less storage spaces and are cheaper to manipulate. On the other hand, objects are stored in the program heap, which require complex memory management and more storage spaces.

For performance reason, Java's is designed to be in between a primitive and a class. The special features in include:

As mentioned, there are two ways to construct a string: implicit construction by assigning a string literal or explicitly creating a object via the operator and constructor. For example,

Java has provided a special mechanism for keeping the literals - in a so-called string common pool. If two string literals have the same contents, they will share the same storage inside the common pool. This approach is adopted to conserve storage for frequently-used strings. On the other hand, objects created via the operator and constructor are kept in the heap. Each object in the heap has its own storage just like any other object. There is no sharing of storage in heap even if two objects have the same contents.

You can use the method of the class to compare the contents of two s. You can use the relational equality operator to compare the references (or pointers) of two objects. Study the following codes:

Since string literals with the same contents share storage in the common pool, Java's is designed to be immutable. That is, once a is constructed, its contents cannot be modified. Otherwise, the other references sharing the same storage location will be affected by the change, which can be unpredictable and therefore is undesirable. Methods such as might appear to modify the contents of a object. In fact, a completely new object is created and returned to the caller. The original object will be deallocated, once there is no more references, and subsequently garbage-collected.

Because is immutable, it is not efficient to use if you need to modify your string frequently (that would create many new s occupying new storage areas). For example,

If the contents of a have to be modified frequently, use the or class instead.

As explained earlier, s are immutable because literals with same content share the same storage in the string common pool. Modifying the content of one directly may cause adverse side-effects to other s sharing the same storage.

JDK provides two classes to support mutable strings: and (in core package ) . A or object is just like any ordinary object, which are stored in the heap and not shared, and therefore, can be modified without causing adverse side-effect to other objects.

class was introduced in JDK 1.5. It is the same as class, except that is not synchronized for multi-thread operations. However, for single-thread program, , without the synchronization overhead, is more efficient.

Take note that is an ordinary object. You need to use a constructor to create a (instead of assigning to a literal). Furthermore, operator does not apply to objects, including the . You need to use a proper method such as or to manipulating a .

To create a string from parts, It is more efficient to use (multi-thread) or (single-thread) instead of via concatenation. For example,

JDK compiler, in fact, uses both and to handle string concatenation via the operator. For examples,

will be compiled into the following codes for better efficiency:

Two objects are created during the process, an intermediate object and the returned object.

Rule of Thumb: s are more efficient if they are not modified (because they are shared in the string common pool). However, if you have to modify the content of a string frequently (such as a status message), you should use the class (or the described below) instead.

JDK 1.5 introduced a new class (in package ), which is almost identical to the class, except that it is not synchronized. In other words, if multiple threads are accessing a instance at the same time, its integrity cannot be guaranteed. However, for a single-thread program (most commonly), doing away with the overhead of synchronization makes the faster.

is API-compatible with the class, i.e., having the same set of constructors and methods, but with no guarantee of synchronization. It can be a drop-in replacement for under a single-thread environment.

The following program compare the times taken to reverse a long string via a object and a .

Observe is 2x faster than , and 300x faster than . The method is the fastest, which take about the same time for and .

Very often, you need to break a line of texts into tokens delimited by white spaces. The class supports this.

For example, the following program reverses the words in a String.

The JDK documentation stated that " is a legacy class that is retained for compatibility reasons although its use is discouraged in new code. It is recommended that anyone seeking this functionality use the method of or the package instead."

For example, the following program uses the split() method of the String class to reverse the words of a String.|||

