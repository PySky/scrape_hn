MongoosePush is simple (seriously) REST service written in Elixir providing ability to send push notification to (Firebase Cloud Messaging) and/or (Apple Push Notification Service) via their API.

We provide already builded MongoosePush images. If you just want to use it, then all you need is , app token and/or app certificates. In case of certificates you need setup the following directory structure:

Assuming that your app token is "MY_FCM_SECRET_TOKEN" and you have the directory with all ceriticates in current directory, then you may start MongoosePush with the following command:

Building docker is really easy, just type:

As a result of this command you get access to docker image. You may run it by typing:

Docker image that you have just builded, exposes the port for the REST API of MongoosePush. Also there is a for path /opt/app where the whole MongoosePush release is stored. This volume will be handy for injecting and REST API certificates.

The docker image of MongoosePush contains common, basic configuration that is generated from . All useful options may be overridden via system environmental variables. Below theres a full list of the variables you may set while running docker (via switch), but if theres something you feel, you need to change other then that, then you need to prepare your own before image build.

Build step is really easy. Just type in root of the repository:

After this step you may try to run the service via:

Yeah, I know... It crashed. Running this service is fast and simple but unfortunately you can't have push notifications without properly configured and/or service. So, lets configure it!

The whole configuration is contained in file depending on which you will be using. You should use for production installations and for your development. Anyway, lets take a look on , part by part.

This part of configuration relates only to endpoints that exposes. Here you can set bind IP adress (option: ), port and paths to you certificates. You should ignore other options unless you know what you're doing or you're going to get to know by reading maru's documentation.

You may entirely skip the config entry to disable API and just use this project as library.

Lets take a look at sample service configuration:

Here we can see definition of a pool. Each pool has a name and its configuration. You may have several named pools of different sizes and with different configurations. Currently the only reason you may want to do this is that, the client may switch between them by specifying matching in their push request.

Each pool may be configured by setting the following fields:

You may entirely skip the config entry to disable support.

Lets take a look at sample service configuration:

Analogically to configuration, at top level we may specify named pools that have different configurations. For this is specifically useful since Apple delivers different APS certificated for development and production use. As in , client may select named pool by providing matching in his request.

Each pool may be configured by setting the following fields:

You may entirely skip the config entry to disable support.

If for some reason you need spec for this service, there is swagger endpoint available at path

There is only one endpoint at this moment:

As you can imagine, should be replaced with device ID/Token generated by your push notification provider ( or ). The notification should be sent as payload of this request. Minimal request could be like this:

The full list of options contains the following:

Please note that either alert and data has to be provided (also can be both). If you only specify alert, the request will result in classic, simple notification. If you only specify data, the request will result in "silent" notification, i.e. the client will receive the data and will be able to decide whether notification shall be shown and how should be shown to the user. If you specify both alert and data, target device will receive both notification and the custom data payload to process.

MongoosePush supports metrics based on . In order to enable metrics, you need to add an configuration in the config file matching your release type (or simply when you need this on already released MongoosePush). The following example config will enable simplest reporter - TTY (already enabled in environment):

The example below on the other hand will enable reporter (replace GRAPHITE_OPTIONS with a list of options for ):|||

MongoosePush is an simple Elixir REST service allowing to send push notification via FCM and/or APNS.