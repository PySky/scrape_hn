If you're reading this article, I'm assuming that you're already sold on the numerous benefits of securing your website with an SSL certificate. Wether it's for encrypting data transfers, establishing more credibility or even improving your SEO ranking (yes you heard it right) it's now easier than ever to obtain an SSL certificate for that.

Traditionally, an SSL certificate costs anywhere from $30 to $100 a year depending on where you're hosting it. It has always been a struggle to find a truly reliable authority for obtaining a free SSL.

Luckily, the Linux Foundation decided to step up and solve this problem by creating Let's Encyrpt, a free, automated, and open CA (Certificate Authority) for everyone. With Let's Encrypt, you can now encrypt everything for free.

Let's Encrypt is a fantastic service, but with the vast amount of 3rd party tutorials out there and so many changes that happened with the service itself through the different phases, I found most of the content either confusing or just obsolete. In the end, and after a lot of research from here and there, I managed to get it working.

The process itself turned out to be pretty simple, so I've summarised a full tutorial on how to do it on Ubuntu 16.04 with Nginx in 4 straightforward steps. The steps should be doable under other Linux flavours or Ubuntu versions, with small differences in the commands.

Before diving into the process I want to highlight a couple of details on the implementation.

The basic idea for identifying domain control in order to issue or renew certificates is to serve letsencrypt "ACME Challenges" from your web server.

There are mainly 2 modes of operation that you can setup your certificate on:

For more information on how Let's Encrypt works, you check out this link

In this guide I'll be going with the webroot mode with Nginx, so let's dive in!

First of all, we'll install and setup all the files related to Nginx and the base configuration, if you don't have a web server installed yet now is the time to do so.

Now that we have Nginx, lets setup 2 main config files that can be included into our main Nginx config later. Optionally, you could jusr include those sections directly into your main Nginx site config file but it's more flexible to separate and include them on demand. The files we'll be creating below can be re-used with multiple Nginx site configurations.

As mentioned earlier, we need to create a hidden directory and configure our web server to serve the challenges from it, in order for the certificate authority to validate the domain.

and add the following configuration into it

Then we can create an empty challenges directory, that's where Let's Ecnrypt will be adding the challenges to later on.

Now that we have available, we can later plug it into any individual Nginx website configuration and have it serve challenges for that domain on the web server.

In order to run the web server on SSL, we need to provide some configuration related to the SSL certificate such as encryption type, headers, protocols etc...

This configuration can also be added into a separate file, and later on plugged into any Nginx configuration that will use Let's Encrypt certificate.

with the following contents

Once the above 2 files are ready, we can now include them in any website specific Nginx configuration.

We'll first need set up a basic Nginx config (HTTP only) on our website domain in order to serve the challenges and identify the domain name ownership. We'll later on build up on this same Nginx config file for enabling SSL after obtaining the SSL certificate in step 2.

If you already have an established website being served on HTTP, you probably have a very similar setup to the below. All you will need to do in that case is to just reference in your existing config file and restart your web server. Otherwise, you can create a config from scratch as specified below.

With the contents similar to

Once this is done, the web server should be able to serve challenges under through your domain name. As you have noticed, this is after including into our domain's config.

Now that the challenges can be served under the domain, we'll be able to verify the ownership. Proceed with installing Let's Encrypt and obtaining a certificate.

Here is a breakdown explaining the command parameters above:

After running the command, the SSL related keys and files will be available under

For more information about the command check out the detailed official docs.

Now that the certificate and Nginx domain config are ready, all we have to do is link to the certificate of the domain from the site's config. Open up .

Adding the contents below to the file will enable SSL on the www version of the domain.

The above domain configuration is very similar to the initial one, the difference is that

Restarting the web server via will enable this configuration and allow us to access the website via https://www.mywebsite.com hurray! :)

One important thing to notice is that the site is still accessible via non www and non https URls such as

And https://mywebsite.com is not even accessible.

It's usually a best practice (especially for SEO) to just force https on your domain and use only one style either with www or without www. This can be easily done through 301 redirects on those variations.

First of all update the initially created non https config to redirect all requests to https://www.mywebsite.com via

Then also make sure to redirect non www https to www by adding

Once the web server is restarted, we'd have https://wwww. serving the website by default. Congrats!

A Let’s Encrypt certificates is valid for 90 days after being issues, so it needs to be renewed often. The renewal process is pretty simple, all we have to do is run

This command will renew certificates expiring in less than 30 days. Notice the pre-hook and post-hook, those are the commands we want to be running before and after renewal, which in this case is stopping and restarting Nginx.

For more details on renewing certificates command check out the docs here

It would definitely be annoying to login to the server constantly to update the certificates. One thing we can do is add a cronjob to do it for us, open up the crontab file

and include the following line

This sets the renewal command to run on the first of every month at 12:00AM, updating any certificates that are expiring in less than 30 days.

After this step, your website should be all set and running on Let's Encrypt.

Delivering more secure web products is crucial for your users. End users are already demanding the availability of secure web pages. As a matter of fact, Google Chrome is going to eventually label all HTTP pages as non-secure in very obvious ways for users.

So what are you waiting for? Let's Encrypt!|||

If you're reading this article, I'm assuming that you're already sold on the numerous benefits of securing your website with an SSL certificate. Wether it's for encrypting data transfers, establishing more credibility or even improving your SEO ranking (yes you heard it right) it's now easier than ever to obtain …