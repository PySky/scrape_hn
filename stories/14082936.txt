Most tips and tricks for leveling up as a developer focus on knowledge, experience, or communication skills. While these are definitely contributing factors they’re often too abstract for a learner to execute on effectively.

There are no quick shortcuts becoming a better developer, but here are some practices and tools which will definitely help. Here I’ll share some things I did to improve the code I produce, and thusly, the level up as a developer.

These are suggestions not doctrine; Your milage may vary.

Ruby is a very expressive language. With this expression comes a million styles of code to accomplish a task. Unifying these styles helps unify a codebase making it easier to grok and more enjoyable to work in. Use rubocop to accomplish this. Rubocop comes with predefined styles you can tweak and refine to your taste. What your code style tastes are isn’t the goal here. Uniformity throughout your codebase is.

Oh, but you have an existing project which is all over the place in code style? Rubocop can ignore existing violations and let you fix them as you go. It will even try to fix your code style violations if you wish.

Enforcing code style can be challenging on solo and team projects. Use automated tools to enforce these styles such as guard-rubocop, CodeClimate, Hound, or others to prevent committing mis-styled code. Avoid code smells with tools like reek.|||

Most tips and tricks for leveling up as a developer focus on knowledge, experience, or communication skills. While these are definitely contributing factors they’re often too abstract for a learner…