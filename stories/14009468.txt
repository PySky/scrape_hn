tldr; Required is a simple cross field validator which allows you to express and validate complex dependencies. You can view the source code and some other examples on github.

Say you are making a REST API endpoint which takes a large number of optional parameters. All which are valid in different combinations.

Some basic validation logic just for & can be described as:

1) requires to be present 

 2) requires to be less than it 

 3) cannot be greater than 1 year in advance 

 4) cannot be greater than 1 year in advance

If you are using a REST framework like Django Rest Framework or Flask Rest Plus you will have have a serializer which needs to validate the data / params. This will end end up looking something like:

While this is acceptable code, it is also very boilerplate, repetitive and doesn't lend itself well to being used outside this context. What if we could do better?

What if we simply defined pairwise relationships and the conditions under which they are valid. The four rules for and would then look something like:

We can then combine all the constraints by summing them together:

The object encapsulates all the validation logic, with the added benefit you can import it, add to it and otherwise treat it as any other first class object.

You could then combine it with other validators eg. a location validator and query validator and therefore compose validators from other basic validators.

When you finally want to validate the data you have. You can just call the validate method on the object. For the first two rules, it would validate in the following way:

Your final Serializer should end up looking a lot more readable with much less boilerplate.

You can view the source code and some other examples on github and it is available in a pip installable package called .|||

Required is a simple python package which allows you to validate cross field dependencies in your data