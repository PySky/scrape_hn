ActiveReporting implements various terminology used in Relational Online Analytical Processing (Commonly referred to as ROLAP) with ActiveRecord. It provides a DSL to describe reports and analytics on your data.

Add this line to your application's Gemfile:

Or install it yourself as:

Reporting is the collection and presentation data so that it can be analyzed. Our databases only store one thing: data. Data is great for computers but mostly worthless to humans. What ActiveReoprting does is turn that data into information to help humans make decisions.

ROLAP uses a set of terms to describe how a report is generated. ActiveReporting implements them in the closest way possible in Ruby-land.

A fact table is the primary table where information is derived from in a report. It commonly contains fact columns (usually numeric values) and dimension columns (foreign keys to other tables or values that can be grouped together).

A dimension is a point of data used to "slice and dice" data from a fact model. It's either a column that lives on the fact table or a foreign key to another table.

A hierarchy for a dimension is related attributes that live on a dimension table used to drill down and drill up through a dimension.

This is information related to a dimension. When the dimension lives on the fact table, the label is the column used. When the dimension is a related table, the label is a column representing the hierarchy level.

This isn't really an official term, but I like using it to describe further filtering of dimensionable data.

A measure is a column in a fact table (usually a numeric value) used in aggregations such as sum, maximum, average, etc.

SQL Equivalent: Column in the fact table used in an aggregation function

A metric is a measured value and the subject of the report. It is the result of the question you want answered.

Rails: The result of an ActiveRecord query

Star schema is a way of structuring your relational data. It is one of the most common forms of organization for relational data warehousing. The layout of a star schema consists of a fact table referencing one or more dimension tables. When laid out in an entity relationship diagram, it resembles a star.

Snowflake schema is a super class of star schema. A fact table still resides in the middle of the diagram, but dimension tables are normalized out into multiple tables resulting in the resemblance of a snowflake.

ActiveReporting is built with star schema in mind, but will work with snowflake.

Configure ActiveReporting via block configuration or by setting individual settings:

- If a fact model does not have a default label set for when it's used as a dimension, this value will be used. (Default: )

- If a fact model does not specify a measure to use for aggregates, this value will be used. (Default: )

- If the ransack gem is loaded, allow all unknown dimension filters to be delegated to ransack. (Default: )

- The name of a constant used to lookup prebuilt objects by name. The constant should define a class method called which can take a string or symbol of the metric name. (Default: )

In ActiveReporting, a fact model stores configuration information on how it can be used in reports. We use the term fact model instead of fact table because this class "models how the fact table interacts with dimensions and other reporting features".

You can put these classes anywhere you want in your app, though I recommend putting them in

Every fact model links to an ActiveRecord model. This is done either by naming convention or by explicitly declaring the model.

This naming convention is . Meaning if you have an ActiveRecord model named , you'll then have a to link them together.

Alternatively, you may manually specify the model manually with

ActiveReporting assumes the column of a fact model used for summing, averaging, etc. is called . This may be changed on a fact model using . You may pass in a string or symbol of the column you wish to use for aggregations.

You must declare what a fact model is dimensional by. A valid dimension is a column on the fact model's ActiveRecord model or a / relationship. relationships do not work (well) at all.

When another fact model uses a relationship as a dimension, that ActiveRecord model's fact model class can hold configuration information for how to act when used as a dimension.

By default, it is assumed a dimension's label is a column called . This can be changed on the fact model.

For dimensions that can have a hierarchy (such as a mobile phone), you can declare the what columns make it up. This will allow reports to dimension against a fact model and be able to use different labels to group by.

A dimension filter provides filtering for a report. In SQL-land, this is the clause.

Available dimension filters are defined on a . They can be implemented via a similar syntax to a Rails scope, link to the fact model's ActiveRecord model's scope, or delegate to ransack.

The first example exposes the scope to the fact model allowing it to be used as a dimension filter.

The second example defines a lambda to be invoked like a Rails scope. It joins against the relationship on and filters by the category's name.

The third example defines a filter called "subject_cont" and will delegate it to ransack when called.

Only dimension filters defined in the fact model may be used. Whitelisting available filters allows for more control over what the user may filter by. Giving the user full control to call any scope or method from the ActiveRecord model could lead to unexpected results, poor performing queries, or possible security concerns.

If ransack is available, you may flag a fact model to delegate all unknown dimension filters to ransack.

A is the basic building block used to describe a question you want to answer. At minimum, a metric needs a name, a fact table and an aggregate. You can expand a metric further by including dimensions and dimension filters.

- This is the identifying name of the metric.

- The SQL aggregate used to calculate the metric. Supported aggregates include count, max, min, avg, and sum. (Default: )

- An array of dimensions used for the metric. When given just a symbol, the default dimension label will be used for the dimension. You may specify a hierarchy level by using a hash. (Examples: )

- A hash were the keys are dimension filter names and the values are the values passed into the filter.

- An additional HAVING clause to be tacked on to the end of the query. This allows for the further filtering of the end results based on the value of the aggregate. (Examples: , , )

- Allows you to set the ordering of the results based on a dimension label. (Examples: , )

A takes an and ties everything together. It is responsible for building and executing the query to generate a result. The result is an simple array of hashing.

A may also take additional arguments to merge with the 's information. This can be user input for additional filters, or to expand on a base .

- When true, the result will include the database identifier columns of the dimensions. For example, when running a report for the total number of orders dimensioned by sales rep, the rep's IDs from the table will be included. (Default )

- A hash that will be merged with the 's dimension filters.

- An array of additional dimensions which are merged with the 's dimensions.

- Sets the HAVING clause of the final query and is merged with the 's metric filter.

It may be more DRY to store ready-made metrics in a database table or stored in memory to use as the bases for various reports. You can pass a string or symbol into a instead of a to look up an pre-made metric. This is done by passing the symbol or string into the class method on the constant defined in .

After checking out the repo, run to install dependencies. Then, run to run the tests. You can also run for an interactive prompt that will allow you to experiment.

To install this gem onto your local machine, run . To release a new version, update the version number in , and then run , which will create a git tag for the version, push git commits and tags, and push the file to rubygems.org.

Bug reports and pull requests are welcome on GitHub at https://github.com/[USERNAME]/active_reporting. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the Contributor Covenant code of conduct.

The gem is available as open source under the terms of the MIT License.|||

active_reporting - OLAP-like DSL for ActiveRecord-based reporting