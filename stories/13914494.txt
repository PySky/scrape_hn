The reducer must be mounted at .

Attaching an API end-point to a view is such a common task that we decided to create a module to remove unnecessary boilerplate from most of the views and to greatly speed up the development. With you can decorate any component and automatically load data from an API. The higher order component will provide you the props for handling the state; whether it returned data, is currently loading or returned an error. Moreover, the data can be automatically reloaded both periodically or manually. The library removes the tedious work of writing the logic of handling common request/success/failure state, registering refreshing and cache invalidation.

takes (Object) as first (required) argument and (Function) as second (optional) argument.

(String|Function -> String): A unique name for the loader (string) or a function that returns a name. If you make multiple loaders with the same name, they will share the same data (state). (Function -> Promise): A function that returns a promise, which is usually an API call. If you want to provide arguments for the function, simply wrap it in a function that gets as an argument. If left undefined, can be used simply as a connector to the data state. (Number): Provide an integer in milliseconds to define the interval of automatic refreshing. If set to or , automatic refresh won't be started. (Number): Set the data expiration time, leavy empty for no expiration. If set, cache expiration will be checked on . Use with to e.g. prevent excessive page loads. (Bool): Control whether reload is done always on component re-mount. (Bool): Control whether to completely reset data-loader state on unmount.

is an optional function to provide if you want to select only some props of the loader state or wish to rename them.|||

redux-autoloader - A higher order component for declarative data loading in React and Redux.