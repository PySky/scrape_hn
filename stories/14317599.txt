At Formidable, we’re always refining our knowledge of modern JavaScript tech. This blog series, entitled “JavaScript Power Tools”, will take a deeper look at some of the tools, frameworks, and libraries we use to deliver reliable and maintainable code.

Today, I want to talk about . You’ve probably heard about this library while researching patterns for managing asynchronous behavior in Redux applications. It’s a powerful concurrency tool with all sorts of use cases beyond just making API calls.

In this article, we’ll take a look at 's core mechanism (the “saga”) and how it’s implemented. The next article will be a ‘field guide’ to the concurrency patterns it provides, and the final article will demonstrate a few real-world use cases that benefit from this approach.

is named after the ‘Saga pattern’, a server-side architectural pattern introduced nearly 30 years ago, in which individual business-logic processes within a large distributed system avoid making multiple simultaneous connections to databases or services. Instead, they send messages to a central ’execution coordinator’ which is responsible for dispatching requests on their behalf. When designed in this way, such processes are termed ‘sagas’. We could spend a lot of time talking about the justification for this approach, but for now let’s simply observe that they were originally designed as an approach for writing code in highly asynchronous, performance-sensitive environments, and that in this regard, the browser has a lot in common with a distributed system.

So, with this in mind, we think of as the piece of our system which coordinates the operation of a bunch of different interleaved “sagas”. These sagas take the form of JavaScript generator functions used in a slightly unusual fashion. To understand this, let’s take a look at the typical usage of generators, and work our way back from there.

In this example, 's sole responsibility is to provide values, while 's responsibility is to perform side-effects that use those values (In this case, logging them to the console). If we squint a little bit, we can visualize “pulling” values out of via the call to .

What would happen if we swapped those responsibilities? What if was responsible for doing the work, and was responsible for providing values?

We can do this by calling with an argument. That argument becomes the result of the last statement that paused the generator:

It’s a bit weird, no? The generator became the “important” part of our code, but we inverted control of it to the outside world by pushing values for it to use through the function call. It’s turned into a sort of adding-and-logging engine, which will happily wait around forever for its next value until we stop it with .

This control-flow mechanism unlocks interesting new patterns- for instance, we can provide a value to the generator based on the last value it yielded to us:

This should be starting to look suspiciously familiar if you’ve ever heard of the Command pattern. Module A (smileyGenerator) passes a “command object” (value) to module B (getSmiley), which fulfills that command on module A’s behalf (returns a smiley).

By expanding on this theme, we can build a generator which can request both actions and data.

This example decouples behavior ( ) from implementation ( ) which makes testing behavior rather easy:

We no longer have to stub out or - we’re able to make assertions about behavior simply by comparing values.

Now, it’d be a drag to have to add a new command every time we wanted to introduce a new function, so let’s teach to invoke arbitrary functions on our behalf:

This completely obviates the need for and .

This looks good, but we have one last problem: what if our function were asynchronus? Our driver code is synchronous, so we’ll have to stretch our brains a little bit to come up with a solution. First, let’s look at the business-logic code we’d like to support.

What we’re asking for here is the ability to treat as if it were synchronous. We yield a command, asking the driver code to return control to us with the resulting value once it’s available. Let’s see what the supporting driver code looks like.

First, we’ll stub in our command. It should look pretty similar to the command, but with an additional callback parameter for the function passed in:

So, what goes in that callback? We’re in a tricky situation here, because this code is synchronous, too. We’ve successfully pushed the problem into our driver code, but now we have to actually solve the problem.

Promises save the day! If we modify performCommand to always return a Promise, we can support both the synchronous and asynchronous use cases.

Now, will consistently return a Promise, whether it’s executing synchronous or asynchronous behavior. All we have to do now is modify our function to work with Promises.

Unfortunately, we can’t use that while-loop anymore, since we don’t want to enter another iteration of the loop until our Promise resolves. To solve this, we transform our iteration into recursion:

Looks good! This code would probably pass the initial smoke test, but we still have one more gotcha to handle.

If the user requests a series of synchronous function calls, this implementation will block the JavaScript event loop because it directly makes the recursive call to . Worse, if that series of synchronous function calls gets too long, it’ll blow up with the dreaded “Range Error: Maximum call stack size exceeded” error.

Luckily, fixing this problem is straightforward: wrap the recursive call to in a . This gives the JavaScript runtime a chance to catch its breath and start a fresh call stack.

At this point, we’ve diverged substantially from the original generator/iterator model, but in the process, we’ve arrived at an implementation of the “Command pattern” using generators. Using this, we can write our business-logic procedures as generator functions, which yield abstract commands to . then performs the corresponding effect and resumes the generator with the result. This is the definition of a “saga” as implemented in .

Knowing this, we can port the code above with little effort. For reference, the ’cps’ effect in the code below stands for ‘continuation-passing style’, or the practice of calling a function that takes a callback as its last parameter, such as the function we used above.

We’ve only scratched the surface of . In the next article, we’ll talk about the effects it provides beyond simple function invocation, including Redux interaction, concurrency and control flow effects, and even saga combinators!|||

You've probably heard about redux-saga while researching patterns for managing asynchronous behavior in Redux applications. It's a powerful concurrency tool with all sorts of use cases beyond just making API calls.