I am a big fan of and , and of the cleaner code that they allow to write.

When I realised how easy it was to use in Swift I fell victim of one of the most common engineer disease: the shiny new thing syndrome.

I started to everything, and got disappointed at the coffee shop when I couldn't my espresso with milk to get a flat white.

Why even bother having a loop construct in the language when you can use ?!

Once I recovered from my diseased, making arguable coding choices along the way, I realised that and deserve the same respect, and serve different purposes. So here's the rule of thumb on when to use and when to use .

In the context of get an array, applies a transformation function to every element, and returns a new array with the resulting elements. That's the best use case for map.

The cool thing about is how you can chain multiple transformation together and have code that clearly express what it does.

Without going into details an operation has a side effect if it results in some kind of state changing somewhere, for example changing the value of a variable, writing to disk, or updating the UI. In such case using a for loop is more appropriate.

Everything said above stand true for as well.

When you need to transform the contents of an array of arrays, into a linear array use :

When the code needs to perform some action that has side effects use , and here's a nice trick to avoid nesting:

I run some quick tests and I couldn't see any relevant performance difference between and a loop in Swift. The Swift compiler is probably smart enough to use the best performing loop operation regardless of the code we wrote.

To recap, here's my rule of thumb: if there's a side effect you probably want to use , otherwise seems a better fit

What is your experience with vs loops? Do you agree with me or have a different opinion, if so why? Get in touch on Twitter @mokagio or leave a comment below.

Richard Fox on Twitter and on the comments below points out that Swift provides a method too. The loop above could be rewritten as:

I left out because in my humble opinion the loop version reads better. For element in array do stuff seems better to me than array for each do stuff. Nevertheless is as valid Swift as a loop. You could rewrite all what we've said already using instead of the loop and everything would still stand.

It is up to you and your team to decide which convention to use, and choose the appropriate construct depending on what you are trying to achieve.

Happy coding, and leave the codebase better than you found it.|||

Swift allows us to natively iterate over arrays using map. Map could be used to replace every for loop in your code, but that's not a great idea. Map and for have different purposes and should be used appropriately