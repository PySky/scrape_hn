Setting up a testing environment can be a rewarding pursuit - if you do your testing before you deploy code, your tests can signal errors and stop you from deploying a critical mistake to production. Testing requires various software, depending on your development process. One of the most common php testing frameworks is phpunit. Let’s see how we can set up a Docker driven test environment.

As anything with Docker, you have the choice of many images which provide , and other development tools. While we are interested in phpunit at this point, I’ve chosen an image which provides a bunch of other tools used in PHP CI projects. The Docker image is .

When looking up the project author, I realize it’s a friend of mine also from Slovenia, Denis Arh. Well, hello there! :)

Let’s first set up a working phpunit test from an existing project, so we can see an usable approach to the unit test. You can close my MiniTPL project just to give you a reasonable test bed.

Now, running the unit test for the project is as simple as this:

It’s a bit of a multi-step command, but let’s break down individual bits so we understand what’s going on. I’ll keep it to the essential parts.

The Docker switch sets the working directory when the container runs. By default the working path is the root of the container , which is not usable for running any kind of tests. We set the working directory to , and also map the current working directory ( ) to with .

Now, as for running tests - it’s not enough to catch just the failure of the last command, we want to break out if any of the commands fail. This is why when we start the test run, we use :

So, for example, if we would put a typo in , we would exit the test run immediately:

The last command exits with non zero status, which you can check like this:

For our test project we need an active composer verdor folder. Even if the project doesn’t need external dependencies, it needs this step so the unit tests can use the classes provided by the PSR-0 autoloader.

Your project may be different. If you require additional software like curl, or specific PHP extensions, you would put all the steps between and the command. In case setting up your software is not trivial, is time consuming or just too complicated to do it for every testing run, consider building your own docker image and base it on .

So, the last step of the run is . If you set up your project correctly it should run the tests defined in your and give you an output a little something similar to this:

So that’s it. It’s very easy to set up an isolated testing environment with Docker, and as long as you’re dilligent about keeping your tests up to date, it provides terrific value in the long run. Consider making code coverage reports the norm, and look at which other plugins are provided in addition to phpunit. I can tell you from personal experience that having some stats about your code base can motivate programmers to get rid of some technical debt and increase code coverage. Depending on some LOC tools, putting a monetary value against lines of code can also be a nice statistic, even if I’m still not sure it has any effect on business in the real world.

I hope this helps anyone who wants to quickly set up a Docker based PHP testing environment.

I'm the author of API Foundations in Go and my latest book, 12 Factor Apps with Docker and Go. You should read both books if you want to learn more about Docker and Go. I write about technology, Docker, Go, Node, PHP and databases most of the time. I am always interested in implementing best practices in whatever I do. You can reach out to me on Twitter.

I'm available for consulting / development jobs. Fixing bottlenecks and scaling services to cope with high traffic is my thing. I specialize in back-end development with a focus on providing APIs for consumption in Angular, React, Vue.js and other front-end technology stacks.|||

