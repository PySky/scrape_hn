Here I will present to you the second version of the Failed Tests Analysis engine part of the Design Patterns in Au﻿tomated Testing Series. The first version of the engine utilized the Chain of Responsibility Design Pattern however it has some drawbacks that I will mention in this publication. I decided that we need more easy to use solution so I developed the second version of the engine using the Ambient Context Design Pattern.

The classes and objects participating in the Ambient Design Pattern are:

The previous solution described in the previous article Failed Tests Аnalysis- Chain of Responsibility Design Pattern was fairly good. However, if you need to specify multiple custom test-case-specific handlers, you need to call multiple methods in the right order. So I believed that the usability of the API could be improved. I thought that it might be a good idea to use the built-in goodies of the C# language such as the using statements. Through them, the readability of the code is slightly improved. The reader can find almost immediately the different handlers' scopes.

The TestsExceptionsAnalyzerContext is the class where all of the magic is happening. As previously mentioned, here you can find a static stack variable that holds the chain of handlers. When you create the class with new generic type, it will add a new instance of it in front of the chain because the stack is a LIFO (last-in first-out) collection. We use Unity IoC container to get the primary handler of the application though an instance name- "MAIN_APP_HANDLER". When a new handler is moved on top of the stack, it is registered as the new main handler. Once the Dispose method of the IDisposable interface is called the new main app handler is the successor of the current primary handler. This way once you leave the using statement's scope the created custom handler is no more valid.

Though this class we can reuse the name of the primary handler registered in Unity.

As I mentioned earlier, there are successors of the TestsExceptionsAnalyzerContext base class. This particular class adds two handlers to the static stack. The order depends on order of the specified generic types.

You can add even three handlers using a single TestsExceptionsAnalyzerContext.

If you are not a fan of the curly brackets and using statements, this class is specially designed for you. This is a helper wrapper around the TestsExceptionsAnalyzerContext where you can specify a handler and a custom action. The specified handler will be valid only for the code of the anonymous action. I prefer the pure using statements approach.

The only difference compared to the previous solution here is how we get the main app handler. Instead of passing it as a parameter, this time, we resolve it through the named instance.

The above code should be added to the ExecutionEngineBehaviourObser so that the primary chain of handlers to be initialized correctly. The handlers that are specified here won't be modified by the ambient context.

The first test method uses using statements to add a new custom handler. The second one utilizes the helper wrapper.|||

Learn how to improve automated testing troubleshooting through the introduction of meaningful exceptions' messages on tests' failure.