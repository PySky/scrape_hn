So you have decided to become a Web Developer but you don‚Äôt know where to start?

Are you overwhelmed with suggestions to learn a ton of programming languages and all its unnecessary details?

Are you not sure what path to follow to become a confident and resourceful developer?

If your answer is YES to the above then don‚Äôt worry, I‚Äôve got you covered! üòè

A computer degree is not required to enter the tech industry. According to the StackOver Flow 2015 Survey, 48 percent of respondents never received a degree in computer science. Around 41.8 percent developers were self-taught.

According to the StackOver Flow 2016 Survey, 69 percent of all developers are self-taught. (13 percent of respondents across the globe are only self-taught.) 43 percent of developers have either a BA or BS in computer science or a related field. 2 percent of developers have a Ph.D.

It doesn‚Äôt matter if you do not have a computer science degree. It doesn‚Äôt matter if you have not written a single line of code in your life.

I will give you the exact roadmap that you can follow and become a Self-Taught Web Developer.

If you are passionate about learning something, you can absolutely do it.

Technology is changing the world. More and more people are learning programming skills and transforming their career to become the Web and Mobile app developer.

IT jobs will grow 22 percent through 2020, according to the U.S. Government

There simply aren‚Äôt enough developers out there who can fill the job space. When beginners start to learn to program to build something practical or build mobile apps, they get overwhelmed by so many programming languages out there and all the libraries, tools and frameworks that accompany it.

You do not need to know it all, you simply need to know the right and important ones.

I‚Äôll show you, how you can become a Web Developer without a Computer Science degree. So let‚Äôs get started.

Traditional education is slowly dying. Not everyone has time or money to spend on a four-year college degree for the knowledge that can be readily accessed online. Currently, the perfect resources to learn something are not books but online courses. (Books can be good addon supplements)

The first step in becoming a self-taught developer is to understand why do you want to become a web developer? what are your goals?

If you don‚Äôt know what programming language to learn, here is a good starting point.

Doesn‚Äôt matter if you don‚Äôt have a computer science degree. You can learn about computer science and software development. There are great courses out there offered for free by Stanford, Harvard, and MIT.

While having a computer science degree isn‚Äôt a prerequisite to becoming a web developer, it‚Äôs good to know the computer fundamentals.

Once you have the basic understanding of how the computers work, pick a technology and start learning. If you have never written a single line of code, start with learning HTML & CSS (Free Course here). Spend around 90 minutes a day, writing code in a peaceful environment where you don‚Äôt get distracted.

Practice a lot as you learn new material. When it comes to programming, you‚Äôre never gonna stop learning because it‚Äôs a constant process of learning and improving.

Once you‚Äôre familiar with the HTML & CSS, you can then move along and choose Javascript as your mainstream language (You can pick any programming language). The reason we recommend Javascript is because you can accomplish both, Front-End and Back-End stuff with one programming language.

You can read an endless amount of books and watch countless tutorials but if you don‚Äôt take action, you know nothing. Period.

The ideology is that you learn by doing, by copying, by following along.

You are not going to feel confident if you do not implement something practically that you learned via an online course. We humans, learn best by doing it.

There‚Äôs a saying that practice makes a man perfect, right?

Copy tutorials, read books, build practical applications and start teaching. When you start teaching, you have to internalize that topic very clearly so you can articulate it.

In that process, you learn even more. You may know how to drive, but to explain someone how to drive a car or how to balance a bike, if you‚Äôre a teacher, you have to learn even more details that you don‚Äôt even know about so you can internalize that thing and teach.

Programming is all about solving a particular problem. Breaking apps into features, and features into problems and problems in to small chunks. Once you break it down, you can logically build stuff.

Since computers are emotionless and highly logical, our code must be super logical to explain the computer what to do.

Join online communities like StackOver Flow and start engaging with the community. If you get stuck or have a question, you can post your problem there and someone from the community will solve the problem for you.

Engaging with the community will enable you on how to search the programming related problems. It will only happen when you write code all by yourself and make mistakes. That‚Äôs how you‚Äôre going to be confident because you will know how to tackle these challenges.

Overcome your fear of not being good enough. You are not going to be a ‚ÄúPerfect developer‚Äù. You will never who knows EVERYTHING there is to learn or master.

Even the most experienced programmers fail and face challenges even after 20 years of experience.

Get out and meet web developers; Go to meetups and hackathon, the website I recommend for this is Meetup.com

BTW, I host NodeSchool Chicago Meetup, come and join if you are in town

Build something meaningful: once you become comfortable enough with a technology, try to come up with a project idea where you get to implement what ever you are learning.

For example, you can build a blog website for a client, you can create a photo slider, to-do app or fun HTML & CSS game or some fancy web features like a hover effect or unlimited scrolling etc.

Create an account on Github and publish your projects, share with the community and get their feedback. One you have enough projects under your belt, you can start applying for jobs and showcase your projects.

A lot of good developers are self-taught. And the reason for that is that if somebody has the motivation to learn anything with their own will and freedom and they use their free time and they put their effort without any supervision or answers handed to them, That person by design has the motivation and willingness to make it.

When you do not have a teacher, you make your own structure. And then you understand how things work better because you‚Äôre figuring it out.

A self-taught developer will spend more time figuring out the answers because he or she does not have the readily available answers.

And the process through which a self-taught developer does through to teach and clarify himself/herself on a particular concept, that process makes him better.

So for example, if you‚Äôre trying to figure out ‚Äúhow to loop through an array‚Äù you will research, you will try three things and they will not work but the fourth thing will work. This way you have 4x the experience on what works and what does not.

And if you go one step further, you will also know why something doesn‚Äôt work.

That‚Äôs why at the end of a day, a self-taught developer is much more proficient just by the design of this training.|||

Are you overwhelmed with suggestions to learn a ton of programming languages and all its unnecessary details? A computer degree is not required to enter the tech industry. According to the StackOver‚Ä¶