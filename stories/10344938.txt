Quines are a very interesting concept in computing as they are self-replicating programs.

Let us start with describing what exactly is a quine – it is a program that prints its own source code, usually to the standard output. It has to store its source code in itself (it cannot rely on the source file laying around on the file system).

For example, this program matches the first requirement, but it does not match the second.

The simplest quine in Ruby is an empty program, but I would call that cheating since there is no program at all.

Having the requirements, I can start by writing a program that prints out the source of another program.

That was easy! Now, let us adjust it a little bit. This should make the transition to a real quine a little easier.

This way I can store the whole or just a part of the source in a variable. Now, let us try to replace hello world program source with our program source. It is quite obvious that we will run into infinite recursion as soon as we start putting the assignment in the first line in the source, so let us skip this part for now.

Now we are missing the definition of the variable, but we cannot put this in a string, since it will introduce the recursion we don not want. The other way to work around it is to generate the variable definition on the fly from the source string. Luckily can be used to properly escape the string.

This is not exactly what we want. The output is still different, but introduction of this intermediate step makes it a lot easier to grasp the transition. Now let us patch the string to include the rest of the code.

Hopefully, you should start to see the pattern here. This pattern is quite general and can be used to write the quine in C (as presented below). The source code uses exactly the same pattern as described above.

First, include a header file that contains definitions of common input output functions. Next, I define a variable to hold the source code string.

After the string I wrote a simple function that will print a properly escaped string. C does not have a function like in Ruby, so I had to implement it on my own. It handles escaping of , , and newline characters.

Next, there is a function which is where the execution of our program starts. At the beginning, as in the previous Ruby quine, it prints the beginning of the program, then it prints the escaped string, and finally the string itself to replicate the original source.

Now, let us take it one step further. The pattern observed above is quite generic, so now I can write a program that generates the quines for us. It really makes the life easier as it deals with all the duplication.

As before, the program has been split into two parts: head and tail. I have edited it very carefully to ensure it generates the original quine in C.

I use as a marker to inject the header again in the source. As a bonus, I can use to escape the strings properly.

The general pattern is the same as the one from the previous example, except for it generates C. In order to make it valid C, I needed to append a semicolon to the escaped string.

It is quite easy to write any program as a quine this way. Here is a TCP server quine that prints its source to connected clients in a form of a Gist.

Here is a bunch of tips if you plan to work on it on your own:

If you want to learn more, there is also this thing called “quine relay” that is a program A that generates a program B that generates program A in turn. There is a version available on GitHub that takes it through one houndred languages.|||

Quines are a very interesting concept in computing as they are self-replicating
programs. 

 Let us start with describing what exactly is a quine – it is a program that
prints its own source code, usually to the standard output. It has to store its
source code in itself (it cannot rely on the source file laying around on the
file system). 

 For example, this program matches the first requirement, but it does
not match the second. 
 puts File.read(__FILE__)
 

 The simplest quine in Ruby is an empty program, but I would call that cheating
since there is no program at all.