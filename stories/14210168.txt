This was supposed to be a part of a much longer post on writing maintainable code, but I'm having trouble finishing the bigger post and I wanted to see an actual code-centric post before the new year.

I've talked a lot about Object Oriented concepts in the past, but there's always procedural code lurking inside each and every class.  I feel very strongly that long methods and big classes are a veritable breeding ground for bugs.  Small methods (and classes) are easier to troubleshoot by inspection, and hence, less likely to have bugs than a long method.  To keep methods small and easily understandable, I like the Composed Method pattern first described by Kent Beck.  The Composed Method pattern states that:

In other words, using the Composed Method means assiduously avoiding the ArrowHead Anti-Pattern (deep if/then or looping hierarchies in a single method).

Here's an example that I lifted from Joshua Kerievsky's Refactoring to Patterns book that illustrates the application of Composed Method.  Pretending that the ArrayList class in .Net doesn't exist, create a resizable collection class that can be locked into a read only mode.  The internal storage is just an array.  As necessary the class will create a new, larger internal array.  If we use pure brute force coding to build the method in one big method we might get this code below.

It's not the biggest, hairiest method in the world, but it could definitely be better.  Let's clean up the Add() method by doing these 6 refactorings.

Applying that series of refactorings to the method leads to this second version of the expandable list class.

I ended up adding several new methods, but the methods are very simple, and the method is far more readable.  I'm sure that the obvious objection to Composed Method is that the longer stack traces and call stacks making the code harder to debug.  My simple answer is that a combination of using Test Driven Development and well factored code should minimize the need for the debugger.|||

