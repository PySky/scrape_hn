Python's passlib is quite an amazing library. I'm not sure there's a password library in existence with more thought put into it, or with more support for obscure password formats.

This is a skeleton of a port of passlib to Go. It dogmatically adopts the modular crypt format, which passlib has excellent documentation for.

Currently, it supports sha256-crypt, sha512-crypt, scrypt-sha256, bcrypt and passlib's bcrypt-sha256 variant. By default, it will hash using scrypt-sha256 and verify existing hashes using any of these schemes.

There's a default context for ease of use. Most people need only concern themselves with the functions and :

() { (...) get (UTF- , plaintext) password from somewhere , passlib. (password) err != { } (store hash in database, etc.) } () { get the password the user entered the hash you stored from the call to () , passlib. (password, hash) err != { } The context has decided, as per its policy, that the hash which was used to validate the password should be changed. It has upgraded the hash using newHash != { (store newHash in database, replacing old hash) } }

Since scrypt does not have a pre-existing modular crypt format standard, I made one. It's as follows:

...where , and are the respective difficulty parameters to scrypt as positive decimal integers without leading zeroes, and and are base64-encoded binary strings. Note that the RFC 4648 base64 encoding is used (not the one used by sha256-crypt and sha512-crypt).

passlib is partially derived from Python's passlib and so maintains its BSD license.|||

:key: Idiotproof golang password validation library inspired by Python's passlib