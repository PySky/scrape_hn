So far we have been learning the basic concepts and syntax of Frame. In this chapter we will begin to put these skills to use by exploring a number of reusable patterns that can be applied to real world problems, The result is the ability to produce repeatable solutions to common functional software requirements.

The first pattern we will explore is a fragment of a machine that implements toggle behavior. Depending on if the machine is initially in state $S1 or $S2 the toggle will enter either $Sa or $Sb when the machine receives an |e| message and emits an “a” or “b” respectively. As more |e| events are received the machine will emit a stream of alternating letters until a |quit| message is processed.

Below we see an adaption of this pattern that creates toggle behavior from a button click. The machine manages the button display and transmits the updated state to a listener if one exists. This example demonstrates how general functional patterns can be tailored to new solve new but similar problems.

This example is a simple extension of the toggle pattern and illustrates some common uses of the |>| event in a real world situation.

The first is the use of the |>| event to configure the UI to be appropriate to the state we are in. In this case it is simply a change of a button label ( #.button.setText(…) ) but could have been anything, including a complete reconfiguration of the whole screen.

The second is firing an event to notify a listener regarding the change in state. The existence test ??+ is used to determine if a listener exists to send the message to.

Lastly, the symmetry between the $Begin state’s initialization code and the $End state’s cleanup code – also helps make it easy to validate that all necessary steps have been taken to ensure correct resource management.

Next we will examine a pattern for managing the validity of a domain.

Data validation is a common and necessary task for software systems that accept data from users. Typically the system must analyze the validity of the data contained in one or more UI elements for correctness and enable or disable the mechanism for persisting the data based on the result. As we will see later in the full form validation demo, the basic pattern explored here can be stacked to any desired depth of complexity.

In the state table below there are two screens that show UI that could be used to drive and be driven by this machine. However, this machine could also manage other sets of UI types and configurations as well.

This example explores a system that manages a hardware jack that supplies power to a connected device. In the UI, a toggle switch controls the power to the jack. Additionally, the power to the jack should always be off when the device isn’t present regardless of the state of the switch.

The process for crafting the solution to manage this setup will begin with the design of our root controller. Next we will work through the various logical states the system can be in to identify other controllers and logical system states.

Upon system initialization, the root controller #|App is instantiated and passed a reference to the view which contains the switch UI. After saving this reference, the #|App immediately transitions to the $Working state and configures itself as discussed below:

The #PortManager controller mediates the behavior of the UI switch and the physical device. Both of these have two states they can be in independently of each other:

This creates 2 x 2 = 4 possible system states. The job of the #PortManager is to properly supply power to the device based on the overall system state.

The desired system power output based on state is:

There is more than one way to build this system. Below are two solutions that provide the same desired behavior. The first one (#PortManager1) was an initial experiment that evolved into the preferred solution (#PortManager2). Both are presented in order to give an idea of how the design process can work using Frame to analyze a problem and turn it into a solution.

While this implementation certainly works, it is not considered ideal from a state architecture point of view. The issue is the test in $DeviceNotPresent which determines if the switch is on.

In #PortManger1, the two “detached” states are merged together into the $DeviceNotPresent state. The rationale for this approach is that the similarities are compelling to fold together. However, this requires the introduction of a conditional test to detect what state the switch is in when the device was attached in order to know which transition to take:

#PortManager2 below shows an alternative design that eliminates the conditional test and models this system characteristic in a more decoupled way by introducing the $SwitchOff and $SwitchOn states instead.

This may seem a small issue or even contrary to the typical software engineering approach of folding common problems together. However, in Frame it is considered a key best practice to eliminate conditional tests that “discover” implicit states in favor of defining explicit states in the machine.

Despite being the more explicit (and therefore arguably better) design, one big issue to address is the cluster of conditional tests that are still required in the $Begin state. As previously discussed, the #PortManger1 controller was reworked in order to eliminate a conditional statement, so why are these tests ok?

The answer is that it is possible to successfully capture the semantics of “non-volatile” state in the state machine, but not “volatile” state. That is, the machine can capture the logical implications of the parts of the domain that are under its exclusive control. To be considered non-volatile, the data cannot be changed by any of other actors in the system. Therefore, it is still necessary to do conditional tests on any “volatile” part of the domain (such as values in a shared database, file or memory structure) that might have been manipulated “behind the back” of the controller by another process, thread or system component.

Unless there are some other guarantees by the clients of the controller, data that enters it is in an unknown state. Therefore in the initialization code of both of the #PortManager controllers it is necessary to determine the initial status of the domain and transition to the proper state. If it is not assured that the data entering the system is in a certain condition (for instance, if the identifier of the state to transition to is passed in), it is unavoidable that testing must be done in either a state-oriented or event-oriented (traditionally structured) system. However, there are several inherent advantages to the state-oriented approach:

The next example implements a very simple approach to managing the display of a modal dialog. When a button click occurs, the machine transitions to a CMS that shows the dialog and gets input from it or is canceled. The state stack is used to remember what state was transitioned from in order to return to it once the dialog is closed. In this case there is only one originating state, but by using the state stack the controller is ready for additional originating states to be added without changing the basic pattern of use.

When the #Dialog controller is instantiated, the dialog UI is shown and listeners added. The dialog will either finish its operation or be canceled. The pattern shown next allows for actions to occur when finished that don’t occur when it is canceled. In both cases, however, the parent receives an event that results in the #Dialog being destroyed and the dialog UI removed.

In this next example we will explore how we can use a CAT to manage the submission of an AJAX style, pre-validating form. This form does basic sanity checks in the client to eliminate as much invalid data as possible before submission. Of course, the real checks must still be executed on the server, but this step helps eliminate preventable bad submissions as well as providing a sophisticated user experience.

This solution will demonstrate a pattern for aggregating state from the individual fields up the CAT hierarchy until all UI is in a valid state to submit to the server.

The focus of this example is on managing the form state and not on the complexities of submitting the form data over the internet. Instead, the CAT optimistically assumes either success or failure that is immediately reported to the user. More sophisticated approach’s would also include a use case for the submission hanging, the server being unavailable and other issues.

The form in its initial state looks like this:



The CAT that manages this form and will perform the UI management and form submission is structured as follows:

Here we can see that each UI piece has one or more controllers backing it. While this may seem overkill for a simple form, for a given type of field such as the name text boxes the same validation controller class (but not instance) can be reused.

The password validation is the source of most of the complexity for the system. The #PasswordManager itself aggregates the valid state of its two children. If both are valid, it is valid and propagates that to the parent #Form. If either or both are invalid, so is it.

This pattern is highly scalable and allows for any number of different UI components with differing validation requirements to be easily added.

The #|App root controller is straightforward and has two important states, $Form and $Succeeded:

When launched – the #|App is passed a reference to the view. The $Begin state saves this reference in the domain and transitions to the $Form:# state, which is the CMS that shows the form. The #|App root controller then waits for either of these events to occur:

The #|App states and UI are examined in the following table:

The #Form controller is where most of the functionality for the system resides. The solution has 10 states including two modes, which manage the go-no go decision for submitting the form (and changing the UI accordingly) as well as the form submission itself. It also handles showing both a cancel confirmation dialog as well as an error dialog.

The #RequiredTextBox controller is used to manage the first and last name text boxes. A separate instance of this controller type is created for each of the boxes.

The |>>| message takes a regular expression as a parameter to validate the text against.

The next controller to explore is $PasswordManager, which aggregates the state of the two fields used for collecting the password and confirming it. If both the password and confirm boxes are valid, then $PasswordManager transitions to the $Valid state. Otherwise it evaluates to $Invalid. Both of these state changes are communicated to the parent form.

The #PasswordValidator manages the first field for password creation and evaluates the progress to be one of three states. The controller passes its evaluation of the password box to its parent, which aggregates this decision with other validity state from other UI elements.

The #PasswordConfirmMgr manages the password confirm box. Its structure closely parallels the #PasswordValidator as they both have similar purposes. The major differences are that the #PasswordConfirmMgr monitors both boxes for matching content, rather than validating one box against a regular expression.

This example demonstrates a number of important properties of using Controller Assembly Trees combined with state machines to solve problems. The first is that, despite the complexity of the solution for such an apparently simple and common problem, this approach exposes just how much subtlety is actually involved with its proper execution. Second, this solution is a pattern that can now be reused over and over again to solve the same problem when it is next encountered. This aspect of using Frame to model software allows the development of standardized solutions and the propagation of best practices across technology platforms.|||

