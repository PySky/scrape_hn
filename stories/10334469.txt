With PHP 7 errors and exceptions are undergoing major changes. For the first time, the PHP engine will start to emit exceptions instead of standard PHP errors for (previously) fatal, and catchable fatal errors. This means that we can now handle them much more gracefully with .

But with this change, comes a whole new exception hierarchy:

At the top we now have an interface, , which the original implements. Earlier versions did not have the interface and the root of the hierarchy was . We then have the new exception, which is a sibling of as opposed to extending it, which also implements the new interface.

The reason does not extend is so that the new exceptions will not get accidentally caught by legacy catch-all statements ( ) — and just like in older PHP versions, an uncaught exception is still a regular fatal error, preserving backwards compatibility.

If the ability to create a real catch-all is desired, you can catch the interface. This means that to catch both regular exceptions, and engine exceptions, you would use instead.

As you can see above, there are four new error exceptions, each one used for a different purpose:

Standard PHP fatal, and catchable-fatal are now thrown as exceptions. These will continue to cause a “traditional” fatal error if they are uncaught.

With PHP 7, we also have enhancements to assertions, using the function, with the addition of zero-cost assertions, and the ability to have them throw exceptions. To enable this, you should simply set to in your php.ini (or via ).

These exceptions are (you guessed it) exceptions.

Thanks to error exceptions, you can now handle includes with parse errors, and parse errors, as both now throw exceptions:

With the introduction of scalar, and (especially) strict types in PHP 7, these will also throw exceptions when a type mis-match occurs. It is important to understand that this does not apply only to scalar type hints, but to traditional type hints such as class/interface names, and .

Another important change in PHP 7 is with catchable fatal errors. Previously, these would have been caught and handled using . However, with PHP 7, they are now exceptions, which, because an uncaught exception is now a real fatal error, will no-longer be catchable in .

This is a backwards compatibility break and means that to work in both PHP 5.x and 7, you need to use both and .

This is considered a minor BC break due to limited usage.

It would not be a big jump to conclude that now we have a common interface, we could create our own branches in the exception hierarchy for completely custom exceptions by simply implementing the interface. Unfortunately, due to the fact that exceptions are magical under the hood, to be able to do things like capture line/file and stack trace information — this means that you still must still extend either or , and cannot directly implement alone.

Trying to implement results in the following:

However, this is not the full story. You can extend and then — while still extending or  — you can implement your extended interface:

As alluded to in the (pun intended) title of this post, these changes are actually quite big, allowing us to gracefully handle almost all previously fatal errors. The fact that the core team were able to maintain almost complete backwards compatibility while doing so is astounding. Kudos to them!|||

