Last year weâ€™ve been playing with a very simple method to spoof the referrer on Edge, which allowed us of course to spoof the referrer and -as a bonus- other neat things like bypass the XSS filter.

Today I found out that it was patched, so I decided to give it a try and find a way around the patch. Honestly I donâ€™t feel itâ€™s a bypass but clearly a variation. From a practical point of view, it works again and bypasses the patch, but from a technical point of view, the method is somewhat different. Either way, letâ€™s go for it!

In a hurry? Watch the 12 sec videoÂ where we quickly show what can be done with this vulnerability.

In the original post weâ€™ve seen that we could spoof the referrer by simply opening a new window with the desired referrer and then, moving to the target location. Two lines of code are worth a thousand words. ðŸ™‚ Check out the PoC below, where whatismyreferrer.com thinks (not anymore, itâ€™s patched!) thatÂ the referrer is paypal.com when in reality, it should be the URL of the page that executes the location.href.

That was enough to spoof the referrer on Edge but itâ€™s patched now, however, an easy variation stumbled upon me.Â No debugger or analysis here, just a plain bold test which quickly worked.

I tried a couple of methods to change the final URL (instead of location.href, usingÂ location.replace, meta refresh, window.open, etc) to see if Edge could be fooled again, but all of them failed. But, what would happenÂ if the URL is changed from inside an iframe?Â Will the referrer be the top or iframe URL?

Before answering that question keep in mind that normally, the referrer should be the URL that initiated the request. Letâ€™s say we have facebook.com with an iframe pointing evil.com, if the iframe changes the top URL to paypal.com, the referrer received by paypal should be evil and not facebook.

The image above shows the expected (and correct) behavior even on Edge. However, if instead of using a regular link, we set the location of the top via location.href, then, Edge gets confused andÂ uses the top as the referrer.

Below is simple test page which shows the difference between a regular link and location.href to change the top URL. Both take you to whatismyreferer.com but as you will see, the regular link behaves properly while the top.location.href does not.

But how can we use this vulnerability? Itâ€™s obvious that facebook will never host evil, right? Well, facebook like yahoo and almost every big one hosts iframes with ads. Those ads are capable of loading any page on behalf ofÂ those big web-sites. Also, using top.location.href those ads can bypass the XSS filterÂ without problems.

Personally, I hate theoretical vulnerabilities because they give me no satisfaction at all. You know, the kind of â€œif the user clicks here, accepts the warning, decompresses the zip and double clicks on the exe, heÂ gets infectedâ€œ. Donâ€™t like.

Our goal to create a working exploit is by injecting an iframe into the spoofed-referrer site and then, execute a top.location from it. This will we the same as being framed in any site, but, we wonâ€™t need its cooperation! Makes sense? Letâ€™s sayÂ we wantÂ whatismyreferer.com (victim) to believe the user is coming from paypal.com (spoofed referrer).Â How can we do that?

This iframe injection has been previously described at the bottom of the htmlFile/UXSS on IEÂ post, but letâ€™s do a quick recap here.

When we open the new window with the server redirect (1), we have a bit of time (before the redirect happens) to access its DOM, and thatâ€™s when we inject the iframe (2). Once the redirection happens, Edge will do its best to remove everything from the page (including our iframe) andÂ render paypal, however, we will prevent that by blocking the thread. Then, once the redirection happens we will unblock the thread and execute a top.location.href (3) from inside the iframe.

In this particular case we will block the thread using the same technique as here or here, just an ugly-visible-bold alert. Of course there are ways to block it without the alert and no user interaction, but we donâ€™t want to make attackerâ€™s lives easy: if the PoCÂ needs an alert and the user must interact, it becomes less useful. Hereâ€™s the full PoC.

Bug hunter, never stop learning! Close that facebook tab and keep reading interesting things. Life is beautiful and short, donâ€™t waste your potential spending minutes on things (or sites) that donâ€™t give you anything back. Learn learn and learn. Find things, alternatives, and enjoy your findings!|||

