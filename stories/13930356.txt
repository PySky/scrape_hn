This is Kinani again, back with a series of blog posts which will be posted across the upcoming months.

Today I’ll be working on a very interesting side project of mine,  actually it’s not really side project. the truth is, that I’m learning how to handle new toys in order to integrate them with my senior Graduation Project, and the best way to learn something is by teaching it to YOU… THE PEOPLE. so let’s begin.

Basically we’re going to store Raspberry Pi’s sensor readings in a relatively new database type from Microsoft called DocumentDB, DocumentDB is a NoSQL database which means there’s no relationships involved between collections, In DocumentDB there’s no tables it’s called ‘Collections’. and collections can store Documents, so in a relational DBs documents are the ‘fields’ in the tables. not just storing we’ll also project the data through an MVC application hosted on Azure.

From the Azure portal side bar button click New

Fill in the ID for your DocumentDB account, create new Resource Group if needed, and chose the closest location of the data center to you(for better latency)

Then wait until the deployment completes, and we’re ready to go.

Then from Keys, we need the following. copy them for later use:

Moving on to Visual Studio 2015, Here we’ll start working on the MVC project.

On your keyboard press Ctrl+Shift+N, to create new project, templates -> Visual C# -> Web -> ASP.NET Web Application(.NET framework)

Click Ok, and then chose the MVC Template, check Host in the cloud, like the following.

Click OK, and new window will appear to enter your new Azure Web App data.

We’ll now start to add DocumentDB .NET SDK to our project and you can do that by using NuGeT Package Manager Console.

And type the following in the Console:

Accept the License window when it appears.

The next step is to add the Model that will represent our data, In Solution Exlorer, right-click the Models folder, click Add, and then click Class.

Enter the name and then click Add

Change the the class code to following

This model is made up of two properties:

We have the JsonProperty attribute over each of them for serialization/deserialization, recalling that DocumentDB is just a big JSON container.

We now add the Controller of our MVC, In Solution Explorer, right-click the Controllers folder, click Add, and then click Controller

Then Add Scaffold dialog appears, select the MVC Controller – Empty, then click Add.

Naming controllers in MVC follows the Model, so in our case we named the Model “UltraReading” so our Controller will be named “UltraReadingController”

Before adding the code to our controller, we need to write the code of the DocumentDB driver; as we’ll be using it within the Controller.

Add to the Common folder new class and name it “DocDBRepo”

Change the code to the following:

 

 Coming to back to the Controller, we now can write it’s logic



What we did here is just querying all the Readings that’s not empty, reversing the results, taking the first 15.

Now, we move on to the last piece in MVC, and that’s the View.

In Solution Explorer, expand the Views folder, right-click the empty UltraReading folder that Visual Studio created for you when you added the UltraReadingController earlier, click Add, and then click View.

In the Add View dialog box, do the following:

We edit that View code into the following

In that view, we’re just iterating on the Reading property and displaying them each in a table row.

Remember the two important SECRET strings you copied from Azure portal? now we’re gonna use them.

In the Common folder, add new class, name it “Constants“. have it changed to:

 ** DON’T FORGET TO REPLACE THE DATA WITH YOURS.



One last two pieces of code to add is in Global.asax.cs file, in the Application_Start method.

and the other is in App_Start\RouteConfig.cs

Replace the following line of code:

Here we’re just routing incoming requests to UltraReading controller instead off Home controller.

And we’re done on the ASP Web App part. let’s publish it to Azure, making it public.

Right click on your project and select Publish

Once the new window is here, all is left to do is to click Publish button, and depending on your Internet speed; this web app will be available to access.

By reaching this stage, you’re expected to:

once you reach this command:

Continue with the following:

And also note that this code, is written for the HC-SR04 module.

One last thing worth mentioning, is the URI used with UpsertDocument, it follows the following scheme:

Credits goes to this article, for the ASP web App part:|||

Annnd Hello! This is Kinani again, back with a series of blog posts which will be posted across the upcoming months. Today I'll be working on a very interesting side project of mine,  actually it's not really side project. the truth is, that I'm learning how to handle new toys in order to integrate them…