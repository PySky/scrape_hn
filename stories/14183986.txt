I appreciate that you shared your frustrations, and keep them in mind.

Your post includes some misconceptions commonly held in the React community, so I wanted to take a moment to clarify them for everyone else who has the same concerns.

That is not to say that React works well for everyone, or that the issues you have raised are not valid. But there are a few facts that I think are important to get right when considering those problems.

This claim is not correct, because the ‚Äúcomplete rewrite‚Äù is backwards compatible. We tried to stress this every time we talked about it, but it‚Äôs worth reiterating.

React 16 (work in progress) is a rewrite, but it has the same public API. Out of more than 30,000 (!) components at Facebook, only a dozen or so needed changes, and those few components were relying on unsupported or undocumented behavior.

So this is quite literally 99,9% compatibility. This makes us confident React 16 will most likely work with your code too.

Read more about our commitment to stability without stagnation.

Create React App is a thin layer on top of Webpack and Babel. It doesn‚Äôt generate the project code for you, but it configures those tools in the recommended way.

The complaint about boilerplates and starter kits in the next sentences doesn‚Äôt sound entirely fair to me, given that there is a solution to that problem, but you intentionally chose not to use it.

There is more work to do in this area, but I think the situation has improved in the past year, and I hope you give it a chance if you decide to try React again some time in the future.

Don‚Äôt use Redux if you don‚Äôt need it, as it is intentionally verbose.

React has a built-in state system, and I would recommend to start with it, and lift the state up when you need to share it between your components.

You can always add them later if you feel the need for them, but starting with MobX or Redux is often too much overhead for little gain.

I‚Äôm not involved with React Router, but I think this claim is not true. If you‚Äôve been following React Router releases, you will know that:

So if you only updated to stable versions (which you should unless you know what you‚Äôre doing), the transition from 1.0 to 2.0 should have been uneventful. You‚Äôd see a bunch of warnings, and you‚Äôd have 8 months to fix them before the next major (3.0) removed them.

Now, you‚Äôre completely right that 4.0 came right on the heels of 3.0. 4.0 is a complete rewrite, and has a slightly different philosophy (which happens to fix many of the issues reported to React Router over the years). You‚Äôre right 4.0 was released right after 3.0. The thing is‚Äîyou don‚Äôt have to migrate to it. There are many existing apps using 3.0, and the 3.x branch is still in active maintenance. So you won‚Äôt get burned by staying on 3.0 if you‚Äôre already using it, and the team is working on making the migration path to 4.x easier‚Äîfor those who are interested.

So the bottom line is: if you only used stable releases, React Router gave you a whole year to migrate to new APIs. They released a 4.x rewrite to fix some long-standing issues, but commit to maintaining the 3.x branch indefinitely. Doesn‚Äôt sound too bad to me!

Glad you mentioned that! React 16 will support returning arrays from render() so you can delete all those nasty divs and wrapper tags. We‚Äôre working hard to make your life better.

It is not quite clear to me what exactly you mean by this. But if you‚Äôre interested in why React makes sense to us (and folks at Airbnb, Twitter, Pinterest, and other product companies), the way I usually explain it is that it helps us build apps with less bugs thanks to explicit data flow and lack of manual DOM management. It‚Äôs great if you found different strategies for dealing with these problems, as we all learn from each other.

This article digs into why some people find React useful so I encourage you to take a look at it! But it‚Äôs totally cool if React doesn‚Äôt solve that problem for you, or you prefer a different set of tradeoffs provided by great alternatives like Vue, Ember, and Angular.

This is not correct, as you can use React without ES6 and without JSX if you prefer so. Then it‚Äôs as simple as dropping a single script tag in your app.

But we do think build toolchains are useful (even you think so‚Äîgiven that you mentioned you‚Äôre using a linter). While they are not always easy to configure, we hope that solutions like Create React App will make them more accessible, and the underlying projects (e.g. Webpack) will get more user-friendly over time (Webpack 2 is making a lot of progress in this area with config validation). So I‚Äôm optimistic about them, but I see why people might want to use React without them.

The reason JSX transform requires React to be in scope so that JSX works with browser globals. Which is related to your previous complaint: we want JSX to work even if you don‚Äôt use a bundler!

You are completely right it‚Äôs annoying. It‚Äôs one of those early design decisions to align better with the DOM APIs that has proved to be confusing. We might change this in the future.

React Native has a lot of API surface area, and is very popular, so naturally it gets a lot of issues. Many of those are support requests, but we appreciate all the help fixing bugs and helping people in the issues.

The version of the react package is generally not relevant for React Native users because it contains very little code (Component and createElement). The reconciler code is synced to React Native separately. So this an artifact of the different release cycles of RN and React, and doesn‚Äôt at all mean that RN apps are using an unstable version of React. This is the same exact version we are using at Facebook in production. I agree it‚Äôs confusing though, and we hope to align the release process between React and React Native more closely in the future.

To sum up, I‚Äôm grateful that you brought up these concerns in an article. They come up pretty often, and I thought it is important to separate the facts from misconceptions. But there is definitely more work ahead both for us and for the ecosystem to deliver a better experience to React users, and I‚Äôm glad you articulated those common issues so we can better address them.

Edit: I would like to thank everybody who pointed out the first version of this article was too passive aggressive. I‚Äôm very sorry about this! I edited the article to a more professional tone, as I should have done before posting. I also removed all emojis but you can still find them on my Twitter. üôÉ|||

Your post includes some misconceptions commonly held in the React community, so I wanted to take a moment to clarify them for everyone else who has the same concerns. That is not to say that React‚Ä¶