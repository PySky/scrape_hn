Here are other implementations:

See why we decided to implement this differently.

Add to your Gemfile Then run

Sometimes you want the decorator to modify your method arguments. For example a generic way to define an api that handles pagination and filtering.

Method modifiers modify methods, specifically those are class methods which:

The limitation of those are:

with decorator you can do the following

Most of the implementation use the unary operator syntax to define the decorator which leads to a lost reference to the caller instance. This imply a global state of what are the current decorators to apply to the next method definition (which is not always threadsafe depending on the implementation).

Current implementations have a rather large footprint. A class that needs a decorated method have all of its method definition hooked on the callback. In our case it's only added at the decorator call. And we'll soon support callback removal after method definition.

The obvious drawback of our approach are: The syntax that might be less comprehensive for a new comer, and the namespacing which we handle via aliasing at decorator declaration.

By convention we use ConstantName case for the decorators in order not to mix them with other method call/DSL. This is not enforced and you can have the text case you like.

Note that, this syntax is also used in other gems such as Contract|||

decors - Yet another implementation of Python decorators in ruby