In this step-by-step Seaborn tutorial, you’ll learn how to use one of Python’s most convenient libraries for data visualization.

For those who’ve tinkered with Matplotlib before, you may have wondered, “why does it take me 10 lines of code just to make a decent-looking histogram?”

Well, if you’re looking for a simpler way to plot attractive charts, then you’ll love Seaborn. We’ll walk you through everything you need to know to get started, and we’ll use a fun Pokémon dataset (which you can download below).

Seaborn provides a high-level interface to Matplotlib, a powerful but sometimes unwieldy Python visualization library.

We've found this to be a pretty good summary of Seaborn's strengths. In practice, the "well-defined set of hard things" includes:

Those last three points are why Seaborn is our tool of choice for Exploratory Analysis. It makes it very easy to "get to know" your data quickly and efficiently.

However, Seaborn is a complement, not a substitute, for Matplotlib. There are some tweaks that still require Matplotlib, and we'll cover how to do that as well.

While Seaborn simplifies data visualization in Python, it still has many features. Therefore, the best way to learn Seaborn is to learn by doing.

This process will give you intuition about what you can do with Seaborn, leaving documentation to serve as further guidance. This is the fastest way to go from zero to proficient.

We tried to make this tutorial as streamlined as possible, which means we won't go into too much detail for any one topic. It's helpful to have the Seaborn documentation open beside you, in case you want to learn more about a feature.

Instead of just showing you how to make a bunch of plots, we're going to walk through the most important paradigms of the Seaborn library. Along the way, we'll illustrate each concept with examples.

Here are the steps we'll cover in this tutorial:

First, things first: Let's. Get. Pumped. Up!

Next, make sure you have the following installed on your computer:

We strongly recommend installing the Anaconda Distribution, which comes with all of those packages. Simply follow the instructions on that download page.

Once you have Anaconda installed, simply start Jupyter (either through the command line or the Navigator app) and open a new notebook:

Let's start by importing Pandas, which is a great library for managing relational (i.e. table-format) datasets:

Next, we'll import Matplotlib, which will help us customize our plots further.

Then, we'll import the Seaborn library, which is the star of today's show.

Now we're ready to import our dataset.

Today, we'll be using a cool Pokémon dataset (first generation). Here's the free download:

Once you've downloaded the CSV file, you can import it with Pandas.

Here's what the dataset looks like:

As you can see, we have combat stats data for the original 151 (a.k.a best 151) Pokémon.

One of Seaborn's greatest strengths is its diversity of plotting functions. For instance, making a scatter plot is just one line of code using the lmplot() function.

There are two ways you can do so.

For example, let's compare the Attack and Defense stats for our Pokémon:

By the way, Seaborn doesn't have a dedicated scatter plot function, which is why you see a diagonal line. We actually used Seaborn's function for fitting and plotting a regression line.

Thankfully, each plotting function has several useful options that you can set. Here's how we can tweak the lmplot():

Looking better, but we can improve this scatter plot further. For example, all of our Pokémon have positive Attack and Defense values, yet our axes limits fall below zero. Let's see how we can fix that...

Remember, Seaborn is a high-level interface to Matplotlib. From our experience, Seaborn will get you most of the way there, but you'll sometimes need to bring in Matplotlib.

Setting your axes limits is one of those times, but the process is pretty simple:

Here's our new scatter plot with sensible axes limits:

For more information on Matplotlib's customization functions, check out its documentation.

Even though this is a Seaborn tutorial, Pandas actually plays a very important role. You see, Seaborn's plotting functions benefit from a base DataFrame that's reasonably formatted.

For example, let's say we wanted to make a box plot for our Pokémon's combat stats:

Well, that's a reasonable start, but there are some columns we'd probably like to remove:

In turns out that this isn't easy to do within Seaborn alone. Instead, it's much simpler to pre-format your DataFrame.

It's outside the scope of this tutorial to dive into Pandas, but here's a handy cheat sheet.

Another advantage of Seaborn is that it comes with decent style themes right out of the box. The default theme is called 'darkgrid'.

Next, we'll change the theme to 'whitegrid' while making a violin plot.

For example, we can visualize the distribution of Attack by Pokémon's primary type:

As you can see, Dragon types tend to have higher Attack stats than Ghost types, but they also have greater variance.

Now, Pokémon fans might find something quite jarring about that plot: The colors are nonsensical. Why is the Grass type colored pink or the Water type colored orange? We must fix this!

Fortunately, Seaborn allows us to set custom color palettes. We can simply create an ordered Python list of color hex values.

Let's use Bulbapedia to help us create a new color palette:

Wonderful. Now we can simply use the palette= argument to recolor our chart.

Violin plots are great for visualizing distributions. However, since we only have 151 Pokémon in our dataset, we may want to simply display each point.

That's where the swarm plot comes in. This visualization will show each point, while "stacking" those with similar values:

That's handy, but can't we combine our swarm plot and the violin plot? After all, they display similar information, right?

The answer is yes.

It's pretty straightforward to overlay plots using Seaborn, and it works the same way as with Matplotlib. Here's what we'll do:

Awesome, now we have a pretty chart that tells us how Attack values are distributed across different Pokémon types. But what it we want to see all of the other stats as well?

Well, we could certainly repeat that chart for each stat. But we can also combine the information into one chart... we just have to do some data wrangling with Pandas beforehand.

As you can see, all of our stats are in separate columns. Instead, we want to "melt" them into one column.

To do so, we'll use Pandas's melt() function. It takes 3 arguments:

All 6 of the stat columns have been "melted" into one, and the new Stat column indicates the original stat (HP, Attack, Defense, Sp. Attack, Sp. Defense, or Speed). For example, it's hard to see here, but Bulbasaur now has 6 rows of data.

In fact, if you print the shape of these two DataFrames...

...you'll find that melted_df has 6 times the number of rows as stats_df.

Now we can make a swarm plot with melted_df.

Finally, let's make a few final tweaks for a more readable chart:

There we go!

We're going to conclude this tutorial with a few quick-fire data visualizations, just to give you a sense of what's possible with Seaborn.

Histograms allow you to plot the distributions of numeric variables.

Factor plots make it easy to separate plots by categorical classes.

Density plots display the distribution between two variables.

Joint distribution plots combine information from scatter plots and histograms to give you detailed information for bi-variate distributions.

Congratulations... you've made it to the end of this Python Seaborn tutorial!

We've just concluded a tour of key Seaborn paradigms and showed you many examples along the way. Feel free to use this page along with the official Seaborn gallery as references for your projects going forward.|||

