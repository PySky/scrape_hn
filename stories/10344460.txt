GDriveFS is an innovative FUSE wrapper for Google Drive developed under Python 2.7.

I could use some help in testing **GDriveFS*. Please let me know if you find issues.*

Also, a design choice of other implementations is to make the user get API keys for Google Drive, and this doesn't make sense. Our implementation is built against OAuth 2.0 as a native application. You should just have to visit the authorization URL once, plug-in the auth-code, and be done with it.

Both PyPI and the Google Code downloads for google_api_python_client have an old version of their libraries, prior to when they fixed some Unicode problems that might cause failure when dealing with downloads/uploads of certain types of files.

To install using Mercurial, do the following:

I've experienced a google-api-python-client installation problem when you don't already have it installed, and it's listed as a dependency in setup.py:

Therefore, google-api-python-client has been removed as an explicit dependency. It should always be installed by hand, as we now won't install it automatically.

In order to install his, we're going to use PIP (to access PyPI). Under Ubuntu, this is done via:

You'll also need to equip your system to perform builds in order to install some of the dependencies. Under Ubuntu, this is done via:

Before you can mount the account, you must authorize GDriveFS to access it. GDriveFS works by producing a URL that you must visit in a browser. Google will ask for your log-in information and authorization, and then give you an authorization code. You then pass this code back to the GDriveFS utility along with a file-path of where you want it to store the authorization information ("auth storage file"). Then, you can mount it whenever you'd like.

Since this is FUSE, you must be running as root to mount.

By default, FUSE uses a very conservative block-size. On systems that support it, you may elect to use the "big_writes" option. This may dramatically increase the block-size (which improves the speed of transfers). There doesn't appear to be any authoritative documentation as to what systems support it or what the improvements might be, but, so far, it seems like Linux supports it, OSX doesn't, and FUSE will go from using 4K blocks to using 64K blocks.

To use this, pass "big_writes" in the "-o" option-string:

A Vagrantfile has been made available in the event that you'd like to mount your account from a system that isn't FUSE compatible (like Mac), or you're having issues installing GDriveFS somewhere else and would like to debug.

To start and provision the instance:

This may take a few more minutes the first time, as it might need to acquire the Ubuntu 14.04 image if not already available.

To log into the guest instance:

The GDFS source directory will be mounted at /gdrivefs, and the scripts will be in the path.

If you're familiar with Vagrant, you can copy the Vagrantfile and modify it to mount an additional path from the host system in the guest instance, and then use this to access your files from an incompatible system.

Mounting GDFS in debugging-mode will run GDFS in the foreground, and enable debug-logging.

Just set the GD_DEBUG environment variable to "1":

Any of the configuration values in the conf.Conf module can be overwritten as "-o" options. You may pass the full array of FUSE options this way, as well.

Google Drive will store Google Document files without a standard format. If you wish to download them, you have to select which format you'd like to download it as. One of the more exciting features of this FUSE implementation is the flexibility in choosing which format to download on the fly. See the section below labeled "Displaceables".

If a mime-type isn't provided when requesting a file that requires a mime-type in order to download, GDFS will make a guess based on whether the extension in the filename (if one exists) can be mapped to a mime-type that is available among the export-types provided by GD for that specific file.

The following is an example directory-listing:

Google Documents stores all of its data on Google Drive. Google will store these files in an agnostic file entry whose format will not be determined until you download it in a specific format. Because the file is not stored in a particular format, it doesn't have a size. Because it doesn't have a size, the OS will not issue reads for more than (0) bytes.

To get around this, a read of these types of files will only return exactly 1000 bytes of JSON-encoded "stub data".. Information about the entry, including the file-path that we've stored it to.

This example also shows how we've specified a mime-type in order to get a PDF version of a Google Document file:

Something like the following will be displayed:

From this, you can tell that the file was originally a Google Documents mimetype, and now its a PDF mime-type. You can also see various flags, as well as the location that the actual, requested file was stored to.

A cache of both the file/folder entries is maintained, as well as a knowledge of file/folder relationships. However, updates are performed every few seconds using GD's "change" functionality.

The default UID/GID of files is that of the current user. The default permissions (modes) are the following:

Whether or not a file is "editable" is [obviously] an attribute reported by Google Drive.

These settings can be overridden via the "-o" comma-separated set of command-line options. See below.

These options change the behavior at the FUSE level (above GDFS). See "man mount.fuse" for all options.

Extended attributes allow access to arbitrary, filesystem-specific data. You may access any of the properties that Google Drive provides for a given entry, plus a handful of extra ones.

This used to be rendered as JSON, but since the xattr utilities add their own quotes/etc.., it was more difficult to make sense of the values.

A file will be marked as hidden on Google Drive if it has a prefixing dot. However, Linux/Unix doesn't care about the "hidden" attribute. If you create a file on Google Drive, somewhere else, and want it to truly be hidden via this software, make sure you add the prefixing dot.|||

GDriveFS - An innovative FUSE wrapper for Google Drive.