Note this is a port of Mahsu's work to the excellent BuckleScript compiler, for the whole game it generates only 7K byte gzipped JS and takes 0.57s to build (including the start up time of npm).

MariOCaml is an HTML 5 canvas web-browser implementation of the Super Mario Bros platformer written exclusively in OCaml.

Try it out!

The production build is 7K byte 3. Open to run!

MariOcaml is an OCaml implementation of Super Mario Bros. The game includes several basic enemies, blocks, and items, with particle support. The underlying system follows a director model, with the director maintaining state based on game objects and tiles, including Mario, items, and obstacles. The implementation of enemies and items is designed to be easily extensible. Furthermore, MariOcaml supports a game-over and game-win states, as well as score and coin counts, emulating several of the core mechanics of Mario.

The design follows a clean, modular, and extensible system to ensure that more features can easily be added. Levels are procedurally generated (pseudo-randomly), algorithmically creating an environment of textures and objects that are interactable. The procedural generation generally generates a playable map, but due to the nature of random generation, maps may not be the most aesthetically appealing. Additionally, the game is interactive and graphical using js_of_ocaml, which enables cross-compiliation of Ocaml to javascript, allowing MariOcaml to be run in any modern web browser.

The underlying procedural generation utilizes a grid system to generate objects, taking account parameters such as proximity and location. During game-play, the director maintains the game state, including the location and status of both items, enemies, and the character.

Pull requests fixing bugs, adding functionality, or improving organization are welcome!|||

MariOCaml - HTML 5 canvas Mario ported in BuckleScript(7K byte JS): https://github.com/bloomberg/bucklescript