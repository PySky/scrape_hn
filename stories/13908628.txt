Weld is a language and runtime for improving the performance of data-intensive applications. It optimizes across libraries and functions by expressing the core computations in libraries using a common intermediate representation, and optimizing across each framework.

Modern analytics applications combine multiple functions from different libraries and frameworks to build complex workflows. Even though individual functions can achieve high performance in isolation, the performance of the combined workflow is often an order of magnitude below hardware limits due to extensive data movement across the functions. Weldâ€™s take on solving this problem is to lazily build up a computation for the entire workflow, and then optimizing and evaluating it only when a result is needed.

You can join the discussion on Weld on our Google Group or post on the Weld mailing list at weld-group@lists.stanford.edu.

To build Weld, you need Rust 1.13 or higher and LLVM 3.8 or newer.

To install Rust, follow the steps here. You can verify that Rust was installed correctly on your system by typing into your shell.

To install LLVM on macOS, first install Homebrew. Then:

Weld's dependencies require , so you may need to create a symbolic link so the correct is picked up (note that you might need to add at the start of this command):

To make sure this worked correctly, run . You should see or newer.

Weld's dependencies require , so you may need to create a symbolic link so the correct is picked up:

To make sure this worked correctly, run . You should see or newer.

With LLVM and Rust installed, you can build Weld. Clone this repository, set the environment variable, and build using :

Note: If you are using a version of LLVM newer than 3.8, you will have to change the crate dependency in to match (e.g. for LLVM 4.0.0). You may also need to create additional symlinks for some packages that omit the version suffix when installing the latest version, e.g. for LLVM 4.0:

Weld builds two dynamically linked libraries ( files on Linux and files on macOS): and . Both of these libraries are found using . By default, the libraries are in and .

The directory contains documentation for the different components of Weld.

Grizzly is a subset of Pandas integrated with Weld. Details on how to use Grizzly are in . Some example workloads that make use of Grizzly are in .

runs benchmarks under the directory. The results of the benchmarks are written to a file called . To specify specific benchmarks to run:

If a benchmark name is not provided, all benchmarks are run.|||

weld - Weld is a runtime and language for accelerating data analytics frameworks