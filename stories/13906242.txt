Oblivion is a programming language that outputs a string representing an svg format graphic. This is called the . We can think of this output as a buffer. Similarly, the language can aslo "print" statements to another output called . Both of these are accessed with the keyword and function respectively.

Oblivion's compiler is implemented in TypeScript, with it's parser generated from JavaScript. Unlike most web-based languages, Oblivion does not transcomple to JavaScript. It also does not run on a virtual machine.

Oblivion uses a self-evaluating abstract syntax tree with a pre-defined set of rules. A program is compiled by traversing the abstract syntax tree in a depth-first fashion, and using a node's rule to evaluate it's child arguments. The state of evaluation never changes as rules are the same.

In Oblivon, newlines, spaces, tabs and commas are treated as whitespace. This means you can put as many commas, spaces or newlines as you like, to allow for a customized spacing of code.

Oblivion has a relatively small number of types, allowing for a small variety of data to yield many combinations of uses and functionality.

Numbers in Oblivion represent both Integers and Floats. They are very similar to JavaScript numbers.

Bools or booleans represent true and false in Oblivion. They are the results of using logical operators. and can also be used in lists or returned from functions

Lists are a special type in Oblivion and are denoted with square brackets . They can contain any value, and are not statically typed. They are also immutable, you can only use operators to create new lists, you can never edit a list once it's created.

Points are two member structs that contain two numbers, one that applies to the x and y coordinate of a point on a grid. SVG graphics are always arranged on a x-y grid system, thus points are an easy way to manage places on a grid.

You can access the x and y properties of a point, but points are always immutable

In Oblivion, a line is a data structure that represent a series of points connected by a line. It is immutable, like the rest of Oblivon's types. A line has both a printable form and a drawable form. They are connected via the operator.

Shapes, also called polygons, are very similar to lines, but they are always . This means that the shape is always colored. Shapes are connected via the operator.

You can also connect shapes to lines, for more complex SVG arrangements.

Colors are special types in Oblivion that allow you to color your lines and shapes. For now, you can use a small range of named colors, like or , or a hex color, such as .

Unlike most functional languages, Oblivion uses a wide array of operators (and a minimal amount of parenthsis).

It is important to note all operators in Oblivion associate toward the left. There is no other operator precedence.

Oblivion has five arithmetic operators, . They are used like so:

The operator returns a random number between the left and right numbers argued with it respectively. Such as .

Oblivion makes use of several different logical operators. These can be used to compare values, and check if values are the same.

The checks for absolute equality, and can compare lists against each other. The operator will not work properly for lists.

Oblivion has two operators specifically for lists! The first is the extension operator, . It returns a new list that is extended by the right hand list or other element. If the right side is not a list, it acts as an appending operator.

Second is the set, operator. It allows you to reference an index of a list and returns a new copy of the list that gets reassigned.

The operator takes one color and a line shape or combo and colors it.

The color operator also colors the entire SVG object.

Oblivions only conditional element is the if statement. It's constructed similarly to Ruby's if..else syntax. Like with all body statements, if statements end with a _, and can be nested.

They can also be used with the keyword

is a function that can take some function or process, and call it a specific number of times. Repeat is a tool used to make drawing repetitive structures easier.

Functions are the central feature in Oblivion used for computation. They work much like functions in languages like Ruby and Python. They even use the all so familiar keyword!

Functions can also be used with drawing!

Because Oblivion uses trampoline recursion, the limit for a recursive call is much deeper than with most other languages.

A Process in oblivion is a no parameter function denoted by . It's meant to serve as a currying tool to aid in functional programming. It's also very useful for drawing.

You can also use processes with the built-in function

Here's an exmaple that uses two processes together to draw with random numbers!

Oblivion also has a variety of built in List functions that can slice, search, and insert items into a newly returned list.|||

The Oblivion Programming Language