Multimethods are one of Clojure’s primary polymorphism mechanisms. They allow dispatch on an arbitrary number of arguments, by combining a dispatching function with one or more methods. Here’s a way to implement them.

First, we will need a way to keep track of method implementations. This method registry is state, which we can store in an atom. By using a private definition, we encapsulate the state inside the namespace.

Next up is multimethod defition. creates a new entry in the methods map, and defines the actual multimethod.

When the multimethod is called, it first determines the dispatch value by calling it’s dispatch function. It then looks up the method implementation for the dispatch value in the methods map. When a matching implementation is found, the multimethod applies it to it’s arguments. Otherwise, it throws an error.

simply adds an implementation to the methods map under the given name and dispatch value.|||

Multimethods are one of Clojure's primary polymorphism mechanisms. They allow dispatch on an arbitrary number of arguments, by combining a dispatching function with one or more methods. Here's a way to implement them....