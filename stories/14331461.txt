Were equipped with all the usual tools. We use GitHub, and we have a Jenkins server which runs our builds. Our usual process uses the feature branch approach.  This means our branch process by default looks like this:

I started looking into the tools of the trade, and also what I want to do, and eventually implement the same safety net on both platforms.

“I will learn from my mistakes and never allow anyone to do them again!”

I’ve worked on Android a lot recently, so I will relate the discussion to this platform. I recently joined ContentSquare, and I was lucky enough have the ability to directly affect both Mobile platforms.

Sounds familiar? So how do we fix this?

But is it true, is your code “Legacy” ? I asked myself this question, and decided to do some research on the subject. I tried to figure out how one applies the adjective “Legacy” to code? While searching, I found this definition:

Have you ever heard of the phrase, Legacy Code ? Have you ever considered you may be producing Legacy code in real time?

What we also decided, is to disable direct commits to master, meaning we only can push code to master through a branch merge with a pull request. 

Doing this on GitHub is super easy. Just go to your repo settings, and select protect this branch.

What we just did is disallow anyone to commit and push directly to master.

From now on we have to go through a pull request which will be reviewed by at least one person.

This helps on two fronts:

For the time being, our build loop is very simple.

OK, now off to finding the tools we’re going to use.

As a requirement, we decided to only use tools which integrate through gradle. This would allow us to have completely seamless integration.

As lint is a common tool I will not go into details about it, instead I will just show you how to enable it.

Lint is a part of the android plugin, but by default it’s not configured on new projects.

To enable it, add the following block to the android section of the build.gradle file.

In the above segment, the things to note are :

Ok, so now that we have lint done, we need to actually run it somehow.

Gradle’s android plugin has a quite a few pre-defined tasks, which you can get a complete listing of by using the option tasks. 

As the listing is huge, here’s an excerpt of it showing the verification tasks:

I like check which is described simply as “runs all checks”.

By default check calls the appropriate check tasks on all available modules. This means, by running :

You will run the check task on all submodules. And this task runs :

For this moment this is all we need, and due to it’s nature, we will link all future checks to this task.

So, next I was reading up on PMD, Findbugs and discovered Facebook’s Infer.

PMD is a source code analyzer. It finds common programming flaws like unused variables, empty catch blocks, unnecessary object creation, and so forth. PMD works on source code and therefore finds problems like: violation of naming conventions, lack of curly braces, misplaced null check, long parameter list, unnecessary constructor, missing break in switch, etc. PMD also tells you about the Cyclomatic complexity of your code which I find very helpful.

To add PMD as an analyzer, we have to append to the build.gradle file. We can add the following definitions

In this script, the interesting things to note are :

FindBugs is an analyzer which detects possible bugs in Java programs. Potential errors are classified in four ranks: (i) scariest, (ii) scary, (iii) troubling and (iv) of concern. This is a hint to the developer about their possible impact or severity. FindBugs operates on Java bytecode, rather than source code.

Things to note in this configuration are:

Infer is a static analysis tool for Java, Objective-C and C. What was nice about infer is the fact it double checks all `@Nullable` vs `@NonNull` annotated variables and has some Android specific checks which were of interest. Infer is a standalone tool, which means that by default it doesn’t integrate with Gradle, however, good guy Uber developed a Gradle plugin for Infer.

To add this analyzer to our build process, we again add to Gradle.

Adding this plugin is quite straightforward, we only define the sources which are to be included and excluded from the check.

Now that we have some analyzers, call ./gradlew check and see what happens. 

Within the huge log, you will see something similar to the following

However defining the code style was a pain!

Google to the rescue! Google actually provides it’s code style publicly. And as it was already pretty close to the IntelliJ Idea defaults,

I just modified the “code formatting template” in studio and within 10–15 mins, I was all set.

ProTip: if you want to constantly auto format your code, IntelliJ has you covered. You can easily record a macro, which will, rearrange code, re-order imports, remove unused imports, as well as do any other style related operations. When done put a “save all” at the end. Next, store the macro and assign it to ctrl+s. These settings, can be shared to the team, and it automagically works for everyone.

Quite straight forward for java, we need to generate a Javadoc.

Step1: Require a JavaDoc comment on all public methods, through Checkstyle, already done in the default rules.

Now, if you call ./gradlew javadoc in your output folder, `build/reports/javadoc` you will find the complete javadoc for your project

For this task we’ll use Jacoco, a java standard.

So, similarly by calling ./gradlew coverage in `build/reports/coverage` you would get a very nice coverage report page.

An important thing, in order to reduce code smell, was to break if developers forget code, used for debug purposes or comment out code in hopes of future use.

There is a quick fix for this, just add these rules to your checkstyle rules set.

At the end, our build loop has two extra lines:

So now that we have our checks in place, at last we need to set Github to disallow branch merges unless our Jenkins build passes. 

This is quite easy with the Github plugin. You can just add a post build step, and run it once to have it available on Github

and add the corresponding status as a requirement on Github

And now, once a build finishes, if you have a PR that does not conform to the rules put in place, Jenkins fails the build and by this Github blocks the merge! \o/

You now have a mechanism which runs :

Nice, now all you’re left to do is focus on the architecture of the code and continue improving your system.

A sample code project implementing most of the above can be found on my github repo, https://github.com/smarkovik/make-or-break .

Oh, and if you’re in Paris and interested, look us up.. http://www.welcometothejungle.co/companies/contentsquare|||

This post describes exact techniques which can be used to improve overall code quality, and tools which will help you achieve the first steps towards clean code.