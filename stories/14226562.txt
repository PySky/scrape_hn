To gain a better understanding of how FRP might be implemented, I wrote a simple FRP library.

Implementation leans heavily on Clojure’s atom watch functionality. To support multiple watches on a “stream”, serializes it’s function and turns it into a keyword.

The basic operators take an atom, create and return a new one, and subscribe to changes on the original. When a new “event” occurs, they update the new atom with a transformed version of the event. On the surface, this gives the illusion of a pure “derivation” of streams.

Of course, nothing prevents you from calling on a derived stream or computation. For a less leaky, more idiomatic Clojure solution, check out core.async’s support for transducers.|||

To gain a better understanding of how FRP might be implemented, I wrote a simple FRP library....