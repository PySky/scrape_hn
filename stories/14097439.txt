A topic that can easily make anyone's mind wobble. Here I try to make them stick in to your mind (and maybe mine) by explaining them in the simplest way possible.

Want to learn something new?

Visit Hugobots where I teach people

Design patterns are solutions to recurring problems; guidelines on how to tackle certain problems. They are not classes, packages or libraries that you can plug into your application and wait for the magic to happen. These are, rather, guidelines on how to tackle certain problems in certain situations.

First of all we have a door interface and the implementation

Then we have our door factory that makes the door and returns it

And then it can be used as

When to Use?

When creating an object is not just a few assignments and involves some logic, it makes sense to put it in a dedicated factory instead of repeating the same code everywhere.

Taking our hiring manager example above. First of all we have an interviewer interface and some implementations for it

Now let us create our

Now any child can extend it and provide the required interviewer

and then it can be used as

When to use?

Useful when there is some generic processing in a class but the required sub-class is dynamically decided at runtime. Or putting it in other words, when the client doesn't know what exact sub-class it might need.

Translating the door example above. First of all we have our interface and some implementation for it

Then we have some fitting experts for each door type

Now we have our abstract factory that would let us make family of related objects i.e. wooden door factory would create a wooden door and wooden door fitting expert and iron door factory would create an iron door and iron door fitting expert

And then it can be used as

As you can see the wooden door factory has encapsulated the and the also iron door factory has encapsulated the and . And thus it had helped us make sure that for each of the created door, we do not get a wrong fitting expert.

When to use?

When there are interrelated dependencies with not-that-simple creation logic involved

Having said that let me add a bit about what telescoping constructor anti-pattern is. At one point or the other we have all seen a constructor like below:

As you can see; the number of constructor parameters can quickly get out of hand and it might become difficult to understand the arrangement of parameters. Plus this parameter list could keep on growing if you would want to add more options in future. This is called telescoping constructor anti-pattern.

The sane alternative is to use the builder pattern. First of all we have our burger that we want to make

And then we have the builder

And then it can be used as:

When to use?

When there could be several flavors of an object and to avoid the constructor telescoping. The key difference from the factory pattern is that; factory pattern is to be used when the creation is a one step process while builder pattern is to be used when the creation is a multi step process.

In short, it allows you to create a copy of an existing object and modify it to your needs, instead of going through the trouble of creating an object from scratch and setting it up.

In PHP, it can be easily done using

Then it can be cloned like below

Also you could use the magic method to modify the cloning behavior.

When to use?

When an object is required that is similar to existing object or when the creation would be expensive as compared to cloning.

Singleton pattern is actually considered an anti-pattern and overuse of it should be avoided. It is not necessarily bad and could have some valid use-cases but should be used with caution because it introduces a global state in your application and change to it in one place could affect in the other areas and it could become pretty difficult to debug. The other bad thing about them is it makes your code tightly coupled plus it mocking the singleton could be difficult.

To create a singleton, make the constructor private, disable cloning, disable extension and create a static variable to house the instance

Then in order to use

Consider a game where there is a hunter and he hunts lions.

First we have an interface that all types of lions have to implement

And hunter expects any implementation of interface to hunt.

Now let's say we have to add a in our game so that hunter can hunt that also. But we can't do that directly because dog has a different interface. To make it compatible for our hunter, we will have to create an adapter that is compatible

And now the can be used in our game using .

Translating our WebPage example from above. Here we have the hierarchy

And both the hierarchies

Taking our employees example from above. Here we have different employee types

Then we have an organization which consists of several different types of employees

And then it can be used as

Lets take coffee for example. First of all we have a simple coffee implementing the coffee interface

We want to make the code extensible to allow options to modify it if required. Lets make some add-ons (decorators)

Taking our computer example from above. Here we have the computer class

Here we have the facade

Now to use the facade

Translating our tea example from above. First of all we have tea types and tea maker

Then we have the which takes orders and serves them

And it can be used as below

Taking our security door example from above. Firstly we have the door interface and an implementation of door

Then we have a proxy to secure any doors that we want

And here is how it can be used

Yet another example would be some sort of data-mapper implementation. For example, I recently made an ODM (Object Data Mapper) for MongoDB using this pattern where I wrote a proxy around mongo classes while utilizing the magic method . All the method calls were proxied to the original mongo class and result retrieved was returned as it is but in case of or data was mapped to the required class objects and the object was returned instead of .

Translating our account example above. First of all we have a base account having the logic for chaining the accounts together and some accounts

Now let's prepare the chain using the links defined above (i.e. Bank, Paypal, Bitcoin)

First of all we have the receiver that has the implementation of every action that could be performed

then we have an interface that each of the commands are going to implement and then we have a set of commands

Then we have an with whom the client will interact to process any commands

Finally let's see how we can use it in our client

Command pattern can also be used to implement a transaction based system. Where you keep maintaining the history of commands as soon as you execute them. If the final command is successfully executed, all good otherwise just iterate through the history and keep executing the on all the executed commands.

In PHP it is quite easy to implement using SPL (Standard PHP Library). Translating our radio stations example from above. First of all we have

Then we have our iterator

And then it can be used as

Here is the simplest example of a chat room (i.e. mediator) with users (i.e. colleagues) sending messages to each other.

First of all, we have the mediator i.e. the chat room

Then we have our users i.e. colleagues

Usually useful when you need to provide some sort of undo functionality.

Lets take an example of text editor which keeps saving the state from time to time and that you can restore if you want.

First of all we have our memento object that will be able to hold the editor state

Then we have our editor i.e. originator that is going to use memento object

And then it can be used as

Translating our example from above. First of all we have job seekers that need to be notified for a job posting

Then we have our job postings to which the job seekers will subscribe

Then it can be used as

Let's take an example of a zoo simulation where we have several different kinds of animals and we have to make them Sound. Let's translate this using visitor pattern

Then we have our implementations for the animals

And then it can be used as

We could have done this simply by having an inheritance hierarchy for the animals but then we would have to modify the animals whenever we would have to add new actions to animals. But now we will not have to change them. For example, let's say we are asked to add the jump behavior to the animals, we can simply add that by creating a new visitor i.e.

And for the usage

Translating our example from above. First of all we have our strategy interface and different strategy implementations

And then we have our client that is going to use any strategy

And it can be used as

Let's take an example of text editor, it lets you change the state of text that is typed i.e. if you have selected bold, it starts writing in bold, if italic then in italics etc.

First of all we have our state interface and some state implementations

Then we have our editor

And then it can be used as

Imagine we have a build tool that helps us test, lint, build, generate build reports (i.e. code coverage reports, linting report etc) and deploy our app on the test server.

First of all we have our base class that specifies the skeleton for the build algorithm

Then we can have our implementations

And then it can be used as

And that about wraps it up. I will continue to improve this, so you might want to watch/star this repository to revisit. Also, I have plans on writing the same about the architectural patterns, stay tuned for it.|||

design-patterns-for-humans: Ultra-simplified explanation to design patterns!