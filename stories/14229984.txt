This is a bootstrap for a TypeScript Progressive Web App.

Service workers are auto generated. Note that you will need to click "Update on reload" in the Application tab of Chrome Dev Tools to get the latest code on each refresh.

BrowserSync is integrated to automatically detect changes and trigger browser reloads.

This is not the ideal setup for your application, but simply a bootstrap to get started quickly.

This was built on top of existing code from the Angular 2 Quickstart repo (https://github.com/angular/quickstart).

To get started, clone the repo and run . Chokidar will detect changes and regenerate service workers using sw-precache.

Verify that you are running at least node and npm by running and in a terminal/console window. Older versions produce errors.

We recommend nvm for managing multiple versions of node and npm.

Clone this repo into new project folder (e.g., ).

You can quickly delete the non-essential files that concern testing and QuickStart repository maintenance (including all git-related artifacts such as the folder and !) by entering the following commands while in the project folder:

You could start writing code now and throw it all away when you're done. If you'd rather preserve your work under source control, consider taking the following steps.

Initialize this project as a local git repo and make the first commit:

Create a remote repository for this project on the service of your choice.

Grab its address (e.g. ) and push the local repo to the remote.

Install the npm packages described in the and verify that it works:

The command first compiles the application, then simultaneously re-compiles and runs the . Both the compiler and the server watch for file changes.

Shut it down manually with .

We've captured many of the most useful commands in npm scripts defined in the :

Here are the test related scripts:

The QuickStart documentation doesn't discuss testing. This repo adds both karma/jasmine unit test and protractor end-to-end testing support.

These tools are configured for specific conventions described below.

It is unwise and rarely possible to run the application, the unit tests, and the e2e tests at the same time. We recommend that you shut down one before starting another.

TypeScript unit-tests are usually in the folder. Their filenames must end in .

Look for the example . Add more files as you wish; we configured karma to find them.

That command first compiles the application, then simultaneously re-compiles and runs the karma test-runner. Both the compiler and the karma watch for (different) file changes.

Shut it down manually with .

Test-runner output appears in the terminal window. We can update our app and our tests in real-time, keeping a weather eye on the console for broken tests. Karma is occasionally confused and it is often necessary to shut down its browser or even shut the command down ( ) and restart it. No worries; it's pretty quick.

E2E tests are in the directory, side by side with the folder. Their filenames must end in .

Look for the example . Add more files as you wish (although one usually suffices for small projects); we configured Protractor to find them.

Thereafter, run them with .

That command first compiles, then simultaneously starts the at and launches Protractor.

The pass/fail test results appear at the bottom of the terminal window. A custom reporter (see ) generates a file which is easier to read; this file is excluded from source control.

Shut it down manually with .|||

typescript-progressive-quickstart - TypeScript Progressive Web App Quickstart