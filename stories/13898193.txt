This is old code I've done in a previous life, I recommend to use https://github.com/erezsh/lark instead.

Q: Does it solve any task? A: Yes, it does produce POS tags and dependency parse trees. Also, given an ambigious sentence, it will produce as many parse trees as there is ambigious paths in the grammar.

Q: How to change the grammar ? A: Currently there is no easy way to change the grammar, check out file to see current grammar.

Q: How does it works ? A: The parser works in two step :

Q: How complex is the earley parser ? A: Based on Earley's paper it's a $n^3$ algorithm...

Q: Which grammar can earley parser process ? A: Every grammar ever ! At least that's what I understood.

Q: Where can I find out more about the earley algorithm ?|||

python-earley-parser - Earley Algorithm in Python