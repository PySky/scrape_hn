'Spotmap' is a spatial index which I coded from scratch for this project, after much puzzling over how to efficiently index recursively nested groups of particles. While it was being constructed it was considered as basically a kind of complex linked list

I have tried some reading on the "Trees" abstract-data-type to help discuss 'spotmap'. There are many different perspectives on data trees to navigate with a mixing of terms and definite glut of ad hoc letter-named classes and examples ("A/B/C..+Tree") . However some basic 'data tree' terminology seems common and should be helpful to follow.

The details of how 'nodes, edges and keys' are stored or encoded are considered here as the indexing scheme of a trees design. For example the keys of each node could be stored in arrays of fixed size or in dynamically sized lists, or they could be linked only to leaf nodes, or to every node.

Metadata about the keys can be attached to nodes. Spotmap's nodes each store 'bounding box values' ( for informing spatial queries ) which seems to make it generally an "R-tree", however its indexing scheme and core implementation could be just as suitable for indexing non-spatial information, like files and directories.

The following 6 flat arrays can encode any tree hierarchy of spots:

One sorted-list of all items:

Any spot can link any number of child spots and items. Each spot also has computed and stored spatial bounds (high and low) and total mass and center of mass. These details are computed after initial 'loading' of the Tree (creating a fresh hierarchy) and they need to be refreshed in use. of each spot is recorded to assist the recurrent task of refreshing spots measurements.

A logging function was made to examine spotmaps internal references. Here Spot ids are printed as chars "1" to "G", horizontally along the order of the delineation_sequence and down through spot-nesting-depth. In this example 50 keys/items

 (across) in 43 spot records ("1" to "G") :

Nodes can be subdivided into child nodes by any measure of their key data . The tree structure does not 'care' about why keys are separated into nodes and sub-nodes. In Spotmap, nodes are measured as 'spots' in 3D space with (the key data of) child nodes fitting inside their parents spot. The process of dividing and subdividing keys into hierarchy of tree nodes has been called 'bulk loading' in physics contexts. In spotmap the creation and linking of each level of child spots from a parent spot is called 'budding', the process of recursively 'budding' an 'ancestor' spot and all offspring until leaf nodes of certain size result is called 'blooming'.

In spotmap the first generation of nodes from the rootnode is divided by keys velocity, resulting in 10 spots with the fastest moving keys in the first and slowest moving in the last. These 10 spots are subsequently 'bloomed' by space - subdivision by space is the purpose but by dividing a primary generation by velocity, spots containing faster moving keys can be rebloomed more often on subsequent frames, and spots containing slow moving keys can be kept and just have their bounding boxes remeasured.

With knowing the unbroken id-range under any spot, spots can be 'rebloomed' and written over the old record.

Fractional spotmap reloading is implemented. The whole scheme is laborous to describe fully, here is a summary in haste:

In this spotmap rendering it is possible to observe that the spots containing the fast moving particles in the center of the system are remapped much more often than those slower particles.|||

fancy - A  programmatic sense of fantasy for the virtual minds of the coming AI revolution.