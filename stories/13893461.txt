Have you ever had the problem that some services miss an API integration and you need to click through a page manually? Or you wanted to automate a process?

Here comes Watir. Watir is an open source Ruby library build for automated tests – but it’s not only used for that! We can also use it to build a web-scraper which simulates a human who clicks through a page to perform an action – log in, post a comment, download some data, and a lot of other things besides.

One of the key feature is that it uses a built-in Selenium web-driver, it means that we can scrape a rich, dynamic page build in JavaScript. In the past I had tried to build a web-scraper with the Mechanize gem – it’s perfect for simple pages that are static and don’t use a lot of JavaScript or AJAX.

Another advantage of Watir is the fact that it allows making a screenshot. Why is that helpful? Imagine a situation in which your application tries to parse a page but somewhere it fails… and what now? How do you handle an error? We can make a screenshot and upload it to S3 or save it locally! With Machanize it would be impossible – it uses Nokogiri and it doesn’t allow to make any screenshot.

There are two options to run Watir – in a normal browser, eg. Chrome/Firefox, or in “headless” mode. What does that mean?

“Headless” mode allows you to parse a page without a monitor – in most UNIX systems Watir requires pre-installed Xvfb on your machine (if you’re using Ubuntu). In this mode, Watir uses PhantomJS to simulate a web-browser and run a page in an emulator. When you want to parse a page using Chrome, you need to install chrome-driver.

Another great feature is mobile/device testing mode. It allows you to run a page as an iPhone, iPad or other mobile devices. It could be a great way to test if a page is responsible and well-scaled.

In this article, I’ll try to show some of Watir’s features. I built a simple ruby gem that allows us to sign in, sign up, invite a friend or like a page on Facebook. I’ll describe each part of the gem and cover how it works.

The full source code can be found here.

Well, I think that I don’t need to add any comments here – we just assign email and password to our class instance.

Browser method keeps memoized Watir’s instance. Here you can specify which browser should be run – chrome, firefox etc. If you pass phantomjs there, it will be run in headless mode.

Login method logs into Facebook with credentials passed during an instance initialization.

 As you can find here, we use goto which changes the current page into passed parameter.

 The form method searched for a form with passed params – in this case, we look for a form with id: login_form.

One important thing here, if you search for an element that doesn’t exist and you run some methods on it – your script will wait for this element (by default for 30s) and everything will be blocked. The best idea before running any method is to call the exist? Method to check if specified element really exists.

Text_field element looks for an input in a selected form with passed params and finally, the set method fills this input with the passed value.

As you can guess, the click method clicks on an element.

Why am I running the sleep method to wait for 2 seconds? To wait for all elements to load – javascript and all the other assets.

Main_page? Method checks if user navigation exists. If it exists it means that we successfully logged in!

Registation_params_valid? checks if all the sign up form’s field has been filled and validates if a passed email address is valid.

Create_account method tries to sign up on Facebook. It runs registration_params_valid? to check if it’s valid. Later it goes to the Facebook’s main page and fills in the sign-up form.

This method formats a parameter and returns a valid value for radio input in the sign up form.

This method searches for a requested query but first checks if we’re logged in. If not, we log in then search for a query. I use sleep here because sometimes watir has clicked too fast and not all the elements were loaded.

This method performs an action – invites a friend, likes a page etc. We need to pass a query there and options – class name of the button, which should be click and a tab name. But remember, a first button will be clicked.

It uses the perform method, just by passing a query and clicking the right button and switching to a correct tab.

It is the same as like_page method, but now it invites a friend.

Well, so that’s all methods. You can download a source and test it by yourself. How do you do it?

Just clone the gem to your directory, run bundle install and:

And that’s all! Remember that I didn’t cover any unexpected cases here like browser popups or alerts. Every browser behaves in a different way so it’s hard to predict how yours will work.

As you can see, web scraping and simulating has no limits, you can write a code which can do almost everything; it’s up to you!

Here you can find full the documentation to researching more knowledge and examples:

I hope that you liked this article and that it might be useful to you! Happy web scraping!|||

Watir is an open source Ruby library build for automated tests, but it can be also used to build a web-scraper which simulates a human clicks.