Buildapp does not require any libraries. To compile it with SBCL you simply run . To compile with a different lisp, just specify it after the make command: . For example, you wanted to compile it under CCL you'd say By default, it is installed in ; to use another location, use .

You can also create the buildapp binary by loading the buildapp system with asdf and running .

The following creates a toy curl-like application. (It's not quite practical, because any errors will land you in the interactive debugger.)

Here's how the l1sp.org redirection service application is built:

The eval is needed to avoid problems when the image restarts.

looks like this:

Here's an example of the option, which was inspired by the desire to have a dozen different small utilities embedded in one big executable and called based on the binary name. First, the support files:

Buliding it all together looks like this:

Here is the usage output of buildapp:

Usage: buildapp --output OUTPUT-FILE [--flag1 value1 ...] Required flags: --output OUTPUT-FILE Use OUTPUT-FILE as the name of the executable to create Entry-point flags: --entry NAME Use the function identified by NAME as the executable's toplevel function. Called with SB-EXT:*POSIX-ARGV* as its only argument. If NAME has a colon, it is treated as a package separator, otherwise CL-USER is the implied package. --dispatched-entry DNAME Specify one possible entry function, depending on the name of the file that is used to start the application. The syntax of DNAME is APPLICATION-NAME/ENTRY-NAME. If the name used to start the executable matches APPLICATION-NAME, use ENTRY-NAME as the entry point. This can be used to choose one of many possible entry points by e.g. symlinking names to the application executable. If APPLICATION-NAME is empty, the specified ENTRY-NAME is used as a default if no other application names match. There may be any number of dispatched entry points, but only one default. Action flags: --load FILE Load FILE. CL:*PACKAGE* is bound to the CL-USER package before loading --load-system NAME Load an ASDF system identified by NAME --require NAME Use CL:REQUIRE to load NAME --eval CODE Use CL:EVAL to evaulate CODE. The code is read with CL:READ-FROM-STRING in the CL-USER package There may be any number of load/load-system/require/eval flags. Each is executed in command-line order before creating an executable. Load path flags: --load-path DIRECTORY When handling a --load, search DIRECTORY for files to load --asdf-path DIRECTORY When handling a --load-system, search DIRECTORY for ASDF system files to load --asdf-tree DIRECTORY When handling a --load-system, search DIRECTORY and all its subdirectories for ASDF system files to load --manifest-file FILE When handling a --load-system, read a list of ASDF system file pathnames from FILE as possible matching systems. There may be any number of load-path/asdf-path/asdf-tree/manifest-file flags. They take priority in command-line order. Other flags: --compress-core Compress the core or executable; requires configuration support in SBCL --core-only Make a core file only, not an executable --dynamic-space-size MB Pass a --dynamic-space-size option to SBCL when building; value is megabytes --help Show this usage message --logfile FILE Log compilation and load output to FILE --sbcl PATH-TO-SBCL Use PATH-TO-SBCL instead of the sbcl program found in your PATH environment variable For the latest documentation, see http://www.xach.com/lisp/buildapp/

Buildapp is limited in scope. It aims to make the following steps easy:

By design, it does not handle the following tasks:

The ASDF central registry is temporarily extended with the and arguments at load time, and reverts back to the default central registry value after that. To avoid conflicts with this behavior, changes to the central registry should be done at startup time instead of application load time.

If you have any questions or comments about buildapp, please email me, Zach Beane.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

THIS SOFTWARE IS PROVIDED BY THE AUTHOR 'AS IS' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.|||

