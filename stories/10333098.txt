But now let’s imagine that I lost my sambar recipe, I need it urgently for a party, and I can’t reach my mother (the time difference to India is horrendous). Or maybe I just want to learn my own sambar recipe.

I have this vague memory of the ingredients involved. A crumpled piece of paper lying on the floor of my kitchen has the following ingredients scrawled on it:

I know they have to be combined in some form, but how ? As a scientist, I decide to do an experiment. I decide a few different ways of making what I think is sambar from the ingredients and my hazy memories of how to combine them and in what quantity. I make a few small batches (nano-sambar!), each carefully annotated with the procedure I used, and I present them to my friends when they come.

Howls of horror ! Loud retching sounds ! the occasional grudging compliment ! By the end of the evening I have a pretty good sense of which recipes appeared to work and which ones didn’t. Some of my friends helpfully even brought along samples of their sambar for me to try.

So I try this again (I have very patient friends and they all crave sambar).

Eventually I have a pretty decent sambar recipe. For some reason I have to twirl around three times while holding the split peas and water before putting it on the stove, and the the salt has to be ladled out using a plastic spoon, but the taste is great, so who cares !

But here’s the catch. I want you to imagine my three doppelgängers, one in Tokyo, one in Aarhus, and one in Rio. I want you to imagine the three of them trying to learn to make sambar in exactly the same way with their own circle of friends. Do you really think the three of us will end up with the same recipe ? Down to the twirls ?

And that’s how a learning algorithm works. It isn’t a recipe. It’s a procedure for constructing a recipe. It’s a game of roulette on a 50 dimensional wheel that lands on a particular spot (a recipe) based completely on how it was trained, what examples it saw, and how long it took to search. In each case, the ball lands on an acceptable answer, but these answers are wildly different, and they often make very little sense to the person executing them.

Yes, we could just “look at the code”, but what we see is a mysterious alchemy in which each individual step might be comprehensible, but any “explanation” of why the code does what it does requires understanding how it evolved and what “experiences” it had along the way. And even then, you’d be hard-pressed to explain why the algorithm did what it did. If you don’t believe me, try looking at a neural network sometime.|||

The popular press is full of articles about “algorithms” and “algorithmic fairness” and “algorithms that discriminate, (or don’t)”. As a computer scientist (and one who studies algorithms to boot), I…