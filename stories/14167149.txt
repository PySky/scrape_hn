Angular has become the de facto front-end MVC framework of the Web. We had been slowly adopting Angular 1 here at Lucidchart, but the vast majority of our crucial components were built in jQuery and vanilla JavaScript. We were one of the early pioneers of Angular 2. We found Angular 2 compelling because of the improved performance over Angular 1, and the structure, consistency, and productivity that we gained was refreshing after stepping out of the jungle of jQuery. However, we have experienced a few pain points with Angular 2. We use the closure compiler for advanced minification and optimizations, and Angular 2 did not produce closure compiler compatible JavaScript. As a result, we had to fork Angular and add closure compatibility. Our bundles that use Angular 2 are also larger than the equivalent jquery bundles—although they still generally load faster. We were excited for the Angular 4 release because it addresses both of those major pain points.

We have a fairly large Angular codebase with over 400 components, modules, directives, and pipes. We also use a wide variety of the APIs provided by Angular. I always assume that after an upgrade, some things will be broken. I wasn’t wrong.

We ran into quite a few issues with our move to Angular 4. Some of them were documented in the Angular changelog and others weren’t.

This runtime bug was documented in the Angular changelog.

Passing a into the method was throwing an error. This problem was extremely easy to fix. I changed

We were relying on classes provided in the providers of a structural directive. I filed a bug with the Angular team for this one. Working around this issue was also fairly easy. I just created a dumb directive that provides the necessary classes, which can be added on the parent where needed. You can read more here.

This bug was a result of code written about a year ago in one of the early betas that relied on an implementation detail. So it isn’t surprising that it failed.

Fixing it was simply changing this for loop that found the index of a in a and then removed it:

A few of our tests were importing the function from   in order to dispatch events on elements. This function was no longer exported from that module. We already have an internal class that has an equivalent method, so I updated those instances to use that class instead.

The type imported from was given a type parameter.  Giving the class that used the differ a type parameter and then applying that same type to the differ ( ) fixed this problem.

We were previously using version 2.2.1, which means we didn’t have working component or directive inheritance. However, we did have some directives that would inherit from each other and then manually define the inputs. Something we did not expect is that having two directives on the same component—one that inherits from the other—meant that both directives would receive the inputs meant just for the base class. We did not have this problem before because inheriting inputs did not work, but when we moved to Angular 4.0 the inputs of base classes started applying. This issue manifested itself with some odd behavior.

To fix this problem, I created a small (hopefully temporary) workaround to keep the tooltip from applying its base classes inputs.

After moving to Angular 4, we started getting these warnings in a few places. Some of these warnings were caused by the directive getting placed on classes that weren’t actually injectable. Fixing these mistakes was as simple as deleting the annotation. In other places, could not resolve the dependency because we relied on its dependency being provided in a different than what was being provided. Fixing the remaining warnings will either involve adding a default provided value or refactoring where things are provided.

According to the Angular changelog, directives that extend may not compile correctly after updating.

Although we didn’t file an issue, they did break our pipe that extended .

In one of our components, we were creating the service which is exported from . The interface for changed, resulting in a compile error. The correct fix for this compile error is to inject the service instead of creating it.

The type of was updated. There are now multiple types of events that are listened to when observing events. We were only interested in the event, so we filtered out all other events.

Better type resolution is a great improvement in the TypeScript compiler. It found a few places where we had subtle mistakes in our type definitions. Can you spot the change?

Typescript’s type checking also became more strict about assigning a newly created object without a type declaration to a specific type. Fixing these instances was simple.

After upgrading to Angular 4, our largest gzipped bundle was 15% smaller. Teams that upgrade to Angular 4 that aren’t using the closure compiler might see even better results. We have a large application and had quite a few issues, but hopefully the upgrade goes more smoothly for you! If you are interested in trying out our Angular application, click here.|||

Tips for resolving issues you may encounter while moving to Angular 4.