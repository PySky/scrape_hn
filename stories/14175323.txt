In recent times, there have been a couple of tremendously popular blog posts explaining JOINs using Venn Diagrams. After all, relational algebra and SQL are set oriented theories and languages, so it only makes sense to illustrate set operations like JOINs using Venn Diagrams. Right?

Google seems to say so:

Everyone uses Venn Diagrams to explain JOINs. But that’s…

Venn Diagrams are perfect to illustrate … actual set operations! SQL knows three of them:

And they can be explained as such:

Most of you use occasionally. and are more exotic, but do come in handy every now and then.

The point here is: these set operations operate on sets of elements (tuples), which are all of the same type. As in the examples above, all elements are people with first and last names. This is also why and are more exotic, because they’re usually not very useful. is much more useful. For instance, you want to combine the set of actors with their corresponding set of films.

A is really a cartesian product (also cross product) with a filter. Here’s a nice illustration of a cartesian product:

diagrams! Let’s look at first, because all other types can be derived from :

Remember, in a cross join (in SQL also written with a comma separated table list, historically) is just taking every item on the left side, and combines it with every item on the right side. When you a table of 3 rows with a table of 4 rows, you will get 3×4=12 result rows. See, I’m using an “x” character to write the multiplication. I.e. a “cross”.

All other joins are still based on cross joins, but with additional filters, and perhaps unions. Here’s an explanation of each individual type.

In plain text, an is a in which only those combinations are retained which fulfil a given predicate. For instance:

types help where we want to retain those rows from either the side or the or both ( ) sides, for which there was no matching row where the predicate yielded true.

A in relational algebra is defined as such:

Or more verbosely in SQL:

This will produce all the authors and their books, but if an author doesn’t have any book, we still want to get the author with NULL as their only book value. So, it’s the same as writing:

But no one wants to write that much SQL, so was implemented.

s are relatively easy to understand intuitively. And they’re relatively easy to explain using Venn Diagrams. But whenever you do that, remember, that you’re making a wrong analogy. A is not strictly a set operation that can be described with Venn Diagrams. A is always a cross product with a predicate, and possibly a to add additional rows to the result.

So, if in doubt, please use diagrams rather than Venn Diagrams. They’re more accurate and visually more useful.|||

In recent times, there have been a couple of tremendously popular blog posts explaining JOINs using Venn Diagrams. After all, relational algebra and SQL are set oriented theories and languages, so it only makes sense to illustrate set operations like JOINs using Venn Diagrams. Right? Google seems to say so: Everyone uses Venn Diagrams to…