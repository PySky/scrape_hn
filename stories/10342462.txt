Scientific Luigi (SciLuigi for short) is a light-weight wrapper library around Spotify's Luigi workflow system that aims to make writing scientific workflows more fluent, flexible and modular.

Luigi is a flexile and fun-to-use library. It has turned out though that its default way of defining dependencies by hard coding them in each task's requires() function is not optimal for some type of workflows common e.g. in bioinformatics where multiple inputs and outputs, complex dependencies, and the need to quickly try different workflow connectivity in an explorative fashion is central to the way of working.

SciLuigi was designed to solve some of these problems, by providing the following "features" over vanilla Luigi:

Because of Luigi's easy-to-use API these changes have been implemented as a very thin layer on top of luigi's own API with no changes at all to the luigi core, which means that you can continue leveraging the work already being put into maintaining and further developing luigi by the team at Spotify and others.

For a brief 10 minute screencast going through the basics below, see this link

Just to give a quick feel for how a workflow definition might look like in SciLuigi, check this code example (implementation of tasks hidden here for brevity. See Usage section further below for more details):

That's it! And again, see the "usage" section just below for a more detailed description of getting to this!

Please use the issue queue for any support questions, rather than mailing the author(s) directly, as the solutions can then help others who face similar issues (we are a very small team with very limited time, so this is important).

Creating workflows in SciLuigi differs slightly from how it is done in vanilla Luigi. Very briefly, it is done in these main steps:

The first thing to do when creating a workflow, is to define a workflow task.

You do this by:

Then, you need to define some tasks that can be done in this workflow.

This is done by:

Let's define a simple task that just writes "foo" to a file named :

Then, let's create a task that replaces "foo" with "bar":

The last lines, we could have instead written using the command-line utility, available in linux, by calling it on the commandline, with the built-in method:

Now, we can use these two tasks we created, to create a simple workflow, in our workflow class, that we also created above.

We do this by:

Now, the only thing that remains, is adding a run method to the end of the script.

You can use luigi's own , or our own two methods:

The one, is handy if you don't want to run a central scheduler daemon, but just want to run the workflow as a script.

Both of the above take the same options as , so you can for example set the main class to use (our workflow task):

Now, you should be able to run the workflow as simple as:

... provided of course, that the workflow is saved in a file named myworkflow.py.

See the examples folder for more detailed examples!

The basic idea behind SciLuigi, and a preceding solution to it, was presented in workshop (e-Infra MPS 2015) talk:

See also this collection of links, to more of our reported experiences using Luigi, which lead up to the creation of SciLuigi.

Both of the limitations are due to the fact that Luigi does scheduling and execution separately (with the exception of Luigi's dynamic dependencies, but they work only for upstream tasks, not downstream tasks, which we would need).

If you run into any of these problems, you might be interested in an experimental workflow engine we develop to overcome these limitations: SciPipe.

This work is funded by:

Many ideas and inspiration for the API is taken from:|||

sciluigi - A light-weight wrapper library around Spotify's Luigi workflow system to make writing scientific workflows more fluent, flexible and modular