Express is a flexible Node.js web framework for creating web and mobile applications quickly and easily. It provides a minimal layer of features on top of the standard Node.js library.

In this tutorial you'll learn how to prepare an existing Express application for production, and how to deploy it to AWS. You'll also learn to how to configure and deploy an nginx reverse proxy.

This tutorial uses the Nanobox Express.js quickstart, however, the process will be the same for any existing Express application.

A basic knowledge of Node.js and Express, along with an existing Express application is recommended.

We also suggest you read the Express performance best practices before deploying your application.

We'll use Nanobox for deployment because it makes the process much quicker and easier. You can create an account (it's free!) and download Nanobox to get started.

Before deploying your application to AWS there are a few things that need to happen.

First, make sure your app is listening on all available IPs by updating your :

Next, you'll add a simple configuration file, then connect your database, and finally setup the nginx reverse proxy.

Nanobox uses a simple config file, the , to provision your applications environment. In the you’ll specify everything your application needs to run.

Create a at the root of your project with the following:

The is used to provision both a local development environment and your production environment.

To maintain the portability of your environment and the security of your application, it's recommended that you use environment variables (evars) when connecting to services such as a database.

First, make sure that you have any dependencies your database requires installed. Since this application is using it needs the module installed:

You can then add/update your with the following:

Create a directory at the root of your project and add the following :

Nanobox allows you to stage a production deploy on your local machine with the command.

Add a DNS alias for easy access from the browser and then do a test deploy:

This will deploy your app locally, simulating a production deploy. Once complete, you can visit your app at express.stage/.

After staging your app to verify it works, it’s ready to deploy to production. If you haven't already, create a free account with Nanobox.

Before you're able to deploy you'll need to add AWS as a hosting provider.

Once you've linked your AWS account you can launch a new app.

Once your app is created, add it as a remote (by name) and deploy to it.

When you deploy, Nanobox builds your codebase locally and sends it to the server, then it create containers for each of the app’s components (web and database), and starts your application.

That’s it! Your app is live!

One last thing you'll want to make sure you do is set your app to run in mode.

From your dashboard go to your . There add a new evar with they key and the value of .

For this change to take place you'll need to redeploy your application (there is handy link right there to do so).

Once your app is redeployed you'll be running in production.

Setting up an Express development environment (coming soon) 

 Optimizing Express in production (coming soon) 

 Managing Express in production (coming soon)

Let us know if you have any questions, or run into any issues. We love helping you get your apps running so much that we do it for free!

You can reach us at help@nanobox.io or join our Slack team and reach out.|||

This tutorial demonstrates how to prepare an existing Express application for production and the process of deploying it to AWS.