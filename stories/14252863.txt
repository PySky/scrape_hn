Bots are hot. It seems that every startup in the Valley wants a bot nowadays.

It would be silly to think that we’ve never seen this type of interface before. Turing Test and command line interface (CLI) was around for 60+ years.

Remember making payments and voting over SMS? That was easy and fun. But games are more fun.

Computer games pioneered design and, most importantly, user interest in this space. Up until it started to spill over into projects that revolved exclusively around chat, like CleverBot. We humans have been enjoying conversing with machines for a while. Today’s hype began when Facebook chose to embrace it.

There are good reasons to use one (besides appealing to the hype). In some ways, it’s easier to build tools since all we’re doing is prescribing a story, rather than creating entire GUI. If done well, bots can simplify user interaction with the system and make it more accessible and fun to use. They also have a much higher potential for integration with other software.

There are tons of libraries and tools out there to help you build one. Some are insanely complex, others are just too simple and rigid. I wanted to have a tiny thing that could get a basic conversation going yet flexible enough that it could be morphed into a powerhouse.

I love browser-side JavaScript. It’s close to the screen, I use it to make things pretty and it lets me do almost anything. It’s also simple and practical — a gateway drug to the world of programming.

But most importantly, it’s the front-end interaction engine of free, open web. WWW has changed quite a bit over the years, but believe me when I say it’s more stable and reliable than any app ecosystem out there. Rant over 😏

So, anyways I’ve built a JavaScript bot interface that works with JSON objects as conversation trees. It’s really easy to use and you can integrate it with any back-end of your choice. Or you can just mess with it and make silly bots say silly things in like five minutes. Your choice 👇

It works by taking the instructions from a JSON object and simply playing it back to the user. The object can “link” to different sections within itself or call custom functions.

I call JSON object a conversation. Each conversation consists of one or more conversation blocks which are basically bits of text that the bot spits out, closed off by reply requests — prompts for the user to instruct the bot on what to do next. Those reply requests could either direct the bot to start with the next conversation block or call a custom JavaScript function. You can make that function do whatever magic, including loading another conversation JSON.|||

It would be silly to think that we’ve never seen this type of interface before. Turing Test and command line interface (CLI) was around for 60+ years. Computer games pioneered design and, most…