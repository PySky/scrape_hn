It suggests commands as you type, based on command history.

As you type commands, you will see a completion offered after the cursor in a muted gray color. This color can be changed by setting the variable. See configuration.

If you press the key ( widget) or ( widget) with the cursor at the end of the buffer, it will accept the suggestion, replacing the contents of the command line buffer with the suggestion.

If you invoke the widget, it will partially accept the suggestion up to the point that the cursor moves to.

You may want to override the default global config variables after sourcing the plugin. Default values of these variables can be found here.

Note: If you are using Oh My Zsh, you can put this configuration in a file in the directory. See their comments on overriding internals.

Set to configure the style that the suggestion is shown with. The default is .

Set to choose the strategy for generating suggestions. There are currently two to choose from:

This plugin works by triggering custom behavior when certain zle widgets are invoked. You can add and remove widgets from these arrays to change the behavior of this plugin:

Widgets that modify the buffer and are not found in any of these arrays will fetch a new suggestion after they are invoked.

Note: A widget shouldn't belong to more than one of the above arrays.

Set to an integer value to disable autosuggestion for large buffers. The default is unset, which means that autosuggestion will be tried for any buffer size. Recommended value is 20. This can be useful when pasting large amount of text in the terminal, to avoid triggering autosuggestion for too long strings.

As of , suggestions can be fetched asynchronously using the module. To enable this behavior, set the variable (it can be set to anything).

This plugin provides a few widgets that you can use with :

For example, this would bind + to accept the current suggestion.

If you have a problem, please search through the list of issues on GitHub to see if someone else has already reported it.

Before reporting an issue, please try temporarily disabling sections of your configuration and other plugins that may be conflicting with this plugin to isolate the problem.

When reporting an issue, please include:

Edit the source files in . Run to build from those source files.

Pull requests are welcome! If you send a pull request, please:

Tests are written in ruby using the framework. They use to drive a pseudoterminal, sending simulated keystrokes and making assertions on the terminal content.

Test files live in . To run the tests, run . To run a specific test, run . You can also specify a binary to use by setting the environment variable (ex: ).

This project is licensed under MIT license. For the full text of the license, see the LICENSE file.|||

zsh-autosuggestions - Fish-like autosuggestions for zsh