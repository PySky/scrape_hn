This command line interface enables you to package your Node.js project into an executable that can be run even on devices without Node.js installed.

After installing it, run without arguments to see list of options.

The entrypoint of your project is a mandatory CLI argument. It may be:

can generate executables for several target machines at a time. You can specify a comma-separated list of targets via option. A canonical target consists of 3 elements, separated by dashes, for example or :

You may omit any element (and specify just for example). The omitted elements will be taken from current platform or system-wide Node.js installation (it's version and arch). There is also an alias , that means that all 3 elements are taken from current platform/Node.js. By default targets are for current Node.js version and arch.

During packaging process parses your sources, detects calls to , traverses the dependencies of your project and includes them into executable. In most cases you don't need to specify anything manually. However your code may have calls (so called non-literal argument to ) or use non-javascript files (for example views, css, images etc).

Such cases are not handled by . So you must specify the files - scripts and assets - manually in a config. It is recommended to use package.json's property.

Just be sure to call or to make use of and entries.

is a glob or list of globs. Files specified as will be compiled using and placed into executable without sources. They must conform JS standards of those Node.js versions you target (see Targets), i.e. be already transpiled.

is a glob or list of globs. Files specified as will be packaged into executable as raw content without modifications. Javascript files may be specified as as well. Their sources will not be stripped. It improves performance of execution of those files and simplifies debugging.

See also Detecting assets in source code and Snapshot filesystem.

Node.js application can be called with runtime options (belonging to Node.js or V8). To list them type or . You can "bake" these runtime options into packaged application. The app will always run with the options turned on. Just remove from option name.

You may specify if you create only one executable or to place executables for multiple targets.

Pass to to get a log of packaging process. If you have issues with some particular file (seems not packaged into executable), it may be useful to look through the log.

has so called "base binaries" - they are actually same executables but with some patches applied. They are used as a base for every executable creates. downloads precompiled base binaries before packaging your application. If you prefer to compile base binaries from source instead of downloading them, you may pass option to . First ensure your computer meets the requirements to compile original Node.js: BUILDING.md

Command line call to packaged app is equivalent to

During packaging process collects project files and places them into executable. It is called a snapshot. At run time the packaged application has access to snapshot filesystem where all that files reside.

Packaged files have prefix in their paths (or in Windows). If you used command line, then value will be likely at run time. will be as well. Here is the comparison table of path-related values:

Hence, in order to make use of the file collected at packaging time (make use of own JS file or serve an asset) you should take , , or as a base for your path calculations. One way is just or because they use current by default. But they are applicable to javascript files only. For assets use . Learn more about in Detecting assets in source code.

On the other hand, in order to access real file system (pick up a user's JS plugin or list user's directory) you should take or .

When encounters , it automatically packages the file specified as an asset. See Assets. Pay attention that must have two arguments and the last one must be a string literal.

This way you may even avoid creating config for your project.

Native addons ( files) use is supported, but packaging files inside the executable is not resolved yet. You have to deploy native addons used by your project to the same directory as the executable.

When a package, that contains a native module, is being installed, the native module is compiled against current system-wide node.js version. Then, when you compile your project with , pay attention to option. You should specify the same node.js version as your system-wide node.js to make compiled executable compatible with files.|||

pkg - Package your Node.js project into an executable