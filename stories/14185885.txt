React is one of the top JavaScript front-end frameworks in 2017 and is likely to gain more traction in the future. If you would like to start out and make your first steps with React you’ll quickly realize that React is easy to learn (especially if you’re already familiar with other component-oriented front-end frameworks like Angular or Vue.js). However one of the biggest obstacles you’ll be confronted with as a React beginner is the tooling and ecosystem.

Choosing from the various tooling options and packages is an overwhelming task if you’re a React beginner. In fact, trying to set up the right starter boilerplate app for React can hinder you to get going with this framework fast.

However, you can avoid this pain by choosing a premade boilerplate for your first React app. In the following tutorial we’ll use create-react-app to bootstrap our application. It’s an opinionated zero-configuration starter kit for React introduced by Facebook in 2016.

Before we’re starting out with React, let’s first install the Yarn package manager. The Yarn packages manager is build by the community to deliver an improved package management in comparison to NPM.

This command downloads the latest version of create-react-app and installs it globally on your system. Having completed the installation successfully we’re able to use create-react-app to initiate a new React project:

Next, change into the newly created folder and execute the following command to start up the development web server and open the default application in the browser:

The URL is opened in the browser automatically and you’ll see the following output:

To get started with a new framework, it’s always good to implement something and learn the basics along the way. So here you can see what we’re going to build in this tutorial:

Let’s start by adding the data model to our application. Add the following code to file App.js right after the import statements:

The todos array consists of three todo objects, each consisting of the properties todoTitle, todoResponsible, todoDescription and todoPriority.

Next, we’re adding the todos array to the state of app component. This is done by introducing a class constructor where we can set the initial component state like you can see in the following:

In React every component has an internal state. The state contains the data which is used by the component so the state contains the properties of a component. However the state is private and is fully controlled by the component.

Now that we’ve initially set the internal state of App component we’re removing the default JSX code from the return statement of the render method and insert our own JSX code to render out the list view of todos:

As you can see JSX is a direct syntax extension to JavaScript. By using JSX you can use HTML elements in your JavaScript code directly without the need of embedding your template code in a string. Furthermore you can embed JavaScript expressions in JSX by wrapping it in curly braces, e.g. . When rendering the output this expression is replaced with the value of the length property from the todos array in the internal component state.

The list of todos is generated by using an unordered list element (<ul></ul>). For each element a element is generated. To iterate over the elements the map method is used. The array function which is passed into the map method call returns the JSX code which is needed to generate the HTML output for a todo item element.

Next, let’s focus on event handling. The JSX code from the listing above contains the following code:

Here we’re attaching the handleRemoveTodo component method as an event handler to the click event of the Delete button. In addition we’re binding the event handler method to this and index. Now we’re able to access the internal component state (this.state) and the array index of the current todo array item in the handler method:

To delete the current todo element from this.state.todos we’re using the this.setState method here. In React the setState method is used to modify the internal component state. State properties can not be modified.

Next, let’s add another component to our application in file App.js. The TodoInput component should encapsulate the todo input form. Let’s start by implementing the component class, add the constructor and set the initial component state:

The initial state of the component consists of four properties: todoTitle, todoResponsible, todoDescription and todoPriority. We’ll use the TodoInput component later in App component.

Let’s add the JSX code to TodoInput component which is needed to render the HTML form. Again, we need to add a render method to the component class and embed the corresponding JSX code in the return statement:

As you can see the form consists of two text input elements, one textarea element and one select element. In HTML all input elements maintain their own state which is updated based on user input. To synchronize the values with properties from the internal component state we’re using the value attribute and assign the corresponding state property by using the expression syntax with curly braces, e.g.

The value of the form input elements is therewith set to the value of the corresponding state properties. However this synchronization is only working in one direction. Changing the input value by the user is no longer possible.

The event handler method handleInputChange is connected to the change event type of each form input element by adding the following attribute to the HTML element:

Next, we need to bind the method to this by adding the following line of code to the class constructor:

This is needed because we would like to call this.state inside of the method to set the new state based on the user input:

The handleInputChange method is implemented in a generic way, so that this event handler can be used for all four form input elements in the same way.

The submit event type of the form is connected to the handleSubmit method:

Again we need to make the this context of the class accessible inside the handler method. Therefore add the following code to the constructor:

The implementation of the handleSubmit method is straight forward. First event.preventDefault() is called to prevent the default submit behavior of an HTML form:

Calling this.props.onAddTodo(this.state) emits the onAddTodo event, so that the parent component will be notified that a new todo item is available. In the next section we’ll make use of the onAddTodo event in App component and make sure that the new todo is added to the todos array.

Having completed the implementation of TodoInput component, the last step is to include this component in App component.

Next, bind the this context of the component class by adding

to the constructor. Finally implement handleAddTodo as you can see in the following:

Getting started with React development is not as hard as you might have thought, isn’t it? By using the right tools (e.g. create-react-app) you can set up your first React project including the dev environment quickly. You do not need to spend up hours of configuration, instead you can start developing your first React application right away.|||

Learn how to get started with the React front-end framework by using the React starter kit create-react-app. Free video tutorial included.