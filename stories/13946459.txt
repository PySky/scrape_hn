Recently I’ve been blogging mostly about Angular and it’s not by accident! Angular is an amazing framework, bringing a lot of innovation to the front-end technologies, with a great community behind it. In the same time, the projects that I’m working on have various of different requirements and sometimes I need to consider different options.

Another great technology that I’ve used in the past is React. I don’t want to compare it with Angular; I’m sure there are variety of cases when one of them fits better compared to the other and visa versa. I respect the philosophy of both Angular and React, and I love seeing how they move Web forward!

This blog post is related to a fun experiment I did recently - implement Angular’s dependency injection mechanism in React. A demo which contains the fork of , could be found at my GitHub account.

With the following post I’m not implying that using Angular’s DI in React is either a good or a bad idea; this completely depends on the style of programming which works best for you. The example here is not something I use in production, and I would not recommend you to do so because it is not well tested and directly modifies React’s internals.

Finally, I’m not implying that the Angular’s dependency injection is the only approach we can apply to write well decoupled code, or even that we need the object-oriented paradigm for that. We can write high-quality code in any paradigm and any framework if we put enough effort in the design process.

This post is based on a small experiment I did during my rainy Sunday evening. The post is with learning purpose only. It can help you understand how dependency injection can be used in the development of modern user interface, end eventually, give you some insight into the React’s and Angular’s internals.

If you’re already familiar with dependency injection as a concep, and how it can be used, you can directly skip to “Element injectors”.

Dependency injection (DI) is a powerful tool which brings a lot of benefits. For instance, DI helps with following the Single Responsibility Principle (SRP), by not coupling given entity with the logic for the instantiation of its dependencies. Open/Closed Principle is another place where DI rocks! We can make given class dependant only on abstract interfaces and by configuring its injector we can pass different implementations of the abstractions.

Next, lets take a look at what the Dependency Inversion Principle states:

Although DI does not directly enforces it, it can predispose us to write code which follows the principle.

A few days ago I published a library called . It is an extraction of the Angular’s dependency injection mechanism. Thanks to the fact that comes from the Angular’s source code, it’s well tested and mature, so you can give it a try!

Now, lets see how we can use the library! But before that, lets get familiar with the core concepts behind it. In the root of the dependency injection mechanism of (and respectively Angular) is the injector. It is responsible for holding different “recipes” for instantiation of the individual dependencies. These recipes are called providers. To each provider we have an associated token. We can think of the tokens as identifiers of the individual dependencies and providers (we have 1:1 mapping, or bijection, between providers and dependencies). We ask the injector for an instance of any of the dependencies by using its token.

The following examples use but we can use the same way. Above we import and . has a factory method called which allows us to create an injector by passing a set of providers. In this case we pass providers for the classes and .

We declare the token associated with given provider by setting the value of its property. Above we instruct the injector to instantiate the individual dependencies by directly invoking their constructor. This means that, if we want to get an instance of , the injector will return . If we want to get a , the injector will peek at the parameters of its constructor and first create an instance of (or use an existing one if it’s already available). After that it can invoke the constructor of with the already existing instance of .

Finally, the decorator doesn’t do anything. It just forces TypeScript to generate metadata regarding the types of the dependencies that accepts.

Note that in order to make TypeScript generate such metadata, we need to set the property in to .

Since the syntax for configuring the injector looks a bit redundant, we can use the following definition of the providers instead:

In some cases, the dependencies that we want to declare are simply values which need to be injected. For example, if we want to inject a constant, it is not convenient as token to use the constructor of the constant. In this case we can set the token to any other value - remember - the token is nothing more than an identifier:

In the example above, we create a provider for the token. We declare that once the token is required we want the injector to return the value . Here’s an example:

There are two more details in the example above:

We can handle the first problem by using . This way our definition will be:

The instances of the class are uniques values which are used by the DI mechanism of Angular to represent tokens in cases when we cannot use a type.

For the second problem, we can require a dependency whose token is not a type by using the parameter decorator of Angular/ :

In AngularJS all the providers were stored into a flat structure. A big improvement in the dependency injection mechanism of Angular 2 and above, is that we can build a hierarchical structure of injectors. For instance, lets take a look at the image below:

We have a root injector called , which is parent of the injectors , and . is parent of and . If we require the dependency with token , for instance, from the injector , will try to find it in its set of registered providers. If it doesn’t find it there, it’ll look into . If it is not there, will look in . In case finds the dependency it will return it to which will give it back to .

Does the tree above look familiar? Well, recently most frameworks for building user interface structure it as a tree of components. This means that we can have a tree of injectors which are responsible for the instantiation of the individual components and their dependencies. Such injectors Angular calls element injectors.

Lets take a brief look at how element injectors looks like in Angular. We’re going to reuse the same model in our React implementation so lets explore a simple example:

Suppose we have a game which has two modes:

When a user plays the game in a single-player mode, we want to send some metadata to our application server through a Web Socket. However, if our user plays against another player, we want to establish a WebRTC data channel between both players in order to synchronize the game. Of course, it makes sense to send data to the application server as well. With Angular/ we can handle this with multi-providers, but for the sake of simplicity lets suppose that for multi-player we want only p2p connection.

So, we have our , which is an abstract class with a single method and an observable:

Later, this abstract class can be implemented by the classes and . Respectively, the will use the and will use the . But what about the ? can depend on . This way, depending on the context it’s used in, its associated element injector can pass the correct implementation, configured by its parent component. We can take a look at how this looks in Angular, with the following snippet in pseudo code:

In the example above we have the declaration of the , and . has a single dependency of type (we don’t need the decorator since already forces TypeScript to generate metadata). Later in we associate the class with the token of the dependency that accepts (i.e. ). Finally, in we associate with .

What will happen behind the scene is shown on the image below:

The element injectors of and will have a parent injector. For simplicity, lets suppose both have the same parent since this is not interesting for our discussion. will register a provider which will associate the token with the class. This provider, together with a provider for the component will be registered into the injector shown on the diagram as (Angular registers more providers in the element injectors but we can ignore them for simplicity). On the other hand, in the injector from the diagram we will have registration of a provider for the and a provider which associates with .

Finally, we have two injectors. One in the context of the and one in the context of . Both injectors will register the same set of providers but will have different parents. In this case, the only provider that we will have in is one for the . When we require the dependency associated with the token from the injector, first it’ll look into its set of registered providers. Since we don’t have a provider for in , it’ll ask its parent. In case the parent of is the injector (which will happen if we use the as view child of the ), we’ll get an instance of the . In case we require the dependency associated with the token from the injector which as parent has the injector, we’ll get an instance of .

Now it’s time to apply this knowledge into the context of React.

We need to implement an Inversion of Control (IoC) for the instantiation of the components in our React application. This means that an injector should be responsible for the instantiation of the individual building blocks of the user interface. The process will go as follows:

That’s it! Now lets implement it.

In order to declare the providers for given component we will use approach similar to the one used in Angular. Angular’s components declare their providers as value of the property of the object literal passed to the decorator:

We will declare a class decorator called which using the ES6 Reflect API associates the providers to the corresponding component.

The decorator can be used as follows:

The purpose of this section is to apply the points listed in the previous section with minimum amount of changes in the React’s code. Furthermore, the modifications should be as isolated as possible in order to be possible to distribute them as separate module, which allows using React with injection-js. Finally, the implementation is not complete, it ignores the case of factory components. Supporting factory components is possible but not necessary for the purpose of the post.

Internally, React wraps each component, together with a bunch of other stuff, into s. Later, it uses the individual s in order to create the specific component instances.

These two happen in the following files (we’ll explore only , ignoring other platforms):

For our purpose, we’ll make a few modifications only in the . Lets explore it!

This is fork of React 15.4.2. The code above shows all the modifications that I had to do in order to create an injector for each component, and later instantiate the component with the corresponding injector. Lets explore the snippet step by step.

First, we get reference to the component’s class. This happens by getting the value of the property . Later we register a set of providers. The default set contains the component’s class, providers for , and . The last three providers are by default passed to the constructor of each component during instantiation. Later to this set of providers we also add the providers declared with . For this purpose we use the ES6 Reflect API.

As next step we check if the element of the current component has an owner. If it doesn’t, this means that we’re at the root component and we need to create the root injector. For this purpose we use the static method of the class. In case the current element has an owner, we instantiate a child injector by invoking the of the owner’s injector.

Since we want the created injector to be available for child components, we keep it as an entry in the Reflect API.

Finally, we instantiate the component by invoking the method of the current injector with a reference to the component’s class as first argument.

Note that this code manipulates React’s internals and uses private properties, prefixed with ! I don’t recommend it for production usage because it is not well tested, doesn’t cover factory components and most likely won’t work in future releases of React.

Here’s a quick demo which illustrates how we can use DI in React with the described implementation:

There’s one important difference between how we use components with DI enabled, compared to the traditional approach - the parameters that the target component accepts are not injected positionally but instead based on the order they are declared in the constructor.

As we can see from the example above, accepts tree arguments, all of them are injected through the DI mechanism of . In contrast to the original component API, the dependencies are going to be injected with the order of their declaration.

In this experiment we saw how we can use the dependency injection mechanism of Angular in React. We explained what DI is and what benefits it brings. We also saw how we apply it in the context of the development of user interface by using element injectors.

Right after that, we went through a possible implementation of the element injectors in React by directly modifying the library’s source code.

Although the idea seems interesting, and possibly applicable in real-world applications, the example for the article is not production ready. I’d appreciate your feedback and ideas in the comments section below.|||

Recently I’ve been blogging mostly about Angular and it’s not by accident! Angular is an amazing framework, bringing a lot of innovation to the front-end technologies, with a great community behind it. In the same time, the projects that I’m working on have various of different requirements and sometimes I need to consider different options.