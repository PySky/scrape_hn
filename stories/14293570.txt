Most of you are familiar with image data, taken with ordinary cameras (these are often called “natural images” in the scientific literature), but also with specialized instruments, such as microscopes or telescopes. When working with images in Python, the most common way to display them is using the imshow function of Matplotlib, Python’s most popular plotting library.

In this tutorial, we’ll show you how to extend this function to display 3D volumetric data, which you can think of as a stack of images. Together, they describe a 3D structure. For example, magnetic resonance imaging (MRI) and computed tomography (CT) scans measure the 3D structure inside the human body; X-ray microtomography measures the 3D structure inside materials such as glass, or metal alloys; and light-sheet microscopes measure fluorescent particles inside biological tissues.

We’ll demonstrate how to download an MRI dataset and display the slices using . You’ll learn how to

Get your data with the help of the library, which provides a reader for files with the NIfTI file format. For those of you who might want to skip this step and directly start plotting, this tutorial will show you how to get the data with scikit-image. Next, you’ll take the first steps towards a fully functional slice viewer with matplotlib’s event handler API, and You’ll rewrite some of your code to make use of your new tool. Lastly, you’ll see how you can clean up your workspace after you’re done. But first, let’s go over some basics: how to display images with Matplotlib’s . You can start by enabling the interactive matplotlib mode if you’re working with Jupyter Notebook: Now you can import and display some data. You’ll load some example data that is included in the data module of the scikit-image library: import matplotlib.pyplot as plt from skimage import data astronaut = data.astronaut() ihc = data.immunohistochemistry() hubble = data.hubble_deep_field() # Initialize the subplot panels side by side fig, ax = plt.subplots(nrows=1, ncols=3) # Show an image in each subplot ax[0].imshow(astronaut) ax[0].set_title('Natural image') ax[1].imshow(ihc) ax[1].set_title('Microscopy image') ax[2].imshow(hubble) ax[2].set_title('Telescope image'); Note: When you run matplotlib in the interactive notebook mode, the open figure remains the only active figure until you disable it, using the power symbol on the top-right of the figure. Be sure you do that before moving on from each plot. These images are called 2-dimensional or 2D images because they are laid out along 2 dimensions: x and y, or, in NumPy parlance, rows and columns or r and c. Some images are 3D, in that they have an additional depth dimension (z, or planes). These include magnetic resonance imaging (MRI) and serial section transmission electron microscopy (ssTEM), in which a sample is thinly sliced, like a salami, and each of the slices is imaged separately. To view such images in matplotlib, we have to choose a slice, and display only that slice. Let’s try it out on some freely available MRI data online. We’re going to download a dataset described in Buchel and Friston, Cortical Interactions Evaluated with Structural Equation Modelling and fMRI (1997). First, we create a temporary directory in which to download the data. We must remember to delete it when we are done with our analysis! If you want to keep this dataset for later use, change to a more permanent directory location of your choice. import os # Return the tail of the path os.path.basename('http://google.com/attention.zip') And extract it from the file to our temporary directory: import zipfile # Extract the contents into the temporary directory we created earlier zipfile.ZipFile(fn).extractall(path=d) If you look at the actual contents of the file, you’ll find a bunch of ‘.hdr’ and ‘.img’ files. # List first 10 files [f.filename for f in zipfile.ZipFile(fn).filelist[:10]] These are in the NIfTI file format, and we’ll need a reader for them. Thankfully, the excellent library provides such a reader. Make sure you install it with either or , and then: Now, we can finally read our image, and use the method to get a NumPy array to view: # Read the image struct = nibabel.load(os.path.join(d, 'attention/structural/nsM00587_0002.hdr')) # Get a plain NumPy array, without all the metadata struct_arr = struct.get_data() Tip: if you want to directly continue to plotting the MRI data, execute the following lines of code:

Let’s now look at a slice in that array:

Whoa! That looks pretty squishy! That’s because the resolution along the vertical axis in many MRIs is not the same as along the horizontal axes. We can fix that by passing the parameter to the function:

But, to make things easier, we will just transpose the data and only look at the horizontal slices, which don’t need such fiddling.

Pretty! Of course, to then view another slice, or a slice along a different axis, we need another call to :

All these calls get rather tedious rather quickly. For a long time, I would view 3D volumes using tools outside Python, such as ITK-SNAP. But, as it turns out, it’s quite easy to add 3D “scrolling” capabilities to the matplotlib viewer! This lets us explore 3D data within Python, minimizing the need to switch contexts between data exploration and data analysis.

The key is to use the event handler API, which lets us define actions to perform on the plot — including changing the plot’s data! — in response to particular key presses or mouse button clicks.

In our case, let’s bind the J and K keys on the keyboard to “previous slice” and “next slice”:

Simple enough! Of course, we need to figure out how to actually implement these actions and we need to tell the figure that it should use the function to process keyboard presses! The latter is simple: we just need to use the figure canvas method :

You can find the full documentation for here, including what other kinds of events you can bind (such as mouse button clicks).

It took me just a bit of exploring to find out that returns an object, which lives “inside” the matplotlib object where all the drawing takes place, in its attribute. And this object provides a convenient method that swaps out the image data being displayed! So, all we need to do is:

Let’s try it out!

This works! Nice! But, if you try this out at home, you’ll notice that scrolling up with K also squishes the horizontal scale of the plot. Huh? (This only happens if your mouse is over the image.)

What’s happening is that adding event handlers to Matplotlib simply piles them on on top of each other. In this case, K is a built-in keyboard shortcut to change the x-axis to use a logarithmic scale. If we want to use K exclusively, we have to remove it from ’s default key maps. These live as lists in the dictionary, which is ’s repository for default system-wide settings:

where pressing any of the keys in the list (i.e. or ) will cause to be executed.

Thus, we’ll need to write a helper function to remove keys that we want to use wherever they may appear in this dictionary. (This function doesn’t yet exist in , but would probably be a welcome contribution!)

Ok, let’s rewrite our function to make use of this new tool:

Now, we should be able to view all the slices in our MRI volume without pesky interference from the default keymap!

One nice feature about this method is that it works on any matplotlib backend! So, if you try this out in the IPython terminal console, you will still get the same interaction as you did in the browser! And the same is true for a Qt or Tkinter app embedding a matplotlib plot. This simple tool therefore lets you build ever more complex applications around matplotlib’s visualization capabilities.

Let’s not forget to clean up after ourselves, and delete the temporary directory (if you made one):|||

In this Python tutorial, you'll make use of Matplotlib's event handler API to display the slices of an MRI data set.