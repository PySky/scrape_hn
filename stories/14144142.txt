{ } Animate default {{ scale , color }} Update your data to whatever you want data {{ scale . () , color . ([ , , ]), }} duration { } easing { ( div style {{ transform , background . }} { . } div )} Animate

{ } . (items, ( , ) i . () ) Transition pass an array of items to "data" data {items} use "getKey" to return a unique ID for each item getKey {( , ) index} the "update" function returns the items normal state to animate update { ({ translate , opacity , color })} the "enter" function returns the items origin state when entering enter { ({ translate , opacity , color })} the "leave" function returns the items destination state when leaving leave { ({ translate , opacity , color })} duration { } easing stagger { } you can also stagger by a percentage of the animation staggerGroup use this prop to stagger by enter/exit/update group index instead of by overall index { ( the child function is passed an array of itemStates div { . ( { ( div key { . } style {{ transform , opacity . . , color . . }} { . } { . ( . )} div ) })} div )} Transition

If you would rather use a different easing function or just build your own, you can! Simply pass a function to the prop and you're off!

Using one of our favorite tools called Springer, you can effortlessly build your own realistic spring-based easing functions, and achieve a look and feel similar that of React-Motion.

Notes: Springer does not deliver eventual and interruptible animation. For animations requiring those characteristics, we suggest using React-Motion.

Want to change the defaults for either or ?

To suggest a feature, create an issue if it does not already exist. If you would like to help develop a suggested feature follow these steps:|||

react-move - React Move - Beautifully and deterministically animate anything in React