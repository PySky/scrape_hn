My brother and I worked at McDonald's 40 years ago. It was nothing like today: high volume, fast paced, brutal hard work, low pay, and 10 other kids ready to take your job if you didn't like it.

I am now a software developer and he's in the energy business. We have both worked hard all of our lives, but we both say that McDonald's was the toughest and best job we ever had. We learned lessons there that have helped each of us many times since.

Just a few of those lessons:

1. In order to do heavy volume, you have to be set up for heavy volume.

When we hung out with our friends who worked at Burger King or Wendy's, they'd tell us about their record hours and record days (in dollars). We were amazed.  What they called records, we did every day. Our records were 4 or 5 times as much. In restaurants that appeared the same.

The difference was always that McDonald's was set up for volume. We ran five lines where they ran one. We made 12 hamburgers at a time when them made one at a time. We had food cooking before people even ordered it.

If a bus pulled in, we fed everyone in 10 minutes. They took at hour. When 6 buses pulled in, we fed them all in an hour. 6 buses never pulled into Burger King or Wendy's.  They knew they wouldn't eat.

The same thing holds true for commercial software. Want to write lots of software?  You better have everything you need in place first. People. Hardware. Environments for development, testing, and production. Source control. Frameworks. Tools. And most importantly, a mindset and the experience to do a lot of work. Anything less and you'll end up with vaporburgers.

2. If you're not prepared to serve customers before they arrive, it's already too late.

If a customer arrived and ordered a sandwich that was not already cooked or a special order, no problem. We just made it. Just as long as the grill was hot, the freezer was full, the buns were laid out, and everything else was where it needed to be. If anything wasn't, we couldn't give good service to anyone.

There's a common misconception in software development that you don't really need much software before you meet your customer; they'll tell you what they need and you'll develop it. Wrong. You better have at least half of it already written, or you'll never deliver anything in a timely manner. You may not know their exact requirements, but a form is a form, a data base is a data base, a web page is a web page, and a process is a process.  You better have all your building blocks built before your customer arrives. No one wants to wait for your grill to warm up in order to make your sandwich and no one wants to wait for you to write your framework to make their app.

3. When you're operating on the razor's edge, every detail is critical.

Saturday night from 5 to 8 was always the busiest time of the week. So Saturday from 4 to 5 pm was the most important hour of the week. Everything had to be ready and everything had to be perfect. Four large stacks of buns were positioned perfectly along the wall.  The meat freezer had 300 pounds of beef patties with the boxes already dropped to break them apart. All condiments and paper goods were fully stocked; bags were even "fanned" to be easier to grab. There were no cabinet doors or drawers because there was simply no time to open and close them when you got busy. And the kitchen had to be spotless; there would be no time for sweeping, mopping, or cleaning when you'll be running 72 sandwiches at a time for 3 hours. We knew what was coming, so we got very good at eyeballing the kitchen at 4:45 to make sure everything was perfect.

The only difference in developing and deploying software is that your "crunch time" can come anytime, not just during rush hour. And you better be ready. You better know exactly where your code is and what it does. Your data better be in order. Hard copies of source code and specs have to be handy and ready to use. But most of all, the programmer has to be ready for the "burst". That means taking care of yourself and being prepared to work something through until it's right. So get enough sleep, exercise, and clear your mind.  And don't eat at McDonald's :-)

In order to make 12 hamburgers, you'd have to:a. Put 12 bun crowns in the crown toaster.b. Put 12 meat patties on the grill.c. Sear the 12 meat patties.d. Season the 12 meat patties.e. Turn the 12 meat patties.f. Put 12 bun heals in the heal toaster.g. Remove the 12 bun crowns from the crown toaster and put them on the dressing table.h. Put ketchup on the 12 bun crowns.i. Put mustard on the 12 bun crowns.j. Put pickle slices on the 12 bun crowns.k. Move the dressed bun crowns next to the grill.l. Drain the 12 meat patties put them on the 12 bun crowns.m. Remove the 12 bun heels from the heel toaster and put them on the 12 meat patties.n. Wrap the 12 hamburgers.

One grill can hold 36 hamburgers. It takes 3 minutes to cook a hamburger patty. When I was stuck in the kitchen by myself late at night, I was able to make one set of 12 hamburgers in 5 minutes. Two of us could make 3 sets in 5 minutes by starting Set 1 at time 0, Set 2 in 1 minute and Set 3 in 2 minutes. Three of us could make 6 sets in 5 minutes by using 2 grills and helping each other with the dressing.

I have found that these multipliers work about the same for developing and deploying business software, with one, two, or three people working together as a team. Beyond that, the "kitchen" gets a little too crowded.

5. Ideally, managers can do and doers can manage.

There were about 50 tasks that needed to be done all the time in these categories:- waiting on customers- cooking- cleaning- restocking

If you had 12 people, you specialized and divided up the work. If you had 6 people, everyone did multiple jobs at the same time. If you had two or three people, each had to be able to do anything, do it very well, and do it fast. If you had one person, they were called a manager and could run the restaurant alone if they had to. Imagine how much better the enterprise world would run if its managers were as versatile as McDonald's managers.

On the other hand, some doers were high school students preparing for college and had no plans to go into McDonald's management. But they were super-doers. They knew everything that had to be done and the best ways to get it done. They naturally gravitated to the top and started directing their peers. Eventually, McDonald's gave them the title of "swing manager" (someone who did everything a manager did but didn't get paid as much). It reached the point where swing managers were better than managers at day-to-day operations.  Funny, the best technicians anywhere are often the same ones who self-manage.

6. The difference between mediocre and good is small. The difference between good and great is large.

For us super-doers. Tuesday night was the most interesting time of the week. That's when the weekly schedule was made up. There were about 60 of us high schoolers on the payroll, and you better believe that it was critical who we were scheduled to work with. About 40 were mediocre, 15 were good, and 5 of us were great.

Monday night? Not busy, no big deal, put Martin on porter and Mike G. on the counter.  It won't make much difference. Friday night, we'll be pretty busy. If you don't have either Mark or Jay on grill, you'll never keep up. Saturday night, forget it, we'll get slammed.  It's me, Jay, and Wally in the kitchen. Have Mark on standby, but whatever you do, keep Jimmy and and Fred out of our kitchen! George and Patty better be on counter that night; we won't have any time for mistakes.

You kinda get the picture. Five Jimmys couldn't keep up with one Wally, and even if they did, you wouldn't want to eat their product.

I'd like to comment on how this applies to programming, but Joel already has far better than I can in, "Hitting the High Notes": http://www.joelonsoftware.com/articles/HighNotes.html . My favorite line: "Five Antonio Salieris won't produce Mozart's Requiem. Ever. Not if they work for 100 years." What was true in music was true at McDonald's. And is still true in our software offices. Go figure.

7. Good work habits are like antibodies; once you get them, you have them for life.

There were 2 kinds of workers at McDonald's, those who got the work done properly and completely, no matter what, and everyone else. It only took about 5 minutes to tell who was who. And it never changed. Both groups were equally smart, equally capable, and equally personable. What was the critical difference? Work habits. Good workers refused to work in dirty work areas. They refused to release deficient product. They refused to put off what could be done later because they knew it would grow to twice as much work later and screw everything else up in the interim. And most of all, they hated working with those who didn't have the same good habits. Why should I get the product out hot, mop the floor, wipe the counters, stock the freezer, and prepare for closing while Jimmy has a smoke and hangs out in the back. Get him off my shift!

Years later, it's still the same. Got a critical project with a tough deadline?  Need to put out great product quickly and efficiently? Who you gonna call, the brilliant guy who sits and pontificates all night or the one who understands what it takes and won't quit until he's done. Work habits separate the good from the great and show you the way to success. Once you have that taste, it's awfully hard to become a slacker.

8. Simple data + Good systems = Fast & accurate.Don't need no stinkin' cash register.  Big Mac, fries, and a Coke: 96 cents.  Hamburger, fries, and a Coke: 59 cents.

They gave us a cash register, an order pad, and a pencil. In 7 years, I never used any of them. I handled twice as many customers as anyone else.

Typical trip to McDonald's today:- I wait to be greeted.  I am usually not greeted, so I just proceed on my own...- I order a Big Mac, fries, and a Coke.- The operator presses 3 buttons on her automatic register.- She tells me my total.- I ask, "Where's my food?"- She says, "You have to pay first." (When did this get started?)- I pay.- She gives me my change.- She hits a button to see my order.- She walks over to the counter to get the Big Mac.- There aren't any Big Macs.- She yells something to someone.- She returns to the register.- She hits a button to see my order.- She walks over to the fryer and gets my fries.- She puts a tray on the counter and puts my fries on the tray.- She hits a button to see my order.- She puts a cup of ice in the soda fountain and hits a button to automatically dispense my Coke.- She hits a button to see my order.- She goes back to pick up my Big Mac. There still aren't any.- She hits a button to see my order.- She picks up my Coke and puts a lid on it.- She goes back to pick up my Big Mac. There still aren't any.- She hits a button to see my order.- I complain that my fries are getting cold while we're waiting for my Big Mac.- She looks at me as if I was from Jupiter (and leaves my fries right where they're at on my tray).- She hits a button to see my order.- She gets my Big Mac.- I ask for ketchup.- She gives me one.- I ask for 2 more ketchups.- She give me two more.- She doesn't thank me.- She stares at the next customer.- I take one bite out of my cold Big Mac and eat one cold fries and throw it all out.- (How is it that I have to wait and the hamburger is still cold?)- I vow to never return, but a year later I forget and return anyway.- I remember all the lessons I learned at McDonald's and I'm glad I still use them.

Does my typical trip to McDonald's today remind you of anyone who develops software?|||

My brother and I worked at McDonald's 40 years ago. It was nothing like today: high volume, fast paced, brutal hard work, low pay, and 10 other kids re...