These are the in-progress versions of Sublime Text 3, and they are updated more frequently. Feel free to use them, but keep in mind you will be running less tested code, and you'll be seeing many more update notification prompts.

The current Sublime Text 3 dev build is 3131. Details on new dev build releases are posted on the forum. Sublime Text 3 dev builds are currently available to registered users only. OS X (10.7 or later is required) Windows - also available as a portable version Windows 64 bit - also available as a portable version Ubuntu 64 bit - also available as a tarball for other Linux distributions. Ubuntu 32 bit - also available as a tarball for other Linux distributions. For notification about new versions, follow sublimehq on twitter. 

 Windows: Added support for no_antialias font option when using DirectWrite Mac: Fixed gray bar on new windows when using the Adaptive theme Mac: Fixed moving windows with custom title bars between retina and non-retina screens Fixed enter not working in the side bar Added alternate theme, Adaptive, that inherits colors from the color scheme Added color scheme and theme switchers with live preview via the command palette Many additions and bug fixes to the theme engine, plus full documentation Improved font selection on all platforms, allowing selection of different weights by name Font geometry issues that prevent bold or italics are now printed in the console Windows font rendering defaults to DirectWrite unless using Consolas or Courier New OS X 10.11 and macOS 10.12+ default to using San Francisco for the UI font High DPI textures are used on Windows and Linux when the DPI scale is greater than 1.0 All API functions now accept and return device-independent-pixels Gutter icons are now sized properly on Windows and Linux high DPI screens Improved sidebar performance when folders contain many thousands of files Prevent a crash when a malformed regex is used in indentation settings OS X: the user's default shell is executed and environmental variables are set in the plugin Python environment minihtml now respects font options from the settings Significant improvements to Markdown syntax highlighting, with thanks to keith-hall Significant improvements to C# syntax highlighting, with thanks to gwenzek Significant improvements to Java syntax highlighting, with thanks to djspiewak Significant improvements to Python syntax highlighting, with thanks to FichteFoll Various bugs with the syntax highlighting engine have been resolved The subl executable on OS X and plugin_host.exe on Windows are now signed sublime_text.exe on Windows now has CompanyName set in VERSIONINFO Added Indexing Status to the Help menu to give more information about what the indexer is doing Fixed a compatibility issue with some third party syntax definitions that include Reduced the default number of worker processes used for indexing. This can be manually controlled via the setting API: on_hover() is now called with the current, rather than primary, view API: Modifications to a selection are now constrained to the valid range Significant improvements to Scala syntax highlighting, with thanks to djspiewak and gwenzek File encoding of open files is now stored in the session minihtml: Improved handling of padding and inline elements with background API: Fixed edge case when loading third party packages from unicode paths on Windows API: Updated Python 3.3 to commit 8e3b9bf917a7, and SQLite to 3.14.1 Improved Goto Definition performance when a large number of files are open Phantoms are updated when the color scheme or font size changes Significant improvements to LaTeX syntax highlighting, with thanks to randy3k Fixed an issue where clicking with the mouse would sometimes position the selection incorrectly minihtml: Added support for padding and backgrounds on inline elements, relative positioning, border-radius, rem units, child selectors and various CSS function calls (color-mod, var, rgb, rgba, hsl and hsla). Build errors are now shown inline at the location where they occurred. This is controlled with the show_errors_inline setting. Show Definitions: Now works for languages embedded in HTML (PHP, ASP, ERB etc) Show Definitions: Fixed filtering for unsaved views and on Windows Color Schemes: popupCss will be generated automatically if not present Build Systems may define a cancel command using the "cancel" key Fixed Replace not working as expected in conjunction with regex look behinds Settings now open in a new window, with the default and user settings side-by-side Hovering over a symbol will show a popup indicating where it's defined. This is controlled with the show_definitions setting. Syntax: Added clear_scopes directive, to give more control over the generated scopes Fixed build systems being unable to use file_patterns with the exec command minihtml: Fixed a stack overflow on Windows with too many unclosed tags API: Added functions to get/set the minimap, status bar, tabs and menu Fixed a crash that could occur with an invalid result_file_regex settings Some snippets have have been moved into a sub-directories, so custom overrides and key bindings that reference them will need to be updated API: Changes to how plugins are loaded. This should be transparent, but resolves a number of corner cases New C++ syntax definition with improved accuracy and performance HTML: Pressing enter when between a tag pair will increase indentation API: Windows is now up-to-date with the other platforms, using Python 3.3.6 and having the sqlite3 and bz2 modules Fixed a scenario where changes to files weren't being picked up Improved handling of punctuation in the spell checker Package Development: Expanded the set of regexes the new regex engine is able to handle API: Updated to Python 3.3.6, and now includes the _ssl module on Linux, plus sqlite3 and bz2 on all platforms Fixed a theme related regression in 3106 that could cause the tabs to disappear Fixed a regression in 3106 that caused file icons to disappear Themes may now be switched on the fly without artifacts Syntax Definitions: Fixed some cases where pop matches with back references weren't working correctly Fixed a performance issue with the JavaScript syntax highlighting changes Various other syntax highlighting improvements to the shipped Packages Fixed some Unicode handling issues in Goto Anything Fixed a 3096 regression in regular expressions when using escapes Fixed a 3096 regression in regular expressions when using the character class Added fallback for themes without the Panel Switcher button File change detection better handles failures in the underlying API Sublime Text is more proactive about polling for file changes, rather than waiting for file system change notifications Windows: Updated code signing certificate to no longer use SHA1 Added "Profile Events" to the Command Palette, to help identify slow plugins Incorporates further changes to the provided packages Fixed Copy and Paste not working with some Unicode strings Fixed Goto Definition command not working when placed in a submenu Spell Checker: Now reads from manually edited user preferences on the fly OSX: Fixed Emoji & Symbols popup failing to insert text in some cases Windows: Added support for inserting characters from outside of the BMP Improved Unicode support, including combining character rendering, character classification in regex searches, and case insensitivity in Goto Anything matching Updates to many packages, with more substantial changes to D, Go and SQL Stability improvements for Find in Files when using regular expressions that result in significant backtracking Better handling of troublesome files during indexing Syntax: Improvements to the Syntax Tests build system, including a new variant for measuring performance Syntax: .sublime-syntax files with unused captures no longer cause spellcheck errors Windows: is no longer bound by default, due to compatibility issues with some keyboard layouts Incorporates further changes to the provided packages Fixed a regression in 3093 where the Go and Makefile syntax definitions were missing Incorporates further changes to the provided packages Packages are now on GitHub Incorporates several community provided improvements to the above packages, with significant improvements to HTML, CSS and JavaScript Fixed an infinite loop that occurred when loading some .sublime-syntax files Improved handling of third party packages that try to replace the default HTML syntax definition Fixed an issue with nested with_prototype statements in .sublime-syntax files Fixed a regression in 3090 where .tmLanguage files with missing includes weren't loaded .sublime-syntax files may now include .tmLanguage ones, using "scope:source.foo" to refer to them Fixed some inconsistencies in Goto Anything when selecting symbols Syntax: .sublime-syntax files can now specify just the basename of an included file, to enable overriding Syntax: .tmLanguage files may now include .sublime-syntax ones Syntax: Fixed scope names not being applied correctly when pushing multiple contexts Syntax: .sublime-syntax files may now push a list of anonymous contexts Syntax: Anonymous contexts may now be used within blocks Fixed a code folding and indent guide regression in 3085 when indenting with tabs Improved the behavior of on multi line regexs Sublime Text now includes a custom regex engine that matches multiple regexps in parallel, for faster file loading and indexing .sublime-syntax files can now define variables, to help write repetitive patterns Added support for testing syntax definitions in either format (details at above link) Build Systems may now define a list of file name wildcard patterns to trigger on, via the key and related commands now accept an argument Fixed tab completion regression in 3081, where h1..h6 HTML completions were not triggering Improved handling of index corruption: index will be automatically recreated Improved handling of index corruption: Sublime Text will no longer perform repetitive indexing in this scenario Added setting to control the number of threads used for file indexing Tab completion no longer completes numbers. Edit/Show Completions can still be used for this Python: Tweaked property snippet to not be so intrusive Fixed a regression in 3075 that caused the default preferences to be marked as unsaved See also the Forum Thread Build Systems: Build systems can now be explicitly selected again Build Systems: Renamed "keyfile" to "keyfiles", now accepting a list of files that can trigger the build system (e.g., ) Improved change detection for files that disappear and reappear, as happens with disconnected network drives Windows: Added workaround for broken in MSVC 2012, fixing a crash in Updated to a never version of leveldb, fixing constant low level CPU usage if the index becomes corrupted Fixed a crash that could occur in directory scanning when directories are being rapidly deleted and recreated Transient sheets (e.g., as created by Goto Anything when previewing files) are no longer added to the Recently Closed list Windows: Added more descriptive errors when the Update Installer fails to rename a folder See also the Forum Thread Build Systems: Variants can now be selected directly when pressing Primary+B (See this discussion for more information) Posix: Fixed new files not respecting the umask permission flags OSX: Workaround for an OS issue with zero size windows and OpenGL views Windows: Fixed access denied errors that could occur when saving with disabled setting is now hidden, and defaults to false. Note that this change will have no effect if the setting is left at its default value of true See also the Forum Thread Build System choices are remembered, so the user will be prompted to choose a build system less often See also the Forum Thread Changelog is now in HTML Reworked how Build Systems are selected (More Information) Fixed Redo sometimes restoring the selection to the incorrect location Command Palette now remembers the last entered string Fixed tabset background being set to the wrong color on startup if different colored tabs are used minihtml: Added support for <img> tags, in conjunction with file://, res:// and data: URLs See also the Forum Thread Properly improved behavior of Goto Definition when using multiple panes Fixed a bug with scrolling tabs, where a 1 pixel line would occasionally appear underneath them minihtml: Fixed units not being assigned correctly when using shorthand notation Windows: Popup windows are now able to receive scroll wheel input API: Fixed a crash caused by passing an empty string into View.show_popup() Fixed Minimap refusing to draw on very large windows Tweaked handling of syntax definitions and unused captures, resolving an issue with spell checking in Markdown links. Improved behavior of Goto Definition when using multiple panes Fixed tmLanguages files with the hidden flag set appearing in the Command Palette OSX: Added work around for performActionForItemAtIndex: taking an excessively long time in Yosemite. This affected any commands that had a corresponding menu item. API: Window.show_quick_panel() will now scroll to the selected item when shown Fixed a crash regression in 3068 when typing in a transient sheet Added spelling_selector setting, to control what text is checked for misspellings Misspelled words can now be added to the dictionary, in addition to being ignored Fixed Ignored Words not persisting after exiting Improved URL detection in Open URL context menu item (thanks iamntz and facelessuser) Fixed sidebar icons sometimes being invisible on startup Right clicking on a URL will show an 'Open URL' menu item OSX: subl command line tool no longer uses Distributed Objects, resolving some intermittent failures .tmLanguage files may contain a <hidden> element, to indicate they shouldn't be displayed to the user Fixed a crash that occurred when dragging rows scrolled out of view in the side bar Fixed not being able to click on the selected row of the auto complete popup Fixed a typo in the "Save Workspace As" dialog Improved handling of build systems that generate lots of output Build Systems may now declare a "keyfile" (e.g., 'Makefile' for the Make build system) to better auto detect which build system to use When opening a project with a build system, that build system is now selected by default New windows now always use the automatic build system, rather than the build system of the last used window Goto Anything supports :line:col syntax in addition to :line Selected group is now stored in the session Posix: Using correct permissions for newly created files and folders Fixed a lockup when transitioning from a blinking to a solid caret Added index_exclude_patterns setting to control which files get indexed Added settings caret_extra_top, caret_extra_bottom and caret_extra_width to control the caret size Added settings show_encoding and show_line_endings to control what gets shown on the status bar Fixed Find in Files not selecting the correct line for already opened files Encoding and line endings are displayed in the status bar Find in Files will no longer block when FIFOs are encountered Auto complete now works as expected in macros Vintage: A block caret is now used Ctrl+Tab ordering is stored in the session When the last file is closed, a new transient file is created automatically API: Calling Settings.add_on_change() from within a settings change callback won't cause the added callback to be run Changed tab close behavior: the neighboring tab is now always selected Linux: Fixed incorrect handling of double clicks in the Find panel Windows: Fixed hidden attribute regression in 3048 when atomic_save is disabled API: Plugins may now call Settings.clear_on_change() within a callback from Settings.add_on_change() Automatically closing windows when the last tab is dragged out Posix: Fixes new files being created with unexpected permissions Windows: SSE support is no longer required for 32 bit builds API: Supporting a distinction between Python modules and packages, to ensure relative imports work as expected Improved handling of Python sub-package importing, fixing the delete from side bar regression Deleted files are marked as dirty again Fixed a regression when overriding the color scheme in syntax specific settings Linux and OSX: atomic_save is adaptively disabled when it's not possible to preserve file permissions API: Fixed settings objects getting invalidated too early with cloned views API: Plugins in zip files are able to be overridden via files on disk Fixed a crash on exit that could occur when hot_exit is disabled Windows: DirectWrite support uses the old path when drawing from a the text buffer API: Added support for the termios module on Linux and OS X. Linux: Added support for High DPI, controlled by the GTK Text Scaling Factor OSX: Fixed context menus not working when the application is in the background HTML tag auto completion is better behaved in script tags Pressing right in the Goto Anything overlay will open the selected file without closing the overlay Find panel has a drop down arrow to select previous items API: Added is_valid() method to view and window, to determine if the handle has been invalidated Telemetry is enabled by default for dev builds Improved HTML completions when typing outside of tags Windows: Fixed auto updates not installing when the application is installed to a drive other than C Windows: Fixed an 'Open in Sublime Text' regression introduced in 3024 API: on_text_command and on_window command are now called when the menu is used Semi-transient sheets are no longer shown in the OPEN FILES section of the side bar Symlinks are followed by default in folders added to the side bar "Remove all Folders from Project" now prompts to confirm Deleting a file via the side bar will first close the corresponding view, if any Update window will display properly even if the theme doesn't have rules for it Windows: New style Open Folder dialogs are used on Vista and later New auto update system for Windows and OS X Added telemetry. Telemetry is currently disabled by default, but will be enabled by default in future dev builds. It can be explicitly controlled with the enable_telemetry setting API: view.command_history(0, True) now returns the last modifying command, as expected API: view.substr(point) now has the same semantics as S2 for out of bounds addresses CSS: Completions will not be offered when typing in selectors Fixed crash that could occur when dragging a tab associated with a file that needs to be reloaded HTML: Close Tag now works with script and style elements HTML: Tags are closed when </ is entered. This is controlled by the auto_close_tags setting Find and Replace panels automatically resize when multi line strings are entered Fixed files being created with the hidden attriute on Windows XP when atomic_save is enabled Linux: Using the correct version number for the deb files OSX: Jump Back is now bound to control+hypen OSX: Improved handling of line numbers sent via apple events API: view.add_regions() will accept package relative paths for the icon API: view.window() will now work even if the view isn't frontmost OSX: Added experimental support for line numbers in the ODB protocol|||

