I’m very excited to announce that today I’m open-sourcing a tool I’ve been working on for several months at Google. It’s called Bloaty McBloatface, and it lets you explore what’s taking up space in your , , , and executable binary files.

For the TL;DR, here are a couple examples of what Bloaty output looks like.

Or to break down by compile unit / source file:

Many more examples and more explanation is available in the README on GitHub.

Bloaty is available under the Apache 2 license. All of the code is available on GitHub: github.com/google/bloaty. It is quick and easy to build, though it does require a somewhat recent compiler since it uses C++11 extensively. Bloaty primarily supports ELF files (Linux, BSD, etc) but there is some support for Mach-O files on OS X too. I’m interested in expanding Bloaty’s capabilities to more platforms if there is interest!

We’ve been using Bloaty a lot on the Protocol Buffers team at Google to evaluate the binary size impacts of our changes. If a change causes a size increase, where did it come from? What sections/symbols grew, and why? Bloaty has a diff mode for understanding changes in binary size:

Bloaty gives a high-level overview (sections) by default, but command-line switches can help you dig into the details by slicing and dicing the different dimensions (segments, sections, symbols, compile units, and even inlines).

You can use these slicing and dicing capabilities even if overall binary size isn’t your primary concern. One thing I like doing with Bloaty is seeing what section my variables ended up in. If you have a global variable that shows up in but you know it doesn’t actually need to be writable, slap on the variable and watch it move from to .

Before I wrote Bloaty I would use scripts that parse the output of to look for big symbols. I would also look at the output of and use to look at the size of the file on disk. It always bothered me that these different sources of information always seemed to disagree. The totals never matched up. (There are reasons for this, of course, but those tools didn’t help my understand what those reasons were.)

To counter this, part of my goal with Bloaty was to create measurements that are accurate, reliable, and verifiable. To do this, Bloaty builds a memory map of the entire file, both in the VM domain and the file domain. The row in the file domain will always exactly match the file’s actual size. If you ask to measure symbols, Bloaty will track how much of the file and virtual memory space were not covered by any symbol, and report those parts as . If any part of the binary is referred to by more than one symbol, Bloaty will notice and only count the first one. That way the totals are always correct and you can trust the results.

Bloaty also transparently reports the sizes of various overheads like ELF/AR headers that are otherwise hard to see.

One of the key ideas behind Bloaty is the dual VM/file view of binary size. When we talk about binary size, there are two distinct but related concerns:

Both of these matter, but they are affected by different things. Debug symbols do make the binary larger, but they don’t take up any memory at runtime because they don’t get loaded. And zero-initialized global variables take up RAM at runtime but no space in the binary, because we know they are just zero. Since Bloaty shows both views, you can take a huge binary full of debug symbols and see just the runtime memory costs. ( can do the same thing, but the results are more vague and harder to interpret).

I love working on Bloaty, but unfortunately I don’t have the time to implement everything I want to add. If this sort of things sounds up your alley, I would love to get some pull requests!

Working on Bloaty has taught me a ton about how linkers, loaders, compilers, and debuggers work. I know more about ELF now than most people. If learning about the bottom of the stack appeals to you, I highly recommend this project as a way to learn more.

Here are some of the things I’d love to see added to Bloaty:

If you’re interested in working on Bloaty, please read the CONTRIBUTING file for more info!

I got a lot of help from coworkers at Google. Thanks to Paul Pluzhnikov and David Blaikie who answered a lot of my questions about the ELF/DWARF formats. Thanks to my teammate Gerben Stavenga for giving it some solid use and offering helpful feedback. Thanks to Vincent Vanhoucke for the suggestion of the name (a fun twist on Boaty McBoatface). Thanks especially to Google and the Open Source team who make it possible to release things like this as open-source. It is one of the great perks of working here!|||

I’m very excited to announce that today I’m open-sourcing atool I’ve been working on for several months at Google.It’s called Bloaty McBloatface, and it lets...