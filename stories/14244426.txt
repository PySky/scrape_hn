Once we have decided to stabilize a feature, we need to have a PR that actually makes that stabilization happen. These kinds of PRs are a great way to get involved in Rust, as they take you on a little tour through the source code. Here is a general guide to how to stabilize a feature – every feature is different, of course, so some features may require steps beyond what this guide talks about.

IMPORTANT: Before we stabilize any feature, note that we also have a rule that it should appear in the documentation. This is often overlooked. =) How to do this is the last section of this guide.

There is a central listing of feature-gates in . Search for the macro. In there, you should find an entry for the feature you are aiming to stabilize, something like (this example is taken from rust-lang/rust#32409:

You want to move this line down to the area for “accepted” features, declared below in a separate call to . So when you’re done it should look like:

Note that we will change the version number to be the version number of the stable release where this feature will appear. This can be found by consulting http://rusty-dash.com/, which will tell you the next stable release number. You want to add 1 to that, because the code that lands today will become go into beta on that date, and then become stable after that. So, at the time of this writing, the next stable release (what is currently beta, iow) was 1.16.0, hence I wrote 1.17.0 above.

Next you will want to search for the feature string (in this case, ) in the codebase to find where it appears. You can change uses of from the stdlib and rustc crates to be . This includes the feature-gate only for stage0, which is built using the current beta (this is needed because the feature is still unstable in the current beta).

Similarly, you can remove those strings from any tests. If there are tests specifically targeting the feature-gate (i.e., testing that the feature-gate is required to use the feature, but nothing else), you can simply remove the test.

Most importantly, you want to remove the code which flags an error if the feature-gate is not present (since the feature is now considered stable). If the feature can be detected because it employs some new syntax, then a common place for that code to be is in the same . For example, you might see code like this:

This macro prints an error if the feature is not enabled. It is not needed now that is stable.

For more subtle features, you may find code like this:

This field (obviously named after the feature) would ordinarily be false if the feature flag is not present, and true if it is. So you can transform the code to assume that the field is true. In this case, that would mean removing the and leaving just the .

If any documentation for this feature exists, it should be in the , located at . Regardless of its existence, the page for the feature gate should be removed.

If there was documentation there, integrating it into the existing documentation is needed.

If there wasn’t documentation there, it needs to be added.

Places that may need updated documentation:|||

A systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety.