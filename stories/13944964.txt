In our research we came across this article: http://searchsoftwarequality.techtarget.com/guides/Quality-metrics-A-guide-to-measuring-software-quality

How did we come across this? It was a top ten organic result from searching "Agile Metrics" in Google.

During this research, we have found lots of differing viewpoints: the interesting, the naive, and the simple. In most cases they have their heart in the right place. Typically they start with the primacy of Velocity and add some other ticket tracking metrics to present a 'complete' picture for agile teams. This is generally the simple or naive.

What prompted a blog in the above link was the following:

This is the dangerous category. And it stuns us that there is that little of valuable information that an article with this clause can make the top 10.

The only methodology that suggests that pre-production defect tracking has any value is the lean start-up world, typically referring to your pre-release phase trying to find product-market fit. Sure, if you don't know what product you are building or what people will pay you for, there is no real need to fix bugs as well there might never be a point of fixing them. Even in this case, it should be argued that at least tracking your defects in the case you hit a rich vein of interest you know what you need to fix.

As soon as you are out of pre-launch phase, the notion that defect tracking prior to production is risible. This is the same one that suggests that your customers should find your bugs for you, or as Mark Zuckerberg claimed: Move Fast and Break Things. Of course, Zuckerberg himself a few years ago recanted that strategy and now puts product stability first.

Indeed, any seasoned engineer will tell you the earlier you find bugs, the cheaper they are to fix. And this has been empirically proven.

And it might be true that Software Teams might like not have bugs raised on the work they have done (it's human nature to avoid being told you made a mistake), it is only a short term happiness. Buggy production code is a sure way to kill growth and ultimately the company you work for.

This is from a post on Agile Metrics. Metrics at worst can provide an insight into a team's performance, at best can provide specific actions to help improve a team's performance and be in a position to ship more. Raising up that defect tracking might not be necessary as a part of your Agile Metrics undermines the whole point of capturing metrics.

In reality, the only way to truly know the cost of defects and how much that they really affect software development is to have rich metrics and data around them. By catagorically discarding them by erroneously claiming that Agile does not require bug tracking can only lead in disaster.

It speaks to a lot of work that still needs to be done to improve Agile Metrics for software development.

If you enjoyed this article and would like to read more of our publications, consider subscribing to our weekly news feed email.|||

Suggesting not to track bugs is both wrong and dangerous