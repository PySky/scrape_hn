This is a toy example that uses a genetic algorithm to find an expression that evaluates to a given number. For example, if the target is , an example solution would be

Note that there are infinitely many solutions to each instance of this problem. However, we just care about finding one at this point (as opposed to the shortest non trivial solution).

The original idea is from the excellent tutorial on genetic algorithms found on AI Junkie.

In the current expression evaluation scheme, while the operators have correct relative precedence, the associativity for equal precedence operators is right-to-left (as opposed to left-to-right, which is how most programming languages have it). So, the expression is evaluated as and not as . Sometimes, the algorithm comes up with "cheat solutions", e.g., when you ask for an expression that evaluates to , it reports the "expression" as . If that happens, just retry :)|||

exprolution - Evolving expressions using genetic algorithms