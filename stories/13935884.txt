In this tutorial I’ll be showing you how to create a very Twitter Clone using React and Firebase. MobX will be used as the data store for Firebase data. Here’s what the final output is going to look like:

In order to not bog us down in Firebase setup, this tutorial will assume that you already have an existing Firebase project created in the Firebase Console. If not, go ahead and create one. Once you have a project, go to the database section and under the rules tab add the following:

This sets read and write permissions of your database to public. This means you don’t need to authenticate later on in order to gain access the database. This is good for quickly getting started with something, but not for production apps. Be sure to change this later!

Clone the create-react-app-mobx project. This allows you to easily create a React Project which has already the MobX toolset built into it (the original create-react-app doesn’t support all MobX features yet).

Next, open your file and add the following:

Here’s a breakdown of what each package does:

Execute to install all the packages. Once that’s done, you can run to serve the project for development. You can access on your browser to view the project.

Before moving on, delete everything inside the folder of the project. By default it contains a demo project that uses MobX to implement a counter app. We don’t really need those so you can go ahead and delete them.

Create an file. This is where you supply your Firebase database URL and render the main app component which you’ll be creating later:

Next, create an file. This is where you import the component we’ll build that serves as the component that the user will interact with, and the store which contains the code for connecting, and saving/reading data from Firebase.

Now we’ll create the file. At the very top, import all the libraries and components that you need. You’ll see how each of these will be used later so we won’t cover what each one does here.

Next, create the Tweetlist component. Initialize the state as well as the functions inside the .

The method uses the method from the store. You’ll be creating this later, for now know that everytime someone makes a change to your Firebase database, the component gets re-rendered. If the Firebase data becomes available, the textarea for entering the tweet and the list of tweets gets rendered.

Here’s the function for rendering each tweet:

The function for updating the state of the current tweet text and remaining count:

The function for saving the tweet in Firebase:

Next, you need to define the and function. The naming is relevant because the Firebase-nest library rely on these two functions. returns the array of subscriptions while performs the subscription and returns the function for unsubscribing from the Firebase data.

Finally, you use the function to subscribe and observe to Firebase data. This function uses the and functions that you defined earlier in order to subscribe to Firebase data and propagate the changes in the store. It will then return the function that requires a Reactive component to be passed in. We can turn our component into a Reactive one by wrapping it in MobX’s function. This ensures that any data that is used for rendering the component forces a re-rendering when it’s updated. If you don’t set your component as an observer, it won’t re-render when the current user or someone else posts a new tweet.

We shall now create out Mobx store. Create a file. This serves as the store for the component. It contains the methods for saving and fetching data from Firebase.

Start by importing and . is the official Firebase JavaScript library for working with Firebase. This allows you to connect to Firebase. The library provides a bridge between the Firebase library and the MobX library. It allows you to subscribe to Firebase data through the use of subscriptions. This makes the data flow into MobX’s observable maps.

Define the property in which the array of tweets are stored:

Here’s what it looks like in the Firebase console:

Create the store. Inside the , connect to Firebase and create the store. accepts a reference to a Firebase database as its argument. Right below that, call to make the store available inside the class via .

as you’ve known earlier, returns an array of subscriptions. In this case you only want to subscribe to a single subkey ( ) and you want its data to be returned as a list ( ). Basically, it’s used to specify the subkey in your Firebase database that you want to subscribe to.

uses Firebase’s method to push the object into the array. This creates a new item in the array in Firebase which then triggers the subscriber to update the list of tweets for all the connected clients.

is used for customizing the query used for fetching Firebase data. Here, the results are ordered according to their and only the 10 most recent tweets are being fetched. That said, Firebase still returns the records in ascending order that’s why you had to call on the component earlier to reverse the ordering.

Open the file and add the following inside the :

This uses picnic.css to add some default styling to make the project look good.

Next, create a file and add the following:

That’s it! In this tutorial you’ve learned how to use MobX to act as a data store for your Firebase data. As you have seen, using Firebase with MobX doesn’t completely change the way you interact with Firebase so you can still use your existing knowledge of the Firebase API. You can check out the code used in this tutorial in this Github repo.|||

How to use Mobx with Firebase