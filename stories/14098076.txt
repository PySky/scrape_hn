I don't have the usual programmer's education. I studied maths, and then dropped out of that, and am mostly self-taught. So, there are some parts of programming I always saw wearily, thinking to myself that I really should go to school to learn them. One remarkable such area is parsing and implementing languages.

Well... sure, school is always a good idea, but this is not that hard. In this article I will explain how to go from nothing to a functioning, extensible language, using Python and PyParsing. If you are as scared of grammars, parsers and all that jazz as I used to be, come along, it's pretty simple,

What is a grammar? It's what defines what is and what is not valid in our language, and it's the hardest part to get right, mostly because it's all about making decisions.

First decision: language name. I will call this language Least Optimized Language Ever, or LOLE

I will describe the language informally, then show you how to describe that grammar formally using PyParsing.

PyParsing is "constructive", you start creating small blocks, then combine those blocks into larger things.

Some things in LOLE will have names. For example, variables, or functions. So, we need to define what a name is. Most languages allow you to use identifiers that start with a letter, and then use letters or numbers. Let's go even simpler: identifiers are words. Just letters.

is a PyParsing object that means "these characters". is a constant that means "letters". So: "some letters".

You can actually try this in an interactive interpreter:

takes a string, and tries to parse it as an identifier. So, is an identifier, and we get the match. Nice!

What happens if we try something that doesn't match?

Surprise! You get an error. It's a pretty awful error, but it basically says "I was expecting a thing made of letters (ABCD...) and I did not get it".

Because error messages are important let's make that better already. There's always time to develop bad habits later.

Now it says it was expecting an identifier, and it did not get one. So it's more clear. Let's try one last thing:

You may say "hey, there are two identifiers there, and it only found one!" and you are right. That's because we are parsing identifier not identifierS. We told it to understand as an identifier, and it did just that. By default PyParsing will ignore anything left in the input after it found what it's looking for. If you want to make sure the whole input parses correctly, then you have to say so:

And yes, that is a valid error. We asked to know if is an identifier. It's not, because to be one it would have to end after because identifiers can't have spaces, and it does not.

Let's move to something more challenging....

LOLE has literals for two types: strings and numbers. They are the usual thing, except that strings are python style, either single or double quoted, and support escaping quotes inside them.

I could now explain how to define numbers in terms of literals and combinations of symbols and numbers and so on. And strings as a list of characters surrounded by quotes. But I am going to tell you something much more important: learn your library.

is provided by PyParsing to define "strings as usual". And defines "numbers as usual" so we don't have to do it. Because most languages need this, so having to do it each time is dumb.

We are also using there. That means "one or the other". So 'literal' will successfully parse things that are strings and also things that are numbers.

And of course, if you parse something else, it will fail:

Like the error says, it was expecting either a string quoted with single or double quotes, or one of a few kinds of numbers.

So, now that we have identifiers and values, we can make this more like a real language and implement ...

So, an assignment is (for now):

And this is how it looks in PyParsing:

So far, we only support programs that do one thing and then end. That is not very useful. So let's define what a program is: "A list of statements separated with semicolons". So far, the only kind of statement we have is assignment, so it will look like this:

As usual, PyParsing does the heavy lifting for us: see what does.

And now we can parse slightly more interesting things:

Let's stop defining grammar now for a little bit (we will come back to it) and think about how to use this thing we are creating.

So we now have the world's most useless language, that only supports syntax for assigning values to variables. How do we make it do that?

Well, we need to take the output of and process it, doing what our "program" says we should do. That's an interpreter.

So, how do we "run" ? For starters, I don't really like it. There are two statements there but we have six elements and no clear boundary between one statement and another. To fix that, we can change assignment:

Unsurprisingly, what does is group things, so we now have each statement as its own separate thing.

So, we could "run" this program like this:

And hey, that means this is an interpreter already. Not a very good one, tho!

Now, how about this LOLE program?

As we have defined the language so far, that's illegal, because on the right side of the equal sign LOLE requires a literal, which is either a string or a number. What we really want on the right side is more general: an expression. An expression is something that eventually resolves to a value. So, variable names are expressions, function calls (when we have them) will be expressions, and things like would be expressions if we implemented them.

So, let's introduce expressions, which are either literals, or identifiers (so far):

So, a LOLE expression in an assignment can currently be three kinds of things:

What happens if we run this through ?

That is not really right, is it? We would want to be set to . The problem is that we are not calculating the value of expressions, but just passing them along. We need :

This solves that problem of "resolving" variables, and also that of extraneous quotes in our string literals. And then we need to use it in run_program, too:

Let's make LOLE slightly more interesting by adding functions. Since creating grammars is mostly a matter of making decisions, let's make a couple.

While keyword arguments look a lot like assignments, they are not the same thing, so we define them separately.

This shows we have a number of problems in how we process our code.

How can we distinguish (a function call) from (an assignment)? Clearly the output of parsing a function call is not distinctive enough. We can improve this by using a PyParsing feature called .

What do is process the result of parsing and allow you to use the knowledge of what you are parsing to do The Right Thing (TM).

Do we really want args to contain the parenthesis? I say no. While they are useful for defining the syntax, we really don't need them at all, so we can use to make our parser's output cleaner:

And since calling functions produces a value, it's a type of expression. And since we can just want to run a function and not care about what it returns, it's also a type of statement. Let's put all our grammar in one place:

The only new things are related to . Since its definition needs to know about , and is defined using we have a bit of a chicken-egg problem. The solution is to use , so we say "hey, there is a thing called , I will explain later".

Then, when actually defining it uses so the definition is applied to the placeholder.

Since we added function calls ... how do we execute those functions? By improving our of course. So far, we treated every statement as an assignment, but now it can be either an assignment or a .

Also, our knew how to evaluate literals and variables, but not function calls, so that will need some tweaking also.

Sure, it got a little more complicated, but basically, all it does is add a special case for when the is a and handle that case by calling the named function with the given arguments. Since arguments are expressions themselves, we need to recursively call to get their value.

And now we need to do something similar with run_program:

Again, while iterating over the statements, we check if the statement is a function call, in which case we evaluate it, or if it's an assignment, in which case we evaluate the right side and assign that value to the variable named on the left side.

This shows how extending the language works. If we add a new type of in the grammar, we add a new branch to . If we add a new type of in the grammar, we add a branch to . That is all there is to it. To prove it, let's add a more complex structure.

What kind of language doesn't support an statement? Well this one, until now. So let's add it. It could look like this:

The brackets around mean that part is optional, since not all ifs need an clause. The conditionally executed parts are a list of statements surrounded by braces, C-style.

Again, we have to use , now for since contains which uses but is also a . Also, some calls to so errors are nice and tidy, and use the element we had not seen before.

Just like with function calls, we end up with just a bunch of things in a list, which means when we want to execute it it will be annoying. We can improve it in exactly the same way via :

And, since we added a new kind of statement, we need to handle it in :

And there you go, we now have an extensible language that can call arbitrary Python functions! And here is the full listing:

To make sure you actually understood this, the best way is to continue this work yourself. LOLE will stay forever unfinished so you can make it do interesting things while you learn by doing. Here are a few questions for you to explore in no particular order:|||

Tutorial: Creating a small language using PyParsing