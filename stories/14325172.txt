I recently began using a new(ish) feature of Elixir that completely transformed the way I build programs. I'm talking about the special form . It can feel unfamiliar at first, but it is extremely powerful and flexible. This article will explain how works and how it can be used to make your code more robust to errors. First, though, let's look at the problem is trying to solve.

The Elixir community has borrowed an idiom from the Erlang community called tagged tuples. Using this approach, our functions will return a tuple where the first value is an atom describing the "type" of the result. A common pattern is returning for a successful response and for an error response.

This is nice for a few reasons. First, it allows us to treat errors as values. We know that our function will always return even when provided semantically invalid data. Second, we can use pattern matching to act explicitly on both the success and failure case.

This patterns starts to break down when we want to perform multiple, dependent actions that can all fail. Suppose, for example, that we'd like to divide two numbers and, if successful, divide the result by a third number.

This works, sure, but it's becoming challenging to read. You can easily imagine the mess this becomes with an arbitrarily long list of dependent operations.

What should we do? We want to continue using this pattern because it is safe and explicit but it feels ugly and unreadable with real-world examples. The answer, of course, is to use .

The special form allows you to define a set of operations to perform and associated patterns to match their results against. Each operation can use bindings from the pattern match of the previous operations. If any of the matches fail, the entire form stops and that non-matching result is returned. Let's explore by rewriting the above example using .

Let's walk through the execution. First, we call . The result is . The form checks to see if this matches the pattern on the lefthand side of . It does, so the variable is bound to and execution continues. On the second line, we run (because is now bound to ). This returns . We check if it matches the pattern on the lefthand side of its . It does, so is bound to . There are no more operations to perform, so the body of the block is executed. This block can use any of the bindings from the operations above. It uses to return the string .

Now, let's try walking through an error case.

First, we call . The result is . We check to see if this matches the patter on the left of . It doesn't! As soon as this mismatch occurs, the form immediately stops executing further operations and returns the result that did not match. Therefore, the return value of the form is .

We're already in a better spot by using but we can go even further. The form allows us to describe an clause that handles any non-matching values rather than simply returning them. Let's add one.

Now, when the first operation returns and it doesn't match the pattern, the value is passed to the block. Next, we check each clause of the block in order (in this example there is only one clause). The first clause matches , so the string is bound to . Finally, the body of that clause is executed with the bindings from the match. It returns the string .

The form allows even more flexibility, including guard clauses in each of the operations. For more examples see the docs.|||

