Algebraic types… seems like the kind of math-y word Haskell programmers would use. But in reality you don’t need to know type theory or have a PhD in mathematics to understand them. Algebraic types arent new types. They are simply a new way of thinking about the types you already know about.

There are many different algebraic types - in fact - all of the types you currently use are algebraic as well. Here, we’ll two basic algebraic types

So let’s start with the familiar stuff.

Product types are nothing more that Swift types, or Java types. 

 They are called product types because the number of possible values they can have is the product of the number of possible values of their constituent parts

So a type can have 2 possible values. has 2 types. We can get the number of possible values of by multiplying the number of possible values of with the number of possible values of . So the number of possible values of is which is

This is evident with all the possible instances of the type:

Let’s look at another example:

Now our type has the number of possible values which is a multiple of and . has possible values, has possible values. So our has possible values.

In general, without going into type theory notation, we can define a function which for a given type - returns the number of possible values that type has. So:

The conclusion that has certain implications in the way we think about types, but those can be omitted for the current article without compromising the general message

If we use the function - we can express a general case for all product types.

Let’s assume there exists type which has constituent parts . can be considered a product type if:

Or in a more proper notation:

If you’re, by any chance, unfamiliar with enum syntax - there is a quick and dirty intro at the bottom of the article.

So if -s were product types - then what are sum types? 

 Simple - Sum types (in swift) are enums!

Number of possible values of a sum type is the sum of the number of possible values of it’s constituent parts

Now that we know how to deal with the algebraic view of types, and have our function handy - let’s explore the world of sum types with examples.

Let’s see all the different ways we can instantiate the enum.

There are ways to instantiate the enum. This number comes from the fact that and that contains two types and that

Now what is the number of possible values of ? It’s the sum of possible values of and . So

Let’s assume there exists a type with constituent parts . can be considered a sum type if:

or in a more proper notation:

All this theoretical stuff is fine and dandy - but let’s see a little bit of practical examples.

So in general you want to follow the mantra: 

 The number of possible values of your type should be equal to the number of possible values of your use case.

So what does this mean?

Let’s assume you’re making a REST call and you’re getting back some as a result. A bad way to write this would be:

Why is this a bad option? Because our use case has two possible values:

And our implementation has four possible values:

We have to think about the semantics of this approach. We are actually counting only on two cases the and . What does it mean when both result and error are ? Or when they’re both not .

The problem is - we’re using a product type where we should be using a sum type. The solution?

We’ve created a sum type called and we’re using it to distinguish between two possibilities. Our use case matches our implementation and all is good.

You might not have known that Swift has an inbuilt sum type that we use almost all of the time - Optional.

The optionals we know and love (or sometimes hate) are implemented inside of the Swift language as an

so a wold just be shorthand syntax for .

Good thing is that swift has some neat syntax sugar to help us out on our distinguishing of sum types - the and constructs.

is equivalent to this:

Some things in your apps have a finite number of possibilities and are ultra easy to express as sum types. Like for example API endpoint router.

Your router could use this pattern to expose everything from parameters, headers, request types, etc…

And now a theme patten if you need themes:

Implementing trees and linked lists using sumt types in swift is ultra easy

Swift enums can be written like this:

But can be also written like this:|||

