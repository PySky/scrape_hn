Datamodel for the startup ecosystem graph we’ll build with data from Mattermark.

Many web services are converting their publicly facing APIs from REST to GraphQL. Companies like GitHub and Shopify have been leading this transition to GraphQL. In this post we take a look at how we can query the new Mattermark GraphQL API using Apollo Client, storing the results in Neo4j to then see to see what we can learn about a local startup ecosystem.

When I heard about Mattermark’s new GraphQL API I had an excuse to go diving into the data around this. Being from Montana, and having worked for several Montana startups (I’m currently in exile in the Bay Area - more on that later) I’m very curious about what is going on in the Montana startup ecosystem. Specifically I wanted to know:

What are the companies in Montana that are raising venture capital? Who are the founders? Who is funding them and what industries are they in?

I’ve been aware of Mattermark for a while but never really dug into their platform or APIs, but when I heard that they were releasing a beta GraphQL API I knew I had to dig in further. I knew that once I had the data in Neo4j I could do some interesting graph analysis with Cypher. A graph database plus GraphQL!? Sounds like a great way to spend a few hours playing around.

First, let’s take care of all the dependencies we’ll need.

Mattermark collects information about companies - things like company overviews, funding information, key employees, growth signals, etc. They then apply machine learning techniques to do things like develop indicators about which companies are growing faster than others (for example) and provide this information to help investors make better investment decisions (and for anyone else who wants to use the data). They have an API, and recently announced a beta GraphQL API. To follow along you’ll need an API key, which you can get by creating an account at mattermark.com.

Despite what the name may imply, GraphQL is not a query language for graph databases. Instead it is a query language for APIs. GraphQL is an alternative to REST that allows developers to describe all data and the queries available in the API in a single schema. Client can then query for subsets of this data, defining exactly the data they would like returned in their GraphQL query. As graphql.org says:

So what does it have to do with graphs? GraphQL makes the observation that all application data is a graph (think of orders that contain products - that’s a graph!). Regardless of how it is actually stored (in a relational database, document database, etc) intuitively, application data is a graph since application data is all about objects and how they are connected. GraphQL then allows developers to express their data as a graph and query for the data they want out of this graph from the client.

Let’s take a look at a simple example using the Mattermark GraphQL API:

The data returned matches the structure we’ve specified in our query. Nothing more, nothing less.

In our script we’ll use the library to parse our GraphQL query strings.

Apollo Client is a client for GraphQL. It does lots of smart things like query caching, handling subscriptions, and query prefetching to optimize performance. It integrates with React, Angular, Next.js and others. We can also use Apollo Client in a vanilla javscript script, which is how we’ll use it today.

Apollo-client is typically used in modern web browsers and makes use of fetch, which does not exist nativiely in node. But we can use a polyfill module that adds a global for our simple node script:

Then import fetch to expose it as a global:

We can instantiate an ApolloClient instance by passing in a NetworkInterface object to the ApolloClient constructor. The NetworkInterface object contains the uri of the GraphQL API we’ll be using. We’ll also need to set the Authorization header in all our GraphQL requests to include our Mattermark API token.

Neo4j is a graph database. If you’re not familiar with Neo4j, check out some of the other posts on this site or head over to the Neo4j developer page.

As we’ve seen previously with what Crunchbase has done with the “Business Graph” we can gain insights by modeling this type of data as a graph.

We’ll need to download and install Neo4j to store the data we fetch from the Mattermark GraphQL API, or we can spin up a blank Neo4j Sandbox instance here in a few seconds, which is what I’m going to do.

Spin up a blank Neo4j Sandbox instance, note username, password, ip address, and bolt port. Don’t worry, I changed my passsword ;-)

We’ll use the Neo4j JavaScript driver to connect to Neo4j from our script. We’ll use the credentials above to instantiate a driver instance like this:

We’ll be using the new beta Mattermark GraphQL API to query for information about startups, their employees,and funding rounds. Like all GraphQL APIs, the Mattermark API exposes a single endpoint to which we post our GraphQL queries. Documentation for the API (including the GraphQL schema and example queries) is available here

One thing I found intersting about the Mattermark GraphQL API is that it exposes a filtering language for specifying a query of the Mattermark dataset. A MSFL query is a JSON object that expresses the predicates for the query. For example this MSFL query (taken from the docs):

is a query to find all series A companies with 10 or more employees. The API then exposes MSFL through a GraphQL query that has a return type of , a type defined in the GraphQL schema specific to a MSFL response. I thought this was an interesting way of exposing a domain specific query language through GraphQL, which I hadn’t seen previously.

The first query we want to run is “What are all the companies in Montana that have raised venture capital”. We can write this query in MSFL:

Then the object becomes a variable that we can pass into a GraphQL query to retrieve company information for companies that meet this predicate:

Once we retrieve a result from this query we want to write the company name and id to Neo4j, which we do with this Cypher query:

We’re now ready to use to query the Mattermark GraphQL API and write the results to Neo4j:

Note that we collect the of each company into an array, . This is because the previous GraphQL query only gives us summary information for each company. But we also want to know about funding rounds, business models, and industries. So we’ll need to issue another GraphQL query for more detailed company information:

Then for each detailed company information result from the GraphQL query, we’ll write that information to Neo4j with this Cypher query, passing in the root object as a parameter:

We define a function to issue the GraphQL query using and write the results to Neo4j using the above Cypher query. With that we can use to iterate over the array of ids that we collected:

Now that we have our data in Neo4j we can use Cypher and the Neo4j Browser to analyze the data we’ve imported.

We can examine the full graph:

That’s great but let’s use Cypher to answer some specific questions:

What investors have participated in more than one Funding Round?

What companies have raised the most money?

We can use the spoon-neo4j Neo4j Browser extension to add charts. Just install spoon-neo4j and run the same query again:

What cities in Montana have the most startup funding?

Again, we can use spoon-neo4j to visualize this with a chart:

It is also interesting to explore what the most common industries

First we update the graph:

Then we can query:

This is interesting as it shows us what industries are common across cities. With the force directed layout of the graph visualization in Neo4j Browser we can see clusters of Industry nodes that are shared across combinations of cities, and what Industry nodes are found only in single cities. For example, we can see that Bozeman has social networking and marketing analytics startups, while Missoula has media and publishing startups - industries that are not common for statups in other Montana cities.

All code is on GitHub here.|||

