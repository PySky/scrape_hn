Frame is a set of Domain Specific Languages (DSLs) that take a new approach to the many challenges inherent to traditional approaches to software modeling.

Over the past 30 years the software industry has built numerous visualization tools for architects, engineers, animators and many other professions. However most software developers work today much as they did right after the demise of the punchcard - typing one line of code at a time. While the industry has dramatically evolved how software is created - objects - functional programming - countless frameworks - these developments have not succeeded in changing this status quo.

The Frame point of view is that none of these approaches address the fundamental disconnect between how we think about what software does and the structure (or lack of) of how it does it. These advancements have not made the act of software creation feel more natural to its creators or intelligible to its non-technical participants. Instead, software development remains a black art and an often unmanageable process.

To address this challenge, Frame takes the industry standard approaches to software architecture "the final mile" and successfully bridges the gap from "software modeling" to "working code".

Frame makes this leap by working on three levels at once:

The Frame Machine Modeling Language (MML) is a direct descendant of UML statechart notation. Software architects and engineers used to designing systems with UML statecharts will feel right at home with Frame's visual notation.

Where Frame breaks new ground, however, is in the creation of the Frame Machine Specification Language (MSL). The MSL is a textual language that is a superset of the visual MML and able to express all the concepts that the visual language can - and much more. In fact, the MSL is an integral part of the visual modeling language and takes Frame's capabilities beyond the limited confines of UML.

Finally, and most importantly, Frame defines implementation patterns for object-oriented languages for both the MML and MSL languages. This means there is no ambiguity in the models created with Frame and how they can be implemented. This guarantee gives all parties involved confidence that the models mean something real.

The Frame machine languages and target language mechanisms permit all parties involved in creating software systems to work together in new and powerful ways. Lets explore how Frame improves the activities of each of the typical participants in a software development project.

Team vision is often lead by creating narratives about users and what their experience of the system will be like. The process of defining this vision is handled by one or more Product Designers who are focused on crafting this user journey.

Product Designers can better understand the relationship of their work to the larger system development effort when their artifacts are placed in context by Frame models. This major process improvement allows teams to iterate much more effectively using Design Driven Development with Software Architects responsible for distilling requirements from Product Designers into Frame models.

On most development teams, software architecture is not a distinct activity that is easy to separate from the act of writing code. Frame permits a true separation of these activities. Software Architects are tasked to clearly define the key intellectual property of a system as defined by the change in behavior over time of its essential entities.

Using Frame with other UI and software design tools and techniques, Software Architects can develop master specifications that meet stated system requirements and vet them with business and technical stakeholders before coding begins.

Software Engineers benefit from Frame models by having the core functionality of the system defined in a very precise manner. Software Architects work with Software Engineers to implement Frame models in a manner that is appropriate to the type of software being created.

Desktop applications and mobile apps are very different in their use of Frame from server web apps or communication protocols. Software engineers figure out how to instantiate and drive Frame components to perform their essential management functions.

Frame allows Project Managers to better map customer requirements to technical specifications, do resource planning and design schedules. Frame models serve as a "blueprint" of the key intellectual property to be developed by the team. This blueprint can be used to derive the tasks, stories and epics that must be accomplished for the project.

Progress in delivery of these deliverables can be directly managed from the Frame documentation using many popular project management tools.

Frame models provide the map of contexts that define the important structure of a system. By driving the system through each context and exercising the events that are both permitted and not permitted in each context, quality assurance teams can thoroughly validate system behavior.

In Agile methodology, Product Owners are the customers and define the overall purpose of the project project and its goals. They should also help define the definition of done for features.

In the planning stages for a project, Frame enables teams to effectively and accurately model the system to be built - before feature coding starts. This enables teams to present a plan to a Product Owner that has a much higher degree of specification and is much easier to estimate in terms of cost and when it will be completed.

Frame also helps both teams and product owners stay aligned on the often slippery question as to what level of completion the system is currently at. By modeling the major entities using Frame notation, the team can demonstrate to product owners what the system is expected to do, how it interacts with UI or other systems, and what paths of interaction are designed, coded and tested.

Product owners ultimately are interested in the ROI of a system. Frame keeps all parties engaged with development progress in ways that are not possible using traditional methods of Agile development. This visibility ultimately reduces surprises (and therefore iterations) resulting in superior ROI.

The best way to get started with Frame is to read the Frame Machine Language Specification online book - published free of charge - and associated articles that are located here on this site. From there, the next steps for the community are to begin to experiment with these concepts and share the insights, questions and new ideas through this site and other social media.

Frame is just now being introduced to the world - this is simply the beginning. These ideas must now be tried out in a wide array of new environments and situations and feedback needs to be gathered, understood and distilled into new features and capabilities. To facilitate this process, this site will evolve over time to become a full-fledged community center for Frame enthusiasts. Your participation in the next steps in Frame's evolution is both welcome and greatly encouraged.

Thank you for your interest, consideration and support!|||

