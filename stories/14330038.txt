Much ink and pixels have been spent discussing the virtues and flaws of Hypermedia for API design. Like with REST, the sheer amount of theory and jargon around the subject can make it hard to understand the potential benefits for you as an API developer, the cost of implementation and the consequences it would have on the way you build, and interact with REST APIs.

In this article I’ll show the outlines of what a Hypermedia API looks like, and how a generic Ruby client for such APIs can be designed following these patterns.

Our definition of Hypermedia will be this: Hypermedia for API design means adding links to your API responses.

By link, I mean a link as you already know it from HTML documents:

So at the very least, a link is an address or pointer to a separate resource somewhere in the network.

But, in our definition, this will also constitute a link:

So not just an address, but also the minimum information needed to instruct the client on how it should interact with the referenced resources. In the example above, a HTML form tells the client —the browser— that it must send a PUT request, and also defines a schema for the data expected by the server.

In other words, links or forms encapsulate actions that the client may take over resources, or ways in which it can change the state of a resource. These, in a nutshell, are the ideas behind , and they have been derived from the way the World Wide Web works as we know it and interact with every day.

So how does any of this apply to REST APIs?

Let’s imagine a simple shopping cart API that shows us information about an order.

Now let’s say that you can place an open order by issuing a request against a resource, something like

The server updates the state of the order and returns a new representation:

Nothing new here. This is how most of us build REST/JSON APIs.

How do you know that you can place an open order? You’d check the relevant documentation, which would include information on the URL to use, the required request method, available parameters, etc.

If you wanted to use this API in Ruby, you’d grab any number of available HTTP client libraries and end up with something like this:

After a while, manually concatenating URL paths gets tedious and error-prone, so as an API client author you’ll probably come up with something slightly more domain-specific:

This is what many Ruby API client libraries look like.

Now let’s re-implement the same example using a Hypermedia approach. State transitions —actions— can be encoded as links in the API responses themselves.

I’m using an extension of the HAL specification to encode a “place_order” link, including its request method and target URL.

For one, this makes the order resource a little bit more informative to humans: not only does it tell you about the current state of an order, but what you can do with it.

As an API client implementor, you can leverage this simple convention and write a generic client that learns what actions are available from the API itself. This is particularly easy to do in Ruby.

Let’s start from the top. First thing is to implement a class that wraps any API resource and exposes its attributes and links. I’m calling it Entity.

is the JSON data (a Hash) for the resource itself. for now is anything that supports the basic HTTP operations ( , , , , etc). It can be an instance of Faraday or anything, really.

We then use the and combo to delegate data access to any properties available in the resource data.

With this, we can access regular properties.

What about links? We can delegate those to a class that’ll handle making the relevant HTTP request and returning the response.

We instantiate a passing the link data and the HTTP client instance, and then we run it with any optional arguments.

This allows us to run those links like any regular method call. For example placing an order:

The link wrapper class delegates the actual HTTP request handling to the underlying HTTP client.

We initialize it with the link data and the HTTP client.

The method uses the HTTP client to issue the appropriate HTTP request and wraps the response in a new .

Because a sends optional parameters to the relevant endpoint, we can pass any data expected by the API. For example:

The presence or absence of links in a resource is meaningful information. For example, an “open” order may include a link, but an order that has already been placed shouldn’t let the client place it again.

We can add some syntax sugar to our class to better interrogate resources for their supported links.

So client code can decide what to do based not so much on the data in a resource, but on its capabilities.

This pattern has the side-effect of encouraging you to keep the business logic on the server side. The client app is driven by the API’s capabilities, presented dynamically to the client along with every resource.

For example, instead of hardcoding conditional logic to decide whether of not to show a button to place an order (based on the current state of the order, possibly), a client application can blindly render the relevant UI elements if the expected links are present in the current resource.

A client written in this way can be kept pretty generic. New endpoints available in the API don’t need client implementors to release new versions of the client library. As long as the API presents a new link, the client can follow it. The release cycles of API and client are thus disentangled.

The API root is the entry point into a Hypermedia-enabled API, and the only URL a client needs to know about. Much as a website’s homepage, the root resource will most likely include a list of links to the main operations supported by your API.

We only need to wrap up our and classes into a client that we can initialize with a root URL.

Once on the root resource, a client can just follow available links by name. The actual URLs they point to may of may not be on the same host. As long as the responses conform to the same conventions, the client —and the users of your SDKs— don’t need to care.

As an API designer, I’ve found that this approach encourages me to not only think of individual endpoints but of entire workflows through the service. How do you start and place an order? How do you upload an image? By adding the right links in the right places I can help make it easier for my customers to accomplish particular tasks.

These workflows can form the core of the API’s documentation, too, by documenting the sequence of links to be run for each use case instead of just singular endpoints.

A nice workflow to implement in this way is paginating over resources that represent lists of things.

In this convention, a list resource will have an array of orders. If there are more pages available, the resource can include a link.

We can extend to implement the interface for list resources.

The client can now ask the entity whether it can be paginated.

We can take this one step further and implement an Enumerator that will consume the entire data set in a memory-efficient way.

We can now treat potentially thousands of orders in a paginated API as a simple array.

Even if your API doesn’t include links, a generic Ruby client like the one described here can be used to describe endpoints in your service with little extra work.

New releases of such a client could consist of just a YAML file with the entire API definition.|||

How Ruby and Hypermedia can simplify the way we write API clients.