For a long time I've been struggling with REST API conventions. REST was -and is- a difficult concept which has been poorly understood for a long time. Nowadays there are lots of excellent style guides. Below I've gathered some guidelines and best practices from various sources.

In all guidelines I've assumed the REST service returns JSON because it is the most common format these days. Most guidelines should work for other formats (XML in particular) as well.

The following list contains the more relevant REST-service HTTP status codes. A common mistake is to return a 200 OK when something went wrong. REST services ought to utilize what HTTP has on offer. 200 OK: when a request was processed successfully, for example when a partial update succeeded.

Write JSON in camelCase, never snake_case. JSON is most likely consumed by front-end JavaScript and JSON originated from JavaScript; stick to the JavaScript convention. Send as much data as possible about a resource instance, even if the consumer is unlikely to consume it all. Only hide data properties that are security sensitive or used internally only (for example, a surrogate key). Avoid unnecessary data envelopes. The client knows he is requisting a user when the url is , wrapping it like is meaningless. Forget about UNIX timestamps, use ISO8601 timestamps without exception in your service protocol. UNIX timestamps do not support timezones nor milliseconds. Every resource instance in a service response must contain a href attribute containing its location. The developer consuming your service should get accustomed to these href attributes as much as possible so he feels comfortable using them to link to other resources. Prefer linking resources to embedding resources unless the linked resource is almost always required while fetching the main resource. This is context-dependent. For example, a GET might return the following: When accessing the address is fairly uncommon this response works well for service consumers; the client has sufficient details to retrieve the address if it needs to. However, if in say 80% of requests the consumer also requests the user's address you can lower the number of network requests by embedding the resource within the GET /users/bob response body. When a resource is available under under two different urls (a scenario common when embedding resources) consider using partial result queries instead (e.g. GET /users/bob?fields=firstName,lastLame. Having two different urls for the same resource may improperly invalidate a HTTP cache causing two different representations of the same resource to exist at the same time. Be descriptive in error messages and include a code that can be interpreted by a machine. This is useful for machine interpretation, and internationalization in particular.

(*) Most JSON/REST API style guides stress you should put in the effort to make understandable error response messages. I tend to disagree; a custom error code has sufficed in many applications for decades, why not for JSON/REST services? This avoids the issue of system error message internationalization and you need proper JSON/REST API documentation anyway because JSON/REST lacks a schema definition. Without documentation any service constraints will be a matter of development trial & error (which makes for an unhappy programmer).

Some sources I've bookmarked about these subjects:|||

My blog