You’ve got an app with runaway memory use, what do you do hotshot? What do you do? If you’ve exausted the usual suspects it might be time to take drastic steps. It might be time to take a production heap dump. I previously wrote about doing this on Heroku, but since then we’ve launched Heroku exec, a way to SSH into a live running Dyno to allow you to debug. Now that you can do that, you don’t need an AWS account or any fancy gems to generate a heap dump, just activate this feature and add the gem to your app. Let’s do this to an app together.

First we need to set up the app with Heroku Exec. Check the Heroku Exec docs as these steps may change in the future. We’re going to start by installing the plugin:

This will add a free addon to your app to allow you connect to your Dynos. But to be able to use it, you have to deploy. You can do this by running

Once your app is done deploying you can SSH into a running Dyno by executing

Before we can take a heap dump, we’ll need to tell your app to start tracing object allocations. Get out of your session if you haven’t already.

Add the gem to your :

Then run locally. Next, you’ll want to tell your app to start tracing allocations. If you’re using a forked webserver like Unicorn or Puma, you can enable this in an block or similar.

If you’re using Puma, add this code to your file:

Here we’re telling any worker processes to trace where objects were created at. This is not “free” and will cause the Dyno to run slightly slower, because of this we want to limit to running this code in just one Dyno .

You’ll want to commit this and deploy it. Once you’ve done that you can now ssh into your Dyno and generate the Heap dump.

First we’ll need to figure out the PID of your worker processes.

We’re looking at two Ruby processes in our Dyno. The first has a PID of 29 and a parent PID of 3. The second has a PID of 51 and a parent PID of 29. This means that 51’s parent is also a Ruby process. Puma uses a master process to hand off requests to child or “worker” processes. We want to run our heap dump against our “child process” which is .

We can generate the heap dump using with this command:

This will generate a heap dump in the file .

We can now download this file to our local machines. Exit the sessions. The file continues to live on the Dyno because the Dyno has not restarted yet. You can now run this command:

This will download the file and put it in your local directory with the name .

We can now use debugging tools on this dump file. Such as the gem that I wrote and maintain.

You can dig into a generation using

Here we can see the three locations that allocated the most memory.

I’ll admit that I’ve never successfully found an application level memory problem from a heap dump, but I know some have. If you’re out of other options, it’s another thing you can try. The exciting thing about is that you’re not limited to heap dumps, you now have access to all system level debugging tools for live running processes. For instance you could install or via the Heroku APT buildpack to debug in a way you never could before. Keep in mind that if you’re running on a regular Dyno it’s in a container and on a shared system with other applications so thing like to get memory use won’t be entirely accurate. If you need more accuracy from system level commands, consider our performance-m and performance-l Dynos which take up an entire VPS.

I’m excited for the power and flexibility that brings to Heroku.|||

You’ve got an app with runaway memory use, what do you do hotshot? What do you do? If you’ve exausted the usual suspects it might be time to take drastic ste...