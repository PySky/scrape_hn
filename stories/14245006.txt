For those who are never heard about this project: GoReplay allows you to record and replay your production traffic to development environments — one of the simplest and safest way to test your app using real traffic before you put it into production.

https://goreplay.org/

https://github.com/buger/goreplay

Hard to believe that GoReplay turned FOUR years a few days ago, which for an open-source project is a huge milestone! Over 7000 stars on Github, dozens of contributors and thousands of users. Thank you, everyone, who made it happen, and it proves that good product and persistence always wins.

I’m happy to announce much anticipated new release of GoReplay: 0.16

 I would like to highlight main changes here, but full changelog available on GitHub releases page.

First of all, I would like to thank everyone involved in the community, and especially, it would not be possible without this people @smostovoy @exklamationmark @manjeshnilange @kudos @oivoodoo @sattvik @ylegat @nrwiersma @SophisticaSean

Until this point middleware, while being incredibly powerful, was not used too much, because of the high entrance barrier. To address this issue, I’m introducing brand new NodeJS middleware framework. This framework provides clear ways for dealing with HTTP payloads (reading and writing), hides protocol implementation details, and makes natural dealing with async nature of the protocol.

It is published as npm module, so you just need run `npm install goreplay_middleware` to start using it. Below is a few basic examples, showing how simple it is:

Just returning message object is enough to send it back to GoReplay. Omit return, if you want to filter request.

If you want to get access to original and replayed responses, do not forget adding and options.

Notice how we map request, response, and replay using request ID.

There is a lot of cases when original traffic can be directly replayed to another environment, because of dynamic variables like authentication tokens, or CSRF protection. In this middleware, we remember mappings between original and replayed values and based on this mappings rewrite following requests.

Using `searchResponses` you can search values in both original and replayed response. Basically, it is just shortcut for example in previous section and simply does regexp match of response HTTP payloads, and returns first matches in callbacks.

I indeed plan to release middleware frameworks for the Golang in the near future, and maybe other languages, but the main idea was to simplify Middleware creation and bring it to masses. No doubt, easy of use, dynamic nature, speed, and native asynchronous support in NodeJS was a no-brainer for me.

While HTTP/1.1 is quite simple protocol, sometimes it is not that obvious when it comes to processing its data. For example if server uses Gzip compression or Chunked encoding, it becomes troublesome to debug captured data, or use it in middleware. To address this issue, I’ve added new option, which automatically decodes Gzip and Chunked encodings, and handles all the HTTP headers and pitfalls, so you get the clean human-readable, and still valid HTTP payload which you can write to the file or read in middleware.

On big traffic amounts, file storage becomes a bottleneck, and it make sense to upload this recording to the cloud storage. While it is quite “easy” to upload data to the cloud, it becomes non-trivial if you want to replay this data using GoReplay.

GoReplay PRO add support for replaying data directly from and uploading recorded data to S3 as well.

For reading from S3 you should use , example: .

For writing to S3 you should use , example: .

Both input and output will behave the same, as it works with ordinary files, like file patterns and automatically creating chunks.

Note: this is feature available only to GoReplay PRO customers.

This is one of the great features added by Community, and allow you to use Apache Kafka to stream data from and to GoReplay. It is straightforward to use, similar to the rest of plugins:

By default it will write data as raw HTTP payloads. Optionally you can turn on and which will format HTTP payloads to a nice looking structured json, but be aware of possible performance hits.

There is way more not mentioned changes and fixed, which you can read in the changelog. To me personally, it is one of the greatest looking GoReplay releases so far, and looks like a natural evolution of the main ideas, bringing you restful sleep and time with your love ones, instead of debugging the bugs on the weekends or middle of the night.

Feel free to ask questions here, by email, or in my twitter and subscribe to product announcement newsletter|||

For those who are never heard about this project: GoReplay allows you to record and replay your production traffic to development environments — one of the simplest and safest way to test your app…