Last time we used Maybe to encapsulate an optional value, performing operations on it while remaining ignorant of the actual presence of that value. Now we turn to the famous Monad, starting with an example that illustrates it’s purpose.

What happens you give a function that returns a Maybe too?

…You end up with two layers of context. Monads solves this problem with a method called . collapses two layers of context into one.

Because this pattern is very common in functional programming, Monads also have a method that combines and .

Let’s see how the Maybe monad works:

Haskell uses the IO monad to perform side effects in purely functional way. It uses to sequence side effecting operations. In the case of IO, the monad’s value is always a function. IO delays the impure action by capturing it in a function wrapper.

IO can be implemented as follows:|||

Last time we used Maybe to encapsulate an optional value, performing operations on it while remaining ignorant of the actual presence of that value. Now we turn to the famous Monad, starting with an example that illustrates it's purpose....