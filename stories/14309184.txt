As I work to improve Notebook.ai, I’m always on the lookout for new ways to crunch data and provide smarter analytics and writing services to writers.

While hunting through Kaggle the other day for any interesting data to crunch, I stumbled upon something interesting: a complete corpus of 364 Kanye West verses over 243 songs. After poking around with it for a while, I decided to take things one step further than the traditional Markov chain generation game: I wanted to generate dynamic poetry in Kanye’s style, bound by an arbitrary rhyme scheme.

So I did it. Here’s how.

You can download the complete data set I used from Kaggle. I fed it into my existing Markov model-generating service, Retort, using the following Ruby script. You can write your own Markov library or use any existing one, but I launched Retort last year to cut that out of the process after doing one-off projects like this so often.

As you’ll see in the script, I specified a few “identity” parameters (medium, channel, and identifier) to attribute this text properly to Kanye and only Kanye. If you’re building a Markov model locally from scratch, you can omit that; it’s specified on Retort to enable us to generate text in his style from a shared model database, while excluding text that came from anyone other than Kanye by specifying an identity scope at the creation endpoint.

For a truer “Kanye” feel you could extract rhyme schemes from the training data verses by integrating with a rhyming dictionary or detecting rhymes using something like the Metaphone algorithm or some processing with Ruby’s Rhymes gem.

Instead, I decided to mix the voice of our generation with the voice of a few generations back: William Shakespeare. The Shakespearean sonnet, traditionally, has a rhyme scheme of ABAB CDCD EFEF GG. Given Kanye’s overly-dramatic (sorry!) lines, a final rhyming couplet seemed like the perfect way to hammer in whatever issue we end up rhyming about.

However, specifying the rhyme scheme upfront and using it throughout the script means you can change it arbitrarily to any other rhyme scheme, such as ballads, couplets, limericks, or your favorite rhyme.

Alright, here comes the fun stuff: line generation. Rather than taking the typical route of Markov chains and picking a word, choosing a word that comes after it, and repeating that process — we’ll be doing the opposite: words at the end of a line are way more important to rhyme, so we’ll start there and work backwards.

The full code is below, but here’s the general flow:

Here we go:

And, running that, you’ll get yourself a beautiful piece of work in the style of the greatest rapper of our generation, with all the quirks and weirdness that comes from using bigram Markov chains instead of trigram chains (coming soon to Retort!).

You can read the first ballade of Kanye West below, or browse through the rest of that publication (which has been set up for this post) to see other posts from other author styles (because now it’s as simple as replacing that Kanye West identifier I mentioned earlier with any other writer indexed by Retort!).|||

As I work to improve Notebook.ai, I’m always on the lookout for new ways to crunch data and provide smarter analytics and writing services to writers. While hunting through Kaggle the other day for…