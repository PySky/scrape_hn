is a lightweight, fast and extendable datagrid built for React

This document refers to version 6.x.x of react-table.

Simply pass the prop anything that resembles an array or object. Client-side sorting and pagination are built in, and your table will update gracefully as you change any props. Server-side data is also supported!

These are all of the available props (and their default values) for the main component.

You can easily override the core defaults like so:

Or just define them as props

requires a prop, which is an array of objects containing the following properties

[{ Renderers - For more information, see "Renderers" section below Cell Used to render a standard cell, defaults to the accessed value Header Used to render the header of a column or column group Footer Used to render the footer of a column Filter ( Used to render the filter UI of a filter-enabled column select onChange { ( . . )} value {filter . } select The value passed to onFiltersChange will be the value passed to filter.value of the filterMethod ) Aggregated Used to render aggregated cells. Defaults to a comma separated list of values. Pivot ( span Expander PivotValue By default, will utilize the the PivotValue and Expander components at run time span ), PivotValue Used to render the value inside of a Pivot cell Expander Used to render the expander in both Pivot and Expander cells accessor , or Accessor eg. (row) => row.propertyName (see "Accessors" section for more details) id , Conditional - A unique ID is required if the accessor is not a string or if you would like to override the column name used in server-side calls sortable boolean, resizable boolean, filterable boolean, show , can be used to hide a column width , A hardcoded width for the column. This overrides both min and max width options minWidth , A minimum width for this column. If there is extra room, column will flex to fill available space (up to the max-width, if set) maxWidth , pivot , Turns this column into a special column for specifying pivot position in your column definitions. The `pivotDefaults` options will be applied on top of this column's options. It will also let you specify rendering of the header (and header group if this special column is placed in the `columns` option of another column) expander , Turns this column into a special column for specifying expander position and options in your column definitions. The `expanderDefaults` options will be applied on top of this column's options. It will also let you specify rendering of the header (and header group if this special column is placed in the `columns` option of another column) and the rendering of the expander itself via the `Expander` property className , Set the classname of the `td` element of the column style {}, Set the style of the `td` element of the column headerClassName , Set the classname of the `th` element of the column headerStyle {}, Set the style of the `th` element of the column ( , , , ) ({}), a function that returns props to decorate the `th` element of the column columns [ ], footerClassName , Set the classname of the `td` element of the column's footer footerStyle {}, Set the style of the `td` element of the column's footer ( , , , ) ({}), A function that returns props to decorate the `td` element of the column's footer ( , , ) { }, A function returning a boolean that specifies the filtering logic for the column filter == an object specifying which filter is being applied. Format: {id: [the filter column's id], value: [the value the user typed in the filter field], pivotId: [if filtering on a pivot column, the pivotId will be set to the pivot column's id and the `id` field will be set to the top level pivoting column]} row == the row of data supplied to the table column == the column that the filter is on }]

React Table supports very flexible renderers for just about everything:

Any of these renderers can be one of the following:

All of these formats receive the following props:

{ row , original , index , the index of the row in the original arra viewIndex , the index of the row relative to the current view level , the nesting level of this row nestingPath , the nesting path of this row aggregated , true if this row's values were aggregated groupedByPivot , true if this row was produced by a pivot subRows , any sub rows defined by the `subRowKey` prop isExpanded , true if this row is expanded value , the materialized value of this cell resized , the resize information for this cell's column show , true if the column is visible width , the resolved width of this cell maxWidth , the resolved maxWidth of this cell tdProps , the resolved tdProps from `getTdProps` for this cell columnProps , the resolved column props from 'getProps' for this cell's column classes , the resolved array of classes for this cell styles the resolved styles for this cell }

Accessors are functions that return the value to populate the row's value for the column. This lets the render function not have to worry about accessing the correct data, the value is automatically populated in it's props.

If a or is passed the default accessor is used. The default accessor will parse the input into an array and recursively flatten it. Any values that contain a dot ( ) will be split. Any values that contain bracket ( ) will be split. This array is then used as the path to the value to return.

NOTE If your data has a field/key with a dot ( ) you will need to supply a custom accessor.

To group columns with another header column, just nest your columns in a header column. Header columns utilize the same header properties as regular columns.

You can use any react component or JSX to display content in column headers, cells and footers. Any component you use will be passed the following props (if available):

We think the default styles looks great! But, if you prefer a more custom look, all of the included styles are easily overridable. Every single component contains a unique class that makes it super easy to customize. Just go for it!

Every single react-table element and callback supports and props.

Every single built-in component's props can be dynamically extended using any one of these prop-callbacks:

These callbacks are executed with each render of the element with four parameters:

This makes it extremely easy to add, say... a row click callback!

You can use these callbacks for dynamic styling as well!

Just as core components can have dynamic props, columns and column headers can too!

You can utilize either of these prop callbacks on columns:

In a similar fashion these can be used to dynamically style just about anything!

Pivoting the table will group records together based on their accessed values and allow the rows in that group to be expanded underneath it. To pivot, pass an array of 's to . Remember, a column's is either the one that you assign it (when using a custom accessors) or its string.

Naturally when grouping rows together, you may want to aggregate the rows inside it into the grouped column. No aggregation is done by default, however, it is very simple to aggregate any pivoted columns:

Pivoted columns can be sorted just like regular columns including holding down the button to multi-sort.

By adding a props, you can easily add an expansion level to all root-level rows:

If you want to handle pagination, sorting, and filtering on the server, makes it easy on you.

For a detailed example, take a peek at our async table mockup

React Table by default works fantastically out of the box, but you can achieve even more control and customization if you choose to maintain the state yourself. It is very easy to do, even if you only want to manage parts of the state.

Here are the props and their corresponding callbacks that control the state of the a table:

ReactTable page { } the index of the page you wish to display pageSize { } the number of rows per page to be displayed sorting {[{ the sorting model for the table id , desc }, { id , desc }]} expandedRows {{ The nested row indexes on the current page that should appear expanded , , { , } }} filters {[{ id , value }]} resizing {[{ , }]} onPageChange {( ) { }} Called when the page index is changed by the user onPageSizeChange {( , ) { }} Called when the pageSize is changed by the user. The resolve page is also sent to maintain approximate position in the data onSortedChange {( , , ) { }} Called when a sortable column header is clicked with the column itself and if the shiftkey was held. If the column is a pivoted column, `column` will be an array of columns onExpandedChange {( , , ) { }} Called when an expander is clicked. Use this to manage `expandedRows` onFilteredChange {( , ) { }} Called when a user enters a value into a filter input field or the value passed to the onFiltersChange handler by the filterRender option. onResizedChange {( , ) { }} Called when a user clicks on a resizing component (the right edge of a column header)

Possibly one of the coolest features of React-Table is its ability to expose internal components and state for custom render logic. The easiest way to do this is to pass a function as the child of .

The function you pass will be called with the following items:

You can then return any JSX or react you want! This turns out to be perfect for:

Accessing internal state and wrapping with more UI:

Sorting comes built in with React-Table. Click column header to sort by its column. Click it again to reverse the sort.

When clicking on a column header, hold shift to multi-sort! You can toggle and for multi-sort columns. Clicking on a header without holding shift will clear the multi-sort and replace it with the single sort of that column. It's quite handy!

To override the default sorting algorithm for the whole table use the prop.

To override the sorting algorithm for a single column, use the column property.

Supply a function that implements the native javascript interface. This is React Table's default sorting algorithm:

Filtering can be enabled by setting the option on the table.

If you don't want particular column to be filtered you can set the option on the column.

By default the table tries to filter by checking if the row's value starts with the filter text. The default method for filtering the table can be set with the table's option.

If you want to override a particular column's filtering method, you can set the option on a column.

To completely override the filter that is shown, you can set the column option. Using this option you can specify the JSX that is shown. The option is passed an method which must be called with the the value that you wan't to pass to the option whenever the filter has changed.

Though we confidently stand by the markup and architecture behind it, does offer the ability to change the core componentry it uses to render everything. You can extend or override these internal components by passing a react component to it's corresponding prop on either the global props or on a one-off basis like so:

If you choose to change the core components React-Table uses to render, you must make sure your replacement components consume and utilize all of the supplied and inherited props that are needed for that component to function properly. We would suggest investigating the source for the component you wish to replace.

To suggest a feature, create an issue if it does not already exist. If you would like to help develop a suggested feature follow these steps:|||

react-table - React Table - A lightweight, fast and extendable datagrid for React