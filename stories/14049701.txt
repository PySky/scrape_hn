Rax is a radix tree implementation initially written to be used in a specific place of Redis in order to solve a performance problem, but immediately converted into a stand alone project to make it reusable for Redis itself, outside the initial intended application, and for other projects as well.

The primary goal was to find a suitable balance between performances and memory usage, while providing a fully featured implementation of radix trees that can cope with many different requirements.

During the development of this library, while getting more and more excited about how practical and applicable radix trees are, I was very surprised to see how hard it is to write a robust implementation, especially of a fully featured radix tree with a flexible iterator. A lot of things can go wrong in node splitting, merging, and various edge cases. For this reason a major goal of the project is to provide a stable and battle tested implementation for people to use and in order to share bug fixes. The project relies a lot on fuzz testing techniques in order to explore not just all the lines of code the project is composed of, but a large amount of possible states.

Rax is an open source project, released under the BSD two clause license.

The layout of a node is as follows. In the example, a node which represents a key (so has a data pointer associated), has three children , , . Every space represents a byte in the diagram.

The header is actually a bitfield with the following fields:

Compressed nodes represent chains of nodes that are not keys and have exactly a single child, so instead of storing:

We store a compressed node in the form:

The layout of a compressed node is:

The basic API is a trivial dictionary where you can add or remove elements. The only notable difference is that the insert and remove APIs also accept an optional argument in order to return, by reference, the old value stored at a key when it is updated (on insert) or removed.

A new radix tree is created with:

In order to insert a new key, the following function is used:

The function returns 1 if the key was inserted correctly, or 0 if the key was already in the radix tree: in this case, the value is updated. The value of 0 is also returned on out of memory, however in that case is set to .

If the associated value is NULL, the node where the key is stored does not use additional memory to store the NULL value, so dictionaries composed of just keys are memory efficient if you use NULL as associated value.

Note that keys are unsigned arrays of chars and you need to specify the length: Rax is binary safe, so the key can be anything.

The lookup function is the following:

This function returns the special value if the key you are trying to access is not there, so an example usage is the following:

raxFind() is a read only function so no out of memory conditions are possible, the function never fails.

Deleting the key is as you could imagine it, but with the ability to return by reference the value associated to the key we are about to delete:

The function returns 1 if the key gets deleted, or 0 if the key was not there. This function also does not fail for out of memory, however if there is an out of memory condition while a key is being deleted, the resulting tree nodes may not get re-compressed even if possible: the radix tree may be less efficiently encoded in this case.

The argument is optional, if passed will be set to the key associated value if the function successfully finds and removes the key.

The Rax key space is ordered lexicographically, using the value of the bytes the keys are composed of in order to decide which key is greater between two keys. If the prefix is the same, the longer key is considered to be greater.

Rax iterators allow to seek a given element based on different operators and then to navigate the key space calling and .

Iterators are normally declared as local variables allocated on the stack, and then initialized with the function:

The function never fails and returns no value. Once an iterator is initialized, it can be sought (sought is the past tens of 'seek', which is not 'seeked', in case you wonder) in order to start the iteration from the specified position. For this goal, the function is used:

For instance one may want to seek the first element greater or equal to the key :

The function raxSeek() returns 1 on success, or 0 on failure. Possible failures are:

Once the iterator is sought, it is possible to iterate using the function and as in the following example:

The function returns elements starting from the element sought with , till the final element of the tree. When there are no more elements, 0 is returned, otherwise the function returns 1. However the function may return 0 when an out of memory condition happens as well: while it attempts to always use the stack, if the tree depth is large or the keys are big the iterator starts to use heap allocated memory.

The function works exactly in the same way, but will move towards the first element of the radix tree instead of moving towards the last element.

An iterator can be used multiple times, and can be sought again and again using without any need to call again. However, when the iterator is not going to be used again, its memory must be reclaimed with the following call:

Note that even if you do not call , most of the times you'll not detect any memory leak, but this is just a side effect of how the Rax implementation works: most of the times it will try to use the stack allocated data structures. However for deep trees or large keys, heap memory will be allocated, and failing to call will result into a memory leak.

The function can seek different elements based on the operator. For instance in the example above we used the following call:

In order to seek the first element to the string . However other operators are available. The first set are pretty obvious:

When the last two operators, or are used, the key and key length argument passed are completely ignored since they are not relevant.

Note how certain times the seek will be impossible, for example when the radix tree contains no elements or when we are asking for a seek that is not possible, like in the following case:

We may not have any element greater than . In this case, what happens is that the first call to or will simply return zero, so no elements are iterated.

Sometimes we want to iterate specific ranges, for example from AAA to BBB. In order to do so, we could seek and get the next element. However we need to stop once the returned key is greater than BBB. The Rax library offers the function in order to avoid you need to code the same string comparison function again and again based on the exact iteration you are doing:

The above code shows a complete range iterator just printing the keys traversed by iterating.

The prototype of the function is the following:

The operators supported are , , , , . The function returns 1 if the current iterator key satisfies the operator compared to the provided key, otherwise 0 is returned.

In order to be efficient, the Rax iterator caches the exact node we are at, so that at the next iteration step, it can start from where it left. However an iterator has sufficient state in order to re-seek again in case the cached node pointers are no longer valid. This problem happens when we want to modify a radix tree during an iteration. A common pattern is, for instance, deleting all the elements that match a given condition.

Fortunately there is a very simple way to do this, and the efficiency cost is only paid as needed, that is, only when the tree is actually modified. The solution consists of seeking the iterator again, with the current key, once the tree is modified, like in the following example:

In the above case we are iterating with , so we are going towards lexicographically greater elements. Every time we remove an element, what we need to do is to seek it again using the current element and the seek operator: this way we'll move to the next element with a new state representing the current radix tree (after the change).

The same idea can be used in different contexts, considering the following:

After iteration reaches an EOF condition since there are no more elements to return, because we reached one or the other end of the radix tree, the EOF condition is permanent, and even iterating in the reverse direction will not produce any result.

The simplest way to continue the iteration, starting again from the last element returned by the iterator, is simply to seek itself:

So for example in order to write a command that prints all the elements of a radix tree from the first to the last, and later again from the last to the first, reusing the same iterator, it is possible to use the following approach:

To extract a fair element from a radix tree so that every element is returned with the same probability is not possible if we require that:

However a random walk which is long enough, in trees that are more or less balanced, produces acceptable results, is fast, and eventually returns every possible element, even if not with the right probability.

To perform a random walk, just seek an iterator anywhere and call the following function:

If the number of steps is set to 0, the function will perform a number of random walk steps between 1 and two times the logarithm in base two of the number of elements inside the tree, which is often enough to get a decent result. Otherwise, you may specify the exact number of steps to take.

For debugging purposes, or educational ones, it is possible to use the following call in order to get an ASCII art representation of a radix tree and the nodes it is composed of:

However note that this works well enough for trees with a few elements, but becomes hard to read for very large trees.

The following is an example of the output raxShow() produces after adding the specified keys and values:

To run the tests try:

The last one is very verbose currently.

In order to test with Valgrind, just run the tests using it, however if you want accurate leaks detection, let Valgrind run the whole test, since if you stop it earlier it will detect a lot of false positive memory leaks. This is due to the fact that Rax put pointers at unaligned addresses with , so it is not obvious where pointers are stored for Valgrind, that will detect the leaks. However, at the end of the test, Valgrind will detect that all the allocations were later freed, and will report that there are no leaks.|||

rax - A radix tree implementation in ANSI C