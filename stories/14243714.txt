If there is anyplace in the enterprise where the use of open source software is still a hard sell, it's going to be with management. By now, most workers and managers in IT departments are already sold on open source, and deploy it whenever they can -- if they're allowed to do so.

Even in this day and age, sometimes they're not. This is partly because management is often resistant to change, with the attitude that what isn't broken doesn't need fixing. Or it might be because in a dog-eat-dog business environment, where buying and selling rules the day, it might be difficult to understand using software that's neither bought nor sold. You know, if it's free it can't be good and all that...

Here's a brief list for managers -- or anyone else who needs it -- explaining some of the benefits the use of open source brings to the enterprise. It's an incomplete listt -- there are many more reasons than these -- but it's a start.

Cost: Money -- either how to make it or how to save it -- is the most effective ways of convincing folks in the front office to do anything, and these days making the case that money can be saved by deploying open source is pretty brain dead easy. This wasn't always the case. Back when the jury was still out on enterprise use of open source, large proprietary vendors spent fortunes commissioning studies which "proved" that proprietary software was hands down less expensive to deploy, maintain and operate than open source. These days, that's easy to disprove. Open source software is generally free, with the major expense being for support, and open source vendors generally offer much more complete support for a fraction of the going rate for comparable proprietary products. Also, open source support often comes with training built-in, which helps smooth over any speed bumps as new applications are deployed. Vendor Lock-in: There isn't going to be much problem convincing most front offices that vendor lock-in is to be avoided. If the company has been around long enough, it's most likely still paying licensing fees and using antiquated software that would be long gone if not for the costs associated with migrating from a proprietary format to an open standard. Obviously, most open source solutions use open standards. Not only that, with open source you own the software. No auditors can walk through the door looking for a reason to drop the nuclear option and give you 30 days to quit using mission critical software. Versatility: No matter what the salesperson says before the contract is signed, proprietary solutions are rarely very versatile. Generally, these off-the-shelf solutions are designed to meet a limited number of use-case scenarios. Even after evaluating the software with a 30 day "free trial" and determining it to be a perfect match, invariably you're going to find yourself talking to someone at a help desk who absolutely can't understand why you'd want to do whatever the software can't do, and certain that no one has never asked for such a feature before. With open source software you can take your own time putting it though its paces. Generally, the free version isn't much different from the enterprise edition, so you can take all the time you need to evaluate it. And because you have access to the source code, you can also determine if there are ways to get around areas where the software fails to completely match your needs. Security: There are different opinions on whether the open source model is inherently more secure than closed source development. Open source folks generally subscribe to the "many eyes" theory: that with hundreds if not thousands of developers and security experts looking at the code, security vulnerabilities are certain to be found sooner rather than later. Proprietary vendors, on the other hand, point out that black hats have the same access to the open source code, and that no good can come from that. Even if the proprietary viewpoint is valid, open source still seems to be safer in practice. With open source, as soon as a security hole is discovered, patching it quickly becomes a priority, under the same theory that if the good guys can see the problem, so can the bad guys. With a few notable exceptions (Heartbleed comes to mind), most successful hacks of open source software happens on unpatched or poorly configured systems. Scalability: Most people by now know that enterprise open source products are capable of scaling to gigantic proportions. These days, through leveraging products such as Kubernetes in the cloud, large enterprises are learning to instantly scale-up to meet peak demand, and to scale down just as quickly once the demand has ended. An important thing to remember is that with open source, there is generally no such thing as a deployment that is too small. For example, although 32 percent of OpenStack deployments are for huge companies employing 10,000 to 100,000 and more, a full 10 percent are for very small companies with nine or fewer employees. The beauty of this is that when any of these small companies hits paydirt and needs to scale quickly, they won't be needing to look for another platform.

Still not convinced? Consider this: Open source is the way of the future. There has been a dramatic decrease over the last few years in software being released under the traditional proprietary model. That trend is only going to accelerate.

Afraid of the quality of the code? Don't be. Kubernetes was started by Google, OpenStack was originally developed by Rackspace and NASA, and Hyperledger -- which is being touted as "the next big thing" -- is based in part on development done by IBM. Open source products aren't generally developed by college kids in the family garage anymore.|||

