Here we’ll address the problems, mentioned above. Separating the functionality by context will help us achieve modularity and split the spaghetti-like app.js into smaller objects.

We’ll split app.js in a few more files:

Now we can easily change the presentation of wishes, without breaking or changing the sum functionality (business logic) or vice versa! The both presentation and business logic are loosely coupled now. Also each file (object) has its own context and once we want to change something, we’ll know where we can find it!

1. knows too much and still breaks SRP! Take a closer look to the function’s body:

responsibility is to initialize the DOM events, nothing more! In spite of that the function knows what exactly happens on a new wish addition, namely adding a new wish to wishesCollection ( ).

Now imagine that we have another functionality that has to be executed on a wish addition. If still knows everything, it can get too complicated and larger quickly.

The big problem would be if we have another presentation, where we can add new wishes too. For example — a quick wish submitter at the page’s header, in order the user can easily add a wish, no matter on which page he is. In that case how can we reuse the functionality that has to be executed on a new wish addition? It would look something like that:

As you see something’s wrong. We have a duplicated content and we have to find a way to recalculate the wishes’ sum in instance. We can pass a instance to , but that makes the tightly coupled to and requires us to always use , once we needed . That’s wrong!|||

At various times of our programming career each of us has faced with a spaghetti oriented implementation — either in the first coding steps or later maintaining other’s code. In this tutorial we’ll…