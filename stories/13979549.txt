In this tutorial, you’ll learn how to use a simple mutation to modify data on the server and keep the state synchronized on your clients. Specifically, we’ll create a mutation that adds an item to a list.

This post is part of a tutorial series on GraphQL + React. Here are the other parts:

In this tutorial, we’ll do the following:

Each of these steps is very simple, so completing the whole tutorial should barely take 25 minutes.

If you haven’t done Parts 1 and 2 yet, you can either do those first or jump in right here and check out the starting state of this tutorial from the GitHub repo:

To check if things worked, let’s start the GraphQL server:

Let’s also start the dev server that serves our front-end bundle in a separate console:

If it worked, you’re ready to write your first mutation!

In the last tutorial, we built our server, but we didn’t connect it to our frontend yet. To do so, we’ll just need to make two minor changes on the server and the client.

Because the server is running on port 400o and the client is served from port 3000, we’ll need to enable CORS on the server. In this tutorial, we’ll use the package for Express/Connect:

Now we just have to import in and modify the following line to allow cross-origin requests from our front-end origin:

On the frontend, we’ll need to import from and then replace our with one that connects to the server:

You can remove all the code that was used to create the (including the imports) and replace it with the following:

Your client is now connected to the server, and you should see the following at localhost:3000:

Now that the client is hooked up to the server, we can get started on the real task — writing a mutation to add a channel to our list of channels.

First, we’ll define the mutation in our schema by adding it in :

The new type that we just added defines a single mutation —   — which takes a single argument, the name of the new channel. The mutation returns a channel object, which we can then select fields on, just as with a query. Here’s an example of a valid mutation:

Of course this mutation won’t do anything until we define a resolver function for it. Our resolve functions live in , so let’s head over there and add a resolve function for our new mutation. The resolve function has to take the name provided as an argument, and generate an id for the new channel before adding it to the existing list.

Let’s change to add a new variable and define the resolver for :

As you can see, the resolver just pushes a new channel to , increments the and returns the newly created channel. If you head over to localhost:4000/graphiql, you should be able to run the example mutation from above and get a response.

If you reload your client app on localhost:3000, you should now see the “basketball” channel show up.

Now that we’ve verified that the mutation is working on the server, let’s write the necessary code to call it from the client. First, we’ll create an input component in :

Our component is very simple. So far it just consists of a text input element and a handleKeyUp function that prints the input text to the console and clears the input field when the user hits return (key code 13).

Let’s import it in and place it right before our list of channels:

If it worked, you should now see the “New channel” input in your UI:

To make our input component call a GraphQL mutation, we have to wire it up with the GraphQL higher order component (HOC) from (just like we did in the first tutorial). For mutations, the HOC passes down a prop, which we’ll call to execute the mutation.

Let’s see if it worked and type something into the input box. Did the text disappear after you hit enter? If it did, the mutation was successful, and you should see the item after reloading the page. Of course, having to reload the page is not exactly a great user interaction, so in the next section we’ll find out why Apollo can’t know what the mutation means, and what we need to do to make the list re-render with the new item.

The reason our list of channels didn’t automatically re-render is that Apollo has no way of knowing that the mutation we just called has anything to do with the channels query that renders our list. Only the server knows that, but it has no way of notifying our client (for that we’d need a subscription, which we will cover in a future tutorial).

To update the client state after a mutation, we have three options:

The refetch option is by far the simplest one, and it’s a great way to get an app working quickly, so we’ll do that for now.

To tell Apollo Client that we want to refetch the channels after our mutation completes, we pass it via the option on the call to . Rather than writing the channels query again, we’ll export it from and import it in :

Now if we add a new channel, the list should refresh right away!

That’s it; you’ve implemented our first GraphQL mutation!

Of course this will only update the UI after you make a mutation. If the mutation was initiated by another client, you won’t find out until you do a mutation of your own and refetch the list from the server. Most of the time that’s not an issue, but for real-time apps Apollo has a nice trick up its sleeve to transparently propagate updates to all clients with almost no effort for the programmer: Polling queries.

In order to turn it on, simply pass the option with your in :

With this simple change, Apollo will rerun the query every 5 seconds, and your UI will be updated with the latest list of channels. You can test this by opening a new browser window and adding a channel there. The new channel should appear in the other window after a small delay.|||

In this tutorial, you’ll learn how to use a simple mutation to modify data on the server and keep the state synchronized on your clients. Specifically, we’ll create a mutation that adds an item to a…