Lots of exciting opportunities in CS right now involve working with the cloud: web services, social networking and the IoT represent some of the most innovative sectors of one of the most innovative industries in America. As a huge fan of having employment prospects, I’d really like to get in on this, and as a huge fan of self flagellation I’d like to do so with OCaml.

I’ll get started by writing an application find the street address of a point on the Earth, because there happens to be an endpoint in the Google Maps API which does exactly that. Unfortunately, Google does not maintain an OCaml client library for their Maps API, and the community-maintained bindings are meant to be used in client-side code via , so I’ll have to write my own bindings. OCaml, however, does not really have a whole lot of (nice) libraries for writing network code, with most of them being very systems-oriented. I don’t want to worry about network headers or manually building and messages, I would rather use a library that lets me quickly throw together bindings to REST API’s while:

Netblob accomplishes all of these things: implemented as a plugin, the annotation may be attached to a record type declaration, which will generate a function that calls the specified endpoint with parameters described by the type declaration. The compiler will emit an error if the function is called without all the required arguments, which are all guaranteed to be reasonable, and the return value is an error-aware data structure, so the compiler is able to guarantee that you’re handling the case of poorly encoded responses.

In order to build a complete application, we have to build structures to describe the JSON responses described here.

First, I should define a JSON schema to hold addresses, complete with an annotation to generate JSON (de)serializers for this type. I only want the field, so everything else can just be given the type, as I don’t want to write types for them (this means that will make sure that the fields are present and that they are valid JSON, but it will not check that they are schemas)

I’ll also need a wrapper type, because apparently there’s no idiomatic way to let an HTTP client know that they fucked up.

The last step is where Netblob comes in. In order to create a Netblob binding, you have to provide 4 things:

For our example, we’re going to make bindings to the Google Maps Geocoding API, at . Requests to this endpoint usually look like this:

Fortunately, this is quite a simple schema: may be encoded as a pair of floats, and is just a string.

The GET parameters may be nicely encoded into an OCaml record type, and the Netblob annotation adds the rest of what we need:

The whole program looks like this:

So now we have a fully functioning OCaml binding to a simple REST endpoint, complete with error handling (mostly through error-aware return types and ) and automatic response validation/marshalling.

Why should you use Netblob (or something like it) for REST development? Because life is too short to write network code by hand, and it’s also too short to deal with the myriad problems which can arise from sloppily constructing API bindings. Netblob attempts to balance automation with control by providing a predictable system for expanding type declarations into workable network code. You should never have to throw together URI’s or request headers in your application, but few developers maintain OCaml client libraries for their API’s. With Netblob, you can quickly and easily build robust bindings to any REST API without worrying about performance or writing HTTP code by hand.|||

Back in October I finished my first software engineering internship with Cryptosense, a French cryptographic security company. It went largely without incident, despite me speaking slightly less…