In this part, we will implement graph data structure using classes and interfaces, and discuss when it’s worth overruling type hints.

We need to make a few design choices.

First, should we require the user to provide unique and hashable node objects, or should we accept any values and wrap them into ourselves? Let’s do the safer thing and wrap values into Node instances: this protects us in case the values could become non-unique or non-hashable in the future.

Second, should we store adjacency sets inside or outside ? I have a slight personal preference for nodes knowing their adjacency information, since it occasionally allows us to use one function argument (a node) rather than two (a node and a graph).

Third, should we separate Graph and Node interfaces from their implementation? For example, we can have abstract base classes and from which all concrete implementations would inherit. Apart from making the design cleaner, it should help generate more precise type hints (e.g., a traversal function may work on any object that implements , since it doesn’t need to mutate anything). This is a good idea, but let’s do without interfaces for now; we’ll add them later.

Our first implementation looks like this:

Now, just like in Part I, let’s again add reverse adjacency information to in order to make iteration through incoming edges faster. The new class should share a big part of its implementation with , so it would make sense to derive it from . We also want to reuse all of the global functions since they should work without change for both implementations.

However, if we follow this plan, our code will not type check. There are two reasons for that.

Python type hint system follows the so-called Liskov substitution principle, or LSP:

Therefore, when mypy sees that inherits from , it analyzes the code to see whether it is indeed safe to use a in place of . It turns out that it’s not safe, and so the type check fails.

To see why it’s not always safe, consider this function:

If we try to call it with of type and of type , it would fail in runtime when the tries to access the non-existent attribute.

To summarize, mypy thinks inheritance is serious business, and that it represents a relationship with some strict guarantees (LSP). We, on the other hand, wanted to use inheritance just to help with code reuse. A feature is in the works that would let the programmer turn LSP on or off as desired; but for now, we have to find another solution.

We could satisfy mypy by using composition instead of inheritance (that is, by wrapping instance inside instance). But let’s not do that because this will make the code less logical and more verbose. Instead, let’s simply mark the lines about which mypy complains with . Those directives are very precise: they suppress error messages for that line, but the type checker still parses those lines, and uses information it learned from them to type check the rest of the program.

Since we were careful enough to make and support the same API, a function like should work without change for both. However, its type annotation is not obvious.

The first argument can be any class that supports the mutable graph API, that is . The return type should be based on the value of the first argument; for example, if we call , the type checker should conclude that the return type is . (We can’t set return type to since that would prevent us from using the reverse adjacency included in .)

we can’t specify the return type.

Perhaps we can use a type variable to achieve the desired result:

This would have worked if wasn’t generic; unfortunately, type variables cannot be bound by a generic type . We also cannot provide type arguments to type variables. The above code would not even pass mypy’s syntax check.

The problem is simple: the types we’ve been trying to define do not exist in mypy’s type system. Such types require more sophisticated language implementation and more learning effort to use, and they are usually found only in the more advanced functional languages (such as Haskell and Scala).

In my opinion, the best solution here is to make class non-generic by changing the type of its attribute to . This means we no longer need a generic class for and , and so we can use type variable to provide type hints for graph functions. Now is the time to add the interface classes as we discussed earlier; it’s easier to do so without dealing with generics.

Our final implementation even reuses the test functions:

Note that we didn’t bother trying to prevent assignment to attributes in the immutable interfaces; for example, even though of is an (immutable) , users can assign a new container to . While could have insured against such accidental assignment, it’s probably not worth the runtime cost.

Our API for a directed graph is so limited that it fits an undirected graph as is; we can always separate out the interfaces later, when the need arises.

Conceptually, an undirected graph is equivalent to a directed graph that satisfies two constraints:

Therefore, one way to implement an undirected is to reuse our (directed) implementation. We just need to modify the and methods to ensure those constraints are never violated:

It might seem wasteful to store each edge twice. However, we can’t really improve on that. Let’s say we define order on nodes, and store each edge only once, in the adjacency set of the lower-valued node. In this case, iterating through neighbors would be ridiculously slow since neighbors may end up stored on any node.

Class-based representation keeps the API clean and stable.

However, as we make our approach more general, type hints become more complex, and at some point we run into the limitations of python type system.

By its nature, static type checking provides insurance against certain bugs at the cost of constraints on the developer. Very powerful type systems (such as in Scala, Haskell, Idris) are extremely flexible; but they are also slightly harder to learn, debug, and implement. Simpler type systems (e.g., in Java, C#, C++, and python) are less flexible, and will occasionally get in the way of the developers.

I don’t recommend non-trivial refactoring just to satisfy the type checker, unless it also improves code quality. Often, it’s better to just overrule mypy using:

Part I – Representing graphs as dictionaries or sets

 Part II – Representing graphs as classes

 Part III – Implementing graph traversal

 Part IV – Trees and binary trees

Github with all the code|||

Generic Class In this part, we will implement graph data structure using classes and interfaces, and discuss when it's worth overruling type hints. We need to make a few design choices. First, should we require the user to provide unique and hashable node objects, or should we accept any values and wrap them into class…