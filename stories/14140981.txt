Hey there! So, we’ve been using Laravel to build a pretty basic Facebook Messenger bot that quizzes us on some general knowledge trivia. We did the basic setup of our bot in Part 1. In this part, we’ll finally get our bot to give us some real trivia challenges from the Open Trivia Database (http://opentdb.com). But first…

To cater for that, we’ll make use of Laravel’s jobs feature: once we receive any data to our webhook, we respond with 200 OK and dispatch a new job where we process the message data. The job gets executed in the background. This is much better than hoping we can finish processing the data and respond within a few seconds.

Run in your Terminal to create a new job. Configure your app’s queue by setting QUEUE_DRIVER=database in your Config Vars, and then running and on your local, and on Heroku. Then add this line to your Procfile:

To cater for this, we’ll have to make sure we iterate over all the entries sent and dispatch a job for each. Replace the code in the method of your with something like this:

The helper generates an empty 200 OK response.

here is a class we’ll create that models the structure of the object in the data Facebook sends us (as explained here), and provides some handy methods for manipulating them. The method returns an array of objects from the callback data in the Request. The Entry class will have a method called which returns an array of objects. Lastly, we’ll hae a class to represent message events. We’ll ignore postback events for now. We’ll create all these classes.

Question: whats the use of all these extra classes? Couldn’t we just get what we need from parsing the input array?

Answer: Yes, we could. But apart from the fact that creating classes to model entities makes me feel like a developer that knows his OOP, it’s much better this way, as we don’t have to worry about the implementation details of the data.If Facebook changed the structure of data it sent, we’d only need to change the code inside our class definitions instead of changing it everywhere we accessed the array. So we’re future-proofing our code.

In your app folder, create a folder named Webhook in a Bot folder, then create the files  , and . Here’s the structure we’ll start out with:

Here, (and its corresponding is an extra property we added to the Messaging class that helps us easily tell what type of message data we have, for instance “message” or “postback” (ignoring postback for now, though)

At the expense of having too much (?) code, I made all fields private and created getters to access them, so someone doesnt accidentally change their values.

Okay, we’ve been able to set up useful formats for representing and accessing our data. It’s time for us to begin writing the code that handles a message event. Let’s edit our :

You can see we make use of our class’ method to determine if it is a message event. You probably also noticed the two new classes, and . These two classes are very important. We’ll use the class to handle interactions between our bot, our data, and Messenger. We’ll use the class to handle interactions with the OpenTriviaDatabase API, and any other functionality specific to trivia, such as verifying answers.

First, we’ll add the property and initialise it in the constructor.

This property is important because we don’t want to keep passing the id of the person to reply to,or the Messaging instance on each call to reply. The bot gets that internally from this property.

Next, we add the method to the class. This method will simply return an array with two elements: , which contains the type of message in relation to our bot’s functionality (such as “request for a new question” or “answer”), and , which contains any useful data we need from the message, such as the user’s answer. We’ll use regular expressions to achieve this:

Lastly, we’ll implement the method, which will be used to reply to messages. Note that it takes only one argument, the data to reply with. We obtain the id of the user to reply to from the property of our object. The function then calls the method, which uses curl to make a POST request containing our message data to Facebook’s Send API.

Lets take a closer look at these lines:

In other words, if the data the function is provided with is an object with a method, we call that method and receive a message array in the format Facebook expects. If the data is a string, we just use it as the property in the message array. This allows us to pass in custom objects containing structured messages as well as plain text to our reply function.

First, well define the constants we used earlier, and set up a constructor to initalise the parts of a Trivia: question and answers.

For now, we initialise all three to empty values.

Let’s implement the method. First, we’ll clear any existing solution to an earlier question, if any, from the cache and then we’ll make an API call to get the question. We’ll then create a Trivia object and return it.

Since this object is passed to the method, we need to implement a method. Let’s do that now.

The method should return an array that fits into the key of the JSON object we send to Facebook, as detailed here. For now, we’ll just send a basic text message, stating the question and listing the options. We’ll also be storing the letter for the correct answer in our cache too, so as to persist it.

Almost done. Let’s head back to our constructor and fill in the missing pieces. If you visit our API URL, https://opentdb.com/api.php?amount=1&category=9&type=multiple, in your browser, you’ll see a response like this (I’ve formatted it a bit to be more readable):

Based on this, we can update our constructor to lok like this (remember that is ):

Finally, we’ll implement the function that checks if the user’s answer is correct and returns a text response:

Note: See this article for how to configure cache, queuing and database for Laravel on Heroku.

Lets test out our bot now:

Thanks for sticking with me! Hope you enjoyed this! In Part 3, we’ll implement some of the cool features Messenger gives such, such as quick replies and message buttons. Stay tuned!

Github repo for the bot is here.

If you liked this article, please recommend and share. And if you spot any needed improvement, just suggest it in the comments. I’d appreciate it. Thanks!|||

Hey there! So, we’ve been using Laravel to build a pretty basic Facebook Messenger bot that quizzes us on some general knowledge trivia. We did the basic setup of our bot in Part 1. In this part, we…