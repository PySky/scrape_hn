For a positive integer n, the partitions of n are all the possible different ways of writing n as the sum of positive integers.

For example, these are the possible partitions (7) for $n = 5$:

We don’t consider the particular order of the addends. That means that for us $5 = 2 + 3$ is the same partition of $5 = 3 + 2$.

Given a positive integer $n$, compute all the partitions of $n$.

This is a scala code snippet that solves the problem:

The solution is using a recursive description of what a partition is.

Looking back at our initial example for partitions of 5, we can easily guess the recursive structure of the list.

Take for example the partitions starting with 1. If we remove the leading 1, we have all the partitions for 4. For those starting with 2 , the remaining part is a partition of 3, and so on.

In general, if a partition of $n$ is starting with $k$, then the remaining addends form a partition of $n-k$.

In pseudo-code we can express this relation in the following way:

where with we mean the set of all the partitions of $k + m$ whose first addend is $k$ and the remaining addends form a partition of $m$.

There is one problem in this approach though, and it is that the same partition can occur multiple times. For example

This is a common problem in defining recursive algorithms that enumerate all the elements of a set: often the first recursive algorithm that comes to our mind does not guarantee unicity, and an extra step (or a different data structure, like a in our case) is necessary.

Let's now look how to achieve unicity without the need of an extra step.

contains all the partitions with at least one . We can even say more: it is exactly that set, because obviously each partition in contains at least one .

To avoid repetitions, it is enough to consider, at the second step, the partitions of $3$ that do not contain any $1$.

where denotes the set of partitions of the number $n$ whose addends are greater or equal than $k$.

For example, is formed only by the partitions $4 = 2 + 2$ and $4 = 4$, since any other partition of $4$ contains at least one $1$.

At that point, for the same argument, we will already have all the partitions that contain either a $1$ or a $2$, and we can complete our example:

It's then enough to solve the following

Given non-negative integers $n$ and $k$, compute all the partitions of $n$ composed by numbers greater or equal than $k$.

If $k > n$, clearly there are no such partitions. Therefore

If $k = n$ there is only one.

If $k < n$, we have two ways of building partitions of $n$ with elements greater or equal than $k$: 

 1. Partitions that contain $k$ 

 2. Partitions that do not contain $k$

For case 1) we can take $k$ followed by all partitions of $n - k$ with numbers greater or equal than $k$. For the second case we take instead all the partitions of $n$ with numbers greater or equal than $k + 1$.

The algorithm always terminates because at each step the difference $n - k$ strictly decreases, so at some point we will reach the base case $n - k <= 0$.

We can put everything together and get our original scala snippet:

If we just need to know the number of partitions of $n$, and not the full list of partitions, we can slightly modify the code to achieve that:

As we can see from the asymptotic formula for below, the function grows pretty quickly. These are the values for $n <= 49$ (the values are taken from the wonderful encyclopedia of integer sequences):

Caching intermediate values we can avoid a lot of recursive calls. For example, for $n = 49$ the algorithm is making $1836439$ calls. Of them $1834638$ can be avoided, having only $1801$ non-cached calls.

Since we are doing two recursive calls for each call, the algorithm is exponential in its non-memoized version, so it is no more than $O(2^n)$.

For the memoized version, since there are no more than $n^2$ distinct $(n, k)$ pairs that can feed the function , in that case the algorithm is $O(n^2)$.

There is no known closed elementary formula known for , but Hardy and Ramanujan found, in 1918, its asymptotic behaviour:|||

