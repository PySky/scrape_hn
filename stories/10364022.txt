This library allows the usage of RxJava with the new Android M permission model.

To use this library your must be >= 11.

Thanks to @vanniktech, RxPermissions now supports RxJava2, just change the package name to .

Version 0.9 now uses a retained fragment to trigger the permission request from the framework. As a result, the class is no more a singleton. To migrate from 0.8 or earlier, just replace the following :

Example : request the CAMERA permission (with Retrolambda for brevity, but not required)

If you need to trigger the permission request from a specific event, you need to setup your event as an observable inside an initialization phase.

You can use JakeWharton/RxBinding to turn your view to an observable (not included in the library).

If multiple permissions at the same time, the result is combined :

You can also observe a detailed result with or :

rxPermissions .requestEach( , ) .subscribe(permission { (permission granted) { } (permission shouldShowRequestPermissionRationale) Denied permission without ask never again } { Denied permission with ask never again Need to go to the settings } });

Look at the app for more.

As mentioned above, because your app may be restarted during the permission request, the request must be done during an initialization phase. This may be , or , but not pausing methods like , because you'll potentially create an infinite request loop, as your requesting activity is paused by the framework during the permission request.

If not, and if your app is restarted during the permission request (because of a configuration change for instance), the user's answer will never be emitted to the subscriber.

You can find more details about that here.

This library is still beta, so contributions are welcome. I'm currently using it in production since months without issue.|||

RxPermissions - Android runtime permissions powered by RxJava