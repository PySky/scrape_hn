The third publication from the Design & Architecture Series is going to be dedicated to the creation of Hybrid Test Framework Controls and their Selenium WebDriver implementation. First, I am going to show you how to create several controls' interfaces that will be part of the Hybrid Test Framework Core project. After that, I am going to guide you through the process of their concrete implementation via Selenium WebDriver. Finally, you will see a fully working test example.

This is the interface for all elements that can have an inner text. You can get their text through the Content property and Hover on them.

The concrete Selenium Driver implementation inherits from the Element base class. You can find its code in my previous article Create Hybrid Test Automation Framework - Selenium Driver Implementation. Also, to be able to use the control in the hybrid mode, we need to implement the IContentElement interface.To get the text of the WebDriver element, we use the Text property of the IWebElement interface. To simulate hover over the item we use the Selenium Actions class.

The only particular part of the interface is the Url property.

The Anchor class inherits from the ContentElement base class instead from the Element class. We use the GetAttribute IWebElement's method to get the HREF of the item.

We can use the Selected property of the IWebElement interface to find out if the checkbox is checked. To check or uncheck the item we just use the Click method. It is possible to have only a single Check method with a boolean parameter carrying the information for the check status.

Through the SelectedValue property, we get a string representation of the currently selected item. SelectValue method selects an option by its text value. If we need, we can add more variations of this method (select by index).

The pure WebDriver doesn't provide an easy way to work with comboBoxes. However, we use the SelectElement wrapper, part of the Selenium.Support NuGet. Through its SelectedOption property, we can get the currently selected item. Also, it provides a couple of different methods to select options. You can read more about it in my article- Getting Started with WebDriver C# in 10 Minutes.

To simplify the API, we can get or set the text box's text though the Text property. Also, you can check if the item is disabled or enabled via the IsEnabled property. The Focus method is identical to Hover.

To get the text of the text box, we can use again the GetAttribute method but this time we get the value attribute. The Focus method's implementation is identical to the one of the Hover method.

The Div element is nothing more than a content element. However, to be able to use it in a hybrid manner we need to have a separate class.

Sometimes there are more complex controls such as the Kendo Grid. The interface contains the most common usages of the control wrapped as C# methods.

You can read a lot more in my dedicated article- Automate Telerik Kendo Grid with WebDriver and JavaScript.

Here there is nothing different compared to the examples from the previous articles. We just pass the IElementFinder and INavigationService interfaces to the constructor of the base page class. You can read more about this type of page objects in my dedicated article- Page Objects That Make Code More Maintainable.

The most interesting part is situated here. All properties do not return the WebDriver's IWebElement interface. To support different driver's implementations, the page object map now uses the different hybrid test framework's interfaces. Their concrete implementation will be resolved at runtime through Unity IoC container.

As in the previous article's test code, we first register all driver instances. They will be resolved as their Selenium Driver implementation. The same is valid for all web controls. So when you resolve the BingMainPage, the SeleniumDriver is passed as parameter to the page object's constructor. Also, when the ElementFinderService tries to determine the different controls' interfaces, it will get their WebDriver's implementation.|||

Build a Hybrid Test Automation Framework. Your next step will be to create a Selenium WebDriver implementation of most used web controls.