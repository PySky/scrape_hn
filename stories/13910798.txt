For several months I've been thinking on a composable way of constructing render pipelines for a given 3D rendering engine.

The objects we are going to use and describe are: , and .

A is like any other camera on a rendering engine. This object will have the normal data associated with it (matrices, position, etc). Aside from the common data, it is going to have a reference of one Render Pipeline.

This way we can describe that the Camera will have a relation of with a Render Pipeline.

Something like this:

A will have a collection of interconnected Passes that will describe the flow of the rendering process's execution. This will describe a relation between Pipelines and Passes to be .

This Pipeline will expose an API to add new Passes and assign order of execution to them. This way, when we call the function all the Passes will be executed.

Something like this:

A is an object that from a given list of meshes and materials (plus some other data) will decide which rendering operations will be executed. Normally that list of meshes will be the meshes inside the frustum of the Camera.

Also, a Pass will include some support solution to hold the rendering output (like a Render Target) and will make that data available to other Passes of the Pipeline.

And these are some concepts Passes can achieve (or output):

The Pass class can derive into many different and specialized types of Passes, with this in mind we can have something like:

And a derived Pass that will render to texture:

These three ideas, , and can be composed together to construct all sort of rendering processes that can achieve almost anything on a rendering engine.

Here we can see an example of how the internal structure would look like:

Above we can see the structure of those Pipelines with their own inner Passes. We can see how the Camera1 has a very simple Pipeline using only 1 Pass.

On the Camera2 and Camera3 we can see how the Pipelines use more Passes, and how those Passes use previous Pass results to achieve the proper render process.

As far as I know, I found these Pros and Cons to this design.|||

For several months I've been thinking on a composable way of constructing render pipelines for a given 3D rendering engine. Objects The objects we are going...