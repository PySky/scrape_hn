Redis is widely by the Ruby community but, like any complex piece of infrastructure, isn't well understood by many of its users. I wanted to write a blog post that would answer the question: How can I check on the health of my Redis server? Here's a few things you can do to better understand your Redis server.

The command is the easiest way to get an overall view of Redis:

There's a few very important pieces to note in the output:

Memory is the most important thing to note here. Your entire dataset size must fit into machine RAM. If it does not, the resulting swapping will lead to terrible performance and massive latency spikes.

will give you the most important details in a real-time view you can watch or scrape:

is a very powerful tool with lots of nice features within it. It's worth running and playing with the various options and modes.

Latency is the time difference between request and response, e.g. the client sends a command and gets a result back in 10ms. We want this round trip to be as fast as possible. Really bad latency can trigger "Operation timed out" exceptions in your application. There are two general latency sources:

You can see the current network latency easily:

This shows a minimum of 0ms and max of 1ms, averaging 290Âµs, latency to my localhost server. Ideal conditions.

You can also easily watch latency history, here with a default window of 15 sec:

You can see the first window looks pretty good, the second window had a spike of 256ms, and the third had a spike of 3062ms (ouch!).

I triggered these spikes by running . Not recommended in production.

Redis also has a latency event and monitoring subsystem to track commands execution latency and operations (like forking) which might block command processing. Use the LATENCY commands to monitor and collect these events. Some commands can be naturally slow, see SLOWLOG below.

Because it is single-threaded, it's vitally important that all commands to Redis process quickly or one slow command can block everyone else for a significant amount of time. Redis includes a configurable SLOWLOG command to watch for these bad apples.

My Redis is configured by Homebrew to log any commands that take longer than 10ms, a sensible default. Run this on your instance and see if you find anything suspicious:

There are four parts to each entry: 3 is a unique identifier, 1492461257 is the timestamp when it happened and 11825 is the number of microseconds for execution, 11.825ms. The last part is the command with arguments.

I happen to know that entry is an LPUSH to the queue of 10,000 jobs. It's a testcase for Sidekiq::Client's API. Since we're enqueueing 10,000 jobs at once, it's not surprising that might take almost 12ms.

It is safe to run SLOWLOG in production and highly encouraged. In fact, I would play with values until you find a setting that catches unexpectedly slow things but does not contain a lot of "normal" commands from your application. If you find the slowlog is constantly full, redesign your system so it doesn't run those slow commands. For instance, if you want to enqueue 10,000 jobs, perhaps you could call 10 times with 1000 jobs each, so each invocation only takes 1/10th as long. If a piece of OSS is running a slow comamnd, open an issue so the maintainer knows about the problem. I'm not too proud to admit it's happened several times with Sidekiq; I fix them as fast as I can!

When I was managing technical operations, my team was responsible for monitoring our infrastructure. We would do things like:

Part of owning your infrastructure is monitoring its health proactively; understanding these tools and having quick access to this data will be invaluable when debugging failures and outages.|||

