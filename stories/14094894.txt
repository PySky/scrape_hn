One common Systems Design task in interviews is to sketch the software architecture of a URL shortener (a bit.ly clone, so to say). Since I was playing around with Rocket, why not give it a try?

Let's call our service (Hint, hint: the domain is still available at the time of writing...).

First we create a new Rust project:

Next, we add Rocket to our :

Warning: Most likely you need to get the very newest Rocket version. Otherwise you might get some entertaining error messages. Check out the newest version from crates.io.

Since Rocket requires cutting edge Rust features, we need to use a recent nightly build. Rustup provides a simple way to switch between stable and nightly.

Now we can start coding our little service. Let's first write a simple "hello world" skeleton to get started. Put this into :

Under the hood, Rocket is doing some magic to enable this nice syntax. More specifically, we use the crate for that. (It's implemented as a compiler plugin, which is also the reason why we need to use nightly Rust.)

In order to bring the rocket library into scope, we write .

We defined the two routes for our service. Both routes will respond to a request.

 This is done by adding an attribute named to a function. The attribute can take additional arguments. In our case, we define an variable for the endpoint and a variable for the endpoint. Both variables are unicode string slices. Since Rust has awesome unicode support, we respond with a nice emoji just to show off. ðŸ•¶

Lastly we need a main function which launches Rocket and mounts our two routes. This way, they become publicly available. If you want to know even more about the in-depth details, I may refer you to the official Rocket documentation.

Let's check if we're on the right track by running the application.

After some compiling, you should get some lovely startup output from Rocket:

So far so good.

We need to keep the shortened URLs over many requests... but how? In a production scenario we could use some NoSQL data store like Redis for that. Since the goal is to play with Rocket and learn some Rust, we will simply use an in-memory store.

In our case, we want to manage a repository of URLs.

Witihin this module we first import the implementation from the standard library. We also include , which will help us to shorten the URLs in the next step. Don't worry too much about that for now. By convention we implement a method to create a new Repository struct with an empty and a new . Additionally we have two methods, and .

takes a URL and writes it to our in-memory HashMap storage. It uses our yet to be defined shortener to create a unique id. It returns the shortened ID for the entry. gets a given ID from the storage and returns it as an . If the ID is found, the return value will be , if there is no match it will return .

Note that we convert the string slices ( ) to using the method. This way we don't need to deal with lifetimes. As a beginner, don't think too hard about them.

A seasoned (Rust) Programmer might do a few things differently here. Did you notice the tight coupling between the repository and the shortener? In a production system, and might simply be concrete implementations of traits (which are a bit like interfaces in other languages, but more powerful). For example, would implement trait:

This way we get a clear interface and we can easily switch to a different implementation (e.g. a ). Also we could have a to simplify testing. Same for .

You might also want to use the trait to support both, and as a parameter of :

If you're curious about this, read this article from Herman J. Radtke III. For now, let's keep it simple.

Let's implement the URL shortener itself. You might be surpised how much was written about URL shortening all over the web. One common way is to create short urls using base 62 conversion.

After looking around some more, I found this sweet crate called harsh, which perfectly fits the bill.

To use , we add it to the dependency section of our :

Next, we add the crate to the top of to our :

Let's create a new file named and write the following:

With we bring the required structs into scope. Then we define our own struct, which wraps . It has two fields: stores the next id for shortening. (Since there are no negative ids, we use an unsigned integer for that.) The other field is the itself, for which we use . Using the you can actually do a lot of fancy stuff, like setting a custom alphabet for the ids. For more info, check out the official docs. With we retrieve a new id for our URLs.

As you can see, we don't pass the URL to . That means we actually don't shorten anything. We merely create a short, unique ID. That's because most hashing algorithms produce fairly long URLs and having short URLs is the whole idea.

So we are done with our shortener and the repository. We need to adjust our again to use the two.

This is the point where it gets a little hairy.

I have to admit that I struggled a bit here. Mainly because I was not used to multi-threaded request handling. In Python or PHP you don't need to think about shared-mutable access.

Initially I had the following code in my :

State is the built-in way to save data across requests in Rocket. Just tell it what belongs to your application state with and Rocket will automatically inject it into the routes.

But the compiler did not like that:

What would happen if two requests wanted to modify our repository at the same time? Rust prevented a race condition here! Admittedly the error message could have been a bit more user-friendly, though.

Fortunately, Sergio Benitez helped me out on the Rocket IRC channel (thanks again!). The solution was to put the repository behind a Mutex.

Here is the full in its entirety:

As you can see we're using a std::sync::RwLock here, to protect our repository from shared mutable access. This type of lock allows any number of readers or at most one writer at the same time. It makes our code a bit harder to read, because whenever we want to access our repository, we need to call the read and write methods first.

In our method, you can see that we are returning a Result type now. It has two cases: if we find an id in our repository, we return , which will take care of the redirect. If we can't find the id, we return an .

In our method, we switched from a to a request. The advantage is, that we don't need to deal with URL encoding. We simply create a struct and derive FromForm for it, which will handle the deserialization for us. Fancy!

We're done. Let's fire up the service again and try it out!

In a new window, we can now store our first URL:

We get some ID back, that we can use to retrieve the URL again. In my case, this was . Go to your browser and request it: http://localhost:8000/gY You should be redirected to my homepage.

Rocket provides awesome documentation and a great community. It really feels like an idiomatic Rustlang web framework.

I hope you had some fun while playing with Rocket.

 You can find the full example code on Github.|||

Personal website of Matthias Endler. A Software Engineer interested in low-level programming and Backend Development. PHP, Python, Go, Rust.