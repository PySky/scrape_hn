tradeship statically analyzes your JavaScript code for identifiers that aren't defined and finds the appropriate dependencies to import. It also removes imports that aren't used. tradeship is meant to be used as an editor plugin that manages your imports.

Install tradeship using npm or yarn. It's recommended to either install tradeship globally or make the local installation available on your path (e.g. by adding to your shell configuration), since editor plugins make use of the executable.

Then, install the editor plugin of your choice:

Each editor plugin has instructions on how to run tradeship on the current file being edited. You can also configure each plugin to run tradeship on save. See the respective links above for more information.

The first time tradeship runs in a project directory with many JavaScript files, it'll take some time to parse and cache dependencies. Future runs will be much faster. If you'd like to use tradeship in a large project, it's recommended to run it once on the command-line, as shown below, so you can see the progress as it populates the cache:

Replace with any path to a JavaScript file in your project directory. Note that this won't modify the file in any way; it'll just print the new code to stdout. See the Command Line Interface section for details.

tradeship doesn't need any configuration to work out of the box. By design, almost nothing is configurable, as tradeship automatically infers style from your code. There is, however, one configuration option that you may want to tweak: environments.

To correctly find identifiers that aren't defined, tradeship needs to know what global variables are available. It does this through environments, where each environment defines a set of global variables that come with it. tradeship piggybacks on eslint's configuration system to avoid introducing another configuration file and format.

In eslint, you specify the environments you want in your configuration file, generally at the root of your project directory. tradeship searches for an eslint configuration file (either , , , , , or an object in ) within the code's directory or successive parent directories.

When it finds one, it looks at the object to determine the active environments. An example configuration object is:

Each key is an environment name, and the corresponding value is whether that environment is active. See eslint's guide to specifying environments for more details about the available environments.

If there's no configuration file, assumes the environments , , and , bringing in globals from the browser (e.g. and ), from node.js (e.g. and ), and from ES6 (e.g. and ).

Note that tradeship makes all the node.js standard libraries available for import if and only if the environment is active.

Using an editor plugin (see section above) is the easiest way to get started with tradeship, but you can also use the command line interface (which all editor plugins use internally).

Reads the code given at . Outputs new code to stdout, adding missing dependencies and removing unused ones. The are as follows:

The full help text is below:

tradeship exposes a simple node.js API if you'd like to use it programmatically:

is the directory used to resolve relative imports and find available npm packages (generally the directory where the comes from). is the actual JavaScript code. returns a promise that, when resolved, gives the resulting new code.

analyzes dependencies from three sources: node.js standard libraries, package.json dependencies, and other files within your project directory.

For each dependency it finds, tradeship:

An import name is a variable name you might see in code that refers to the dependency. For instance, the import name would refer to the node.js standard library. The import name would refer to the npm package. For node.js standard libraries and package.json packages, if the library/package name is itself a valid JavaScript identifier, it and its capitalized version are potential import names (e.g. and for the npm package). If the library/package name has non-word characters or underscores, it is split on and the parts are joined, both in camel and class case, to get two more import names ( and for the node.js standard library). There are various package.json packages that are imported under common aliases known by the community (e.g. for jQuery, for lodash/underscore, for ava, etc.). By analyzing more than 100 GB of public JS code on GitHub, tradeship knows many such aliases, and will import the associated package. For project files, the code is statically analyzed to find an import name. For instance, if you write , will be an import name. This is one simple case; there are many others that tradeship parses, including those with ES6 syntax. In addition to the analyzed import name, tradeship also uses the file path's base name as an import name, using the same logic as defined for node.js standard library names above. These are JavaScript object properties that are exported by the dependency. For instance, is a property of the node.js standard library. is a property of the npm package. The import name of properties is equivalent to the property name. For node.js standard libraries and package.json packages, the library is loaded within a separate node.js process, and properties are extracted using . For project files, the code is statically analyzed to find properties. For instance, if you write , will be a parsed property. This is one simple case; there are many others that tradeship parses, including those with ES6 syntax.

Then, tradeship analyzes your code for identifiers that aren't defined. Each identifier is a potential import name, and tradeship searches for the corresponding dependency or property. If it finds a match, it adds the appropriate import to the code. If multiple dependencies or properties match a given import name, tradeship prioritizes them as follows:

tradeship groups all node.js and package.json dependencies together, sorted lexicographically. It then adds a blank line and all project file dependencies, also sorted lexicographically.

tradeship finds all imports that aren't used and removes them.|||

tradeship - Automatically imports missing JavaScript dependencies and removes unused ones.