It is a common fact that the .NET object model, as well as other software program platforms, allow comparing objects by reference and by value.

By default, two objects are equal if the corresponding object variables have the same reference. Otherwise, they are different.

However, in some cases, you may need to state that two objects belonging to the same class are equal if their content match in a certain way.

Assume we have the Person class, which contains some personal data – First Name, Last Name, and Birth date.

Consider the following points:

For each case, we will see the best way to compare objects by value to get a consistent, compact, copy-paste free, and productive code. It is not as trivial as it may seem for the first time.

In addition, we will see what modifications may be added to the platform to simplify the task implementation.

We have a great choice of methods to compare objects:

Objects are equal if object references are equal. The same rule applies for hash sets and dictionaries.

To compare objects by value in a client-side code it is necessary to write the following type strings:

To use the following methods for the Person class object comparison:

You need to override Object.Equals(Object) and Object.GetHashCode() methods in the following way:

When two unequal objects have the same hash-code, you may minimize collision by using different optimizations).

I would like to draw your attention that according to the documentation the Equals(Object) method can be used when it meets the following requirements:

Also, we should keep in mind that according to the documentation as the value we receive using the GetHashCode() method is not constant, we should neither store it to our disk nor to a database nor use it as a key or as a way to compare objects.

Consider how the Equals(Object) method is implemented:

To improve the code readability and allow code reusing, we have created EqualsHelper.

So far, we have implemented only a part of required functionality to compare objects by value. Still, we have some questions.

The first one is theoretical.

Consider the requirement of the Equals(Object):

I wonder why some instance methods in a standard .NET library check this to null – for example, the String.Equals(Object) method does this:

This method checks this to null. If it is true, then NullReferenceException is thrown.

The comment specifies when this equals null.

To compare this to null, I have used a == operator which is overloaded in the String class. Thus, it would be better to cast this to object explicitly: (object)this == null. Alternatively, you may use the Object.ReferenceEquals(Object, Object) method.

Read this article to get detailed information on this topic: When this == null: a True Story of the CLR World.

However, in this case, if we call the overloaded method Person.Equals(Object) without creating an instance and pass null as an input parameter then (if ((object)this == obj) return true;) that does not meet method requirements.

In addition, the documentation does not specify, should we check this to null and throw an exception if this check is successful.

Thus, I suggest additional requirements to the Equals(Object) method which is as follows:

The second question regarding the Equals(Object) method implementation is more interesting than the previous one and has an applied meaning.

It refers to the correct implementation of the following requirement:

We have analyzed whether all the requirements and the examples of the method implementation are specified in the documentation and if there are any alternative ways to implement this method. We will talk about the previous question as well as a full set of class modifications to compare its objects by value in the following publications.

Comparing Objects by Value. Part 2: Implementation Notes of the Equals Method

Comparing Objects by Value. Part 3: Type-specific Equals and Equality Operators|||

This article describes a minimum set of modifications to compare objects by value with the help of the standard .NET architecture