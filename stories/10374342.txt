Â¹Reflection is still used to inflate views once (standard XML inflater does the same thing, so no performance loss here).

Anvil comes in multiple builds for different minimal SDK versions:

API levels 16, 17, 18, 22 or 23 are not added because they had very few UI-related methods added.

Normally you would write your layouts in XMLs, then get your views by their IDs and set their listeners, finally you would observe your data and modify view properties as your data changes.

Anvil simplifies most of this boring routine.

First, add a static import that makes it much easier to write your view:

Next, declare your layout, assign event listeners and bind data:

Here we've created a very simple reactive view and added it to our Activity. We've declared our layout (a LinearLayout with a TextView inside). We've defined styles (width, height, orientation and padding). We've set OnClickListener to the button. We've also bound a variable "ticktock" to the text property inside a TextView.

Next, let's update your views as your data changes:

At this point your layout will be updated and the TextView will contain text "Tick-Tock: 1" instead of "Tick-Tock: 0". However the only actual view method being called would be setText().

You should know that there is no need to call Anvil.render() inside your event listeners, it's already triggered after each UI listener call:

You may find more Anvil examples for Java 6, Java 8 and Kotlin at

No magic. When a renderable object is being constructed there are 3 types of operations: push view, modify some attribute of the current view, and pop view. If you're familiar with incremental DOM - Anvil follows the same approach.

Pushing a view adds it as a child to the parent view from the top of the stack. Attribute modification simply sets the given property to the current view on top of the stack. Pop unwinds the stack.

When you mount this layout (assuming the is "John"):

It does the following sequence of actions:

The only trick is that these actions are cached into a so called "virtual layout" - a tree-like structure matching the actual layout of views and their properties.

So when you call next time it compares the sequence of actions with the cache and skips property values if they haven't change. Which means on the next call the views will remain untouched. This caching technique makes render a very quick operation (having a layout of 100 views, 10 attributes each you can do about 4000 render cycles per second!).

Now, if you modify the from "John" to "Jane" and call Anvil.render() it will do the following:

So if you modify one of the variables "bound" to some of the attributes - the cache will be missed and attribute will be updated.

For all event listeners a "proxy" is generated, which delegates its method calls to your actual event listener, but calls after each method. This is useful, because most of your data models are modified when the user interacts with the UI, so you write less code without calling from every listener. Remember, no-op renders are very fast.

Anvil is written in Java 7, but its API is designed to use lambdas as well, so in modern times it's recommended to use Anvil with Java8/Retrolambda or Kotlin.

Syntax is a bit different for each language, but it's very intuitive anyway.

Anvil library contains only a few classes to work with the virtual layout, but most of the DSL (domain-specific language describing how to create views/layouts and set their attributes) is generated from .

Here's a list of classes and methods you need to know to work with Anvil like a pro:

The bottom part of the iceberg is Anvil DSL.

DSL consists of a few handwritten property setters, but most of it is generated from java classes in the android SDK.

See a full list of the DSL methods for each API level here.

The setters are named as the view methods from Android SDK, but without the "set" prefix. E.g. "text(s)" instead of "setText(s)", "backgroundDrawable(d)" instead of "setBackgroundDrawable(d)" and so on.

Event listeners also have names from the Android SDK, but without the "set" prefix and the "Listener" suffix, e.g. "onClick" instead of "setOnClickListener".

For LayoutParams the bindings can't be generated easily, so it was faster to write them manually:

A few bindings have been written for other use cases which we find useful:

If a binding you need is not in the list - please, check issue #27 and report it there.

Finally, a few low-level DSL functions are there, which you would no need unless you want to write your own property setters or custom view builders:

If you're migrating an existing project to Anvil or if you prefer to keep your view layouts declared in XML - you can do so:

Here creates a view node, much like or , except for it uses an XML file to inflate the views, not the direct view class constructor. Much like view "builders", takes a renderable lambda as a parameter and uses that to modify the created view.

Any attribute setters will affect the root view from the XML layout.

If you want to modify attributes of the child views from the XML - you should use to assign a renderable to a view with the given ID. You may not follow the hierarchy of the child views, e.g. all your calls may be nested as the views are nested in the XML, or may be direct children of the renderable. calls can be nested, too.

also allows you to create views that can not be inflated from Java code but only from XML (such as hostozintal progress bars) or any other views where AttributeSet must be given or the views that rely on the method to be called.

call is not limited to XML views, it can be used for views declared in code that have IDs. So if you have a custom viewgroup that creates its child views automatically and assigns some IDs to them - you can still modify their properties using . Also, if any views are created inside the or - they will be appeneded to the view group:

Code is distributed under MIT license, feel free to use it in your proprietary projects as well.|||

anvil - Minimal UI library for Android inspired by React