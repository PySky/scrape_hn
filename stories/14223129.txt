analyzes un-instrumented ELF core files for leaks, memory growth, and corruption. It is sufficiently reliable that it can be used in automation to catch leaks before they are committed. As an interactive tool, it helps explain memory growth, can identify some forms of corruption, and supplements a debugger by giving the status of various memory locations.

currently supports only glibc malloc. It does not support jemalloc or tcmalloc.

Traditionally, memory analysis for C and C++ requires instrumentation. However, if an incident occurs using code that was not instrumented it may not be practical to reproduce the problem. For example, it may have been due to a rare execution path, or resources required for the reproduction setup may not be available. Instrumentation may also distort timing enough that it is not practical to run on a regular basis, or it may be incomplete and report false leaks.

is distributed as source, so first build it (on 64-bit Linux):

If that doesn't work out of the box, see CONTRIBUTING.md for pre-requisites and other details.

Once built, here's a trivial example of an interactive session:

For more information on how to use , please see the built-in help and the USERGUIDE.md.

The best way to communicate with the maintainers is via the GitHub issue tracker.

We welcome contributions from the community. Please see CONTRIBUTING.md for details.

If you wish to contribute code and you have not signed our contributor license agreement (CLA). Our bot will update the issue when you open a pull request. For any questions about the CLA process, please refer to our FAQ.

is available under the GNU GENERAL PUBLIC LICENSE Version 2. Please see LICENSE.txt.|||

chap analyzes un-instrumented core files for leaks, memory growth, and corruption