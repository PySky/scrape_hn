My post on pointers provoked a lot of debate about maps and pass by reference semantics. This post is a response to those debates.

To be clear, Go does not have reference variables, so Go does not have pass-by-reference function call semantics.

In languages like C++ you can declare an alias, or an alternate name to an existing variable. This is called a reference variable.

You can see that , , and  all refer to the same memory location. A write to  will alter the contents of  and . This is useful when you want to declare reference variables in different scopes–namely function calls.

Unlike C++, each variable defined in a Go program occupies a unique memory location.

It is not possible to create a Go program where two variables share the same storage location in memory. It is possible to create two variables whose contents point to the same storage location, but that is not the same thing as two variables who share the same storage location.

In this example,  and c hold the same value–the address of –however,   and  themselves are stored in unique locations. Updating the contents of  would have no effect on .

Wrong. Maps and channels are not references. If they were this program would print .

If the map was a C++ style reference variable, the  declared in  and the  declared in  would occupy the same storage location in memory. But, because the assignment to  inside  has no effect on the value of  in main, we can see that maps are not reference variables.

Go does not have pass-by-reference semantics because Go does not have reference variables.

Next: If a map isn’t a reference variable, what is it?|||

