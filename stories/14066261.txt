When first exposed to the .bash_history file most users are appalled that their commands are being stored. Some systems administrators get an evil look in their eyes. Both are highly overrated responses. This file is actually extremely helpful and understanding how to fully utilize bash's history functions are paramount to being able to quickly recall commands and navigate the terminal.

An aside for evil systems administrators: reading .bash_history files is one of the least useful methods of monitoring used on a server for a number of reasons, including that any sufficiently malicious user wouldn't leave their commands behind.

History is maintained both in a file .bash_history and in ram (manipulated with the command and environment variables). It is important to note that the history contained in ram is only written after a user logs out of his or her session.

Let's take a look at some of the important bash history variables and their explanations:

The HISTCONTROL shell variable has four settings that define a set of standard rules that can used to determine which lines typed into the shell will be recorded into the history file.

These values can be changed using the export command, followed by the variable to set and its value. We're going to set up a small environment for testing, beforehand lets take a look at the default values.

Now let's limit the history to ten lines.

Now that we understand the various settings used by bash's history, let's fill it with some lines and then take a look at how we can get to that quick-recall of commands.

It is important to note the numbers shown before the command line. The first command was given the number 1, while commands after each got incremented by one. Your last command will always have the highest number, while the older the command the lower the number.

The numbering comes into play when we look at the bang bang operator. You can rerun previous commands by addressing them by number, or be âN commands agoâ. Let's take a look:

The first command we used asked bash to run the second to last ( ) command again. By looking at the code example above this we see that the last command was and the one previous was . was run again. The expanded to the command, and was added back to the history file as the last command.

After this we ran Bang-Bang, or !!. This expands to the very last command that was run (shorthand for !-1). Because the âvim script.plâ was expanded and added to the history file, this is the command that was run.

Finally, we addressed the very first command by its actual index number, 1. This ran .

Taking a look at the history command now we notice something. Although was run twice in a row, the second time it's not shown. This goes back to the HISTCONTROL setting, which works against expansion with Bang-Bang operators.

It is worth noting that the Bang-Bang operators here do not have to be run on a line exclusively. You can combine them with literal text to have the expansion fill in, so that both the expansion and the literal strings are combined into one line that is executed.

The double lines here are the result of the Bang-Bang operator printing the line that was executed before actually executing the line.

Suppose that you would like to take the last argument to the last command and use it in your current line. You can use the Bang-Cash operator.

You can complete previous commands by the first few characters of the command as well. The Bang Command operator takes a string and matches it against previous commands executed. The matching is done such that the string is anchored to the beginning of the command, and an implicit * is attached to the end. It searches ordered based on the most recent commands executed.

In the situation where you know a part of the string which is not anchored to the beginning, or wish to search another part of the sting (for instance, looking at an IP address you recently nmap'ed or sshed to) you can use the Bang-Question-Mark-String operator.

If you're not too sure about the command you're about to run with a Bang operator, you can always use colon p ( ) to print the line that would be run without executing it. Because the expansion will be added to the history file, you can simply up-arrow-enter if it matches. It is worth noting that :p is a shortcut for . If you're using substring searching, you will need to use to have the same effect. If you're using string searches, or by number you can simply use .

Although we've been using substring matching against the first part of an argument, it can be used against any portion of the strings in an argument. Searching for 168 would have yielded the exact same results above.

You may run into errors if your commands don't actually match anything in the history.

You can delete an entry from the history list by passing the switch and the number of the command in the history index to delete it.

After deleting an entry in history, the number will be replaced with the next command that was run.

You can also clear the history completely with the switch.

Bash history is extremely powerful and can save a great deal of time that would otherwise be spent with one's finger down on the up-arrow searching for a previous-entered command.|||

