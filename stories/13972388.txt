I will only show the request handling code here, but the full example is available on Github.

Let’s start with an example. Say we have an amazing website with a login to protect some private data we made available to our users at .

We won’t make this example too complicated, so let’s say everyone logs in using the same password: and we will use cookies to protect the private data:

Our website also offers a public API at to get some public data, too:

Now our “API” isn’t particularly well-designed or fancy, but we could allow others to fetch data from our URL.

Say, our API lives at and our client is hosted on , the client might run the following code:

Let’s take a look at the network tab for :

The request was successful, but the result was not available. The reason can be found in the JavaScript console:

Aha! We are missing the header. But why do we need it and what is it good for?

The reason why we won’t get the response in JavaScript is the Same-Origin Policy. This policy was aimed at making sure that a website can’t read the result from a request made to another website.

For instance: If you are on you would not want that website to make a request to your banking website and fetch your account balance and transactions. The Same-Origin Policy prevents exactly that.

The “origin” in this case is composed from

So and and are three different origins.

Note that there is a class of attacks, called Cross Site Request Forgery that is not affected by the Same-Origin Policy.

In a CSRF attack, the attacker makes a request to a third party page in the background, for instance by sending a POST request to your bank website. If you have a valid session with your bank, any website can make a request in the background that will be carried out unless your bank uses counter measures against CSRF.

Note that despite the Same-Origin Policy being in effect, our example request from was successfully carried out to - we just could not access the results. For CSRF we don't need the result...

Now we do want to allow the JavaScript on third party sites (such as ) to access our API responses. To do so, we can enable the CORS header as the error said:

Here we are setting the header to which means: Any host is allowed to access this URL and the response in the browser:

The previous example was a so-called simple request. Simple requests are or requests with a few allowed headers and header values.

And changes the implementation a little, too:

But this breaks thirdparty.com again!

This time the network panel shows us the reason:

Any request that is using a method that isn’t or or uses a content type that isn't

Any other header that isn't allowed for simple requests requires a preflight request.

This mechanism is meant to allow web servers to decide if they want to allow the actual request. The browser sets the and headers to tell the server what request to expect and the server answers with corresponding headers.

Our server doesn’t answer with these headers yet, so we need to add them:

Now thirdparty.com can access the response again.

Now let’s assume that we are logged in on good.com and can access the URL with the sensitive information.

With all our CORS settings, can another site, say get this sensitive information?

No matter if we are logged in to good.com or not, we will see “Please login first”.

The reason is that the cookie from good.com will not be sent when the request comes from another origin, in this case evil.com.

We can ask the browser to send the cookies along, even when it’s a cross-origin domain:

But again this won’t work. That is great news, actually.

Imagine any website could make authenticated requests — the request will be made but won’t send the actual cookie and the response is inaccessible.

So, we don’t want evil.com to be able to access this private data — but what if we want thirdparty.com to have access to ?

In this case we need to set the header to :

But this will still not work. It’s a dangerous practice to allow every origin to carry out authenticated cross-origin requests.

The browser does not allow us to make this mistake this easily.

When we want to allow thirdparty.com access to we can specify this origin in the header:

Now has access to the private data as well, while evil.com is locked out.

Now we have allowed one origin to do cross origin requests with authentication data. But what if we have multiple third parties?

In this case, we probably want to use a whitelist:

Again: Do not directly send as the CORS origin header. This would allow any website access to authenticated requests to your site.

There may be exceptions to this rule, but think at least twice before implementing CORS with credentials without the whitelist.

In this article we’ve looked at the Same-Origin Policy and how we can use CORS to allow cross-origin requests when required.

This requires server- and client-side settings and depending on the request will cause a preflight request.

Additional care should be taken when dealing with authenticated cross-origin requests. A whitelist can help to allow multiple origins without risking to leak sensitive data (that is protected behind an authentication).|||

Let’s start with an example. Say we have an amazing website with a login to protect some private data we made available to our users at /private. We won’t make this example too complicated, so let’s…