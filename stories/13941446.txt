In this article, we are going to explore deeper TensorFlow capacities in terms of variable mutation and control flow statements.

So far, we’ve used Variables exclusively as some weights in our models that would be updated with an optimiser’s operation (like Adam). But optimisers are not the only way to update Variables, there is a whole set of higher order functions to do so (Again, see those functions as a way to add operations in your graph).

The most basic function to make custom updates is the operation. It takes a Variable and a value, and assign the value to the Variable, simple.

let’s start with an example:

Nothing fancy here. It works just like any other operations: you call it within a and the operation ensure that the mutation happens so your Variable gets updated.

Compare this call to the usual optimiser call. Both do the same thing: mutate data. The only difference is that the optimiser is doing a whole lot of calculus before applying mutations to your Variables.

TF support many other functions to do manual updates, see them as helper functions. All of them could be replaced by some clever tensor operations followed by a call, but that would be cumbersome. So, TF provides two kinds of mutation operations for us:

I won’t dig into all those helper functions. Some of them can be hard to wrap your head around, my best advice is just to experiment with them on a very simple script before using them into your models, you will earn time…

One last word about mutation: what if we would like to change the shape of our Variables? For example, adding a row/column on the fly right inside our graph? So far i’ve been only talking about “assigning” new values.

Let’s see an example:

OK! That was not too hard, let’s move on.

We can update Variables, but if you start to put assign calls all around your code, you will soon end up calling multiple times to control them. This is not practical nor efficient. Remember, the more we stay in the graph, the more efficient we are.

Welcome in the realm of control flow. TF provides a set of functions to order your operations when they are not fully dependent.

Let’s start simple: we will build a graph doing a simple multiplication between a and a . We would like increment this before each call we make to our multiplication. How do we actually do that ?

If we start the naive way, by just adding an call, we will end up with something like this:

It doesn’t work at all: our is not incremented and we keep outputting .

If you look at the code above and try to build mentally a computation graph, you will clearly see that this graph doesn’t need to compute the to compute the output of the multiplication between and : is already perfectly defined with the initialised value .

To fix this, we need a way to force TF to run the .

Hopefully, that does exist! We can add what is called a control dependency. This works just like Graph or Variables scope, we use it in conjunction with the python statement .

Let’s see an example:

Everything works fine. TF see a dependency so it runs the before compute anything under the dependency scope, here is a visualisation:|||

In this article, we are going to explore deeper TensorFlow capacities in terms of variable mutation and control flow statements. So far, we’ve used Variables exclusively as some weights in our models…