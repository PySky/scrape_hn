I find as I am building my redux app, one piece of functionality at a time, I keep needing to add tuples for each use case. I have been keeping these in separate files and even separate folders, however 95% of the time, it's only one reducer/actions pair that ever needs their associated actions.

To me, it makes more sense for these pieces to be bundled together in an isolated module that is self contained, and can even be packaged easily into a library.

See also: Common JS Example.

These same guidelines are recommended for bundles that are shared as reusable Redux libraries.

Java has jars and beans. Ruby has gems. I suggest we call these reducer bundles "ducks", as in the last syllable of "redux".

You can still do:

You can still do:

...and it will only import the action creators, ready to be passed to .

There will be some times when you want to something other than an action creator. That's okay, too. The rules don't say that you can only action creators. When that happens, you'll just have to enumerate the action creators that you want. Not a big deal.

React Redux Universal Hot Example uses ducks. See .

The migration to this code structure was painless, and I foresee it reducing much future development misery.

Although it's completely feisable to implement it without any extra library, there are some tools that might help you:

Please submit any feedback via an issue or a tweet to @erikras. It will be much appreciated.|||

ducks-modular-redux - A proposal for bundling reducers, action types and actions when using Redux