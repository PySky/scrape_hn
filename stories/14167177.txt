At IOpipe, we enable users of AWS Lambda to monitor, analyze, and tune their serverless architectures. Getting started is a breeze with the iopipe wrapper library.

The Serverless Framework is an indispensable tool for Lambda, OpenWhisk, and Azure functions-as-service development and deployment. Once you get the hang of launching functions with it, the sky's the limit. But when you have 10 or 100 functions, you might want to abstract your build pipeline further to include your favorite tooling + processes. There are plenty of powerful plugins already.

So to enable even easier integration with IOpipe, we made a plugin too.

The task of code modification shouldn't be taken lightly - and luckily we don't have to reinvent the wheel here. We can use an AST parser and builder to do the hard work for us. With the rise of varied JS build tools, AST libraries are certainly en vogue and we have plenty of options. For this project we use jscodeshift that provides some nice sugar on top of recast.

Now say we need some extra metrics for our little function - how often it runs, when it errors, why it was slow. It's time for IOpipe.

Nice and straightforward. The IOpipe library automatically records stats about the invocation and makes it ready for inspection in near real-time. How can we go from A => B automatically though?

Let's fire up jscodeshift and parse that üå¥. First, we need to find the AST "node" that we want to wrap.

This simply looks for the statement

With our code represented as a tree, the original formatting won't make a lick of difference. As long as it runs the same, we will still find the statement we need.

Within the Serverless plugin lifecycle, we know the functions defined in the and what the handlers are named. With this info, we can be fairly confident that the right side of the statement will be a function. This is the function we need to wrap.

We create a new AST node from raw text and insert the original function node into that.

Not bad! You can see the real thing here.

Serverless provides some great hooks to work with and the ones we are after here are

The plugin creates a temporary folder, copies the source code, applies transformations, and tells Serverless to use the transformed code instead of the source code. After it's done deploying the folder is deleted and we go on with our day. Thanks to Jonathan Goldwasser for inspiration from the Serverless Webpack Plugin.

While we're at it, why not keep your IOpipe npm package up to date? Upgrading automatically provides the latest speed, developer experience, and feature enhancements.

While the process of auto-upgrading the package could be a separate post, the main idea is to fire off a child process to run some npm commands. We ‚ù§Ô∏è yarn at IOpipe, so we also support that.

And check out the real stuff.

The IOpipe Serverless Plugin is now available in Beta for you to try out. Let us know what you think!|||

Activate analytics and alerts quickly by automatically wrapping your Serverless functions with IOpipe.