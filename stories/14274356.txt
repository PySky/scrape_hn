Some pipeline stages require ; they will simply not be loaded if is not found on the system, and will issue a warning. To use them you must also install scikit-learn.

You can create stages with the following syntax:

All pipeline stages have a predefined precondition function that returns True for dataframes to which the stage can be applied. By default, pipeline stages raise an exception if a DataFrame not meeting their precondition is piped through. This behaviour can be set per-stage by assigning with a bool in the constructor call. If is set to the input DataFrame is instead returned without change:

You can apply a pipeline stage to a DataFrame using its method:

Pipeline stages are also callables, making the following syntax equivalent:

The initialized exception behaviour of a pipeline stage can be overridden on a per-application basis:

Additionally, to have an explanation message print after the precondition is checked but before the application of the pipeline stage, pass :

To use other stages than the built-in ones (see Types of Pipeline Stages) you can extend the class. The constructor must pass the constructor the , and keyword arguments to set the exception message, application message and description for the pipeline stage, respectively. Additionally, the and abstract methods must be implemented to define the precondition and the effect of the new pipeline stage, respectively.

To create a custom pipeline stage without creating a proper new class, you can instantiate the class which takes a function in its constructor parameter to define the stage's operation, and the optional parameter to define a precondition (an always-true function is the default).

Pipelines can be created by supplying a list of pipeline stages:

Alternatively, you can create pipelines by adding pipeline stages together:

Or even by adding pipelines together or pipelines to pipeline stages:

Pipeline stages can also be chained to other stages to create pipelines:

Pipelines are Python Sequence objects, and as such can be sliced using Python's slicing notation, just like lists:

Pipelines are pipeline stages themselves, and can be applied to a DataFrame using the same syntax, applying each of the stages making them up, in order:

Assigning the parameter to a pipeline apply call with a bool sets or unsets exception raising on failed preconditions for all contained stages:

Additionally, passing to a pipeline apply call will apply all pipeline stages verbosely:

Package author and current maintainer is Shay Palachy (shay.palachy@gmail.com); You are more than welcome to approach him for help. Contributions are very welcomed, especially since this package is very much in its infancy and many other pipeline stages can be added.

To run the tests, use:

This project is documented using the numpy docstring conventions, which were chosen as they are perhaps the most widely-spread conventions that are both supported by common tools such as Sphinx and result in human-readable docstrings (in my personal opinion, of course). When documenting code you add to this project, please follow these conventions.|||

pdpipe - Easy pipelines for pandas DataFrames.