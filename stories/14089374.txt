The navigation drawer has become a ubiquitous UI feature on Android devices, but it's usually unnecessary to hide and show on larger devices like tablets. With plenty of screen real estate, the drawer should stay open all the time; the Material Design specs even recommend this behavior.  In this post, you'll learn how to reuse fragments to give your tablet and phone users a great experience.

The navigation drawer is easily implemented with the Design Support Library, and the best walkthrough on how to build a navigation drawer is in this tutorial by CodePath.

There are a few ways to accomplish this "always open" behavior on tablets by using , but I found them a bit hacky and inelegant. Additionally, by implementing CodePath's example, too much of the view logic would live in the hosted activity, so I set out to see if I could use fragments to solve this problem. Basically, we will have a master fragment that will be used for the drawer view and a detail fragment for the main view. We'll then reuse these fragments in a classic master/detail arrangement on tablets.

Get the source code for this project here.

If you're unfamiliar with navigation drawers, I suggest you run through the CodePath tutorial first. It'll take you maybe 30 minutes, and you'll have a better understanding of what we're going to do here.

Let's get started coding the building blocks of our app: the fragments and their layouts. We are going to keep things real simple so the UI is a bit ugly. Let's first create the layouts for our master and detail fragments:

We'll set some background color so we can easily distinguish the boundaries of our fragments. In this example, I have a simple list with three items, but feel free to use a or here depending on your needs.

Again, replace the detail list with whatever you want in the detail screen.

Now let's wire these layouts up to our fragments:

For this simple example, we are going to update the detail text color based on the selected master item. This will be a simple way to observe sending information from to .

Now we need to host these two fragments in our , but first let's create the layout for this activity:

There's a lot going on here. If you have used navigation drawers before or you read through the CodePath example, some of this should look familiar. We need to set a as our root view. Then, we need to add a as the container to insert our detail fragment. Now here is the cool part. Instead of including a inside , we'll actually use the as another container, this time for our master fragment.

So now we can wire all this up inside our Activity:

Again, a lot of this comes from the CodePath example:

The important parts of using fragments are creating our master and detail fragments and using fragment transactions to insert them into their respective containers. We'll also add fragment tags so that we can easily find our fragments later.

Next, we need to pass the clicked item ID from the master fragment "up" to our activity and then "down" to the detail fragment. We can use fragment callbacks to pass the item ID up to the activity. We can then add a public method on for the activity to pass the ID to the detail fragment. I won't go into details about how to set this up. Chances are you've done this before, but feel free to catch up here.

So our fragments and activity become:

At this point, we've basically reproduced the functionality of the CodePath example but with fragments. We don't have anything to show for our extra work yet, so now is the time to re-use our master and detail fragments to make the UI look different on larger screens.

We are going to use resource qualifiers to supply a different version of on screens with the smallest width greater than 600dp. This is a good initial guess at tablet size.

So create a resource directory and inside it create a new

This is a much simpler layout than . Again, we still have two containers for master and detail fragments. Note that the s need to match what we had in . We also need the . Lastly, we need to decide the relative spacing of the master/detail. I've quickly chosen a 1:4 split by using . This is really up to you. You may decide to just wrap the width of the master container and give all the remaining width to the detail. Your choice.

Now we need to head back to our Activity and make sure it can handle this new layout. We need to make just a few changes:

All we need to do is null check before setting up drawer view and menu icon before we try to close the drawer. If Android decides to use our , then the view hierarchy will contain a view with ID  . If Android decides to use , then the view hierarchy will NOT contain a view with that ID. In other words, we are able to use the presence of as an indication of whether we're on a large screen or not.

At this point, we are almost wrapped up. Checking our results on several phones and tablets indicates things are working as expected.

There is still one small thing that's bothering me. Let's compare the navigation drawer to pre-API 19 devices with newer ones:

Yuck! Navigation drawer looks terrible on devices API 19 and newer





Looks fine on devices older than API 19





When we followed the CodePath example, we used a transparent status bar on API 19+ devices (see in ). This allowed the navigation drawer to slide "under" the status bar, and this matches the material design specs. However on these newer devices, if our drawer content is too near the top it will get partially obscured by the status bar. I've actually seen this on a few production apps I use personally. Fixing this problem is quite easy though. We will supply some top padding to the root view in , but only for API 19+ devices that are using the navigation drawer (i.e. devices with the smallest width, less than 600dp).

To do this, we'll use two more qualified resource directories. First, let's set the dimension for API19+ devices

Then we need to supply a default value:

Lastly, you'll notice that on devices that are API 19+ but also tablets (sw > 600dp), we add padding when we don't want to. So we'll revert back to 0dp on tablets:

This works because smallest width qualifiers are checked before API version qualifiers. So if we are on an API 19+ tablet, we'll hit the bin first and get 0dp padding and never access the bin. The navigation drawer is now looking good on API 19+ phones.

Navigation drawer finally looks good on phones that are API 19 and newer





That's it. Now everything looks perfect on old and new phones and old and new tablets!

Continue learning about Android with a post on simple live templates for easy testing in Android Studio!|||

The navigation drawer is usually unnecessary on larger devices like tablets. Learn how to reuse fragments to give your tablet & phone users a great experience.