LangUMS is an imperative programming language with C-like syntax for creating custom maps for the game StarCraft: Brood War.

It supercedes the trigger functionality in editors such as SCMDraft 2 and the official StarEdit. You will still want to use an editor to make the actual map, place locations and units but the triggers are done by LangUMS.

You can try out all of the examples below using the test.scx map from here.

Every program must contain a function which is the entry point where the code starts executing immediately after the map starts. The "hello world" program for LangUMS would look like:

The example above will print on every player's screen.

The more complex example below will give 36 minerals total to Player1. It declares a global variable called , a local variable and then calls the built-in within a while loop. The quantity argument for is the expression . Some built-ins support expressions for some of their arguments.

You can define your own functions that accept arguments and return a value.

You can also have static arrays. At the moment arrays can only be indexed with constants.

Any useful LangUMS program will need to execute code in response to in-game events. The facility for this is called event handlers.

An event handler is somewhat like a function that takes no arguments and returns no values. Instead it specifies one or more conditions separated by commas and a block of code to execute.

Whenever all the specified conditions for the handler are true the code in its body will be executed. At this point it acts like a normal function i.e. you can call other functions from it, set global variables, call built-ins.

Here is an event handler that executes whenever Player1 brings 5 marines to the location named and has at least 25 gas:

Once we have our handlers setup we need to call the built-in function at regular intervals. The whole program demonstrating the event above would look like:

You can do other kinds of processing between the calls and you can be sure that no event handlers will be interleaved with your program's execution. Events are buffered so if you don't call for a long time it will fire off all buffered events one after another the next time it's called.

A slighly more contrived example of events. Also demonstrates usage of the preprocessor directive.

Due to the way map data is structured spawning units with different properties like health and energy is not straightforward. LangUMS offers a flexible way to deal with this issue. Using the construct you can add up to 64 different unit declarations in your code. A unit declaration that sets the unit's health to 50% is shown below.

You can mix any properties from the UnitProperty constants. Here is a unit declaration that sets the unit's energy to 0% and makes it invincible.

After you have your unit declarations you can use them to spawn units by passing the name as the fifth argument to the built-in e.g.

Below is a full example that spawns a burrowed lurker at 10% health for Player1.

The built-in has several variants that take different arguments. They are listed below.

Example usage of all of the above:

The LangUMS compiler features a simple preprocessor that functions similarly to the one in C/ C++. The preprocessor runs before any actual parsing has occured.

Some built-in functions take special kinds of values like player names, unit names or locations. Those can't be stored within LangUMS primitive values. Template functions allow you to "template" one or more of their arguments so you can call them with these special values. Take a look at the example below.

declares a template function called that takes three arguments , and . The part lets the compiler know that the T and L "variables" should be treated in a different way. Later on when gets called an actual non-templated function will be instantiated and called instead. In this example the instantiated function would look like:

The template argument is gone and all instances of it have been replaced with its value. You can have as many templated arguments on a function as you need. Any built-in function argument that is not of type can and should be passed as a template argument.

Sometimes you wish to create an event handler for all players but still know exactly which player triggered it or you wish to run the same code multiple times but with slightly different parameters. For example say you have a shop in your map and want every human player to be able to use it. You could do it like this:

Or you could use a repeat template like in the example below.

The result is the same but it helps keep your code cleaner and more maintainable. You can use almost anything as a template list like players, locations, units, resource types, strings, etc. Here is another example of a repeat template but this time used from inside a function:

You can find LangUMS example maps here - https://github.com/LangUMS/langums-examples Feel free to contribute your own.

LangUMS is compiled into a linearized intermediate representation. The IR is then optimized and emitted as trigger chains. Think of it as a kind of wacky virtual machine.

Yes. Use the option.

Use the command-line option to pass a registers file. See for more info.

Please report it by adding a new issue here. You can try using the option, if that fixes the issue it's a bug in the optimizer. In any case please report it.

The biggest culprit for this is the amount of triggers emitted for arithmetic operations. By default LangUMS is tweaked for values up to 8192. If you don't need such large values in your map you can set the command-line argument to a lower value e.g. 1024. This will lower the amount of emitted triggers with the tradeoff that any arithmetic on larger numbers will take more than one cycle.

As a general rule you should set to the next power of 2 of the largest number you use in your map. If uncertain leave it to the default value.

Multiplication will not work correctly with numbers larger than .

At the moment control returns back to the start of if for some reason you return from it. In most cases you want to be calling in an infinite loop inside so this shouldn't be an issue.

You can add multi-line strings in the code with e.g.

Put your sounds in .wav format in the same folder as your source .scx map file. For example if you have you can play it with

LangUMS will take care of adding the sound file to the map archive for you.

You can call for both cases. To check if a player or players are in game:

To get the total number of players in the game call with no arguments:

Yes. Make sure to save your code source file as UTF-8 and non-ASCII characters should display properly in the game. It is currently unknown if this applies to patches before 1.18 which added unicode support to the game.

Use the same syntax as SCMDraft. You put the hex color name in e.g. .

No, but thanks for asking.

There are some facilities for integrating LangUMS code with existing maps and more will be added in the future.

The option makes it so that the compiler doesn't wipe all existing triggers in the map but appends to them instead.

You can pass a file that tells the compiler which death counts for which players are free to use as general purpose storage. The format of this file is:

Where each line contains two items - a player name and a unit name. Note that the order of the lines does not matter.

You can pass this file to the compiler with the option e.g.

A sample file with the default mappings is available here. Here you can find a list of all unit types.

You can manipulate your existing death counts with the death count built-ins e.g.

will set the death counter for Player5's marines to the value of variable .

Since recently LangUMS features an experimental debugger which allows you to place breakpoints and watch variables in your code while the game is running. To use it you must have Visual Studio Code and the LangUMS extension installed. To launch a debugging session open the workspace folder where your source files are and pick the from the list of available debuggers. If this is the first time you're launching a debugging session you'll be asked to configure your file.

You have you give the debugger the paths to langums.exe, your source files and the destination .scx. After you launch the debugger it wil compile your source and say . This is when you should start the game and launch your debug map. Keep in mind that maps compiled in debug mode are special and cannot run without the debugger. You should not distribute these maps until you recompile them normally without the debugger.

A Visual Studio 2017 project is provided in the langums/ folder which is preconfigured and you just need to run it. However you should be able to get it working with any modern C++ compiler. The code has no external dependencies and is written in portable C++. You will need a compiler with support for . Contributions of a Makefile as well as support for other build systems are welcome.|||

langums - Programming language and compiler for StarCraft: Brood War custom (UMS) maps