If you have been in the business for the last 5-6 years you have been indefinitely forced to hear some buzzwords like microservices, modularization, loosely coupled, split or independence popping up in every single company, but are those concepts even in context?

With the proliferation of tech companies and the increase of code lines, pairs of hands has grown in an exponential way and, just to let you know, the ratio between the number of developers and code efficiency in a single code base forms a perfect gauss bell.

 

 Having that in mind, is easy to realize that large companies will have serious constrains building and deploying big products and hotfixing or continuous deployment will be even harder objectives (sometimes impossible).

With that problem in game, there’s the need of a solution, and it’s urgent. Here’s exactly where microservices architecture enters the scene.

 This is a farely new architectural style that structures the application as a collection of modules called services. Services have to be error-proof, loosely coupled and must have a clear, easy to interact with I/O interface in a lightweight non blocker protocol.

Microservices must be fine-grained, they should cover a business necesity (without relying in other modules as dependency but consuming them when needed) and should not have crossed or circular dependencies, services have to be built as isolated independent standalones.

Neither to say that a microservices architecture as explained above has many advantages over old monolithic design, it allow teams to be fully independent owning their part of the code, it’s easier and faster to deploy, test and dispose and escalating is pretty trivial.

The question now is, is this the “microservices architecture” we have been told in our team meetings?

Monolithic and microservices architecture are two totally different styles that can’t be swapped as product owners pretends.

A microservices architecture needs a proper context and infrastructure to work and to be compliant with the architecture principles.

 First of all, to be truly independent, your modules can’t (or shouldn’t at least) share data bases, libraries or even frameworks. The idea behind the concept is to build isolated autonomous pieces without dependencies and put them together on live to build an application and forcing all the modules to share a database/library/whatever doesn’t help at all, indeed, it ties the modules just in a different way than before, creating a crippled modules mess, if you really need it, you should include it in each module.

So no, there’s nothing to do with your dinosaur, that split won’t succeed in the long run because you are missing the most important point, the loosely coupled independent thing.

Don’t Repeat Yourself is a very important concept in software development but sometimes it’s taken too serious.

 Do you share exactly the same DLL between projects? two modules are different projects, as long as they are independent there’s no point of doing it neither, if the same code is needed in diferent modules, just pack it as library and ship it with each service.

Relying in code libraries in a microservices environment makes no sense, even worst, it denotes a bad design. If that email service you wrote is needed in more than one place, shouldn’t it be a module itself?

No, an HTML sanitizer is not a module, in order to develop a well done microservices application, modules have to be perfectly planed out, they should follow a DDD (Domain Driven Design), this means that modules should respond to a business necessity and must pack everything needed to work as a standalone.

 Taking modularity too far will ruin your application and add unneded complexity to the module’s interconnections, that’s pretty bad.

We have seen the bad approach, but it’s perfectly possible to build a DDD compliant microservices application that works, escales and lets development teams to be fully responsible of their code, technologies and processes.|||

If you have been in the business for the last 5-6 years you have been indefinitely forced to hear some buzzwords like microservices, modularization, loosely coupled, split or independence popping up in every single company, but are those concepts even in context? With the proliferation of tech companies and the increase of code lines, pairs of…