Yes, Brotli can compress faster than gzip. And a few other things you should know when deploying it.

Brotli is a new standard that provides better compression than gzip - it's now supported in 3 of the 4 major browsers.

Checking the top 1000 URLs on the internet, brotli performance is:

The first one really excites us. Modern websites in particular often have large JavaScript bundles - the front page of CertSimple is 242 K gzipped, and would be 1.1MB uncompressed!

Which means it's really easy to take this - a 242KB, gzipped, minified JS bundle:

And turn it into this - a 201KB brotli-compressed JS bundle:

While not as big a help to site performance as HTTP/2's awesome multiplexing, it's still a decent speed benefit for only a small amount of work. And it's nicely compatible: visitors with an out of date browser, or Safari ⧉, will get regular old gzipped resources.

Getting brotli running isn't hard, but there's a couple of places where you can go amiss, especially if you follow most of the current 'Brotli nginx' articles. Here's a list of important considerations when adding brotli to your site.

You may have read that Brotli is 'slower than gzip'. The first time this article was posted on Reddit, someone responded:

This comment was upmodded, since anyone who uses the expression 'artifact of the compression algorithm' clearly knows what they're talking about. There's only one problem: it's wrong.

It's not unique though - you'll hear that in a lot of Brotli tutorials too. And yes, if you take a file, and run:

The first command will take much longer than the second. But that can be misleading: both gzip and brotli have variable levels of compression, and the command is turned up to max by default.

Brotli with setting 4 is both significantly smaller AND compresses faster than gzip

You can take advantage of that in your Brotli deployment! Eg, for nginx:

Brotli has modules for each:

To load the modules into nginx, add the directive in the top‑level block of your nginx.conf:

You can use each module seperately if you wish.

Then in the block, add:

Make a script to go into your app's 'public' directory, finding files ending in 'css', 'js', 'json' or 'svg', and using the 'brotli' command to create files with the same name, using 11 compression, and a extension. The 'force' isn't as scary as it sounds: it just overwrites existing files.

Results will look like:

OK, great, that's nginx covered. But most people build their JS bundles on a their app server with tools like Browserify or Webpack. Unless nginx is running on the same machine, won't help. To repeat:

Building and hosting your JS bundles on an app server, and running nginx elsewhere? Then nginx won't compress them.

Because , like before it, is only for files served via nginx - it will only detect files when served via the filesystem, not via used on a typical nginx load balancer. Quoting nginx core engineer Maxim Dounin:

So how do you get brotli working on your environment? You could add a second layer of nginx sitting on each app server, serving your JS bundles on the same machine, but that's a lot of extra complexity.

Most languages have a native Brotli module - we use node's amazing 'shrink ray'. Shrink-ray:

If you use Rust: the mysteriously named rust-brotli will help you out.

I'll update this post with Ruby, Python, Elixir, and Go equivalents as we discover them.

In this case, you can disable compression on nginx and let the app servers take care of using both brotli and gzip as necessary. If you're wondering: yes, you can still use nginx for HTTP/2 in this setup.

If nginx does work for you, the next think you'll see on most brotli guides are instructions to build nginx's brotli modules.

You can save yourself the effort.

Ubuntu 16.04 normally comes with the older 1.10 nginx release, and doesn't include brotli, but we can use cryptofuture's nginx repo to add nginx 1.11 and brotli. Install the updated nginx, the brotli module, and the command used to make files:

You now have a working brotli setup.

If you'e more a RHEL/CentOS types, CodeIT has nginx packages with the brotli module built in.

Afterwards, you can see the brotli module is included with nginx itself:

Binary files like JPEG, PNG, MP4, are already compressed with format-specific compression which outperforms the naive compression of gzip and brotli. There's no point gzipping or brotli-ing a PNG: the PNG is already compressed, and it will get bigger rather than smaller. So use:

To cover HTML (included by default), plaintext, JavaScript, JSON, SVG and RSS.

Using nginx in front of your backend servers? nginx won't recompress responses as brotli if your backend servers are already providing them as gzip. Disable gzip on your backend to use brotli on nginx.

In Chrome, start Developer Tools (Ctrl Shift I) and click the Network tab.

Click on network requests a JS, HTML or SVG file and you should see Accept-Encoding: br in the request headers and Content-Encoding: br in the response.

Is Brotli worth it? At CertSimple we have a complex app, involving HTML 5 clipboard, webcrypto, a number of ractive components, right on our front page. Using Brotli we've seen a 17% improvement in one of the largest JS bundle we serve to customers. Despite the some of the surprises above, we think it's a quick win for most websites. Happy Brotling!|||

And a few other things you should know when deploying it.