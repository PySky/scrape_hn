In this blog post, we look at the operation , which is similar to the Array method , but more versatile.

Both and take a function as a parameter that controls how an input Array is translated to an output Array:

This is an implementation of :

is simpler if is only allowed to return Arrays, but we don’t impose this restriction here, because non-Array values are occasionally useful (see the section on for an example).

To demonstrate how works, we use the helper function :

This is in action:

This is in action:

What is good for? Let’s look at use cases!

The result of the Array method always has the same length as the Array it is invoked on. That is, its callback can’t skip Array elements it isn’t interested in.

The ability of to do so is useful in the next example: returns an Array where each element is either a wrapped value or a wrapped error.

enables us to extract just the values or just the errors from :

The Array method maps each input Array element to one output element. But what if we want to map it to multiple output elements?

That becomes necessary in the following example: The React component is invoked with two attributes.

is rendered as a series of links separated by commas:

In line A, we are conditionally inserting the Array element via the spread operator ( ). This trick is explained in another blog post.

Due to , is rendered as a single flat Array. The first tag contributes one element to this Array (a link); each of the remaining tags contributes two elements (comma and link).

can be generalized to work with arbitrary iterables:

In line A, we translate the iterable returned by into an Array, via the spread operator ( ).

One nice trait of is that it works incrementally: as soon as the first input value is available, output is produced. In contrast, the Array-based needs all of its input to produce its output.

That can be demonstrated via the infinite iterable created by the generator function :

In line A, we extract the first 5 values of via destructuring.

You can use the Array method to implement a simple version of :

I prefer the original version of , because it is easier to understand.

is an operation that concatenates all the elements of an Array:

It can be implemented as follows:

Using and flattening the result is the same as using . That is, the following two expressions are equivalent:

Similarly, using with the identity function ( ) is the same as using . That is, the following two expressions are equivalent:

The next subsections cover use cases for .

The following code only inserts if is :

For more information on conditionally inserting Array elements, consult the blog post “Conditionally adding entries inside Array and object literals”.

In the following example, only returns the texts that could be downloaded.

first maps each URL to a Promise resolving to either:

(line A) converts the Array of Promises into a Promise that resolves to a nested Array. (line A) unwraps that Promise and un-nests the Array (line B).

Note that we couldn’t have used here, because of the barrier imposed by the Promises returned by : when it returns a value, it doesn’t know yet if it will be a text or an empty Array.

Brian Terlson has written a proposal for an Array method . Alas, it’s currently at stage −1. More work is needed: it might make more sense as a method for iterables (or a function operating on them), etc.|||

In this blog post, we look at the operation flatMap, which is similar to the Array method map(), but more versatile.