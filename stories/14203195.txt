One of my colleagues tracked down a bug in their code that communicates over a serial port. (Remember serial ports?)

The structure specifies the baud rate as an integer. To request 2400 baud, you set the to 2400. There are some convenient defined constants for this purpose.

Meanwhile, the structure also has a way of specifying the baud rate, but it is done by setting the to a bitmask:

My colleague accidentally set the to a value, and since these values are untyped integers, there was no compiler warning.

My colleague asked for the historical background behind why there are two easily-confused ways of doing the same thing.

The structure dates back to 16-bit Windows. It tracks the feature set of the 8250 UART, since that is what came with the IBM PC XT.¹ In particular, there is no need to ask what baud rates are supported by the serial chip because you already know what baud rates are supported by the serial chip: The 8250 and 16650 support baud rates that are divisors of 115200.²

Enter Windows NT. This operating system wanted to run on things that weren't IBM PCs. Crazy. In particular, those systems may have serial communications chips that support a different set of baud rates. That's where the structure came in: It reports baud rates as a bitmask that is filled out by the function. That way, the program that wants to do serial communications can find out what baud rates are supported by the current hardware. And since it's reporting a set of values, a bitmask seems the natural way of representing it.

The program inspects the bitmask, decides which of the available baud rates it wants to use, and puts the desired value (as an integer, not a bitmask) in the member of the .

That's my attempt to reverse-engineer the history of the two incompatible ways of representing baud rates.

¹ The PS/2 line introduced the 16550 UART which is backward-compatible with the 8250. In particular, it supports the same baud rates.

² Other baud rates like 110 are approximations. For example 110 is really 115200 ÷ 1048 = 109.92 baud. This article claims that microcontrollers "rarely offer an internal oscillator that has accuracy better than ±1.5%," so an error of 0.07% is easily lost in the jitter.|||

