beesly is a microservice for authenticating users with PAM.

It provides an alternative method for authenticating and authorizing users' access to internal applications and services. Support for custom PAM services facilitates the reuse of existing integrations (SSSD) with directory servers (Active Directory, IdM, FreeIPA, OpenLDAP, etc.) and third party services (Duo Security). Group membership is returned for authenticated users allowing the addition of Role-Based Access Control for custom applications and services without the need to learn the intricacies of LDAP or Kerberos.

beesly was developed in Python using the Flask microframework.

beesly requires superuser privileges to authenticate users when running in its default configuration because it uses the PAM login service which uses the PAM module. This module adds a 2 second delay for failed authentications which can be disabled by using the nodelay option. It's encouraged to use a custom PAM service that does not use this module.

If using a custom PAM service, the configuration file should be placed in with permissions. See for an example of a custom PAM service that uses SSSD and does not require superuser privileges.

The following packages are required to install Python dependencies in :

Flask-Limiter is used to implement rate limits. It can use in-memory , Redis, or Memcached as a storage backend.

For production deployment, run gunicorn behind nginx and use TLS.

A successful authentication will return the groups that the user is a member of facilitating RBAC.

If Duo Security 2FA is configured, the user will have to acknowledge a push notification for the authentication to succeed.

The payload of the generated JWT contains the following claims:

Note: a JWT is returned only when is configured.

Renewing an existing JWT that has not expired:

Note: and endpoints are only available if is configured.

Note: EC2 metadata is returned only when running on AWS EC2.

Monitoring the health of the application:

Swagger UI is integrated into beesly and available at when running in mode.

The following environment variables are used to modify the running configuration of this app:

Note: The rate limiting strategy can only be used with or storage.

beesly can integrate with Duo Security to provide 2-factor authentication using the PAM module.

Configure duo_unix to send push notifications to the user's phone:

Users will have to acknowledge the push notification for authentication to succeed.

beesly can optionally return short-lived JSON Web Tokens upon successful user authentication. To add JWT support, a secret master key must be set via the environment variable. This master key should be strong and at least 10 characters in length.

blake2b key derivation function from pynacl is used to create a unique signing key for each generated token:

By default, each JWT is valid for 15 minutes. JWTs can be renewed by sending a POST request to with the payload containing the username and their valid token. JWTs can be verified by sending a POST request to with the payload containing the token.

The Python statsd client is used to export application metrics with the prefix .

The following metrics are exported:

See for how to configure telegraf as a statsd collector sending metrics to influxdb.

nose2 is used for testing. Tests are located in .

The tests require valid credentials to a local user to execute correctly. Credentials for this user can be set using environment variables:|||

beesly - a PAM authentication microservice