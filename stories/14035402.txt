As part of my last project, I had to deploy a web app to Cloud Foundry.

This article tells the story of the many challenges we had to solve.

First, I briefly sketch the app at stake.

It’s a modern web app offering data visualization and model building for prediction. Roughly, there are three components:

The front-end fetches its data from the Node server through http and

websocket. The Node server and workers communicates to each other through different channels including:

Deploying the old way to an IaaS

Traditionally, the app is deployed to an infrastructure as a service (IaaS) providing virtual machines and abstracting away physical resources (machine, network).

The app source code looks like the following:

Before deploying the app, you needed to provision a server with all binary dependencies i.e., Nginx (reverse proxy and static files), Node+Npm, Mongo, ZeroMQ C lib, Python 3.5 …

Then you can deploy the app by copying the source code to your server

and by starting all services (Nginx/Mongo/Node/…).

Cloud Foundry is an open source cloud platform as a service

(Paas). While IaaS provide low-level features (virtual machines / networks), PaaS allow you to work directly with web-app containers and managed services e.g., message queues, databases or job launchers.

Many advantages stem from the higher level of abstraction of PaaS.

You may install Cloud Foundry yourself in your own servers or on your favorite IaaS (Amazon, Google, …); it will take *at least 14 machines* for a basic usage, though. If you don’t want to bother yourself with this (that’s our case), choose among the many managed Cloud Foundry providers: Pivotal,

BlueMix, Predix, …

All you need to do is push your code to the cloud, and that’s it. Cloud Foundry creates a container for running your code. You don’t know exactly where and that’s ok: the only thing that matters is that your code is running somewhere.

When you push a piece of code, Cloud Foundry detects the language and provision the container accordingly. For instance, the presence of a package.json file triggers the NodeJs buildpack that will install Node/Npm binaries and Node modules in accordance with it.

Cloud Foundry has inherited from Heroku the concept of buildpacks together with a bunch of buildpacks for most common languages to choose from.

Cloud Foundry has a healthcheck mechanism to ensure your app stays up. If your app goes down, Cloud Foundry automatically restarts it. You can monitor / start / stop your apps by calling the Cloud Foundry API

or through the UI your Cloud Foundry provider has built for you.

Need to handle more traffic? Add more instances of your app. The cloud controller (CC) includes a load balancer dispatching traffic among your instances.

Benefit from the community / the catalog

You don’t want to scale your app manually? Use an autoscaler service either from the Cloud Foundry community (e.g., this one) or from your Cloud Foundry provider catalog (e.g. the Pivotal autoscaler).

Cloud Foundry has an active community so you can easily find plenty of services for databases, blob stores, message queues, sso authentication, adding ssl …

All benefits from Cloud Foundry come at a price: the app has to follow some

basic guidelines to fit the framework and work well in the cloud. In the following, I’ll give my recommendations.

Even though the app have separate components (front-end / back-end / workers), it is meant to be deployed as a single block of code. In order to fit the Cloud Foundry paradigm, we need to push small independent components and make them work together in the cloud.

The app has to be stateless

Our app is clearly not stateless.

For instance, the Node app reads and writes the local filesystem all the time.

This is a major issue as Cloud Foundry does not persist app container filesystem. If Cloud Foundry decides to restart the Node app — and it does for plenty of reasons — the filesystem is wiped out.

Python dependencies weight ~1.5GB which is way above the 1GB Cloud Foundry upload limit.

Anyways, we’re positive we don’t want to push ~1.5GB each time we deploy.

Python dependencies should be downloaded and cached in the cloud.

Hopefully, there are plenty of buildpacks that do the job.

Traditionally, Nginx serves the front-end files. We keep it the exact same way in the Cloud by pushing the entire webapp folder

and using the staticfile-buildpack.

To do so, we create an application manifest file at the root of your app describing how and what to push to the Cloud.

Here is our manifest.front-end.yml file:

The manifest is self-explicit and quite intuitive:

That’s it! you are ready to deploy to the cloud: first be sure to have the cf command line client installed, and the run the following:

You should get something like:

Go to http://my-awesome-app/ and look at your front-end app running :)

For the sake of simplicity, we choose to push the front-end source code

together with vendor files (bower). This means we have to build locally the front-end app i.e., install vendor files, before pushing. This is fine as long as the source code and vendor files together remains lightweight (~50MB in our case).

In my next articles — available soon :) — , I’ll present the following subjects:|||

As part of my last project, I had to deploy a web app to Cloud Foundry.
This article tells the story of the many challenges we had to solve. It’s a modern web app offering data visualization and…