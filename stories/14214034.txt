This post is to inform you about a bug in GCC that may cause memory (or other resource) leaks in your valid C++ programs.

One of the pillars of C++ philosophy is what we often call RAII: if you use classes to manage resources, use constructors for allocating resources and destructors for releasing them, the language makes sure that whatever happens, however you use such classes the resources will get properly released. We can easily test this guarantee by a fake class that logs resource acquisitions and releases:

Whatever reasonable program we write (excluding the situations where you use , , , , etc., or when we cause to be called) we expect that and are output the same number of times.

This is the contract: I take care that my classes correctly manage resources, and the language takes care that the resources will always be managed correctly regardless of the complexity of the program. This even works for such complex situations, you might not even have thought of:

Consider what happens when throws when executing this constructor. has already been constructed (resources acquired), but object has not been created yet, and it will never be (because constructor will not run to a successful end). This means that destructor of will never be called either. But the language is still required to call the destructor of any sub-object that has been successfully created, like . Thus, ’s resources will nonetheless be released, even though no object of type was ever fully constructed.

You might have not even heard about this guarantee, but it still works to your advantage, preventing memory leaks.

But in one situation GCC will surprise you: namely, when you initialize a temporary using aggregate initialization. Let’s change our type a bit, so that it is an aggregate:

It just aggregates members. No constructors, but we can still initialize it with aggregate initialization syntax:

If you test it, it works correctly: the number of constructor calls equals the number of destructor calls, even though throws and makes the situation complicated. But is an automatic object. If we change the example, and create a temporary instead:

This is where the bug manifests. Member is initialized but never destroyed. Admittedly, this is a rare case: it requires an exception in the middle of initialization, a temporary and an aggregate initialization. But usually, leaks manifest in the face of exceptions. And the fact that it is rare makes you less prepared for it.

Here is a full example:

You can test it online here. It is present in GCC 4, 5, and 6. For a more real-life, and somewhat longer, illustration of the problem, see this example provided by Tomasz Kamiński.

A bug report for this already exists.

Maybe your program already leaks because of this surprise?|||

This post is to inform you about a bug in GCC that may cause memory (or other resource) leaks in your valid C++ programs. One of the pillars of C++ philosophy is what we often call RAII: if you use classes to manage resources, use constructors for allocating resources and destructors for releasing them, the…