fzf project consists of the following components:

You can download fzf executable alone if you don't need the extra stuff.

On OS X, you can use Homebrew to install fzf.

You can manually add the directory to as follows,

But it's recommended that you use a plugin manager like vim-plug.

Pre-built binaries for Windows can be downloaded here. fzf is also available as a Chocolatey package.

However, other components of the project may not work on Windows. You might want to consider installing fzf on Windows Subsystem for Linux where everything runs flawlessly.

fzf is being actively developed and you might want to upgrade it once in a while. Please follow the instruction below depending on the installation method used.

fzf will launch interactive finder, read the list from STDIN, and write the selected item to STDOUT.

Without STDIN pipe, fzf will use find command to fetch the list of files excluding hidden ones. (You can override the default command with )

fzf by default starts in fullscreen mode, but you can make it start below the cursor with option.

Also check out option if you prefer "top-down" layout instead of the default "bottom-up" layout.

You can add these options to so that they're applied by default. For example,

Unless otherwise specified, fzf starts in "extended-search mode" where you can type in multiple search terms delimited by spaces. e.g.

If you don't prefer fuzzy matching and do not wish to "quote" every word, start fzf with or option. Note that when is set, -prefix "unquotes" the term.

A single bar character term acts as an OR operator. For example, the following query matches entries that start with and end with either , , or .

See the man page ( ) for the full list of options.

Many useful examples can be found on the wiki page. Feel free to add your own as well.

fzf-tmux is a bash script that opens fzf in a tmux pane.

It will still work even when you're not on tmux, silently ignoring options, so you can invariably use in your scripts.

Alternatively, you can use option not to start fzf in fullscreen mode.

The install script will setup the following key bindings for bash, zsh, and fish.

If you're on a tmux session, you can start fzf in a split pane by setting to 1, and change the height of the pane with (e.g. , ).

If you use vi mode on bash, you need to add before in your .bashrc, so that it correctly sets up key bindings for vi mode.

More tips can be found on the wiki page.

Fuzzy completion for files and directories can be triggered if the word before the cursor ends with the trigger sequence which is by default .

Fuzzy completion for PIDs is provided for kill command. In this case there is no trigger sequence, just press tab key after kill command.

For ssh and telnet commands, fuzzy completion for host names is provided. The names are extracted from /etc/hosts and ~/.ssh/config.

Use ~~ as the trigger sequence instead of the default ** FZF_COMPLETION_TRIGGER= FZF_COMPLETION_OPTS= Use ag instead of the default find command for listing candidates. - The first argument to the function is the base path to start traversal - Note that ag only lists files not directories - See the source code (completion.{bash,zsh}) for the details. () { ag -g }

On bash, fuzzy completion is enabled only for a predefined set of commands ( to see the list). But you can enable it for other commands as well like follows.

ag or pt will do the filtering:

If you don't want to exclude hidden files, use the following command:

If you're running fzf in a large git repository, can boost up the speed of the traversal.

It's a known bug of fish (will be fixed in 2.6.0) that it doesn't allow reading from STDIN in command substitution, which means simple won't work as expected. The workaround is to use the fish command:

The globbing system is different in fish and thus completion will not work. However, the command will use the last token on the commandline as the root folder for the recursive search. For instance, hitting at the end of the following commandline

will list all files and folders under .

When using a custom , use the unexpanded variable to make use of this feature. defaults to when the last token is not a valid directory. Example:|||

fzf - :cherry_blossom: A command-line fuzzy finder written in Go