On behalf of the team, I am excited to announce the release of the third milestone of Spring Cloud Data Flow 1.2.

Note: A great way to start using this new release(s) is to follow the release matrix on the project page, which includes the download coordinates and the links to the reference guide.

As part of the long awaited feature to improve access to app properties info for both shell and Dashboard, we are introducing a new optional artifact for both Stream and Task applications - we are calling it the “companion metadata artifact”. Through this functionality, the streaming and task applications and their properties are first-class citizens for both Docker and Maven based application artifacts.

The companion metadata artifact is a thin lightweight jar artifact that includes the properties metadata as JSON and it is generated for each of the out-of-the-box application. Given the smaller size of this artifact, we are pre-fetching the metadata files at the event of app registration. Any downstream operation including the shell command or the loading of properties dialog window on the Dashboard, you will find the application properties populating more efficiently as opposed to waiting for the entire uber-jar to download.

A new maven plugin has been introduced with this feature. Any custom application can use this plugin to generate the companion metadata artifact.

Note: It is not mandatory to register applications with the companion metadata artifact, we are still retaining the prior experience, and it will continue to work as expected.

The “/about” RESTful endpoint is updated to probe the respective runtime environments for details including dependencies, versions, feature-toggles, platform versions, etc.. The endpoint can be useful for version compatibility checks and bug-reporting. This same information is available from a “Show Details” button on the Dashboard’s “About” page and can be copied to the clipboard from that detail page.

In the previous 1.2.M1 release, we have differentiated the notion of apps vs. deployer properties at the DSL level. This differentiation had residual side effects to overall parsing behavior in certain scenarios. The parser constructs have been revisited and the inconsistencies were resolved.

In 1.2 M2/M3, we have added the foundation for RBAC and the support for it in the Dashboard. The support for Shell to be role-aware is now available.

The next installment of Spring Cloud Stream App Starters Bacon.RC1 release is promoted. This release builds upon Spring Cloud Dalston.RC1 and Spring Cloud Stream Chelsea.RC1 improvements and bug-fixes. As always, we generate out-of-the-box applications for RabbitMQ, Apache Kafka 0.9, and Apache Kafka 0.10 binder implementations. You can find the bit.ly links to import out-of-the-box applications in bulk from the project site.

The recommended task app starters are part of the Spring Cloud Task App Starters Belmont.M1 release. You can find the bit.ly links to import out-of-the-box applications in bulk from the project site.

Review the release notes for more details regarding all issues resolved and also for links to issues resolved in companion projects.

Further enhancements to support Docker artifacts as first-class citizen in Shell, DSL, and the Dashboard.

The ability to orchestrate “composition of batch-jobs or tasks” is making progress. A new set of DSL primitives to support this capability from Shell/UI is underway.

Metrics and monitoring for streaming pipelines is planned for the upcoming release. The ability to drill into individual streaming application performance including its send/receive rates and as well aggregate metrics for the entire pipeline is in the works.

Feedback is important. Please reach out to us in StackOverflow and GitHub for questions and feature requests. We also welcome contributions! Any help improving the Spring Cloud Data Flow ecosystem is appreciated.|||

