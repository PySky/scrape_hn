There is a simple way to get your NPM credentials. Using the obtained credentials, I can spread the worm to all users of your packages and get their credentials. We all know this and choose to ignore it.

To get the NPM credentials, all I need to do is read the contents of and communicate those to an external service. There are many ways to do it. Here is a simple attempt:

What is http://apocalypse/? A theoretical service that parsers and uses the registry URL and NPM token to:

This starts a chain reaction of unsuspecting users downloading the package and running it as a dependency of their project.

There are projects that are designed to mitigate these attacks, e.g. https://nodesecurity.io/. However, lets face the facts — few packages are using it; among the top 10 the most dependant NPM packages, not one is using NSP.

However, all we discussed until now relies on either of the two assumptions:

The first scenario is unlikely & there is nothing we can do about dr. Evil integrating into the open-source community as part of the world domination plan.

This is bad, but it is a security vulnerability thats inherent to the design of any package manager. However, things get worse when combined with other services.

Find any project that uses semantic-release. Chances are it is also using https://travis-ci.org/ and https://greenkeeper.io/. These are all popular services.

Raise a PR that adds your package as a dependency, e.g.

A non-malicious, good PR — solves whatever existing problem solves. There is nothing evil about  , it even passes the NSP safe-checks.

Project contributors review the PR and decide to merge it.

Here is where shit really hits the fan.

greenkeeper.io will detect a new major version of a dependency and create a PR. Normally, this wouldn’t be a problem. Travis-CI does not export secret environment variables when PR originates from a fork. Therefore, you cannot simply create a PR that adds script to  . However, greenkeeper.io does not use a fork — it creates a new project branch and raises the PR from within the project.

You can guess whats the outcome of this PR.

https://www.npmjs.com/ must improve token management system. One token cannot be used to control all packages from anywhere. When generating a token, user ought to be able to select which packages the token can control. Furthermore, it should be possible to restrict token usage to IP addresses specified using CIDR notation. In the worst case scenario, this would restrict the damage that a leaked NPM token can do.

Finally, greenkeeper.io is a useful service to keep packages up-to-date. However, it lacks security checks. greepkeeper.io can increase their service value by adding nsp integration — greenkeeper.io must not raise a PR if the dependency is identified as unsafe.

As a consumer, use nsp to check packages for vulnerability and be careful what dependencies you add to your project.

My GitHub tokens have been made public as a result of the recently disclosed (unrelated) Travis-CI security incident. GitHub has been quick to react by disabling these tokens. However, that left me needing to update configuration of 100+ Travis-CI projects.

In case you are in a similar boat (you would have received an email in this particular case), here is a bash script to update ENV variables of all projects that you own:|||

There is a simple way to get your NPM credentials. Using the obtained credentials, I can spread the worm to all users of your packages and get their credentials. We all know this and choose to ignore…