CockroachDB is a really interesting database system, getting the best of both RDBMS and NoSQL. It’s been developed by former Google developers, and it’s inspired by Google Spanner. However, unlike Google Spanner, which is offered as a service in Google Cloud, CockroachDB is an open-source database that can be installed on premise.

Also, CockroackDB allows you to use the PostgreSQL drivers as opposed to Spanner which only supports the gRPC protocol. So, you can practically reuse all the frameworks that have emerged in the Java ecosystem like connection pools, monitoring proxies (e.g. FlexyPool) or data access frameworks (e.g. Hibernate).

Unlike a typical RDBMS, CockroachDB is designed to be globally distributed and strongly resilient to disasters, hence its very unusual name. But what’s really exciting about CockroachDB is its non-locking timestamp ordering concurrency control mechanism which allows CockroachDB to run in Serializable isolation level, even if the database is massively distributed. Intriguing, right?

Using Docker is probably the easiest way to start working with CockroachDB.

So, you need to pull the latest image from Docker Hub:

Then, you need to create a new network bridge since you might want to run multiple nodes on your cluster:

For our examples, we only need to run aa single node, so to create a new Docker container you need to run the following command:

If you run , you can now see the CockroachDB Docker container:

No, we need to set up our database. For this, you need to start a bash process inside the Docker container we just created and started:

Once you get access to the CockroachDB Linux OS host, you can add a new database user as follows:

You are prompted for a password after you type the command.

Now, you can see your newly created user as follows:

Now, you need to create a database like this:

and grant all privileges to the cockroach user we previously created.

And we are done!

Now, to make things really interesting, let me configure the High-Performance Java Persistence book GitHub repository to support CockroachDB.

Since it speaks the PostgreSQL protocol, we can use a PostgreSQL JDBC Driver with CockroachDB.

All I need to do is to create a new like this:

I can even use HikariCP as a Connection Pooling solution for CockroachDB:

Due to a known issue that will be fixed in the next Beta release, I had to set up the custom isolation level to make it work with HikariCP:

Not only that we can use JDBC with CockroachDB, but we can even use Hibernate with it. Although the official Hibernate tutorial uses the , for the moment, the is much closer to CockroachDB since it does not offer JSON types, SKIP_LOCKED, CTE (Common Table Expressions) or MATERIALIZED VIEWS to justify any newer PostgreSQL Dialect version.

In fact, even the is not a drop-in replacement since it comes with additional SQL functions (e.g. , ), and pessimistic locking support as well. However, for simplicity sake, we can justs extend the and simply replace the most common data types:

Even if the will get you started, in reality, a new Dialect needs to be created from scratch since and define the exact set of features that CockroachDB offers.

Although there is a Hibernate tutorial on the CockroachDB website, the entity mapping they offered is using an assigned identifier, which is more of an exception than a rule.

So, our entity looks like this:

Now, while using a database SEQUENCE is the best identifier strategy when using Hibernate, there is no such construct in CockroachDB. However, CockroachDB offers a SERIAL type, just like PostgreSQL, which uses a globally distributed generation strategy.

Unfortunately, due to a limitation of how Hibernate manages identifiers, the use of the generator can disable batch inserts. Read this article for more details on this topic. However, at some point we’d really need to provide a solution to this limitation.

The is a DATE type attribute which we will use to order entities in our queries.

For this entity, Hibernate generates the following database table:

Assuming we run the following JPQL query:

And CockroachDB provides the proper result set.

Compared to a NoSQL database like MongoDB or Cassandra, or even a NewSQL database like VoltDB, CockroachDB allows you to reuse all the frameworks that have been developed in the Java ecosystem. This is very convenient both for developers and for the business since the adoption process is going to be smoother than when the data access paradigm shifts considerably.

If you liked this article, you might want to subscribe to my newsletter too.|||

Introduction CockroachDB is a really interesting database system, getting the best of both RDBMS and NoSQL. It's been developed by former Google developers, and it's inspired by Google Spanner. However, unlike Google Spanner, which is offered as a service in Google Cloud, CockroachDB is an open-source database that can be installed on premise. Also, CockroackDB…