ES modules are starting to land in browsers! They're in…

All you need is on the script element, and the browser will treat the inline or external script as an ECMAScript module.

There are already some great articles on modules, but I wanted to share a few browser-specific things I'd learned while testing & reading the spec:

Valid module specifiers must match one of the following:

Other specifiers are reserved for future-use, such as importing built-in modules.

Browsers that understand should ignore scripts with a attribute. This means you can serve a module tree to module-supporting browsers while providing a fall-back to other browsers.

Live demo. The order should be , , .

The way scripts block the HTML parser during fetching is baaaad. With regular scripts you can use to prevent blocking, which also delays script execution until the document has finished parsing, and maintains execution order with other deferred scripts. Module scripts behave like by default – there's no way to make a module script block the HTML parser while it fetches.

Module scripts use the same execution queue as regular scripts using .

Live demo. The order should be , inline script, inline module, .

Regular inline scripts ignore whereas inline module scripts are always deferred, whether they import anything or not.

Live demo. The fast-downloading scripts should execute before the slow ones.

As with regular scripts, causes the script to download without blocking the HTML parser and executes as soon as possible. Unlike regular scripts, also works on inline modules.

As always with , scripts may not execute in the order they appear in the DOM.

If you understand ES modules, you'll know you can import them multiple times but they'll only execute once. Well, the same applies to script modules in HTML – a module script of a particular URL will only execute once per page.

Unlike regular scripts, module scripts (and their imports) are fetched with CORS. This means cross-origin module scripts must return valid CORS headers such as .

Most CORS-based APIs will send credentials (cookies etc) if the request is to the same origin, but and module scripts are exceptions – they don't send credentials unless you ask for them.

You can add credentials to a same-origin module by including the attribute (which seems a bit weird to me, and I've questioned this in the spec). If you want to send credentials to other origins too, use . Note that the other origin will have to respond with the header.

Also, there's a gotcha related to the "Modules only execute once" rule. Modules are keyed by their URL, so if you request a module without credentials, then request it with credentials, you'll get the same without-credentials module back. This is why I've used a in the URLs above, to make them unique.

Firefox is the only one that gets this right – well done folks!

Unlike regular scripts, modules scripts must be served with one of the valid JavaScript MIME types else they won't execute.

And that's what I've learned so far. Needless to say I'm really excited about ES modules landing in browsers!|||

