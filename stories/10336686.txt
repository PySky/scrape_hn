This repository contains the materials as developed and used by RPISEC to teach Modern Binary Exploitation at Rensselaer Polytechnic Institute in Spring 2015. This was a university course developed and run solely by students to teach skills in vulnerability research, reverse engineering, and binary exploitation.

Vulnerability research & exploit development is something totally outside the bounds of what you see in a normal computer science curriculum, but central to a lot of what we RPISEC members find ourselves doing in our free time. We also find that subjects in offensive security tend to have a stigma around them in university that we would like to help shake off. These are practical, applied skills that we're excited to share with those interested in learning.

The question this course posed was 'Can we teach a bunch of programmers how to pwn?'

This course carried a prereq of Computer Organization - CSCI 2500 at RPI. Computer Organization is RPI's basic computer architecture course that teaches things like C, MIPS assembly, x86 assembly, Datapaths, CPU Pipelining, CPU Caching, Memory Mapping, etc.

Our expected demographic for Modern Binary Exploitation was students with zero reverse engineering or binary exploitation knowledge. That said, to be able to take this course you will probably need at least the following skills.

The Warzone is a custom wargame that was built from the ground up for this course. It provided a complete and consistent learning platform for us to release the labs and projects to the students. The wargame was built ontop of a vanilla Ubuntu 14.04 32-bit server install, and is modeled after existing local privilege escalation themed wargames. If you have ever played the fantastic IO wargame (formerly hosted at SmashTheStack), the Warzone has a somewhat similar structure.

Some basic tweaks have been made in an attempt to isolate players from each other and create an individual experience, but it's probably far from perfect. It also comes pre-installed with some tools, scripts, and configs that can make a beginner's life a bit easier in exploit development.

You can roll with the Warzone we designed, or you can try to setup your own using our scripts.

As the years pass, compilers will change, security will improve, and the challenges in this repo may no longer be solvable. Because of this, we have created a virtual machine disk image that closely replicates the universal Warzone wargame server we ran for the duration of this course. The VM has all the tools setup, challenges pre-compiled, and lab accounts ready to go. Hopefully it will endure the test of time.

RPISEC is a huge advocate of VMware because of its quality and stability, so we recommend using our disk image below with VMware Workstation, VMware Fusion, or VMware Player. That said, it should also work with VirtualBox.

VMware provides a great 2 minute video on how to setup a virtual machine using an existing disk image.

We tried to keep the course fairly self contained but if you find yourself lost or struggling OverTheWire's Bandit is a great intro to Linux wargames. You can also poke people on IRC if you have questions.

We have provided a bash script that will fully setup the exact environment in the provided VM.

DO NOT RUN THIS SCRIPT ON YOUR PERSONAL COMPUTER, RUN IT IN A VIRTUAL MACHINE

Account names are case sensitive, so please check that you're logging in as lab1C

The warzone marks many files as immutable to prevent users from changing them and ruining the game for other players. For example, we don't want the lab2B user to delete its file or files. A few system files, such as , are also marked immutable.

If you would like to modify or delete these files simply remove the immutable flag

We recommend that you add the flag back when you are done making your changes

Posting solutions spoils the fun and grind of the game, and as an academic resource it is likely some of these materials may be re-used by other classes in the future. As goes with most wargames, we would like to ask that you refrain from publicly posting writeups or exploits to the labs and projects.

If you are ever stuck on a problem or have any questions, you're more than welcome to ask on IRC.

This was a very hands on course, so almost every lecture we had students slinging GDB commands or following along with us on screen. The slides were accessory to the lectures and may have gaps or experience brevity at times. With seven of us creating and giving lectures, the slides and teaching styles vary a bit. We did our best to keep them consistent.

Sadly we did not record any of the lectures, maybe next time.

We're huge fans of reversing / CTF challenges, but reversing is mostly a time problem. With students juggling other classes and work during the school semester, we'd rather them focus on learning the exploitation techniques without the overhead of reversing every binary.

The 50 students that enrolled had little to no prior computer security experience. The labs are not designed to be novel CTF challenges, they're meant to be more academic examples paced to crystallize the concepts. Seasoned CTF'ers can probably blow through most of these challenges in a day or two.

If XYZ is related to vulnerability research, we're all ears. The course is far from perfect and we are open to hear any feedback for improving it.

There's a lot of interest in having it offered again, so it's being considered for Spring 2016. The feedback was almost exclusively positive with the students finding the material challenging, but engaging. We've got dozens of ideas on how to make it even better next time.

Our club keeps a pretty active IRC presence. Someone there can probably answer your question.

If you would like a more formal means of communication, you can reach us at

This course was explicitly designed for academic & educational use only. Please keep this in mind when sharing and distributing our course material. The specific licenses involved can be found below.

The lectures are covered by the Creative Commons Attribution-NonCommercial 4.0 International license CC BY-NC 4.0.

The code in this repo is covered by the BSD 2-Clause license. You can view this license in LICENSE.

Hundreds of hours and countless all nighters went into the production and execution of this course. This section serves to recognize those who made all of this possible.|||

MBE - Course materials for Modern Binary Exploitation by RPISEC