When you go through some of the popular JS libraries you might start noticing¬†this peculiar line all over the place.

First impressions, you could figure out that it had something to do with the value of the variable being inconsistent, so they had to store in a variable and use it later. So I did some digging into it and found out why this assignment was a necessity back then and how we can overcome them.

Let‚Äôs begin with a basic understanding of what a variable actually is and then we‚Äôll see how a variable gets it‚Äôs value.

is a special variable available inside the context of a function when it is invoked. The value of in most cases, is determined by how a function is called. It can‚Äôt be set by assignment during execution, and it may be different each time the function is called. ES5 introduced the bind/call method to set the value of a function‚Äôs regardless of how it‚Äôs called, and ES2015 introduced arrow functions whose is lexically scoped (i.e) it is set to the value of the enclosing execution context. We‚Äôll see more on how it works later.

There are four ways in which a variable can get it‚Äôs value. The topic is extensive to be discussed in this post, but you can read about it here.

For the sake of sticking to the topic and for brevity, we‚Äôll focus on only two ways.

First thing we have to understand is that, the value of depends on the call site of the function, unless the value of is explicitly set using call/bind functions. The call site of a function is the place where the function is actually invoked.

Consider the following piece of code.

The above piece of code actually prints out ‚ÄúGlobal Name‚Äù rather than as most of you would have expected. Let‚Äôs decode it.

Have a look at the call site:

As you can see, it is a standalone invocation of a function. Whenever a standalone invocation of a function is made, default binding applies and the variable of the function is set to the object. That‚Äôs why in this case, the global variable got printed to the console.

Consider the following piece of code

Nothing fishy here, the code prints out ‚ÄòObject Name‚Äô. When we focus on the call site of the function,

we can see that the function invocation is preceded by the dot operator, which in turn is preceded by an object reference. In other words, we can say that the function was invoked on that particular object reference. In such cases, the value of is set to that particular object reference, in this case, it is the variable holding that reference.

Now to add a little twist, see what happens when you execute the following code.

Whoa!! We got ‚ÄúGlobal Name‚Äù instead of ‚ÄúObject Name‚Äù. Again, we need to focus on the call site.

Here you can see that the type of function invocation is a stand alone function invocation rather than a invocation using the dot operator. This means that the value of was set to the object.

The takeaway here is that, though the function was defined on the object, this does not necessarily mean that the value of is always set to that particular object. It all depends on the way the function is invoked.

Now, that we have a basic understanding of how the variable gets it value, we‚Äôll take a step further.

Say we got a new requirement where we want to print the name after a couple of seconds. So we add a to the printName function.

After a couple of seconds, you get ‚ÄúGlobal Name‚Äù printed out to the console. Wait! What??? We did call the function using the dot operator, didn‚Äôt we? Again we have to focus on the call site of the function that prints out the name to the console.

Note that in the above case, it is not the function that prints out the name to the console, but rather the anonymous function that is passed to , that actually prints out the name.

A overly simplified implementation of pretty much looks like this:

Here, we can see that the function invocation is actually a stand alone invocation. This means that the anonymous function that we pass to the function is actually invoked in this manner, causing the variable of the anonymous function to be set to the object.

Now, we get why ‚ÄúGlobal Name‚Äù was printed out to the console.

But we want to print the name associated with the particular Object. How do we fix this?

This time ‚ÄúObject Name‚Äù got printed though we still haven‚Äôt changed the way the function is invoked. The anonymous function is still passed a parameter to and inside it a standalone invocation of that function is done.

But the difference lies in the magic assignment

What this line actually does it that, it stores the value of in a local variable named , when the function is first invoked using the dot operator on the object.

In this case, the value of would be the object since it was a dot operator invocation and it gets stored in the variable.

Since the inner anonymous function is defined within the same scope, i.e, within the function, the anonymous function has access to all the variables defined inside the function throughout it‚Äôs life time.

Therefore, eventually when invokes the anonymous function, it makes use of the variable to get the value of the original variable and prints out the correct name.

But unfortunately this does not work if you execute the following code:

This is because the original invocation in this case, is a standalone invocation and this means the value assigned to the variable would be the object..

The only way around it would be make use of call or bind functions, to explicity set the value of the to the object as follows

This ensures that the value of is set to object no matter what.

Note: Arrow functions cannot help us when the function is defined on the object literal as it will resolve to the enclosing lexical scope, which in this case is the global scope.

You will see that ‚ÄúGlobal Name‚Äù will still be printed out. The reason is because arrow functions take the enclosing lexical scope, and the arrow function to in the example is created each time the function is invoked. The invocation sets the scope of the function to global because of the way it is invoked and hence the arrow function to will also take this scope.

Changing the function itself as arrow function does not help either.

The above code will again set the function to the enclosing global scope, because that is where is declared.

I‚Äôll try to add a future post that explains how and in which scenarios, arrow functions can help to preserve the value of the variable.

I hope that the next time when you come across a assignment when going through a library, you‚Äôll be able to understand why it was actually done..See you in the next one guys‚Ä¶Peace.. üôÇ|||

Explain why the usage of 'that = this' assignment is still required in Javascript.