If for some reason you have decided to comprehend the asynchronous part of Python, welcome to our “Asyncio How-to”.

Note: you can successfully use Python without knowing that asynchronous paradigm even exists. However, if you are interested in how things work under the hood, asyncio is absolutely worth checking.

In a classic sequential programming, all the instructions you send to the interpreter will be executed one by one. It is easy to visualize and predict the output of such a code. But…

Say you have a script that requests data from 3 different servers. Sometimes, depending on who knows what, the request to one of those servers may take unexpectedly too much time to execute. Imagine that it takes 10 seconds to get data from the second server. While you are waiting, the whole script is actually doing nothing. What if you could write a script that could instead of waiting for the second request, simply skip it and start executing the third request, then go back to the second one, and proceed from where it left. That's it. You minimize idle time by switching tasks. 

 Still, you don’t want to use an asynchronous code when you need a simple script, with little to no I/O.

One more important thing to mention is that all the code is running in a single thread. So if you expect that one part of the program will be executed in the background while your program will be doing something else, this won’t happen.

Here are the most basic definitions of asyncio main concepts:

Now let's check how all these work together. As I've already mentioned, asynchronous code is running in a single thread:

As you can see from the chart:

Let’s try to prove that asynchronous approach really works. I will compare two scripts, that are nearly identical, except the method. In the first one I am going to use a standard , and in the second one — 

 Sleep is used here because it is the simplest way to show the main idea, how asyncio handles I/O.

Here we use synchronous sleep inside async code:

Now the same code, but with the asynchronous sleep method:

As you can see, the asynchronous version is 2 seconds faster. When async sleep is used (each time we call ), control is passed back to the event loop, that runs another task from the queue(either Task A or Task B).

In a case of standard sleep - nothing happens, a thread just hangs out. In fact, because of a standard sleep, current thread releases a python interpreter, and it can work with other threads if they exist, but it is another topic.

Companies like Facebook use asynchronous a lot. Facebook’s React Native and RocksDB think asynchronous. How do think it is possible for, let's say, Twitter to handle more than five billion sessions a day? 

 So, why not refactor the code or change the approach so that software could work faster?|||

Imagine that it takes 10 seconds to get data from the server. While you are waiting, the whole script is  doing nothing. Asyncio allows to skip it and...