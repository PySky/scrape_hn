As I grew fond of Agile and it’s practices, pair programming was one of the techniques that took me longest to absorb and understand. Mostly due to the “doubling” nature of it. I would say it’s practically impossible to see the benefit without actually practicing this technique.

Pair programming is quite hard to sell to the (project/upper) management since to the observer, to a person from the outside it looks like a waste, a waste of resources.

During pair programming two people work on the same story or task and it is quite logical to conclude that more work would have been done if these two smart individuals have taken one separate problem each.

This point of view makes sense and it is very useful to be aware it as well as it’s necessary to keep in mind that this view is limited and by enforcing it, management demonstrates it’s focus on the shot-term wins rather than long-term strategy.

Well, first of all I’m a software developer and was greatly influenced by the recent “getting into the Zone” trend that forces “leave me alone” (aka “f*ck open-office”) ideas (attitudes) upon everybody.

I’m glad that I confidently can state that I grew out of that professionally.

Most of this kind of articles advocate for quiet and comfortable spaces and it is completely normal and I don’t think there is anything out of the ordinary here. Except one personal to me thing: I’m trying to avoid being comfortable at all costs. For me the idea of comfort is the idea of giving up on improvement and settling down. At this point of my life I realize that comfort is what I will find useless when looking back in the future.

While pair programming you are not only within open-office but you are actively communicating with another person. Communicating the problem, walking through the code and finally communicating the final solution. It’s is not easy at all. And it is a skill that you need to work on, develop and use as a tool when needed. Your social skill.

If you are not familiar with rubber ducking, it’s a technique of getting out of “the Zone” and shaking off your tunnel vision, where you are trying to explain the problem and walk through the code with a rubber duck.

This technique is a predecessor to the pair programming. While “rubber ducking” it’s impossible for you to get a solid feedback and bullet points that you have missed (rubber ducks don’t talk, duh), during pair programming all your comments and ideas are actually bouncing back at you accompanied with a feedback, questions and solutions.

When a junior developer gets hired, pair programming is one of the best way to get him/her up to speed and communicate, transfer all conventions that are set by the team.

There is also a social aspect with new hires. Pair programming is a best way to get to know everybody during the pair rotation.

People who never practiced this technique will get uncomfortable at first but will adjust very quickly and the end prize for the project or a company is better communication, comfort and team spirit.

If you haven’t already, try pairing with experienced and knowledgable developers. This experience is priceless! And if you are newbie and this is your first time pairing, count yourself lucky, you will benefit greatly in the long run.

When you work by yourself it is normal for everyone to drag things for a while. Problem is boring and tedious, and you already know the solution. Solution is also tedious. And you will take your time completing the task.

A problem that could have taken half an hour, will take a couple days to complete and move forward, but if you have a pair it’s almost never the case. Other person stimulates you and pushes you forward. There is no room for procrastination.

Knowledge transfer. As a future speed boost! Pair programming will naturally assure your team’s “knowledge safety”. If someone goes on vacation or leaves the team, this loss will not have an effect because everyone has a shared knowledge of the systems and infrastructure that was acquired through pairing.|||

As I grew fond of Agile and it’s practices, pair programming was one of the techniques that took me longest to absorb and understand. Mostly due to the “doubling” nature of it. I would say it’s…