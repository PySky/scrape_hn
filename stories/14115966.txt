In a previous post, I was explaining how a assignment was required to preserve the value of the variable in certain scenarios. This post will focus on how to resolve them using arrow functions.

Before continuing, I strongly recommend that you read my previous post to understand why ‚Äòthat = this assignments‚Äô were made back then and also to understand how a variable gets it‚Äôs value.

In the previous post, I made an example using object literal declaration which made it impossible to preserve the value of using arrow functions. So, we will discuss a different example that uses a assignment to preserve the value of the variable and later we will see how it can be replaced with arrow functions.

Consider the following example:

In the above scenario, the operator is used on a function when it is invoked. This is a special type of function invocation called constructor function invocation. In this type of function invocation, a new empty object is created, (let‚Äôs name it ) and the function is invoked on that object, like say, in this case. This means, the value of is set to for the invocation. Once, the invocation is done the is returned and assigned to the variable.

We then set the value of the attribute of that particular object instance, i.e, and invoke the method on that object. Everything works as expected. ‚ÄúPerson A‚Äù is printed.

Here you can see that the type of function invocation is a stand alone function invocation rather than a invocation using the dot operator. This means that the value of is set to the global object and hence ‚ÄúGlobal Person‚Äù is printed.

The takeaway here is that, though the function was defined on the object, this does not necessarily mean that the value of is always set to that particular object. It all depends on the way the function is invoked.

Scenarios like this generally happen when you dynamically add event listeners to DOM elements, say,

In the above statement, if depends on the value of in it‚Äôs implementation, then you will end up getting undesired results.

So how do we fix this?

There are a couple of ways around it, one simple way used back then was to save the value of in a local variable so that we can use it later when we need it.

In the above code, even though is a standalone invocation, the function actually makes use of the variable, rather than depending on the call site to get the correct value of and hence ‚ÄúPerson A‚Äù is printed.

What we have seen so far was before the advent of arrow functions. Arrow functions make the job much simpler as the value of the variable for an arrow function is bound to the enclosing scope at creation time and cannot be changed. The operator, , , and functions have no effect on the value of a arrow function.

So say we modify the above code as follows

Since the function was defined as an arrow function rather than the traditional anonymous function, and since it is defined within the lexical scope of the function , the value of is set to the surrounding lexical scope.

As mentioned earlier, the value of for an arrow function cannot be changed at run time.

As a result even though is a standalone function invocation, we still end up with the correct value, as it cannot be overridden by the invocation.

Thus arrow functions enable us to preserve the value of the variable and alleviate the need to make local variable assignments like ‚Äòthat = this‚Äô or ‚Äòself = this‚Äô. See you in the next one guys..Peace.. üôÇ|||

How arrow functions help to replace 'that = this' assignments in Javascript