The core concept of Nest is to provide an architecture, which helps developers to accomplish maximum separation of layers and increase abstraction in their applications.

Nest is built with features from both ES6 and ES7 (decorators, async / await). It means, that the easiest way to start adventure with it is to use Babel or TypeScript.

In this article I will use TypeScript (it is not required!) and I recommend everyone to choose this way too. Sample file:

So let’s start from scratch. Firstly, we have to create entry module of our application ( ):

At this moment module metadata is empty ( ), because we only want to run application (we do not have any controlles or components right now).

Second step – make file (or whatever) and use to create Nest application instance based on our module class.

If you want to have a full control of instance lifecycle, you can simply pass already created object as a second argument of  method, just like that:

It means, that you can directly add some custom configuration (e.g. setup some plugins such as morgan or body-parser).

The Controllers layer is responsible for handling incoming HTTP requests. In Nest, Controller is a simple class with decorator.

In previuos section we set up entry point for an application. Now, let’s build our first endpoint :

As you can guess, we created an endpoint with 3 different paths:

Look at our class again. Is it necessary to repeat ‚users’ in each path? Fortunately – not.

Nest allows us to pass additional metadata to decorator { path } which is a prefix for each route. Let’s rewrite our controller:

As you can see, methods in Nest controllers have the same list of arguments and behaviour as a simple routes in Express.

If you want to learn more about (request), (response) and you should read short Routing Documentation. In Nest, they work equivalently. In fact, Nest controller methods are some kind of encapsulated express routes.

is ready to use, but our module doesn’t know about it yet. Let’s open and add some metadata.

As you can see – we only have to insert our controller into array. It’s everything.

Almost everything is a component – Service, Repository, Provider etc. and they might be injected to controllers or to another component by constructor.

In previous section, we built a simple controller – . This controller has an access to our data (I know, it’s a fake data, but it doesn’t really matter here). It’s not a good solution. Our controllers should only handle HTTP requests and delegate more complex tasks to services. This is why we are going to create component.

In real world, should call appropriate method from persistence layer e.g. component. We don’t have any kind of database, so again – we will use fake data.

As might be seen in method we used . It is a Nest built-in Exception, which takes two parameters – error message and status code. It is a good practice to create domain exceptions, which should extend (more about it in „Error Handling” section).

Good, our service is prepared, let’s use it in .

As shown, will be injected into constructor.

It is incredibly easy to manage dependencies with TypeScript, because Nest will recognize your dependencies just by type! So this:

Is everything what you have to do. There is one important thing to know — you must have option set to true in your .

If you are not TypeScript enthusiast and you work with plain JavaScript, you have to do it in this way:

In this moment, application will not even start working.

Why? Because Nest doesn’t know anything about . This component is not a part of yet. We have to add it there:

That’s it! Now, our application will run, but still one of routes doesn’t work properly – . Why? Because we are trying to extract request body ( ) without express middleware. As you should already know, it is possible to pass express instance as a second argument of method.

Then setup it in our instance.

Nest is compatible with async / await feature from ES7, so we can quickly rewrite our :

Looks better right? There you can read more about async / await.

Module is a class with decorator. This decorator provides metadata, which framework uses to organize application structure.

Right now, it is our :

By default, modules encapsulate each dependency. It means, that it is not possible to use its components / controllers outside module.

Each module can also import another modules. In fact, you should think about Nest Modules as a tree of modules.

Let’s move and to UsersModule. Simply create new file e.g. with below content:

Then import into (our main application module):

As might be seen, with Nest you can naturally split your code into separated and reusable modules!

Middleware is a function, which is called before route handler. Middleware functions have access to request and response objects, so they can modify them. They can also be something like a barrier – if middleware function does not call , the request will never be handled by route handler.

Let’s build a dummy authorization middleware (for explanation purposes – just by username). We will use HTTP header to provide username (weird idea, but it doesn’t matter here).

Okey, we already have prepared middleware, but we are not using it anywhere. Let’s set it up:

As shown, Modules can have additional method – . This method receives as a parameter , an object, which helps us to configure middlewares.

This object has method, which receives infinite count of middlewares (this method uses spread operator, so it is possible to pass multiple classes separated by comma). method returns object, which has two methods:

When you pass in method, Nest will setup middleware for each route in controller:

But it is also possible to directly define for which path middleware should be used, just like that:

MiddlewareBuilder is a builder in fact. It means, that you can simply chain calls:

Middlewares are called in the same order as they are placed in array. Middlewares configured in sub-module are called after the parent module configuration.

There are special components in Nest called Gateways. Gateways help us to create real-time web apps. They are some kind of encapsulated socket.io features adjusted to framework architecture.

By default – server runs on port 80 and with default namespace. We can easily change those settings:

Of course – server will run only if component is listed in module array, so we have to place it there:

By the way, there are three useful events of Gateway:

In Gateway, we can simply subscribe to emitted messages:

If you want to assign to chosen property socket.io native server instance, you could simply decorate it with decorator.

Value will be assigned after server initialization.

As you already know, Nest Gateway is a simple component, which can be injected into another components. This feature gives us possibility to choose how we are going to react on messages.

Of course – we can just inject components to Gateway and call their appropriate methods, when it is necessary.

But there is another solution – Gateway Reactive Streams. You can read more about them here.

It is unbelievably simple to transform Nest application into Nest microservice.

Take a look – this is how you create web application:

Now, switch it to a microservice:

By default Nest microservice is listening for messages via TCP protocol. It means that right now  (and , etc. too) will not be useful, because it is mapping HTTP requests. So, how microservice will recognize messages? Just by patterns.

What is pattern? It is nothing special. It could be an object, string or even number (but it is not a good idea).

As you might seen – if you want to create message handler, you have to decorate it wih . In this example, I chose as a pattern.

You already know how to listen for messages. Now, let’s check how to send them from another microservice or web application.

Before you can start, Nest has to know, where you are exactly going to send messages. It’s easy – you only have to create object.

decorator receives object as a parameter. This object can have 3 properties:

As you might seen, in order to send message you have to use method, which receives message pattern and data as an arguments. This method returns an from Rxjs package.

It is very important feature, because reactive provide set of amazing operators to deal with, e.g. , , , and more…

Of course, if you want to use Promises instead of Observables, you could simply use method.

Now, when someone will make request ( ), that’s how response should looks like (if both microservice and web app are available):

There is another way to work with Nest microservices. Instead of direct TCP communication, we could use amazing Redis feature – publish / subscribe.

Of course before you can use it, it is obligatory to install Redis.

To create Redis Microservice, you have to pass additional configuration in method.

And that’s all. Now your microservice will subscribe to messages published via Redis. The rest works same – patterns, error handling, etc.

Now, let’s see how to create client. Previously, your client instance configuration looks like that:

We want to use Redis instead of TCP, so we have to change those settings:

Easy, right? That’s all. Other functionalities works same as in TCP communication.

Nest Modules can export their components. It means, that we can easily share component instance between them.

The best way to share an instance between two or more modules is to create Shared Module.

For example – if we want to share component across entire application, we could do it in this way:

Then, we only have to import this module into another modules, which should share component instance:

Dependency Injection is a strong mechanism, which helps us easily manage dependencies of our classes. It is very popular pattern in strongly typed languages like C# and Java.

In Node.js it is not such important to use those kind of features, because we already have amazing module loading system and e.g. sharing instance between files is effortless.

The module loading system is sufficient for small and medium size applications. When amount of code grows, it is harder and harder to smoothly organize dependencies between layers. Someday everything may just blow up.

It is also less intuitive than DI by constructor.

This is the reason, why Nest has its own DI system.

You have already learnt, that it is incredibly easy to add component to chosen module:

But there is some other scenarios, which Nest allows you to take advantages of.

How to use?

To inject custom provided component / value with chosen key, you have to tell Nest about it, just like that:

Sometimes you might want to directly get component instance from module reference. It not a big thing with Nest – just inject in your class:

In addition to this, is combined with real instance of your module. What it means? If your looks like that:

Then, you can simply call this method from :

Of course – if you are using TypeScript – you have to cast instance to appropriate type.

Nest gives you a set of test utilities, which boost application testing process. There are two different approaches to test your components and controllers – isolated tests or with dedicated Nest test utilities.

Both Nest controllers and components are a simple JavaScript classes. Itmeans, that you could easily create them by yourself:

If your class has any dependency, you could use test doubles, for example from such libraries as Jasmine or Sinon:

The another way to test your applications building block is to use dedicated Nest Test Utilities.

Those Test Utilities are placed in static class ( module).

Sometimes you might not want to use a real instance of component / controller. Instead of this – you can use test doubles or custom values / objects.

Nest has error handling layer, which catches all unhandled exceptions.

If – somewhere – in your application, you will throw an Exception, which is not (or inherited one), Nest will handle it and return to user below json object (500 status code):

In your application, you should create your own Exceptions Hierarchy. All HTTP exceptions should inherit from built-in .

For example, you can create and classes:

Then – if you somewhere in your application throw , Nest will response to user with status code 404 and above json object:

It allows you to focus on logic and make your code much easier to read.|||

Nest is a powerful web framework for Node.js, which helps you to effortlessly build efficient, scalable applications. It uses modern JavaScript, is built with TypeScript and combines best concepts from both OOP (Object Oriented Progamming) and FP (Functional Programming).