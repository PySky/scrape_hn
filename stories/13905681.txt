Given an circular array of integers, find subarray in it which has the largest sum.



 Input:Â Â {2, 1, -5, 4, -3, 1, -3, 4, -1}

 Output: Subarray with the largest sum is {4, -1, 2, 1} with sum 6.



Input:Â Â {-3, 1, -3, 4, -1, 2, 1, -5, 4}

 Output: Subarray with the largest sum is {4, -1, 2, 1} with sum 6.

 



The idea is to find the sequence which will have maximum negative value. If we remove that minimum sum sequence from the input sequence, then we will be left with maximum sum circular sequence. Finally, we return maximum ofÂ theÂ maximum-sum circular sequence (includes corner elements) andÂ maximum-sum non-circular sequence.

For example, consider the array .Â The sequence having maximum negative value is i.e. . If we remove thisÂ minimum sum sequence from the array, we will get the maximum sum circular sequence i.e. having sum .Â Since maximum sum circular sequence is greater than the maximum sum non-circular sequence i.e. for the given array, it is the answer.

We can findÂ maximum-sum non-circular sequence in linear timeÂ by usingÂ Kadaneâ€™s algorithm. We can findÂ maximum-sum circular sequence by inverting the sign of all array elements and then applyingÂ Kadaneâ€™s algorithm.

For example, if we invert signs of arrayÂ  we get which hasÂ maximum sum sequence having sum . Now inverting theÂ signsÂ back, we get minimumÂ sum sequence having sum .

Output: 

 

 The sum of subarray with the largest sum is 6

 

 Â 

 The time complexity of above solution is and auxiliary space used by the program is .



Please use ideoneÂ orÂ C++ ShellÂ or any other online compiler link to post code in comments.

 Like us? Please spread the word and help us grow. Happy coding ğŸ™‚

|||

Maximum Sum Circular Subarray: Given an circular array of integers, find subarray in it which has the largest sum. We can easily solve this problem...