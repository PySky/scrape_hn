This is Part 3 in our Alchemy 101 series. Catch up on Part 1: Elixir Module Attributes and Part 2: From Elixir Mix Configuration to Release Configuration.

One of the biggest selling points of Elixir is the means it gives you to write fault tolerant applications via its concurrency model. Processes can broadcast their failure to dependant processes which can take appropriate action. You decide how processes should respond to failure based on your use case. There is no single solution. I’ll give you an example in which not handling failure led to, you guessed it, more failure.

Then add the amqp dependency to mix.exs.

Now add the following to lib/rabbit.ex.

That’s all you need, fetch the dependencies and test Rabbit.

Head to the default exchange and you should see some activity on the Message rates chart. Keep the above IEx shell open, you will need it again soon.

Go back to the IEx shell, notice how there is an OTP error report. Looks serious, the main takeaway from it is below. The socket to RabbitMQ closed causing a process to crash.

But it still appears like you can publish messages. Try it.

But if you head to the default exchange there appears to be no new messages coming in. But why?

First of all we don’t see any failures in the Rabbit process because AMQP.Basic.publish/4 ultimately leads to a :gen_server.cast/2 (amqp_channel.erl in rabbit_common) being called with channel.pid. :gen_server.cast/2 will not return or throw an error if the PID (in this case channel.pid) does not exist. This means the failure was hard to detect. Now imagine if your application was running in the background, this could have been even more difficult to spot.

Here comes the good part, how to handle the failure. We want Rabbit to be sent a message when the socket to RabbitMQ is closed. To do this we need to link to the channel process (to receive an exit message if it stops) we started and trap exits i.e. not crash if we receive an exit signal. To do this add the following code.

Kill and start the IEx shell and then run the following.

Jump to the IEx shell and observe the output.

Perfect, now when the socket is closed the dependent process, Rabbit, is informed. Now to respond to the failure. This is something you must decide, no one including myself, library/framework developers and others can tell what to do. This is in your hands. It is also the reason why Elixir (and Erlang) has such a good reputation when it comes to building fault tolerant systems. You decide on how to respond to failure, there is no single silver bullet. For the demo though, I have choosen to simply stop then Rabbit GenServer when I receive an :EXIT for :socket_closed_unexpectedly.

Hope you enjoyed reading. Feel free to learn more about RabbitMQ and please give me your feedback.

This is Part 3 in our Alchemy 101 series. Catch up on Part 1: Elixir Module Attributes and Part 2: From Elixir Mix Configuration to Release Configuration.|||

One of the biggest selling points of Elixir is the means it gives you to write fault tolerant applications via its concurrency model. Processes can broadcast their failure to dependant processes which can take appropriate action. **You decide how processes should respond to failure based on your use case. There is no single solution.** I'll give you an example in which not handling failure led to, you guessed it, more failure.