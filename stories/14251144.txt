Functions as a Service or FaaS (by Alex Ellis) is a really neat way of implementing serverless functions with Docker. You can build out functions in any programming language and then deploy them to your existing Docker Swarm.

In this post we'll look at an experimental CLI for making that even easier

Below is a quick example of how easy this is to do.

This diagram gives an overview of how the FaaS function package, the Docker image, and the command fit together.

To deploy a function onto a FaaS stack, you firstly must write the function itself. This is really easy and you can do it in any language which runs inside Docker (i.e. all of them). At the current time, the FaaS CLI supports Python and Node, so for this example we'll use Python.

My very simple fib function is written in Python:

The way FaaS runs the function is by running this inside Python:

When you build a function with the FaaS CLI, what it's doing is packaging up your function ( ) and building out the parts for Docker to run the container.

Here is an example package for our function, located inside 's directory:

The package includes everything to allow Docker to run our function - , and

Now that our function is built, we need to deploy it. Before we do this however, we must push our function to the hub.

Now for the deploy! This can be done with one command:

When you run this command, the function will be deployed to the remote Docker Swarm. How cool is that?

The final thing to do is to test your function deployed successfully. You can do this via the FaaS UI or via .

In this post we've seen how to package and deploy a function using the FaaS framework. We've looked at how to write a function, how to build it into a function package and deploy it to a remote Docker Swarm. Pretty neat stuff.

I've built a number of other functions and hope to expand this to include more soon. I wrote a function to shorten URLs, using a service I built, which received a PR from Richard Gee to merge in an armhf Dockerfile for use on Raspberry Pies. This was a big milestone for me as I've never accepted a PR for one of my projects before!

Props to Alex Ellis for creating such an awesome tool, I look forward to participating in the development of FaaS in the future. It's worth noting that FaaS is currently considered experimental but you can expect more language templates amongst some other neat features. First... learn Go. ðŸ™ˆ|||

Functions as a Service is a really neat way of implementing serverless functions with Docker. See how to deploy a FaaS function to a remote Docker Swarm!