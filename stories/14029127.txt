Most browsers from 2012 onwards (IE10+). As of early 2017, it should support 95% of users (caniuse.com); depending on your target audience it could be higher or lower. Tippy gracefully degrades on older browsers (and with JavaScript disabled) by using the browser's default tooltip. Old IE and Opera Mini should not throw errors but others might Tippy works on touch devices almost the same as on desktop/mouse devices. However, in order for tooltips to close when tapping anywhere on the body on iOS devices, it adds a class to the body. Tooltips in v0.8.1+ should now be properly accessible.

Alternatively, you can install through npm: or use the unpkg.com CDN: 1. Place the stylesheet in your document's . 2. Include the file in your document before your own scripts: If you installed the npm package, the JS and CSS files are available in the dist folder: comes bundled with (unminified), and (minified) is Tippy by itself if you want use a different version of Popper.js.

First, give an element a attribute containing what you want the tooltip to say. Then, to give it a Tippy tooltip, create a new Tippy instance by passing in a CSS selector. You can also directly pass in a DOM element: Elements without a attribute or an HTML template will not receive a tooltip. You can pass in any CSS selector to initialize it. See document.querySelectorAll() for reference. Here's how to create a tooltip for an element with an of : Minimal Working Example, with all files in the same directory:

Tippy's constructor takes an object as a second parameter for you to customize all tooltips being instantiated. Here's an example: You can also specify settings on the element itself by adding attributes. This overrides any global settings specified in the Tippy instance. This is helpful if you want to globally define settings, but make a few tooltips different without having to make a new Tippy instance.

Note: settings with camelCase are lowercase in HTML. For example, is in HTML. Specifies which direction to position the tooltip on the element. Add the suffix or to shift the position. is an example. Specifies which type of events will trigger a tooltip to show. Separate each by a space. is for hovering and touch on mobile, and is for keyboard navigation. Use if you want to show/hide the tooltip manually/programmatically (see below). refers to the fact that you can have any event listener, but it won't have the opposite "hide" event. Makes a tooltip interactive, i.e. will not close when the user hovers over or clicks on the tooltip. This lets you create a popover (similar to Bootstrap) when used in conjunction with a trigger. Specifies how long it takes after a trigger event is fired for a tooltip to show. Specifies how long it takes after a leave event is fired for a tooltip to hide. Does not apply when clicking on the document to hide tooltips. Specifies the type of transition animation a tooltip has. Adds an arrow pointing to the tooltipped element. Setting this to disables . Specifies how big the tooltip's arrow is. Adds a material design-esque filling animation. This is disabled if you have set to . Specifies how long the transition animation takes to complete when showing a tooltip. Specifies how long the transition animation takes to complete when hiding a tooltip. Allows you to add HTML to a tooltip. See Creating HTML templates. Specifies how big the tooltip is. Specifies how far away the tooltip is from its element. The CSS styling theme. You can add your own easily. See Creating themes. Offsets the tooltip on its opposite axis. For position top and bottom, it acts as offsetX. For position left and right, it acts as offsetY. Specifies whether to hide a tooltip upon clicking its element after hovering over and when clicking elsewhere on the document. For click-triggered tooltips when using , toggle functionality remains unless you use . Specifies whether to allow multiple tooltips open on the page (click trigger only). Specifies whether to follow the user's mouse cursor (mouse devices only). Modifies the with a cubic bezier to create a "slingshot" intertial effect. Specifies whether to transition between flips or not. Uses the same transition timing as . Allows more control over tooltip positioning and behavior. See right below. You can define a setting with Popper.js settings. View the Popper.js documentation to see the settings you can specify. Here's an example of how to integrate Popper.js settings into Tippy, so that a tooltip will flip to the bottom from the right if there's not enough room in the viewport. new Tippy('.mySelector', { position: 'right', popperOptions: { modifiers: { flip: { behavior: ['right', 'bottom'] } } } }) By default, tooltips will flip on their opposite axis if there is not enough room in the viewport. (v0.4.x's new Popper.js version fixed top-positioned tooltips so they will also flip). If you want to force no flip, then use: // Force no flip for a top-positioned tooltip new Tippy('.mySelector', { popperOptions: { modifiers: { flip: { behavior: ['top'] } } } }) If you want things to happen at certain times during a tooltip's show/hide events, you can add callback functions in the settings object. There are 5 to use: new Tippy('.tippy', { beforeShown: function() { // When the tooltip has been triggered and has started to transition in }, shown: function() { // When the tooltip has fully transitioned in and is showing }, beforeHidden: function() { // When the tooltip has begun to transition out }, hidden: function() { // When the tooltip has fully transitioned out and is hidden }, wait: function(show, event) { // See below for an explanation } }) is a special callback that allows you to control the method for easier integration into UI libraries like React when using HTML tooltips with components. The function itself takes a callback as a parameter, which is just the method for the tooltip. new Tippy('.tippy', { wait(show, event) { // Change your app model to be rendered by the UI library/framework // Queue show to run once rendering is complete setTimeout(() => { // update(popper) content // event.type to see what trigger fired the event show() }, 0) } })

Tippy allows you to create your own theme for your tooltips easily. If you wanted to make a theme called , then your CSS would look like: .tippy-tooltip.honeybee-theme { /* Your styling here. Example: */ background-color: yellow; border: 2px solid orange; } To style the arrow, target the element with an attribute: Arrows since v0.9.0 are CSS triangles, read this comment to see how to style arrows properly. In case you want to target the content directly: .tippy-tooltip.honeybee-theme .tippy-tooltip-content { /* Your styling here. Example: */ color: black; } To style the animateFill circle, target the element with an attribute: .tippy-tooltip.honeybee-theme [x-circle] { /* Your styling here. Example: */ background-color: yellow; } Then, give your instance a setting with your theme's name: ...or specify a attribute on your tooltipped element.

It's worth noting that basic HTML can be injected straight into the element's attribute. Example: , so there's no need to create a template if you want something simple like that (though for backwards browser compatibility/fallback it won't look pretty). For more complex scenarios, use a template. Regarding fallback: HTML template tooltips can't be shown to older browsers (IE <= 9), so you'll need to consider that when using them on your site. Create an HTML template on the document. Set its to so it won't be seen. You don't need to specify a attribute with a HTML templated tooltip; it will be ignored. You may want to add a title attribute however to notify incompatible users of something. In your instance, specify either the in the setting, or the element itself. Use this selector to target your tooltip template. Replace "#my-template-id" with your own template's , including the leading hash. If you're using a DOM element in the setting and no is found, it defaults to . .tippy-tooltip[data-template-id="#my-template-id"] { /* Your styling here. Example: */ padding: 2rem; } Interactive elements also receive a class of upon triggering so that you can still style hover effects when the user has moved the cursor away from the tooltipped element and onto the tooltip itself. You should disable when using HTML content. If the tooltip is tall, the circle element inside that creates the effect won't fill the entire tooltip. Non-textual content also breaks the effect's illusion.

Find the tooltipped element's popper reference by calling the method and passing it in (the tooltipped element, not the popper) directly: It must be a single tooltipped element. Now you can show, hide, update or destroy it. The and methods take a transition duration as their second (optional) parameters. The method will update the popper's tooltip content by checking if there is a new attribute on its tooltipped element. If it's a HTML tooltip, it will inject the new HTML of the template. ing a popper removes listeners from its tooltipped element reference, destroys its popper instance, and removes it from the global references array. In this example, we use another button to control the tooltip. Give controllers a attribute (doesn't need a value). First, hover over the two buttons on the right to see their original content. If you click the button on the left, it will update the tooltips with new content. In v0.5.x it's now possible to find the reverse reference (i.e., the tooltipped element from a popper element). An example of this being useful is clicking inside a popper, and getting the popper by doing . Then, you might want to do something with its element reference.|||

