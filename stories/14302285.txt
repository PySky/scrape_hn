ReactJS does not update the Real DOM directly but it updates the Virtual DOM.

This causes a great performance benefit for ReactJS. In this article we will see why updating the Real DOM is slow and what react does by updating the Virtual DOM

Updating a DOM is not slow, it is just like updating any JavaScript object; then what exactly makes updating Real DOM slow?

Let’s look at the below image from html5Rocks to see how exactly browser renders a web page

Rendering engines which is responsible for displaying the rendering the webpage on the browser screen parses the HTML page to create DOM. It also parses the CSS and applies the CSS to the HTML creating a render tree, this process is called as attachment.

Layout process give exact co-ordinates to each node of the render tree, where the node gets painted and displayed.

So when we do,

Recalculating the CSS and layout use complex algorithm and they effect the performance.

Thus updating a Real DOM does not involves just updating the DOM but it involves a lot of other process.

Also, each of the above steps runs for each update of the real DOM i.e. if we update the Real DOM 10 times each of the above step will repeat 10 times. This is why updating Real DOM is slow.

Virtual DOM is in-memory representation of Real DOM. It is lightweight JavaScript object which is copy of Real DOM.

Updating virtual DOM in ReactJS is faster because ReactJS uses

AngularJS uses dirty checking the find the models which has changed. This dirty checking process runs in cycle after a specified time. As the application grows, checking the whole model reduces the performance and thus makes the application slow.

ReactJS uses observable’s to find the modified components. Whenever setState() method is called on any component, ReactJS makes that component dirty and re-renders it.

Whenever setState() method is called, ReactJS creates the whole Virtual DOM from scratch. Creating a whole tree is very fast so it does not affect the performance. At any given time, ReactJS maintains two virtual DOM, one with the updated state Virtual DOM and other with the previous state Virtual DOM.

ReactJS using diff algorithm compares both the Virtual DOM to find the minimum number of steps to updated the Real DOM

Finding minimum number of modifications between two trees have complexity in the order of O(n^3). But react uses heuristic approach with some assumptions which makes the problems to have complexity in the order of O(n).

ReactJS uses following steps to find the difference in both the Virtual DOM’s

3. Reconciliation. It is the process to determine which parts of the Real DOM need to be updated. It follow below steps:

Reconciliation in detail can be read from React’s official doc

ReactJS using the diff algorithm to find the minimum number of steps to update the Real DOM. Once it has these steps, it executes all the steps in one event loop without involving the steps to repaint the Real DOM. Thus, if there are more element which gets updated ReactJS will wait for the event loop to finish then, in bulk will updated the real DOM with all the updated elements.

Once all the steps are executed, React will repaint the Real DOM. This means during the event loop, there is exactly one time when the Real DOM is being painted. Thus all the layout process will run only on time for updating the real DOM.|||

This causes a great performance benefit for ReactJS. In this article we will see why updating the Real DOM is slow and what react does by updating the Virtual DOM Updating a DOM is not slow, it is…