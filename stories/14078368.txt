To kick things off we will design a standalone system component that is conceptually capable of performing the following steps:

Luckily for us we don’t have to design such a system from scratch since the following solutions satisfy the desired system design:

When building and or setting up such a system we have be to sure to follow some design principles:

Why is #1 important? Imagine a scenario where we don’t use docker and one developer decided to bump up a library version and didn’t realize that this will break the app. If we simply cache the representation of dependencies on the local filesystem of the previously deployed app version we don’t need to play the guessing game and hoping to restore the previous environment by reinstalling the previous version of the lib, we simply revert back to the EXACT same dependencies, config and app version. #2 is self explanatory and a widely adopted practice of the 12 factor app manifesto.

You can take all you have built in this step of the roadmap and simply wrap the REST API in a CLI tool and provide it to your dev team. It’s not perfect, but following the lean methodology of shipping products we deliver value at each step.

If you are a developer and a devops person just made this CLI tool for you, that relieves you of tedious work of having to SSH into a machine (or even multiple machines!) and perform multiple steps to deploy, this intermediate CLI command is a breath of fresh air.

Having a separate instance of the application isn’t exactly vital to the process of continuous delivery, but it is a widely adopted pattern on how to QA, test and gather feedback of your new version of the application prior to the final production release. At the end of this section we will explore an alternative on how to QA features without a staging environment.

The value for developers by introducing a staging environment is pure peace of mind that they are able to release their changes to a neutral and separate instance of application (neutral in the sense of — this not being their own laptop or personal setup) before taking the effects of their code to production.

Having a staging environment also solves a lot of problems for continuous delivery with respect to deployment since we can implement a pattern named blue-green deployment.

The basic idea here is to run a staging green instance of your application in parallel to the production blue instance. Your blue instance is considered production and you use your green instance as staging. In front of both instances is a traffic router that can, depending on the type of the application we are running, mirror traffic the the green instance for the purposes of performance QA. So you simply integrate all the changes to your green instance and once you are happy with the changes, you simply instruct the router to start redirecting traffic to the green instance which becomes your new production and blue becomes staging. The beauty of such system design is also to be able to trivially rollback by switching traffic back to the blue instance in case of an uncaught regression due to new changes.

In this setup there are a lot of options how to deal with database transactions and this really depends on the nature of your application and data. One of the options as per Martin Fowler is to switch to read only mode before the cut of and then switching back to read write mode of your app.

An alternative to the pattern of a staging environment for the purposes of QA and gathering feedback are so called feature flags (also known as feature toggle). This is a mechanism that hides specific features from users based on a built in permissions system, that defines, if a specific user has access to certain feature. This enables developers, to simply release the newly built feature to production, give permissions to QA users in the system and then test the feature directly in production. Now feature flags aren’t exclusive to the pattern of a staging environment, but can be a complementary component to the release process.

CI Platform = you push code, this system is hooked to that event and it grabs the code, tests it, builds it and optionally triggers subsequent events such as deployment.

When we go out and start picking and choosing candidates for our CI platform there are several important features we should be looking for in a CI platform:

There are other things to consider when choosing a CI platform and one of them is to decide whether or not we want to host the platform ourselves or should we utilize a multi tenant hosted solution. When making such a decision it’s just important that we weigh in on the security vs convenience tradeoff. Keep in mind that a hosted CI platform can save us a ton of time when trying to set up complex end to end tests that require us to spin up a ton of supporting infrastructure (i.e. circle CI has a lot of databases already set up for you).

If you have followed the pattern of building a standalone deployment system that can be triggered via a REST API then you shouldn’t be worried about security as much, since you aren’t letting a CI platform perhaps even outside of the boundaries of your system to ssh into your machines since the responsibility of the CI platform stops at the point of pushing the docker image to your registry of uploading the application package to s3 or similar.

Once we introduce the CI platform to our tech stack this will allow developers to start developing build pipelines and will relieve them of a lot of stress of potentially breaking the app since they will have an independent system running tests automatically for every build. A CI platform also brings accountability to team dynamics since the team will be able to clearly see, if coverage is going up or down (pssst .. come CI systems have first class support for coverage data or you can make use of coverage analysis tooling like coveralls) due to someone pushing untested code.

Now that we have a system that is capable of deploying our application and a system that is testing it continuously, among other steps in the pipeline, we can build a contract between the two in a sense where:|||

In case you are a CTO or a devops lead of some sorts and have taken the initiative to adopt a continuous delivery style of shipping software, you are likely to be overwhelmed and are wondering where…