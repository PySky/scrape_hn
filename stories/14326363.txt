This blog post was authored by the Microsoft Cognitive Services Team.

Microsoft Cognitive Services enables developers to augment the next generation of applications with the ability to see, hear, speak, understand, and interpret needs using natural methods of communication.

Today at the Build 2017 conference, we are excited to announce the next big wave of innovation for Microsoft Cognitive Services, significantly increasing the value for developers looking to embrace AI and build the next generation of applications.

Today, 568,000+ developers from more than 60 of countries are using Microsoft Cognitive Services that allow systems to see, hear, speak, understand and interpret our needs.

Let’s take a closer look at what these new APIs and Services can do for you.

Thank to Custom Vision Service, it becomes pretty easy to create your own image recognition service. You can use the Custom Vision Service Portal to upload a series of images to train your classifier and a few images to test it after the classifier is trained.

It’s also possible to code each step: let’s say I need to quickly create my image classifier for a specific need, this can be products my users are uploading on my website, retail merchandize or even animal images in a forest.

I can start with Visual Studio to create a new Console Application, and replace the contents of Program.cs with the following code. This code defines and calls two helper methods:

For more information about Custom Vision Service, please take a look at the following resources:

With Custom Decision Service, you can personalize content on your website, so that users see the most engaging content for them.

Let’s say I own a news website, with a front page with links to several articles. As the page loads, I want to request Custom Decision Service to provide a ranking of articles to include on the page.

When one of my users clicks on an article, a second request is going to be sent to the Custom Decision Service to log the outcome of the decision. The easiest integration mode requires just an RSS feed for the content and a few lines of javascript to be added into the application. Let’s get started!

The order matters as the callback function should be defined before the call to Ranking API. The data argument contains the ranking of URLs to be rendered. For more information, see the tutorial and API reference.

For more information about Custom Decision Service, please take a look at the following resources:

With Video Indexer, it’s now possible to process and extract lots of insights from video files, such as:

From one video to multiple insights

Let’s say I’m a news agency with a video library that my users need to search against: I need to easily extract metadata on the videos to enhance the search experience with indexed spoken words and faces.

The following C# code snippet demonstrates the usage of all the Video Indexer APIs together.

var apiUrl = "https://videobreakdown.azure-api.net/Breakdowns/Api/Partner/Breakdowns"; var client = new HttpClient(); client.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", "InsertYourKey"); var content = new MultipartFormDataContent(); Console.WriteLine("Uploading..."); var videoUrl = "https:/..."; var result = client.PostAsync(apiUrl + "?name=some_name&description=some_description&privacy=private&partition=some_partition&videoUrl=" + videoUrl, content).Result; var json = result.Content.ReadAsStringAsync().Result; Console.WriteLine(); Console.WriteLine("Uploaded:"); Console.WriteLine(json); var id = JsonConvert.DeserializeObject<string>(json); while (true) { Thread.Sleep(10000); result = client.GetAsync(string.Format(apiUrl + "/{0}/State", id)).Result; json = result.Content.ReadAsStringAsync().Result; Console.WriteLine(); Console.WriteLine("State:"); Console.WriteLine(json); dynamic state = JsonConvert.DeserializeObject(json); if (state.state != "Uploaded" && state.state != "Processing") { break; } } result = client.GetAsync(string.Format(apiUrl + "/{0}", id)).Result; json = result.Content.ReadAsStringAsync().Result; Console.WriteLine(); Console.WriteLine("Full JSON:"); Console.WriteLine(json); result = client.GetAsync(string.Format(apiUrl + "/Search?id={0}", id)).Result; json = result.Content.ReadAsStringAsync().Result; Console.WriteLine(); Console.WriteLine("Search:"); Console.WriteLine(json); result = client.GetAsync(string.Format(apiUrl + "/{0}/InsightsWidgetUrl", id)).Result; json = result.Content.ReadAsStringAsync().Result; Console.WriteLine(); Console.WriteLine("Insights Widget url:"); Console.WriteLine(json); result = client.GetAsync(string.Format(apiUrl + "/{0}/PlayerWidgetUrl", id)).Result; json = result.Content.ReadAsStringAsync().Result; Console.WriteLine(); Console.WriteLine("Player token:"); Console.WriteLine(json); When I make an API call and the response status is OK, I will get a detailed JSON output containing details of the specified video insights including keywords (topics), faces, blocks. Each block includes time ranges, transcript lines, OCR lines, sentiments, faces, and block thumbnails. For more information, please take a look at: The full list of technical resources in the Get started guide With Bing Custom Search, I can create a highly-customized web search experience for my targeted web space: there are a lot of integration scenarios and end-user entry points for a custom search solution. For example, Amicus is building an app that changes the way global aid is funded and delivered by providing donors with full transparency. Amicus needed to help donors learn, find and fund projects specifically related to global aid that were of interest and relevant to them. With Bing Custom Search, Amicus has been able to identify its own set of  relevant web pages in advance: when users have a single concept of interest (like ‘water’, ‘education’ or ‘India’), Bing Custom Search is able to deliver highly relevant results in the context of global aid. For more information about Bing Custom Search, don’t hesitate to look at the Bing Custom Search Blog announcement.

Let’s imagine that I need to build a customized search for my public website on ‘bike touring’ – a very important activity in Seattle area.

Below is a JSON response of a Bing Web Search API call with a customconfig parameter.

For more information, please take a look at the dedicated blog announcement as well as the following resources:

 •    Bing Custom Search portal

 •    The full list of resources in the Get started guide

Thank you for reaching this far! As a reward, we’re pleased to inform you about our new AI MVP Program!

As you know, the world of data and AI is evolving at an unprecedented pace, and so is its community of experts.  The Microsoft MVP Award Program is pleased to announce the launch of the new AI Award Category for recognizing outstanding community leadership among AI experts. Potential “AI MVPs” include developers creating intelligent apps and bots, modeling human interaction (voice, text, speech,...), writing AI algorithms, training data sets and sharing this expertise with their technical communities.

An AI MVP will be award based on contributions in the follow technology contribution areas:

The AI Award Category will be a new addition to the current award categories. If you or someone you know may qualify, submit a nomination!

Thank you again and happy coding!|||

Microsoft Cognitive Services enables developers to augment the next generation of applications with the ability to see, hear, speak, understand, and interpret needs using natural methods of…