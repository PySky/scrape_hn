The Sweet Shop science behind prioritisation and why it’s essential for your feature requests

If you ask your customers they would like almost everything from your backlog of feature ideas, ask your sales team and they want the features to close the next big deal, talk to support and they want the feature to fix the problems of their most persistent and irate customers and so on…!

The simple truth is that you can’t act upon all of this feedback until you understand where feature requests are coming from and what their priority is. At the moment, most SaaS businesses are missing this crucial step. Instead, they are building the features they hear the most or which have the most votes, following the HiPPO or being swallowed by a whale.

These techniques give you some insights but we don’t believe they give you the full picture or right information. They certainly don’t give you the information you need to work out which features will add the most value to your product. We all have limited time and resources so it’s vital you don’t waste them building features that don’t matter.

I was recently listening to a SaaScribe podcast when Brian Balfour, VP of growth at HubSpot came out with a perfect description of the big challenge we all face:

Un-prioritised lists of “wants” are almost worthless to a product manager. We built a system to encourage customers and teams to prioritise, which in many cases surfaces some surprisingly small features that can make everyone happy. This is particularly true with regard to customer requests. Here’s a little story from our last SaaS business…

We’d fallen into the trap of thinking that our customers wanted a particular feature because we kept hearing it over and over again. It had the most “votes” on our spreadsheet so therefore we (wrongly) assumed it would add the most value.

When we implemented Receptive, we understood who the feature requests were coming from (free triallers, churned users, paying customers of varying account value) and most importantly, the priorities of those feature requests. When we folded in the value and prioritisation of our customers, the big feature that “everyone wanted” was nowhere to be seen. Instead we’d unearthed a ton of smaller, feature requests that our customers prioritised but most of which we’d never even heard of.

OK, so here’s our “science” behind the surprising results or “The Kid in the Sweet Shop Problem” as we like to call it.

When you take a child to a sweet shop, they want everything. I have two children. This happens…every…single…time. However, when you ask them to prioritise (due to a cost constraint in this case - usually a fumble in the bottom of my bag in the hope of finding some change!) the understanding of what they really want changes dramatically. However, they will change their mind again…and again…until we’ve been in there an hour. Fun times.

The same goes for users of your SaaS product. Prioritisation should be dynamic and not static. Instead of gathering feature requests as a one-off task and asking for votes, you need to give users the tools to change their feature requests and priorities.

Again, like a kid in a sweet shop, priorities change so you need to capture that. For example, you’ll notice patterns depending on where the user is in the lifecycle of your product. Users going through onboarding will have very different feature requests and priorities to a seasoned user who’s been with you for years.

When we began using Receptive, we moved from having a static, vote-based system to one which is dynamic and priority-based. Now that’s when feature requests start to tell you something tasty.

The psychology behind choice & why too much is bad for us

In case I’ve made you want sweets.|||

Feature prioritization should be dynamic. Instead of gathering feature requests as a one-off task you need to give users the tools to change their priorities.