One of the things I didn't touch on at all in the book is the functionality. This also came up recently during one of my trainings, and I realize that a lot of people probably could use this, so I wanted to let you all know about it.

The functionality is a bit of a hidden feature (Git actually has a lot of cool hidden features, if you haven't figured that out yet). The name stands for "reuse recorded resolution" and as the name implies, it allows you to ask Git to remember how you've resolved a hunk conflict so that the next time it sees the same conflict, Git can automatically resolve it for you.

There are a number of scenarios in which this functionality might be really handy. One of the examples that is mentioned in the documentation is if you want to make sure a long lived topic branch will merge cleanly but don't want to have a bunch of intermediate merge commits. With turned on you can merge occasionally, resolve the conflicts, then back out the merge. If you do this continuously, then the final merge should be easy because can just do everything for you automatically.

This same tactic can be used if you want to keep a branch rebased so you don't have to deal with the same rebasing conflicts each time you do it. Or if you want to take a branch that you merged and fixed a bunch of conflicts and then decide to rebase it instead - you likely won't have to do all the same conflicts again.

The other situation I can think of is where you merge a bunch of evolving topic branches together into a testable head occasionally. If the tests fail, you can rewind the merges and re-do them without the topic branch that made the tests fail without having to re-resolve the conflicts again.

To enable the rerere functionality, you simply have to run this config setting:

You can also turn it on by creating the directory in a specific repository, but I think the config setting is clearer, and it can be done globally.

Now let's see a simple example. If we have a file that looks like this:

and in one branch we change the word 'hello' to 'hola', then in another branch we change the 'world' to 'mundo'.

When we merge the two branches together, we'll get a merge conflict:

You should notice the new line in there. Otherwise it should look exactly like a normal merge conflict. At this point, can tell us some stuff. Normally, you might run at this point to see what all conflicted:

However, will also tell you what it has recorded the pre-merge state for with :

And will show the current state of the resolution - what you started with to resolve and what you've resolved it to.

Also (and this isn't really related to ), you can use to see the conflicted files and the before, left and right versions:

Anyhow, so now you resolve it to just be "puts 'hola mundo'" and you can run the command again to see what rerere will remember:

So that basically says, when I see a hunk conflict that has 'hello mundo' on one side and 'hola world' on the other, resolve it to 'hola mundo'.

Now we can mark it as resolved and commit it:

You can see that it "Recorded resolution for FILE".

Now, let's undo that merge and then rebase it on top of our master branch instead.

Our merge is undone. Now let's rebase the topic branch.

Now, we got the same merge conflict like we expected, but check out the line. If we look at the file, we'll see that it's already been resolved:

Also, will show you how it was automatically re-resolved:

You can also recreate the conflicted file state with the command:

That might be a new command to you as well, the option to . You can actually have do a couple of things in this situation to help you resolve conflicts. Another interesting value for that option is 'diff3', which will give you left, right and common to help you resolve the conflict manually:

Anyhow, then you can re-resolve it by just running again:

Magical re-resolving! Then you can add and continue the rebase to complete it.

So, if you do a lot of re-merges, or want to keep a topic branch up to date with your master branch without a ton of merges, or you rebase often or any of the above, turn on to help your life out a bit.|||

