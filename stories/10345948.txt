Paper books and vinyl records: they’re not just for hipsters anymore. I’ve tried to hold back on commenting on this cultural shift toward more analog products, because it’s such an easy target for jokes. But I think it’s time for us to face the inevitable: there’s a very peaceful and quiet revolution happening right under our noses. And those of us who work in software have to start paying attention to it.

The evidence for this shift is all around us. Craig Mod’s recent essay on reading made a big impact online. In Future Reading he describes his journey there and back again—from paper books to going all-digital for many years, to an almost unconscious shift back to paper. What’s interesting about the article is not only what’s there, but what’s not. Gone is the nostalgic longing for “the smell of books” that is the butt of so many jokes. In its place we find arguments for the tangible benefits of reading non-digital books—their permanence, their design, their readability.

Closer to home, a friend told me recently that he went back to buying CDs because he needs the physical reminder of what’s in his music library. Digital music just kind of disappears once the files go “in the computer.” As for me, I’ve been bearing the brunt of my friends’ ridicule for a while now, since I went back to buying vinyl records. Yes, I think they sound better than digital music, but my reasons also have a lot to do with permanence and tactility—it’s an activity I can enjoy with my daughters, and something that will hopefully bring back positive memories for them once I’m long gone and they sort through their (inherited) collection. And I’m clearly not alone in this.

All of these thoughts have been swimming in my head as I reflected on what I really want to talk about in this column: the idea that “software is never done.” This has become a rallying cry in our industry—a way to push ourselves to constantly make things better. We use those words for anything from excuses to ship terrible , to arguments with engineers about why we need to move that button 3px to the left. Some of the consequences of this meme are good. Continuous, incremental improvement is a good thing. But there are also some bad parts.

It isn’t that long ago that software actually was done when it came out. Only a couple of decades ago, new operating systems showed up on a CD-ROM and we made VHS videos about how to use them:

When Windows 95 came out, it was done. Yes, there were some patches to it, but they were few and far between, and in general quite difficult to come by. But of course, then the internet and app stores happened, and suddenly everything changed.

The thing about “software is never done” is that sometimes the software gets better, but often it does not. Talk to any long-time Evernote user about the product changes over the past year and see if they’re able to contain their rage. Take a look at the recent release of Paper by FiftyThree and how this beloved product has become close to incomprehensible. Last night I just wanted to watch something, but when I turned on my PS4 I had to wait ten minutes for it to update. I have no idea what changed. Everything still looked the same. But hey, software is never done. Even our updaters need updates sometimes.

Contrast this way of looking at the world to the architect’s view of the buildings they design. Here is Jennifer Fraser in What I Bring to UX From Architecture:

And here’s Tony Fadell, talking about the creation of the Nest thermostat:

So I wonder. I wonder what would happen if we felt the weight of responsibility a little more when we’re designing software. What if we go into a project as if the product we make might not only be done at some point, but might be something that lasts for a while? Would we make it fit into the web environment better, give it a timeless aesthetic, add fewer unnecessary features, and spend more time considering the consequences of our design decisions?

All of this brings me back to the analog revolution. I’m fascinated by our renewed passion for things that are permanent (warts and all) and tactile. I think we need to take that trend seriously, and it needs to influence the way we make.

To make this more concrete, I think we need more software that has ties to physical objects. I know we’re a bit disillusioned with the “Internet of Things”—and for good reason. But I know we can do better. Designers like Josh Clark have been thinking and writing about this for a while. It’s within our reach to bring some physicality to some of our designs.

Most importantly, I think we need more software that’s done—not all of it, just more of it. Just like we’re always going to have prefab buildings to serve a particular function at a particular time, software that continues to change and improve pushes us forward and is absolutely necessary. But maybe it’s ok for that app you’re working on to be done. And by going into it with a realization that it’s going to be done some day, you might even make something that lasts for decades.

We don’t have to give up on digital products, or fight the analog revolution. But we must learn from it, take what’s good, and throw away the rest. And on that note, let’s at the very least agree that dragging a file into a trash can isn’t nearly as satisfying as crumpling up a piece of paper and throwing it over your shoulder.|||

Back in the day, when software was released, it was considered done. Today, such a sense of responsibility might impel us to make products meant to last.