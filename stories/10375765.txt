Debugging is hard. Often you’ll be presented with a bug that was introduced “some time ago” without any further information. Before I learned about , my primary strategy was to flail around blindly, hoping my fingers would strike the keyboard just right to reveal the bug. The loud typing showed I was a hard worker and eventually I was promoted to senior architect. Once I joined the inner circle of the cabal, I was taught the secrets of git. I was eventually kicked out for my insistence that Wedge Antilles was a better pilot than Luke Skywalker (he is dangit!) and so as revenge, I bring you The Git’s Guide to git - a series on using git to its fullest. Here at Kittenitech, we’ve got a multi-billion-dollar SaaS product: UnicornTopia. It allows UnicornOps folks to easily manage large herds of distributed unicorns. Problem is, sometime in the last week, we introduced a really nasty bug. Paula over in Marketing tells us they’re receiving quite a few reports that setting the header color to blue causes unicorn riots. Fortunately, this is timeboxed - Paula helpfully says complaints started coming in less than a week ago, so we know the problem was introduced recently.

Bill thinks we should use . This’ll give us all of the changes in the past week, in a gigantic, difficult to sift through diff format. Then again, Bill was talking earlier about how his nifty electric drill doubles as a hammer if you swing it hard enough. Let’s look at a better solution - .

works by taking a known good commit and a bad commit and performing a binary search bounded by the two commits to find the exact commit where things went bad. It is excellent for situations where you know a bug was introduced in a given time frame. It’s not used every day but can be a lifesaver when there are reams of commits to dig through.

There’s only eleven commits to check (or bad news, we only pushed 11 commits in a week, yipes). Note that this’ll only take four steps - binary searches are - they require a number of steps equal to the natural logarithm of the total items to check (For the math-adverse, this means we only have to check a small amount in order to find the problem commit. Checking 10,000 commits requires 10 steps). Here are the eleven commits we need to search through (in order from newest to oldest):

Let’s try it out. We have a known bad commit (QA has verified that the unicorns riot when we’re running the latest code, which is known in git land as ). We also know that the commit with the sha is good - the unicorns don’t riot at all! We tell bisect all this information:

At this point, git has checked out the commit at the middle between and . We’re in “Detached HEAD” state: We’re pointing at a specific commit instead of a pointer to “The latest commit of a branch”. Don’t sweat this - if everything goes kerflooey, we can run to return to our original, pre-bisect state. Phew.

Our next step is to check if the bug exists on this commit. If it does, bisect knows all commits after this commit also contain the bug - we need to search through older commits for the bad code. If this commit is bug-free, then the offending code was added later and bisect will search through newer commits.

We open up and set the header to blue. Unicorns fly everywhere, rioting in the streets. Looks like this commit is broken. We tell git that the current commit contains bad code through the command (finally, something about git that’s intuitive).

Once that’s run, bisect determines that all the commits between and also contain the bug, leaving us with just under half of our original commits under suspicion. We then move to the commit halfway between (the one we just marked as bad) and (the one we know is good).

This time, our commit looks good. Blue header, docile unicorns. Hurrah! Git now knows that our malfunctioning code is enclosed by (known bug-free) and (known bugged). There’s only two commits left to check!.

Repeating this process a few times gives us the problem commit:

D’oh! It was the first commit we looked at! At least now we know exactly where the problem commit is. Let’s look at what changed with (compare the commit immediately preceding our problem one and the problem one itself). Digging through the code there, we find:

Welp, there’s our problem. saves the day! Imagine how much work it would have been to dig through a week’s worth of code instead of a single commit.

isn’t perfect - there’s a few scenarios where it isn’t helpful:|||

Debugging is hard.  Often you’ll be presented with a bug that was introduced “some time ago” without any further information.  Before I learned about git bis...