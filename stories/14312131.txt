You know JavaScript, but do you really know JavaScript? It's a great language, even though some may argue otherwise. Sure, it's got some bad parts, but it has improved a lot in past years and developers are getting much better at using JavaScript correctly and at following best practices. Strict mode is also getting better at preventing newer developers from making some bad JavaScript mistakes and unfortunately running into unwanted behaviours.

However, not everyone has heard of the term Hoisting or knows what it means. In this article, I'll explain what hoisting is and show different examples so that you can better understand what it's all about.

When you execute your JavaScript code, the interpreter goes through the code twice.

The first run through the code is where it does a safety check and small optimizations of your code. Safety checks such as making sure that the syntax is right, if there are any calls to or , etc. Then, it optimizes the code as best as it can to ensure better performance when it is executed. This is also where hoisting occurs (more on this soon), and is referred to as the compile run.

The second run is where it actually executes your code by going through it line by line, doing the assignments, calling the functions, and so on.

Hoisting is when the JavaScript interpreter moves all variable and function declarations to the top of the current scope. It's important to keep in mind that only the actual declarations are hoisted, and that assignments are left where they are.

Hoisting is done during the interpreter's first run through the code.

Let's start with a basic example and look at the following code:

At first, you may think that the sample code would throw a on line 3 ( ) because has not been declared yet. However, with the magic of hoisting, it won't throw a but the value of will be at that point. This is because the JavaScript interpreter does a first run through the whole code and declares all variables and functions at the top of the current scope, and then, on the second run, will execute the code.

Here's what the same code would look like after the interpreter's first run:

Notice how is now declared at the top ( ) but is not yet assigned at that point? It's a subtle but important difference, and this is why is logged as instead of throwing a .

Hoisting also applies to function declarations (not function expressions). Let's analyze the following sample code:

In this sample code, we are able to successfully call the function since it's a function declaration and therefore it is hoisted as-is to the top of the current scope. Then, will output when calling it since, as in the previous example, is hoisted to the top of its current scope, which is . This means that was declared before calling but it has not yet been assigned a value ( ).

However, the important thing to note here is that was hoisted at the top of its current scope. This means that it was not declared in the global scope but in the function's scope instead.

Here's what the same code would look like after the interpreter's first run:

Notice how was moved to the top, and is declared in ? This means that, when you call on line 10, it will not find the variable in the general scope and will throw a .

Next, the third use case I'd like to cover is how function expressions are not hoisted as opposed to function declarations. Instead, it's their variable declarations that are hoisted. Here's some sample code to demonstrate my point:

This code throws a error since only the variable declaration is hoisted to the top of the file, and the assignment of the function to is done on the interpreter's second run only.

Here's what the same code would look like after the interpreter's first run:

Finally, the last use case I'd like to cover is that function declarations are hoisted before variables. Let's look at the following code:

In this example, returns instead of , even though the function is declared after the variable. This is because function declarations are hoisted before variable declarations, so is executed on the second run, after we call .

On the first run, the interpreter will hoist at the top of the current scope, and then will get to the line. At that point, it realizes that was already declared so it doesn't need to do anything and will continue its first run through the code.

Then, on the second run (which basically executes the code), it'll call before it gets to the assignment .

Here's what the same code would look like after the interpreter's first run:

ES6 is the future and is what most developers will be using moving forward, so let's see how hoisting applies for ES6 code.

Hoisting doesn't apply the same way for and variables compared to variables, as we saw above. However, and variables are still hoisted, the difference being that they cannot be accessed until the assignment is done at runtime.

At the end of the day, it's a small technicality where the interpreter applies hoisting to these variables on the compile run but they'll throw reference errors when accessed before the assignment happens, essentially preventing us from accessing these variables before their assignment.

I hope this clarifies how hoisting works in JavaScript. It's definitely not as tricky or complicated as it sounds, but it does require us to breakdown the different use cases and trying different scenarios to understand how things work under the hood.

Do not hesitate to leave me comments or questions if you have any - I'd love to hear your feedback.

This post was originally published on Designing for Scale|||

In this article about JavaScript, I'll explain what hoisting is and show different examples so that you can better understand what it's all about.