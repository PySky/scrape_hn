Let’s get down right to it. We’ll start real simple.

Our server will have only one latestPost field in its top-level Query, which returns a value (“Hello World”, of course) which is of the built-in GraphQL type, String.

Simple as that. No fuss.

Next, we will use that as our blueprint and define our GraphQL schema in Golang.

The NodeJS/Javascript community has graphql-js which was released by Facebook as a technical preview; soon after, the Ruby community has graphql-ruby. Now Golang has its own graphql-go.

The benefit of using graphql-go is that it has near-identical API to graphql-js; so it’ll be easy to read another GraphQL schema written for NodeJS/Javascript and and you’ll still be able to re-write it for Golang.

Let’s write our previously established schema in Golang using graphql-go (followed by its equivalent in JavaScript using graphql-js).

Well, both of them seem similar enough to each other. But we’ll only need the one in Golang in this tutorial.

What we have done above is simply:

With our schema definition, we can now create a GraphQL server with the built-in net/http package and a nifty little package to serve GraphQL query requests: graphql-go-handler.

graphql-go-handler is simply a package that creates a HTTP.Handler that we can plug into the net/http HTTP server.

2. To use it with our schema, add the following code to previous main.go file.

Apart from the schema, the code to get a server running is barely a handful.

Other than that, there isn’t much to it.

3. Run the main.go file we just written.

The GraphQL server will now be running at http://localhost:8080/graphql

To test it, run the following curl command on your terminal:

If nothing goes wrong, you should see the following response from the server:

And there you go; writing a GraphQL server in Golang can’t get any easier than that. Huzzah!

Now that you have a GraphQL server running, you can play around with the code that you’ve just written, and get comfortable. Here are some suggestions to get you started:|||

(Update Nov 4 2015: Huge breaking changes in the API to improve readability and usability of the package ) This week, we will start off with a simple but very achievable goal:
to build a GraphQL…