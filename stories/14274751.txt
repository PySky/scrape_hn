Redux Router Kit is a routing solution for React that leverages Redux to store routing and transition states and enable powerful middleware and -powered components.

If the features above aren't useful, by all means, use React Router instead! It's battle-tested, and Redux Router Kit borrows its concepts heavily! Redux Router Kit is an alternative that gives tighter integration with Redux.

Well, it's been used in production for https://zapier.com for a while now. So for us, it's ready. :-) For your use case, you may find edges. If so, let us know!

The Router component requires a prop with routing state from the store.

The RouterContainer component is connected to the store, and so automatically gets that prop.

The RouterHistoryContainer component adds in a History component to update browser address state and automatically dispatch routing actions when the browser history changes.

All these components accept the following props.

Route mapping object. See the examples above.

If there is no current route, this function will be called.

If you'd like to take control of all rendering for routes, pass in this function. No other rendering functions will be called. If no routes match, then will be .

Like , but only called if there are matchedRoutes.

If the matching routes don't have any components or don't reduce to a single element, this function will be called.

After all components have reduced to a single element (or map of named elements), this function will be called to render any wrapping elements.

For each component in a route, this function is called to return an element to be rendered. If child routes provide named components, named elements will be passed as props instead of .

Components rendered by routes receive the following props. These will also be passed to if you provide that function to / / . (As well as the other render callbacks listed above.)

This is the current routing state. An example of the routing state is:

{ When the url changes, `current` moves to `previous`. previous { url , }, current { url , query { edit }, params { id }, routeKey [ , ], location { host , pathname , protocol , etc., just like browser's location }, replace , state }, When the url changes, `next` will first get the new value of `current`. Middleware or components can then cancel or redirect. If not canceled or redirected, `current` will then become `next`. If `next` is null, there is no current transition. next }

When you use , it responds to click/touch events so routing actions are automatically triggered. So you don't have to use a special component. A normal will work just fine.

Returns a action, which, when dispatched, adds to state. Calls hooks for any routes which are removed and hooks for any routes which are added.

The route can be canceled with or redirected or exited with another .

If is provided, it will be inspected for things like command-click to open new tabs.

If is provided, the route will roughly be equivalent to:

Cancels the route and removes it from state.

If you do want to manually trigger routing actions, you can either manually wire up the action with :

Or you can use the included to add the actions as props.

If you only need (because you typically don't need ), then you can use instead.

You can use to grab any routing state for your components. For example:

You can also use to grab all routing state and action creators for your components. For example:

You should only use this if you want your component to be updated for all routing state changes. For example, the second example will update during routing transition, whereas the second will only update when the current route is changed.

Here's an example of custom middleware that would require the user to login.

To load routes asynchronously, just add a property to your route.

The result of the fetch will be used in place of that route. The routing table in middleware will be modified with the new route, and the url will be retried against the new routing table. (And any nested async routes will also be fetched.) If you need the routing table outside middleware, you can listen to changes.

If you'd like to be in control of fetching routes, you can pass a function into the middleware.

While loading async routes, will be set in state. Because routes aren't yet loaded, the params/etc. will be incomplete.

For server-side or static rendering, just use RouterContainer instead of RouterHistoryContainer.

The History component borrows heavily from https://github.com/cerebral/addressbar and https://github.com/christianalfoni/react-addressbar.

Internally, history (https://github.com/mjackson/history) is used, and it's pretty awesome that it's separate from React Router. :-)|||

redux-router-kit - Routing tools for React+Redux