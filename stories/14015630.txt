This blog post explains ways of targeting multiple platforms via the same npm package.

Before we get into the actual topic, let’s quickly review common JavaScript module formats.

This following table gives an overview of standard properties in that are used for pointing to source code.

Note: “ES5+” means “whatever language features are supported by the JavaScript engines you are targeting”.

At the moment, these are the most common JavaScript module formats:

The idea of UMD is that you can implement a JavaScript module in such a manner that it supports (up to) three formats at the same time: AMD, CJS and delivery via a global variable.

This is a UMD module that supports AMD and CJS (source):

You can only deliver source code for a single platform via an npm package. Property of lets you specify exactly what platform that is:

However, that doesn’t help you with the following use cases, where you need source code for multiple platforms per package:

There are two dimensions at play here:

The next section covers solutions for use case 1.

The following subsections explain properties in that can be used to point to alternate versions of the same code.

When I use the term “native features”, it means: language features supported by the platforms you are targeting.

is the standard mechanism for pointing to the module code inside a package if you want to override the default path, . It is supported everywhere. This is an example:

This property helps tools such as the tree-shaking module bundler Rollup that depend on the ESM format. Other than that, only native language features are supported. That is, is just with a different module format:

Angular v4 delivers each package in three formats:

This is what its looks like:

I like the idea of this property. But its name and semantics mean that it’ll age relatively quickly.

The property is now deprecated. It was superseded by .

The idea of the property is that:

The simplest mode of is as an alternative to :

For webpack, you can configure where it searches for module code inside packages via the option:

The default value of this property depends on the value of .

If is , or unspecified then the default is:

If has any other value (including ) then the default is:

Support for multi-platform packages has come a long way. The main challenge ahead is to make sure transpiling external dependencies is as “auto-updating” and hassle-free as .|||

This blog post explains ways of targeting multiple platforms via the same npm package.