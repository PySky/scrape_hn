The popularity of JavaScript has led to a very vibrant ecosystem of technologies, frameworks, and libraries. Along with all the amazing diversity and energy in the ecosystem comes a high degree of confusion for many. What technologies should you care about?

Where should you invest your time to get the most benefit? Which tech stacks are companies hiring for right now? Which ones have the most growth potential?

What are the most important technologies to know right now? This post is a high-level overview of stuff you need to know, packed with links where you can learn all about it.

Remember as you’re learning to experiment with some actual code. You can play with code interactively on Codepen.io. If you’re still learning ES6, you can see how it translates using the Babel REPL.

This is going to be a long list, but don’t get discouraged. You can do this! If you’re looking at this list, worried about how you’ll ever learn everything you need to know to build modern apps, read “Why I’m Thankful for JavaScript Fatigue”. Then buckle down and get to work.

Some of this stuff is strictly optional*, which means, I recommend them if you are interested in them, or you need to know them for a job, but you should not feel obligated to learn them. Anything marked with an asterisk (e.g., example*) is optional.

Anything not marked with a * should be learned, but don’t feel obligated to learn everything there is to know about everything. You need to be aware of the non-optional stuff, but you don’t necessarily need to be a definitive subject matter expert on absolutely everything.

Before you try to land a job using JavaScript, you should have a good grasp of JavaScript fundamentals:

React is a JavaScript library for building user interfaces, created by Facebook. It’s based on the idea of uni-directional data flow, meaning that for each update cycle:

This is in contrast to 2-way data binding, where changes to the DOM may directly update data (e.g., as is the case with Angular 1 and Knockout). With 2-way binding, changes to the DOM during the DOM render process (called the digest cycle in Angular 1) can potentially retrigger the drawing phase before the drawing is finished, causing reflows and repaints — slowing performance.

React does not prescribe a data management system, but a Flux-based approach is recommended. React’s 1-way data flow approach borrowing ideas from functional programming and immutable data structures transformed the way we think about front-end framework architecture.

For more on React & Flux architecture, read “The Best Way to Learn to Code is to Code: Learn App Architecture by Building Apps”.

Redux provides transactional, deterministic state management for your apps. In Redux, we iterate over a stream of action objects to reduce to the current application state. To learn why that’s important, read “10 Tips for Better Redux Architecture.” To get started with Redux, check out the excellent courses by the creator of Redux, Dan Abramov:

Redux is mandatory learning, even if you never use Redux for a production project.

Why? Because it will give you lots of practice and teach you the value of using pure functions and teach you new ways to think about reducers, which are general-purpose functions for iterating over collections of data and extracting some value from them. Reducers are so generally useful that was added to the JS specification.

Reducers are important for more than just arrays, and learning new ways of working with Reducers is valuable all by itself.

Angular 2+ is the successor to the wildly popular Angular framework from Google. Because of it’s crazy popularity, it’s going to look great on your resume — but I recommend learning React first.

I have a preference for React over Angular 2+ because:

For this reason, I recommend learning React, but I consider Angular 2+ strictly optional*. If you have a strong preference for Angular 2+, feel free to swap them. Learn Angular 2+ first, and consider React optional. Either will benefit you and look great on your resume.

Whichever you choose, try to focus on it for at least 6 months — 1 year before running off to learn the other one. It takes time to really sink into strong proficiency.

RxJS is a collection of reactive programming utilities for JavaScript. Think of it as Lodash for streams. Reactive programming has officially arrived on the JavaScript scene. The ECMAScript Observables proposal is a stage-1 draft, and RxJS 5+ is the canonical standard implementation.

As much as I love RxJS, if you just import the whole thing all at once, it can really bloat your bundle sizes (there are lots of operators). To combat bundle bloat, don’t import the whole thing. Use the patch imports, instead:

Using patch imports can reduce the size of your rxjs dependencies in your bundle by ~200k. That’s a really big deal. It will make your app much faster.

Several people have asked why I didn’t list their favorite framework. One of the important criteria I considered was “will this be useful on a real job?”.

Yes, this is a popularity contest, but the opportunities that knowing a framework will open up is an important consideration when you’re deciding where to focus your learning investment.

To answer that question, I looked at some key indicators. First, Google Trends. If you want to reproduce this Google Trends graph, remember to select by topic, not keyword, since several of these words will deliver lots of false positives. In other words, these are topic-focused trends, not keyword searches:

What this tells us is relative interest in various projects. If people are searching for them, chances are they’re exploring their options, or searching for help or documentation. This is a pretty decent indicator of relative usage levels.

Another good source of data is Indeed.com, which aggregates job listing data from a large variety of sources. Job posting popularity has declined sharply in recent years, but they still collect enough data to make good relative comparisons that tell you frameworks that people are actually using in production projects, on the job:

To reproduce those findings, search for <framework name> javascript and leave the location blank. As you can clearly see:

Angular and React dominate: Nothing else even comes close. (Except jQuery, which is used on a huge share of all websites — non-apps included — because it’s used by almost all legacy systems, including popular CMS systems like WordPress).

You might see that Angular has a significant advantage over React in these listings. Why do I recommend learning React first? Because:

In other words, React is winning the mindshare and customer satisfaction battles, and if the trends over the past year and a half continue to unfold, React has a very real chance of unseating Angular as the dominant front-end framework.

Angular 2+ has a chance to turn that around, so Angular could make a comeback, but so far, React is putting up a really good fight.

Now that you’ve studied up on all this hot tech, read “How to Land Your First Development Job in 5 Simple Steps”.

Level up your JavaScript game. If you’re not a member, you’re missing out.|||

The popularity of JavaScript has led to a very vibrant ecosystem of technologies, frameworks, and libraries. Along with all the amazing diversity and energy in the ecosystem comes a high degree of…