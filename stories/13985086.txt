In this article, we are going to discuss building a Path module utility by using one of the module present in the Node.js modules library. There are several modules present in Node.js library. They are OS module, path modules, net module, DNS module, and domain module. All of these modules are very popular and used very commonly to build any Node based application.

Node.js Path Module

 In Node.js, the Path module provides basic path utility functions to handle and transform file paths. We can import this module by using the following syntax.

Methods present in the Path Module of node.js

 The following are the basic methods and their descriptions which are present in the Path Module of Node.js.

Properties present in the Path Module of node.js

 The following is the basic property and its description which is present in the Path Module of Node.js.

Example on use of Path Module in Node.js Application

 In the following example, we are going to demonstrate the use of the above Path module methods. Like any other Node.js application, here we are going to create a js file named PathModule.js, which has the following code.

// Command to import Path Module in Node.js. var path = require("path"); //1. Use of path.normalize () method. console.log ('Path normalization is : ' + path.normalize('/trail/trail1//doublehash/hash/tab/..')); //2. Use of path.join () method. console.log ('joint path is : ' + path.join('/trail', 'trail1', 'doublehash/hash/', 'tab', '..')); //3. Use of path.resolve () method. console.log('Path resolve is : ' + path.resolve('hello-nodejs.js')); //4. Use of path.extname () method. console.log('Path extension name is : ' + path.extname('hello-world.js')); //5. Use of path.isAbsolute method. console.log('Is Absolute path? : ' + path.isAbsolute('/PathModule/PathModule.js')); //6. Use of path.dirname (p) method. console.log('Path Directory name is : ' + path.dirname('/PathModule/PathModule.js')); //7. Use of path.relative (from, to) method. console.log('Relative Path is : ' + path.relative('/PathModule/PathModule.js', '/PathModule/build.gradle')); //8. Use of path.basename () method. console.log('Path base name is : ' + path.basename('/PathModule/PathModule.js', '.js')); //9. Use of path.parse (pathString) () method. console.log('Parsed path string is : ' + path.parse('/PathModule/PathModule.js')); //10. Use of path.format (pathObject) method. console.log('Path format is : ' + path.format(path.parse('/PathModule/PathModule.js'))); //7. Use of path.relative (from, to) method.

Explanation of the code

 In the above code, we have imported the “path” module of the Node.js and used the following 10 methods to return the Path related values.

Output

 When we execute the above Node.js code, we will observe the following output on the console.

Source code for the Path Module of Nodejs

Conclusion: –

 In this article, we discussed the various methods present in the Path module of Node.js. We have imported the Path module and use the associated methods to build a Path module Utility.

Learn How to Build Path Module Utility Modules in NodeJS was last modified: by|||

In this article, we will be discussing how to build a Path module utility by using one of the module present in the Node.js modules library.