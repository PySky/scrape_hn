Source file generation can be useful when doing things such as annotation processing or interacting with metadata files (e.g., database schemas, protocol formats). By generating code, you eliminate the need to write boilerplate while also keeping a single source of truth for the metadata.

And this is the (exciting) code to generate it with JavaPoet:

To declare the main method, we've created a "main" configured with modifiers, return type, parameters and code statements. We add the main method to a class, and then add that to a file.

In this case we write the file to , but we could also get it as a string ( ) or write it to the file system ( ).

The Javadoc catalogs the complete JavaPoet API, which we explore below.

Most of JavaPoet's API uses plain old immutable Java objects. There's also builders, method chaining and varargs to make the API friendly. JavaPoet offers models for classes & interfaces ( ), fields ( ), methods & constructors ( ), parameters ( ) and annotations ( ).

But the body of methods and constructors is not modeled. There's no expression class, no statement class or syntax tree nodes. Instead, JavaPoet uses strings for code blocks:

The manual semicolons, line wrapping, and indentation are tedious and so JavaPoet offers APIs to make it easier. There's which takes care of semicolons and newline, and + which are used together for braces, newlines, and indentation:

This example is lame because the generated code is constant! Suppose instead of just adding 0 to 10, we want to make the operation and range configurable. Here's a method that generates a method:

And here's what we get when we call :

Methods generating methods! And since JavaPoet generates source instead of bytecode, you can read through it to make sure it's right.

The string-concatenation in calls to and is distracting. Too many operators. To address this, JavaPoet offers a syntax inspired-by but incompatible-with . It accepts to emit a literal value in the output. This works just like 's :

Literals are emitted directly to the output code with no escaping. Arguments for literals may be strings, primitives, and a few JavaPoet types described below.

When emitting code that includes string literals, we can use to emit a string, complete with wrapping quotation marks and escaping. Here's a program that emits 3 methods, each of which returns its own name:

In this case, using gives us quotation marks:

We Java programmers love our types: they make our code easier to understand. And JavaPoet is on board. It has rich built-in support for types, including automatic generation of statements. Just use to reference types:

That generates the following file, complete with the necessary :

We passed to reference a class that just-so-happens to be available when we're generating code. This doesn't need to be the case. Here's a similar example, but this one references a class that doesn't exist (yet):

And that not-yet-existent class is imported as well:

The type is very important, and you'll need it frequently when you're using JavaPoet. It can identify any declared class. Declared types are just the beginning of Java's rich type system: we also have arrays, parameterized types, wildcard types, and type variables. JavaPoet has classes for building each of these:

JavaPoet will decompose each type and import its components where possible.

JavaPoet supports . It does it via explicitly collecting type member names. Let's enhance the previous example with some static sugar:

JavaPoet will first add your block to the file as configured, match and mangle all calls accordingly and also import all other types as needed.

Generated code is often self-referential. Use to refer to another generated declaration by its name. Here's a method that calls another:

When generating the code above, we pass the method as an argument to the method using :

Code blocks may specify the values for their placeholders in a few ways. Only one style may be used for each operation on a code block.

Pass an argument value for each placeholder in the format string to . In each example, we generate code to say "I ate 3 tacos"

Place an integer index (1-based) before the placeholder in the format string to specify which argument to use.

Use the syntax where is the format character and call with a map containing all argument keys in the format string. Argument names use characters in , , , and , and must start with a lowercase character.

All of the above methods have a code body. Use to get a method without any body. This is only legal if the enclosing class is either abstract or an interface.

The other modifiers work where permitted. Note that when specifying modifiers, JavaPoet uses , a class that is not available on Android. This limitation applies to code-generating-code only; the output code runs everywhere: JVMs, Android, and GWT.

Methods also have parameters, exceptions, varargs, Javadoc, annotations, type variables, and a return type. All of these are configured with .

is a slight misnomer; it can also be used for constructors:

For the most part, constructors work just like methods. When emitting code, JavaPoet will place constructors before methods in the output file.

Declare parameters on methods and constructors with either or 's convenient API:

Though the code above to generate and parameters is different, the output is the same:

The extended form is necessary when the parameter has annotations (such as ).

Like parameters, fields can be created either with builders or by using convenient helper methods:

The extended form is necessary when a field has Javadoc, annotations, or a field initializer. Field initializers use the same -like syntax as the code blocks above:

JavaPoet has no trouble with interfaces. Note that interface methods must always be and interface fields must always be . These modifiers are necessary when defining the interface:

But these modifiers are omitted when the code is generated. These are the defaults so we don't need to include them for 's benefit!

Use to create the enum type, and for each value:

Fancy enums are supported, where the enum values override methods or call a superclass constructor. Here's a comprehensive example:

In the enum code, we used . Anonymous inner classes can also be used in code blocks. They are values that can be referenced with :

This generates a method that contains a class that contains a method:

One particularly tricky part of defining anonymous inner classes is the arguments to the superclass constructor. In the above code we're passing the empty string for no arguments: . To pass different parameters use JavaPoet's code block syntax with commas to separate arguments.

Which generates this method with an annotation:

Use to set properties on annotations:

Which generates this annotation with and properties:

When you get fancy, annotation values can be annotations themselves. Use for embedded annotations:

Note that you can call multiple times with the same property name to populate a list of values for that property.

Fields, methods and types can be documented with Javadoc:

Use when referencing types in Javadoc to get automatic imports.

Download the latest .jar or depend via Maven:

Snapshots of the development version are available in Sonatype's repository.

JavaPoet is the successor to JavaWriter. New projects should prefer JavaPoet because it has a stronger code model: it understands types and can manage imports automatically. JavaPoet is also better suited to composition: rather than streaming the contents of a file top-to-bottom in a single pass, a file can be assembled as a tree of declarations.

JavaWriter continues to be available in GitHub and Maven Central.|||

javapoet - A Java API for generating .java source files.