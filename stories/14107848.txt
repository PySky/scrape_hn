nnn is a fork of noice, a blazing-fast lightweight terminal file browser with easy keyboard shortcuts for navigation, opening files and running tasks. noice is developed considering terminal based systems. There is no config file and mime associations are hard-coded. However, the incredible user-friendliness and speed make it a perfect utility on modern distros.

nnn can use the default desktop opener at runtime. It also comes with - a customizable bash script to handle media types. It adds new navigation options, enhanced DE integration, a disk usage analyzer mode, comprehensive file details and much more. Add to that a huge performance boost. For a detailed comparison, visit nnn vs. noice.

If you want to edit a file in vim with some soothing music in the background while referring to a spec in your GUI PDF viewer, nnn got it! All from the same terminal session. Follow the instructions in the quickstart section and see how nnn simplifies those long desktop sessions...

Have fun with it! PRs are welcome. Check out #1.

nnn vs. ncdu memory usage while listing 438767 files in disk usage analyzer mode:

nnn vs. mc vs. ranger memory usage while viewing a directory with 11244 files, sorted by size:

nnn needs libreadline, libncursesw (on Linux or ncurses on OS X) and standard libc.

indicates the currently selected entry in nnn.

Filters support regexes to display only the matched entries in the current directory view. This effectively allows searching through the directory tree for a particular entry.

Filters do not stack on top of each other. They are applied anew every time. There are 3 ways to reset a filter:

An empty filter expression, a search with no results or an extra backspace at the filter prompt (like vi).

If you want to list all matches starting with the filter expression (a common use case), start the expression with a (caret) symbol.

If nnn is invoked as root the default filter will also match hidden files.

The following abbreviations are used in the detail view:

nnn is designed to play files using multiple strategies (in order of decreasing priority):

Add the following to your shell's rc file for the best experience:

To jump to the nth level parent, with PWD at level 0, use dots. For example, to jump to the 6 parent of the current directory, use 7 dots. If the number of dots would take you beyond (which isn't possible), you'll be placed at .

Pick the appropriate file for your shell from misc/quitcd and add the contents to your shell's rc file. You'll need to spawn a new shell for the change to take effect. You should start nnn as (or modify the function name to something else).

As you might notice, nnn uses the environment variable to write the last visited directory path. You can change it.

nlay is a tiny standalone media type player by itself. To know how to customize or extend its functionality, please visit nlay on wiki.

nnn can pipe the absolute path of the current file to a copier script. For example, you can use on Linux or on OS X.

Start nnn and use to copy the absolute path (from ) of the file under the cursor to clipboard.

nnn uses libreadline for the chdir prompt input. So all the fantastic features of readline (e.g. case insensitive tab completion, history, reverse-i-search) is available to you based on your readline configuration.

If is not set, nnn tries to recognize a file by the file extension and invokes nlay. To change the extensions recognized by nnn, modify the structure in config.def.h (it's easy). Then re-compile and install.

If you want to add a file extension mainline, please raise a bug. Without it nnn will not invoke nlay.

nlay has provisions (disabled by default) to handle a specific file extension too. However, the extension should be recognized by nnn first.|||

nnn - The missing terminal file browser for X