is the enhancement of the standard module with matchers.

Use in all the same places where you would use built-in :

allows you to check actual value (or its property) not against a specific expected value as standard assertions do, but against a matcher or a combination of them. Without using matchers these assertions behave exactly like their standard counterparts which has been tested against the same set of tests as the standard ones.

Other assertions of are also exported by but not enhanced with matchers support.

A matcher is an objects used to check if a value satisfies some requirements defined by the matcher.

Matchers can be placed on the top level of expected value or on some of its properties.

An awesome point about matchers is the ability to combine them! It gives you a way to create powerful matching structures using small set of matchers.

Matchers and combinations of them can be reused and recombined across multiple assertions.

In cases of assertion errors matchers participate in providing your test runner with error details.

In all of the following matchers descriptions actual refers to actual value or its property, corresponding to the matcher in expected, both passed to an assertion.

Returns an instance of the root matchers class. All other matchers inherit from that class. It checks whether two values are equal in depth. Actual comparison operator (== or ===) for primitives depends on assertion in which this matcher is used (for example, == is used for whereas === is used for ). If expected contains a matcher somewhere on it, then check for corresponding actual value is passed to that matcher. If applied to another matcher it produces equivalent one, meaning that for example returns matcher equivalent to . Actually, and assertions wrap its expected argument in matcher implicitly.

Similar to matcher but requires only subset of actual properties to be equal in depth to those of expected.

Matches anything. Can be used if value or existence of a specific actual property does not matter. It is supposed to be used in context of matcher, in context of matcher it makes a little sense.

It implicitly wraps expected in matcher, matches actual value against it and inverts result. and assertions wrap its expected argument in matcher implicitly.

expected should be an array. If it is not, than it is treated as one-element array. Each element of expected array is wrapped implicitly in matcher. matcher checks whether actual value matches all matchers of expected.

expected should be an array. If it is not, than it is treated as one-element array. Each element of expected array is wrapped implicitly in matcher. matcher checks whether actual value matches at least one matcher of expected.

Expects actual value to be a non-empty array, check fails if it is not. Implicitly wraps expected in matcher. Checks that all elements of the array match expected.

Expects actual value to be a non-empty array, check fails if it is not. Implicitly wraps expected in matcher. Checks that at least one element of the array matches expected.

if expected is a string than actual is checked to be a primitive of that type. If expected is a constructor than actual is checked to be an instance of that type.

actual and expected both converted to primitive and compared (actual operator == or === depends on assertion used).

expected is converted to a RegExp and actual is tested against it.

Checks if actual is greater than expected.

Checks if actual is greater than or equal to expected.

Checks if actual is less than expected.

Checks if actual is less than or equal to expected.

If expectedFn is not a function than this matcher falls back to matcher. An actual value is passed to expectedFn to check. expectedFn should return either boolean result or an object with the and fields. boolean property says whether check passed and is used in error reporting. It is possible to return from custom expectedFn results of another matcher.

There are cases when you care more not about specific values but rather about their shapes or features. provides you with a way to achieve that through matchers.

Existing assertion libraries provide you with tons of crazy named matchers and each new use case requires them (or you) to introduce completely new matcher. On the other hand provides you with succinct set of combinable matchers, sufficient to reproduce all the matchers of that libs in a clear way.

The more strict your tests the less probability to introduce bugs into your system and the more probability to detect them. However, as noted above, there are cases when you care more not about specific values but rather about their shapes or features. tries to consistently address these two points.

Yes, we have it .

For matchers to be combinable means that not many of them can not be expressed by existing ones, so this feature would not be in great demand. Additionally, matcher may be used for this purpose to some extent. However, you are always welcome to issues to provide your points why this or any other feature is required.|||

assert-match - assert + matchers <3