This month, my Scientific American column described the evolution of documentation for our tech products. You no longer get a printed user guide in the box; meanwhile, the computer-book industry itself has shrunken dramatically, as more and more help information has moved online.

In researching these trends, I emailed Tim O’Reilly to ask him his thoughts. He’s the publisher of my own Missing Manual series of computer books—the ultimate tech-industry thought leader, founder of O’Reilly Media, and an old friend. Here are some excerpts from his reply.

Q: Whatever happened to computer books?

 A: There are a couple of answers to that question. The first is that at the consumer level, the machines have gotten much easier to use; the second is that people have gotten much more used to them. My two-year-old granddaughter is easily able to use an iPad; my wife’s 92-year-old grandmother still struggles with it.

At O’Reilly, we refer to the basic facility that lets you understand a new system and decipher its cues as structural literacy. You know what to see, and your eye knows where to look. My granddaughter has grown up with technology, so things just make sense to her; my wife’s grandmother still has trouble finding menu items on her computer that are right in front of her.

Structural literacy is how children learn about the world. They observe and draw general rules of thumb that let them navigate.

Someone with structural literacy knows what to look for. At the consumer level, this means that a new system may move around the knobs and levers, but you know what they do and how to look for them. You see the same thing in a car. “Where is that damn lever to open the gas cap?”

But if you need learn something from the ground up, with little prior knowledge to build on, you need a structured, logical progression that starts where you do.

Q: Does anyone still need computer books, then?

 A: At the more advanced level, there is still the need for documentation. Even after you know how computers and networks work, or know how to program, you need specific details.

But increasingly, many details are embedded in the tools, even for programmers. Autocomplete, auto-syntax checking and the like are examples of what I call “the arc of knowledge,” in which knowledge is first captured in stories people tell each other, then in documents like manuals, and then in digital forms that duplicate the physical document, then are actually embedded directly in a service. The arc from paper maps to digital maps to routing systems like GPS and Waze to self-driving cars is a great example of this progression.

The formats have shifted, but the need remains.|||

