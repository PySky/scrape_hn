Gomoku is a compiler for programs written in the Go Programming Language, targeting modern C++.

This is an experiment to determine how well Go will perform on embedded devices. Please see the FAQ for more details on the reasoning behind this project.

Help to move this forward is greatly appreciated.

Pass the path to the program being built. Paths relative to , relative, and absolute paths are accepted. Output will be generated in under the current directory (this directory will be cleared every run):

This will generate a pair of and files for each imported package (and their dependencies). Generated files are not indented (yet), so piping them through (or other indenting tool) is recommended.

It is posible that the compiler will abort midway through code generation since not all data types, statements, and expressions are implemented yet.

Go is one of the oldest board games that are still played today. Gomoku is a newer game, but is played with the same board and pieces. The rules are different, but for the untrained eye, they look exactly the same.

The parallels with the Go programming language and this compiler were too good to not make the pun.

There are a few reasons:

Yes. We're using the same code that the Go commmunity uses.

It's hard to tell; there are still a lot of things to do. Some of them are easier than others, but there are a lot of subtle details that are hard to get right.

But we're very open to contributions, so if you'd like to see this happen faster, you know what to do.

The original Go compiler was written in C, mechanically translated to Go (with manual work to fix up the translation). If this compiler could compile itself, it would be almost a full circle. While awesome, we're quite far away from this possibility.

At first, Linux with STL is going to be the only supported platform. The reason is that tools such as AddressSanitizer and Valgrind are invaluable when debugging.

Afterwards, it's very possible that an RTOS such as Zephyr will be supported. There's a good possibility that STL will be ditched at this point, favoring either something existing but lightweight, or something custom made.

In any case, compilation for different operating systems and/or architectures should be as simple as setting the GOOS and GOARCH environment variables, or different but related variables that will be specific to Gomoku.

No, not yet. This is a must and will happen soon.

At first, a stop-the-world-mark-and-sweep garbage collector, with collection happening at allocation phase, when there's no more heap space available.

This will most likely be custom made, but experimnents with existing collectors might be performed -- if they're adequate, there will be no need to write (or modify) one.

At first, yes, as that's what we already have. However, it's very likely that a lightweight library will be written for embedded devices. Not everything should be written from scratch, though; some parts from the standard library might be cherry-picked.

There are many things that can (and need) to be performed before calling this even remotely usable. Here's a short list of tasks and things that need to be implemented; it's by no means complete, and some of these tasks are way more challenging than others:|||

gomoku - Gomoku compiles Go code to C++