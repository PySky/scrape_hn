This is an ingress controller for Kubernetes — the open-source container deployment, scaling, and management system — on AWS. It runs inside a Kubernetes cluster to monitor changes to your ingress resources and orchestrate AWS Load Balancers accordingly.

This ingress controller uses your EC2 instance metadata to find the CloudFormation stack that it belongs to, and then uses this information to discover the required AWS resources attached to each newly created Application Load Balancer.

This controller is a work in progress, under active development. It aims to be out-of-the-box useful for anyone running Kubernetes. Jump down to the Quickstart to try it out—and please let us know if you have trouble getting it running by filing an Issue.

As of this writing, it's being used only in small production use cases at Zalando, and is not yet battle-tested. We're actively seeking devs/teams/companies to try it out and share feedback so we can make improvements.

We are also eager to bring new contributors on board. See our contributor guidelines to get started, or claim a "Help Wanted" item.

The maintainers of this project are building an infrastructure that runs Kubernetes on top of AWS at large scale (for nearly 200 delivery teams), and with automation. As such, we're creating our own tooling to support this new infrastructure. We couldn't find an existing ingress controller that operates like this one does, so we created one ourselves.

We're using this ingress controller with Skipper, an HTTP router that Zalando has used in production for more than a year as part of its front-end microservices architecture. Skipper's also open source. Feel free to use it, or use another ingress of your choosing.

This controller continuously polls the API server to check for ingress resources. It runs an infinite loop. For each cycle it creates load balancers for new ingress resources, and deletes the load balancers for obsolete/dead ingress resources.

The controller will not manage the security groups required to allow access from the Internet to the load balancers. It assumes that their lifecycle is external to the controller itself.

On startup, the controller discovers the AWS resources relevant for the controller operations:

When the controller learns about new ingress resources, it uses the host specified in it to automatically determine the most specific certificate to use. An example ingress:

The Application Load Balancer created by the controller will have both an HTTP listener and an HTTPS listener. The latter will use the automatically selected certificate.

Alternatively, you can specify the Amazon Resource Name (ARN) of the desired certificate with an annotation like the one shown here:

The new Application Load Balancers have a custom tag marking them as managed load balancers to differentiate them from other load balancers. The tag looks like this:

They also share the "ClusterID" tag with other resources from the same CloudFormation stack. Load balancer names are derived from a truncated SHA1 hash of the certificate ARN, combined with a normalized version of the ClusterID. Due to the 32-characters limitation, it can be truncated.

When the controller detects that a managed load balancer for the current cluster doesn't have a matching ingress resource anymore, it deletes all the previously created resources.

This project provides a that you can use to build either a binary or a Docker image.

To build a binary for the Linux operating system, simply run or .

To create a Docker image instead, execute . You can then push your Docker image to the Docker registry of your choice.

To deploy the ingress controller, use this yaml as the descriptor. You can customize the image used in the yaml.

We provide as a publicly usable Docker image built from this codebase. You can deploy it by executing the following command, after replacing the placeholder for the region:

The Ingress Controller's responsibility is limited to managing load balancers, as described above. To have a fully functional setup, additionally to the ingress controller, you can use Skipper to route the traffic to the application. The setup follows what's described here.

You can deploy as a using this yaml, and by executing the following commands:

To complete the setup, you'll need to fulfill some additional requirements regarding security groups and IAM roles; more info here.

To have convenient DNS names for your application, you can use External DNS. It's not strictly necessary for this Ingress Controller to work, though.

We welcome your contributions, ideas and bug reports via issues and pull requests; here are those Contributor guidelines again.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.|||

kube-ingress-aws-controller - Configures AWS Load Balancers according to Kubernetes Ingress resources