Hello, welcome to the repository! This project re-implements various parts of the Quake 3 game in Haskell.

To give you an overview of the project:

is responsible for parsing Quake 3 shader files into an AST. "type checks" the result of parsing. At this stage, we register known shader opcodes and their parameters, and type check into a considerably richer data structure. takes the result of type-checking, and can transform shaders into a graph of OpenGL calls. This graph is described by . allows one to describe a rendering pipe-line out of smaller components. The idea behind the render graph is to collect and sort common operations - state changes in OpenGL are expensive, so we want to avoid them wherever possible. currently contains nodes necessary for rendering (most of) Quake 3 - nodes to bind texture stages, set shader parameters, enable multiple passes, and so. This module is independent of Quake 3, and may well be usable in other projects. is a light wrapper around objects offered by OpenGL. Here we have what are essentially wrappers around textures, vertex array objects, and helper functions to create/upload data. contains the logic of the game. is responsible for taking the camera position, determining which clusters are visible to deliver a final render. implements a rudimentary first-person camera, interpreting SDL keyboard and mouse events as matrix transformations.|||

hs-quake-3 - Quake 3 map viewer written in Haskell