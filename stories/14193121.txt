The python visualization world can be a frustrating place for a new user. There are many different options and choosing the right one is a challenge. For example, even after 2 years, this article is one of the top posts that lead people to this site. In that article, I threw some shade at matplotlib and dismissed it during the analysis. However, after using tools such as pandas, scikit-learn, seaborn and the rest of the data science stack in python - I think I was a little premature in dismissing matplotlib. To be honest, I did not quite understand it and how to use it effectively in my workflow. Now that I have taken the time to learn some of these tools and how to use them with matplotlib, I have started to see matplotlib as an indispensable tool. This post will show how I use matplotlib and provide some recommendations for users getting started or users who have not taken the time to learn matplotlib. I do firmly believe matplotlib is an essential part of the python data science stack and hope this article will help people understand how to use it for their own visualizations.

Why all the negativity towards matplotlib? In my opinion, there are a couple of reasons why matplotlib is challenging for the new user to learn. First, matplotlib has two interfaces. The first is based on MATLAB and uses a state-based interface. The second option is an an object-oriented interface. The why’s of this dual approach are outside the scope of this post but knowing that there are two approaches is vitally important when plotting with matplotlib. The reason two interfaces cause confusion is that in the world of stack overflow and tons of information available via google searches, new users will stumble across multiple solutions to problems that look somewhat similar but are not the same. I can speak from experience. Looking back on some of my old code, I can tell that there is a mishmash of matplotlib code - which is confusing to me (even if I wrote it). New matplotlib users should learn and use the object oriented interface. Another historic challenge with matplotlib is that some of the default style choices were rather unattractive. In a world where R could generate some really cool plots with ggplot, the matplotlib options tended to look a bit ugly in comparison. The good news is that matplotlib 2.0 has much nicer styling capabilities and ability to theme your visualizations with minimal effort. The third challenge I see with matplotlib is that there is confusion as to when you should use pure matplotlib to plot something vs. a tool like pandas or seaborn that is built on top of matplotlib. Anytime there can be more than one way to do something, it is challenging for the new or infrequent user to follow the right path. Couple this confusion with the two different API’s and it is a recipe for frustration.

Despite some of these issues, I have come to appreciate matplotlib because it is extremely powerful. The library allows you to create almost any visualization you could imagine. Additionally, there is a rich ecosystem of python tools built around it and many of the more advanced visualization tools use matplotlib as the base library. If you do any work in the python data science stack, you will need to develop some basic familiarity with how to use matplotlib. That is the focus of the rest of this post - developing a basic approach for effectively using matplotlib.

If you take nothing else away from this post, I recommend the following steps for learning how to use matplotlib: Learn the basic matplotlib terminology, specifically what is a and an . Always use the object-oriented interface. Get in the habit of using it from the start of your analysis. Use seaborn for the more complex statistical visualizations. Use matplotlib to customize the pandas or seaborn visualization. This graphic from the matplotlib faq is gold. Keep it handy to understand the different terminology of a plot. Most of the terms are straightforward but the main thing to remember is that the is the final image that may contain 1 or more axes. The represent an individual plot. Once you understand what these are and how to access them through the object oriented API, the rest of the process starts to fall into place. The other benefit of this knowledge is that you have a starting point when you see things on the web. If you take the time to understand this point, the rest of the matplotlib API will start to make sense. Also, many of the advanced python packages like seaborn and ggplot rely on matplotlib so understanding the basics will make those more powerful frameworks much easier to learn. Finally, I am not saying that you should avoid the other good options like ggplot (aka ggpy), bokeh, plotly or altair. I just think you’ll need a basic understanding of matplotlib + pandas + seaborn to start. Once you understand the basic visualization stack, you can explore the other options and make informed choices based on your needs.

The rest of this post will be a primer on how to do the basic visualization creation in pandas and customize the most common items using matplotlib. Once you understand the basic process, further customizations are relatively straightforward. I have focused on the most common plotting tasks I encounter such as labeling axes, adjusting limits, updating plot titles, saving figures and adjusting legends. If you would like to follow along, the notebook includes additional detail that should be helpful. To get started, I am going to setup my imports and read in some data: The data consists of sales transactions for 2014. In order to make this post a little shorter, I’m going to summarize the data so we can see the total number of purchases and total sales for the top 10 customers. I am also going to rename columns for clarity during plots. Here is what the data looks like. Now that the data is formatted in a simple table, let’s talk about plotting these results as a bar chart. As I mentioned earlier, matplotlib has many different styles available for rendering plots. You can see which ones are available on your system using . Using a style is as simple as: I encourage you to play around with different styles and see which ones you like. Now that we have a nicer style in place, the first step is to plot the data using the standard pandas plotting function: The reason I recommend using pandas plotting first is that it is a quick and easy way to prototype your visualization. Since most people are probably already doing some level of data manipulation/analysis in pandas as a first step, go ahead and use the basic plots to get started.

Assuming you are comfortable with the gist of this plot, the next step is to customize it. Some of the customizations (like adding titles and labels) are very simple to use with the pandas function. However, you will probably find yourself needing to move outside of that functionality at some point. That’s why I recommend getting in the habit of doing this: The resulting plot looks exactly the same as the original but we added an additional call to and passed the to the plotting function. Why should you do this? Remember when I said it is critical to get access to the axes and figures in matplotlib? That’s what we have accomplished here. Any future customization will be done via the or objects. We have the benefit of a quick plot from pandas but access to all the power from matplotlib now. An example should show what we can do now. Also, by using this naming convention, it is fairly straightforward to adapt others’ solutions to your unique needs. Suppose we want to tweak the x limits and change some axis labels? Now that we have the axes in the variable, we have a lot of control: Here’s another shortcut we can use to change the title and both labels: To further demonstrate this approach, we can also adjust the size of this image. By using the function, we can define the in inches. We can also remove the legend using There are plenty of things you probably want to do to clean up this plot. One of the biggest eye sores is the formatting of the Total Revenue numbers. Matplotlib can help us with this through the use of the . This versatile function can apply a user defined function to a value and return a nicely formatted string to place on the axis. Here is a currency formatting function to gracefully handle US dollars in the several hundred thousand dollar range: 'The two args are the value and tick position' Now that we have a formatter function, we need to define it and apply it to the x axis. Here is the full code: That’s much nicer and shows a good example of the flexibility to define your own solution to the problem. The final customization feature I will go through is the ability to add annotations to the plot. In order to draw a vertical line, you can use and to add custom text, you can use . For this example, we’ll draw a line showing an average and include labels showing three new customers. Here is the full code with comments to pull it all together. # Create the figure and the axes # Plot the data and get the averaged While this may not be the most exciting plot it does show how much power you have when following this approach.

Up until now, all the changes we have made have been with the indivudual plot. Fortunately, we also have the ability to add multiple plots on a figure as well as save the entire figure using various options. If we decided that we wanted to put two plots on the same figure, we should have a basic understanding of how to do it. First, create the figure, then the axes, then plot it all together. We can accomplish this using : In this example, I’m using and to specify the size because this is very clear to the new user. In sample code you will frequently just see variables like 1,2. I think using the named parameters is a little easier to interpret later on when you’re looking at your code. I am also using so that the yaxis will share the same labels. This example is also kind of nifty because the various axes get unpacked to and . Now that we have these axes, you can plot them like the examples above but put one plot on and the other on . # Get the figure and the axes Up until now, I have been relying on the jupyter notebook to display the figures by virtue of the directive. However, there are going to be plenty of times where you have the need to save a figure in a specific format and integrate it with some other presentation. Matplotlib supports many different formats for saving files. You can use to see what your system supports: Since we have the object, we can save the figure using multiple options: This version saves the plot as a png with opaque background. I have also specified the dpi and in order to minimize excess white space.

Hopefully this process has helped you understand how to more effectively use matplotlib in your daily data analysis. If you get in the habit of using this approach when doing your analysis, you should be able to quickly find out how to do whatever you need to do to customize your plot. As a final bonus, I am including a quick guide to unify all the concepts. I hope this helps bring this post together and proves a handy reference for future use.|||

Matplotlib is a valuable but misunderstood foundation of the python data science stack.