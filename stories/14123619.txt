The present invention relates to a nondeterministic computing apparatus, or more specifically relates to a method of simulating nondeterministic computation using a deterministic computing apparatus efficiently.

As known in the prior art, in general, there are two kinds of computing apparatus: deterministic and nondeterministic. A deterministic computing apparatus, such as an electronic computer, is modeled mathematically by a deterministic Turing machine (DTM), which has a single sequence of primitive operations for a given input. A nondeterministic computing apparatus is modeled mathematically by a nondeterministic Turing machine (NDTM), which may have multiple ‘simultaneous’ or ‘parallel’ sequences of primitive operations for a given input. DTM is a degeneration of NDTM. There are various NP-complete problems in practice, such as the satisfiability problem, the traveling salesman problem, and the integer linear programming problem, which can be solved in polynomial time by a NDTM. If one of them is solved by a DTM in polynomial time, then all of them can be solved by a DTM in polynomial time. Currently there are two approaches to a nondeterministic computing apparatus:

The purpose of the invention is to provide an efficient realization of nondeterministic computations to solve practical problems. With reference made to Aho, A. V., J. E. Hopcroft and J. D. Ullman [1974]: The Design and Analysis of Computer Algorithms, Addison-Wesley; without limiting, throughout the present invention, a single-tape nondeterministic Turing machine (NDTM) with an input is adopted as the representation of a user's problem, where the NDTM is denoted by 7-tuple M:=(Q, Y, Σ, δ, b, q , Q ), where

In one exemplary embodiment of the invention, using Java as the programming language, M is stored as a Java class encapsulates the following instances:

The problem of the invention is to decide whether M accepts X. The problem can be restated as whether a physical object in its initial state can be transformed into another physical object (including the same object) in a final state by a sequence of primitive physical operations. If the input is accepted, the problem may further include finding one or more operation sequences leading the initial state to a final state at user's preference, especially in planning and scheduling.

The invention provides a method to solve the problem of the present invention.

First, the method defines and utilizes a relational model to represent the multiple nondeterministic computations of M on X as follows.

Let the time complexity of M be T(n) for an input X of length n. The range of steps T:=[0, T(n)]. The range of tape head positions H:=[−T(n), T(n)]. Please note := may be read as “is/are/being assigned to” depending on its context.

Let the input X:=X . . . X , in Σ*, of length n, be padded with blanks, i.e. X =b for T(n)≧i≧n or −T(n)≦i<0 for easy treatment only.

For an event e to be defined later in T×H×Q×Y×D, its components are denoted by e·t, e·h, e·q, e·y, and e·d, respectively. Similarly, for a trievent m to be defined later in W×P×C, its components are denoted by m·w, m·p, and m·c, respectively; where W:=P:=C:=T×H×Q×Y×D. A null is a placeholder for the absence of an event.

For M on input X, t-computations C(t) (i.e. a deterministic computation path of t+1 events including the initial event) and relation R(t) (i.e. valid trievents in W×P×C) are defined simultaneously by recursion on step t as follows.



 description="In-line Formulae" end="lead"? C(0):={e } and R(0):={(null,null,e )}, where the initial event e :=(0,−1,q ,b,+1) in T×H×Q×Y×D. description="In-line Formulae" end="tail"?

Second, define some exemplary common operations with intended semantics in the relational model to be used in the disclosed methods.

For an arbitrary subset S of R(0)∪ . . . ∪R(t) and an event e, to assume event e exclusively at step e·t in t-computations in S, define

Intuitively, to represent a move and its relationship to other moves, a trievent (w, p, c) in R(t) declares current event c at step t with references to two previously declared events w and p. The state provider p provides the current state at step t. If p=null, then t=0, i.e. c=e and w=null. The symbol writer w wrote the symbol currently being read at step t. If w=null, then initial input symbol X is read at step t.

An event (t, h, q, y, d) in E(R(t)), as an entity, represents that M enters next state q, writes symbol y in cell h, and then shifts the tape head from cell h to cell h+d at step t. Event e initializes M. A t-computation is a sequence of (t+1) events, i.e. a deterministic computation of time complexity t, depending on M and its input X.

For an arbitrary subset P of R(0)∪ . . . ∪R(t), there are two kinds of redundant trievents by considering the relationship between a state provider declaration and its reference:

Because P is a finite set, keeping deleting redundant trievents from P, sooner or later, Δk+1(P)=Δk(P) will be obtained, that is, neither orphan nor barren is left in Δk(P). Such a Δk(P) as the limit of P by Δ is denoted by lim (P).

For a subset S of R(0)∪ . . . ∪R(t) and a trievent m, to hypothesize m exclusively in t-computations in S, define

Define the third kind of redundant trievents

Because P is a finite set, keeping deleting redundant trievents from P, sooner or later, Ψk+1(P)=Ψk(P) will be obtained, that is, neither orphan, nor barren, nor destructive is left. Such a Ψk(P) as the limit of P by Ψ is denoted by lim (P).

It is proved by the present inventor that there is no t-computation in P if and only if lim (P)=φ.

The third, the following is a list of the specific steps in the method of the provided exemplary aspect of the present invention, presented in the recommended order of processing, which calculates R(0), . . . , R((T(n)) iteratively and check if there is a final state in any of R(0), . . . , R((T(n)) respectively. If found, X is accepted by M, otherwise X is not accepted.

In an exemplary embodiment, the specific steps are listed as follows:

The fourth and the last, the following is a list of the specific steps in the method of the provided exemplary aspect of the present invention, presented in the recommended order of processing, which finds a specific t-computation in a subset P of R(0), . . . , R(t). If found, P is modified to contain one and exactly one t-computation for M on input X, otherwise P is modified to empty.

With projection m·c for each trievent in P, a sequence of events is obtained.

The invention has, but not limited to, the following advantages over the existing devices or methods:

The following drawings are exemplary for illustrating the invention. However, the invention is not limited to the specific methods or instrumentalities disclosed. In the drawings:

FIG. 1 is a block diagram of an exemplary nondeterministic computing apparatus in which aspects of the present invention may be implemented.

FIG. 2 is a block diagram of the nondeterministic computing components according to one embodiment of the invention.

FIG. 3 is a flow diagram of the steps of the disclosed method for simulating a NDTM M on input X according to one embodiment of the invention.

FIG. 4 is a flow diagram of the steps of the disclosed method for finding a t-computation in P for a NDTM M on input X according to one embodiment of the invention.

FIG. 1 shows an exemplary nondeterministic computing apparatus 100, which consists of a computer 101 and/or 102 as a deterministic computing apparatus and aspects of the invention implemented. The nondeterministic computing apparatus 100 is only an example of suitable nondeterministic computing apparatus and it is not intend to suggest any limitation as to any aspect of the invention. The invention may be implemented by use of, but not limited to, an electronic computer, an optical computer, a DNA computer, or a quantum computer, or a combination of them.

The invention may be implemented in general context as software, such as in, but not limited to, shared library form or executable form. The invention may be implemented in general context as hardware, such as, but not limited to, a circuit or a device with a driver (for example device 137). The invention may be implemented as a combination of software and hardware to fulfill the functionality of the invention. The invention may be implemented in parallel or over a network where the functionality of the invention is distributed across two or more CPU's, such as in computer 101 and computer 102.

With reference to FIG. 1, an exemplary nondeterministic computing apparatus 100 is illustrated. In it, computer 101 and 102 are composed of CPU 110, main storage 120, optional devices and drivers 130, and bus 111 which connecting them together, but not limited to, as shown. Devices and Drivers 130 further are optionally composed of a monitor 131, a speaker 132, a printer 133, a secondary storage 134, a keyboard 135, a mouse 136; and, one or more other device 137 (for example a digital camera) and one or more other computer 102, connected by, but not limited to, network interface or direct link. The main storage includes nonvolatile ROM 121 and volatile RAM 123. In addition to BIOS 122, an embodiment of the invention may be stored inside ROM 121 and RAM 123. The nonvolatile secondary storage 134 further includes, but not limited to, OS 124A and one or more program 125A, which may include an embodiment of the invention, as a part or a whole of the present invention. Loaded OS 124 is either a part or the whole of OS 124A. Loaded program 125 is either a part or the whole of program 125A.

With reference to FIG. 2, according to one embodiment of the invention, nondeterministic computing component 200 composing:

With reference made to FIG. 3, according to one embodiment of the present invention, the disclosed method for simulating NDTM M with time complexity T(n) on input X of length n is composed of the following steps:

Steps for Finding a t-Computation in P for M on X

With reference made to FIG. 4, according to one embodiment of the present invention, a method is disclosed for finding a t-computation in a subset P of R(0), . . . , R(t). If found, P is modified to contain one and exactly one t-computation as the result for M on input X, otherwise P is modified to empty to indicate no t-computation exists in P. The method is composed of the following steps:|||

In the disclosed nondeterministic computing apparatus and methods, a user problem to be solved is represented as a nondeterministic Turing machine M with an input X to it. A method for deterministic s