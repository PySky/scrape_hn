To fall is to raise

This article is all about common mistakes of newbies in Elixir. Even experts in Elixir some times fall under this category. From the experience, I am revealing some sort of things to be careful while coding. This doesn’t mean that you fall in this category. I am just saying there are pits and you do not fall into it. Don’t worry I am just kidding. Lets jump into virtual pitfalls…

This is the most common pitfall and one has to be more careful while piping the functions with parameters which leads to unusual results. Lets check the following example.

When you execute above line, you will get an  . This is because the above lines are grouped as follows

So, you can use and to see how your coding lines are grouped together. We think in the direction of output of is passed as input to the function. But it does in other direction of taking the binary as input to the function which gives you error as is expected.

To avoid this we have to use the parenthesis for wrapping the parameters inside them for safe evaluation of code.

Elixir provides operator to add elements to the list. Basically it is used for concatenation of two lists, but we always forget to wrap the elements inside

We think that the result of would be but in general it will be  . This is a improper list. You cannot use function over. In proper list, when you iterate over the list, the tail would be empty list. This is different with the improper list.

So, to overcome this we have to wrap the value inside the list as



Read more about improper list HERE.

In Elixir is not equals to  . When you use the it is considered to be in our terms a string and when you use  , it is a list of characters. This is most common pitfall for newbies. Once if you come to a clear idea on and  , nothing to fear anymore.

These are also called as lambda functions which are very handy in data comprehensions. The calling of these functions is little different from regular calling.

we can write same thing as

When you try to access them as you will get a compile error saying  . You suppose to call the lambda functions as  . This is just to differ from the normal functions defined inside the module.

This is very common mistake of newbies in elixir. One has to be very clear with such things. How ever, one can overcome this mistake by using in the function name to differ them from the normal functions like  . So by looking at the name you come to know it as a lambda function.

You can use your own valid sign to differ your lambda functions from the normal functions.

Piping the anonymous functions is also different. You have to do as following

In Elixir is not  . In Elixir only and are considered to be  . The rest all evaluates to  . In even are considered as  . But in Elixir they are not. In Elixir anything starts with uppercase is also an atom. So, evaluates to and surprise us when we think it is false.

So, It is very common to make a mistake with  . Always avoid something with capital letters until or unless it is compulsory.

In elixir we can use the guard clauses in the function definitions by using  . However, if the guard clause has errors, it won’t leak out. It simply fails the guard clause. It will not raise any exception or run time error and looks for another matching definition by considering the previous guard as fail. Lets see the following example

In the above lines of code, when you try to find the of an integer, It raised an error. But when you used same statement inside the guards it just skipped that definition considering the guard failure. This is very common for newbies making mistake in guard clauses.

In Elixir, the order of passing the keywords as a function parameters really matters. Consider the following lines of code.

Above lines of code defines a module with function  . While defining the function we asked for to be first followed by  . Lets check the different ways of calling the above function.

When you change the order of parameters, you got the no function error raising  . This is because of Elixir functions are defined along with arity. So, pattern is not matched here.

If you want keywords to be able to passed in any order, you should accept any list in your function head, and then use inside the function instead:

This also allows you to specify useful default values for keywords that are not included when the function is called.

This advice is from Wiebe-Marten/Qqwy

In Elixir if you define the map as  , you can access the map for taking out the in two ways.

One is using  period like . Beginners in Elixir will always try to access map with  period. It is simple and dangerous too because, it raises an error when you try to extract a which is not defined in map. Look at the following lines of code.

In the above lines of code, we are defining a with atom as a key. At the line of execution  , we are trying to take out the value of using the  period, but it raised an error because, the key is not present.

In the same style, when you try to access the map with access operator  , it gives you the value when the key is not present instead of raising an error. So, it is very handy when you access the map with or To use like  , the keys in map should be as follows

This is why when you try with as binary like  , it just returned because our is defined with key as  . So if you try with in gives you the value of  .

Note: When you define a map with keys as binary, you cannot access them with  period. It is only accessible when the keys are atoms.

Pattern matching is highly useful and powerful too. How ever you cannot make the functions calls on the left side of the pattern match. Look at the following lines of code.

In the above lines of code when I try to call the function on the left side to match right side, it raised an error.

When you try  , this works fine. But, when you reverse the sides like  , this gives you the error. Try and see

So, this is very common to miss understand above terms in pattern matching.

We can check the multiple conditions in the guard clauses. In Elixir you cannot use either or or   . But coming to guard clauses this is bit different. You have to use  , , for  , and  respectively. Look at the following example.

In the above lines of code, we are attempting to check multiple conditions in the guard clause with code  . Even though they look similar, they are not allowed in the guard clauses. If you run the same lines of code by changing to , it works fine. Lets check the working example.

So, there is a chance to make mistake by using , ,  in guard clause conditions as they work fine in regular condition evaluations . Check the following example.

Did you observe that worked in regular conditions but not allowed in guard clause conditions.

If you find any other in elixir coding which I did not mention, please share and save others from falling into it.

If you find this helpful, please recommend it so, others can benefit!

Sharing is Caring…|||

This article is all about common mistakes of newbies in Elixir. Even experts in Elixir some times fall under this category. From the experience, I am revealing some sort of things to be careful while…