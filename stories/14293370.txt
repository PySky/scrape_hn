Just a heads up for those who are looking into running Docker containers natively on WSL. While it's not usable for anything serious (even your toy project development), there is a way.

WSL doesn't have cgroups at the moment, and probably won't have them anytime soon, so no way Docker would work. Unless you know a trick to replace / with something.

However, rkt has a "rkt fly" feature that uses simple chroot environments.

Installed Go 1.8.1 using godeb (I was using older 14.04 OS image). I guess should also work, but not sure. There are few issues that prevent rkt from just running. I've patched the following files: In in there is a syscall that is not implemented in WSL. Let's ignore : In there will be some mounting failures. WSL seem to fail when host path is an empty string: if err := mounter.Mount(mount.HostPath, absTargetPath, mount.Fs, mount.Flags, ""); err != nil { log.PrintE(fmt.Sprintf("can't mount %q on %q with flags %v", mount.HostPath, absTargetPath, mount.Flags), err) - return 254 + if mount.HostPath != "" || mount.Flags != (syscall.MS_REC | syscall.MS_SHARED) { + return 254 + } } } And I've had to patch , removing line completely, and a import line (since sort isn't used anywhere else). I don't know why this was necessary, and too lazy to debug, but rkt stage1 binary just hang otherwise, after call, not yet calling . I don't think rkt actually relies on results' ordering, anyway. With those modifications I was able to build rkt normally: Then I was able to run a container. Here is a normal invocation: $ sudo ./build-rkt-1.25.0+git/target/bin/rkt run --interactive --insecure-options=image docker://hello-world:latest Downloading sha256:78445dd4522 [=================================] 971 B / 971 B run: disabling overlay support: "overlay entry not present in /proc/filesystems" run: can't mount "" on "/dev" with flags 1064960: invalid argument run: can't mount "" on "/proc" with flags 1064960: invalid argument run: can't mount "" on "/sys" with flags 1064960: invalid argument Hello from Docker! This message shows that your installation appears to be working correctly. ... There is a clean-up problem, though - when a pod (container) exists, mounted directories (dev, proc, sys and tmp) aren't unmounted. I haven't yet figured why, but I've had to run the following: After this, pod can be garbage collected: Empty volumes ( ) are broken as well, probably because of same no-empty-source limitation. Only seem to work.

Of course, this is very fragile and extremely limited. But... it works! Well, sort of.

And in another WSL console window:|||

