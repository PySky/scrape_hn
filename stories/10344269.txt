Alan Turing first described his eponymous machines in a 1936 paper that proposed them as a general model of computation. Turing machines are the most powerful of several types of automata including pushdown automata and state machines. Throughout this book the terms “state machine”, “Turing machine”, “automata” or simply “machine” will be used interchangeably, but in all cases we are technically referring to a Turing machine, the most powerful and capable kind of automata.

To document the code, comments in Frame look like this:

One of Frame’s core syntactic choices is to encapsulate sections of software into blocks. Frame state machines are defined in the machine block, which contains a single state machine. We can have any number of machines running in our application at the same time, but we will have to wait for the bigger picture to see how they relate to one another.

A state machine with no states is declared in an MSL machine block like this:

Moving up the ladder of complexity (and hopefully interest), here is the Machine Specification Language (MSL) definition of a machine with just a single state:

Here is the same system as represented in the Machine Modeling Language (MML):

States are clearly identified by the $ token prefix ( or sigil ) before the state name id. As we shall soon see, all of the first class entity types in Frame are identified using a sigil. As states are typically implemented as functions or classes in the target programming languages, their names must conform to the rules imposed by these languages.

In MSL the machine’s start state is the first state declared in the machine block. However, in MML we can’t visually tell what that first declared state is, so the black ball and arrow are used to identify it.

Here is a slightly more interesting machine with two states:

States contain zero or more event handlers. An event handler is a block of code that executes when the message in the current event matches the message selector in the event handler. $S1’s event handler components are as follows:

This machine simply oscillates forever between $S1 and $S2, emitting a stream of alternating “Leaving $S1” and “Leaving $S2” log entries.

In Frame, events are actually just simple objects with a small, well-defined set of data members, one of which is a message field. It is important to distinguish between an event, which is the object (in object-oriented languages), and a message which is a field on the event data structure. We will examine the structure of events in depth in later sections.

In the event handler, the |message|selector tests the event message field for a match. If it is, then the event handler behavior is executed.

Event handlers are comprised of different types of “behaviors”. Here we see two kinds of them – actions and transitions.

In Frame, actions are simply function calls, which in this example just creates a log entry. Transitions are changes of state and are notated with the -> token which must be followed by some expression that resolves the next state to go to. In this case the transitions are state literals $S1 and $S2, but there are also other options for dynamically selecting the next state.

The event handler is terminated with a return ^ token, which generates a return statement in the target language.

Here is the MML equivalent of the MSL code above:

We can see that the specification language is an necessary part of the modeling language. In contrast, the MSL can express everything that the MML can and more.

The reason for this asymmetry is that the focus of MML is primarily representing states and transitions. However, there usually is much more to real world problems than can be expressed with just these two concepts.

One such critical missing capability is conditional flow control. Frame introduces a novel syntax for this that we will explore next.

In Frame, tests allow event handlers to branch flow in a standardized manner. A test in Frame has the following general form:

The token after the ‘?’ indicates the match type that must occur. The types that can be matched are the following:

The “+” in the “?+” token means to test if true. If there is no false path then it can be omitted:

We can also test if the expression is not true:

Using these tests, we now have the ability to branch differently for the same event based on tests of the environment:

We can see that the machine can dictate new transition behavior and decide on going to $S2 or $S3 based on interest level using a Boolean test. This works fine for MSL and it is clear what is happening. Unfortunately, the modeling language has some ambiguity in this case:

Here we can see that both transitions use the message that triggers the transition as the label. To make it explicit, Frame introduces a label notation that can be used in both MSL and MML:

Now the transitions are differentiated and easy to understand.

Frame permits tests on anything in scope for the machine, so any variable or function may be used in the test if the target language allows it. The more general branching syntax allows for tests on a number of different types in a number of different ways. For instance, to match a string we could write this:

In Bill’s case, the doIfBill() action is called and we return from the handler. In Ted’s case, we call doIfTed() but continue (or “break”). All match handlers require either a return ^ or a continue > token at the end.

We can also use backslash to escape special characters /\*/, as well as use /*/ to indicate a default match handler to execute.

Notice that the doIfTedOrDefault() action will only be called if /Ted/ or /*/ are matched and the continue token is found. /Bill/ and /\*/ will return at the end of their handlers.

Additional test types will be discussed in depth later in the book.

One of the most important innovations promoted by UML Statecharts is a way to initialize states upon entry and clean them up upon exit. These mechanisms essentially serve as state constructors and destructors.

Enter and exit events are generated internally by the machine itself as it transitions in and out of states. We will explore the details of this mechanism later in the book, but for now it is sufficient to know that the following sequence occurs with each transition:

As these events are so common and important, Frame introduces a specialized notation for them:

By using enter/exit events, machines gain a tremendous amount of power. One of the most important uses of this power is the ability to manage resources in a fine-grained manner. The next example shows how data and system resources can be clearly managed by taking advantage of enter/exit “hooks”:

Here we can see that upon entry to the $Delaying state the machine calls two actions. The first resets an internal counter and the second starts a timer. For each timeout, the counter is incremented and a test performed to see if we are at the maximum count which will result in the machine transitioning to the $Ready state.

With this model, assuming we implement the actions correctly, we can be sure our timer will be terminated as the exit event always occurs when transitioning out of the state. This enter/exit symmetry allows for a natural organization for resource management. This capability is often the prime dictator of the contours of the machine’s organization.

In our next example we will use these hooks to manage the display logic for a purchase orderpath.

To demonstrate how to apply our current knowledge of Frame notation, we will create a machine to implement an orderpath for purchasing items from the Small Inventory Warehouse Corporation or SIWC. SIWC doesn’t have much diversity in its products, but that suits us just fine for this example.

Here are the wireframes delivered from the designer:

It is now a straightforward process for designing the machine logic necessary for managing these screens. Here we will see a storyboard capturing the use case description, MSL code and the UI for each step:

The $WelcomeScreen begins the user’s experience of the orderpath. It is only shown once for a given session. Upon entry, the screen is displayed and a new order object is created. In all states it will be assumed that all event listeners are configured upon entry to the state and removed upon exit. When the Next button is clicked, the machine transitions to the $SelectProductScreen state and the exit event handler is triggered which clears the screen. Upon entry, the screen is shown and the product selection, if any, is loaded from the order. If no product has been previously selected then the Next button will be disabled until one is. When a radio button is selected, the choice will be added to the order and the next button will be enabled. Clicking the Next button will take the user to the state. Upon entry, the screen is shown and the product selection, if any, is loaded from the order. If no product has been previously selected then the Next button will be disabled until one is. When a radio button is selected, the choice will be added to the order and the next button will be enabled. Clicking the Next button will take the user to the state. Upon entry, the screen is shown and any data previously entered and stored in the order is loaded. The state monitors edits to both text input boxes and when both are "valid" (in this case, have 1+ characters in them) then the Next button is enabled. If the user clears a box, the Next button is disabled. Upon entry, the screen is shown and any all data from the order is displayed for review. Clicking on the associated button for each attribute of the order navigates the user directly to the screen where it was set. Upon entry, the screen is shown, after which the only event possible is to Buy More. Upon exit, the screen is hidden. Upon entry and exit, the screen is shown and hidden respectively. The user is presented with two options for navigtation. If the Keep Buying button is clicked, the user will be returned to the Confirm Order screen. If the Cancel Order button is pressed, the order is canceled and the user is navigated to the Canceled Screen. Upon entry and exit, the screen is shown and hidden respectively. The user is informed that the order is canceled and presented with an opportunity to buy more.

At this point we have demonstrated that a typical programming task such as building a wizard or workflow is possible with the simple Frame notation we have just learned. This example depended heavily on the transition enter/exit events to manage screen display. However, sometimes this is not what we want. As a final topic on state machine control mechanisms we will investigate an alternative to the full transition.

We have just seen how transitions do the following:

However, in some cases we will want to update the state but not trigger enter/exit behavior. To accomplish this, Frame introduces the change state operator . This can be used anywhere a transition is valid and looks like this:

The MML looks like this:

Although it may seem puzzling as to when this language feature might be useful, there are compelling use cases for this capability which we’ll explore later.

In the next chapter we will learn even more powerful features of Frame notation that allow us to solve a much larger range of programming challenges.|||

