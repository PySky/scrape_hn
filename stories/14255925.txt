If you have a mobile app which communicates with a server through HTTP, then you (hopefully) have tests which ensure this communication works as expected.

This usually involves providing canned responses in your tests, and doing this separately for iOS and Android. Pretty annoying, right? Youâ€™re effectively duplicating work across multiple platforms, and the static nature of the responses make it difficult to test requests that cause data to be updated in the backend. Thankfully, thereâ€™s a better way. At Intercom weâ€™ve improved on this by recreating our server logic in Go and embedding it into our iOS and Android apps.

Previously we had two solutions for providing these server responses.

Android: We had a mock HTTP client return static JSON which was defined in our test code. This suffered from the typical problem where backend data updates were hard to test. A test which required four new messages to be added to a conversation required five canned responses.

iOS: We had a Node.js server which emulated our server logic, and we ran it locally on the same machine as the iOS simulator we were testing on. This allowed us to test the updating of data easily, but it meant that a testing environment required the ability to run external programs. This prevented us from using remote testing services like Firebase Test Lab and Xamarin Test Cloud.

We had almost resigned ourselves to using the Node.js server on Android too, but we decided to investigate other options and discovered gomobile, an experimental Go tool which makes it easy to use Go code inside Android and iOS apps. We decided to try using this to make our apps talk to a Go web server running on the same device.

The first part of this was implementing our server logic in Go. This was actually much easier than a real backend implementation as we didnâ€™t need to worry about scaling, persistence, etc. It just needed to return the same HTTP responses as our API did in production. We used Mux to route the requests and relied on Goâ€™s built-in JSON support to create and marshal our model objects. The common Speakeasy package defines a server that can take an Engine which decides how requests are handled.

The second part of this is embedding the server code in your app. You can do this using the Speakeasy tool which will generate an AAR file for Android and a framework for iOS. In our apps we distribute these through internal Maven and Cocoapods repos for easy integration and versioning. After including these in your app you can access your Go code through generated JNI methods in Android and C/Objective-C methods in iOS.

Weâ€™ve seen a lot of benefits to using this:

Weâ€™re working on ways to check that the behaviour of your mock implementation stays completely aligned with the behaviour of the real server. If they behave differently then your tests wonâ€™t be very useful ðŸ˜„

Speakeasy is available on Github. In the repo youâ€™ll find a sample Android app and setup scripts. Using it in your app is simple:

Weâ€™ve found Speakeasy really useful over the past months, and think you will too. If youâ€™ve any questions, drop me a mail, or come ask me a question at the Dublin Go Meetup at the Intercom office on May 4th.|||

