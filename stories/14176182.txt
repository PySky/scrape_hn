Anbox is a container-based approach to boot a full Android system on a regular GNU/Linux system like Ubuntu. In other words: Anbox will let you run Android on your Linux system without the slowness of virtualization.

Anbox uses Linux namespaces (user, pid, uts, net, mount, ipc) to run a full Android system in a container and provide Android applications on any GNU/Linux-based platform.

The Android inside the container has no direct access to any hardware. All hardware access is going through the anbox daemon on the host. We're reusing what Android implemented within the QEMU-based emulator for OpenGL ES accelerated rendering. The Android system inside the container uses different pipes to communicate with the host system and sends all hardware access commands through these.

For more details have a look at the following documentation pages:

Anbox is currently suited for the desktop use case but can be used on mobile operating systems like Ubuntu Touch, Sailfish OS or Lune OS too. However as the mapping of Android applications is currently desktop specific this needs additional work to supported stacked window user interfaces too.

The Android runtime environment ships with a minimal customized Android system image based on the Android Open Source Project. The used image is currently based on Android 7.1.1

The installation process currently consists of a few steps which will add additional components to your host system. These include

To make this process as easy as possible we have bundled the necessary steps in a snap (see https://snapcraft.io) called "anbox-installer". The installer will perform all necessary steps. You can install it on a system providing support for snaps by running

Alternatively you can fetch the installer script via

Please note that we don't support any possible Linux distribution out there yet. Please have a look at the following chapter to see a list of supported distributions.

This will guide you through the installation process.

NOTE: Anbox is currently in a pre-alpha development state. Don't expect a fully working system for a production system with all features you need. You will for sure see bugs and crashes. If you do so, please don't hestitate and report them!

NOTE: The Anbox snap currently comes completely unconfined and is because of this only available from the edge channel. Proper confinement is a thing we want to achieve in the future but due to the nature and complexity of Anbox this isn't a simple task.

At the moment we officially support the following Linux distributions:

Untested but likely to work:

To build the Anbox runtime itself there is nothing special to know. We're using cmake as build system. A few build dependencies need to be present on your host system:

On an Ubuntu system you can install all build dependencies with the following command:

Afterwards you can build Anbox with

will install the necessary bits into your system.

If you want to build the anbox snap instead you can do this with the following steps:

The result will be a .snap file you can install on a system supporting snaps

Running Anbox from a local build requires a few more things you need to know about. Please have a look at the "Runtime Setup" documentation.

You will find additional documentation for Anbox in the docs subdirectory of the project source.

Interesting things to have a look at

If you have found an issue with Anbox, please file a bug.

If you want to get in contact with the developers please feel free to join the #anbox IRC channel on Freenode.

Anbox reuses code from other projects like the Android QEMU emulator. These projects are available in the external/ subdirectory with the licensing terms included.

The Anbox source itself, if not stated differently in the relevant source files, is licensed under the terms of the GPLv3 license.|||

anbox - Anbox is a container-based approach to boot a full Android system on a regular GNU/Linux system