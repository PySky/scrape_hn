Welcome to Container Industries Ltd. As the new engineer here you've been assigned the job of developing the company's container functionality.

The following requirements have made there way over to your desk:

Seems nice and simple. Let's use this as an excuse to explore the world of Test Driven Development (TDD) together. There's a really nice rhythm I want to get across in the this post:

After running it we get:

Looks like we need to create the definition. We are going to be iterating frequently, so let's do the simplest thing we can right now to get the tests to pass. We'll add the definition right at the top of the spec file.

It isn't actually asserting anything though, so let's start adding real tests.

How about we work backwards, writing the test under the assumption that all the variables we need already exist?

Alright, looks like we need to define the attribute in the test.

â€¦and we need to define and too.

The test is failing because we haven't implemented the method. So let's add that next.

Now, it's time to tell that it has some items

This test is failing because our method isn't implemented yet. So let's tackle that next.

Here's what looks like so far:

This fails because we haven't told the test what a house is.

What does it mean to be a house? Let's say it means a string with the value "house" for now.

Cool, a proper failure! The house was added to the container, when instead we should have cast it asunder.

What's the quickest way we can get the test to pass? Before we figure out the logic for deciding if we should add an item based on its weight, let's get the tests green by only adding the item if it isn't equal to "house".

That's a bit weird, right? We fudged the code to make the tests pass. The key thing here is that we have a really tight red, green, refactor cycle; we write the tests, do the bear minimum to get them passing, then refactor to clean things up. We're doing the smallest thing we can to get to a "safe" (tests passing) state, before adding more code. That way we don't stray too far away from the safety of passing tests and don't get sidetracked implementing everything at once.

Now that the tests are passing we can refactor our method to take into account an 's weight.

We've extracted the logic that checks if an item is too heavy into its own method. The tests pass, but we don't really have any way to define how heavy an item is. Let's amend the tests to specify the weights of items.

The tests fail because we haven't defined yet. Let's do that now (still inside for now):

Our implementation of the method only checks if an is equal to "house". Since we're now using , and not strings, this test fails! Let's perform a similar check, but this time look for an 's weight being equal to 20 (the same as the house).

Now we have some passing tests we can refactor our method. The container needs to know about its weight limit to check if an item is too heavy.

Cool, we have our method taking in to account the container's weight limit. Since the tests are passing, we can look into cleaning this method up. One thing that jumps out here is that we aren't storing what the container's current weight is. That's important, so let's write a test for it.

The class doesn't know about its current weight, so the test is failing. Let's add a attribute to the .

Although we're storing the weight on the container, we're never updating the value when we add items. This is why we expected a weight of 5 when it was actually 0.

At this point our method is looking OK, and I'm happy to move on. We can now look into refactoring other parts of the class. I think would be a good next step. It breaks the Single Responsibilty Principle in that it's responsible for setting the weight limit of the container and checking if an item is too heavy. By extracting this assignment into the constructor we are ensuring that only has one reason to change.

That's a bit nicer, but I'm still not really happy. We're hard coding the weight limit of our containers, which introduces a reason for the class to change in the future. Say Barry wants to update the weight limit to 15, he might be tempted to dive into the class and change the value. This introduces a risk that he'll accidentally break something while he's in there (you know what he's like). A more robust approach would be to inject the value of the container weight limit, that way Barry can have containers of varying weight limits without having to modify the class. Score!

Let's update the tests to inject the weight limit into the when we instantiate it.

Cool, we broke everything. Let's update the method in to accept the weight limit.

Now that the tests are passing, we can perform more clean up. For example, we used a named argument for in . Let's do the same thing for and its .

Now we can fix up the class by updating the method, just like we did for the class.

This is what our 's method currently looks like:

Notice that we aren't using an accessor method to get the weight limit; we are calling to access it directly. Although this is fine here, it's generally best to use an accessor because it changes the statement from calling data ( ) to calling behaviour ( , the method). This is useful because it means there is one place in our code that defines what it means to be a . This perhaps sounds pedantic, but what if (for safety reasons) there was an update to weight limits, which meant that they were reduced by 5 when the inspectors were around. We would need to find everywhere we were calling the data and subtract 5 if the inspectors were near. We'd be duplicating behaviour and it'd be likely that something would break. By using an accessor method we could simply override the method to include the suitable logic, and our other methods that relied on the accessor would not need to change.

Let's make use of Ruby's accessor methods to get the weight limit.

While we're on removing unnecessary direct calls to instance variables, how about we clean up the method by replacing

with a call to an accessor method too?

At this point, our file is getting pretty hefty, so let's extract out the classes into their own files.

Amazing, the tests still pass! Container Industries Ltd are proud of your hard work and you've been rewarded with an almost brand new tupperware container.

I really enjoy the TDD approach. In the past I've found myself trying to implement all the features at once and getting in too deep quite early on. In the end the code coverage was usually not as high and the code quality was lower than when I used TDD.

Do you use TDD regularly? What do you think of it? Do you use an alternative approach?|||

