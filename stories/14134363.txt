Serverless Chrome contains everything you need to get started running headless Chrome on AWS Lambda (possibly Azure and GCP Functions soon).

The aim of this project is to provide the scaffolding for using Headless Chrome during a serverless function invocation. Serverless Chrome takes care of building and bundling the Chrome binaries and making sure Chrome is running when your serverless function executes. In addition, this project also provides a few "example" handlers for common patterns (e.g. taking a screenshot of a page, printing to PDF, some scraping, etc.)

Why? Because it's neat. It also opens up interesting possibilities for using the Chrome DevTools Protocol in serverless architectures.

Installation can be achieved with the following commands

Or, if you have installed globally:

You must configure your AWS credentials either by defining and environmental variables, or using an AWS profile. You can read more about this on the Serverless Credentials Guide.

Test with or just to skip the linter.

This package bundles a lambda-execution-environment-ready headless Chrome binary which allows you to deploy from any OS. The current build is:

You can override default configuration in the file generated at the root of the project after a . See the defaults in for a full list of configuration options.

Currently there are only two, very basic "proof of concept" type functions:

When you the serverless function, it creates a Lambda function which will take a screenshot of a URL it's provided. You can provide this URL to the Lambda function via the AWS API Gateway. After a successful deploy, an API endpoint will be provided. Use this URL to call the Lambda function with a url in the query string. E.g.

We're using API Gateway as our method to execute the function, but of course it's possible to use any other available triggers to kick things off be it an event from S3, SNS, DynamoDB, etc. TODO: explain how --^

The printToPdf handler will create a PDF from a URL it's provided. You can provide this URL to the Lambda function via the AWS API Gateway. After a successful deploy, an API endpoint will be provided. Use this URL to call the Lambda function with a url in the query string. E.g.

We're using API Gateway as our method to execute the function, but of course it's possible to use any other available triggers to kick things off be it an event from S3, SNS, DynamoDB, etc. TODO: explain how --^

This handler also supports configuring the "paper" size, orientation, etc. You can pass any of the DevTools Protocol's Page.printToPdf() method's parameters. For example, for landscape oriented PDF add to the end of the URL. Be sure to remember to escape the value of if it contains query parameters. E.g.

You can provide your own handler via the file created when you initialize the project with . The config accepts a property. Pass it a function which returns a Promise when complete. For example:

The first parameter, , is the event data with which the Lambda function is invoked. It's the first parameter provided by Lambda. The second, is the second parameter provided to the Lambda function which contains useful runtime information.

calls the Lambda handlers for you when your handler function completes. The result of your handler is passed to callback with . If your handler throws an error, callback is called with .

For example, to create a handler which returns the version info of the Chrome DevTools Protocol, you could modify to:

To capture all of the Network Request events made when loading a URL, you could modify to something like:

See for more examples.

You might also be interested in:|||

serverless-chrome - Run headless Chrome/Chromium on AWS Lambda (maybe Azure, & GCP later)