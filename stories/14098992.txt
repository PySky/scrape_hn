currently in Beta, API may change or break pretty often.

Yet another view engine based on hyperscript and virtual dom.

In Flaco, the base unit, component, is just pure and stateless functions which should be deterministic and easy to test. You can then use any combinator (aka higher order function) to give more specificity (perhaps loosing the purity or statelessness) to your components and embrace the programming paradigm you prefer (stateful components, Elm or Redux like architecture, observables, etc)

Ah, and Flaco is about 2kb minified and gzipped while providing a wide range of features, difficult to beat (that is about 400 lines of source code) !

If you wish to benefit from JSX syntax, tell your transpiler to use the h pragma instead of the default "createElement" set for React in most of the module bundlers.

example with Rollup and buble

It should have the syntax sugar the JSX can provide.

Having a component is pretty useless if you don't put it anywhere. For that, you can use the mount function

Note the mount function is curried so you can somehow reuse it to mount it in different places for example

If the node you try to mount your component in has already a dom tree, flaco will try to hydrate the dom tree. It means that with flaco you can have progressive web app without changing a single line of code !

Without any doubt, you will want the user to interact with your shiny user interface and you will need somehow to manage application states. Flaco itself does not make any assumption on how to do it but provide few combinators (higher order function for your components) to create common patterns. They are shipped with the core module but don't worry with any good module bundler (like Rollup) you'll be able to tree shake the parts you don't use (and anyway the full Flaco lib remains probably one of the smallest UI library you may know)

In some cases, you don't need the state of a particular component to be managed globally or shared. Only the component itself, should be aware of its own encapsulated state and able to edit it. That could be a collapse/expanding section for example.

To create such behaviour you can use the withState combinator: it will create a scope specific to a component instance and allow it to update itself (by passing an update function as second argument to your component)

We have now a "reusable component" you can mount anywhere, share across projects, etc.

With Elm, application state (or model) is global and can only be modified through updates. Any change in the model will make the view render with the updated state. For convenience, Flaco will pass updates as second argument of the view. Use the elm combinator on your view component and then mount it anywhere with the initial model and the list of available updates. Your updates should return a new state of the model

Note you can have multiple apps in the same document. However you should make sure updates and models are in their isolated silos.

Redux itself has been inspired by Elm architecture and share some patterns. Lately, it has been one of the most popular application state container. The connect combinator allows you to create a Container component which will listen to changes of a specific slice of the global state. These containers help you to have a more fine grained control on which part of the dom tree you want to update.

Assuming you have the following redux configuration:

And the following presentational components:

Then you can create your containers and connect the components as follow

the bound containers will subscribe to change in the attempt count and update accordingly but will not be able to trigger actions ({ }); {}; ( , , ); the bound containers will be able to trigger actions but won't be updated: slice state function will return a constant so the component will never be updated ( , , ); the bound containers will be able to trigger some actions and will also listen to changes in the secret slice of the state ; ( , { }, ); (( , ) { { [ ]; ( ) { (); } { (); } (); }; < /> }); a function that map the return slice of state to a set of properties ({ }); (({ }) < />, ); ({ , }); a function which should tell whether the component should update or not (by default it checks with deep equality the state slice) ( {}, {}) ; (({ , }, ) { < > < /> </ > < > < >Try to find the secret</ > </ >; }, , ); (() < > < /> < /> < /> </ >, {}, ( ));

Flaco allow you to hook yourself into different life cycles of the components. This is useful to create your own update logic and your own combinators.

Will occur when a component has been mounted into the DOM

Will occur when a component has been unmounted (ie removed from the DOM)

Will occur before the component is updated (it won't be triggered when the component is mounted)

The lifecycle combined with the update factory will be useful to create your own update logic

You can create a combinator which will force the update every second for example.

The repo comes with few examples you can run by

Any bug or troubleshooting need to come with an isolated running example (ex: a codepen reproducing your issue only - we don't need the whole app) or will simply be ignored.|||

flaco - A Tiny (2kb) UI library based on hyperscript and virtual dom