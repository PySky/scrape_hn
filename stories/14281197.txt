Here's the kind of guy I am: I'll come across some awesome product, such as a toaster oven or dish detergent, sing its praises for the next couple of months, discover one minor flaw with it and instantly become discouraged and crestfallen.

I have a simple Python script at work. It scans our Jenkins server via its wonderful JSON API, looks for any builds on the develop or master branches that failed, and notifies me. I thought its simple and limited scope would make it the perfect candidate for porting it to Rust.

I'd be lying if I said this was even remotely a straightforward process. The very first hurdle I encountered was in trying to do something extraordinarily basic: loading a configuration file from disk. In Python, this can be accomplished via the following:

For comparisons sake, let's do the same but use the JSON library instead of ConfigParser:

Rust has no configuration module in its standard library, but fear not, there are many crates that do this job well. I decided to go with the library, having over 650k downloads and being the first result when I search "toml" on crates.io.

So the naive approach is to do something like this:

This code took much longer to write than I'd like to admit and I encountered the following issues while writing it:

Thankfully, the rust linter plugin for Atom is absolutely fantastic and really made dealing with these errors a lot easier.

So this isn't even the right approach to do this: each of those 's may panic, exiting the program. Cool, well thankfully I know that there's a macro, shorthand , that is used for just this scenario. It will return early when the result is Err. Let's try it:

Wait, Error isn't a object, it's just a trait so it can't be part of a Result. Time to scroll through the documentation and see what a good way to handle this is.

Taken from Rust's chapter on error handling, here's a relevant example:

I'm really trying hard not to be overly dismissive and critical, but this code does not make me happy and I don't think I'm alone on that. Nested, chained, conditional maps are not my idea of good, clean, and clear code.

The book follows up with an actually usable example using early returns, where the pattern goes something like this:

Note: at this point I have no idea when to_string() or to_owned() are used. My usually strategy is to try as_str(), to_str(), as_string(), to_string(), and to_owned(), until the compiler stops complaining.

This still does not make use of Rust's macro. I want safe handling of code, and I want a clear error reasons when something does go wrong. Trying the try macro:

If you try this, you'll get an error: String does not implement the trait From . It's true, it does not.

You also cannot implement it.

This was something that actually really discouraged me upon learning, but you cannot implement a trait for an object that you did not also create. That's a significant limitation, and I thought that one of the main reason Rust decided to go with Traits and Structs instead of standard classes and inheritance was for this very reason. This limitation is also relevant when you're trying to serialize and deserialize objects for external crates, like a MySQL row. Serde's documentation proposes [this workaround]|(https://serde.rs/newtype-wrapper.html).

Basically the pattern is to create a struct that consists of one element, the struct that you want to implement your trait on. You then implement that trait on your new struct, along with Deref for on the new struct that turns it back in to the original struct.

A Stack Overflow user had this to say in this post:

It is possible to be both a hack and the only possible method, and I would argue that most hacks come about because there is no alternative "good" method.

I'm certain there's a reasonable explanation for this rule. It's been explained that it's for the sake of unambiguity: If two crates implement the same trait for an object, then it's ambiguous as to which one to use. But is omitting this feature entirely really the only solution? I am confident that the Rust developers can think of a better pattern than this hack.

Standing on the shoulders of giants, I decided to take a look at how Elasticsearch-rs handles it's errors. The relevant code is found here:

Despite its verbosity, I actually like this approach quite a bit. You basically create one Error struct for your crate or program, implement a lot of From's for each type you need, and then finally implement Display on it so it can be printed out properly. It's a lot of boilerplate, especially if I plan on replacing my small Python scripts with Rust programs, but it's genuinely clean code and it ticks a lot of boxes with me.

Side note: there will never be a day where i can remember off the top of my head how to implement Display as it stands right now.

I never ended up porting the script and kept the 20 line Python code as is. In addition to the error and coherence walls, I thought Serde's code generation was more magic than I was willing to take; I'd much rather just write a simple deserializer, but that approach seems to be discouraged. I sort of feel like a kid who just bought a new Buzz Lightyear toy and found out that the wings don't actually spring out like it does in the movie.

And I know a lot of this is my own incorrect expectations. Python is a garbage collected, interpreted language that uses exceptions with base classes for its error handling. It has made drastically different design decisions and is a scripting language. I'm sure writing the equivalent code in C wouldn't be a picnic either. This exercise was helpful and I have to step back and ask, at least for me, if Rust is productive. I have a long ways to go before I understand idiomatic Rust code, and its philosophy behind everything.

I am excited about Rust's ergonomics initiative and am curious to see what good may come of it.|||

