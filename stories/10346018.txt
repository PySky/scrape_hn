Form helpers are probably one of the most used category of helpers and the least understood one. We’re going to see how Rails form helpers make our lives easier and also how to customize their behaviour.

Helpers in rails are meant to clean up view code by allowing you to extract data processing logic from your markup code. By moving the logic out, you get an added benefit, you can test your “view logic” easier. At least that’s the most common use case you’ll see in Rails.

Here a basic example of what a helper method might look like:

Another nice bonus is that you can have separate helpers (as in helper modules) for each of your controllers. So for example if you have a controller named , that will automagically look for and include a helper module named . So that means that you can separate your helper methods by context.

Also all helpers, like controllers, have a base module that they inherit from called . This is where you would put the more generic helper methods that could be reused in other controllers/views. Be careful though as this one tends to become a dumping ground for any method that doesn’t seem to belong in it’s own designated helper module which turns into a little monster in no time.

So in practice, you don’t really need to think about the mechanics, you just cut a bunch of logic out of the view and slap it into a helper method and you’re done. Easy as that.

I’ve written a more in depth article about Rails helpers if you are interested in reading more about Rails helpers.

Form helpers are basically the same thing I’ve just described but they are focused on generating html forms. Form helpers allow you to create html forms by using a lot less code. Not only that but some form helpers also handle session authentication, field pre-population, validation and a bunch of other useful tasks.

Assuming we have a User model with a name field and an email field in our application, let’s take a look at a common form helper and it’s output.

Here is what the code above generates:

As you can see there’s a lot going on in the html output, there are a bunch of lines we didn’t write. We only had to write 4 lines of view code and we got six back, and this is for a basic example.

You can see extra fields in there like the and the encoding. There is also a dom id and a class name, plus the action path and charset.

You can definitely use a regular html form instead of going through form helpers but you loose some of the convenience.

One example would be the authentication token that the helper generates for you, so you get security for free just by using a form helper instead of a plain html form.

Then there is the pre-population of form data. Say you have a user profile page where you want to allow the user to edit his profile. You can easily pre-populate the form with the user data just by providing the user object to the form helper.

By default, form helpers are using the default form builder which is responsible for generating the html that we’ve seen above for your form. So most of the magic in form helpers happens in this form builder class, which means you can extend it.

Let’s see an example of extending the default builder by tweaking the method to add some placeholder text for our user name.

With that, we’ve added a default placeholder to the text field helper. This is probably not the best example but you get the idea. You can pretty much customize form helpers to do whatever you like.

So we’ve seen how to extend the default form builder that Rails provides, but maybe you want a more customized builder. So let’s see how we can create a form builder from scratch.

We want to be able to create a form that uses a helper and generates all the necessary fields for our user’s form. Something like the following:

By using , we get a few arguments passed into our custom builder’s initializer. The first argument is the record name, the second one is the record object (the user object in this case), the third argument is the template (the current view) and the fourth is an options hash.

So with that it should be pretty easy to create a form builder that can render a field for the user’s name and one for the user’s email.

Just to see the pre-population of the form, I’ve gone ahead and created a record in my db with the name “John Bon Jovi” and the email “me@example.com”.

And here is the final output.

Form builders are not that scary if you think of them as regular helpers with a focus on building forms. As you’ve seen in the examples above, it’s actually pretty easy to roll your own in just a few minutes.

Now, from my experience, it’s pretty hard to find a compelling reason to build your own form builder so that’s why I’d be curious to hear what you’ve built. So feel free to share your thoughts and code here.|||

Helpers in rails are meant to clean up view code by allowing you to extract data processing logic from your markup code. By moving the logic out, you get an added benefit, you can test your “view logic” easier. At least that’s the most common use case you’ll see in Rails.