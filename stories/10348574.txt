A pure JS client for interacting with server-side RESTful resources. Think Restangular without Angular.

Note: All examples written in this README use the ES6 specification.

It is available with bower or npm:

The folder contains two built versions which you can use to include either restful.js or a standalone version. Standalone version already embeds .

Alternately, you can use a module loader like webpack.

Restful.js needs an HTTP backend in order to perform queries. Two http backend are currently available:

Start by defining the base endpoint for an API, for instance with the good http backend.

For those who prefers a ready-to-go version, pre built version of restful.js with fetch are available into the folder.

A collection is an API endpoint for a list of entities, for instance . Create it using the syntax:

is just the description of the collection, the API wasn't fetched yet.

A member is an API endpoint for a single entity, for instance . Create it using the syntax:

Just like above, is a description, not an entity.

You can chain and to target the required collection or member:

In case you need to set a custom endpoint URL, you can use methods.

A custom endpoint acts like a member, and therefore you can use and to chain other endpoint with it.

Once you have collections and members endpoints, fetch them to get entities. Restful.js exposes and methods for fetching endpoints. Since these methods are asynchronous, they return a native Promise for response.

If your application does not support native Promise, you can use a polyfill.

Tip: You can describe a member based on a collection and trigger the API fetch at the same time by calling :

A response is made from the HTTP response fetched from the endpoint. It exposes , , and methods. For a request, the method will return one or an array of entities. Therefore you can disable this hydration by calling .

For most of cases, in a response will be a plain object with headers data, but for some browsers, that don't support iteration over Headers object, it will simply be returned as a Headers object, so you can use method from it to get required headers.

An entity is made from the HTTP response data fetched from the endpoint. It exposes a method:

You can also use the entity to continue exploring the API. Entities expose several other methods to chain calls:

will get the id from its data regarding of the of its endpoint. If you are using another name than you can modify it by calling on the endpoint.

Restful.js uses an inheritance pattern when collections or members are chained. That means that when you configure a collection or a member, it will configure all the collection on members chained afterwards.

Restful.js exposes similar methods on collections, members and entities. The name are consistent, and the arguments depend on the context.

An error, response or request interceptor is a callback which looks like this:

To deal with errors, you can either use error interceptors, error callbacks on promise or error events.

Any endpoint (collection or member) is an event emitter. It emits , and events. When it emits an event, it is propagated to all its parents. This way you can listen to all errors, requests and response on your restful instance by listening on your root endpoint.

When you use interceptors, endpoints will also emit , , , , and :

You can also use method to add a one shot event listener.

To rebuild the JavaScript you must run: .

During development you can run to trigger a build at each change.

To build for production (minified files) you must run: .

To build the ES5 files you must run: .

All contributions are welcome and must pass the tests. If you add a new feature, please write tests for it.

This application is available under the MIT License, courtesy of marmelab.|||

restful.js - A pure JS client for interacting with server-side RESTful resources. Think Restangular without Angular.