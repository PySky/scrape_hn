Recently I have been looking for vulnerabilities in a target that has some API’s developed with the Google Web Toolkit framework. This is the second time I’ve come up against a target using this technology so I figured it was about time I took some notes.

Its sufficient to say, that I have finally upheld my word. This blog post is more of a reference to my future self, but if some people get something out of it, then more power to them!

I developed a tool that will blindly fingerprint a non-obfuscated GWT cache file and generate basic GWT serialized strings, ready for auditing. You can read the Conclusion and get the code.

Before we begin, lets take a quick look at some past research.

Ron Gutierrez presented some research titled “Unlocking the Toolkit” and developed some tools that parse serialized GWT strings and discover functions from remote. Other’s such as Brian Slesinsky have developed a document detailing the GWT-RPC wire protocol and even has a google group dedicated to GWT users.

Let’s first see a few examples so that we can understand this protocol a little better.

Here is a request that that sends a single String as the value .

We can examine what is happening if we break down the serialized string by pipe .

Here is the corrosponding function implimentation:

Here is a request that that sends a single List of type ArrayList containing a String value .

Again, we can examine what is happening if we break down the serialized string. We will skip up to the function name, since we know what those values are already:

Here is the corrosponding function implimentation:

So, what if we send multiple parameters? Let’s use the following example:

This is the same example above, the only difference is that the addition of a string argument.

So, what if we send multiple parameters? Let’s use the following example for

This is the same example above, the only difference is that an Integer type is used and it is now the first parameter.

So, what if we send multiple elements in our ArrayList and throw in a Long for good measure?

This is the same example above, the only difference is that an Long type is used there are now multiple elements in the ArrayList.

So, what is the Long value? It turns out that its an base64 RFC-4648 implimentation of the Long value. It can be decoded with a little python:

This means that 15886 was the long value sent to this function on the server-side.

Check out the excellent example here for learning how to serialize complex data types. Note that if you wish to send custom complex types to GWT endpoints, you will need to audit the source code of the target. Performing a white-box test is a requirement in that case so that you can determine the custom object’s properties.

The GWT-Penetration-Testing-Toolset was developed by Ron as part of his research. The tools work quite well.

This tool will take a serialized GWT string and attempt to parse it in order to find all the string locations in the rquest in order for us to test the server-side code for vulnerabilities. Nice is you already have a serialized string.

The -b burp option is nice. Your serialized string contains the § characters so you can plug the request straight into the intruder and vulnerability scan away.

After having to make some changes to the code to support HTTPS, it turns out that gwtenum.py only works on a few endpoints.

This is because the code assumes an obfuscated format of the cache files. Here are examples of a few functions within the some_other_gwt’s endpoint cache file.

When in reality, I was trying to parse the non-obfuscated some_gwt’s cache file. Here is an example of a function within this cache file:

As you can see, the above JavaScript looks a little more strutured which will make it easier when we want to parse it. So I developed a parser that will also generate the GWT serialized string for these non-obfuscated cache files.

So we can see that will not parse cache files that are obfuscated, you will have to use for that.

Several functions were vulnerable to different types of attacks but one of the interesting functions I came across, was the renameDir function. This function either wasn’t implimented in the actual UI of the target or at the very least I couldn’t find it. This is not an issue because as long at the client MIBFileService class impliments it, we can reach it. We can use to generate the GWT serialized string for us.

The code tells us the parameters, oldName and newName so my natural instict is to try and attack the endpoint using traversals. I didn’t even bother looking at the server-side code for this function.

After bypassing the authentication using other vulnerabilities, it turns out, I can leverage this to achieve remote code execution against my target.

This is possible because many applications allow users to upload potentially malicious files (think PHP, JSP, ASP, etc) with controlled/semi-controlled content, outside of the webroot.

The developer’s mindset is that, if the code is outside of the webroot, in a fixed location, there is no way for an attacker to reach it. Using a rename primitive is a powerful way to achieve code execution, because it fully side steps the developers assumptions.

So all we need to do is “rename” the directory, in reality, move the directory where our backdoor is into a web accessible location.

Testing GWT from a white-box perspective is certainly easier than from a black-box. If you are testing from a white-box perspective, you can decompile the XYZService (client) and the XYZServiceImpl (server) classes and can discover all the implimented functions, their arguments and their type definitions.

However, unless we can directly interact with that service, we will still need to find a way to generate the GWT serialized strings to be able to test the endpoints.

Attacking GWT functions using primitive types in Java is typically easy enough, the complexity arises when the endpoint expects serialized complex types. You can download the from the github account.|||

Recently I have been looking for vulnerabilities in a target that has some API’s developed with the Google Web Toolkit framework. This is the second time I’v...