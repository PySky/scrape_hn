For years I have been warning that class inheritance is dangerous, and that JavaScript offers much better alternatives based on composition, prototypal OO, and functional inheritance.

Yet many brilliant people choose to use `class` and teach it to new developers as THE WAY to handle objects in JavaScript. It reminds me of a brilliant talk:

I believe that developers should always be on guard against stagnation. If we think we know all the answers, we are not open to trying new things, and that could be locking us out of tremendous opportunities to evolve our programming styles and techniques.

We need to challenge ourselves constantly. If something new comes along, we should not reject it out of hand. We should be open to exploring and learning.

We should take a long, hard, objective look at the topic and question ourselves.

For the past few months, a small community has been hard at work on a new way to freely compose factory functions in JavaScript. It’s called The Stamp Specification. Yet another great alternative to classes.

It may come as a shock to readers of my work, but I still have an open mind about `class`. I’m still curious. Asking the questions:

So far, I have not found the answers.

I’ve issued that challenge to readers of my work. The challenge has been published on blog posts read by hundreds of thousands of people. In talks seen by tens of thousands. But all I hear are the same pack of common misconceptions.

I have thought long and deep about these topics, and contributed to hundreds of applications written in a wide variety of styles. For several years in the beginning of my career in C++ and Java, we all fully embraced class inheritance, after all, class was the only practical way available to us using the tools we had.

We all had the famous Gang of Four “Design Patterns” book on our desks, a constant reminder from the seminal work on object-oriented design:|||

For years I have been warning that class inheritance is dangerous, and that JavaScript offers much better alternatives based on composition, prototypal OO, and functional inheritance. Yet many…