Architecting a Highly Available and Scalable Wordpress Using Docker Swarm, Traefik & GlusterFS [Part I] Docker is a powerful tool, however learning how to use it the right way could take a long time especially with the rapidly growing ecosystem of containers which could be confusing, that is why I had the idea to start writing Painless Docker. Painless Docker is a complete and detailed guide (for beginners and intermediate levels) to create, deploy, optimize, secure, trace, debug, log,orchestrate & monitor Docker and Docker clusters in order to create a high quality microservices applications. This article is more detailed in the bonus chapters of Painless Docker Book. Using Docker, Docker Swarm, Amazon RDS (Aurora) + EC2, GlusterFS & Traefik, we are going to create a highly available and scalable WordPress cluster. I am using Amazon EC2 machines but you can use you prefered infrastructure. Start by creating two (EC2) machines in two different availability zones. In this tutorial, I am using: The first machine will be the manager of the Swarm cluster and the second one will be the worker. This is just an example but it depends on how available you want your cluster to be, you may create 3 managers (or more) for more availability. The manager will have a public IP because it will receive all of the ingoing requests and redirect them to Docker that will handle the internal load balancing between the containers living in the manager (same machine in this case) and the containers living in the worker. Don’t forget to add an Elastic Block Store to each machine.

Using , we can verify that the EBS is attached to our machine: On each machine, create our filesystem: Using common off-the-shelf hardware, you can create large, distributed storage solutions for media streaming, data analysis, and other data- and bandwidth-intensive tasks. GlusterFS was developed originally by Gluster, Inc. and then by Red Hat, Inc., as a result of Red Hat acquiring Gluster in 2011. If you are using another OS or another Linux distribution, adapt this command to your need. Notice: I created a machine with no public IP (the worker), this machine will not be able to reach Internet and install GlusterFS unless you setup an Amazon NAT instance. If you are just making some tests or not familiar with AWS, create a machine with public IP or create an EIP then assign it to the machine. Notice: A brick is a directory on an underlying disk filesystem. If one of the bricks goes down, there is a hardware failure to make the data available. Use fstab file to permanently mount the EBS to the new brick: Now use in order to apply the modifications that we added to the fstab file. Under each mount point a directory used for GlusterFS volume: Let’s add these lines to the file on each server , we will need this in a following step: node1 is the manager and node2 is our worker. In order to test this configuration, you can execute: from : From the manager (node1), type the following command to establish Gluster cluster nodes trust relationship: You should have as an output, otherwise check your firewall settings or tail your logs. Now we have a working GlusterFS trusted pool. A GlusterFS storage pool is a trusted network of storage servers (node1 and node2 in our case). When we started the first server, the storage pool consisted of that server alone. When we added additional node2 storage server to the storage pool (using the probe command from the node1 storage server that is already trusted), we created a trusted storage pool of 2 servers. An Example Of A GlusterFS Architecture Now, from the manager server, we should create a two-way mirror volume that we will call using: You will get this output: volume create: booksfordevops_com-wordpress: success: please start the volume to access data You can see the volume if you type Now you should start it using : If everything is ok, you will get a similar output to this: Our volume should be healthy but you can check its status using : Status of volume: booksfordevops_com-wordpress

Gluster process TCP Port RDMA Port Online Pid

------------------------------------------------------------------------------

Brick node1:/glusterfs/bricks/booksfordevop

s.com/wordpress 49152 0 Y 1868 

Brick node2:/glusterfs/bricks/booksfordevop

s.com/wordpress 49152 0 Y 17591

NFS Server on localhost N/A N/A N N/A 

Self-heal Daemon on localhost N/A N/A Y 1894 

NFS Server on node2 2049 0 Y 17612

Self-heal Daemon on node2 N/A N/A Y 17613 Task Status of Volume booksfordevops_com-wordpress

------------------------------------------------------------------------------

There are no active volume tasks Now that the GlusterFS server is set, we need to setup the client side. Let’s create the directory (in each node) to be used by the client in each node of our cluster: We need to mount a shared directory on node2 from the node1 and the same directory on node1 from node2. On node1, add this line at the end of file: On node2, add this line at the end of file: Then on both hosts, type . The next step is to install Docker on both hosts: Execute the last command on the manager and you will get a command to execute on the worker: If everything is ok, the worker will join the cluster: In this tutorial, we want to create a Wordpress blog, we can host the Mysql or the MariaDB database in our GlusterFS trusted pool but in my specefic case I created an Aurora database.

We are going to host Wordpress files in the storage pool we created, that points to . This is the Docker Compose v3 file that we are going to deploy: Notice: For security reasons, do not put your docker-compose.yml file in the same directory as your Wordpress files in , it will be publicly accessible. In order to deploy our website, we should execute this command: We can use a similar command to the following one in order to deploy the Wordpress app: But putting all together in a Docker Compose v3 file is a more organised way to deploy our app. You may have some premission problems with your Wordpress fresh installation, you will need to execute these commands: In both servers, you can now notice that Wordpress files are mounted from the service containers to the host volume: If you check the created brick on each server, you will find the same files: At this step, we have a working Wordpress installation that you can reach using the IP address of the manager and the port 8000. Træfɪk is a HTTP reverse proxy and load balancer made to deploy microservices and supports Docker and Docker Swarm (and other backends like Mesos/Marathon, Consul, Etcd, Zookeeper, BoltDB, Amazon ECS and Rest APIs).

This article is part of Painless Docker Book: Unlock The Power Of Docker & Its Ecosystem. Painless Docker is a practical guide to master Docker and its ecosystem based on real world examples. Painless Docker tends to be a complete and detailed guide to create, deploy, optimize, secure, trace, debug, log, orchestrate & monitor Docker and Docker clusters. Through this book you will learn how to use Docker in development and production environments and the DevOps pipeline between them in order to build a modern microservices applications. If you resonated with this article, please subscribe to DevOpsLinks : An Online Community Of Diverse & Passionate DevOps, SysAdmins & Developers From All Over The World. You can find me on Twitter, Clarity or my blog and you can also check my books: SaltStack For DevOps & The Jumpstart Up. If you liked this post, please recommend and share it to your followers.|||

Docker is a powerful tool, however learning how to use it the right way could take a long time especially with the rapidly growing ecosystem of containers which could be confusing, that is why I had…