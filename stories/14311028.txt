This project is currently a one man operation. I've dedicated a large chuck of my free time to this, and would be immensely grateful for any help. 

 Thank you for contributing

Kandinsky combines the expressiveness of storyboards with the power of Swift language.

If we write this:

We get this:

To install Kandinsky, simply add the following line to your Podfile:

First make sure to .

The syntax for the DSL is really simple and intuitive. After you've imported , any class inheriting from (e.g. , ) will have a method exposed like so:

This takes care of view creation and customization. The next step is to add subviews. We can set this by calling the method (note: unlike , is not static and must be called after the block)

UIView. { . . . . }. { r calling the `add` method, `r` is placeholder for `root` UIButton. { . . . ( , : . ) The framework exposes many methods for adding constraints `toLeftOf(:)`. You can also easily create your own constraint . () } r The `/` operator adds the left side item to the right side item in this case it means it adds the Kandinsky<UIButton> to the `r` variable which we declared above and which is an instance of Kandinsky<UIView>. The `/` operator can add any two elements of type `Canvas to one another` }

Here is a simple example:

This produces a view that looks like this:

In order to use your layout, simply make your implement the protocol. This means adding the method to your .

Then in the method of your , call the function and pass the instance of your layout

The method will be called after all of the views have been added and constraints set.

You can use it to extract views from the by using the

Note - only sets the property of the and calls the method. You can call it at any time, but it's recommended to call it in the method

If you don't want to inherit the and just want the view from your canvas, you can do it like this:

This framework is build by following the latest and greatest in the protocol oriented world of Swift. If you wish to add additional functionality, you only need to extend the protocol

And after you've done that you can call it:

You can also be more specific:

And then those properties will only appear on those types of es

Before contribute check the CONTRIBUTING file for more info.

Follow these 3 steps to run Example project:

This can be found in the CHANGELOG.md file.|||

Kandinsky - Swift Layout