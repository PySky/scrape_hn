This is a library that will produce a best-guess Clojure spec based on multiple examples of in-memory data. The inferred spec is not meant to be used as is and without human supervision, it is rather a starting point that can (and should) be refined.

The idea is analogous to F# type providers -- specifically the JSON type provider, but the input in the case of spec-provider is any in-memory Clojure data structure.

Since Clojure spec is still in alpha, this library should also be considered to be in alpha -- so, highly experimental, very likely to change, possibly flawed.

To use this library, add this dependency to your file:

The are two main use cases for spec-provider:

To infer a spec of a bunch of data just pass the data to the function:

The sequence of specs that you get out of is technically correct, but not very useful for pasting into your code. Luckily, you can do:

Passing to signals that we intend to paste this code into the namespace, so spec names are printed using the syntax.

Passing signals that we are going to require clojure.spec as , so the calls to become etc.

spec-provider will walk nested data structures in your sample data and attempt to infer specs for everything.

Let's use clojure.spec to generate a larger sample of data with nested structures.

This spec can be used to generate a reasonably large random sample of persons:

Now watch what happens when we infer the spec of :

Which is very close to the original spec. We are going to break down this result to bring attention to specific features in the following sections.

If the sample data contain any values, this is detected and reflected in the inferred spec:

Things like , and did not appear consistently in the sampled data, so they are correctly identified as optional in the inferred spec.

Most of the keys in the sample data are not qualified, and they are detected as such in the inferred spec. The key is identified as fully qualified.

Note that the for role is pretty printed as because when calling we indicated that we are going to paste this into the namespace.

You may have also noticed that role has been identified as an enumeration of and . To see how it's decided whether a field is an enumeration or not, we have to look under the hood. Let's generate a small sample of roles:

spec-provider collects statistics about all the sample data before deciding on the spec:

The stats include a set of distinct values observed (up to a certain limit), the sample count for each field, and counts on each of the predicates that the field matches -- in this case just . Based on these statistics, the spec is inferred and a decision is made on whether the value is an enumeration or not.

If the following statement is true, then the value is considered an enumeration:

In other words, if the number of distinct values found is less that 10% of the total recorded values, then the value is an enumeration. This threshold is configurable.

Looking at the actual numbers can make this logic easier to understand. For the small sample above:

We have 2 distinct values in a sample of 5, which is 40% of the values being distinct. Imagine this percentage in a larger sample, say distinct 400 values in a sample of size 2000. That doesn't sound likely to be an enumeration, so it's interpreted as a normal value.

If you increase the sample:

We have 2 distinct values in a sample of 100, which is 2%, which means that the same values appear again and again in the sample, so it must be an enumeration.

clojure-spec makes the same assumption as clojure.spec that keys that have same name also have the same data shape as their value, even when they appear in different maps. This means that the specs from different maps are merged by key.

To demonstrate this we need to "spike" the generated persons with an id field that's inconsistent with the existing :

Inferring the spec of yields a different result for ids:

Inferring a spec from raw data is a two step process: Stats collection and then summarization of the stats into specs.

First each data structure is visited recursively and statistics are collected at each level about the types of values that appear, the distinct values for each field (up to a limit), min and max values for numbers, lengths for sequences etc.

After stats collection, code from the namespace goes through the stats and it summarizes it as a collection of specs.

Undocumented: there is a number of options that can affect how the sample stats are collected.

Undocumented/under development: there is experimental support for instrumenting functions for the purpose of inferring the spec of args and return values.

Distributed under the Eclipse Public License either version 1.0 or (at your option) any later version.|||

spec-provider - Infer Clojure specs from sample data. Inspired by F#'s type providers.