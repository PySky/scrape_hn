Often times when using a UITableView or UICollectionView, we want to give our cells the ability to adjust their sizes based on their content. For example, if one cell has three words, and another cell contains the unabridged text of A Song of Ice And Fire, it doesn’t really make sense for both of these cells to be the same size.

For UITableView, allowing a cell to size itself via Auto Layout is fairly straightforward and well documented in Stack Overflow and various tutorials. More or less, just set the table view’s row height to .

For UICollectionView however, the solution is a little less obvious. When I was trying to figure it out, a Google search turned up several different solutions, some of which seemed hackier than others. It wasn’t clear to me what the “right” or cleanest way to accomplish dynamically sized cells was, or whether this was even a thing supported by Apple (spoiler alert: it is.)

In 2014, Apple released iOS 8, which included support for dynamically sized table and collection view cells (they called it “self sizing cells,” which explains why my Google search for “dynamically sized cells” didn’t go so well). You can check it out in What’s New in Table and Collection Views (WWDC 2014, Session 226).

In this article, we’ll talk about how to create self sizing collection view cells, how to set one or both dimensions of a self sizing cell, and some common pitfalls when creating self sizing cells.

So how do you make this lovely feature your own? Apple provides several ways to do it (as outlined in the above video), but we’ll be specifically exploring the common case of using Auto Layout with a UICollectionViewFlowLayout.

There are two things you need to create a self sizing cell:

If your collection view is created by a XIB, you will need to create a property with an and connect it to your collection view’s layout in order to set . There should be a Layout placeholder available in Interface Builder for you to control+drag to.

If your collection view is created programmatically, you would have had to instantiate a so you can just set the property on that.

Setting indicates to your flow layout that it should ask the collection view and its cells for updated layout attributes before returning the final layout attributes to your collection view.

It’s unclear to me what the best thing to set to is, but I haven’t run into any problems yet with just making it tiny. This article by Jeremiah Gage suggests setting it low, so that’s what I’ve done.

Remember that a constraint is simply a mathematical equation relating one dimension to another.

Let’s say you have a constraint that says the width of your should be equal to 2/3 the width of your cell’s . This means that you have to know the width of one in order to know the width of the other. Either you can:

In a self sizing cell, Auto Layout will use your views’ to define the size of those views. is a property of UIView that represents how large the view needs to be to show the contents of that view. For example, the of a UILabel is the size of the label’s text.

Auto Layout will use the size of those views to calculate the size of your cell based on your constraints. It is your responsibility to ensure that you can math your way from the size of your cell’s subviews to the size of your cell. If you can do it, then so can Auto Layout.

So self sizing cells are great and all, but what if we want to set the width and/or height of the cell? For example, maybe we want our cell’s width to be equal to the collection view’s width, or maybe we want some cells to be self-sizing, but others to not be.

The solution is pretty simple — create a width and/or height constraint on your cell’s and create setters to set their value from outside the cell.

Important: Make sure your constraints are on the cell’s and not the cell itself, or else you’re gonna have a bad time. Also, don’t forget to set , otherwise you’ll end up with conflicting constraints.

If you’re not using a NIB, put the constraint logic into your cell's rather than .

Now, you can set your cell’s width from anywhere that has access to the cell!

If Auto Layout isn’t able to determine the size of your cell from your content and constraints, it will fall back to the traditional approach and assign your cell a size from either the layout’s property or delegate method.

The default is 50x50 so that’s why your cells are all little squares. See the Apple documentation for reference.

If your constraints look like they should be able to fully determine the size of the cell, but your cell isn’t getting sized properly, check to see if you have any multiline UILabels in your cell (i.e. UILabels with their set to anything but ).

In a multiline UILabel, you can’t know the the height of the label unless you know the width of the label and vice versa — the label doesn’t know how many times it needs to wrap your lines unless it knows what its maximum width is. This means that the of a multiline UILabel cannot be determined from its content alone. If your cell size depends on that , then your cell size also cannot be determined.

In order to solve this issue, you must define one dimension of the label. Usually you’ll want to define the width and let the height grow. There are a couple ways to do this:

No but really, Interface Builder looks at the size of the cell in Interface Builder and tries to calculate the frames of your subviews based on that. In a self sizing cell, there should be one and only one size for your cell that satisfies all of your constraints. If your cell in Interface Builder isn’t that size, then it’s going to complain.

This can sometimes be solved by clicking on the Resolve Auto Layout Issues button. If Interface Builder has enough information to determine the size of the cell, it may resize the cell to the correct size.

However, sometimes Interface Builder doesn’t have enough information because you may be adding or modifying constraints and properties from your code. In these cases, Interface Builder will just have to be unhappy.

Yea, I got that too and I think it’s probably a bug where someone at Apple put a when they should have put a . Just make it 1 point less or something.

Call on your collection view’s layout. Your data may have changed, but you need to indicate that the layout attributes need to be changed as well, in order to recalculate the correct sizes for your cells.

Check out these two sessions from WWDC 2015 that might help you understand it better.

Hope this post helps you guys create some awesome, dynamically sized collection view cells! Now go freshen up on that Auto Layout-fu.|||

Often times when using a UITableView or UICollectionView, we want to give our cells the ability to adjust their sizes based on their content. For example, if one cell has three words, and another…