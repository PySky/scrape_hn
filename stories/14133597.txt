Last Friday, a massive PR was merged into that makes it infinitely more extensible and useful.

All of the packages referenced below have been published on with the tag . It will be published as after some more testing this week.

Here‚Äôs a synopsis of the changes:

The initial goal of was to give insight into responses from a GraphQL API. It was simple: take a schema, generate a namespace, gain more confidence. But, it was too general and included too much information. For instance, if the schema looked like:

then the interfaces would look like:

But if the query looked like:

Then the interface would have three extraneous fields ( , , ) that were not actually present in the response.

Additionally, if the query had an alias, then the interfaces would be invalid, for instance:

The interfaces are, once again, incorrect. will still be on the interface, but it should actually be .

This use-case encompasses most of the perceived utility of the library and not having it covered was a sore spot. In this will change. There is now an option to include a file with a query and have it generate the interfaces based on that. (The old use case is untouched, just don‚Äôt provide a query!)

So for the above query, the generated interface will look something like:

You may have noticed the interface, I‚Äôll get to that next.

A problem with other tools that have a similar function is that they wind up generating code that looks like:

At some point it gets to be quite hard to read. Also, since there‚Äôs no good way to get a ‚Äúsubtype‚Äù from a TypeScript interface, it makes writing actual code a bit difficult. Consider the following code:

What type can you use for employer? You‚Äôll either have to write your own interface that can become inconsistent with your query or use the type.

This is why will, by default, return an interface like:

Now we can easily add type-checking to the previous code example:

This also has a built-in caching mechanism, so duplicate names are not generated (e.g. two interfaces named ). If the name has been used before and it is requesting different fields, a ‚Äúhigh-tech counter‚Äù will append a sequential number to the end of the name. üòâ

If, for some reason, the subtype feature is undesirable, it can be switched off by providing an alternate function which returns (or, if not type-checking, any falsey value).

was originally designed as a simple CLI. However, in it provides first-class support for programmatic usage. Installing the packages or will give you access to the same functions that the CLI uses. This is extremely useful if you generate your type definitions as a part of a grunt/gulp/brunch/etc. task or a webpack loader. In fact, at Avant, we use the package in this exact way. Our script reads files and generates complimentary files with the type definitions.

Not everyone‚Äôs code style is the same, so hardcoding default formatters can be harmful to other users. now provides a way to pass overrides for defaults. You simply just need to make a file that provides these overrides and make a default export (or ). Additionally these overrides can be published on and reused in other projects.

was obviously created to support TypeScript. However, TypeScript is not the only strongly-typed language that people use. Because default formatters can be overridden, this makes supporting different targets incredibly simple. For instance, is an example of targeting flow instead of TypeScript. Docs for developing new languages are forthcoming, but until then, the package has the type that is expected from a language.

has made the move to using lerna to manage its repo. This allows extremely easy development with the new modular components.

It‚Äôs kind of funny that a tool developed for TypeScript wasn‚Äôt written in it, but it started as a quick (100 or so line) hack. Naturally, Javascript was the language of choice.

In order to use / without additional polyfills, node 4/5 had to be dropped. Previous polyfills were also removed. Node 8 is set to be released this month, so 6/7/8 should be a reasonable requirement.|||

Last Friday, a massive PR was merged into gql2ts that makes it infinitely more extensible and useful. All of the packages referenced below have been published on npm with the tag next. It will be‚Ä¶