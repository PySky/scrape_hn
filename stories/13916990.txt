React offers a great language to declaratively describe User Interfaces (web or otherwise) and GraphQL offers a great language to declaratively describe data requirements. React gives us composability with its components and GraphQL gives us composability with its fragments. These two similarities allow for a great match between React and GraphQL (a match made in Facebook).

In this article, I’ll walk you through a simple example to connect a blog app written in React with a GraphQL API without using any frameworks like Relay or Apollo.

Those frameworks exist for very good reasons. Here are a few generic things such frameworks try to do (not a complete list):

Obviously, if you need all of these features and strengths, you need to either use a framework or reinvent a wheel. If you think you don’t need these features, you’re probably not thinking far enough into the future.

But sometimes using a framework is not an option. Sometimes a framework has a lot more features than what you’re after and sometimes introducing a framework means massive changes to existing structures. Frameworks usually decrease the flexibility you have with your code. This last point can be both a blessing and a curse.

This article is not meant to convince you that frameworks are bad (or good). It simply shows that using GraphQL with React is simpler than one might think. If you’re using REST APIs with React today without a framework, switching to a GraphQL API is a no-brainer.

Of course if you’re not sold on GraphQL yet, then you need to read a few different articles first.

The rest of this article assumes that you’re comfortable with GraphQL query language and React.js itself.

We’ll start with a ready React app which you can clone from Github:

You’ll need to run and in two separate terminals as they both watch files for changes.

On http://localhost:8080/ you should now see a simple blog app with some in-memory mock data:

You can add new articles too. They will be saved to memory as well.

The code for this React app is simple but I’ve made a few design decisions to expose how to work with many different GraphQL queries and mutations.

You have an initial list of articles on the left which does include all article details. You get a single article’s complete information when you click on it. Also, an article object expects an author property which itself is an object. When we create a new article, we’ll have to create (or find) an author first then create an article for that author.

You can see the in-memory API inside which is the file that we’re going to convert to work with GraphQL.

I made the in-memory API async already (which is always a good thing to do when faking APIs). The React app is already wired to work with this async API. All of React’s state is managed in the top-level App component.

What we’re going to do next is completely remove the in-memory API and replace it with GraphQL requests that are built to match the React components’ hierarchy.

To build a GraphQL server schema that matches the data used by this React application, we’ll use GraphFront.com, which is a free GraphQL backend as a service where we can define data models and get a ready-to-use GraphQL API for them. This will save us some time as this article is not about creating a GraphQL API but rather using one.

Disclaimer: GraphFront.com is an in-house project at jsComplete. The UI is a React app that uses a GraphQL API without any frameworks. It’s all open-source.

Once you’re on the GraphFront dashboard, define the following models and fields (see images below for reference):

GraphFront gives you a GraphQL endpoint and an API Key. Use them to insert some seed data into the GraphFront cloud-hosted database.

Navigate to your GraphQL endpoint and use the following mutation to insert a few authors:

Here is an example object to use with this mutation:

The mutation will return the value as created in the database. Create a few authors and make a record of their ids.

Here’s the mutation you can use to create an article:

And here’s an example object for it:

Create a few articles. The React application will eventually work with the data you seed here. You can see the data in the GraphFront dashboard when you’re done:

The first step is to understand the React application components hierarchy.

We start with an component that renders an component. The component represents the left section of the app and it renders many components.

The component also renders an component to represent the currently selected article with all of its information. The component uses an component to represent the author information.

There is also the to create a new article. This component will use the same mutation we used above to insert an article. We’ll do that last.

Here’s the tree of the React application components as we see it so far:

When we map this application to a GraphQL API, this tree of components translates as follows:

To keep things simple, we’ll construct one GraphQL document with many operations for the different data requirements of the whole application. Every component will basically contribute to that GraphQL document with its own partial data requirement. When we are ready to ask the server for data, we’ll pick one of the available operations in that GraphQL document. The server will only execute the operation we name.

Note: It’s possible (and easy) to construct several GraphQL documents that each represent a single requirement, but it requires a little bit more code. I did not go that route to keep things simple here.

We’ll put every component’s contribution to the main GraphQL document in a static property on the component. Every parent component will include the contributions of its children. This will make the property on the top-level component a complete and ready-to-use GraphQL document.

The component uses two data elements:

The component does not know anything else about the structure of the data.

These two elements translate to two queries. We’ll make those queries use fragments from ’s children component as follows:

Note a few things about the above queries.

Let’s now figure out the requirements of the component’s children, and . From this node inward, we will be defining fragments on certain types. A component could have multiple fragments based on the way it uses the data. It will also include all the fragments used by all its children. (Note, this is also a duplication that can be avoided with a bit more code, but to keep the example simple we’ll pass on that).

The component has only one fragment. It’s on the object. Inside the , we know that while rendering a list of components, we need an for each article. Everything else is determined by the component:

The fragment is simple. It does not have any children and requires an , , on each article:

The component requires the following properties on every article: , , , and which is an object. The properties of the author object are determined by the component (which is a child of the component):

The component is simple. It does not have any children and it requires , , properties on an type:

This completes all the data required by all the components.

The result of everything we did so far will be that the App component has a complete GraphQL document with two operations and four fragments:

Let’s now start changing the API code that we have which currently works with the in-memory data. Just delete everything in and add the following function instead:

You’ll need to replace the values with the values you have in the GraphFront dashboard.

The function is simple. It sends an Ajax request to your GraphQL endpoint with the document, an , and any needed by that operation. It always sends the because that’s a GraphFront requirement. Once we have the data back from the server, we make the promise return just the actual object that we aliased in our queries above.

That’s all we need. We have the complete GraphQL document we defined our queries operation. We just need to invoke them at the right time.

In the App component, we need to replace the api.* methods that we used before with the in-memory API with calls.

We’re just picking operations here and passing them to GraphQL along with any variables they need.

When you refresh the React application now, it will completely read all of its data from GraphQL. Every component in the application has full responsibility of the data it requires. We do not over-fetch or under-fetch any data.

Adding mutations is no different when it comes to using the GraphQL document. However, the process of preparing data for a mutation is mostly an imperative one.

Since we need to first find or create an author and then create an article associated with that author, we need two mutation operations. GraphFront has a findOrCreate[Model] mutation that we can use for the author. I’ll just use it to find an author based on all of their properties (usually, you want to use this with something unique about the authors, like their emails):

The above is the exact API for the GraphFront mutation (which you can find in GraphQL’s generated documentation). When we supply the input properties for this mutation, it will either find the author object and return its id or create a new author object and returns its id.

No need for a find operation first here, but we need to pass an authorId to its input object. Note also how it uses the fragment to figure out what data to ask for after the creation of an article.

Both of these mutations need to be added to the property.

Note also how we’re always aliasing the returned mutation data as . This allows us to modify our sendOperation once to account for both query data and mutations data.

Ideally, should be refactored into and with some shared code, but we’ll keep it simple here.

To use the two mutations in the React application, we need to change the function on the component:

That’s all. The application now reads from and writes to a GraphQL API and all the data requirements are clearly documented where they belong!|||

React offers a great language to declaratively describe User Interfaces (web or otherwise) and GraphQL offers a great language to declaratively describe data requirements. React gives us…