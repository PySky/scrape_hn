Since version 3.2.0 Redis that was released on May 6, 2016, the database introduces geospatial commands. Simply said it means that you can ask database like this: I would like to get list of nearest airports in selected location. Let’s extend this use case with pagination and implement it with Ruby.

As an example data, we used a list of all airports. You can download csv the file from openflights.org.

We skip the import of South Pole Station Airport because Redis documentation says that valid latitudes are from -85.05112878 to 85.05112878 degrees.

We’ll need the following Redis commands to import data, query closest airports and do the pagination.

Let’s import all data from the CSV into the Redis database. Airports will be stored under key airports.

# go through airports and import each row separately airports.each do |row| # use geoadd command for importing redis.call(:geoadd, 'airports', row[longitude], row[latitude], row[airport_name]) end

The full implementation in Ruby with comments will look like this.

# search and save all results under airports_result key redis.call(:georadius, 'airports', longitude, latitude, radius, 'km', 'asc', 'storedist', 'airports_result')

# use zrange to extract page from airports_result result = redis.call(:zrange, 'airports_result', start, stop, 'withscores')

# print result to the standard output result.each_slice(2).with_index do |(name, distance), i| position = start + i + 1 distance = distance.to_f.round(2) puts "#{position}: #{name}, #{distance} km" end

The script will print airports ordered by their distance from New York.

You’ll get a result like this if you set page = 2.

We used the new Redis georadius command to search for the nearest location. According to Google, the results look correct. I didn’t make any performance test but on my machine, the queries to Redis were super fast. So if you are familiar with Redis database you can give it a try, instead of traditional solutions like PostGIS or geocoder.|||

