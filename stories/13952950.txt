Given an integer, count its set bits.

Input: 

 Output: The number of set bits in -1 is 32

Input: 

 Output: The number of set bits in 16 is 1

A simple solution would be to consider every bit (set or unset) till last set bit in a number and maintain a counter to count set bits.

Output: 

 

 16 in binary is 00010000

 The number of set bits in 16 is 1



The naive approach requires one iteration per bit, until no more bits are set. So on a 32-bit word with only the high set, it will go through 32 iterations.



We can use Brian Kernighanâ€™s algorithm to improve performance of above naive algorithm. The idea is to consider only set bits of the integer by turning off the rightmost set bit of given number after considering it, so next iteration of loop will consider next rightmost bit.

We know that the expression will turn off the rightmost set bit of given number. will have all the bits flipped after the rightmost set bit of n (including the rightmost set bit).

 So will result in last bit flipped of n.

 For example, consider number 52 which is equal to in binary and its total set bits are .

Output: 

 

 -1 in binary is 11111111111111111111111111111111

 The number of set bits in -1 is 32

 



Brian Kernighanâ€™s method goes through as many iterations as there are set bits. So if we have a 32-bit word with only the high bit set, then it will only go once through the loop.



GCC also provides a built-in function that returns the number of set bits in n.

Output: 

 

 The number of set bits in 16 is 1

 



GCC also provides two other built-in function and similar to , except their argument type is unsigned long and unsigned long long respectively.



We can also use std::bitset::count that returns the number of bits in the bitset that are set.

Output: 

 

 The number of set bits in 30 (00011110) is 4

 



Please use ideoneÂ orÂ C++ ShellÂ or any other online compiler link to post code in comments.

 Like us? Please spread the word and help us grow. Happy coding ðŸ™‚

|||

Given an integer, count its set bits. We can use Brian Kernighanâ€™s Algorithm to improve performance of above naive algorithm. The idea is to consider only