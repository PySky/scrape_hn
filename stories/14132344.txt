In the movie Avatar, there's this big badass bird-brained pterodactyl thing called a Toruk that the main character must learn to ride in order to regain the trust of the blue people. As a general rule, Toruks do not like to be ridden, but if you fight one, subdue it, and then link your Blue Man ponytail to the Toruk's ptero-tail, you get to own the thing for life. Owning a Toruk is awesome; it's like owning a flying car you can control with your mind, which comes in handy when battling large chemical companies, impressing future colleagues, or delivering a pizza. But learning to ride a Toruk is dangerous, and very few people succeed.

I like to think of the Erlang programming language as a Toruk. Most people are frightened of Erlang. Legends of its abilities abound. In order to master it, you have to fight it, subdue it, and (finally) link your mind to it. But assuming you survive, you then get to control the world's most advanced server platform, usually without even having to think. And let me tell you: riding a Toruk is great fun.

This guide is designed to teach you the Erlang state of mind, so that you are not afraid to go off and commandeer a Toruk of your own. I am going to introduce only a handful of Erlang language features, but we're going to use them to solve a host of practical problems. The purpose is to give you the desire and confidence to go out and master the rest of the language yourself.

You are welcome to type the examples into your own Erlang shell and play around with them, but examples are foremost designed to be read. I recommend printing this document out and perusing it in a comfortable chair, away from email, compilers, 3-D movies, and other distractions.

In Erlang, functions consist of one or more clauses. The last clause in a function must end with a period ("."), and all other clauses must end with a semicolon (";"). When a function is called, the first clause that matches the provided argument list is executed. You might think of functions as what would happen if C's statement were exposed to toxic sludge and became a superhero.

In the simplest case, a function has one clause. Here is a function that simply returns its argument, the variable (variables are always capitalized):

Notice that there is no "return" statement in Erlang. A function always returns the result of the last expression. Since every expression has a result, and every function clause has at least one expression, every function always has a return value.

Now suppose we wish to implement a Boolean function that takes either or as its single argument. A function would need two clauses:

Each time is executed, Erlang first tests whether the argument is (and if so, executes the first clause), then tests whether the argument is (and if so, executes the second clause). Matching the provided arguments against the function definition is called pattern-matching. Pattern-matching makes it easy to write complicated functions without the use of internal control structures.

We can use pattern-matching to see whether the same variable appears more than once in the argument list. For example, this function implements an equality operator:

If the two provided arguments are the same, the function returns ; otherwise, the function returns .

Note that the clause order here is important. This would be incorrect:

Why is this incorrect? Erlang first attempts to match against the first clause. But if the two arguments are the same, a match still occurs; and are simply assigned identical values. The second clause is never reached. Using different variable names in the variable list does not require different values assigned to those variables.

We are now equipped to implement some more Boolean logic. Here is an implementation of :

You might think all of these truth-table clauses are tedious. They are. We can use a special anonymous variable in order to reduce the last three clauses to a single clause:

The anonymous variable ( ) matches anything, always. It is not assigned a value, so as we see in the second clause above, two or more underscore variables in the argument list do not have to match identical terms. The anonymous variable is often used to "throw away" parts of a pattern that we don't care about.

Now that we have regular variables and the underscore variable at our disposal, the rest of our Boolean logic library is a cinch to write. Take a moment to understand why each of the following functions works as advertised.

As you can see, pattern-matching gives Erlang functions tremendous expressive power. In the next section, we will combine pattern-matching with recursion to build an arithmetic library from almost nothing. In most languages, recursion is usually a measure of last resort, and only employed to implement complex algorithms. In Erlang, recursion is often the simplest and most efficient way to do something mundane.

Erlang has a rich set of arithmetical operators. But in this section, we are not going to use any of them. Instead we are going to build our own complete arithmetic library, using only what we have learned so far about functions.

The task in this section is admittedly contrived, and recursion is definitely not the simplest way to solve it in the real world. However, the exercise will be a good way to practice recursive thinking in preparation for Section 3, where recursion will the best way to go about our problem.

Recall that recursive functions have at least two parts: they must first test for some kind of base case (where the algorithm terminates), and if the base case is not satisfied, the recursive function must perform some logic, and then issue a call to itself. In Erlang, recursive functions usually have at least two clauses: a “base case” clause, and an “all other cases” clause.

This will all become clear in a minute. To get things moving, I am going to provide two functions off of which the rest of the library will be built: and . Assume that increments the provided argument, and that decrements the provided argument, like this:

Can we use these two functions to add any two positive integers together?

Indeed we can!

Sometimes it's easiest to read recursive functions from bottom to top. So look at the second clause first: it says that adding up A and B is the same as adding up (A+1) and (B-1), which is obviously true. So the function keeps adding 1 to A, and subtracting 1 from B, until B reaches zero, in which case it terminates (first clause). By that point, has been recursively called B times, which means that A has been incremented B times, so that the result is, indeed, A + B.

Well that was a bit of fun, now wasn't it? Let's implement subtraction:

It's the same idea. From the second clause, we see that (A - B) is the same as ((A - 1) - (B - 1)), which is obviously true. The recursive call is made until B hits 0, in which case A has been decremented B times, giving the result A - B.

Neither of these functions work when B is negative. We can modify to accommodate negative integers very simply:

Notice the use of an Erlang guard in the second clause ( ). We can impose conditions on the argument list with the keyword followed by an expression. There are many types of guards allowed, but for now, we'll just make integer comparisons.

The modified form of is similar:

With addition and subtraction taken care of, it's easy to tackle multiplication. Just as we implemented addition as a series of increments, we will implement multiplication as a series of additions, again using recursion. We use the fact that A × B = A + A × (B - 1).

Adding support for negative numbers is easy, because A × (B + 1) - A = A × B:

Division? Not a problem. With integer division, we really care about two operations: finding the quotient, and finding the remainder. In both cases, we want to subtract the divisor from the dividend until we hit zero. The remainder operation is the easier of the two:

For the quotient function, we will use a common pattern in Erlang, which is to have an internal recursive function that is distinct from the main interface. The internal function takes an extra argument, which keeps track of the number of times we have subtracted the divisor.

With divide and multiply in our toolchest, the world is our problem set. Let's implement a power function, for instance. We use the exact same idea as before, recognizing that raising a number to an exponent is really just a series of calls to multiply. In other words, AB = A × AB-1.

In practice, all of these functions are terribly inefficient, since they reduce everything to a series of increments or decrements. But this recursive frame of mind is absolutely essential to getting the most out of Erlang, as we'll see in the string-processing library we are about to build.

In Erlang, strings are represented as lists of integers. These integers are either ASCII character codes or Unicode code points. For example, the ASCII string "dog" is represented as the list of the integers 100 ("d"), 111 ("o"), 103 ("g"). The literal representation of an Erlang list is surrounded by square brackets, so "dog" can be written if you so desire. To represent the integer for a particular character, simply precede it with a dollar sign ("$"). So is the same as is the same as "dog".

Every list is divided into two parts: a head and a tail. The head is the first item, and the tail is everything else. Lists are recursive data structures. The tail of a list is a list; it has its own head and its own tail. And so on.

The empty list is represented as " ". It has no head and no tail.

In Erlang, to push an item to the head of the list, use the " " operator (a pipe character):

The operator can also be used in pattern-matching to pull an item from the head of a list:

To reverse a list, use the function . Reversing a list may seem like an obscure operation, but as we'll see, it is used all the time in implementing list algorithms in Erlang.

We now know enough about strings to get started with an example. Let's write a function that capitalizes the first letter of the input.

The basic idea of this function will be simple. We examine the first character (head) of the input to see whether it's a lowercase ASCII character. If so, we convert it to uppercase (by adding the difference between uppercase ASCII characters and their lowercase equivalents), and push it back on to the tail. If not, we simply return the unadulterated input:

Here we have used a few new mathematical operators, the meaning of which you can probably figure out. Also note that a comma is used to separate multiple guards on the same clause.

If you thought that was fun, just wait until you try converting an entire string to uppercase. In a world without for-loops, how does one process every element of a string? It's time to revisit our old friend, recursion:

As with the function we wrote in Section 2, this function has a public interface and an internal recursive function that includes an extra argument. The extra argument is known as the accumulator, which starts out as an empty list. The general strategy is to pop an item from the head of the input, convert it, and push it onto the head of the accumulator. When we run out of input, the answer we want will be stored in the accumulator — but in reversed form. We therefore call and return the result to the public function.

Let's examine the internal function clause-by-clause to see how this strategy is implemented.

In the base case, there is no more input. We therefore reverse the accumulator:

If there is still input, and the next character is a lowercase ASCII letter between "a" and "z", we convert it to an uppercase ASCII letter, push it onto the accumulator, then recursively call on the remaining input:

The last clause matches when the next character is not a lowercase ASCII character. In that case, we simply move the character from the input to the accumulator untouched:

And that's the end of our algorithm. Writing a function is left as an exercise for the reader.

Now it's time to get fancy. Getting fancy, of course, entails Capitalizing The First Letter Of Every Word rather than EVERY SINGLE CHARACTER. We'll call this function .

The only difference between and is that we use pattern-matching to peek at the accumulator before deciding what to do. If the accumulator is empty (second clause), that means we are at the beginning of the input and want to capitalize the next character. If the accumulator has a space character at its head (third clause), that means we are at the beginning of a word and want to capitalize the next character. Note that the integer representation of a space character is dollar-slash-space (" "). Here we have also used the match operator (" "), which lets combine pattern-matching with variable assignment right in the argument list.

As you can see, recursion, accumulators, and pattern-matching are a powerful combination. We can write context-dependent algorithms without state variables or regular expressions. More importantly, we can express the solutions to problems clearly, and have confidence in the correctness of our algorithms. The joy of Erlang is to write code without fear of forgetting something.

So now we're ready to have some fun. Since you know the basics of Erlang now, I won't spend too much time explaining the following algorithms. They're just meant for you to ponder and enjoy.

A classic interview question is converting a string to an integer ( in C). Here's how to do that in Erlang:

Note that the accumulator here is an integer, rather than a string like we've been using so far. In principle, of course, an accumulator can be anything.

Now suppose we want to do the opposite: convert an integer to a string. Here's how:

Note that here I've used two integer operators: is integer divison, and is integer modulo (usually represented as in C-style languages).

Let's pretend we're writing a productivity suite in Erlang and need to convert positive integer column numbers to the string representation used by most spreadsheets ("A" through "Z", followed by "AA" through "ZZ", etc.). Here's how:

Or maybe the word-processor in our productivity suite needs a word-count function. Piece of cake:

Here we've used a couple of new operators: is the equality operator in Erlang, and is the not-equality operator. Now you know.

Of course, if we plan to build a competitor to Microsoft FrontPage, we'll need a way to escape HTML special characters. No sweat:

There's something new in the above code: the two-argument form of . It reverses the first argument, and then appends the second argument. It's handy for code like this where we are building up an accumulator in reverse (which is often the case in string-processing).

Outlook Express had better watch out, because we now have the tools to write a killer email client. Let's wrap words at 80 characters for outgoing email. As we scan input, we'll have a word accumulator and an output accumulator, and decide when to push the accumulated word onto the output, and when to insert newlines. There's a new operator for you in here: concatenates two lists.

Erlang is a rich language that you come to appreciate more as you dig deeper into it. In order to get straight to the algorithms in this guide, I have deliberately avoided covering Erlang's major data structures, its libraries, and its built-in functions. But if you've enjoyed thinking about problems with an Erlang frame of mind, I encourage you to go out, learn the rest of the language, and start putting Erlang to work. Erlang has an active, growing, and friendly developer community, exciting potential applications, and many interesting and useful open-source projects.

Admittedly, learning to ride a bird-brained pterodactyl can be tough business, but once you master it, you'll wonder how you ever got along before.

Download the source code that appears in this guide

You're reading evanmiller.org, a random collection of math, tech, and musings. If you enjoyed this, you might also like Why I Program In Erlang.|||

