The page contains a polygraph component with six AxisLabel children. Next, define the Page Object based on this structure.

Since the form for adding a new stat is defined with a declarative approach, we use built-in TestCafe selectors.

For details about TestCafe selectors, see Selectors.

Stats painted on the graph are defined with a component-based approach, and we use VueSelector for them.

For more information about VueSelector, see testcafe-vue-selectors.

Create folder and save the Page Object definition to the file. Later on, we will import this file as a regular module.

Let’s create the file and put it into the directory. TestCafe supports the protocol, so you do not need to set up a local HTTP server to run the tests. All you need is specify the path to the tested page as a target page URL.

The test scenario adds a new stat labeled and checks that the number of stats changed from 6 to 7.

This code uses methods that emulate user actions: typeText and click. You can find more details about actions in the Actions documentation topic.

We use built-in assertions to check that the HTML elements’ properties have the expected values. They expose various methods to compare values and provide the Smart Assertion Query Mechanism. For details on assertions, see Assertions.

Since inherits from , you can use all the capabilities of TestCafe selectors. For instance, the code above uses the property from the Selector API.

The plugin also allows you to obtain Vue.js component properties. Extend the test above with code that verifies the added stat's properties:

This code uses the method to obtain the Vue component's properties. This method returns an object that contains the , and properties. You can find detailed information in the repository.|||

When you are writing e2e tests for a web app, you sometimes have no other choice than to write clumsy selectors like Such constructions lead to code that is difficult to read and comprehend. In this…