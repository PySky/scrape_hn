Last week, I posted a follow-up to SnapEDA’s Top 10 Microcontrollers post called How to pick a Microcontroller (for Beginners). When I first wrote that post, it ended up being pricing-centric and a huge rant. So, I did a re-write to provide a bit more utility to the masses… However, leave a rant unposted? Not this guy… Without further ado, here are my thoughts on picking microcontrollers (or electronics) with a focus on pricing.

In addition to all of the questions/answers/comments I provided last week (note: if you haven’t read it – especially the caveats, this post might not make sense) on selecting a microcontroller, there is one underlying, immutable rule.

With all of the pros/cons/ups/downs/lefts/rights about picking your MCU based on parameters like flash size, peripherals, cores, etc… More often than not, the actual selection criteria is narrowed down to “how much does it cost?”.

While cost is a very important parameter when selecting a microcontroller (or any components), the process usually becomes oversimplified.

When I ask “how much will it cost to build this product”, the answers I get vary wildly depending on who I’m talking to, and very rarely does anyone give even remotely the correct answer. The reason is that when you ask individuals on a team, they can usually give you the pricing associated with THEIR function – but then waffle everywhere else.

This makes sense, because why should an app developer be able to reasonably quote a hardware design? Makes no sense.

As a manager, team lead, or product owner – it’s your job to add and aggregate costs from all functions in your team, sandbag a little, and then come up with a reasonable budget… No surprises yet…

But, a question you need to ask yourself is… What part of our product needs to be the most cost-sensitive? As in, what part of the product needs to cost the least? “Product” in this case might be your physical hardware product, your website, your apps, marketing, etc… Essentially, something in your business that is responsible for generating revenue.

If you’re in a typical hardware company, you’ll inevitably say “hardware costs” and you’d be completely wrong. Frankly, if you said any specific team or feature, you’d be wrong. Really, really, really wrong.

Is it though?

I hear this saying a lot in some variant or another, to which I usually retort “No, -product- cost is king”

Does the bill of materials cost drive EVERYTHING? Or is it just an important factor in total product cost?

Since this post/rant is about the embedded life, I’m going to stay away from App/Web related stuff… So, for the moment, I’ll ask a very simple question:

“Assuming they’re functionally similar, should I use a $2 MCU or a $1 MCU?”

Without fail, every hardware designer I’ve met says “If it can meet the product requirements, then ALWAYS use the $1 MCU”

Okay… Fair enough, but a better answer might be “If it can meet the product requirements, use the cheaper MCU if there is no R&D difference downstream” – and THAT’S where the gotchas are…

With 2 identical products, you’d naturally lean towards the cheaper one, but a problem I tend to run into is that hardware designers choose the cheaper components without considering downstream costs, and those downstream costs can really add up.

For instance, let’s say using the $2 MCU will come with an associated $10k in firmware development costs, but the $1 MCU comes with $20k in firmware costs… Which one do you choose then? Well… Actually, you can’t choose until you also know your expected number of sales, because 10,000 units is the break-even for those 2 options.

How much is the product being sold for? If it’s being sold for $5, then yeah, that $1 is a substantial haircut on profits – but if it’s being sold for $1500 – then does it really matter to save that negligible cost over other factors?

Also, that doubling in firmware cost – what does that represent in calendar time? 2-3 months? Is it worth having a product done/delivered 2-3 months earlier, rather than waiting to save that extra money? In the real world, a 3 month jumpstart on a product pays itself off in droves.

I know what some of you are thinking…

That this is just a bunch of trivial mental-math, and no one responsible for a product ACTUALLY makes these kinds of decisions without considering the bigger picture… Well, if that were true, I would probably be out of business.

In the past 10 months, I’ve seen 1-1.5 man years of delays added to projects in favour of minor BOM savings on 3 products from 3 companies. Unfortunately, in those 3 cases, the hardware was far out of my control.

In fact, in one of those products, the hardware designer refused to add a 10 cent component in the name of BOM savings, but that component was required for any sophisticated debugging of the hardware and firmware – so, in order to save 10 cents on a product with a total yield of 500 items, $7k was added to firmware costs…

To re-iterate: This designer added $7,000 of cost to the project in order to save $50… Let that sink in for a few minutes.

The worst part about all these (stupid) hardware decisions is that the underlying decision which defines them is always along the lines of R&D being a sunk cost, while BOM cost is applied to each unit from now until infinity.

Using that line of thought, it’s easy to see how a lot of hype-centric types can be swayed with reasoning such as: If we just pay an extra $30k now, we could save millions when our volume shoots up in a few years. The problem is that this is complete BS.

Component pricing is all about volume and purchasing power, and regardless of what you hear and are told, it is VERY fluid and flexible.

When you see component pricing online, that’s almost like a car’s MSRP. When people buy at that price, the sellers look at them like they’re a bunch of suckers. It’s a ‘suggestion’ of how much they would like to sell it for to meet some amount of profit on top of the baseline profit they will already make.

If you’re paying $2 for an MCU at 1,000 units, then when you scale and grow – that price should drop substantially. Maybe you’re paying even $1 at 10,000 units? Or, find a CM/distributor in China and they’ll get it for you at $1 to begin with, at any volume you want… “China pricing” is a real thing people.

Just to give a real life indication of how ridiculous component pricing can be… Several years ago at one of my startups, I needed to price out the electronics for our product for the sake of figuring out cash flow, investments, burn rates, etc… I decided to give it to a major components distributor to price the whole thing at 1,000 units (note: generally, avoid this at all cost – because some unscrupulous distributors will “register” your company with the manufacturers which locks in pricing and makes changing it a pain – I was okay because I had a trump card).

The pricing came in high (unsurprisingly), but I already knew that I was using the quote as an upper watermark as to what this could cost in the worst case (basically, one step below just buying everything from DigiKey). However, knowing there was no way I would pay this, I then gave the BOM to my CM (contract manufacturer) to price the whole thing…

After talking to THE SAME distributor, the CM’s quote came back 66% lower than we had been quoted. Identical components, identical volume. The thing that changed was the purchasing power of the negotiator. My startup had no history, no volume, basically just walking around with our pockets out and vague promises of growth… The CM, however, did a substantial amount of business with the distributor, and was able to bring the cost down by 66% which included whatever profit the CM made in the component sale to us…

Interestingly, that CM quote even came in about 10% lower than I thought our best-case was at that volume, which was a pleasant surprise.

The point here is, when that distributor quoted the same thing to me, they gave me all of their “best price” drivel and how “no one can beat this pricing” and blah blah. It was seriously like negotiating with a used car salesman. Then my CM came in, walked all over the distributor, and I came out the winner…

And because they deserved it (also to be a bit of an ass), the next time I met with the distributor, I compared their original “best price” quote with the one we were now going with and had them uncomfortably explain why there was a 66% discrepancy between them. I also informed them that they shouldn’t fleece startups – because their excessive pricing is half the reason so many local startups want to build in China rather than locally. If you can save 50-70% on a product offshore, why would you build locally?

So, this post went off the rails a bit – but to summarize in one sentence: “Total product cost doesn’t equal BOM cost, and everything is negotiable.”|||

"Total product cost doesn't equal BOM cost, and everything is negotiable." - This rant-like post about electronics pricing summarized in one simple sentence