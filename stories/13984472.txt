clojure-turtle is a Clojure library that implements the Logo programming language in a Clojure context. Quil is used for rendering.

Logo is a simple language that is useful in introducing programming to beginners, especially young ones. Logo also happens to be a dialect of Lisp. clojure-turtle tries to maintain those beneficial aspects of Logo while using Clojure and Clojure syntax. The goal is to make learning programming and/or Clojure easier by disguising powerful concepts with fun!

If you are using Maven, add the following repository definition to your :

Second, run a REPL session that has clojure-turtle loaded inside it. This can be done in a couple of ways:

The symbol is overridden to behave more like the Logo function, but the Clojure core function is still available as .

Now load a new window that shows our Quil sketch using the form. The sketch is where our turtle lives and operates.

It's , , , and as in Logo. Go forward and back by a length (in pixels). Right and left turn the turtle by an angle, in degrees. It's Clojure syntax, so 'executing commands' (function calls) are done within parentheses.

is like the Logo function, or like Clojure's . Going from the Logo syntax to clojure-turtle's syntax for , commands that are being repeated are put within parentheses notation. The square brackets that group the repeated commands are replaced with . The equivalent of the Logo would be

Let's see how we can simplify this.

As you just saw above, we can take the instructions that we pass into , give them a single name, and refer to that name to get the same effect.

So given a named set of instructions, we can invoke the instructions by putting the name in parentheses just like we do for functions like , , and

The turtle has a pen that it drags along where it goes, creating a drawing. We can pick the pen up and put the pen down when we need to draw unconnected lines. also teleports the turtle without drawing. turns the turtle in an exact direction.

erases all drawing. brings the turtle to its original position and direction.

Color can be set for the turtle. A color is specified by a vector of size 1, 3, or 4.

A three-element color vector has 3 integers for the red, green, and blue components of the color (in that order) in the range 0 - 255. (See this page for examples of specifying color in terms of RGB values.)

The turtle sprite (the triangle representing the turtle) will be drawn in the same color as the turtle's pen.

We can also use our color value to fill the interior of shapes that we draw. To draw shapes will a fill color, we first have to indicate when we start and when we end drawing the shape. For that, we use the and commands. Every line segment that the turtle draws in between and is assumed to form the perimeter of the shape.

Let us define as the combination of commands to draw a filled octagon. In between the and that demarcate our fill shape, we will use our function to draw the perimeter of the octagon that we want filled.

If a four-element color vector is given for a color, then the 4th value is known as the "alpha" value. In clojure-turtle, the alpha value is also an integer that ranges from 0 to 255. The value 0 represents full transparency, and 255 represents full opacity.

We will want to draw 4 octagons that overlap, so we will create a vector of 4 x,y-coordinates from which we will start drawing each octagon.

For now, let's retrieve only the first of the four points, set our position to that first point, and then draw our first octagon from there.

Next, we will draw our the remaining 3 octagons. Since we will perform similar actions in repetition, let's create a function to store the behavior we want to repeat.

Given a point in the form , the function will draw a filled octagon starting at (x,y). We label the positions (indices) of a vector starting from 0, so the 1st element is as position 0, the 3rd element is at position 2, and the 4th element is at position 3.

A color vector of size 1 creates a grayscale color ranging from black to white. The grayscale color is equivalent to using a 3-element RGB color vector where the values for red, green, and blue are the same.

We can use to make the turtle pause. The number passed to wait indicates how many milliseconds the turtle should wait (1 millisecond = 0.001 seconds = 1 / 1000 seconds).

Computers today are fast. If we use to slow them down, we can watch the turtle move and perceive motion.

What happens when you combine with ? If we repeatedly draw, wait, and clean images in a loop, we can create the effect of motion! See the Animation page for more information and examples.

clojure-turtle uses Quil, which uses Processing. clojure-turtle also has the full power and fun of Clojure available to it, too.

What do you get when you enter the following?

What possibilities exist when you incorporate the full power of Clojure? What can you create?

The same codebase in can be compiled to JS and used in a JS runtime in addition to JVM bytecode. A demo of the JS version can be executed by first running the command:

Where the output may look like:

Then, in your browser, visit the URL in the terminal output from the command -- in this example, it is http://localhost:3449. You will see a webpage load with the Quil canvas containing the turtle. Back in your terminal, Figwheel will load a ClojureScript REPL that is connected to the webpage (more precisely, the browser REPL running in the webpage). In the ClojureScript REPL, run:

Now, the above Logo/ commands can be issued in the CLJS REPL as described above, with the result visible in the Figwheel-connected browser page.

Join the clojure-turtle mailing list to post questions and receive announcements.

Interested in contributing code to the project? We would love to have your help!

Before you can contribute, you should first read the page on contributing and agree to the Contributor License Agreement. Signing the CLA can be done online and is fast. This is a one-time process.

Thereafter, contributions can be initiated through a pull request.

This is not an official Google product (experimental or otherwise), it is just code that happens to be owned by Google.

Quil is distributed under the Eclipse Public License either version 1.0 (or at your option) any later version.

The official Processing.org's jars, used as dependencies of Quil, are distributed under LGPL and their code can be found on http://processing.org/|||

clojure-turtle - A Clojure library that implements the Logo programming language in a Clojure context