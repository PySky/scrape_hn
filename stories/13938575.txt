In this article, we will implement Ternary Search algorithm and compare its performance with Binary Search.

In Ternary Search, we divide our array into three parts (by taking two mid) and discard one-third or two-third of our search space at each iteration. So at first look it seems that ternary search might be faster than binary search as itsÂ time complexity should lie between and which is less than time complexity of binary search . Before we analyze the claim, letâ€™s take a look at is C++ implementation first.

Output: 

 

 Â 

 As we can see, at each iteration ternary search makes atmost 4 comparisons as compared to binary search which only makes 2 comparisons. So,

By applying simple mathematics, we can establish that the time taken by Ternary search is equal to times the time taken Binary search algorithm.

Now sinceÂ  ,Â we actually get more comparisons with ternary search.

So a ternary search will still gives the same asymptotic complexity search time but adds complexity to the implementation.Â The same argument is valid forÂ a quaternary search or k-nary search for any other higher order.

As pointed out by Oriba Desu in comments below, Ternary search can be used to find extremum (minimum or maximum) of a unimodal function.

Please use ideoneÂ orÂ C++ ShellÂ or any other online compiler link to post code in comments.

 Like us? Please spread the word and help us grow. Happy coding ðŸ™‚

|||

In this article, we will implement Ternary Search algorithm and compare its performance with Binary Search. In Ternary Search, we divide our array into...