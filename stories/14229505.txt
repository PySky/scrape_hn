I recently found myself needing to return early from a block passed into a method in Ruby. Although the way to do this is fairly simple and obvious in hindsight, it seemed to surprise some of my Ruby-enthusiast colleagues. I decided to write this post in the hopes that it’s interesting to others.

I was writing a one-off script to import into our system. If an error occurred processing a particular item, I wanted to return back some error information that could be stored for later analysis, then skip to the next row. My code looked something like this:

As most Ruby programmers understand, an attempt to use to abort the inner block will result in control immediately flowing back to wherever was called. This is decidedly not the behavior that is desired here. Instead, I needed a local return.

Ruby has a keyword, , that is often documented and discussed in the context of iterators. Here’s an example of its usage:

This example would skip any widgets that happen to be broken, but otherwise choose the first one whose name matches. Although there are better ways to write this, it illustrates the function of : it’ll short-circuit the block and return control flow to the detect method.

I wondered if could be provided a value, and if it could also be used outside of the context of an enumerable or iterator. Some quick experimenting found that the answer to both questions is yes.

In my first example, above, the error handling ended up looking like this:

If you’re curious, here’s a snippet that nicely illustrates the behavior of vs. :

We can now recognize for what it is: a block-local return keyword.|||

I recently found myself needing to return early from a block passed into a method in Ruby. The way to do this is fairly simple and obvious in hindsight.