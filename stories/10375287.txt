You may think that this is just yet an other charting library. But Chartist.js is the product of a community that was disappointed about the abilities provided by other charting libraries. Of course there are hundreds of other great charting libraries but after using them there were always tweaks you would have wished for that were not included.

The following facts should give you an overview why to choose Chartists as your front-end chart generator:

These projects and wrapper libraries are known to me right now that either use Chartist.js or wrap them into a library for usage in a framework. If you know other projects that use Chartist.js please let us know or make a pull request for this file.

Note that CSS3 animations on SVG CSS attributes are not supported on all browsers and the appearance may vary. Specifying the style of your chart in CSS is not only cleaner but also enables you to use awesome CSS animations and transitions to be applied to your SVG elements!

/* Add a basic data series with six labels and values */ var data = { labels: ['1', '2', '3', '4', '5', '6'], series: [ { data: [1, 2, 3, 5, 8, 13] } ] }; /* Set some base options (settings will override the default settings in Chartist.js *see default settings*). We are adding a basic label interpolation function for the xAxis labels. */ var options = { axisX: { labelInterpolationFnc: function(value) { return 'Calendar Week ' + value; } } }; /* Now we can specify multiple responsive settings that will override the base settings based on order and if the media queries match. In this example we are changing the visibility of dots and lines as well as use different label interpolations for space reasons. */ var responsiveOptions = [ ['screen and (min-width: 641px) and (max-width: 1024px)', { showPoint: false, axisX: { labelInterpolationFnc: function(value) { return 'Week ' + value; } } }], ['screen and (max-width: 640px)', { showLine: false, axisX: { labelInterpolationFnc: function(value) { return 'W' + value; } } }] ]; /* Initialize the chart with the above settings */ new Chartist.Line('#my-chart', data, options, responsiveOptions); Configuring different chart behavior for various media is made simple with an override mechanism. The priority of the override mechanism is based on order of specification of the matching media queries. For IE9 you need to use a matchMedia polyfill. You should take a look at Paul Irish's matchMedia polyfill With the clear separation of concerns within Chartist.js, you're able to style your charts with CSS in @media queries. However, sometimes you also need to conditionally control the behavior of your charts. For this purpose, Chartist.js provides you with a simple configuration override mechanism based on media queries.|||

Create responsive, scalable and good looking charts with chartist.js.