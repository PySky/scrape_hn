This blog post explains how to use ES6 Proxies to intercept method calls to an object.

Read chapter “Meta programming with proxies” in “Exploring ES6” for more information on Proxies.

You can intercept the operation (getting property values) via a proxy and you can intercept the operation (calling a function), but there is no single operation for method calls that you could intercept. That’s because method calls are viewed as two separate operations: First a to retrieve a function, then an to call that function.

If you want to intercept method calls, you must therefore intercept and return a function that intercepts the function call. The following code (which works in Firefox) demonstrates how that is done.

I’m not using a Proxy for the latter task, I’m simply wrapping the original method with a function.

Let’s use the following object to try out :

is a traced version of . The first line after each method call is the output of , the second line is the result of the method call.

The nice thing is that even the call that is made inside is traced. That’s because keeps referring to the proxy.

This is not a very efficient solution. One could, for example, cache methods. Furthermore, Proxies themselves have an impact on performance.|||

