Want to customize the various linters Stickler CI uses? This page contains reference documentation on how to customize each of the tools that Stickler offers.

If you're still looking for answers, please tweet us @sticklerci or email us at support@stickler-ci.com.

Stickler CI is configured through a file in your repository. This file controls which linters are enabled and what their options are.

Put your file in the root directory of your project. An example file is

In this example we've enabled , , and . We are using a custom config file for jscs, and have ignored all files in and .

In addition to configuring specific linters, you can also configure how Stickler CI inspects your code:

An example of the above config options would be:

The above would not review any pull requests against the or branches, and also ignore any in and all files in .

A number of languages have de-facto linters in use. To save you having to always enable these linters, Stickler CI provides a base configuration file for every repository. The default configuration enables , , , and . It also ignores files in , , and .

If you want to disable one of the default linters, you can do so using the attribute:

The above would disable the linter which is enabled by default.

Check bash, zsh and sh scripts with shellcheck for lint and common mistakes.

Both warnings and errors will be turned into code review comments. If you don't want code review comments for specific rules, you should ignore them via the option.

Check Javascript with JSCS. If you don't supply a config file or a preset, the default JSCS rules will be used.

Check Javascript code with jshint. If you don't supply a config file the jshint defaults will be used.

Check Javascript, and JSX code with eslint. In addition to the core ESLint rules, we also provide popular modules for React and Ember.js

To get started linting React applications, you can use the following ESLint configuration:

To start linting Ember.js projects, you can use the following ESLint configuration:

If there is a preset you'd like to see support for drop us a line.

Use StandardJs to check Javascript. Standard offers easy to use style rules with no configuration to manage.

Check PHP, Javascript and or CSS code with phpcs.

Check puppet manifests with puppet-lint, against the puppetlabs style guide. files will be respected, to allow each project to disable checks. A list of checks can be found by running locally.

files will be respected, as described here.

Check typescript code with tslint. You need to include a configuration file in your project or use the option to provide a path to a config file.

Check YAML files with yamllint. This is handy to examine confiugration files for many tools, and heira data in puppet.

Please tweet at us @sticklerci or email us at support@stickler-ci.com and we will help you out.|||

