Waits for the value of , limited by the resolution of . Throws an Error if finishes first or if either throws early. If is a number, limits by time in milliseconds milliseconds or promise to limit by milliseconds or promise to limit by :

Calls a function that takes arguments and an callback. Waits for the callback result, throwing an Error if err is truthy. : the result passed to the callback

Wraps a node style function (see ) into a new function, which instead of taking a callback function, returns an async function ( ). This resolves if the first (error) argument of the callback was called with a falsy value, rejects with the error otherwise. Takes the rest of the arguments as the original function . :

Waits for the first Promises in to resolve. number of promises to wait for number of promises to wait for :

Waits for all Promises in to resolve. Like with the option to ignore some (or all) rejections. : promised results in order

Passes each item in to the Promise-returning function , running at most simultaneous promises. For cases where starting all Promises simultaneously is infeasible, such as making a large number of requests to a server with rate-limiting. items to pass to each promise items to pass to each promise

Waits for to resolve or reject. Returns either the resolved value, or the Error object. : the result or error

Provides a stack trace for unhandled rejections instead of the default message string. and can be called multiple times but will only attach a single listener. :

This is an anti-pattern, but if you depend on a module that doesn't handle all of its rejections, you'll get a lot of really annoying logs in current versions of node. will allow you to suppress them. and can be called multiple times but will only attach a single listener. :|||

