Why should you consider using API Star for your next Web API project?

API Star allows you to dynamically inject various information about the incoming request into your views using type annotation.

Some of the components you might use most often:

By default API star expects view to return plain data, and will return responses.

You can instead set the status code or headers by annotating the view as returning a .

Use in your URL conf to include a URL path parameter.

Use type annotation on the view method to include typed URL path parameters.

Parameters which do not correspond to a URL path parameter will be treated as query parameters for and requests, or part of the request body for , , and requests.

API Star comes with a type system that allows you to express constraints on the expected inputs and outputs of your interface.

Here’s a quick example of what the schema type system in API Star looks like:

The main benefit of expressing our data constraints in a type system is that we can then use those types as annotations on our handler functions.

In addition to using the schema types for input validation, you can also use them to serialize the return values of your handler functions.

The following schema types are currently supported:

Validates string input, against a list of valid choices. A subclass of .

Note that child properties are considered to be required if they do not have a value.

API Star is designed to be able to map well onto API description formats, known as "API Schemas".

There is currently provisional support for writing Swagger, RAML, or CoreJSON schemas. See #69 for more details on work still to be done here.

The default output format is the built-in CoreJSON support:

The OpenAPI (Swagger) and RAML codecs are optional, and require installation of additional packages:

Although API Star is designed primarily with Web APIs in mind, it is a general purpose framework, and does also give you the tools you need to build regular websites.

API Star includes a templating component, that allows you to return templated responses, using Jinja2.

You can also use the component to inject a single template instance as a view argument:

This will default to attempting to locate , based on the argument name of .

Returning a string response from a view will default to using the content type. You can override this by returning a , including an explicit header.

First make sure to install the package.

Next, you'll then need to include the handler in your routes. This function expects to take a single URL argument, named .

Finally, include the directory that you'd like to serve static files from in your settings, like so:

Application settings are configured at the point of instantiating the app.

You can include the application settings in a view, by using the type annotation:

More typically you'll want to include settings into the method of custom components, so that you can control their initialization, based on the application settings.

Typically you'll want to follow the "twelve-factor app" pattern and store configuration variables in the environment, rather than keeping them under source control.

API Star provides an class that allows you to load the environment, and ensure that it is correctly configured.

Once you have an instance, you can use it when creating the application settings.

API Star has optional support for SQLAlchemy. To use this you first need to install and your chosen database driver.

You then need to add the database config to your settings:

A few common configurations are listed below.

Before starting you app you will likely need to create the database tables declared in your MetaData which you can do with the following command:

To access the database in your view, include the component. This has the following attributes:

API Star includes the testing framework. You can run all tests in a module or a directory, by using the following command:

The simplest way to test a view is to call it directly.

There is also a test client, that allows you to make HTTP requests directly to your application, using the library.

Requests made using the test client may use either relative URLs, or absolute URLs. In either case, all requests will be directed at your application, rather than making external requests.

You can create new components to inject into your views, by declaring a class with a method. For instance:

You can then use your component in a view:

A complete listing of the available built-in components:

Because API views are so dynamic, they'll even let you drop right down to returning a WSGI response directly:

You can also inject the WSGI environment into your view arguments:

API Star dynamically determines exactly what does and does not need to run for any given view, based on the annotations it includes. This means that it can be incredibly efficient.

For a simple JSON serialization test case, the TechEmpower benchmarks rank API Star as achieving the highest throughput of any Python, JavaScript, Ruby, or Go framework.

We're also able to replicate similar results locally. The following results were obtained on a 2013 MacBook Air, against the same JSON serialization test case.

API Star optionally supports the package for improvements in serialization performance. Currently will automatically be used if the package is installed.

It's worth noting that other types of test case would give different results. In particular, API Star would likely lose out to asynchronous frameworks once database access or other blocking operations are included in the test case.

We'll be working towards adding further test case types to the TechEmpower benchmarks in the coming weeks, and are also planning to add support for an asynchronous deployment mode.

Its also important to recognize that raw latency or throughput numbers are typically not the most important factor to take into consideration when choosing a framework. Having said that, our aim is for API Star to hit the sweet spot for both performance and for productivity.

A development server is available, using the command:

The recommended production deployment is Gunicorn, using the Meinheld worker.

Typically you'll want to run as many workers as you have CPU cores on the server.

API Star can also be deployed on so called "serverless" platforms. A good option for using API Star with this style of deployment is Zappa, which allows you to deploy any Python WSGI server onto AWS Lambda.

In order to use , you'll need to expose the app.wsgi property to the top level of the module.

You should then follow Zappa's installation instructions.

Your configuration file should look something like this:

To work on the API Star codebase, you'll want to clone the repository, and create a Python virtualenv with the project requirements installed:

To run the continuous integration tests and code linting:|||

apistar - A smart Web API framework, designed for Python 3. ⚡️