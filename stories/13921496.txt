Last week Steven Deobald asked on Twitter how to do configuration in Clojure:

In this post I'll tell you how we do it at Metosin. We've build a few web applications with a Clojure backend and a ClojureScript frontend. While there's no Metosin architecture carved in stone, some recurring patterns have emerged. Usually we structure the backend with either Component or Mount. The applications are deployed to virtual servers as uberjars using Ansible. To store the configuration, we use EDN files and we load them using Maailma.

We have two configuration files:

We load the configuration with code like this:

Maailma does a deep merge of the configuration maps, which makes overriding the defaults easy. For example, we might have a feature flag for enabling development tools in the application. We then want to disable them in the production environment. The configuration files could look like this:

If needed, you can overwrite the defaults for local development by creating a file. Sometimes we also maintain an extra configuration file for the locally-run integration tests.

With Component, we pass the configuration to the parts of the system when creating them. If needed, the configuration can be also made a part of the system map:

The configuration gets reloaded when you restart the system.

When using Mount, we create a state to contain the configuration

The other states can then use the configure by requiring it:

To reload the configuration files, restart the state. I usually reload the whole config namespace in my editor, which makes Mount restart the state.

Configuration is not a one-size-fits-all affair and Maailma is not the only thing out there. For another take on EDN configuration files, take a look at the aero library. If you prefer to store the configuration in environmental variables – like Heroku recommends – see environ.|||

We've build a few Clojure web apps at Metosin and this is how we configure them.