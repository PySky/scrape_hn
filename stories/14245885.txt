The Sqlizer API is a simple REST interface which gives you programmatic access to our file conversion algorithm.

The processes of converting a file with the API follows four steps:

All requests made to the API need include a HTTP Authorization header with your API key so we can identify who you are.

This key can be regenerated on the account page.

A file conversion can be initiated with a POST request to and later accessed and updated at the endpoint .

Below are some sample POST requests to initiate the different types of file conversion using curl.

If the request is successful the server will respond with a HTTP 200 code and a JSON representation of the file conversion. The ID field is especially important as it is used in the url of all future requests for this file conversion. Below is an example of the JSON that might be returned by the API. Once you have a file ID you can begin uploading your file data by sending POST requests to . The Sqlizer API allows you to upload your data in a single request or multiple requests. The latter is achieved by splitting the file into parts and sending each individually. Most files can be uploaded in a single request but if your file is larger than 100Mb or you have an unreliable connection an upload in multiple parts is recommended. To submit your file in a single request the file should be encoded in a multipart form with the parameter name 'file' and sent to as a POST request. Once you have finished uploading your file you will need to finalise the upload. To submit your file in a multiple parts you will first need to split the file into parts. Each part with exception of the last part must be at least 5Mb (5,242,880 bytes) but must be no more than 10,000,000 bytes. The final part must be no more than 10,000,000 bytes. A simple way to partition your file is to use the unix command. The following unix command will take your file and convert it to 5Mb parts named: Part_01, Part_02,... Once you have partitioned your file into parts each part can be separately sent as a POST request to encoded as a multipart form with parameter name 'file'. The multipart form also needs a second parameter 'PartNumber' to indicate the part's order within the file. The first part should be given PartNumber = 1. You can check whether an individual part has been uploading with a GET request to . The API will respond with a HTTP 200 code if the part was successfully uploaded and a HTTP 404 code if the part has not yet been successfully uploaded. Once you have finished uploading all the file parts you will need to finalise the upload. Once you have finished uploading your file the upload process needs to be finalised with a PUT request to to set the Status to 'Updated'. Once your file upload is finalised it will be placed in a queue for processing. You can check on its progress with a GET request to . Below you can find some sample responses for the different statuses the file conversion process can be in. // File currently being analysed. {     "ID": "7EVHQlVpq6YrRGLxNyjJdZ-b7DN3hcKpbqwK215IyPpE8ZeddSK4GVe_q0LNdCZnNCwOi1ewyTSEVMy6rkpi8g==",     "DatabaseType": "MySQL",     "Status": "Analysing",     "PercentComplete": 32, // This property may not exist for all file conversion types     "FileType": "xlsx",     "FileName": "file.xlsx",     "TableName": "table_name",     "FileHasHeaders": true,     "SheetName": "Sheet1",     "CellRange": "A1:F100", } // File currently being converted into a database script. {     "ID": "7EVHQlVpq6YrRGLxNyjJdZ-b7DN3hcKpbqwK215IyPpE8ZeddSK4GVe_q0LNdCZnNCwOi1ewyTSEVMy6rkpi8g==",     "DatabaseType": "MySQL",     "Status": "Processing",     "PercentComplete": 57, // This property may no exist for all file conversion types     "FileType": "xlsx",     "FileName": "file.xlsx",     "TableName": "table_name",     "FileHasHeaders": true,     "SheetName": "Sheet1",     "CellRange": "A1:F100", } // File has been successfully converted into a database script. {     "ID": "7EVHQlVpq6YrRGLxNyjJdZ-b7DN3hcKpbqwK215IyPpE8ZeddSK4GVe_q0LNdCZnNCwOi1ewyTSEVMy6rkpi8g==",     "DatabaseType": "MySQL",     "Status": "Complete",     "ResultUrl": "https://example.com/result.sql", // This property links to the completed database script     "ResultRows": 4500, // This lists the number of results in the completed database scripts     "FileType": "xlsx",     "FileName": "file.xlsx",     "TableName": "table_name",     "FileHasHeaders": true,     "SheetName": "Sheet1",     "CellRange": "A1:F100", } // The file conversion has failed for some reason. {     "ID": "7EVHQlVpq6YrRGLxNyjJdZ-b7DN3hcKpbqwK215IyPpE8ZeddSK4GVe_q0LNdCZnNCwOi1ewyTSEVMy6rkpi8g==",     "DatabaseType": "MySQL",     "Status": "Failed",     "Message": "We couldn't find a worksheet named 'Sheet1'.", // Reason for failure     "FileType": "xlsx",     "FileName": "file.xlsx",     "TableName": "table_name",     "FileHasHeaders": true,     "SheetName": "Sheet1",     "CellRange": "A1:F100", } Once the file conversion process is complete you can download the converted file from the url specified in the returned ResultUrl parameter.|||

Convert Files into Databases with Ease