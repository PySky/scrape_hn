Why would you really want to develop a mobile application with Qt, given the fact that there are probably more mature and definitely more popular crossplatforms out there? That was basically the question I was asking myself when I started working on gympulsr 9 months ago. As gympulsr is just a hobby project of mine, it was clear for me from the beginning that such a project only works when going the crossplatform way. Although I have never developed a native application, I can easily imagine that a native implementation has a lot of advantages, but I knew that with my limited time only a crossplatform approach would get me results in a reasonable amount of time.

Choosing a crossplatform framework isn’t an easy decision. It’s even more difficult when your time is limited, because at the time you realize that your chosen framework wasn’t the best suitable for the task you are usually so far into the project that you can’t switch to a different anymore without throwing away most of your codebase. I am not saying that the framework decides about success or failure of the project, but especially when the time is limited, you really want to use a framework that’s stable, mature (and feature rich). So how well does Qt score?

To be honest, Qt wasn’t the first on my list. That was mostly because I couldn’t find any apps in the app store that were built with Qt. (in my personal opinion that changed significantly in the last few months, as more and more developers are using Qt for mobile applications). For me this was a huge disadvantage back then, as I like to play with applications to get a feeling for the framework and “to see what’s possible”. So why did I end up with Qt?

Exposing C++ to QML Above I mentioned that I was looking for a framework for a statically typed language. Strictly speaking Qt doesn’t completely fit that requirement (at least not when you want to use QML). 



QML is a declarative language that makes it easy to build beautiful looking UIs. I haven’t worked with any other declarative UI language, so the following is again purely subjective, but after spending a lot of time writing QML files I can’t think of anything that I am missing. Probably the nicest thing about Qt is, that you can implement (time critical) stuff in C++ and expose the objects to QML. It took me a while until to realize it’s full potential, but now I won’t miss it anymore. Community A framwork is only as good as the community that’s build around it. If nobody is using the software, you will have a really hard time trying to find help when you are stuck. Unfortunately that’s something Qt is lacking a bit. Although Qt has an official forum and several mailing lists, I sometimes found it difficult to get help. I don’t blame the community for that, as they are all very helpful and friendly, but I think it’s more due to the fact that Qt is tackling different sectors (desktop, IoT, automotive, embedded, mobile…) and establishing a broad user base in each of those sectors is really tough. feature-richness Nevertheless how feature-rich a framework is, at some point you probably have to roll up your sleeves and do the low-level dirty work to implement something that isn’t already covered by the framework. Sure there are some things I would have wished that they would be covered by Qt out of the box (e.q push notification handling), but all in all I have to say that I was pretty impressed with all the stuff that’s already built and greatly covered by Qt. Especially starting with Qt 5.6/5.7 the mobile part of Qt made some huge steps forward. QtQuick Compiler Qt Quick uses the just in time compilation technique which is great for rapid prototyping. But as the code gets interpreted during runtime complex user interfaces might get a bit slow/sluggish. Qt Quick Compiler eliminates those disadvantages and improves the performance a lot. Unfortunately Qt Quick Compiler is currently only available in the commercial version, but as far as I know that will soon change. Running the app without simulator One of the coolest things about a crossplatform framework like Qt is, that you can test most of your application’s functionality without deploying it to your mobile phone or using a simulator. For me personally that’s a HUGE plus, as it speeds up the development process significantly. No more waiting for the slow simulator to start. Yay!

Would I choose Qt again? Yeah, most probably! Sure, there were some moments I really wished that I would haven chosen a different framework or even took the native road, but those thoughts are normal: the grass is always greener on the other side. Switching to another framework just because something isn’t working out of the box smoothly might be a valid reason, but chances are good that you stumble accross other problems with your shiny new framework.

gympulsr is a fun community for fitness enthusiasts to connect with like minded people around the world. Mark your gym on a map to connect with people that are working out nearby. Post motivating pictures, show people your gym transformation or just write about your last workout.

Wanna give it a try? Download gympulsr from the Apple or Google Play Store and say hello.|||

Qt is great for desktop applications, but I wouldn’t use it for mobile apps– a good friend of mine.