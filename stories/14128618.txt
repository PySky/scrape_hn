An experimental rewrite that puts what i've learnt from the past versions of dio and other projects like react, ivi, preact, inferno, vidom... into a small and rich component api.

For the most part it's done. Clamping on possible obscure edge cases.

See directory for examples that you can play with, or play with it at codesandbox.io/s/48njoRpV1. A few patterns that this allows are as follows.

{ () { (( ) { (() { ( ( , , . ()) ); }, . () ); }) } } with Math.random one child can render/update before the other and vice-versa the update cycle is no longer linear A -> B -> C but can be C -> A -> B or any numebr of variations { () { ( , Foo, Foo ) } }

lifecycles, function refs and callbacks work in a similar fashion to how bound-less events work, the only lifecycles methodes that cannot return new state are and .

Explore low-level platform independent diff engine on Javascript VM's using linear memory representation... think heavy use of typed arrays, pointers and threads(SharedArrayBuffer & Web Workers)

The idea is to have a fixed length typed array that represents instructions and pointers to memory, each instruction encoded in an unsigned ints and each action encoded in a 4, 8 bit ints that could be shared/transfered between Web Workers to allow for parellel work.|||

dio.js - dio is a javascript framework for building applications -