In the following series of posts, I will outline the process of building a command-line tool. The easiest way to master a programming language is by building something tangible — something useful, or something one is passionate about! I have chosen to rewrite (most of) the awesome Engine Yard Ruby gem in Go. If all goes according to plan, the result will be a binary with zero runtime dependencies, easier installation, and hopefully faster deployments.

BY THE WAY… If you need badass dudes with true ops-chops to manage your infrastructure, I recommend trying Engine Yard!

Sign up for a free trial — 500 free hours on one or more instances!

I am assuming you have a fully-functioning local Go environment. Let’s start out by creating a new project in our GOPATH: gitlab.com/voxxit/ey.

Command-line tools usually consist at least one, but usually more than one command — forks of the main program which the user may request by name. It is important to quickly go over a typical Go-based command-line tool’s project structure:

Executable commands in Go must always use package main. This file should be pretty simple: it should define the tool (name, usage, author, etc.) and then branch out tasks to the command package. This may seem familiar, as this is pretty much the way you’d start out a program in C, too!

For each command, we will create a new file with the command name and the .go suffix. For instance, the command “ey deploy” code would live at command/deploy.go.

After typing “go build” a few hundred times, or once you need to support more than one platform, you’ll probably want a Makefile for your Go command-line utility will be a necessity. There are lots of examples for you to get inspiration from. For our tool, though, we’ll keep it simple: it will build our tool for the Mac, Windows & Linux platforms, and run our tests for us.

I cannot name a single Go programmer in the know who would deny this: Jeremy Saenz is truly a “code gangsta!” Soon after I wrote my first CLI tool from scratch using only the flag package (part of the Go standard library) I discovered his awesome cli project on GitHub.

By importing this project into our project, much of the necessary framework we’ll need to get going with our CLI tool is already done.

Use “go get” to fetch this package so we can use it:

Now, we can start writing the main.go file:

Seem a bit too simple? I’ll explain it step-by-step:

As I mentioned before, all command line executables in Go must start from the main package. The presence of the main package will tell the Go compiler that it should compile an executable program instead of a shared library.

import instructs the compiler to pull a package from your workspace into your program. In this case, I’ve imported the github.com/codegangsta/cli library, as well as the os package from the standard library — used to grab the command-line arguments.

By using var outside of the main function, we can create a placeholder for our app variable. This instructs the compiler to allocate enough storage for the variable when it compiles the program.

The main function is the starting point of all Go programs. It is the first function which is executed. In our main function, we initialize a new cli.App instance (using our app variable from before) and define a few of the values of the app. Finally, we call our app instance’s public Run method.

Voilà! You should now be able to run “go build”, then run the freshly-compiled binary to see the following:|||

As a dev/ops engineer, roughly eighty-percent of my time is spent deep within a bowels of various flavors of a Unix shell, calling up a plethora of command-line tools over the course of the day…