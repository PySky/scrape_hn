TLDR: Microservice architecture can be a winning philosophy. But, there are significant engineering challenges around microservice compartmentalization, discovery, and scale. Fly makes building microservices much easier for developers.

Microservice architecture is an alluring proposition. We'll explain what microservice architecture is, balance the lightside and the darkside, dip into the service discovery problem, and then see how Fly fits in.

In order to understand microservices, we must first understand the monolith.

The term monolith describes an application that consists of a singular and robust system. It contains all application and business logic. A monolith is one large, all powerful - perhaps even time-traveling - application deployment.

In contrast to the monolithic approach, we have microservice architecture. Microservices divide an application's structure into bounded contexts. The concept of a bounded context comes from Domain Driven Development.

Domain Driven Development admits that life would be simple if we could build systems using a single, unified, monolithic structure, but concedes to the reality that large scale systems will naturally evolve to contain multiple sub-systems.

When looking at a large-scale system, we can extract bounded context by using verbs and nouns to suss out application function. We might our ; we may a game from our . Our bounded contexts would be: playing games, visiting our library of games, paying for items, and browsing items in our store.

Each of these contexts represents its own microservice: a service that renders and plays our games, a service representing a user's game library, a service to tender user payments, and a service to act as a storefront. A microservice is a compartmentalized and stateless API that performs a task and communicates over simple protocols to other microservices.

Microservice architecture is not a purely technical solution to running large and complex applications. Naturally baked into the development of microservices is a slick way of forming functional "full-stack" teams on top of each microservice. Micro is in name only: these services can still be large and elaborate, yet they will adhere to a consistent set of principles... Like Voltron.

By looking at the core microservice principles, we see benefits emerge...

We touched upon bounded contexts in the introduction - they're at the heart of microservice architecture! Microservices should encapsulate related pieces of business or application logic, which are bound within their functional context.

Communication between services should be done in a common protocol, like HTTP. It's a wise approach to use RESTy verbs: GET, POST, PATCH, DEL, and DELETE; and your communications should be asynchronous. In some cases, you may apply a third-party messaging protocol like Advanced Message Queuing Protocol (AMQP) using RabbitMQ to conduct your infrastructural communications. Microservice architecture is similar to using public APIs, but internal and with additional eccentricity.

Statelessness occurs when each request is independent of the one that came before it. The broadcasting microservice relies on the receiving party to handle any information it does, or does not, receive and does not hold expectations.

Your datastores will still be stateful structures; each service has the flexibility to apply their own source of data storage that best fits their data model. For example, a service may use InfluxDB for time-series data or Redis for blazing-fast key/value storage.

When under a bounded context, each service should be decoupled. When two things are coupled, they rely on one another and work in tandem; stateful connections and request/response communication are coupled methods. A decoupled service is an independent service; stateless microservices and the publish/subscribe communication model can be considered decoupled methods. We want smart and decoupled services that use simple RESTy communication.

As a byproduct of decoupling, great care needs to be taken to not share libraries or establish ingress points between microservices. If the answer to "can this microservice vanish mysteriously without breaking other parts of our application?" is "yes", then you have a well-decoupled microservice.

If one service is unable to communicate, the other services should not get caught up waiting for it to return. Failures should be handled gracefully and should not cripple the entire application. Instead of waiting dozens of seconds for a service to respond, wait milliseconds, then handle the failure.

When it comes time to upgrade components, each service should be capable of upgrading independently. For the same reason, deploys are kept tidy; you don't need to build your entire codebase when releasing new components, only the service receiving adjustments to its code. In a monolithic structure, everyone must build and deploy the same struct; you can get stuck in a queue.

Microservices should be built by a focused team that can complete the full cycle of develop, design, and deploy. Each bounded context has a microservice and each microservice has a team; this is an excellent way to parallelize application development.

A parallelized team is non-blocking; the microservice can receive upgrades without disrupting other teams working in parallel. The team can utilize whichever language, framework, or database that makes the most sense, as long as it best accomplishes the task of the microservice.

This approach promotes autonomy but requires ongoing ownership from the development team; the team is responsible for full-stack development and keeping the microservice's heart beating. In complex monoliths, engineers burn hot needing to store interacting components in their short-term memory.

But, alas! Application development is never easy; for each tantalizing promise, we have a caveat to consider.

The promise of "every team gets their own service" sounds clean, but a significant amount of ongoing work needs to be done to ensure that your services can communicate and scale. While each individual piece may be less complex than a monolithic structure, the "tangled" nature inside a monolith manifests itself outside of microservices.

Any application interface changes need to be communicated to consuming services and you need to consider backwards compatibility when completing major upgrades, lest communicating services become disrupted. In addition, service discovery, scalability, and fault-tolerance become constant concerns for each service instead of a single application.

Once contexts are set, boundaries need to be adhered to.

Adhering to our guiding principles requires an intelligent membrane at the heart of the application known as a service registry. Each service will check-in and register with this membrane; to help with scale it'll know when new services arrive; to help with fault tolerance it'll know when things die; most important, it will keep a running ledger of which services are where, what they send and what they expect to receive.

These registries themselves can fail and keeping them highly available and up-to-date is a tremendous challenge. You may wind up with redundant services, but a single-point of failure within your service registry.

The ability for services to be constructed using the most appropriate language or framework can make it challenging to write uniform testing into your overall architecture. While the benefits of using the 'right tool for the job' may outweigh the burden of complexity, the team needed to confidently maintain polyglot microservice architecture is one of great experience and diverse abilities.

While each service may want to live in independence, we still want to accumulate logs and have uniform monitoring of our services. We may need to reconcile our stateful datastores. We could re-use libraries; this repetitious development raises the computational footprint required to run our application, compared with the overall code-sharing and locally-communicating monolith.

The most sinister hidden complexity appears within user authentication. You will need to establish a sane way of sharing sessions between your various services. You can imagine the overhead that would appear having to re-authenticate every time a request hits a separate service. Or, the engineering required to organize stateless token exchange throughout your infrastructure; the trick is accomplishing this without coupling your applications!

You could create a shared datastore that all your services access, but this would require each service to stay consistent with that datastores' schema. Single Sign-On on each service is a possibility, but each service making outbound SSO authentication calls would become chatty in a hurry. The wisest way to solve this problem and maintain decoupled microservice-y grace would be to create your own authentication service.

While there are things to consider, the approach still deserves enthusiasm. Before we talk about Fly, let's take a look at the lynch pin in our microservice architecture, the service registry.

The service registry is the source of truth; the loom that weaves together your tapestry of microservices. Without a service registry, each of your endpoints would need to know the addressing details of each entity it communicates with. Due to the constantly changing landscape of microservices, this declarative line of thinking isn't aligned with building a decoupled and asynchronous application!

We want each endpoint to focus on its intention. Microservices will rise and fall, so hard-coding identifying information into endpoints is a non-starter. There are two ways we can keep our registry up-to-date:

To keep microservices compact and within their context, using a third-party registry makes the most sense because you don't need to build repetitious service-detection logic into each microservice. In either case, the service registry is an integral part of your infrastructure. If it fails, your application will be in a dire state.

With a handful of stateless services chirping back and forth, stateful data-stores holding data, and a service registry charting everything onto the map, the backend begins to look like a dynamic organism. It is quite complex! We see, too, that no microservice is an island. A degree of coupling is inevitable.

Fret not! There are new tools that can help mitigate the rougher parts of delivering microservice architecture.

Fly is an Application Delivery Network. If your application is an amalgam of woven microservices making up one application, Fly can help with a few major pain-points: authentication, analytics, session management and service discovery. It removes the need for repetitious application logic by applying Middleware to requests as they arrive for load balancing at our network of edge-servers.

To prevent us from missing the forest from the trees, let's take a step back and look at what microservice architecture is trying to accomplish.

A helpful way to do this is to consider a visitor's simplified route:

Our visitor travels via HTTPS to our load balancer. SSL is terminated. Communication resumes in HTTP; their view is then clarified by a UI or front-end service, which receives data by communicating with our web of services. The load balancer, in many cases, can perform service discovery; generally, you would see clients self-register when a load balancer is used.

The load balancer represents a hostname. It is . Each service, depending on how the UI is constructed, is going to live somewhere on that hostname. You would find your API within , your game at , and your store at .

Each microservice represents a functional piece of the overall whole.

With an Application Delivery Network like Fly, each service can be added as its own backend. Each backend can be configured to run on any path.

When a backend is configured, a user adds the Fly Agent, also known as Wormhole, alongside or as a supervisor of their application or microservice. The application or microservice may be containerized blocks within Docker or Kubernetes, or something stand-alone like GitHub pages or Heroku.

Decoupling becomes easier; your services don't even need to be within the same data center. Through Wormhole your backends or microservices are discovered by the Fly load balancing network without hardcoding routes or establishing a primary service registry.

Once you have each service added, your concerns - other than building an enjoyable experience for your users - become service redundancy and managing data between your backends; discovery, load balancing, and repetitive Middleware challenges like authentication and session management are streamlined for you.

In addition to the under-the-hood service-discovery goodness, you can save significant developer time and reduce logic repetition by injecting powerful Middleware into each visitor request.

A prime example of how valuable Middleware can be is the microservice challenge of handling authentication with session-aware routing. When a visitor hits a Fly edge-server, Middleware can be configured to provide a client-side token before reaching any service, abstracting authentication into a single, manageable layer. After Middleware authentication, an internal session ID token can used to represent a visitor as they explore from service-to-service.

You can also use Middleware for page transformation. Assemble a consistent view for the client to render by accumulating data from your backends and services without sharing UI-related libraries across multiple services.

Another neat example of Middleware-y might comes from GeoIP header information. Once enabled, the Middleware populates the following information from the visitors' DNS and places it within HTTP headers:

You can route requests to specific services based on this information; do you have a store for international users and a store for local users? Simply route them to the optimal location.

Microservice architecture is a fantastic approach. It's different and - in increases cases - more appropriate for at-scale application development than the monolith. The magic lies within the Moore's Law abiding team-building philosophy that comes part-and-parcel with the technical logic; microservices are a clever and unique way of scaling a team alongside an application.

In a few clicks, Fly gives you a global, application aware load balancer that leverages powerful Middleware to handle repetitive microservice development tasks. On top of that, Fly will help you discover and organize your services while keeping all of your upstream routing encrypted via HTTPS.

If you're looking to assemble separate, contextualized microservices into one harmonious application, we have the tools to help. You can focus on the features that you want to build and not on how you're going to duct-tape everything together.|||

