Protocol Buffers by Google are a great mechanism for serializing (and deserializing) structured data in a very fast and efficient way. Protobuf-net is Marc Gravell’s port of Protocol Buffers for the .NET ecosystem.

While being very efficient, protobuf-net has a big issue when deserializing .NET’s s. Behind the scenes s are converted into Unix-Time which is a count (of ticks in this case) starting from the Unix Epoch (1970/01/01 ). When deserializing back to .NET protobuf-net adds that count to a representing the Epoch-Time resulting in the correct value. The issue with this process is that it loses the ’s original .

is an enum telling whether the ’s value represents a local time, time or unspecified. That value isn’t serialized by protobuf-net so all s, be they local time or , are deserialized as .

values have a behavior that I initially found surprising but later realized is the best possible option. Let’s assume you’re in Hawaii (because where else would you want to be?) and your time zone is -10:00. If you have a value with and you call the method assumes the value is in and “corrects” it, so 11:00 becomes 01:00. If however you call on that value the method now assumes it’s in local time and “corrects” it so 11:00 becomes 21:00. So the same value is treated as local while adjusting to universal and universal when adjusting to local. Let’s see that in code:

This can get extremely problematic especially if you, like me, depend upon some library that uses or . For me that library was the .NET’s MongoDB Driver that stores all s in MongoDB in . Using these 2 libraries together is impossible as values would keep changing value infinitely.

I have posted on the protobuf-net repository on github explaining this and managed to convince him to fix this problem (which he did with this commit). However, this fix was made 5 months prior to me writing this post and there’s still isn’t a new release including the fix (the latest stable release is from 2013/09/30).

But don’t fear… I do have a workaround you can use for the meantime. Protobuf-net uses a value representing the Unix Epoch (1970/01/01) to create all the s by adding the relevant delta to the epoch value. Since creating a new from an existing preserves the , replacing the single epoch value with a one will result with all protobuf-net values having . We can do that by using reflection and replacing the epoch value with a one:

I admit it’s not pretty, but until Marc releases a new version, it’s preferable to building your own protobuf-net.|||

Protobuf-net loses DateTime.Kind when deserializing which can mess with your DateTime values.