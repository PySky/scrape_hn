Until Java 7, implementations always suffered with the problem of Hash Collision, i.e. when multiple   values end up in the same bucket, values are placed in a Linked List implementation, which reduces Hashmap performance from O(1) to O(n).

Improve the performance of   under high hash-collision conditions by using balanced trees rather than linked lists to store map entries.This will improve collision performance for any key type that implements  .

This JDK 8 change applies only to ,  , and  .

 The principal idea is that once the number of items in a hash bucket grows beyond a certain threshold ( ), that bucket will switch from using a linked list of entries to a balanced tree. In the case of high hash collisions, this will improve worst-case performance from O(n) to O(log n), and when they become too small (due to removal or resizing) they are converted back to Linked List.

Also note that in rare situations, this change could introduce a change to the iteration order of   and  . A particular iteration order is not specified for   objects – any code that depends on iteration order should be fixed.|||

Java 8 came with many tweaks and updates, including Hashmap performance improvements. See what issues Java 8 fixed.