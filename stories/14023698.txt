Suddenly, it looks like everybody is talking about learning to code. As someone who started learning to code a long time ago, I find this trend fascinating.

Just to give a couple of examples, Jeff Immelt, chair and CEO at GE, has said that all new GE employees "are going to learn to code", and Emelie Fagelstedt, a public relations professional, has pointed out 5 reasons "why everyone needs to learn how to code" (for an even more recent example please see Hayley Yudelman's post on the Built with Watson blog). Jeff and Emelie are two professionals with very different profiles and experiences, but they both essentially believe that "everyone needs to learn how to code".

Do their readers agree? As expected, both articles have developed into a healthy debate. While most people would agree, professional programmers openly disagree. They point out that coding is just a part of what programmers do, and that coding, in practice, is a moving target that requires a commitment to lifelong learning.

Their message is quite clear: professional programming is demanding and might not be for everyone. However, code design relies on some principles -- composition, pattern recognition, abstraction, algorithmic thinking -- that could, indeed, be taught to anyone. Once learned, they could be applied to almost any task involving planning, analysis or design, regardless of context. This sounds quite interesting, but can those principles be effectively learned through coding as it is practiced today?

Bret Victor, an accomplished designer and programmer, explored the subject of what it means to learn to code in his 2012 article Learnable Programming. He developed his article around two assumptions: "programming is a way of thinking", not a skill learned by repetition, and "people understand what they can see". I'll focus on the second assumption as it is, by far, the one that has the most significant impact on the beginner's learning process.

As a teacher and instructor, I've used myself a number of educational programming environments -- BlueJ, Greenfoot, Processing -- to help my students advance their knowledge through the best possible learning experience. Even though all these amazing, beginner-friendly programming environments do offer visual feedback to the learner, none fully delivers the level of support recommended by Bret. This gap is probably due to the fact that Bret's extraordinary designs would demand too many hours of development to be implemented as an educational programming environment.

Why is visual feedback important? To put it quite simply, without visual hints beginners will hardly understand what's going on with their code when trying, and not succeeding, to execute it. Let it happen too many times and frustration will be inevitable: even if the code eventually works they will feel lost and discouraged.

So I wonder what, on the one hand, a beginner will learn from a short training program based on popular programming languages in use today. Will he be able to apply the acquired knowledge to his own professional context? Will it be useful if he decides to start his journey into professional programming? Please share your thoughts -- I'll pay special attention to those comments describing any personal experiences on learning to code.

On the other hand, if "programming is a way of thinking" then maybe such a way can be taught by exploring lighter, naturally collaborative alternatives like some suitable version of Design Thinking. I intend to return to this subject later.

Thank you for reading!|||

