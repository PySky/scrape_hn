Welcome to a guide to the basics of mocking in Python. It was borne out of my need to test some code that used a lot of network services and my experience with GoMock, which showed me how powerful mocking can be when done correctly. (Thanks Tyler!) I'll begin with a philosophical discussion about mocking because good mocking requires a different mindset than good development. Development is about making things, while mocking is about faking things. This may seem obvious, but the "faking it" aspect of mocking tests runs deep, and understanding this completely changes how one looks at testing. After that, we'll look into the mocking tools that Python provides, and then we'll finish up with a full example.

Mocking can be difficult to understand. When I'm testing code that I've written, I want to see whether the code does what it's supposed to do from end-to-end. I usually start thinking about a functional, integrated test, where I enter realistic input and get realistic output. I access every real system that my code uses to make sure the interactions between those systems are working properly, using real objects and real API calls. While these kinds of tests are essential to verify that complex systems are interworking well, they are not what we want from unit tests.

Unit tests are about testing the outermost layer of the code. Integration tests are necessary, but the automated unit tests we run should not reach that depth of systems interaction. This means that any API calls in the function we're testing can and should be mocked out. We should replace any nontrivial API call or object creation with a mock call or object. This allows us to avoid unnecessary resource usage, simplify the instantiation of our tests, and reduce their running time. Think of testing a function that accesses an external HTTP API. Rather than ensuring that a test server is available to send the correct responses, we can mock the HTTP library and replace all the HTTP calls with mock calls. This reduces test complexity and dependencies, and gives us precise control over what the HTTP library returns, which may be difficult to accomplish otherwise.

The term mocking is thrown around a lot, but this document uses the following definition:

A mock function call returns a predefined value immediately, without doing any work. A mock object's attributes and methods are similarly defined entirely in the test, without creating the real object or doing any work. The fact that the writer of the test can define the return values of each function call gives him or her a tremendous amount of power when testing, but it also means that s/he needs to do some foundational work to get everything set up properly.

In Python, mocking is accomplished through the module. The module contains a number of useful classes and functions, the most important of which are the function (as decorator and context manager) and the class. Mocking in Python is largely accomplished through the use of these two powerful components.

Developers use a lot of "mock" objects or modules, which are fully functional local replacements for networked services and APIs. For example, the library is a mock library that captures all API calls and processes them locally. While these mocks allow developers to test external APIs locally, they still require the creation of real objects. This is not the kind of mocking covered in this document. This document is specifically about using objects to fully manage the control flow of the function under test, which allows for easy testing of failures and exception handling.

Mocking in Python is done by using to hijack an API function or object creation call. When intercepts a call, it returns a object by default. By setting properties on the object, you can mock the API call to return any value you want or raise an .

The overall procedure is as follows:

If your test passes, you're done. If not, you might have an error in the function under test, or you might have set up your response incorrectly. Next, we'll go into more detail about the tools that you use to create and configure mocks.

can be used as a decorator to the test function, taking a string naming the function that will be patched as an argument. In order for to locate the function to be patched, it must be specified using its fully qualified name, which may not be what you expect. If a class is imported using a statement, becomes part of the namespace of the module into which it is imported.

For example, if a class is imported in the module as follows:

It must be patched as , rather than , due to the semantics of the statement, which imports classes and functions into the current namespace.

Typically is used to patch an external API call or any other time- or resource-intensive function call or object creation. You should only be patching a few callables per test. If you find yourself trying more than a handful of times, consider refactoring your test or the function you're testing.

Using the decorator will automatically send a positional argument to the function you're decorating (i.e., your test function). When patching multiple functions, the decorator closest to the function being decorated is called first, so it will create the first positional argument.

By default, these arguments are instances of , which is 's default mocking object. You can define the behavior of the patched function by setting attributes on the returned instance.

objects provide a simple mocking interface that allows you to set the return value or other behavior of the function or object creation call that you patched. This allows you to fully define the behavior of the call and avoid creating real objects, which can be onerous. For example, if we're patching a call to , an HTTP library call, we can define a response to that call that will be returned when the API call is made in the function under test, rather than ensuring that a test server is available to return the desired response.

The two most important attributes of a instance are and , both of which allow us to define the return behavior of the patched call.

The attribute on the instance passed into your test function allows you to choose what the patched callable returns. In most cases, you'll want to return a mock version of what the callable would normally return. This can be JSON, an iterable, a value, an instance of the real response object, a pretending to be the response object, or just about anything else. When patching objects, the patched call is the object creation call, so the of the should be a mock object, which could be another .

If the code you're testing is Pythonic and does duck typing rather than explicit typing, using a as a response object can be convenient. Rather than going through the trouble of creating a real instance of a class, you can define arbitrary attribute key-value pairs in the constructor and they will be automatically applied to the instance.

Note that the argument passed to , i.e., , is a and we are setting to another . When mocking, everything is a .

While a ’s flexibility is convenient for quickly mocking classes with complex requirements, it can also be a downside. By default, s act like they have any attribute, even attributes that you don’t want them to have. In the example above, we return a object instead of a object. However, say we had made a mistake in the call and patched a function that was supposed to return a object instead of a object. The we return will still act like it has all of the attributes of the object, even though we meant for it to model a object. This can lead to confusing testing errors and incorrect test behavior.

The solution to this is to the when creating it, using the keyword argument: . This creates a that will only allow access to attributes and methods that are in the class from which the is specced. Attempting to access an attribute not in the originating object will raise an , just like the real object would. A simple example is:

Sometimes you'll want to test that your function correctly handles an exception, or that multiple calls of the function you're patching are handled correctly. You can do that using . Setting to an exception raises that exception immediately when the patched function is called.

Setting to an iterable will return the next item from the iterable each time the patched function is called. Setting to any other value will return that value.

asserts that the patched function was called with the arguments specified as arguments to .

In this example, I'm testing a function on . This means that the API calls in will be made twice, which is a great time to use .

The full code of the example is here:

I'm patching two calls in the function under test ( ), one to and one to . Since I'm patching two calls, I get two arguments to my test function, which I've called and . These are both objects. In their default state, they don't do much. We need to assign some response behaviors to them.

This tests to make sure a retry facility works eventually, so I'll be calling update multiple times, and making multiple calls to and .

Here I set up the s that I want. I want all the calls to to work (returning an empty is fine for this test), the first call to to fail with an exception, and the second call to to work. This kind of fine-grained control over behavior is only possible through mocking.

Once I've set up the s, the rest of the test is straightforward. The behavior is: the first call to fails, so the retry facility wrapping should catch the error, and everything should work the second time. This behavior can be further verified by checking the call history of and .

Using mock objects correctly goes against our intuition to make tests as real and thorough as possible, but doing so gives us the ability to write self-contained tests that run quickly, with no dependencies. It gives us the power to test exception handling and edge cases that would otherwise be impossible to test. Most importantly, it gives us the freedom to focus our test efforts on the functionality of our code, rather than our ability to set up a test environment. By concentrating on testing what’s important, we can improve test coverage and increase the reliability of our code, which is why we test in the first place.|||

In Python, mocking is accomplished through the unittest.mock module. The module contains a number of useful classes and functions, the most important of which are the patch function (as decorator and context manager) and the MagicMock class. Mocking in Python is largely accomplished through the use of these two powerful components.