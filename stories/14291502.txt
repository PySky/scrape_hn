Ciphers are an algorithm for encrypting or decrypting text. They have been used since ancient times. Julius Caesar famously encrypted military messages via a cipher that shifted all letters by a constant value. Today, this algorithm is known as the ROT family of ciphers.

We want to write some code that will show us multiple passes of ROT encryption on some input text, using some of Ruby’s functional constructs.

The ROT5 algorithm rotates the alphabet by 5 characters. We could implement it as follows:

The key is a hash that maps inputs from the standard alphabet to the rotated one. It looks like: . We use this key to convert each character of the input string to its rotated value.

We can easily extend this to allow us to shift by any value by adding another argument:

We want to see what happens when you apply a ROT function multiple times to a value. We could manually write , however that is not very flexible and doesn’t even show the intermediate steps. Instead, we are going to take inspiration from in Haskell.

Haskell’s function takes a function and starting value and returns an infinite lazy list of recursive applications of the function to the value. In other words:

To implement this in Ruby, we are going to need .

One of the lesser-known core classes in Ruby, implements the internal and external iteration patterns. take a block with a yielder parameter and adds all values sent to the yielder to its list.

is lazy-ish. Take the following infinite iterator:

We can ask for the first 10 values without having to calculate the entire series.

However, using a method such as that acts on every item will never return because this is an infinite series. We will need true laziness to get this one to work.

Calling on a lazy enumerator won’t actually execute until you ask for some items in the series, and even then it will only execute for those items. We’ve written previously about how to take advantage of this laziness to refactor code.

It just keeps recurring and appending to the list (lazily of course).

The Ruby implementation is a bit more verbose, and uses iteration rather than recursion.

This method accepts a starting value and a block. On each iteration of the loop, it calls the block with the value of the previous iteration. The result is an infinite, lazy enumerator.

Now that we have , we can finally try multiple applications of ROT5. Instead of passing a block (which is just an anonymous function), we can directly pass the named function :

This is exactly what we want. However, we run into a problem if we try to use our more generic function .

expects two arguments, but only passes it one. To get around this, we need to use currying.

Currying allows us to call a function with only part of its arguments and it will return another function that requires the remainder.

If we curry , we can partially apply it and then pass it into :

Great! Now we can encrypt any text with any number of passes through any ROT algorithm and see all the intermediate values.

Calling a ROT algorithm multiple times on itself does not make it any harder to decrypt. ROTX of ROTY is the same as ROT X + Y

Also, every multiple of 26 is just plain text:

This can easily be seen when using :

Building on the two facts above, we can use to brute-force any ROT-encrypted text:|||

Work with ciphers in Ruby using a functional approach.