MDXC is a tool to convert Markdown into React Components. It lets you import and use other React Components within your Markdown. Try it yourself with the MDXC Playground.

MDX is a simpler way to write content for your React applications. While standard Markdown compiles to a string of HTML, MDX compiles directly to JavaScript. If you're writing a React app, MDX is both easier to use and more flexible than standard Markdown.

Writing with MDX let's you use the full power of React, even when writing content.

You can try your hand at MDX using the online demo, or the old fashioned way:

Other ways to use MDX include:

For details, jump to the usage section

Let's go over some of the basics -- we'll leave out the boilerplate on the JavaScript output. For more detailed examples or examples which can be run locally, see the directory.

MDX, like JSX, requires all tags to be closed. This means that unclosed tags like are just treated as plain text, while properly closed tags result in React elements.

Because an MDX file compiles to a React Component, you'll need to name use React-style attributes.

For tags which are "inline" -- i.e. within a paragraph of text, the tag's content is treated as Markdown -- you can use `backticks`, *asterisks**, etc. Inline tags can also contain nested tags, but unlike JSX, are treated as text.

For tag "blocks" -- where a paragraph starts and ends with the same tag -- the content is treated as it would be in a JSX document. This means that whitespace is ignored, are plain text and can be used to break out to JavaScript. If you'd like to pass Markdown-formatted text as children, wrap it in the special tag.

Markdown is limited in functionality by design, and MDX is no different. When you want to do something complex, you'll need to delegate to an old fashioned React component. And to access custom React components, you'll need to use .

The syntax for MDX is identical to ES2015 . The only difference is that statements must come before any whitespace or blank lines.

Say you have a component that compiles and runs some example code on the fly. You might use it like this:

Notice how your content in the generated code uses a different indentation level to the wrapper code. This ensures that any strings within your MDX do not have unwanted spaces inserted at the start of each line.

You can declare that your generated component accepts a prop by adding a at the top of your file, after any imports. This variable can then be used within your embedded elements. Remember that are treated as strings within inline tags; if you want to interpolate a prop within your text, you'll need to do it within a JSX block!

When MDX generates code for your Markdown, it doesn't directly generate a JSX (or its JavaScript equivalent ). Instead, it calls a factory function with the tag's props and children.

Generally, you don't need to worry about factories. MDX provides default factories that just render the tag -- as expected. But variety is the spice of life, so in all likelihood you'll sometimes want to customize the behavior of certain tags. And doing so is as simple as passing an object to your generated component's prop!

If you're loading content within a React app, then in all likelihood your app is using HTML5 history through a library like react-router or react-junctions.

The great thing about HTML5 history is that it provides a way to navigate without reloading the page. The crap thing about it is that good-ol' tags will still reload the page. So if you want your content to feel snappy and not out of place, you'll want it to use a component instead.

Another use for factories is to add "anchor links" to your headings. To do so, you'd pass in custom factories for tags like and .

A tool wouldn't be a tool without a good old CLI. It probably isn't that useful, but hey. It's the vibe, and all that. What I mean is, if you must, you may use the CLI to create files from files by hand.

MDXC was originally created as a plugin for Sitepack.

Sitepack is a wrapper around Webpack. It gives you a way to add pages to your website using plain-old , it handles the nasty parts of Webpack configuration for you, and it does all this while performing the magic required to build a static HTML version of each of your pages. As it happens, the MDXC website is built with Sitepack.

If your plan is to use MDX to write an actual website (you know, with pages and links and no "login" button), then Sitepack is worth giving a try. It's documentation is still in its infancy, but you can get around this by using the sitepack-react-starter-kit which supports MDX out of the box.

Once you've cloned, installed and started sitepack, open your browser at http://localhost:4000 and start editing the files in the directory -- changes will be reflected live! When you're ready to release, build your site with .

If you'd like to use MDX within an existing react app, chances are you'll want to use mdx-loader. To do so, just add it to your project and then update your . Bear in mind that MDXC outputs ES2015, so you'll need to run the output through Babel if you want to support older browsers.

Assuming you're using Webpack 2, you'll need to add an entry to your array:

Then import and use your components as you'd do with standard JavaScript!

You may also specify options in Webpack config:

At its core, MDXC is just a wrapper around the excellent and highly configurable markdown-it project. This means that its API is mostly the same.

The major difference is that the default renderer from markdown-it has been replaced with a non-configurable renderer. Existing markdown-it plugins will work, but any hooks on the renderer will silently fail. This is the behavior you want, as these hooks transform HTML strings, and MDXC doesn't use any HTML strings. If you need to transform the output, use factories instead.

To transform MDX into JavaScript, create an instance of the class and then call its method. If you'd like to load any markdown-it plugins, call the method on your instance before calling .

The options to are mostly the same as the options for markdown-it. For details, see the markdown-it API docs.

MDXC also provides a few extra options.

To see this all in use, here is a slimmed-down version of the package:

Mad props to markdown-it for doing the hard yards which make MDXC possible. Also, markdown-it-jsx provided the base for parsing JSX tags out of Markdown files. Finally, there would be no use making MDXC unless React, Webpack and Babel already existed.

Help is muchly appreciated! In particular, PRs for the following would be super duper great:|||

mdxc - Use React Components within Markdown.