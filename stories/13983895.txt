There are plenty of reasons why the presence of script (what it does, how it works, and how heavy it is) needs to be considered a little more thoughtfully.

Web traffic today is made up of more than 50% mobile devices, of these devices, many operate under extremely volatile network connections—loading scripts-alone in less than 10 seconds is nigh on impossible in many situations.

If you’re working on a single page app, with no reasonable content-only-fallbacks, this can be far more damaging than you may think—users will be watching a white screen, with partial content, for a long time.

Performance is important, there’s no doubting that, but what common negative impacts does JavaScript have on our sites? How are we currently evaluating performance?

When commonly auditing the performance impacts of JavaScript, we look at:

But what we’re often missing is what happens thereafter—

Once the device has downloaded the scripts, they must be parsed, converted to bytecode, compiled and then executed.

Parse and compile time are two reasons why the same site that works great on your $3000 MacBook, feels kind of janky on a 2-year-old smartphone.|||

There are plenty of reasons why the presence of script (what it does, how it works, and how heavy it is) needs to be considered a little more thoughtfully. Web traffic today is made up of more than…