I wanted to build a command-line interface for SPARKL (you can find it at ), partly to make it quick to administer configurations and execute transactions from a terminal session but also to allow scripts to automate stuff easily.

I’m new to Python. I wanted to arrive at an application structure that was close to commonly accepted standards — including tests, documentation, lint and so on.

The app itself is used from the shell. The following command sequence creates a new user on our SPARKL-in-the-cloud service, uploads a mix including a stock price transaction, and executes it (the stock price arrives on the mobile):

You can see this utility follows a sub-command pattern (which I did using the library — a lifesaver).

Here’s the directory structure I ended up with (I’ve removed the app-specific names):

It took me a while to feel comfortable with Python’s approach to packages and modules. I still don’t get some idiosyncrasies, but here’s what works for me:

In a package, the main module must be called . Call me old-fashioned, but this is a horrid name. (I’ve since learned that a lot of things in Python have that naming style).

Whatever — it makes me happier to call the main module and put code in that. Then I have nasty old delegate like this:

To invoke the main module, from the top-level directory you can type:

I suppose the second form is useful if you want multiple entry points into a package for execution purposes.

This had me saying “you what?!” a lot as I scanned documentation all over the place. As I see it, the story goes like this:

Either relative (cos the modules are all in the same directory):

Or using our own package name directly:

The relative form seems confusing to me. It only works if your modules are in a package anyway (complete with file). So I’d suggest just using your package name directly.

Both functions and classes are declared using the keyword in a module source file.

So if you’ve got a function in some module that you want to use directly by name in another module, use this:

It’s impossible to write Python without some tedious know-it-all saying ”That’s not idiomatic, here’s how to do it”. This is life, and believe me it’s worse in Google.

Python pedantry has been handily automated in two tools, which between them cover most of the ground —  and .

I like to have a with certain simple targets, and although Python doesn’t need to be compiled, I have a target which includes not one but both those tools in its flow (see ).

A handy side-effect of using Pep8 and Pylint is, you’ll have to produce per-module, per-class and per-function documentation in the form of docstrings (those triple-quoted blocks of text that follow the line itself or appear as the first lines in a source file.

Your documentation is then nicely produced by typing or where it knows to look for package directories below your current directory.

You can also get a pretty browser display by starting the pydoc HTTP server (again from the directory above your packages) as follows: where 8001 is the port number you want to use.

There’s a useful package called that seems to be a good basic standard for both unit tests and more complex system testing.

I found the easiest approach is to place tests in a sub-package of the package under test. That is, create a directory called inside your package directory, and make sure to put a nice new (and likely empty) file in that sub-directory.

Then, follow the standard Pytest conventions for one or more test modules. You can invoke the tests directly using auto-discovery as follows:

This can be invoked from the repository root directory above the package under test, and I include it as a target (see ).

There’s a useful package called for creating distributions. This is driven by a combined Python script and configuration file normally called  .

Setup can be invoked from the repository root directory above the package under test, and I include it as a target (see ).|||

This blog describes a standard approach to Python application layout.