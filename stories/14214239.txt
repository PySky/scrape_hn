Powered by Viro is a series of posts and tutorials showcasing VR experiences built on top of the Viro platform. Viro Media enables mobile developers to rapidly build virtual reality (VR) experiences. Developers write in React Native and Viro runs their code natively across all mobile VR devices. Sign up for free and start building your VR apps today — Get Started

VR is a great medium for consuming both traditional and immersive media. You can transport someone to a private home theater, an IMAX experience or surround them with 360 video. This tutorial will show you how to build a VR Media Player powered by Viro.

Here is a link to the final js theater file which we’ll walk through step by step. It’s recommended you open this file in a separate browser window as you follow along.

We will breakdown each component step by step. Download the full sample on Github to access the bitmaps and images referenced — VR Media Player: Sample Code

React Native uses the render() method to form the UI. The render() method consists of JSX tags that represent a scene. With Viro, each scene has a top level ViroScene tag. All components that are part of a scene, go under a ViroScene. To create the theater environment we use a pre-rendered 360 photo of a theater. (We provide this image for free, under our Free Assets. Download it here.) We embed it into our scene below under the ViroScene tag using the Viro360Image component:

Now, we need to place the actual 2D video over our 360 image where the movie screen is located. This is done by adding the ViroVideo component with a position and scale it so that it fits within the scene:

As you can see, we are using a streamed video for the movie whereas the 360 theater image was a local asset. Viro supports both so you can use the file path that is best for your experience. At this point, we have an immersive theater with a movie playing on the screen.

Now let’s add some player controls to pause, play,stop and switch the video!

Let’s look at the _renderVideoControl() method of our ViroTheater class that returns the player controls:

We use the ViroNode, ViroButton and ViroImage classes to properly layout the controls in _renderVideoControl(). Now lets define the onClick methods defined in each ViroButton. These onClick methods will manipulate the state of the video. We’ll use React state variables to accomplish this.

The getInitialState() method contains some default state values that define the state of our scene on load:

In addition, we’ve added a video array that has links to multiple videos so we can make those skip and next buttons useful.

Now lets go over the methods that the onClick parameter on our buttons point to in _renderVideoControl(). These methods, _togglePauseVideo(), _playPreviousVideo(), _playNextVideo() simply change our state variables:

Finally, for the above methods to actually do anything, we need to hook our state variables to our video component. We also need to invoke our _renderVideoControl() method to display the controls in our render() method. Once we do that, our buttons will affect the video, enabling it to pause or skip to the next and previous video by changing the source. Doing that completes our render() method:

Now our player controls work! However, it would be nice to change the state of the play button to reflect the state of the video. Let’s rework our _renderVideoControl() method to do this:

From above, you can see we check the state of the video using this.state.videoPaused and return a different rendered button depending on it’s value. This logic is encapsulated in _renderPlayerControl().

Now let’s add a bit more. Suppose you have a 360 video you wish to switch to give the user a more immersive experience. Let’s add another button in _renderVideoControl() to navigate to a 360 scene:

_launchTheatreScene will navigate to our 360 scene using the sceneNavigator that is a prop of every ViroScene.:

Now, let’s define the Viro360Theater scene that displays the 360 video:

The scene simply imports a Viro360Video component and sets the source of the 360 video to play. Based on what we covered here, we’ll leave it up to you to add the code to go back to the previous scene!

That’s it! Now you have a fully rendered theater scene with play controls. Check out the github of our Viro Media Player sample to see the complete code with a few more bells and whistles.

If you have any questions or run into any issues let us know at our support and feel free to post any issues on our Github!

Start building your own VR Media Player today for free. Sign up for the Viro platform and get setup and coding in under 5 mins with our Quick Start Guide.|||

Powered by Viro is a series of posts and tutorials showcasing VR experiences built on top of the Viro platform. Viro Media enables mobile developers to rapidly build virtual reality (VR) experiences…