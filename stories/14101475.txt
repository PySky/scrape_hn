We are so excited to announce the release of Ionic 3.0! This version jump may worry some of you, but donâ€™t let it! The required changes to go from to are minimal. We got you! ðŸ™‚

Remember when we said this in our Ionic 2.0.0 final blog:

Well, we were joking about a completely new framework, but this version change is not for that reason.

Weâ€™ve recently switched over to use Semver versioning. This means that we will be following these guidelines when releasing new versions of Ionic.

When we upgrade our internal version of Angular, we are bumping the Ionic version according to whether the Angular upgrade is major, minor or a patch. Since this release upgrades Ionic to be compatible with Angular and it also has incompatible API changes, it had to be a major release. To see a full list of the breaking changes in this release, check out the changelog.

For a full list of changes and steps to upgrade, see the changelog.

We have updated Ionic to be compatible with Angular . This upgrade introduces new features, smaller and faster applications, support for a more recent version of TypeScript, and much more. For more information, see the Angular 4.0.0 blog.

Like Angular, Ionic has been updated to work with a more recent version of TypeScript. This upgrade will improve the build time and type checking in your application. It also introduces support for mix-in classes, the ability to use async await in Ionic, and much more. For more information, see the TypeScript release notes.

Gone are the days of passing a deep link configuration to your applicationâ€™s root module. You can now set up deep links by using the decorator. This makes it easier to set up lazy loading in your application, set the priority of lazy loading pages, and customize the configuration for each individual page.

Hereâ€™s an example of setting some of the optional properties for an :

For more information, see the IonicPage API documentation.

Ionic includes support for lazy loading. It is not the default yet as we have found some minor issues with it. We are actively looking for testers and to hear community feedback. The changes affect the file structure and navigation of your application, but they will ultimately speed the application up. To get started testing lazy loading in Ionic see the lazy loading document.

There are some known issues with navigation that will be worked on soon:

 â€“ The URL is not updating properly when pushing a page on a root level that has an navigation stack in the history.

 â€“ Deep linking is currently only working with one navigation stack, so it will not work properly with split pane containing 2+ navigations side by side.

Our main focus will continue to be on improving application start-up speed and performance. We will continuously be incorporating user feedback into our lazy loading implementation. In addition to this, features to improve our support for desktop will be added. As always, we will still be fixing known bugs in our components and navigation.

A huge thank you to everyone who has tested and given us feedback. We know that changes still need to be made, and we are working hard to make them happen. We appreciate each and every one of you. <3|||

We are so excited to announce the release of Ionic 3.0! This version jump may worry some of you, but donâ€™t let it! The required changes to go from 2.x.x to 3.0.x are minimal. We got you! :) Butâ€¦ why 3.0? Remember when we said this in our Ionic 2.0.0 final blog: Whatâ€™s next? Ionicâ€¦