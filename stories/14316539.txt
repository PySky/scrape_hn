A functional implementation of Either in C++14.

unsafe = [] { a function that throws, sometimes we can't avoid it... ( ) { ( ); } ; } Either<std::exception, > e = Try<std::exception>(unsafe); let's lift the exception into the typesystem e.left() .map([]( & e) { std::cerr << e. () << std::endl; }); result = e .leftMap([]( ) { ; }) do nothing with exception and map to 42 .rightMap([]( x) { x * ; }) do further computation if value available .join() join both sides of either (result == );|||

neither - Either and Maybe monads for better error-handling in C++