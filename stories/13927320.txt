AdonisJs is a MVC Framework for Node that is greatly inspired by the Laravel framework and borrows some of it concepts. AdonisJs follows the software paradigm of conventions over configuration which allows you focus on building your application rather than waste time on configurations. AdonisJs uses ES2015 Generators which removes the unnecessary callbacks from your code.

To explore more about AdonisJs, checkout this tutorial by the creator of Adonis: Meet AdonisJs! A Laravel-style MVC Framework for Node.js.

In this tutorial, we'll to be building a support ticket application. Some times ago, I did a tutorial on how to build a support ticket with Laravel. We're basically going to rebuild that application, but this time we'll build it with AdonisJs.

A support ticket application provides a medium for customers to lodge issues they face using a particular organization's service/product by opening a support ticket with the organization's help desk.

What we will be building will be minimal, but it will have the major features of support ticket application.

Below is an image of the final output of what we'll be building.

We'll start by installing the Adonis-CLI which is a command line tool to install stable and dev releases of AdonisJs with all required dependencies.

Note: you might need to use sudo with the above command.

With the installed, let's create a new project:

This will create a new project called and will also install all the required dependencies from .

Note: If you are using Node.JS < 6.0, make sure to make following changes. Replace the scripts inside file with following:

Lastly replace the first line of the ace file with following :

You can test to make sure the installation was successful by running:

Now open http://localhost:3333 to see the welcome page.

The rest of this tutorial assumes you are already in the project directory which is .

We'll be using MySQL for our database. First, we need to install a Node.JS driver for MySQL:

Now we need a database to hold our data. Open the file and fill it with your database details.

Update the details above with your own database details.

Only registered users can make use of our Support Ticket Application, so we need an authentication system which will allow users to register and login to the application. AdonisJs can get us up to speed with that. With AdonisJs Authentication Provider, we can generate required migrations using an command:

This will create the required migrations and models for authentication. AdonisJs by default, makes use of the authenticator (which we'll stick to in this tutorial) to authenticate requests. Since we'll be using the session based login system, we are concerned with the model and table migration. But before we run the migrations, let's modify the migration to suit our application. Update the of table migration with:

We add an column which will help us track if a particular user is an admin or not. Go ahead and run the migrations:

Now we can start building the authentication system. Let's start by creating a HTTP request controller called which will handle all the authentication logic:

This will create within the directory.

Before we start writing the authentication logic, let's setup Validator which we'll use for form validation since we'll need to validate user submitted data.

Validator is not the part of the base installation and hence we are going to install and register it manually:

Once installed, we need to add it to the array in

Also, we need to add it to the object in

Now we can start using the Validator. Let's define some rules for our users registration. Open and add the code below to it:

Yeah, just some basic vaildation rules. We'll be using these rules shortly.

Now open and add the following to it:

The will simply render the user registration page. The will handle the user registration. It first validates the user submitted form inputs against the rules we defined above. If the validation fails, we return back to the registration page with the form request and display the appropriate error message(s) as flash message. If the validation passes, we persist user data to the database using , which is AdonisJs ORM to make secure SQL queries. Next, we log the registered user in and lastly redirect them to the homepage.

Next, we need to define our user registration routes. Open and paste the code below into it:

We defined two routes that will handle and request respectively. The first route will trigger the on while the second will trigger the on .

AdonisJs view engine is built on top of nunjucks. We'll start by creating a master layout which we would use across the entire application. Within the directory, there is a view file, we are going to move this file to a new directory called :

With in its new directory, let's open it up and replace the code in it with the following:

A basic Bootstrap layout, the navbar shows links for users to either login or register if they are not already logged in. Otherwise it shows a link to open a new ticket and a dropdown menu with a link to display all tickets created my the logged in user and lastly, a logout link. The main page of the layout contains a content block which will be replaced by the actual content of the page extending this master layout.

With the master layout structured, let's move on to creating the user registration view. Create a new directory called within the directory, this will house all the application's authentication view files. Within the directory, create a new file named and paste the code below to it:

As you can see, the is extending the we created above. Noticed we included a partial (which we'll create shortly), this partial will display error messages encountered during form validation we discussed earlier on. We are using AdonisJs form builder which is pretty straightforward. Because AdonisJs protects us from CSRF, we need to add CSRF token to our form. Once the form is submitted, a request will be made to the route.

Now create the partial we talked about. Create a new directory called within the directory. Within the directory, create a new file named and paste the code below into it:

If there are errors in the flash messages, we loop through each of them and display them upon failed form validation.

When we visit http://localhost:3333/register in our browser, we should get a screen like below:

Go on and register. Now that we have registered, we need a way to login into the application. Okay, let's tackle that. Open and add the following code to it:

The will render the login page, while will handle the actual user authentication. We attempt to log the user in with the credentials (email and password) submitted and redirect them to the homepage. If either of the credential they submitted does not correspond with what we have in our database, we simple return them to the login page with the error message "Invalid credentials".

Next, we need to define the login route. Open and paste the code below into it:

We defined two routes that will handle and request respectively. The first route will trigger the on while the second will trigger the on .

Create a new file named within the directory and paste the code below to it:

Again, a simple login form with email and password fields. There is also a section that will display login failure error. Just as with the register form, we add CSRF token to the form. Once the form is submitted, a request will be made to the route.

When we visit http://localhost:3333/login in our browser, we should get a screen like below:

We should be able to login now.

Let's allow logged in user to be able to logout of the application. Open and add the following code to it:

The simply logs the authenticated user out and redirect to the login page.

Having taken care of users authentication, we move on to allow users create new tickets. First we need a table to hold the tickets that users will be creating and also a model for them.

The above command will create a model and table migration. Open the table migration file and update it with:

The migration is straightforward, we have a column that will hold the of the user that created the ticket, a column to indicate the category the ticket belongs, column which hold a unique random string that will be used to refer to the ticket, a column, a column, a column and a column which indicate whether a ticket is open or closed.

We also need a table to hold our various categories:

As above, this will create a model and table migration. Open the table migration file and update it with:

We can now run the migrations:

A ticket can belong to a , while a category can have many . This is a one to many relationship and we'll use Lucid to setup the relationship.

Open the model and add the following code to it:

Next, we need to create the inverse relationship, open the model and add the following code to it:

For now, let's manually populate the table with some data. AdonisJs provides Seeds and Factories which we can use to generate fake data. For the purpose of this tutorial, we won't be using Factories, we'll only use Seeds and Query Builder. Open and update the :

Using AdnonisJs query builder, we perform database insertion which insert two categories in the table of our database. To run the database seeder, we make use of an command:

Now we should have two categories in our table.

We need a controller that will contain the logic for opening a ticket. Run the command below to create an HTTP request controller:

This will create a . Open and add the code below to it:

The will get all the categories created and pass them along to a view file. Since we'll be displaying our categories in a select dropdown on the ticket opening form, we use the which will return a flat object with a key/value pair of LHS and RHS key. Before we move further, let's create the routes that will handle opening a new ticket.

The first route will show the form to open a new ticket while the second route will call the on which will do the actual storing of the ticket in the database.

The from above will render a view file which we are yet to create. Let's go on and create the file.

Create a new folder named in the directory and inside the directory, create a new file named and add the following code to:

Again we are using the AdonisJs form builder. Notice we included a and partials. The partial will display a flash message upon successful opening of ticket. The partial is the same we created earlier.

Create a file named in the folder inside the views folder. Paste the code snippets below into it:

When we visit http://localhost:3333/new_ticket in our browser, we should get a screen like below:

To handle the actual saving of the ticket to the database, open and add the to it.

We'll use an package called to generate random string for our ticket IDs. So let's install the package:

Note: the package is require at the top of .

Within the we get the currently authenticated user. Next, we set some form validation rules that must be met before moving forward. If the validation fail, we redirect the user back to the ticket opening page with appropriate error messages. Otherwise, a new the ticket is created and an email containing the ticket details is sent to the user (more on this below) and finally the user is redirected back with a success message.

AdonisJs official Mail Provider makes it so easy and intuitive to send emails using one of the available drivers. Mail provider is not part of the base installation, and we have to pull the package from and register the provider:

Next, we need to register the provider in :

Next, we need a configuration file that tell AdonisJs which Mail driver we are using along with the driver's details. Create a file within the directory and paste the following code into it:

Let's take a closer look at the mail sending snippet from the above.

The Mail's accepts a path to a view file , an object of data ( and ) we want to pass to the view file and lastly a callback. The view file will be inside the directory (which does not exist yet) and will be used to compose the mail we want to send. The argument passed to the callback is an instance of message builder which is used to build the mail by specifying who we want to send the mail to, who is sending the mail and the subject of the mail.

Now let's create the email view file. Create a new file within the directory and add:

This is the email that will be sent to the user once a ticket is created.

Before testing this out in the browser, remember to configure your Mail settings. For the purpose of this tutorial, we won't be sending actual emails. Instead we will just log them. So open file and update it as below:

Now hit the browser and try opening a new ticket, you should see the mail content logged in the file once the ticket is created.

So far, we have been able to setup our application and created our first ticket. You can see how simple and straightforward it is to develop an app with AdonisJs. We have been able to utilize AdonisJs Query Builder to define our table structures without writing a single SQL command, layout our views with its built in View Engine without doing extra setup as with other Node.JS frameworks (Express, Hapi.js etc). We also saw Lucid ORM in action which makes it seamless to interact with our database irrelevant of the databse type. Lastly, we saw Ace, a powerful interactive shell which we used to scaffold and perform some operations from within a terminal.

In the next post we'll cover commenting on ticket and marking ticket as closed. If you have any questions about the tutorial, let me know in the comments below.|||

