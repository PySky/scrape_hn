The AuthZForce project provides an Attribute-Based Access Control (ABAC) framework compliant with the OASIS XACML standard v3.0, that mostly consists of an authorization policy engine and a RESTful authorization server. It was primarily developed to provide advanced access control for Web Services or APIs, but is generic enough to address all kinds of access control use cases.

You can use AuthZForce in two ways depending on your needs:



If you are interested in using the Web API, go to the AuthZForce Server project on github.

Authzforce is able to retrieve attributes from a XACML Request of course, but also from other attribute sources, also known as Policy Information Points (PIP) in the XACML standard, e.g. LDAP or SQL database servers, REST services or X.509 attribute certificate repository. Besides, its plugin architecture enables developers to support custom attribute sources by adding new Attribute Provider plugins. More info in the Extensibility points section below.

AuthzForce provides XACML PIP features in the form of Attribute Providers. More information in the previous section.

See the change log file according to the Keep a CHANGELOG conventions.

If you are rather interested by the AuthzForce Server instead, go to the AuthZForce Server project on github.

You can either build Authzforce PDP library from the source code after cloning the git repository, or use the latest release from Maven Central with this information:

If you want to use the experimental features (see previous section) as well, you need to use an extra Maven dependency:

To get started using a PDP to evaluate XACML requests, instantiate a new PDP instance with one of the methods: . The parameters are:

As a result of , you get an instance of with which you can evaluate a XACML Request directly by calling the methods; or you can evaluate a decision request (more precisely an equivalent of a Individual Decision Request as defined by the XACML Multiple Decision Profile) in AuthzForce's more efficient native model by calling or (multiple decision requests with ). In order to build a , you may use the request builder returned by .  Please look at Javadoc for more information.

Our PDP implementation uses SLF4J for logging so you can use any SLF4J implementation to manage logging. As an example, we use logback for testing, so you can use logback.xml as an example for configuring loggers, appenders, etc.

If you are using Java 8, make sure the following JVM system property is set before execution: javax.xml.accessExternalSchema = http



For an example of using an AuthzForce PDP engine in a real-life use case, please refer to the JUnit test class EmbeddedPdpBasedAuthzInterceptorTest and the Apache CXF authorization interceptor EmbeddedPdpBasedAuthzInterceptor. The test class runs a test similar to @coheigea's XACML 3.0 Authorization Interceptor test but using AuthzForce as PDP engine instead of OpenAZ. In this test, a web service client requests a Apache-CXF-based web service with a SAML token as credentials (previously issued by a Security Token Service upon successful client authentication) that contains the user ID and roles. Each request is intercepted on the web service side by a EmbeddedPdpBasedAuthzInterceptor that plays the role of PEP (Policy Enforcement Point in XACML jargon), i.e. it extracts the various authorization attributes (user ID and roles, web service name, operation...) and requests a decision from a local PDP with these attributes, then enforces the PDP's decision, i.e. forwards the request to the web service implementation if the decision is Permit, else rejects it. For more information, see the Javadoc of EmbeddedPdpBasedAuthzInterceptorTest.

If you are experiencing problems using AuthzForce, please report your problem via the Issue Tracker. 

Please include as much information as possible; the more we know, the better the chance of a quicker resolution.

If you wish to contact the developers for other reasons, use the Authzforce contact mailing list.|||

AuthZForce (Community Edition)