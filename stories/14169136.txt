Expressive static type and invariant checks for JavaScript. It is similar to TypeScript, but:

Has very precise types such as the type of hex-encoded strings with an even number of characters (i.e., 's input), and can statically check all of them; Has invariants such as for any user and any item, purchase(user,item).balance >= 0 , so that, if you forget to check the balance in your implementation, it becomes a compile-time error; Requires no additional compilation step: it works like a macro on top of vanilla JS, using Node.js as the "compiler", and then erasing itself out.

Yes, it can check claims such as "this function can't produce negative balances" at compile time. Sounds magical, but it is actually simple: the catch is that it isn't doing classical (logical) type-checking, but, instead, it "type-checks" by inspecting with random samples. It can, thus, be wrong sometimes. The hypothesis, though, is that, in practice, if your code is wrong, it will almost always spot it; and being wrong sometimes is compensated by catching a much larger class of bugs.

In short, attempts to give you some of the expressivity of Idris, with the ease-of-use of TypeScript, trading absolute for probabilistic correctness. You can see it as the fusion of a type system with automated tests.

Use-cases can be simple, such as statically checking that you implemented a function correctly (w.r.t specification):

( ); Returns the largest element of an array, or 0 ( . ( . ( . ), . ), ( ) { max ; ( i ; i . ; i) max . (array[i], max); max; }); "the largest element of any array should be larger than or equal to any of its elements" . ([ . ( . ), . ], ( , ) (array) (array[i . ] ));

Or very complex, such as checking the second functor law on an implementation of :

Once the checking is done, your program behaves the same as if wasn't there, except also doing additional runtime checks. You, then, have two options: you can export the original functions, allowing dead-code-elimination to erase all code from your final bundles, or you can export the typed functions, allowing your library users to see informative error messages if they use your functions incorrectly.

The best way to learn Forall.js is by following the Forall.js game.

This is still very new and immature. The code, although short, is very messy and there is a lot to improve.|||

forall - Expressive static types and invariant checks for JavaScript.