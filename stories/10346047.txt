This article demonstrates how to combine React.js with Java and Spring Boot in order to pre-render fully-fledged MVC-frontends on the JVM server without even thinking about Node.js.

Wait. Isomorphic Webapps? What the heck is that?

Traditionally webapps generate HTML on the server and send it over to the client. This has changed with the recent rise of client-side MVC frameworks such as Angular.js, Backbone.js or Ember. But generating HTML views on the client has both pros and cons. Isomorphic webapps try to close this gap by enabling you to use the same technologies for generating views both on the server and on the client.

React.js is a fresh new JavaScript library for generating views programmatically. React is not a complete MVC framework - it's the V in MVC, concentrating on creating and managing views by dividing the entire UI into components. Those React components can be rendered both on the client and on the server.

The Nashorn JavaScript Engine makes isomorphic webapps on the JVM possible. Nashorn as part of the latest Java 8 release dynamically translates JavaScript into bytecode so it runs natively on the JVM.

The rest of this article explains how to build isomorphic webapps with React on the JVM by utilizing Nashorn and Spring Boot to pre-render React views on the server. The example code is hosted on GitHub and focuses around the official React.js tutorial - a comment box example with markdown support. If you're not yet familiar with React.js, just follow the steps described here. You may also want to read my Nashorn Tutorial later, but it's not mandatory for this blog post.

The main React component as described in the official tutorial looks like this:

In order to render this component in the browser we define a function which simply calls to attach the view to the content container of the page:

Calling this function renders the comment box component into a pre-defined content container by passing an array of comment objects as data. We cannot call this function on the server because it highly depends on the browser DOM being present (see ).

The great part about is that it respects pre-rendered HTML from the server:

So, the next step is to render the whole view on the server. We need two things to achieve that: (i) the pre-rendered html and (ii) the pre-processed JSON data as input for .

Let's define a template with model attributes and . Content will be filled with the pre-rendered HTML of the comment box while data will be replaced with the JSON array of comments so React can initialize all the components props and states on page-load.

You can certainly choose another templating library then JSP, e.g. Thymeleaf or Handlebars. Whatever you prefer...

Java 8 ships with a brand new JavaScript engine called Nashorn. You can simply create a new Nashorn engine by utilizing .

The above code evaluates all scripts needed for the comment box tutorial. The helper method simply reads a file from the classpath by creating a new io reader:

Unfortunately doesn't evaluate properly on Nashorn without some fixes. I've created a file called to address those issues (see this issue).

This is the content of this file:

The following Java method demonstrates how to render the HTML of the comment box tutorial via Nashorn on the server:

As you can see we directly pass a native Java list of comments as input data. We call the JavaScript function located in . It looks quite similar to as described above:

The function accepts a native Java list of comments as argument. Since the React components implemented in expect a javascript array, we have to convert the java list into the corresponding javascript array by calling . The function finally creates the desired view and returns an HTML string.

Finally we wrap all things up into a Spring Boot controller. Remember that we need both model attributes and to properly render . We just learned how to generate the content HTML with Nashorn. But we also need the initial JSON data so React knows about the components props and states. This is quite simple by utilizing Jacksons to convert the list of comments into the appropriate JSON data.

That's all. The main controller renders the HTML for all available comments on the server. gets called in the browser on page-load, preserves all server-rendered markup, initializes the internal props and states of the components and registers all event handlers. The comment box gets auto-refreshed every couple of seconds and newly created comments will directly be attached to the DOM without waiting for the server to answer.

Isomorphic server-rendering in this example has many benefits compared to generating the views solely on the client: The page is fully search-engine optimized (SEO), so search engines such as Google can parse every comment properly. There's also no UI flickering on first page-load: Without server-rendering the browser first shows an empty page, then fetches all comments and renders the markup. Depending on the performance of the clients hardware you'll notice some flickering on startup. This is even more of an issue on mobile devices.

I hope you enjoyed reading this post. If you want to learn more about the Nashorn Engine you probably want to read my Nashorn Tutorial. The full source code of this example project is hosted on GitHub. Feel free to fork the repository or send me your feedback via Twitter.|||

How to build isomorphic JavaScript webapps on the Java VM with React.js and Spring Boot.