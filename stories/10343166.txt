Every now and then I am lucky enough to create a pen that people really like. SVG Lava Lamp is one of them - in fact I've had so many people asking about it that I decided to write this blog post/tutorial.

On the face of it there does seem to be an awful lot of code in this post - there isn't really. I just keep pasting in the same code with incremental additions so there's a lot of repetition.

Also the headings get progressively more and more ridiculous - they're simply there for my own amusement and sadly add very little to the meaning of the sections. If they're off-putting or if English isn't your first language then I profusely apologise.

If you're looking for the Adobe Illustrator file for this tutorial (or related links) go down here.

The main bulk of the effort needed to create this animation takes place outside the browser in a drawing program. The actual JavaScript animation is only around 15-20 lines of code.

You'll need a vector program like Adobe Illustrator (AI). Yes it's bloody expensive but there are others (Sketch[$99] which is Mac only, InkScape[free!]) but I use AI as it's what I'm used to.

The only other thing you really need is GSAP's TweenMax and that's free.

First off, create an artboard that's 600x600. I don't know why I always use these dimensions but I do and they seem to work well for me.

Now draw the glass shape - we'll use this shape for both the actual glass and the mask for the blobs (actually it's a clipPath which is subtely different from an SVG mask). It doesn't matter what colour the glass is because we'll remove it in the code later. More on that in a bit.



 

 Now draw the top and bottom bits - notice there's a very faint gradient from the orange colour to black on both top and bottom parts. This will create the illusion that the lamp's light is spilling out onto it a little.



 

 We'll also need to draw all the wax blobs and fill them with a radial gradient - just draw four or five different sizes and shapes. To make these draw a circle with the Ellipse tool and then use an AI warp filter like Filter > Warp > Arc Lower then mess about with the Bend and Distortion settings (make sure Preview is on!).



 

 Once you've drawn your blobs make sure the dark part of the gradient is at the top - remember the light source of the lava lamp is underneath. Now position them all roughly around the top of the lava lamp (if you've ever seen a real one you may have noticed the wax blobs disappear up inside the top cone bit).

Don't forget to also draw a larger, flatter blob and place that at the bottom with the top poking out just above the bottom bowl bit. Whilst this isn't a truly accurate representation of a lava lamp as all the wax melts and floats about it's poetic/animatic license that contributes to the gooey effect when we eventually add the SVG blur and colour matrix filters that create that goo effect when combined.



 

 Oh I almost forgot - I drew a table top in the there (black rectangle at the bottom) - otherwise it looks like it's floating in mid-air.

Finally I made a rectangle with a radial gradient that sits behind everything that will act as a glow. I tried this originally with an SVG glow filter on the glass but the performance was terrible and the effect wasn't quite what I wanted in terms of its shape so this was an aesthetically suitable solution.



 

 Now, if you happened to attend my Reasons To Be Creative session in September in Brighton, UK then thanks for coming - it was fun! You might remember me going on and on about a very important tip when copy and pasting your graphics from AI's artboard into a text editor (or CodePen or whatever). I'll repeat myself here because it's a really useful tip.

You can save SVGs to an .svg file from AI which is all well and good but it rather annoyingly outputs every layer whether it's visible or not. It also has a tendency to generate a load of inline crap I don't want.

Usually I want to pick and choose the required layers so I select the ones I want, copy them and paste them into my text editor. The problem with this method is that when you make your selection and copy and paste into an editor, what you paste is an entire SVG with a width and height that is the width and height of the bounding box of your selection.

That is to say, if you had a 600x600 artboard with your lava lamp glass and top and bottom graphics and you wanted to create a 600x600 SVG with those elements positioned correctly within it when you copy it over, you'd think that by selecting those elements and copy/pasting them into an editor would give you the result you wanted. But it doesn't because it just doesn't know the context (artboard) from which it was pasted; instead it takes the width and height of the selection and uses that as the resulting SVG's width and height.



 

 Notice the Transform panel - it says the selection has a width of 131.304px and a height of 304px. When you copy and paste this into an HTML page the SVG looks like this.



 

 (I've just realised I haven't drawn it very well - the top line of the base is wonky! GANNON, SIT IN THE BIN!).

Note the highlighted SVG width (131.3) and height(304) - the generated SVG is the same size as the selection meaning you've lost the 600x600 artboard and they're not sitting in the middle like they should.

The simple solution (yes I know you should never say something is simple when doing a tutorial but in this particular instance it really is simple) is to draw a rectangle in AI that's the same dimensions as your artboard and always select that along with the elements you want when copying to an editor. From now on I will refer to this as the 'context' layer. You can always discard the context layer from the SVG code later but it's necessary in the copy/paste process so that the generated SVG has the 600x600 dimensions of the artboard (because the context layer is the same size as the artboard). With me?

So now this...

So now when you need to add, say, the wax blobs you can select them all and then add the context layer to the selection (by holding down Shift and clicking it) - this keeps them in their correct position.

I tend to use SublimeText as a go-between to clean up my SVGs and cherry pick the bits I want. It's not strictly necessary but I like Sublime's Find/Replace/Regex functionality so it's easy for me to perform repetitive clean-up tasks. You could just as easily paste it all into CodePens HTML pane.

A quick note about layers - I've named all my layers, even if I don't intend to animate them. The layer names become ids in SVG (albeit with annoying numbers and underscores added by AI). Naming layers makes it easier to identify them in the page later on.



 

 As I mentioned above, AI insists on adding ids to layers - it would be more useful if it added class names - that way you could have several layers that were all related by a class. Still that's the way it is and in my session at Reasons I made a point of pasting the SVG data into Sublime and changing all 'id=' to 'class='. This is actually a bit dangerous because references to gradients, filters, clipPath (and many others) require you to reference them by their id so I've (mostly, not always) stopped changing the id to class now. If I do need to group elements with a class name then I add the class and keep the id as well.

We're ready to move the graphics into the page. Before we do I just want to explain in plain English how the animation will work. I do this a lot before I build anything or write any code - I describe to myself what will happen visually and technically.

At last we can get it out of AI and into an editor to tidy it up.

We could select all the layers we want which and copy them in. There's no problem with this other than the fact you will end up a lot of code that all looks quite similar and can become quite confusing quite quickly if you do it all in one go. I tend to copy stuff over in pieces and build it up.

So first hide all layers. Then show the 'bg' layer and select it (make sure you twirl down the layer group to show the actual graphic layer) - this is the rectangle with a gradient that will be the glow behind the lamp and will sit at the back/bottom of the SVG. In this instance we don't need to add the 600x600 context layer to the selection (to maintain the SVG dimensions) because this 'bg' layer is 600x600. Now copy it into an editor and it'll look something like this:

So our first copy/paste has created our SVG at 600x600 because the graphic we pasted was 600x600. We'll add any new graphics to this SVG from now on.

AI has decided to give the id the name which is ugly and stupid. Remove the . It's also generated the gradient for it and given that the id . We'll change that to a more readable name like - we also now need to change the fill reference for the to .

I like to keep my gradients, filters, clipPaths and masks in the definitions tag . These are usually referenced things or things that aren't visual in their own right. So we'll move the gradient tag there - you should have something that looks like this.

Ok we're winning (wow that sounded really patronising - sorry).

Now create a new pen in CodePen and paste this from your editor into the HTML pane. This article assume you have a CodePen account - if you don't you are a bad, bad person and you may join me in the bin.

I won't show you what this should look like because it's the same as the last code snippet.

Next up go back to AI and hide the bg layer - we don't need it any more. We do, though, need the 600x600 context layer back on (the horrible purple coloured one). Did I mention this layer is really important? No? THEN SIT IN THE BIN FOR NOT LISTENING.

We'll add the glass in next. Select the layer and add the context layer to the selection. Now copy/paste it into Sublime. Don't worry about keeping the last stuff you pasted in - we just use the editor as a go-between.

It should look like this:

Delete the from and also delete the ` attribute (I'll explain in a minute why). Now copy just that path data into your pen - you should just select this bit:

You might remember that we are going to use this in two places - as the glass graphic and as the clipPath (to mask the wax blobs).

So in CodePen we need to add in a tag in the tag and put this glass shape inside. We also need to give the clipPath an id (we'll call it ). Your SVG code in the CodePen HTML pane should look like this:

You shouldn't see anything in the pen's preview area other than the bg gradient. That's because we have just added in that glass shape to the which is not visible. In order to use that visually we'll add it below the bg gradient using . We'll also just drop the down so the bg shows through.

It's worth noting here that even though has been placed inside a tag we can still reference and use it for other things.

So your code will look like this:

Note that I've added to the instance.

We removed the attribute from the original earlier and that is so that we can style a instance. If we'd left the on the we would not be able to override that fill in subsequent instances.

Now your preview pane will show the glass and the bg together like this:



 

 Are we all still awake? Right, somebody open a window.

Next we'll add the table top, base and top bit. Select them along with the context layer and copy them into your text editor like this.

Again we'll delete the from the main ids of , and . Don't worry about renaming the gradient reference (e.g. ) - it's more work than it's worth to rename the gradient and the references.

Now, copy and paste both gradient tags into the tag in the CodePen HTML pane. Your code should look like this:

Now copy , and and paste those below the glass shape tag.

Your code should look like this:

Your preview pane should now show those new graphics like this:

Go back to AI and hide the layers we just copied (apart from the context layer).

Show all the wax blob layers including the bottom one ( ) and select them along with the context layer.

Copy and paste them into your go-between editor. It'll look like this (if you ain't cocked it up).

Ok we need to clean this up. Let's delete the from the each path's ids (e.g. becomes etc).

And as we did before, select all the gradient tags and copy/paste them into the tag in the CodePen HTML pane. No need to rename their ids and fill references.

Next select the blob paths (there should be six) and copy/paste those into the CodePen HTML pane under the last path (which should be the rectangle).

If you haven't had a mental breakdown by now at the sheer boringness of this bit then your code in CodePen should look like this:

Notice I've just added some comments in the between the blocks of gradients to show which ones refer to which.

Your CodePen preview pane should look like this - if it doesn't then SIT IN THE BIN:

Remember we put the into a ? Well now we'll use that to clip all the blobs so they look like they're inside the lava lamp but first we need to group all of the blobs together. That way we can clip the entire group in one go.

So, staying in CodePen, go and find the path with the id of and add a tag above it.

Go right down to below the last blob ( ) and close the tag with . That groups the blobs.

Now go back to the opening and add the clip path attribute like this:

This clip path references the tag we wrote earlier in the .

Your code in the CodePen pane should look like this:

Your CodePen preview pane should now show the clipped blobs like this:

We will be revisiting the SVG code once more after we've added the JS and that will be to add the filter to create the goo effect.

Right now it's time to so some actual proper JavaScript coding. We'll be using the GreenSock (GSAP) TweenMax library not only because it has everything we need, like TimelineMax, but also because it's completely awesome. Simple.

In the JS pane in CodePen, click the little cog icon, and if you're feeling lazy you can add it by selecting it from the Quick Add dropdown. Alas this adds an older version of TweenMax (vs. 1.16.1) which is perfectly fine but I prefer to keep things up to date so I suggest pasting in the latest version below:

The JS settings pane looks like this:

The code we'll write is mercifully brief - about 20 lines. I'll paste it all here, then break it down, line by line.

So the first thing we'll write is , a function I use all the time. You pass in a minimum and maximum value and it spits back a random value between them. We'll use this to add some randomness to durations and repeat delays.

Next is the GSAP instance. This will be the timeline to which we will add the individual TweenMax blob tweens.

Here we loop through the five blobs (excluding the bottom because that one doesn't move), creating five TweenMax instances, getting a reference to each blob's id using .

tells each blob to animate to 260 on its Y axis (i.e. down).

This highlights an important point about GSAP and the way it handles the initial X and Y position of SVG paths. As far as GSAP is concerned, when you animate a path from its initial position (i.e. the position it was pasted at from AI) it will treat its X and Y as 0,0 no matter where it actually is on the SVG canvas. So even though the blobs looks like they are around 250 on the X and 120 on the Y, they are considered to be at 0,0. This means that each blob will go 260 pixels down from its original, pasted position.

In that tween we also repeat the up and down animation forever using and we also control the delay between repeats. This is a another random value . We add in so it goes down, then up, then down, then up, like a yoyo, rather than going down to 260 then jumping back to its original position and going down again.

Finally we use a linear ease (no ease in or ease out) because this just looks more natural.

Still inside the loop we add that TweenMax tween instance ( ) to the main TimelineMax instance ( ), with each instance being added an equal distance in time apart along the timeline.

The timeline is now infinitely long and will repeat forever. If you started it from the beginning of the timeline it would take a while for each blob to start moving because the blobs have not been told to start animating all at the same time. Their start times are staggered.

So to finish off we tell the timeline to jump to around 100 seconds in just to make sure all the blobs are moving like this:

And that's all you need. Your pen should look like this (hopefully):

When you make LEGO vehicles the instructions always leave the wheels until last. I've sort of stolen that idea, just swap 'wheels' for 'goo'.

In the CodePen HTML pane paste the following tag into the tag (anywhere will do).

Nothing will happen until we apply it to the group of blobs. Go and find the tag that groups the blobs and add the following as an attribute.

So your tag now looks like this:

Your lava lamp should now be blobbing around nicely.



 

 I went through this tutorial myself and built the pen below following it (it's a slightly simplified version of the my original version but it looks exactly the same).

For the purposes of making these pens looks better in this post I've added in a bit of CSS to the body to stop any scrollbars.

As a little extra, if you're not completely happy with the timing of the blobs, try adding in a call after the line like this:

This will make the blobs go 12 times their normal speed for crazy-speed-blob-action!

So there you have it - we've covered quite a fair bit of stuff, from Illustrator tips and tricks, SVG filters and grouping to reusing elements using and changing the timing of the entire GSAP animation. And thankfully the code is pretty minimal due to GSAP being so damn powerful.

You can download the Adobe Illustrator file for the lava lamp here.

Now go and relax in the sumptuous glow of your new lava lamp - you've earned it!

Related posts: 

 Seven Stages of SVG 

 My First SVG Banner Ad|||

