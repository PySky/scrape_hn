Database-as-a-service (DbaaS) is a cloud service model that enables users to use databases without configuring physical hardware and infrastructure, and without installing software.

The service provider is in charge of administering tasks and maintenance — this means the user has less control over specific configurations than when using a self-hosted database.

Whether you create a new system or migrate your environment and data to the cloud, data residency is a critical element, in general, but especially when implementing a long-term infrastructure plan.

However, deciding between rehosting your MySQL on an EC2 instance or migrating your MySQL database contents to an Amazon RDS instance might not be an easy decision. 



 We’ve run some performance tests and cost calculations to provide information we hope will help you in the decision-making process.

Amazon RDS enables you to create your database in less than a minute using the AWS Management Console, Command Line Interface, or API calls.

Amazon RDS makes database maintenance very easy due to the many possibilities it offers, including automatic backups and point-in-time recovery, whereas in our own data center we’d have to spend much more time on database maintenance and setup.

Amazon RDS currently supports MySQL major versions 5.5, 5.6, and 5.7, as well as other databases, such as MariaDB, PostgreSQL, Oracle, Microsoft SQL Server, and the MySQL-compatible Amazon Aurora DB engine.

We can expect AWS to continue to expand their support to additional versions as they mature their service to serve more and more users.

As Amazon takes care of infrastructure, backups, and updates on the Amazon RDS DB instance, the shell access to the underlying operating system is disabled.

Keep in mind that access to MySQL user accounts with “SUPER” privilege isn’t allowed, and the configuration of dynamic and non-dynamic MySQL variables are handled through RDS parameter groups.

Unlike a hosted MySQL database, inside the MySQL Amazon RDS instance you cannot use Global Transaction IDs, Transportable Tablespace, Replication Filters, and Semi-synchronous Replication. Authentication and Password Strength plugins are also unavailable.

This is totally managed by AWS.

If you’re determined to have full control over your MySQL database, AWS provides a wide range of EC2 instances – with different hardware characteristics – on which you can run your database. This enables you to use all the advantages of AWS Cloud platform and services, as well as MySQL plugins and other MySQL features that are unavailable on Amazon RDS.

A comparison of the performance of self-hosted MySQL databases on EC2 instances and Amazon RDS MySQL instances can be conducted using the Sysbench tool.

We chose a single EC2 m4.xlarge instance and an RDS type db.m4.xlarge instance for the testing environment.

We used two scenarios to test the performance:

As shown in the tables above, the performance of MySQL on RDS DB instance is significantly higher compared to the self-hosted MySQL on the same instance type. It’s worth pointing out that we didn’t change the settings inside the my.cnf file on the EC2 instance.

Expenses for your Amazon RDS DB instance depend on several parameters.

The following table shows the cost calculation for m4.xlarge and db.m4.xlarge instances with 1TB io1 storage and 3000 IOPS.

As you can can see, it is not surprising that the managed database will cost you 30% more (on-demand cost model); and this is ignoring backup and additional replicas required.

Amazon RDS provides high availability and failover support for DB instances with Multi-AZ deployments. Multi-AZ deployments for MySQL use Amazon technology, while with MySQL hosted on EC2 instances you can use partial replication, Global Transaction Identifier replication, or traditional statement-based replication.

If your MySQL database is located on an EC2 instance for high availability, you can still use AZs and regions, but you'll have to configure it by yourself.

On self-hosted MySQL database, replication is asynchronous by default, and in cases where synchronous replication is required you should use a MySQL Cluster (Galera, Tungsten).

As you have access to the EC2 instance, you can install plugins and configure semi-synchronous replication; while for an automatic failover you will need to configure MySQL (MHA Master High Availability Manager).

In a Multi-AZ deployment, Amazon RDS automatically provisions and maintains a synchronous standby replica in a different AZ. To prevent any negative impact of the backup process on performance, Amazon RDS creates a backup from the standby replica.

In cases of planned or unplanned outages of your DB instance, Amazon RDS automatically performs a failover and that mechanism automatically changes the DNS record of the DB instance to point to the standby DB instance.

It’s important to note that the high-availability feature on Amazon RDS is not a scalable solution, and you cannot use a standby replica to serve read traffic.

Image 1. Master RDS instance and standby replica are in two different AZs

Amazon RDS makes it possible for you to create MySQL read replicas in an AWS region other than the one containing our master MySQL Amazon RDS instance.

This enables you to relocate read operations to the read replica located in the region nearest to your users and enhance your disaster recovery capacities, as well as migrate your database from one region to another.

Unlike the on-premises infrastructure for which you need to perform backup plans manually, Amazon RDS makes it possible to perform automatic backups and manual snapshots of the DB instance.

If your MySQL database is located on an EC2 instance then you have to take care of automating your MySQL EBS volumes snapshots. However, due to data consistency, you need to perform snapshots when there are no ongoing read operations. Otherwise, you might lose some of the data.

One method  is to use FLUSH TABLES WITH READ LOCK, which will prevent writing while still allowing data to be read from the database. You don’t have to wait until the snapshot is completed; you can release the locks as soon as you start creating the snapshot. You can also automate the process of creating snapshots using CloudWatch events or the AWS Command Line Interface.

DB instance scaling is another functionality that is made far more simple on Amazon RDS. You can vertically scale to address the growing demands of an application that uses a roughly equal number of reads and writes.

In an on-premises data center, you must manually upgrade your infrastructure, as well as manually add new components; whereas with Amazon RDS or MySQL hosted on EC2 instance, vertical scaling is accomplished with a click of a button.

When your database is on an EC2 instance, in addition to the fact that you can optimize its performance by altering MySQL configurations such as

innodb_buffer_pool_size, innodb_flush_neighbors, innodb_log_file_size, you can also scale and enhance performance with the great capabilities of the EBS volume.

For database workloads, we will focus on solid state drives (SSDs), EBS General Purpose SSD (gp2), and EBS Provisioned IOPS SSD (io1). As for gp2 volumes, volume size determines how many IOPS we’ll have in the 3:1 ratio.

For example, a 100GB gp2 volume can have maximum of 300 IOPS. With EBS gp2, the most IOPS we can have per volume is 10,000 IOPS. EBS Provisioned IOPS storage (io1) is high-performance storage designed to deliver fast and predictable consistent performance for very intense db workloads.

Io1 storage enables us to define the number of IOPS, regardless of the volume size. The maximum number of IOPS per io1 volume is 30,000 IOPS.

In cases where MySQL is on an EC2 instance and the maximum io1 IOPS per volume isn’t enough, we can turn to a software storage offering such as NetApp’s ONTAP Cloud.

ONTAP Cloud can multiple EBS volumes in a RAID 0 configuration to increase the number of IOPS you can receive out of a single storage pool. ONTAP Cloud can also ensure synchronous replication between availability zones, and data can be replicated between AWS regions.

Thanks to an EBS feature called Elastic Volumes, you can increase volume size, adjust performance, or change the volume type while the volume is in use. And, your database on EC2 will continue to operate normally.

With Amazon RDS, you can independently scale CPU, memory, storage, and IOPS. There is minimal downtime when you are scaling up on a Multi-AZ environment because the standby database gets upgraded first.

Horizontal scaling can be performed by using read replicas in order to enhance performance of read-heavy applications. On Amazon RDS, you can have up to five read replicas, while for hosted MySQL database, there is no limitation.

When you create a read replica, you specify an existing DB instance as the source. Amazon RDS takes a snapshot of the source instance and creates a read-only instance from the snapshot.

MySQL Amazon RDS uses native asynchronous replication to update the read replica. A read replica can be promoted into a master; however, it is not a replacement for the high availability that Multi-AZ provides.

When your database is hosted on Amazon, you are relieved of many of the headaches that come with hosting it on-premises. But this also means losing some flexibility as some of the MySQL features aren’t available on Amazon RDS.

So is Amazon RDS the right solution for your workload?

It depends. There is no one-size-fits-all solution — each company has its own needs and constraints.

That said, if a business is set on moving to the cloud, migrating the database is worth considering, especially when you take into account the  available cost-effective options.|||

This data will help you decide whether migrating your MySQL database contents to an Amazon RDS or re-hosting your MySQL on an EC2 instance is for you.