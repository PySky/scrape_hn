Among the many other hypes of the agile methodology comes the idea of pair programming. I’m using “hype” in this case in the most positive way possible — after all, our team at Code Runners has been following the agile way for some time now. The idea behind pair programming is, simply put, that two developers sit at one work station and write code together. Of course, it won’t be a popular development method, unless it has cool terminology — the person writing the code is called the “driver” and the one pointing fingers and giving feedback is called the “observer”.

Employers often times feel sceptical about pair programming, as it takes up the time of two developers working on a single feature. In a saturated market, where everything is about resource optimisation it’s sometimes counter-intuitive for senior management to understand why pair programming is a good practice.

It’s true — when you take the cost into consideration, it is indeed more expensive for two developers to work on a single feature that can otherwise be done by one. However, the ROI of pair programming is greater, when you consider something more intangible — increased productivity.

There are numerous studies on the subject, dealing with the exact amount of productivity increase and the reasons behind it. In one of them, a pair of programmers working on a single problem produced 175 lppm (lines per person-month), compared to 77 lppm written by a lone developer. You might argue that a higher number of written lines doesn’t necessary mean better quality. Still — it’s a pretty huge difference.

From our own experience, our colleagues admit that they code smarter and more carefully, in order to impress their coding buddy or simply to avoid embarrassment from poorly written code — something an individual programmer doesn’t automatically think about. This process cuts the amount of bugs from the final version and facilitates a faster release, ultimately optimising the cost of development.

Basically, the amount of time spent on debugging after an individual programmer can be the same as two developers working on the same feature. It evens out in terms of time, but you also get the added value of higher quality code and developers who actually learn more in the process.

The popular notion is that developers are introverts and would rather like to work alone and not communicate with others. There’s also another side to this — developers love learning new skills and improving what they already know. Working side-by-side with a fellow programmer helps them gain more experience at what they do, while advancing the project at the same time. They receive another point of view, which they otherwise might not have seen on their own.

In fact, surveys show that 90% of developers asked about pair programming, report they enjoyed it more than working alone. It’s a natural human behaviour — we feel more at ease when there’s a person we trust overseeing our progress.

Another effect of pair programming that ultimately saves time is the increased focus on a given task. Everyone has been the victim of that short YouTube video or that person who wrote us on Skype with a question. Distracting yourself from a task will, in most cases, require a lot of time and effort to get your focus back on the task and complete it error-free. Those minor distractions tend to be ignored when discussing your work with another programmer.

Of course, some developers do prefer working alone and concentrate better while doing so. This should be respected and forcing someone to work in pairs will only have negative effects. Another important disclaimer is that once two programmers work together it’s not set for life. It’s actually better to mix up the pairs and diversify the knowledge spread between your team. It also bonds the team together and makes everyone familiar with a given project, allowing for a more flexible team arrangements.

To recap — pair programming can not only cut costs in the long run, but also make your team better at what they do, while also making them happier at work. Still, it’s far from a universal truth and as a product owner, you should consider the whole situation before choosing to go that way.|||

Among the many other hypes of the agile methodology comes the idea of pair programming. I’m using “hype” in this case in the most positive way possible — after all, our team at Code Runners has been…