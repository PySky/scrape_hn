Note: The visualization/plotting functionalities of Rperform will be improved and expanded upon over the next few weeks. Keep checking back to stay updated.

Rperform currently has two class of functions for plotting package metrics. They respectively deal with:

The plotting functions, like most of the other Rperform functions, are designed to work in harmony with hadley's testthat package. However, they will work fine with the packages not employing testthat as well. Read on for further explanation.

Go straight to the examples if you want to skip the theoretical details. However, going through the below detail would be helpful towards grasping the plotting functions completely.

Before diving into the specific functions, one bit of information might be helpful. The parameter key to using the functions effectively is metric. There are three options the metric parameter any plotting function of will accept:

Further, depending on the kind of analysis required (across a single branch or comparison across two branches), different types of plots will be returned. Go through the below examples for a clearer understanding.

Note: For each individual commit, three values of a particular metric are measured and plotted. Hence, the multiple values for a single commit exist on the plots. Many a times the values simply overlap.

-> The most basic function of this class is the function. We will use the package stringr for demonstration purposes.

*Setting save_plots to TRUE will result in the generated plots being stored in the 'Rperform_Data' directory in the root of the repo rather than being printed on the screen. Similary setting save_data to TRUE will result in the data-frame containing the metrics information being stored in the 'Rperform_Data' directory the root of the repo.

-> The next two functions in this category provide the same functionality as but for the entire directory of test files rather than just a single one. They are: and .

: Given a directory path, plot the memory and time usage statistics of all files in the directory against the commit message summaries of the specified number of commits in the current git repository.

: Plots specified metrics for all the tests present in the specified directory of the current git repository on a webpage.

Note 1: For each individual commit, three values of a particular metric are measured and plotted. Hence, the multiple values for a single commit exist on the plots. Many a times the values simply overlap.

Note 2: The commit on the left-hand side (LHS) of the vertical line in the below plots is the latest commit from the branch provided as the parameter, 'branch2'. The right-hand side (RHS) contains the commits from the branch provided as the parameter, 'branch1'. The commits on the RHS run from branch1's latest commit until the first commit common to 'branch2'. This will be helpful in cases when the developer wants to merge one branch (branch1) into another (branch2). That's why the default value of branch2 is 'master'.

-> The function can be used to compare performance across two branches (keeping in mind the details from Note 2).

Setting will work similarly as explained in the examples for single branch functions in the previous section.|||

Rperform - :bar_chart: R package for tracking performance metrics across git versions and branches.