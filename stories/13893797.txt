OMEN is a Markov model-based password guesser written in C. It generates password candidates according to their occurrence probabilities, i.e., it outputs most likely passwords first. OMEN significantly improves guessing speed over existing proposals. If you are interested in the details on how OMEN improves on existing Markov model-based password guessing approaches, please refer to OMEN: Faster Password Guessing Using an Ordered Markov Enumerator.

OMEN consists of two separate program modules: and . calculates n-gram probabilities based on a given list of passwords and stores them on the hard disk. Based on these probabilities enumerates new passwords in the correct order (descending).

Use a recent Linux version make sure you have installed (Git version control system), (GNU Compiler Collection), and (GNU Make). You can install it under Ubuntu Linux via:

Check out the source code via:

Change into the newly created directory and run:

If compilation is successful, you can find and within the current directory.

If you like, you can now remove the folder and the file, they are no longer used.

Before one can generate any passwords, the n-gram probabilities have to be estimated using . To calculate the probabilities using the default settings, must be called giving a path to a password list that should be trained:

Each password of the given list must be in a new line. The module then reads and evaluates the list generating a couple of files. Besides a config file ( ) storing the used settings (in this case the default setting), several files are created containing information about the grams and the password length. These files have the extension ' ':

The probabilities of each n-gram and the lengths are mapped to levels between 0 (most likely) and 10 (least likely). Once those files are created, can be used to generate a list of passwords ordered by probabilities. Currently, supports three modes of operation: file, stdout, simulated plaintext attack. In the default mode of , a list of password guesses based on these levels is created. Using the command

generates 1 billion passwords and stores them in a text file, which can be found in the 'results' folder. The passwords in this file are ordered by level (i.e., by probability). Since common text editors are not able to handle such huge files, it is recommended for testing to reduce the number of passwords created. This can be done using the argument .

It will create an ordered list with 10,000 passwords only. If you are interested in printing the passwords to the standard output (stdout) stream use the argument .

If you are interested in evaluating the guessing performance against a plaintext password test set use the argument . Please note: In this mode OMEN benefits from the adaptive length scheduling algorithm incorporating live feedback, which is not available (due to the missing feedback channel) in file and stdout mode.

The result of this evaluation can be found in the 'results' folder.

Both modules provide a help dialog which can be shown using the or argument.

How to get from to ?

OMEN was developed for academic use cases like improving probabilistic password modeling, estimating guess numbers or password strength, in general, to improve password security. Do not abuse this software to harm other people's privacy or to break the law.

Popular hash evaluators like Hashcat and John the Ripper support hundreds of hash and cipher formats and could be easily integrated due to their support to read password candidates via their standard input (stdin) stream.

For optimal guessing performance, consider to train with a password distribution that is similar to the one you like to crack.

Please note: Using probabilistic password modeling to crack passwords, in general, should only be considered against slow hashes (e.g., bcrypt, PBKDF2, scrypt, or Argon2) were the number of feasible guesses is limited or in very targeted attacks. In contrast, for very fast hashes (MD5, SHA-1, or NTLM), using good dictionaries and mangling rules (e.g., best64.rule) are the way to go.

If you are interested in this topic, consider to read the following papers and their related work (this list is incomplete, you can help by expanding it):

Both modules provide several command line arguments to select the various modes available and change the default settings. For instance, the probability distribution created during the process may be manipulated by choosing one of the supported smoothing functions, the n-gram size, or the used alphabet. All available parameters for , a short description, and the default values can be seen by calling the program with or . The same works for where for instance, the enumeration mode, the used length scheduling algorithm (only used in mode, see 'Basic Usage' section), and the maximum amount of attempts can be selected. If no enumeration mode is given, the default mode is executed, storing all created passwords in a text file in the 'results' folder.

OMEN+ is based on When Privacy Meets Security: Leveraging Personal Information for Password Cracking and is an additional feature of OMEN (implemented in the same binary). Using additional personal information about a user (e.g., a password hint or personal background information scraped from a social network) may help in speeding up the password guessing process (comparable to John the Ripper 'Single crack' mode).

Therefore, a related hint or several hints (tabulator separated) must be provided in a separate file. Furthermore, an alpha file is required containing the respective alpha values (tab separated in one line). Alpha values are used to weight the impact of the provided hints. Important is that for each hint in a line an alpha has to be specified in the alpha file. These alphas have to be in the same order as the hints per line.

Exemplary, we want to guess the password "Mary'sPW2305". The corresponding line in the hint file containing first name, username, date of birth, and email address looks like the following:

An alpha file should order the related alpha values for first name, username, date of birth, and email address in the same order as in the hint file. In example:

For the usage of OMEN+ must be called giving a path to a hint and an alpha file:

The smoothing function is selected and configured using a configuration file ( ). The file must contain the name of the smoothing function and may contain the values for any variable parameters. The file should be formatted like this:

At this time, the only supported smoothing functions are none or additive smoothing.

Notice, one value for a single target overwrites the one set for all.

An exemplary for the add1(250) (Additive Smoothing (δ=1), Level Adjustment Factor of 250) smoothing setting:

Besides the two main modules and , OMEN provides two other program modules: and . evaluates a given password and creates an alphabet with the most frequent character in a given password list. Both modules should be considered experimental.

It reads a given password and evaluates its strength by returning a password-level. The result is based on the levels generated by . The password-level is the sum of each occurring n-gram level, based on the level lists IP, CP, and EP. The current implementation of is only a prototype and does not support the whole possible functionality and contains lots of bugs. For example, the actual password length does not influence the password-level. Therefore, only passwords with the same length can be compared to each other.

If you want to limit OMEN to passwords complying to a given alphabet you can specify this in the configuration file ( ). To determine the most promising alphabet, the might be able to help you. The program module creates a new alphabet based on a given password list. The characters of the new alphabet are ordered by their frequency in the password list, beginning with the highest frequency. The length of the alphabet is variable. The created alphabet is based on the 8-bit ASCII table according to ISO 8859-1 (not allowing ’

’, ’\r’, ’\t’, and ’ ’ (space)). Characters that are not part of this table are ignored. Also, an existing alphabet may be extended with the most frequent characters.

The Ordered Markov ENumerator (OMEN) is licensed under the MIT license. Refer to docs/LICENSE for more information.

Visit our website and follow us on Twitter. If you are interested in passwords, consider to contribute and to attend the International Conference on Passwords (PASSWORDS).|||

OMEN: Ordered Markov ENumerator - Password Guesser