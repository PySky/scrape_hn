There are different types of  , namely:

So we have three types of polymorphism (isn't that just polymorphic? :-) ).   we know from good old  . The difference between   and   is intriguing, though. They both use   in order to allow code to run on different types. When you have   polymorphism, you define some shared functionality and you have a  . Now, whenever you run this code and supply the  , this shared code will run with this  . The difference, however between, this and   is that   "examines" the types ad hoc polymorphism is utilizing a possibly different implementation based on types. So, in standard  , it's the same code running on different types. Meanwhile, in  , it would be different code based on the actual type.

Well, parametric polymorphism, like the name says, is just parametric. We specify a function with a generic parameter, then, when we instantiate that function or whatever, we specify our current type, which then gets applied to the function.

Let's see an example:

We have a generic implementation of a  . We don't specify what type that stack is, and it will always run the operations on a generic list like  or . Whatever we put in that   would get placed on a generic   and thus would run the same operations. Le's try it.

So you see, we pushed a   and it printed  . Nothing special.

With ad hoc polymorphism, we can actually   the behavior of the generic code based on the type we polymorph on! Let's see an example:

In the above implementation, we call an additional function from within the   generic implementation:  ;

And that   is different based on the type. You see we have one   for   and another for  , so our generic implementation changes according to the type we polymorph on See the below example:

We have three types of polymorphism: subtype, ad hoc, and generic. Subtype is the standard OOP polymorphism. With generic, we specify a generic code to run on various types, and with ad hoc polymorphism, we can change the generic code run based on the actual type polymorphed on!|||

Scala's various polymorphic capabilities are all useful, but ad hoc polymorphism lets you augment your types to a given situation.