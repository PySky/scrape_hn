In this post I will show how I implemented the commenting feature for my blog using a microservice api.

I previously described how I wrote the UI for my commenting feature using Svelte.

This article will focus on the backend of my commenting feature.

Microservices as a pattern has become a fairly popular choice when architecting application apis. The basic idea is to split your code into smaller units, or services. The term “micro” comes from giving each service/api a very target area of responsibility.

My blog was originally implemented as a single Node/Express application. However, I figured it would make sense to split out the comment api as a separate node application.

Not only does this reduce complexity in the original application. It also helps share some of the user load between two applications.

My blog is deployed to a low-end tier in Azure, which means I am subject to resource quotas at the application level. Shifting some of the load to another application will make my blog more scalable.

When the main application serves a blog post, comments are loaded asynchronously from the new comment api. My comment api supports CORS, so the comment requests are made directly from the browser.

The first part is the server itself. Essentially the "server" boils down to configuring an api with CORS enabled endpoints. Most of the logic is delegated to CommentService.

Next up is CommentService.

CommentService is where I load comments from MongoDB by articleId, and build a recursive tree of comment threads.

The comments are stored as individual documents in a single MongoDB comment collection. CommentService has logic to parse the flat list of documents into a tree of connected comments.

CommentService is also responsible for maintaining a cache of already loaded comments.

One of the great things about working in Node is that you can use es6 syntax without worrying about transpilation. Node will execute things like promises and classes directly.

I am using Mongoose to talk to MongoDB. Here is my Mongoose schema:

The last piece is a Comment class used to represent comments in the UI. The comment api returns a tree of objects of type Comment.|||

