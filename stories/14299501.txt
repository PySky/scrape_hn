F# compiles down into the same IL code as VB and C#. This means that you can have a solution that contains both C# and F# projects. There are lots of guidelines on how to write F# code that is compatible with C# projects. You can find the official ones here.

But why are there guidelines? Why do we have to write F# differently depending on what language is consuming it? What happens if you just write F# code without following the guidelines and then try and use it from C#?

F# is a multi-paradigm language. It can be used to write functional or object orientated code. OO code in F# (such as classes or interfaces) can be accessed just fine from C#.

The following F# code creates a class that inherits from an interface:

This code is easy to consume from C#:

This is because C# (obviously) already has support for classes and interfaces. But what about some of the language constructs in F# that simply do not exist in C#?

The rest of this article will cover what some of these constructs look like when they are exposed to C# projects without being wrapped up in an OO friendly class like the one above. This article is not a guide to the recommended best practices, but instead aims to offer some insight into what F# compiles down to and justifies why the guidelines are needed. This article covers F# 4.1 and C# 7.

F# projects do not have a default namespace option in their project settings. If you do not put a module in a namespace, then it becomes available globally in any C# projects that reference its project.

Can be consumed in C# like so:

Note that the C# code does not require a statement to use the F# module. If we add a namespace to the module:

Then a statement is required in the C# project:

As shown in the namespace section of this article, modules are exposed to C# as static classes. If you want to replicate being able to a module from C#, you can use a statement like so:

These values are exposed to C# as properties with a getter:

Modules can also contain mutable values:

Mutable values are exposed to C# as properties with a getter and setter:

As shown in the modules section, F# functions are exposed as you’d expect. In F#, functions are curried and can be partially applied. When accessing an F# function from C#, this functionality is not available. You must provide all parameters to a function when calling it.

F# records are exposed to C# as classes that take in all of their properties in their constructor. The following F# record contains a , an and an :

This record is exposed to C# as a class with the following signature:

Records have the following characteristics when used from C#:

This means records work exactly as you would expect in C#:

A very brief history of tuples types in .NET:

According to the MSDN docs for the ValueTuple, there are three main differences between the Tuple and ValueTuple:

This article explains the design decisions C# took when creating the ValueTuple.

Let’s see how F# tuples (System.Tuple) can be used in C#.

The following F# function takes in a tuple and returns a tuple:

It can be consumed in C# like so:

The following F# function takes in and returns a tuple that contains a tuple:

It can be consumed in C# like so:

Below is the code that the nested example above gets compiled down to:

Let’s see how C# tuples (System.ValueTuple) created in F# can be used in C#. To create a C# tuple in F# the keyword is used.

The following F# function takes in a tuple and returns a tuple:

It can be consumed in C# like so:

The following F# function takes in and returns a tuple that contains a tuple:

It can be consumed in C# like so:

Below is the code that the nested example above gets compiled down to:

I’m sure it will come as no surprise to you that C# tuples work better in C# than F# tuples.

There are two types of discriminated unions in F#. Those that contain compile-time constant values and those that contain types.

Discriminated unions that contain values are compiled down to enums and are therefore easy to consume in C#.

Is compiled down to the following enum:

F# has support for using s as values but these types cannot be used in C#. The following F# type:

Gives the following error in C#:

The most common form of discriminated unions however, have cases that are either empty or contain types.

Is exposed to C# as a class with the following signature:

As you can see from the signature above, the class exposes three properties (Error, Warning and Info). These properties return instances of the . This class is so nothing can inherit off it, this means we know that the objects returned by these properties are of the type and not a sub-class.

C# 7 has introduced very basic pattern matching that allows us to use the statement to switch on an object’s type. Unfortunately, we cannot use C#’s new pattern matching with this type, as each case is not given its own type to match onto.

This means we switch using the tag instead. This is less elegant:

Now let’s look at the following F# type:

This type is exposed to C# as a class with the following signature:

This time the compiler has created sub-classes for us, so C# pattern matching does work on this type:

Somewhat annoyingly, the union case’s contents are put inside an property. This isn’t as succinct as an F# match expression, where the value is unpacked into a local variable for you. I guess this is more an issue with the C# switch statement than it is with the discriminated union itself.

It would be much more reasonable if discriminated unions with empty cases were either compiled down to enums or were given empty sub-classes. Empty sub-classes would be better as it would cover discriminated unions that have both empty and none-empty cases.

Functions that return unit, return void in C#. The following pointless F# code takes in unit and returns unit:

This function is exposed to C# as a method that has no parameters and returns void:

So far so good. But what happens if we write a really (really) pointless function that takes in a tuple (that contains a value and unit) and then returns the same tuple flipped:

To consume this function, we are asked to reference FSharp.Core:

Before finding out that we cannot instantiate unit anyway:

Instead of constructing the unit type however, we can simply pass in null like so:

The following F# module contains a function that takes in another function as its second parameter:

It is exposed to C# as a class with the following signature:

Unfortunately, this function does not expose itself to C# in the way you’d expect. Instead of finding the C# friendly type as the second parameter, we find a new type called . Consuming this function in C# is not pretty:

We have to use a converter to convert a C# type into the equivalent type. I’m sure there are good architectural reasons why they both have different func types, but it sure would be nice if the compiler did the heavy lifting here for us, like it does with the unit type and void.

The following F# module contains a function that returns an option type:

It is exposed to C# as a class with the following signature:

To consume this function in C# we must reference FSharp.Core - just like we did for the unit type:

We can assign values to option types without a hitch in C#:

Unfortunately, options become pretty useless once we want to access the values we’ve assigned to them. The option type does not expose much to C# 7 projects.

Below is a screenshot of Intellisense when using an instance of the option class:

Below is a screenshot of Intellisense when using static methods in the option class:

One surprising thing I found was that the property returned null.

Due to the lack of functionality exposed by the option type to C#, it becomes awkward to use:

As you can see you lose all the benefits of the option type in C#. If you want use something like the option type in C#, you’ll have to stick with one of the already well established NuGet packages like Strilanc.Value.May.

There are three main types of collections in F#.

The following F# module contains a function that returns :

It is exposed to C# as a class with the following signature:

is an alias for so is perfectly consumable from C#.

The following F# module contains a function that returns an F# :

It is exposed to C# as a class with the following signature:

As you can see, F# lists are not the same as C# lists. F# lists are immutable linked lists, so they differ in their implementation to C# lists.

To consume this function in C# we must reference FSharp.Core - just like we did for the unit and option types:

We can then consume the list like so:

F# lists are easy to consume from C#, although it is always better practice to expose s to your C# projects. It is also worth mentioning that, as of F# 4.1, the type also implements the interface, so that can be used instead. The following example demonstrates this:

The code above still requires a references to FSharp.Core. It would be much nicer to consume F# lists in C# if they were exposed using this more C# friendly interface. Just like how the type is exposed as the C# friendly interface.

If you want to return a C# from an F# function, then you must return the type which acts as an alias to the C# list type.

The following F# module contains a function that returns an F# :

It is exposed to C# as a class with the following signature:

Arrays are the same in F# as in C# so they perfectly consumable from C#.|||

A brief overview of how F# code is exposed to C# projects