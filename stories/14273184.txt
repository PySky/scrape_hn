The IoT revolution also depends on the spread of LPWAN (Low Power Wide Area Network) and the LoRaWAN protocol, defined by the “LoRa Alliance“. In more detail, LoRaWAN is a media access control (MAC) protocol for wide area networks. It is designed to allow low-powered devices to communicate with Internet-connected applications over long range wireless connections.

The TTN (The Things Network), a global community of people over 84 countries, is building a global Internet of Things data network based on LoraWAN. Tale a look at these terms to have a better overview of this technologies:

In this tutorial, we’ll see how to create a LoraWAN network programmed in Python using Zerynth and connected to The Things Network. In particular, we’ll see how to:

Follow the official Link Labs guide for more detailed info.

The first step is to get the root password, so you can install whatever packages are needed.  To get the root password you have to send your gateway ID, which is accessible on the local web page, at community@link-labs.com, as reported in this thread on the TTN forum.

Once you have the root password, access to the gateway through ssh protocol and follow this guide to setup and configure the router to auto connect to TTN.

Now you have to register your gateway to TTN, following this link.

First of all, you have to build an Application through the TTN console. So, go to the Application page and clicking on “add application” a new page, similar to the one below, will open.

Enter a unique Application ID as well as a Description & Handler Registration.

Then, to send data up to the new Application you just registered, you need to register your LoraWAN nodes.

To do this, navigate to the “Devices” tab on the Application home page and click the “Register Device” button.

In the Register Device panel, you’ll need to complete the forms for the Device ID and the Device EUI, that must consist of exactly 8 bytes, given in hexadecimal. You can get this code directly from your board, following the instructions below.

It’s time to use Zerynth to program your board in Python and get the needed Device EUI of you LoraWAN module. In particular, we’ll use the Zerynth library for the RN2483 LoraWAN chip, mounted on the LoRa Click by Mikroelektronika.

Once you have installed Zerynth Studio and created a Zerynth user, you can clone the example “get ui“. You can find the example in the “Examples Browser” panel or you can use the “Quick Search” feature, searching for “rn2483”.

Once you have cloned the example, uplink the code to your board. As you can see below, the Python script is very very simple.

Note that the LoRa Click has to be connected to the block A of the Flip&Click. If you want to use another block you have to change the parameter of the function rn2483.get_hweui().

Opening the serial monitor you can get the Device UEI you need to register the device in the TTN console.

Now return to the Register Device Panel on the TTN Console, insert the code and click on the “Register” button.

We are almost ready to send our first data from the LoraWAN module to the TTN console. To do this we need to uplink another very simple Python script into our board. Cloning the example “ping” you’ll see something like this:

Edit the lines 8 and 9 with the “appeui” and the “appkey” that you can find in the Device Overview on the TTN Console.

Uplink the code and you’re done!

Now click on the “Data” tab of the TTN Console and you can see your data sent by the LoraWAN module!

In the next tutorials, we’ll see how to retrieve data from the TTN Console to develop a Map Dashboard of a distributed sensor logging network, as we announced during the Embedded World 2017.|||

In this tutorial, we'll see how to create a LoraWAN network programmed in Python using Zerynth and connected to The Things Network.