For Node.js developers, is an everyday tool. It's literally something we interact with multiple times on a daily basis, and it's one of the pieces of the ecosystem that's led to the success of Node.js.

One of the most useful, important, and enabling aspects of the CLI is that its highly configurable. It provides an enormous amount of configurability that enables everyone from huge enterprises to individual developers to use it effectively.

One part of this high-configurability is the file. For a long time I'd seen discussion about it - the most memorable being the time I thought you could change the name of the directory with it. For a long time, I didn't truly understand just how useful the file could be, or how to even use it.

So, today I've collected a few of the optimizations that allows that have been awesome for speeding up my personal workflow when scaffolding out Node.js modules and working on applications long-term.

When you're creating a new module from scratch, you'll typically start out with the command. One thing that some developers don't know is that you can actually automate this process fairly heftily with a few choice commands that set default values for the prompts.

You can easily set your name, email, URL, license, and initial module version with a few commands:

In the above example, I've set up some defaults for Hiro. This personal information won't change too frequently, so setting up some defaults is helpful and allows you to skip over entering the same information in manually every time.

Additionally, the above commands set up two defaults that are related to your module.

The first default is the initial license that will be automatically suggested by the command. I personally like to default to , and much of the rest of the Node.js ecosystem does the same. That said, you can set this to whatever you'd like - it's a nice optimization to just be able to nearly automatically select your license of choice.

The second default is the initial version. This is actually one that made me happy, as whenever I tried building out a module I never wanted it to start out at version , which is what defaults to. I personally set it to and then increment the version as I go with the command.

As time moves forward, we're seeing more options for registries arise. For example, you may want to set your registry to a cache of the modules you know you need for your apps. Or, you may be using Certified Modules as a custom npm registry. There's even a separate registry for Yarn, a topic that is both awesome and totally out of scope for this post.

So, if you'd like to set a custom registry, you can run a pretty simple one-line command:

In this example, I've set the registry URL to an example of a Certified Modules registry - that said, the exact URL in the command can be replaced with any registry that's compatible. To reset your registry back to the default npm registry, you can simply run the same command pointing to the standard registry:

When you a bunch of information gets piped to you. By default, the command line tool limits how much of this information is actually output into the console when installing. There are varying degrees of output that you can assign at install, or by default, if you change it with in your file. The options, from least to most output, are: , , , , , , and .

Here's an example of the loglevel: 



And here's an example of the loglevel: 



If you'd like to get a bit more information (or a bit less, depending on your preferences) when you , you can change the default loglevel.

If you tinker around with this config a bit and would like to reset to what the CLI currently defaults to, you can run the above command with as the loglevel:

This is a really awesome change - it has a few steps, but is really worth it. With a few commands, you can change where the CLI installs global modules by default. Normally, it installs them to a privileged system folder - this requires administrative access, meaning that a global install requires access on UNIX-based systems.

If you change the default global prefix for to an unprivileged directory, for example, , you'll not need to authenticate when you install a global module. That's one benefit - another is that globally installed modules won't be in a system directory, reducing the likelihood of a malicious module (intentionally or not) doing something you didn't want it to on your system.

To get started, we're going to create a new folder called and set the npm prefix to it:

Next, if you don't already have a file called , create one in your root user directory. Now, add the following line to the file:

Adding that line to the file will add the directory to your PATH, and enable you to use it for npm global modules.

Now, flip back over to your terminal and run the following command to update the PATH with the newly updated file:

If you'd like to keep reading about Node.js, npm, configuration options, and development with the Node.js stack, I've got some fantastic articles for you.

Our most recent guide is a deep-dive into the core concepts of the package.json file. You'll find a ton of info about in there, including a ton of super helpful configuration information. We also published an absolute beginner's guide to npm that you may be interested in reading - even though it's a beginner's guide, I'd bet you'll find something useful in it.

With this article, the intent was to help you set up a great configuration for Node.js development. If you'd like to take the leap and ensure that you're always on a rock-solid platform when developing and deploying you Node.js apps, check out NodeSource Certified Modules - it's a new tool we launched last week that will help enable you to spend more time building apps and less time worrying about modules.|||

We've collected a few of the optimizations that the .npmrc file allows to speed up your workflow when creating with Node.js.