[ Every Sunday I put out a curated list of the most interesting stories in infosec, technology, and humans. I do the research, you get the benefits. Subscribe. ]

There are 4,257 tutorials on tmux. That’s a rough number that I just made up. This one is designed to take you from “wtf tmux” to “omg tmux” with extreme haste.

is useful to people in different ways. To me, it’s most useful as a way to maintain persistent working states on remote servers—allowing you to detach and re-attach at will.

You could, for example, have a session on your server for hacking on a node REST API (my current project), and call it “nodeapi”. And let us say that you are compiling something for it that will take two hours (work with me), but you’re currently working at a coffee shop and you have to leave. lets you simply detach from that session and come back to it later.

Others like to focus on how you can use tmux to have multiple panes within multiple windows within multiple tabs within multiple sessions. I don’t do that. I like fewer of those—as few as possible, actually—and this guide will be focused on a simple persistent-remote-sessions model.

Mobility is a central theme for tmux users. Many developers do all of their work from the server, and simply connect in from to do it. (and similar tools) allow you to work from a coffee shop in SF, start something building on the server, disconnect to take a flight, and then pick up that same task on the ground in NYC when you land.

A related advantage to this mobile approach is the fact that your client machine is not too terribly important. You can upgrade your laptop, clone a repo with your vim/tmux dotfiles in it, and you’re back to your optimum computing environment in minutes rather than days.

Anyway, those are some reasons that people love tmux, but you don’t have to make this lifestyle change in order to see its benefits.

Good question. is a lot like screen, only better. The short answer for how it’s better is that tmux is better designed to perform the same functions. Screen gets you there (kind of) but does so precariously.

Here are a few of the key advantages of tmux over screen:

Enough about that. Use tmux.

Now is a good time to mention that there is a universal tmux shortcut that lets you quickly perform many tasks.

By default, tmux uses as its shortcut activation chord, which enables you perform a number of functions quickly. Here are a few of the basics:

…followed by a number of options that we’ll talk about below. But get ready to use that combo. Also consider remapping CAPSLOCK to CONTROL within your operating system; it makes the pinky walk for quite nice.

Right then. Let’s start by running . You want to do this from the system that you want to detach and re-attach to—which for me is usually a remote server.

Simple enough. You now have a tmux session open that you can disconnect from and come back to later.

Since the idea of tmux is having multiple sessions open, and being able to disconnect and reconnect to them as desired, we need to be able to see them quickly.

Either way you get the same thing:

Now we’re going to create a new session. You can do this with just the new command, or by providing an argument to it that serves as the session name. I recommend providing a session name, since organization is rather the point of tmux.

# Without naming the new session (not recommended)

Since we’re going to be creating sessions with names, and we may have more than one, we want to be able to attach to them properly. There are a couple ways of doing this.

You can simply type and it’ll connect you to the first available session.

Or you can attach to a specific session by providing an argument.

You can detach from an existing session (so you can come back to it later) by sending the detach command.

Or you can use the shortcut.

There are times when you’ll want to destroy a session. This can be done using the following syntax, which is much the same as attachment:

[ NOTE: You can kill windows the same way, but using instead. You can also kill tmux altogether with . ]

As with most things in tech, you can get pretty silly with your tmux config. The common things to tinker with are:

One thing worth noting here is that I use ipecho.net to get my current WAN IP4 WAN address instead of icanhazip as most other tutorials have. It’s just faster and less prone to error, from my experience.

[ My current, updated configuration can be found here if you’re interested. ]

That covers how I usually use , but I do often make use of some of the more powerful features.

One of these features is the ability to break your session into more discreet components, called windows and panes. These are good for organizing multiple varied activities in a logical way.

Let’s look at how they relate to each other.

sessions have windows, and windows have panes. Below you can see how how I conceptualize them—although if anyone has a more authoritative or useful hierarchy I’ll happily embrace it.

It’s also possible to create panes within a session without first creating a separate window. I do this sometimes. Hopefully it isn’t as horrible as it sounds right after reading about nesting. As I said in the beginning, I incline towards simplicity with my use of .

There’s a default way to navigate between panes, but I don’t know what it is. I’m a vim guy, so I navigate within my panes using the h, j, k, and l keys like so:

A few thoughts that may help you in your travels:

I hope this has been helpful.

[ If you liked this, check out my other technical primers here. ]|||

Intro Why Tmux? What About Screen? Basics The tmux Shortcut Invocation Show Sessions Create a New Session Attach to an Existing Session Detaching from an E