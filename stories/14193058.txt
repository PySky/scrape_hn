Pandemonium is a dead simple JavaScript library providing typical random-related functions such as , etc.

The library also provides a way to create any of the available functions using a custom random source (seedrandom, for instance).

Function returning a random item from the given array.

Function returning a sample of size from the given array.

This function runs in time & memory but is somewhat dangerous because it will mutate the given array while performing its Fisher-Yates shuffle before reverting the mutations at the end.

Function returning a sample of size from the given array.

This function works by keeping a of the already picked items and choosing a random item in the array until we have the desired items.

While it is a good pick for cases when is little compared to the size of your array, this function will see its performance drop really fast when becomes proportionally bigger.

Function returning a random index of the given array.

Function returning a sample of size from the given array.

This function uses a partial Fisher-Yates shuffle and runs therefore in time but requires memory.

If you need faster sampling, check out or .

Function returning a shuffled version of the given array using the Fisher-Yates algorithm.

If what you need is to shuffle the original array in place, check out .

Function shuffling the given array in place using the Fisher-Yates algorithm.

Function returning a random item from the given array of weights.

Note that weights don't need to be relative.

; { } ; [ , , , , ]; (array); To create your own function using custom RNG { } ; (rng); If you have an array of objects ({ rng rng, ( , ) { . ; } }); [{fruit , weight }, {fruit , weight }]; (array); If you intent to call the function multiple times on the same array, you should use the cached version instead: { } ; [ , , , , ]; (rng, array); ();

Function returning a random index from the given array of weights.

Note that weights don't need to be relative.

; { } ; [ , , , , ]; (array); To create your own function using custom RNG { } ; (rng); If you have an array of objects ({ rng rng, ( , ) { . ; } }); [{fruit , weight }, {fruit , weight }]; (array); If you intent to call the function multiple times on the same array, you should use the cached version instead: { } ; [ , , , , ]; (rng, array); ();

Contributions are obviously welcome. Please be sure to lint the code & add the relevant unit tests before submitting any PR.|||

pandemonium - Typical random-related functions for JavaScript.