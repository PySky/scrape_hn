I think we all agree that unit tests are important. I had been using nUnit before I wrote first UWP application. This was the best solution for me: simple and effective. When I was writing my first UWP application, I want to use my favourite nUnit framework. Unfortunetly it was impossible (or I cannot find solution). Unit tests in UWP app are difference than “older” .Net applications.

When you want test UWP application, you don’t need to add normal test library. Instead of this you must add test application (Unit Test App).



 Added application include MSTest reference, which we must delete.

After that we should add xUnit reference. We can do this in three ways:

 1. In Solution Explorer, find and open the project.json file. Add dependencies on the xunit and xunit.runner.visualstudio packages (as shown below):

2. Add nuGet xunit and xunit.runner.visualstudio packages to project from menu: Tools => NugetPackageManager => Manage NuGet Packages for solution… I think everybody know this window already 🙂

 3. Run “Package Manager Console” from menu or by CTRL + V,E,O (there is nodefault shortcut in visual studio) and write in it “install-package xunit” and “install-package xunit.runner.visualstudio” – this run nuGet installation.



 Ok. We have test environment installed. Let’s say few words about xUnit.. Anyone who has used nUnit before shouldn’t have problem with xUnit. Main differences:

Why? xUnit statement: “We believe that use of [SetUp] is generally bad. However, you can implement a parameterless constructor as a direct replacement. The xUnit.net team feels that per-test setup and teardown creates difficult-to-follow and debug testing code, often causing unnecessary code to run before every single test is run.

 We believe that use of [TearDown] is generally bad. However, you can implement IDisposable.Dispose as a direct replacement.”

In xUnit you cannot create tests that return exception as result. Whe we use xUnit we must specific set of code for throwing an exception.

 “Long-term use of [ExpectedException] has uncovered various problems with it. First, it doesn’t specifically say which line of code should throw the exception, which allows subtle and difficult-to-track failures that show up as passing tests. Second, it doesn’t offer the opportunity to fully inspect details of the exception itself, since the handling is outside the normal code flow of the test. Assert.Throws allows you to test a specific set of code for throwing an exception, and returns the exception during success so you can write further asserts against the exception instance itself.”

 As I know, nUnit allow specific of code throwing exception too.

To do this you should Set xunit.methodDisplay in your App.config file.

 xUnit default show Class Hierarchy in test explorer:

This test are non-readable for me. But you can configure xUnit to show only method name. To do this you should set xunit.methodDisplay in your App.config file:

You can also add it with json.

 In root directory of your test project add a file called “xunit.runner.json”.

 Right-click the file, properties. Select “Copy if newer” for copy to Output directory.

 Then in the file enter this json:

Sorry for long post but xUnit is very large subject. I think it is very interesting framework for UWP testing. Please share in comment which test framework you are using for testing?|||

I think we all agree that unit tests are important. I had been using nUnit before I wrote first UWP application. Now it has changed.