patch-package lets you easily make small necessary changes to packages in your folder, without the headache of forking repos or worse.

Patches created by are automatically and gracefully applied any time the contents of node_modules is changed by Yarn. You get warnings if the versions of patched dependencies change, and errors when the patch can no longer be applied.

You'll need , and also to run a project-local copy of (so patch-package can patch it... don't worry, it's a one-line change)

The output should be . If not, make sure is at the start of your environment variable.

First make changes to the files of a particular package in your node_modules folder, then run

where matches the name of the package you made changes to. This could take several minutes if you don't use Yarn yet.

If this is the first time you've used , it will create a folder called in the root dir of your app. Inside will be a file called or something, which is a diff between normal old and your fixed version. Commit this to share the fix with your team.

Use exactly the same process as for making patches in the first place, i.e. make more changes, run patch-package, commit the changes to the patch file.

Patches are applied automatically by the npm/yarn hook if you followed the set-up guide above. For manual use, run patch-package without arguments to apply all patches in your project. patch-package cannot apply individual packages just yet, but you can use the unix command, of course.

Nawh. It's not like monkey patching or anything. You're just fixing your dependencies.|||

patch-package - Persistently patch packages in node_modules