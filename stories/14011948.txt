Displays all environment variables. If you want to get details of a specific variable, use .

whatis shows description for user commands, system calls, library functions, and others in manual pages

whereis searches for executables, source files, and manual pages using a database built by system automatically.

which searches for executables in the directories specified by the environment variable PATH. This command will print the full path of the executable(s).

It can be used for the following purposes under UNIX or Linux.

The chmod command stands for "change mode" and allows you to change the read, write, and execute permissions on your files and folders. For more information on this command check this link.

The chown command stands for "change owner", and allows you to change the owner of a given file or folder, which can be a user and a group. Basic usage is simple forward first comes the user (owner), and then the group, delimited by a colon.

Copies a file from one location to other.

Where is the source path to the file and is the destination path to the file.

Lets you look at gzipped file without actually having to gunzip it.

Outputs the first 10 lines of file

Remove something from the printer queue.

Lists your files. has many options: lists files in 'long format', which contains the exact size of the file, who owns the file, who has the right to look at it, and when it was last modified. lists all files, including hidden files. For more information on this command check this link.

Shows the first part of a file (move with space and type q to quit).

Moves a file from one location to other.

Where is the source path to the file and is the destination path to the file.

Also it can be used for rename a file.

Removes a file. Using this command on a directory gives you an error. To remove a directory you have to pass which will remove the content of the directory recursively. Optionally you can use flag to force the deletion i.e. without any confirmations etc.

Outputs the last 10 lines of file. Use to output appended data as the file grows.

Updates access and modification time stamps of your file. If it doesn't exists, it'll be created.

awk is the most useful command for handling text files. It operates on an entire file line by line. By default it uses whitespace to separate the fields. The most common syntax for awk command is

Lets take following file . Here's the sample data that this file contains:

So now lets get only username from this file. Where specifies that on which base we are going to separate the fields. In our case it's . means print out the first matching field.

After running the above command you will get following output.

For more detail on how to use , check following link.

Remove sections from each line of files

show me columns 2 , 7 , and 9 with a space as a separator

display "Hello World" with newlines between words

display lines that have either "Lorem" or "dolor" in them.

output the lines of example.txt to 20 character width

Looks for text inside files. You can use grep to search for lines of text that match one or many regular expressions, and outputs only the matching lines.

You can also force grep to ignore word case by using option. can be used to search all files under the specified directory, for example:

And to search for words only. For more detail on , check following link.

take all lower case letters and make them upper case

take all spaces and make them into newlines

show only unique lines of example.txt (first you need to sort it, otherwise it won't see the overlap)

show the unique items for each line, and tell me how many instances it found

Tells you how many lines, words and characters there are in a file.

Where is lines, is words and is characters.

Moves you from one directory to other. Running this

moves you to home directory. This command accepts an optional , which moves you to that directory.

Tells you which directory you currently are in.

Lists stopped or background jobs; resume a stopped job in the background.

Shows the disk usage of files or directories. For more information on this command check this link

Brings the most recent job in the foreground.

Lists the jobs running in the background, giving the job number.

Lists your last logins of specified user.

Shows the manual for specified command.

Allows the current logged user to change his password.

Shows what your disk quota is.

Transfer files between a local host and a remote host or between two remote hosts.

This command also accepts an option that can be used to connect to specific port.

ssh (SSH client) is a program for logging into and executing commands on a remote machine.

This command also accepts an option that can be used to connect to specific port.

Kills (ends) the processes with the ID you gave.

Kill all processes with the name.

The symbol instructs the command to run as a background process in a subshell.

nohup stands for "No Hang Up". This allows to run command/process or shell script that can continue running in the background after you log out from a shell.

Combine it with to create background processes

The first line that you will write in bash script files is called . This line in any script determines the script's ability to be executed like a standalone executable without typing sh, bash, python, php etc beforehand in the terminal.

Creating variables in bash is similar to other languages. There are no data types. A variable in bash can contain a number, a character, a string of characters, etc. You have no need to declare a variable, just assigning a value to its reference will create it.

The above line creates a variable and assigns "hello world" to it. The value of variable is retrieved by putting the in the beginning of variable name.

Like other languages bash has also arrays. An array is variable containing multiple values. There's no maximum limit on the size of array. Array in bash are zero based. The first element is indexed with element 0. There are several ways for creating arrays in bash. Which are given below.

To display a value at specific index use following syntax:

If no index is supplied, array element 0 is assumed. To find out how many values there are in the array use the following syntax:

Bash has also support for the ternary conditions. Check some examples below.

Check some of the syntax on how to manipulate strings

if the pattern matches the beginning of the variable's value, delete the shortest part that matches and return the rest if the pattern matches the beginning of the variable's value, delete the longest part that matches and return the rest if the pattern matches the end of the variable's value, delete the shortest part that matches and return the rest if the pattern matches the end of the variable's value, delete the longest part that matches and return the rest the longest match to pattern in variable is replaced by string. Only the first match is replaced the longest match to pattern in variable is replaced by string. All matches are replaced returns the length of the value of the variable as a character string

As in almost any programming language, you can use functions to group pieces of code in a more logical way or practice the divine art of recursion. Declaring a function is just a matter of writing function my_func { my_code }. Calling a function is just like calling another program, you just write its name.

When you run the above example the function will output "world!". The above two functions and are identical. The main difference is function . This function, prints the first argument it receives. Arguments, within functions, are treated in the same manner as arguments given to the script.

The conditional statement in bash is similar to other programming languages. Conditions have many form like the most basic form is expression statement where statement is only executed if expression is true.

Sometime if conditions becoming confusing so you can write the same condition using the .

statement1 statement2 statement1 statement2 at least one of the statements is true str1=str2 str1 =str2 str str2 str str2 -n str1 str1 is not null (has length greater than 0) -z str1 -a file -d file -e file -f file file exists and is a regular file (i.e., not a directory or other special type of file) -r file -s file file exists and is not empty -w file -x file you have execute permission on file, or directory search permission if it is a directory -N file file was modified since it was last read -O file -G file file's group ID matches yours (or one of yours, if you are in multiple groups) file1 -nt file2 file1 -ot file2 -lt -le -eq -ge -gt -ne

There are three types of loops in bash. , and .

Make your bash scripts more robust by reliably performing cleanup.

When you do , your variable is only exported in this current shell and all its children, to persist in the future you can simply append in your file the command to export your variable

You can easily access your scripts by creating a bin folder in your home with , now all the scripts you put in this folder you can access in any directory.

If you can not access, try append the code below in your file and after do .

You can easily debug the bash script by passing different options to command. For example will not run commands and check for syntax errors only. echo commands before running them. echo commands after command-line processing.|||

bash-guide - A guide to learn bash