Hello and thank you for joining us for this talk. We are honored to be here in Beijing for the first time.

This is The End of Unsafety.

We live in an Age of Unsafety.

This age began in 1972, with the C language, and with Unix, and today it encompasses all that we see. Unsafety is at the foundation of the computing world.

And now we are beset on all sides. The barbarians are at the gate.

The internet is no longer safe, and the tools of the past are no longer up to the task of securing it.

That is why Rust exists.

My name is Brian Anderson, and this is my friend Alex Crichton, and we are both on the core team of the Rust programming language, as well as being employed to work on Rust by Mozilla Research.

Alex will you introduce yourself?

Alex: I've been working on Rust since 2013, where I have been responsible for large portions of the standard library and the broader library ecosystem. I'm also etc.

Brian: I've been working on Rust since 2010, involved in every aspect of its development. Much of my work has been in the standard library, tooling, platform support, community building. I have a special passion for software validation and ensuring that Rust is rock solid from release to release.

Here's the link to the materials for this talk. It includes the slides, speaker notes, and plenty of links.

I'll give you just a few seconds to make note if you like.

We're going to talk a lot about Rust later, but the first part of this talk is mostly about the motivation for Rust. Before we get into that though, a little bit about what Rust is.

Rust is first and foremost a high-performance, memory safe, systems programming language. And when I say "high-performance", I don't just mean it's fast, I mean it's among the very fastest programming languages. Think C, C++, and Fortran.

And when I say "memory safe" I mean that Rust software does not crash, at least not in the way that languages like C and C++ do, where a crash can lead to unpredictable, and - most importantly - exploitable behavior.

Rust provides the very best performance without sacrificing safety.

It accomplishes this by being designed completely around safe, zero-cost abstractions. The code you write corresponds quite directly to the code the machine runs. Accordingly, Rust has no runtime, and - crucially - no garbage collector. And this makes Rust extremely portable - Rust will run on just about anything with a CPU, everything from microcontrollers to supercomputers.

Rust is a thriving, collaboratively developed open source project sponsored by Mozilla, the makers of Firefox, who employ Alex and myself.

Here's an overview of what this talk is about.

First we're going to visit The Age of Unsafety, in which C was conceived, and the entire computing world we know was built on top of it.

Then we're going to visit Rust's history, why Mozilla created it, and how Rust evolved to provide solutions for the use cases commonly reserved for C and C++ alone.

We'll also explain the technique that makes Rust so powerful, called "ownership and borrowing".

With that context, then we will try to convince you that Rust is really exciting right now.

Then we'll speculate about the coming years for Rust, and the end of unsafety.

So now we're going to get to Rust.

In 2009 Brendan Eich, the creator of JavaScript, and co-founder of Mozilla, was thinking about these problems a lot, and despairing.

Now, the Rust of 2009 was much different from the Rust of today. But even then, the primary objective was to solve the memory safety problem, but the assumptions were different.

Back then, even the Rust team thought the only viable way to solve the memory safety problem was through a garbage collector, so Rust's heaps were garbage collected, but that garbage collection was thread-local. That way garbage collection in one thread would not interfere with progress in other threads. This was in important early constraint, and it influenced our ultimate solution.

Rust was, at the time, a green-threaded programming language in the style of Go, with ML influences.

But these assumptions did not hold.

And the reason that both these original assumptions didn't hold boils down to performance - for our use cases we can tolerate no runtime abstraction costs, and both garbage collection and green-threading impose significant overhead.

But it took us a long time to come to this conclusion, and we only came to it indirectly. For a long time we thought these costs would be acceptable - it was only after reaching an important insight about the design of Rust that we realized not only the importance of zero-cost abstractions, but also the attainability of zero-cost abstractions.

How can I maintain memory safety in a concurrent program without a global GC?

And the key question that drove that insight was this:

"How can I maintain memory safety in a concurrent program without a global GC?"

Let me illustrate the problem. Here we have two isolated threads, each with its own heap (on top), and stack (on bottom).

Now, imagine I create an object in thread A's heap.

Now, imagine that thread B wants that balloon, so I send it from thread A to thread B.

So far so good. But how should the language actually implement that? Well, since the Rust of 2009 had isolated heaps, perhaps we make a deep copy of the balloon, copying the balloon over to the other heap.

These are hard problems to solve, and it's easy to end up back in a situation like this...

With pointers from multiple threads pointing into the same objects.

And then we need a global GC again.

For months we batted around this problem of sending objects between threads without invalidating pointers, and without a garbage collector.

Around this time Niko Matsakis joined the team. Niko was an actual trained type theorist, and he brought some good ideas.

Niko was looking at a research project called Cyclone and wondering if we could learn from it. Cyclone was a safe dialect of C that used static analysis to track the validity of pointers.

Cyclone's system was somewhat limited and did not directly solve our multithreading problem.

But also at the same time we became aware of another research project at Microsoft called Singularity. It was an attempt to reimagine the operating system in .NET. There wasn't a lot of information coming out of Microsoft but what caught our eye was their approach to concurrency. In Singularity they employed a novel technique to transfer ownership of - and sole access to - entire regions of memory between threads, by only copying a pointer.

In a real sense Rust is Cyclone plus Singularity.

And the result in Rust is what we call "ownership and borrowing".

In Rust, every value has a single, statically-known, owning path in the code, at any time.

Pointers to values have limited duration, known as a "lifetime", that is also statically tracked.

All pointers to all values are known statically.

This is kind of the key takeaway of this whole presentation. Ownership and borrowing is what makes Rust, Rust.

Now there are actually are caveats and exceptions, but if you understand this, you understand how Rust approaches the memory safety problem.

One of the neat things about ownership and borrowing as a computational model, is that the concepts are familiar and natural. Ownership and borrowing in Rust is similar to ownership and borrowing of physical objects.

So this is the portion of the talk where Alex and I usually do a live demonstration of balloon borrowing. Unfortunately, I failed to acquire the necessary helium yesterday, so we're going to demonstrate virtually instead.|||

