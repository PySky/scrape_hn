You generally start with the defaults and fix issues along the way. Here’s a quick guide on how to choose your encoding and the collation right from the start, and avoid the pain of debugging your encoding issues.

The encoding decides how data is stored. The collation is used when comparing data, for example in a WHERE clause (equal or LIKE), or with unicity constraints on text columns.

Note that you can set both encoding and collation at the server level, at the database level, at the table level or even for particular columns only. You’ll find SQL commands at the end of this article to check and modify that.

If you need to handle special characters, like letters with accents, people will usually tell you to go for a utf8 encoding. Be careful, this encoding won’t handle smileys. For that you’ll need utf8mb4, available since MySQL 5.5.3. If you don’t care about any of that, simply go with the default, latin1.

NB: a note of warning when migrating from utf8 to utf8mb4. In utf8, a character can be encoded in a maximum of 3 bytes. In utf8mb4, we add an extra byte to store special characters like smileys. That changes the maximum length a column or index can hold. So if a column was a varchar(256) in utf8, it should now be a varchar(191) in utf8mb4.

 More info in this excellent article on the matter.

Again, the collation is used when comparing data, for example in a WHERE clause (equal or LIKE), or with unicity constraints on text columns. Questions to ask yourself are:

With utf8 you usually go with utf8_general_ci (or utf8mb4_unicode_ci with utf8mb4). Notice the “_ci” part at the end? It means “case insensitive” and implicitly also “accents insensitive”. With such a collation, lower/upper case and accents will be ignored in your searches and constraints on text columns.

If you care about accents, go for utf8_bin (or utf8mb4_bin). Careful, it’s also case-sensitive. There doesn’t seem to be a collation that ignores case but not accents (utf8_general_cs, for “case-sensitive”, is experimental and might not work for you). You’ll have to work around that in your queries.

The default collation for latin1 encoding is latin1_swedish_ci (notice the “_ci” at the end). For a case-sensitive collation, go for latin1_general_cs or latin1_bin.

For the examples below I’ll use a database called “neocamino”.

You’ll have to check you MySQL config. For Rails developper, you can set it in your config/database.yml file:

Here’s how to check the database settings:

And to modify it:|||

You generally start with the defaults and fix issues along the way. Here's a quick guide on how to choose your encoding and the collation right from the start, and avoid the pain of debugging your encoding issues. The encoding decides how data is stored. The collation is used when comparing data, for example in…