My notes how to use Google Accounts with Kubernetes cluster with Role Based Access-Control (RBAC) authorization mode.

I have self-hosted Kubernetes setup via on AWS. How to setup the Kubernetes cluster 1.6.0-beta I described in the article. Today I use Kubernetes 1.6.1. API server listens only secure port and by default the authorization done via client certificate.

Thanks to Micah Hausle’s article Reduce administrative toil with Kubernetes 1.3 and based on it I created a step list before setup a new cluster:

Step 1: Creating a Google API Console project and client ID

- Go to https://console.developers.google.com/projectselector/apis/library

- From the project drop-down, select an existing project, or create a new one by selecting Create a new project

- In the sidebar under “API Manager”, select Credentials, then select the OAuth consent screen tab.

- Choose an Email Address, specify a Product Name, and press Save.

- In the Credentials tab, select the New credentials drop-down list, and choose OAuth client ID.

- From the resulting OAuth client dialog box, copy the Client ID. The Client ID lets your app access enabled Google APIs.

- Download the client secret JSON file of the credentials.

After we initialized the master instance, need to update the arguments in the . Each argument should be on a separate line. More details about OIDC attributes here.

Add any network CNI plugin and the cluster is ready. Copy to local and change the cluster ip.

3.1 Install the k8s helper on the client machine:

Would open the browser and ask permissions. After that, it provides you a token in the browser. Copy it and paste to the terminal for k8s-oidc-helper. The output of the command should look like:

Copy everything after users and append to you existing user list in the . Now we have 2 users. One from the new cluster configuration and one we added.

Test the id-token using https://jwt.io/. Be sure that you have in the decoded message. Test connection of the new user:

It proves that id-token and api server arguments work and email is extracted from a request.

For now, we grant Admin rights to the user name@example.com. We created an authorization specification:

After applying changes via . Do the test again:|||

My notes how to use Google Accounts with Kubernetes cluster with Role Based Access-Control (RBAC) authorization mode. I have self-hosted Kubernetes setup via kubeadm on AWS. How to setup the…