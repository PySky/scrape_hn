For many people, actually running your code in a production environment is an afterthought, and just writing the code is where the real challenge is at. While this is mostly true in my experiences, finding a reliable and easy way to run your app can be pretty difficult itself.

There are a few things you need to consider when running your app(s).

This is where the Node package is really useful. It helps you easily manage all of the above problems and more, which I'll describe in the next few sections.

is a command-line utility for Node applications written entirely in JavaScript. It is meant to simplify your life in a production environment by managing (starting, stopping, restarting, etc) Node processes and their configurations. You can use it on the command line or programmatically (via ) within your Node code.

You can specify these configurations via the command line or a JSON configuration file. I personally prefer the JSON file since you can configure multiple Node processes in a single file, making it easy to launch all of your processes at once. This way I don't hesitate to break up a big monolith in to multiple independent services since managing them will be much easier thanks to utilities like .

It works underneath by running Flatiron server as a daemon process to manage your other daemon processes, so if/when your code fails and crashes, will be there to automatically restart it and hopefully avoid downtime for your users. Running with a Flatiron server is an easy way to keep the utility up and running while monitoring for user input, and thanks to the CLI plugin this was easy for the developers to do. If you're going to create a program like (i.e. a long-running daemon process that receives user commands) then I'd highly recommend you do it this way. It will make things a whole lot easier.

The interprocess communication happens via sockets, which is handled by the high-level library. The socket files that allow communication to be re-opened between processes reside in . Naturally, the messages between the processes are serialized as JSON. It's another helpful library to check out if you ever want event-based socket communication.

I should note, one important feature about (and other process management tools like it) is that you can use it for non-Node applications as well, like Python, Ruby, etc. The , or command flag (which you'll see later), let's you tell how to run your app. Using this, you can tell it to use any other interpreter for execution, like Python:

So even if you don't like Node, or just need to use a different language for a project, keep in mind that this is still useful to you.

Ok, on to the important part, how to actually use the damn thing. Let's start out with a simple example, like just starting and stopping a web-app. For our example, we'll be starting and stopping a "hello world" Express server:

Install with , and start the server with:

This will launch the Express app as a background process. The flag appends logs to the default log file located in 's root directory ( by default on Unix systems). You won't be able to the app without this flag if the log file already exists.

To stop the process, just refer to it by id ( ), uid ( ), pid ( ), index ( ), or script name ( ):

While this is nice, it could be better. isn't very unique to our app, and the PID is hard to remember, so why give it a better name? That way you don't have to keep running to get info on your running process.

Now you can just stop it with:

Two arguments on the command line isn't so bad, but it can become a bit much when you start adding arguments for log files, different Node executables, working directories, and more. So instead of specifying everything on the command line, you can use a JSON configuration file like this:

Assuming this file is in your current working directory and named , use it like this:

As you can see, you can even tell which version of Node to use, which is really convenient when you have multiple apps on a single server that require different versions (like the io.js fork).

There are a few tools to help you run Node apps, most notably and . I've tried both and thought was a bit easier to use (mostly just because it's simpler and has less features/options to worry about), while is more powerful. If you're really feeling ambitious, you can try out 's cluster mode or API to help monitor metrics about your running app.

What other interesting configurations and uses do you have for process management tools like ? Let us know in the comments!|||

