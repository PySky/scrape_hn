In the Go language (and now Apple’s Swift), there’s a new control-flow mechanism: .

When you tag a function call with the keyword, its execution is deferred until the end of the current scope. This makes it easy to construct an ad-hoc use of the RAII pattern — handy for placing resource initialization and finalization next to each other, to make it less likely that you’ll forget to finalize a resource.

I was curious whether it was possible to do something similar in C. It turns out it’s pretty straightforward.

Go’s canonical example of using is error-handling when opening two files. Here’s their (intentionally sloppy) example, translated into C:

This is sloppy since, if exists but doesn’t, a file pointer is leaked.

By consolidating initialization and finalization using , the bug vanishes:

Now, there are 3 possible routes:

To use this, I just need to add a few lines of code:

How does the magic work? Starting from the last line:

There you have it. — and all the code cleanliness it offers — in C.|||

