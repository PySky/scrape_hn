Most GNOME Shell extensions do one thing: Add a button with a dropdown menu to the panel, displaying information and exposing functionality. Even in its simplest form, creating such an extension is a nontrivial task involving a poorly documented and ever-changing JavaScript API.

Argos lets you write GNOME Shell extensions in a language that every Linux user is already intimately familiar with: Bash scripts.

More precisely, Argos is a GNOME Shell extension that turns executables' standard output into panel dropdown menus. It is inspired by, and fully compatible with, the BitBar app for macOS. Argos supports many BitBar plugins without modifications, giving you access to a large library of well-tested scripts in addition to being able to write your own.

Clone the repository, then copy or symlink the directory into . Restart GNOME Shell by pressing , then entering . On some systems, you may additionally have to enable the Argos extension using GNOME Tweak Tool.

Argos plugins are great for monitoring your system, displaying anything that a command line script can output in a convenient, unobtrusive place.

Extension developers often rely on the central GNOME Shell log for debugging. That log may be viewed in a terminal with – but it is also an excellent target for our first sample plugin:

Make it executable and drop it into , and you should see something like this:

As the plugin updates every second, new log entries are shown almost without delay.

Plugins are not limited to displaying information – they can also perform actions when the user clicks on a menu item. This allows you to rapidly create launchers that look and act exactly like you want.

Note how the Wikipedia icon is downloaded from the web and serialized into the menu item without ever needing to be saved to disk. All of this comes from a file smaller than the configuration files of most dedicated "launcher" extensions, while providing much more flexibility. Argos plugins blur the line between configuration and code.

An Argos plugin is just an executable file that writes to stdout. As such, any language can be used to create plugins. Switching from Bash to Python gives you easy access to the GNOME platform APIs, enabling even more powerful launchers.

And there you have it: A working clone of a full-blown GNOME Shell extension – implemented using a fraction of the code.

Argos basically pipes standard output into a panel menu. This makes for some very cool plugins like this output viewer:

It's at your fingertips! Of course, this approach works with any other terminal program as well.

Note that the 6.2% CPU usage by in the screencast is not caused by the plugin or Argos – it was deliberately created for this screencast to demonstrate some activity. Idle CPU usage with this plugin is actually below 1%.

Argos monitors the directory for changes. Any executable file found in this directory is considered a plugin. Files whose name starts with a dot ( ) and files in subdirectories are ignored.

Plugins are run and their standard output is interpreted as described below. For each plugin, a panel button with a dropdown menu is created. The arrangement of buttons from left to right follows the alphabetical order of the files they are generated from (except when a is explicitly specified in the filename). New plugins and edits to existing plugins are automatically detected and reflected in the panel.

A plugin file may be named anything (it only needs to be executable), but if its name has the special form

may be omitted entirely (in which case the button is placed before all other buttons on the right-hand side of the panel) while can be left empty. For example, a script named is updated every 10 seconds, the button belonging to is positioned just right of the GNOME Shell clock, and is displayed left of the "Activities" button and updated every minute.

Argos plugins are executables (such as shell scripts) that print to standard output lines of the following form:

All attributes are optional, so the most basic plugins simply print lines consisting of text to be displayed. To include whitespace, attribute values may be quoted using the same convention employed by most command line shells.

Lines containing only dashes ( ) are separators.

Lines above the first separator belong to the button itself. If there are multiple such lines, they are displayed in succession, each of them for 3 seconds before switching to the next. Additionally, all button lines get a dropdown menu item, except if their attribute is set to .

Lines below the first separator are rendered as dropdown menu items. Further separators create graphical separator menu items.

Lines beginning with are rendered in a submenu associated with the preceding unindented line. While Argos supports nested submenus in principle, GNOME Shell does not render them correctly as of version 3.22.

Emoji codes like and in the line text are replaced with their corresponding Unicode characters (unless the attribute is set to ). Note that unpatched GNOME Shell does not yet support multicolor emoji.

ANSI SGR escape sequences and Pango markup tags may be used for styling. This can be disabled by setting the and attributes, respectively, to .

Backslash escapes such as and in the line text are converted to their corresponding characters (newline and tab in this case), which can be prevented by setting the attribute to . Newline escapes can be used to create multi-line menu items.

Control how the line is rendered.

Define actions to be performed when the user clicks on the line's menu item.

Action attributes are not mutually exclusive. Any combination of them may be associated with the same item, and all actions are executed when the item is clicked.

These screenshots show how some scripts from the BitBar plugin repository look when rendered by Argos compared to the "canonical" BitBar rendering (macOS screenshots taken from https://getbitbar.com).

GNOME Shell is a difficult platform to develop for. The Gjs documentation hasn't been updated in three years and is missing important classes. Once again, Valadoc saved the day for me. While not fully identical to the Gjs API, Valadoc is the best manual for GNOME on the web today.

Argos includes emojilib's emoji name/character mappings. It's wonderful that such a comprehensive and well-maintained library is so easily available.

Without BitBar, Argos wouldn't be what it is today, or, more likely, wouldn't exist at all. There have been many attempts on many platforms to simplify panel menu creation, but BitBar was the first to get it right by finding the balance between text-only configuration and dynamic output. Thank you for showing the way!

Contributors are always welcome. However, please file an issue describing what you intend to add before opening a pull request, especially for new features! I have a clear vision of what I want (and do not want) Argos to be, so discussing potential additions might help you avoid duplication and wasted work.

By contributing, you agree to release your changes under the same license as the rest of the project (see below).

Released under the terms of the GNU General Public License, version 3|||

argos - Create GNOME Shell extensions in seconds