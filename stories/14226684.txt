I personally love writing APIs, it’s my favourite thing about backend development. As developers we interact with APIs all the time, to process payments with stripe, for geolocation with google maps, to retrieve tweets etc …

So what exactly makes a RESTful API great ? What can you do to ensure that it’s easy to use for other developers ? Let’s dive right in.

In your responses, you should separate the metadata from the the body and put them in their own objects.

When creating a new resource, always return a instead of a . It’s a common mistake developers make. Another best practice is to return a url to the newly created resource in the location header of your response. You can also choose to send a serialised version of the resource in the response body. (I personally like to do that).

Properly dealing with errors is crucial to provide the best experience possible to your users. Just like with normal responses, always include the status code in the meta part.

You should also provide a nice descriptive message detailing the cause of the error as well as a potential solution to fix it.

Doing this will help the consumers of your API to gracefully handle these errors on the client side. They will thank you for it.

This part is subject to many passionate debates, apparently it’s a very touchy topic.

Below I will list the most common status codes, what they mean and how I use them.

Caching is great and is a must when deploying an API. It helps a huge amount with performace by reducing server load as you are not required to perform the same action multiple times. You could choose to do it manually or use a reverse proxy like nginx or even something like varnish to handle that for you.

Caching will return a if the resource hasn’t changed. The great thing about this is that it does not affect your rate limiting, so there’s literally no excuse not to implement it.

For security and performance reasons you want limit the amount of requests made against your API. You must return the maximum and remaining number of request allowed for a given user in a particular time window (which you are free to determine).

You want to enable CORS to allow requests from browsers using AJAX. This can be done by setting the following headers:|||

I am a full stack developer located in Paris, France.  Specialised in Node.js and Python